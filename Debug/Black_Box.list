
Black_Box.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e738  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002478  0800e8d8  0800e8d8  0000f8d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010d50  08010d50  000121d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08010d50  08010d50  00011d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010d58  08010d58  000121d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010d58  08010d58  00011d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010d5c  08010d5c  00011d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08010d60  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000080f0  200001d8  08010f38  000121d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200082c8  08010f38  000122c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000121d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017adb  00000000  00000000  00012208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003567  00000000  00000000  00029ce3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001450  00000000  00000000  0002d250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001033  00000000  00000000  0002e6a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a5a1  00000000  00000000  0002f6d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ae39  00000000  00000000  00049c74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a00d9  00000000  00000000  00064aad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00104b86  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ac0  00000000  00000000  00104bcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  0010b68c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e8c0 	.word	0x0800e8c0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	0800e8c0 	.word	0x0800e8c0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_frsub>:
 8000c58:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000c5c:	e002      	b.n	8000c64 <__addsf3>
 8000c5e:	bf00      	nop

08000c60 <__aeabi_fsub>:
 8000c60:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c64 <__addsf3>:
 8000c64:	0042      	lsls	r2, r0, #1
 8000c66:	bf1f      	itttt	ne
 8000c68:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c6c:	ea92 0f03 	teqne	r2, r3
 8000c70:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c74:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c78:	d06a      	beq.n	8000d50 <__addsf3+0xec>
 8000c7a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c7e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c82:	bfc1      	itttt	gt
 8000c84:	18d2      	addgt	r2, r2, r3
 8000c86:	4041      	eorgt	r1, r0
 8000c88:	4048      	eorgt	r0, r1
 8000c8a:	4041      	eorgt	r1, r0
 8000c8c:	bfb8      	it	lt
 8000c8e:	425b      	neglt	r3, r3
 8000c90:	2b19      	cmp	r3, #25
 8000c92:	bf88      	it	hi
 8000c94:	4770      	bxhi	lr
 8000c96:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c9e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ca2:	bf18      	it	ne
 8000ca4:	4240      	negne	r0, r0
 8000ca6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000caa:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000cae:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000cb2:	bf18      	it	ne
 8000cb4:	4249      	negne	r1, r1
 8000cb6:	ea92 0f03 	teq	r2, r3
 8000cba:	d03f      	beq.n	8000d3c <__addsf3+0xd8>
 8000cbc:	f1a2 0201 	sub.w	r2, r2, #1
 8000cc0:	fa41 fc03 	asr.w	ip, r1, r3
 8000cc4:	eb10 000c 	adds.w	r0, r0, ip
 8000cc8:	f1c3 0320 	rsb	r3, r3, #32
 8000ccc:	fa01 f103 	lsl.w	r1, r1, r3
 8000cd0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__addsf3+0x78>
 8000cd6:	4249      	negs	r1, r1
 8000cd8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cdc:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000ce0:	d313      	bcc.n	8000d0a <__addsf3+0xa6>
 8000ce2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000ce6:	d306      	bcc.n	8000cf6 <__addsf3+0x92>
 8000ce8:	0840      	lsrs	r0, r0, #1
 8000cea:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cee:	f102 0201 	add.w	r2, r2, #1
 8000cf2:	2afe      	cmp	r2, #254	@ 0xfe
 8000cf4:	d251      	bcs.n	8000d9a <__addsf3+0x136>
 8000cf6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000cfa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cfe:	bf08      	it	eq
 8000d00:	f020 0001 	biceq.w	r0, r0, #1
 8000d04:	ea40 0003 	orr.w	r0, r0, r3
 8000d08:	4770      	bx	lr
 8000d0a:	0049      	lsls	r1, r1, #1
 8000d0c:	eb40 0000 	adc.w	r0, r0, r0
 8000d10:	3a01      	subs	r2, #1
 8000d12:	bf28      	it	cs
 8000d14:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d18:	d2ed      	bcs.n	8000cf6 <__addsf3+0x92>
 8000d1a:	fab0 fc80 	clz	ip, r0
 8000d1e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d22:	ebb2 020c 	subs.w	r2, r2, ip
 8000d26:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d2a:	bfaa      	itet	ge
 8000d2c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d30:	4252      	neglt	r2, r2
 8000d32:	4318      	orrge	r0, r3
 8000d34:	bfbc      	itt	lt
 8000d36:	40d0      	lsrlt	r0, r2
 8000d38:	4318      	orrlt	r0, r3
 8000d3a:	4770      	bx	lr
 8000d3c:	f092 0f00 	teq	r2, #0
 8000d40:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000d44:	bf06      	itte	eq
 8000d46:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000d4a:	3201      	addeq	r2, #1
 8000d4c:	3b01      	subne	r3, #1
 8000d4e:	e7b5      	b.n	8000cbc <__addsf3+0x58>
 8000d50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d58:	bf18      	it	ne
 8000d5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d5e:	d021      	beq.n	8000da4 <__addsf3+0x140>
 8000d60:	ea92 0f03 	teq	r2, r3
 8000d64:	d004      	beq.n	8000d70 <__addsf3+0x10c>
 8000d66:	f092 0f00 	teq	r2, #0
 8000d6a:	bf08      	it	eq
 8000d6c:	4608      	moveq	r0, r1
 8000d6e:	4770      	bx	lr
 8000d70:	ea90 0f01 	teq	r0, r1
 8000d74:	bf1c      	itt	ne
 8000d76:	2000      	movne	r0, #0
 8000d78:	4770      	bxne	lr
 8000d7a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000d7e:	d104      	bne.n	8000d8a <__addsf3+0x126>
 8000d80:	0040      	lsls	r0, r0, #1
 8000d82:	bf28      	it	cs
 8000d84:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d88:	4770      	bx	lr
 8000d8a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d8e:	bf3c      	itt	cc
 8000d90:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d94:	4770      	bxcc	lr
 8000d96:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d9a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d9e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000da2:	4770      	bx	lr
 8000da4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000da8:	bf16      	itet	ne
 8000daa:	4608      	movne	r0, r1
 8000dac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000db0:	4601      	movne	r1, r0
 8000db2:	0242      	lsls	r2, r0, #9
 8000db4:	bf06      	itte	eq
 8000db6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000dba:	ea90 0f01 	teqeq	r0, r1
 8000dbe:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000dc2:	4770      	bx	lr

08000dc4 <__aeabi_ui2f>:
 8000dc4:	f04f 0300 	mov.w	r3, #0
 8000dc8:	e004      	b.n	8000dd4 <__aeabi_i2f+0x8>
 8000dca:	bf00      	nop

08000dcc <__aeabi_i2f>:
 8000dcc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000dd0:	bf48      	it	mi
 8000dd2:	4240      	negmi	r0, r0
 8000dd4:	ea5f 0c00 	movs.w	ip, r0
 8000dd8:	bf08      	it	eq
 8000dda:	4770      	bxeq	lr
 8000ddc:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000de0:	4601      	mov	r1, r0
 8000de2:	f04f 0000 	mov.w	r0, #0
 8000de6:	e01c      	b.n	8000e22 <__aeabi_l2f+0x2a>

08000de8 <__aeabi_ul2f>:
 8000de8:	ea50 0201 	orrs.w	r2, r0, r1
 8000dec:	bf08      	it	eq
 8000dee:	4770      	bxeq	lr
 8000df0:	f04f 0300 	mov.w	r3, #0
 8000df4:	e00a      	b.n	8000e0c <__aeabi_l2f+0x14>
 8000df6:	bf00      	nop

08000df8 <__aeabi_l2f>:
 8000df8:	ea50 0201 	orrs.w	r2, r0, r1
 8000dfc:	bf08      	it	eq
 8000dfe:	4770      	bxeq	lr
 8000e00:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e04:	d502      	bpl.n	8000e0c <__aeabi_l2f+0x14>
 8000e06:	4240      	negs	r0, r0
 8000e08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e0c:	ea5f 0c01 	movs.w	ip, r1
 8000e10:	bf02      	ittt	eq
 8000e12:	4684      	moveq	ip, r0
 8000e14:	4601      	moveq	r1, r0
 8000e16:	2000      	moveq	r0, #0
 8000e18:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e1c:	bf08      	it	eq
 8000e1e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e22:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e26:	fabc f28c 	clz	r2, ip
 8000e2a:	3a08      	subs	r2, #8
 8000e2c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e30:	db10      	blt.n	8000e54 <__aeabi_l2f+0x5c>
 8000e32:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e36:	4463      	add	r3, ip
 8000e38:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e3c:	f1c2 0220 	rsb	r2, r2, #32
 8000e40:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000e44:	fa20 f202 	lsr.w	r2, r0, r2
 8000e48:	eb43 0002 	adc.w	r0, r3, r2
 8000e4c:	bf08      	it	eq
 8000e4e:	f020 0001 	biceq.w	r0, r0, #1
 8000e52:	4770      	bx	lr
 8000e54:	f102 0220 	add.w	r2, r2, #32
 8000e58:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e5c:	f1c2 0220 	rsb	r2, r2, #32
 8000e60:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e64:	fa21 f202 	lsr.w	r2, r1, r2
 8000e68:	eb43 0002 	adc.w	r0, r3, r2
 8000e6c:	bf08      	it	eq
 8000e6e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e72:	4770      	bx	lr

08000e74 <__aeabi_uldivmod>:
 8000e74:	b953      	cbnz	r3, 8000e8c <__aeabi_uldivmod+0x18>
 8000e76:	b94a      	cbnz	r2, 8000e8c <__aeabi_uldivmod+0x18>
 8000e78:	2900      	cmp	r1, #0
 8000e7a:	bf08      	it	eq
 8000e7c:	2800      	cmpeq	r0, #0
 8000e7e:	bf1c      	itt	ne
 8000e80:	f04f 31ff 	movne.w	r1, #4294967295
 8000e84:	f04f 30ff 	movne.w	r0, #4294967295
 8000e88:	f000 b988 	b.w	800119c <__aeabi_idiv0>
 8000e8c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e90:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e94:	f000 f806 	bl	8000ea4 <__udivmoddi4>
 8000e98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ea0:	b004      	add	sp, #16
 8000ea2:	4770      	bx	lr

08000ea4 <__udivmoddi4>:
 8000ea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ea8:	9d08      	ldr	r5, [sp, #32]
 8000eaa:	468e      	mov	lr, r1
 8000eac:	4604      	mov	r4, r0
 8000eae:	4688      	mov	r8, r1
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d14a      	bne.n	8000f4a <__udivmoddi4+0xa6>
 8000eb4:	428a      	cmp	r2, r1
 8000eb6:	4617      	mov	r7, r2
 8000eb8:	d962      	bls.n	8000f80 <__udivmoddi4+0xdc>
 8000eba:	fab2 f682 	clz	r6, r2
 8000ebe:	b14e      	cbz	r6, 8000ed4 <__udivmoddi4+0x30>
 8000ec0:	f1c6 0320 	rsb	r3, r6, #32
 8000ec4:	fa01 f806 	lsl.w	r8, r1, r6
 8000ec8:	fa20 f303 	lsr.w	r3, r0, r3
 8000ecc:	40b7      	lsls	r7, r6
 8000ece:	ea43 0808 	orr.w	r8, r3, r8
 8000ed2:	40b4      	lsls	r4, r6
 8000ed4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ed8:	fa1f fc87 	uxth.w	ip, r7
 8000edc:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ee0:	0c23      	lsrs	r3, r4, #16
 8000ee2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000ee6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000eea:	fb01 f20c 	mul.w	r2, r1, ip
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	d909      	bls.n	8000f06 <__udivmoddi4+0x62>
 8000ef2:	18fb      	adds	r3, r7, r3
 8000ef4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ef8:	f080 80ea 	bcs.w	80010d0 <__udivmoddi4+0x22c>
 8000efc:	429a      	cmp	r2, r3
 8000efe:	f240 80e7 	bls.w	80010d0 <__udivmoddi4+0x22c>
 8000f02:	3902      	subs	r1, #2
 8000f04:	443b      	add	r3, r7
 8000f06:	1a9a      	subs	r2, r3, r2
 8000f08:	b2a3      	uxth	r3, r4
 8000f0a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000f0e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000f12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000f16:	fb00 fc0c 	mul.w	ip, r0, ip
 8000f1a:	459c      	cmp	ip, r3
 8000f1c:	d909      	bls.n	8000f32 <__udivmoddi4+0x8e>
 8000f1e:	18fb      	adds	r3, r7, r3
 8000f20:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f24:	f080 80d6 	bcs.w	80010d4 <__udivmoddi4+0x230>
 8000f28:	459c      	cmp	ip, r3
 8000f2a:	f240 80d3 	bls.w	80010d4 <__udivmoddi4+0x230>
 8000f2e:	443b      	add	r3, r7
 8000f30:	3802      	subs	r0, #2
 8000f32:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000f36:	eba3 030c 	sub.w	r3, r3, ip
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	b11d      	cbz	r5, 8000f46 <__udivmoddi4+0xa2>
 8000f3e:	40f3      	lsrs	r3, r6
 8000f40:	2200      	movs	r2, #0
 8000f42:	e9c5 3200 	strd	r3, r2, [r5]
 8000f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d905      	bls.n	8000f5a <__udivmoddi4+0xb6>
 8000f4e:	b10d      	cbz	r5, 8000f54 <__udivmoddi4+0xb0>
 8000f50:	e9c5 0100 	strd	r0, r1, [r5]
 8000f54:	2100      	movs	r1, #0
 8000f56:	4608      	mov	r0, r1
 8000f58:	e7f5      	b.n	8000f46 <__udivmoddi4+0xa2>
 8000f5a:	fab3 f183 	clz	r1, r3
 8000f5e:	2900      	cmp	r1, #0
 8000f60:	d146      	bne.n	8000ff0 <__udivmoddi4+0x14c>
 8000f62:	4573      	cmp	r3, lr
 8000f64:	d302      	bcc.n	8000f6c <__udivmoddi4+0xc8>
 8000f66:	4282      	cmp	r2, r0
 8000f68:	f200 8105 	bhi.w	8001176 <__udivmoddi4+0x2d2>
 8000f6c:	1a84      	subs	r4, r0, r2
 8000f6e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000f72:	2001      	movs	r0, #1
 8000f74:	4690      	mov	r8, r2
 8000f76:	2d00      	cmp	r5, #0
 8000f78:	d0e5      	beq.n	8000f46 <__udivmoddi4+0xa2>
 8000f7a:	e9c5 4800 	strd	r4, r8, [r5]
 8000f7e:	e7e2      	b.n	8000f46 <__udivmoddi4+0xa2>
 8000f80:	2a00      	cmp	r2, #0
 8000f82:	f000 8090 	beq.w	80010a6 <__udivmoddi4+0x202>
 8000f86:	fab2 f682 	clz	r6, r2
 8000f8a:	2e00      	cmp	r6, #0
 8000f8c:	f040 80a4 	bne.w	80010d8 <__udivmoddi4+0x234>
 8000f90:	1a8a      	subs	r2, r1, r2
 8000f92:	0c03      	lsrs	r3, r0, #16
 8000f94:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f98:	b280      	uxth	r0, r0
 8000f9a:	b2bc      	uxth	r4, r7
 8000f9c:	2101      	movs	r1, #1
 8000f9e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000fa2:	fb0e 221c 	mls	r2, lr, ip, r2
 8000fa6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000faa:	fb04 f20c 	mul.w	r2, r4, ip
 8000fae:	429a      	cmp	r2, r3
 8000fb0:	d907      	bls.n	8000fc2 <__udivmoddi4+0x11e>
 8000fb2:	18fb      	adds	r3, r7, r3
 8000fb4:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000fb8:	d202      	bcs.n	8000fc0 <__udivmoddi4+0x11c>
 8000fba:	429a      	cmp	r2, r3
 8000fbc:	f200 80e0 	bhi.w	8001180 <__udivmoddi4+0x2dc>
 8000fc0:	46c4      	mov	ip, r8
 8000fc2:	1a9b      	subs	r3, r3, r2
 8000fc4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000fc8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000fcc:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000fd0:	fb02 f404 	mul.w	r4, r2, r4
 8000fd4:	429c      	cmp	r4, r3
 8000fd6:	d907      	bls.n	8000fe8 <__udivmoddi4+0x144>
 8000fd8:	18fb      	adds	r3, r7, r3
 8000fda:	f102 30ff 	add.w	r0, r2, #4294967295
 8000fde:	d202      	bcs.n	8000fe6 <__udivmoddi4+0x142>
 8000fe0:	429c      	cmp	r4, r3
 8000fe2:	f200 80ca 	bhi.w	800117a <__udivmoddi4+0x2d6>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	1b1b      	subs	r3, r3, r4
 8000fea:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000fee:	e7a5      	b.n	8000f3c <__udivmoddi4+0x98>
 8000ff0:	f1c1 0620 	rsb	r6, r1, #32
 8000ff4:	408b      	lsls	r3, r1
 8000ff6:	fa22 f706 	lsr.w	r7, r2, r6
 8000ffa:	431f      	orrs	r7, r3
 8000ffc:	fa0e f401 	lsl.w	r4, lr, r1
 8001000:	fa20 f306 	lsr.w	r3, r0, r6
 8001004:	fa2e fe06 	lsr.w	lr, lr, r6
 8001008:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800100c:	4323      	orrs	r3, r4
 800100e:	fa00 f801 	lsl.w	r8, r0, r1
 8001012:	fa1f fc87 	uxth.w	ip, r7
 8001016:	fbbe f0f9 	udiv	r0, lr, r9
 800101a:	0c1c      	lsrs	r4, r3, #16
 800101c:	fb09 ee10 	mls	lr, r9, r0, lr
 8001020:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8001024:	fb00 fe0c 	mul.w	lr, r0, ip
 8001028:	45a6      	cmp	lr, r4
 800102a:	fa02 f201 	lsl.w	r2, r2, r1
 800102e:	d909      	bls.n	8001044 <__udivmoddi4+0x1a0>
 8001030:	193c      	adds	r4, r7, r4
 8001032:	f100 3aff 	add.w	sl, r0, #4294967295
 8001036:	f080 809c 	bcs.w	8001172 <__udivmoddi4+0x2ce>
 800103a:	45a6      	cmp	lr, r4
 800103c:	f240 8099 	bls.w	8001172 <__udivmoddi4+0x2ce>
 8001040:	3802      	subs	r0, #2
 8001042:	443c      	add	r4, r7
 8001044:	eba4 040e 	sub.w	r4, r4, lr
 8001048:	fa1f fe83 	uxth.w	lr, r3
 800104c:	fbb4 f3f9 	udiv	r3, r4, r9
 8001050:	fb09 4413 	mls	r4, r9, r3, r4
 8001054:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8001058:	fb03 fc0c 	mul.w	ip, r3, ip
 800105c:	45a4      	cmp	ip, r4
 800105e:	d908      	bls.n	8001072 <__udivmoddi4+0x1ce>
 8001060:	193c      	adds	r4, r7, r4
 8001062:	f103 3eff 	add.w	lr, r3, #4294967295
 8001066:	f080 8082 	bcs.w	800116e <__udivmoddi4+0x2ca>
 800106a:	45a4      	cmp	ip, r4
 800106c:	d97f      	bls.n	800116e <__udivmoddi4+0x2ca>
 800106e:	3b02      	subs	r3, #2
 8001070:	443c      	add	r4, r7
 8001072:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8001076:	eba4 040c 	sub.w	r4, r4, ip
 800107a:	fba0 ec02 	umull	lr, ip, r0, r2
 800107e:	4564      	cmp	r4, ip
 8001080:	4673      	mov	r3, lr
 8001082:	46e1      	mov	r9, ip
 8001084:	d362      	bcc.n	800114c <__udivmoddi4+0x2a8>
 8001086:	d05f      	beq.n	8001148 <__udivmoddi4+0x2a4>
 8001088:	b15d      	cbz	r5, 80010a2 <__udivmoddi4+0x1fe>
 800108a:	ebb8 0203 	subs.w	r2, r8, r3
 800108e:	eb64 0409 	sbc.w	r4, r4, r9
 8001092:	fa04 f606 	lsl.w	r6, r4, r6
 8001096:	fa22 f301 	lsr.w	r3, r2, r1
 800109a:	431e      	orrs	r6, r3
 800109c:	40cc      	lsrs	r4, r1
 800109e:	e9c5 6400 	strd	r6, r4, [r5]
 80010a2:	2100      	movs	r1, #0
 80010a4:	e74f      	b.n	8000f46 <__udivmoddi4+0xa2>
 80010a6:	fbb1 fcf2 	udiv	ip, r1, r2
 80010aa:	0c01      	lsrs	r1, r0, #16
 80010ac:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80010b0:	b280      	uxth	r0, r0
 80010b2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80010b6:	463b      	mov	r3, r7
 80010b8:	4638      	mov	r0, r7
 80010ba:	463c      	mov	r4, r7
 80010bc:	46b8      	mov	r8, r7
 80010be:	46be      	mov	lr, r7
 80010c0:	2620      	movs	r6, #32
 80010c2:	fbb1 f1f7 	udiv	r1, r1, r7
 80010c6:	eba2 0208 	sub.w	r2, r2, r8
 80010ca:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80010ce:	e766      	b.n	8000f9e <__udivmoddi4+0xfa>
 80010d0:	4601      	mov	r1, r0
 80010d2:	e718      	b.n	8000f06 <__udivmoddi4+0x62>
 80010d4:	4610      	mov	r0, r2
 80010d6:	e72c      	b.n	8000f32 <__udivmoddi4+0x8e>
 80010d8:	f1c6 0220 	rsb	r2, r6, #32
 80010dc:	fa2e f302 	lsr.w	r3, lr, r2
 80010e0:	40b7      	lsls	r7, r6
 80010e2:	40b1      	lsls	r1, r6
 80010e4:	fa20 f202 	lsr.w	r2, r0, r2
 80010e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80010ec:	430a      	orrs	r2, r1
 80010ee:	fbb3 f8fe 	udiv	r8, r3, lr
 80010f2:	b2bc      	uxth	r4, r7
 80010f4:	fb0e 3318 	mls	r3, lr, r8, r3
 80010f8:	0c11      	lsrs	r1, r2, #16
 80010fa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80010fe:	fb08 f904 	mul.w	r9, r8, r4
 8001102:	40b0      	lsls	r0, r6
 8001104:	4589      	cmp	r9, r1
 8001106:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800110a:	b280      	uxth	r0, r0
 800110c:	d93e      	bls.n	800118c <__udivmoddi4+0x2e8>
 800110e:	1879      	adds	r1, r7, r1
 8001110:	f108 3cff 	add.w	ip, r8, #4294967295
 8001114:	d201      	bcs.n	800111a <__udivmoddi4+0x276>
 8001116:	4589      	cmp	r9, r1
 8001118:	d81f      	bhi.n	800115a <__udivmoddi4+0x2b6>
 800111a:	eba1 0109 	sub.w	r1, r1, r9
 800111e:	fbb1 f9fe 	udiv	r9, r1, lr
 8001122:	fb09 f804 	mul.w	r8, r9, r4
 8001126:	fb0e 1119 	mls	r1, lr, r9, r1
 800112a:	b292      	uxth	r2, r2
 800112c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001130:	4542      	cmp	r2, r8
 8001132:	d229      	bcs.n	8001188 <__udivmoddi4+0x2e4>
 8001134:	18ba      	adds	r2, r7, r2
 8001136:	f109 31ff 	add.w	r1, r9, #4294967295
 800113a:	d2c4      	bcs.n	80010c6 <__udivmoddi4+0x222>
 800113c:	4542      	cmp	r2, r8
 800113e:	d2c2      	bcs.n	80010c6 <__udivmoddi4+0x222>
 8001140:	f1a9 0102 	sub.w	r1, r9, #2
 8001144:	443a      	add	r2, r7
 8001146:	e7be      	b.n	80010c6 <__udivmoddi4+0x222>
 8001148:	45f0      	cmp	r8, lr
 800114a:	d29d      	bcs.n	8001088 <__udivmoddi4+0x1e4>
 800114c:	ebbe 0302 	subs.w	r3, lr, r2
 8001150:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001154:	3801      	subs	r0, #1
 8001156:	46e1      	mov	r9, ip
 8001158:	e796      	b.n	8001088 <__udivmoddi4+0x1e4>
 800115a:	eba7 0909 	sub.w	r9, r7, r9
 800115e:	4449      	add	r1, r9
 8001160:	f1a8 0c02 	sub.w	ip, r8, #2
 8001164:	fbb1 f9fe 	udiv	r9, r1, lr
 8001168:	fb09 f804 	mul.w	r8, r9, r4
 800116c:	e7db      	b.n	8001126 <__udivmoddi4+0x282>
 800116e:	4673      	mov	r3, lr
 8001170:	e77f      	b.n	8001072 <__udivmoddi4+0x1ce>
 8001172:	4650      	mov	r0, sl
 8001174:	e766      	b.n	8001044 <__udivmoddi4+0x1a0>
 8001176:	4608      	mov	r0, r1
 8001178:	e6fd      	b.n	8000f76 <__udivmoddi4+0xd2>
 800117a:	443b      	add	r3, r7
 800117c:	3a02      	subs	r2, #2
 800117e:	e733      	b.n	8000fe8 <__udivmoddi4+0x144>
 8001180:	f1ac 0c02 	sub.w	ip, ip, #2
 8001184:	443b      	add	r3, r7
 8001186:	e71c      	b.n	8000fc2 <__udivmoddi4+0x11e>
 8001188:	4649      	mov	r1, r9
 800118a:	e79c      	b.n	80010c6 <__udivmoddi4+0x222>
 800118c:	eba1 0109 	sub.w	r1, r1, r9
 8001190:	46c4      	mov	ip, r8
 8001192:	fbb1 f9fe 	udiv	r9, r1, lr
 8001196:	fb09 f804 	mul.w	r8, r9, r4
 800119a:	e7c4      	b.n	8001126 <__udivmoddi4+0x282>

0800119c <__aeabi_idiv0>:
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop

080011a0 <MX_ADC1_Init>:
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	463b      	mov	r3, r7
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]
 80011b2:	4b22      	ldr	r3, [pc, #136]	@ (800123c <MX_ADC1_Init+0x9c>)
 80011b4:	4a22      	ldr	r2, [pc, #136]	@ (8001240 <MX_ADC1_Init+0xa0>)
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	4b20      	ldr	r3, [pc, #128]	@ (800123c <MX_ADC1_Init+0x9c>)
 80011ba:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80011be:	605a      	str	r2, [r3, #4]
 80011c0:	4b1e      	ldr	r3, [pc, #120]	@ (800123c <MX_ADC1_Init+0x9c>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	609a      	str	r2, [r3, #8]
 80011c6:	4b1d      	ldr	r3, [pc, #116]	@ (800123c <MX_ADC1_Init+0x9c>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	611a      	str	r2, [r3, #16]
 80011cc:	4b1b      	ldr	r3, [pc, #108]	@ (800123c <MX_ADC1_Init+0x9c>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	761a      	strb	r2, [r3, #24]
 80011d2:	4b1a      	ldr	r3, [pc, #104]	@ (800123c <MX_ADC1_Init+0x9c>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	f883 2020 	strb.w	r2, [r3, #32]
 80011da:	4b18      	ldr	r3, [pc, #96]	@ (800123c <MX_ADC1_Init+0x9c>)
 80011dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80011e0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80011e2:	4b16      	ldr	r3, [pc, #88]	@ (800123c <MX_ADC1_Init+0x9c>)
 80011e4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80011e8:	629a      	str	r2, [r3, #40]	@ 0x28
 80011ea:	4b14      	ldr	r3, [pc, #80]	@ (800123c <MX_ADC1_Init+0x9c>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	60da      	str	r2, [r3, #12]
 80011f0:	4b12      	ldr	r3, [pc, #72]	@ (800123c <MX_ADC1_Init+0x9c>)
 80011f2:	2201      	movs	r2, #1
 80011f4:	61da      	str	r2, [r3, #28]
 80011f6:	4b11      	ldr	r3, [pc, #68]	@ (800123c <MX_ADC1_Init+0x9c>)
 80011f8:	2201      	movs	r2, #1
 80011fa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 80011fe:	4b0f      	ldr	r3, [pc, #60]	@ (800123c <MX_ADC1_Init+0x9c>)
 8001200:	2201      	movs	r2, #1
 8001202:	615a      	str	r2, [r3, #20]
 8001204:	480d      	ldr	r0, [pc, #52]	@ (800123c <MX_ADC1_Init+0x9c>)
 8001206:	f005 fb7b 	bl	8006900 <HAL_ADC_Init>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_ADC1_Init+0x74>
 8001210:	f004 fbae 	bl	8005970 <Error_Handler>
 8001214:	2301      	movs	r3, #1
 8001216:	603b      	str	r3, [r7, #0]
 8001218:	2301      	movs	r3, #1
 800121a:	607b      	str	r3, [r7, #4]
 800121c:	2300      	movs	r3, #0
 800121e:	60bb      	str	r3, [r7, #8]
 8001220:	463b      	mov	r3, r7
 8001222:	4619      	mov	r1, r3
 8001224:	4805      	ldr	r0, [pc, #20]	@ (800123c <MX_ADC1_Init+0x9c>)
 8001226:	f005 fe21 	bl	8006e6c <HAL_ADC_ConfigChannel>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_ADC1_Init+0x94>
 8001230:	f004 fb9e 	bl	8005970 <Error_Handler>
 8001234:	bf00      	nop
 8001236:	3710      	adds	r7, #16
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	200001f4 	.word	0x200001f4
 8001240:	40012000 	.word	0x40012000

08001244 <HAL_ADC_MspInit>:
 8001244:	b580      	push	{r7, lr}
 8001246:	b08a      	sub	sp, #40	@ 0x28
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	f107 0314 	add.w	r3, r7, #20
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a32      	ldr	r2, [pc, #200]	@ (800132c <HAL_ADC_MspInit+0xe8>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d15e      	bne.n	8001324 <HAL_ADC_MspInit+0xe0>
 8001266:	2300      	movs	r3, #0
 8001268:	613b      	str	r3, [r7, #16]
 800126a:	4b31      	ldr	r3, [pc, #196]	@ (8001330 <HAL_ADC_MspInit+0xec>)
 800126c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800126e:	4a30      	ldr	r2, [pc, #192]	@ (8001330 <HAL_ADC_MspInit+0xec>)
 8001270:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001274:	6453      	str	r3, [r2, #68]	@ 0x44
 8001276:	4b2e      	ldr	r3, [pc, #184]	@ (8001330 <HAL_ADC_MspInit+0xec>)
 8001278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800127a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800127e:	613b      	str	r3, [r7, #16]
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	2300      	movs	r3, #0
 8001284:	60fb      	str	r3, [r7, #12]
 8001286:	4b2a      	ldr	r3, [pc, #168]	@ (8001330 <HAL_ADC_MspInit+0xec>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128a:	4a29      	ldr	r2, [pc, #164]	@ (8001330 <HAL_ADC_MspInit+0xec>)
 800128c:	f043 0301 	orr.w	r3, r3, #1
 8001290:	6313      	str	r3, [r2, #48]	@ 0x30
 8001292:	4b27      	ldr	r3, [pc, #156]	@ (8001330 <HAL_ADC_MspInit+0xec>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	60fb      	str	r3, [r7, #12]
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	2362      	movs	r3, #98	@ 0x62
 80012a0:	617b      	str	r3, [r7, #20]
 80012a2:	2303      	movs	r3, #3
 80012a4:	61bb      	str	r3, [r7, #24]
 80012a6:	2300      	movs	r3, #0
 80012a8:	61fb      	str	r3, [r7, #28]
 80012aa:	f107 0314 	add.w	r3, r7, #20
 80012ae:	4619      	mov	r1, r3
 80012b0:	4820      	ldr	r0, [pc, #128]	@ (8001334 <HAL_ADC_MspInit+0xf0>)
 80012b2:	f006 fd87 	bl	8007dc4 <HAL_GPIO_Init>
 80012b6:	4b20      	ldr	r3, [pc, #128]	@ (8001338 <HAL_ADC_MspInit+0xf4>)
 80012b8:	4a20      	ldr	r2, [pc, #128]	@ (800133c <HAL_ADC_MspInit+0xf8>)
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	4b1e      	ldr	r3, [pc, #120]	@ (8001338 <HAL_ADC_MspInit+0xf4>)
 80012be:	2200      	movs	r2, #0
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001338 <HAL_ADC_MspInit+0xf4>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001338 <HAL_ADC_MspInit+0xf4>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	60da      	str	r2, [r3, #12]
 80012ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001338 <HAL_ADC_MspInit+0xf4>)
 80012d0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012d4:	611a      	str	r2, [r3, #16]
 80012d6:	4b18      	ldr	r3, [pc, #96]	@ (8001338 <HAL_ADC_MspInit+0xf4>)
 80012d8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80012dc:	615a      	str	r2, [r3, #20]
 80012de:	4b16      	ldr	r3, [pc, #88]	@ (8001338 <HAL_ADC_MspInit+0xf4>)
 80012e0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012e4:	619a      	str	r2, [r3, #24]
 80012e6:	4b14      	ldr	r3, [pc, #80]	@ (8001338 <HAL_ADC_MspInit+0xf4>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	61da      	str	r2, [r3, #28]
 80012ec:	4b12      	ldr	r3, [pc, #72]	@ (8001338 <HAL_ADC_MspInit+0xf4>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	621a      	str	r2, [r3, #32]
 80012f2:	4b11      	ldr	r3, [pc, #68]	@ (8001338 <HAL_ADC_MspInit+0xf4>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	625a      	str	r2, [r3, #36]	@ 0x24
 80012f8:	480f      	ldr	r0, [pc, #60]	@ (8001338 <HAL_ADC_MspInit+0xf4>)
 80012fa:	f006 f983 	bl	8007604 <HAL_DMA_Init>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <HAL_ADC_MspInit+0xc4>
 8001304:	f004 fb34 	bl	8005970 <Error_Handler>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	4a0b      	ldr	r2, [pc, #44]	@ (8001338 <HAL_ADC_MspInit+0xf4>)
 800130c:	639a      	str	r2, [r3, #56]	@ 0x38
 800130e:	4a0a      	ldr	r2, [pc, #40]	@ (8001338 <HAL_ADC_MspInit+0xf4>)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6393      	str	r3, [r2, #56]	@ 0x38
 8001314:	2200      	movs	r2, #0
 8001316:	2100      	movs	r1, #0
 8001318:	2012      	movs	r0, #18
 800131a:	f006 f93c 	bl	8007596 <HAL_NVIC_SetPriority>
 800131e:	2012      	movs	r0, #18
 8001320:	f006 f955 	bl	80075ce <HAL_NVIC_EnableIRQ>
 8001324:	bf00      	nop
 8001326:	3728      	adds	r7, #40	@ 0x28
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	40012000 	.word	0x40012000
 8001330:	40023800 	.word	0x40023800
 8001334:	40020000 	.word	0x40020000
 8001338:	2000023c 	.word	0x2000023c
 800133c:	40026410 	.word	0x40026410

08001340 <MX_DMA_Init>:
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	2300      	movs	r3, #0
 8001348:	607b      	str	r3, [r7, #4]
 800134a:	4b0c      	ldr	r3, [pc, #48]	@ (800137c <MX_DMA_Init+0x3c>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134e:	4a0b      	ldr	r2, [pc, #44]	@ (800137c <MX_DMA_Init+0x3c>)
 8001350:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001354:	6313      	str	r3, [r2, #48]	@ 0x30
 8001356:	4b09      	ldr	r3, [pc, #36]	@ (800137c <MX_DMA_Init+0x3c>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800135e:	607b      	str	r3, [r7, #4]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2200      	movs	r2, #0
 8001364:	2100      	movs	r1, #0
 8001366:	2038      	movs	r0, #56	@ 0x38
 8001368:	f006 f915 	bl	8007596 <HAL_NVIC_SetPriority>
 800136c:	2038      	movs	r0, #56	@ 0x38
 800136e:	f006 f92e 	bl	80075ce <HAL_NVIC_EnableIRQ>
 8001372:	bf00      	nop
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40023800 	.word	0x40023800

08001380 <MX_GPIO_Init>:
 8001380:	b580      	push	{r7, lr}
 8001382:	b08a      	sub	sp, #40	@ 0x28
 8001384:	af00      	add	r7, sp, #0
 8001386:	f107 0314 	add.w	r3, r7, #20
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	605a      	str	r2, [r3, #4]
 8001390:	609a      	str	r2, [r3, #8]
 8001392:	60da      	str	r2, [r3, #12]
 8001394:	611a      	str	r2, [r3, #16]
 8001396:	2300      	movs	r3, #0
 8001398:	613b      	str	r3, [r7, #16]
 800139a:	4b52      	ldr	r3, [pc, #328]	@ (80014e4 <MX_GPIO_Init+0x164>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139e:	4a51      	ldr	r2, [pc, #324]	@ (80014e4 <MX_GPIO_Init+0x164>)
 80013a0:	f043 0304 	orr.w	r3, r3, #4
 80013a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013a6:	4b4f      	ldr	r3, [pc, #316]	@ (80014e4 <MX_GPIO_Init+0x164>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013aa:	f003 0304 	and.w	r3, r3, #4
 80013ae:	613b      	str	r3, [r7, #16]
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	2300      	movs	r3, #0
 80013b4:	60fb      	str	r3, [r7, #12]
 80013b6:	4b4b      	ldr	r3, [pc, #300]	@ (80014e4 <MX_GPIO_Init+0x164>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ba:	4a4a      	ldr	r2, [pc, #296]	@ (80014e4 <MX_GPIO_Init+0x164>)
 80013bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013c2:	4b48      	ldr	r3, [pc, #288]	@ (80014e4 <MX_GPIO_Init+0x164>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	2300      	movs	r3, #0
 80013d0:	60bb      	str	r3, [r7, #8]
 80013d2:	4b44      	ldr	r3, [pc, #272]	@ (80014e4 <MX_GPIO_Init+0x164>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d6:	4a43      	ldr	r2, [pc, #268]	@ (80014e4 <MX_GPIO_Init+0x164>)
 80013d8:	f043 0301 	orr.w	r3, r3, #1
 80013dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013de:	4b41      	ldr	r3, [pc, #260]	@ (80014e4 <MX_GPIO_Init+0x164>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	60bb      	str	r3, [r7, #8]
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	2300      	movs	r3, #0
 80013ec:	607b      	str	r3, [r7, #4]
 80013ee:	4b3d      	ldr	r3, [pc, #244]	@ (80014e4 <MX_GPIO_Init+0x164>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f2:	4a3c      	ldr	r2, [pc, #240]	@ (80014e4 <MX_GPIO_Init+0x164>)
 80013f4:	f043 0302 	orr.w	r3, r3, #2
 80013f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013fa:	4b3a      	ldr	r3, [pc, #232]	@ (80014e4 <MX_GPIO_Init+0x164>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	607b      	str	r3, [r7, #4]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2201      	movs	r2, #1
 8001408:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800140c:	4836      	ldr	r0, [pc, #216]	@ (80014e8 <MX_GPIO_Init+0x168>)
 800140e:	f006 fe75 	bl	80080fc <HAL_GPIO_WritePin>
 8001412:	2200      	movs	r2, #0
 8001414:	f648 0191 	movw	r1, #34961	@ 0x8891
 8001418:	4834      	ldr	r0, [pc, #208]	@ (80014ec <MX_GPIO_Init+0x16c>)
 800141a:	f006 fe6f 	bl	80080fc <HAL_GPIO_WritePin>
 800141e:	2201      	movs	r2, #1
 8001420:	2108      	movs	r1, #8
 8001422:	4832      	ldr	r0, [pc, #200]	@ (80014ec <MX_GPIO_Init+0x16c>)
 8001424:	f006 fe6a 	bl	80080fc <HAL_GPIO_WritePin>
 8001428:	2200      	movs	r2, #0
 800142a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800142e:	4830      	ldr	r0, [pc, #192]	@ (80014f0 <MX_GPIO_Init+0x170>)
 8001430:	f006 fe64 	bl	80080fc <HAL_GPIO_WritePin>
 8001434:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001438:	617b      	str	r3, [r7, #20]
 800143a:	2301      	movs	r3, #1
 800143c:	61bb      	str	r3, [r7, #24]
 800143e:	2301      	movs	r3, #1
 8001440:	61fb      	str	r3, [r7, #28]
 8001442:	2300      	movs	r3, #0
 8001444:	623b      	str	r3, [r7, #32]
 8001446:	f107 0314 	add.w	r3, r7, #20
 800144a:	4619      	mov	r1, r3
 800144c:	4826      	ldr	r0, [pc, #152]	@ (80014e8 <MX_GPIO_Init+0x168>)
 800144e:	f006 fcb9 	bl	8007dc4 <HAL_GPIO_Init>
 8001452:	f648 0391 	movw	r3, #34961	@ 0x8891
 8001456:	617b      	str	r3, [r7, #20]
 8001458:	2301      	movs	r3, #1
 800145a:	61bb      	str	r3, [r7, #24]
 800145c:	2300      	movs	r3, #0
 800145e:	61fb      	str	r3, [r7, #28]
 8001460:	2300      	movs	r3, #0
 8001462:	623b      	str	r3, [r7, #32]
 8001464:	f107 0314 	add.w	r3, r7, #20
 8001468:	4619      	mov	r1, r3
 800146a:	4820      	ldr	r0, [pc, #128]	@ (80014ec <MX_GPIO_Init+0x16c>)
 800146c:	f006 fcaa 	bl	8007dc4 <HAL_GPIO_Init>
 8001470:	2308      	movs	r3, #8
 8001472:	617b      	str	r3, [r7, #20]
 8001474:	2301      	movs	r3, #1
 8001476:	61bb      	str	r3, [r7, #24]
 8001478:	2301      	movs	r3, #1
 800147a:	61fb      	str	r3, [r7, #28]
 800147c:	2300      	movs	r3, #0
 800147e:	623b      	str	r3, [r7, #32]
 8001480:	f107 0314 	add.w	r3, r7, #20
 8001484:	4619      	mov	r1, r3
 8001486:	4819      	ldr	r0, [pc, #100]	@ (80014ec <MX_GPIO_Init+0x16c>)
 8001488:	f006 fc9c 	bl	8007dc4 <HAL_GPIO_Init>
 800148c:	2302      	movs	r3, #2
 800148e:	617b      	str	r3, [r7, #20]
 8001490:	2300      	movs	r3, #0
 8001492:	61bb      	str	r3, [r7, #24]
 8001494:	2300      	movs	r3, #0
 8001496:	61fb      	str	r3, [r7, #28]
 8001498:	f107 0314 	add.w	r3, r7, #20
 800149c:	4619      	mov	r1, r3
 800149e:	4814      	ldr	r0, [pc, #80]	@ (80014f0 <MX_GPIO_Init+0x170>)
 80014a0:	f006 fc90 	bl	8007dc4 <HAL_GPIO_Init>
 80014a4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80014a8:	617b      	str	r3, [r7, #20]
 80014aa:	2300      	movs	r3, #0
 80014ac:	61bb      	str	r3, [r7, #24]
 80014ae:	2301      	movs	r3, #1
 80014b0:	61fb      	str	r3, [r7, #28]
 80014b2:	f107 0314 	add.w	r3, r7, #20
 80014b6:	4619      	mov	r1, r3
 80014b8:	480d      	ldr	r0, [pc, #52]	@ (80014f0 <MX_GPIO_Init+0x170>)
 80014ba:	f006 fc83 	bl	8007dc4 <HAL_GPIO_Init>
 80014be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80014c2:	617b      	str	r3, [r7, #20]
 80014c4:	2301      	movs	r3, #1
 80014c6:	61bb      	str	r3, [r7, #24]
 80014c8:	2300      	movs	r3, #0
 80014ca:	61fb      	str	r3, [r7, #28]
 80014cc:	2300      	movs	r3, #0
 80014ce:	623b      	str	r3, [r7, #32]
 80014d0:	f107 0314 	add.w	r3, r7, #20
 80014d4:	4619      	mov	r1, r3
 80014d6:	4806      	ldr	r0, [pc, #24]	@ (80014f0 <MX_GPIO_Init+0x170>)
 80014d8:	f006 fc74 	bl	8007dc4 <HAL_GPIO_Init>
 80014dc:	bf00      	nop
 80014de:	3728      	adds	r7, #40	@ 0x28
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40023800 	.word	0x40023800
 80014e8:	40020800 	.word	0x40020800
 80014ec:	40020000 	.word	0x40020000
 80014f0:	40020400 	.word	0x40020400

080014f4 <MX_I2C1_Init>:
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	4b12      	ldr	r3, [pc, #72]	@ (8001544 <MX_I2C1_Init+0x50>)
 80014fa:	4a13      	ldr	r2, [pc, #76]	@ (8001548 <MX_I2C1_Init+0x54>)
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	4b11      	ldr	r3, [pc, #68]	@ (8001544 <MX_I2C1_Init+0x50>)
 8001500:	4a12      	ldr	r2, [pc, #72]	@ (800154c <MX_I2C1_Init+0x58>)
 8001502:	605a      	str	r2, [r3, #4]
 8001504:	4b0f      	ldr	r3, [pc, #60]	@ (8001544 <MX_I2C1_Init+0x50>)
 8001506:	2200      	movs	r2, #0
 8001508:	609a      	str	r2, [r3, #8]
 800150a:	4b0e      	ldr	r3, [pc, #56]	@ (8001544 <MX_I2C1_Init+0x50>)
 800150c:	2200      	movs	r2, #0
 800150e:	60da      	str	r2, [r3, #12]
 8001510:	4b0c      	ldr	r3, [pc, #48]	@ (8001544 <MX_I2C1_Init+0x50>)
 8001512:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001516:	611a      	str	r2, [r3, #16]
 8001518:	4b0a      	ldr	r3, [pc, #40]	@ (8001544 <MX_I2C1_Init+0x50>)
 800151a:	2200      	movs	r2, #0
 800151c:	615a      	str	r2, [r3, #20]
 800151e:	4b09      	ldr	r3, [pc, #36]	@ (8001544 <MX_I2C1_Init+0x50>)
 8001520:	2200      	movs	r2, #0
 8001522:	619a      	str	r2, [r3, #24]
 8001524:	4b07      	ldr	r3, [pc, #28]	@ (8001544 <MX_I2C1_Init+0x50>)
 8001526:	2200      	movs	r2, #0
 8001528:	61da      	str	r2, [r3, #28]
 800152a:	4b06      	ldr	r3, [pc, #24]	@ (8001544 <MX_I2C1_Init+0x50>)
 800152c:	2200      	movs	r2, #0
 800152e:	621a      	str	r2, [r3, #32]
 8001530:	4804      	ldr	r0, [pc, #16]	@ (8001544 <MX_I2C1_Init+0x50>)
 8001532:	f006 fdfd 	bl	8008130 <HAL_I2C_Init>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_I2C1_Init+0x4c>
 800153c:	f004 fa18 	bl	8005970 <Error_Handler>
 8001540:	bf00      	nop
 8001542:	bd80      	pop	{r7, pc}
 8001544:	2000029c 	.word	0x2000029c
 8001548:	40005400 	.word	0x40005400
 800154c:	000186a0 	.word	0x000186a0

08001550 <HAL_I2C_MspInit>:
 8001550:	b580      	push	{r7, lr}
 8001552:	b08a      	sub	sp, #40	@ 0x28
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	f107 0314 	add.w	r3, r7, #20
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]
 8001564:	60da      	str	r2, [r3, #12]
 8001566:	611a      	str	r2, [r3, #16]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a19      	ldr	r2, [pc, #100]	@ (80015d4 <HAL_I2C_MspInit+0x84>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d12b      	bne.n	80015ca <HAL_I2C_MspInit+0x7a>
 8001572:	2300      	movs	r3, #0
 8001574:	613b      	str	r3, [r7, #16]
 8001576:	4b18      	ldr	r3, [pc, #96]	@ (80015d8 <HAL_I2C_MspInit+0x88>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157a:	4a17      	ldr	r2, [pc, #92]	@ (80015d8 <HAL_I2C_MspInit+0x88>)
 800157c:	f043 0302 	orr.w	r3, r3, #2
 8001580:	6313      	str	r3, [r2, #48]	@ 0x30
 8001582:	4b15      	ldr	r3, [pc, #84]	@ (80015d8 <HAL_I2C_MspInit+0x88>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001586:	f003 0302 	and.w	r3, r3, #2
 800158a:	613b      	str	r3, [r7, #16]
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	23c0      	movs	r3, #192	@ 0xc0
 8001590:	617b      	str	r3, [r7, #20]
 8001592:	2312      	movs	r3, #18
 8001594:	61bb      	str	r3, [r7, #24]
 8001596:	2300      	movs	r3, #0
 8001598:	61fb      	str	r3, [r7, #28]
 800159a:	2303      	movs	r3, #3
 800159c:	623b      	str	r3, [r7, #32]
 800159e:	2304      	movs	r3, #4
 80015a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80015a2:	f107 0314 	add.w	r3, r7, #20
 80015a6:	4619      	mov	r1, r3
 80015a8:	480c      	ldr	r0, [pc, #48]	@ (80015dc <HAL_I2C_MspInit+0x8c>)
 80015aa:	f006 fc0b 	bl	8007dc4 <HAL_GPIO_Init>
 80015ae:	2300      	movs	r3, #0
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	4b09      	ldr	r3, [pc, #36]	@ (80015d8 <HAL_I2C_MspInit+0x88>)
 80015b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b6:	4a08      	ldr	r2, [pc, #32]	@ (80015d8 <HAL_I2C_MspInit+0x88>)
 80015b8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80015bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80015be:	4b06      	ldr	r3, [pc, #24]	@ (80015d8 <HAL_I2C_MspInit+0x88>)
 80015c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	bf00      	nop
 80015cc:	3728      	adds	r7, #40	@ 0x28
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40005400 	.word	0x40005400
 80015d8:	40023800 	.word	0x40023800
 80015dc:	40020400 	.word	0x40020400

080015e0 <KEY_Init>:
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	4b05      	ldr	r3, [pc, #20]	@ (80015fc <KEY_Init+0x1c>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	701a      	strb	r2, [r3, #0]
 80015ea:	4b05      	ldr	r3, [pc, #20]	@ (8001600 <KEY_Init+0x20>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	bf00      	nop
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	200002f0 	.word	0x200002f0
 8001600:	200002f8 	.word	0x200002f8

08001604 <KEY_GetState>:
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	4b0a      	ldr	r3, [pc, #40]	@ (8001634 <KEY_GetState+0x30>)
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	71fb      	strb	r3, [r7, #7]
 8001610:	4b08      	ldr	r3, [pc, #32]	@ (8001634 <KEY_GetState+0x30>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	2b02      	cmp	r3, #2
 8001616:	d003      	beq.n	8001620 <KEY_GetState+0x1c>
 8001618:	4b06      	ldr	r3, [pc, #24]	@ (8001634 <KEY_GetState+0x30>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	2b03      	cmp	r3, #3
 800161e:	d104      	bne.n	800162a <KEY_GetState+0x26>
 8001620:	4b04      	ldr	r3, [pc, #16]	@ (8001634 <KEY_GetState+0x30>)
 8001622:	2200      	movs	r2, #0
 8001624:	701a      	strb	r2, [r3, #0]
 8001626:	f000 f819 	bl	800165c <KEY_ResetIdleTimer>
 800162a:	79fb      	ldrb	r3, [r7, #7]
 800162c:	4618      	mov	r0, r3
 800162e:	3708      	adds	r7, #8
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	200002f0 	.word	0x200002f0

08001638 <KEY_GetIdleState>:
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
 800163c:	4b06      	ldr	r3, [pc, #24]	@ (8001658 <KEY_GetIdleState+0x20>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f247 5230 	movw	r2, #30000	@ 0x7530
 8001644:	4293      	cmp	r3, r2
 8001646:	bf2c      	ite	cs
 8001648:	2301      	movcs	r3, #1
 800164a:	2300      	movcc	r3, #0
 800164c:	b2db      	uxtb	r3, r3
 800164e:	4618      	mov	r0, r3
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr
 8001658:	200002f8 	.word	0x200002f8

0800165c <KEY_ResetIdleTimer>:
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
 8001660:	4b03      	ldr	r3, [pc, #12]	@ (8001670 <KEY_ResetIdleTimer+0x14>)
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	bf00      	nop
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr
 8001670:	200002f8 	.word	0x200002f8

08001674 <KEY_Process>:
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	4b2b      	ldr	r3, [pc, #172]	@ (8001728 <KEY_Process+0xb4>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001682:	d006      	beq.n	8001692 <KEY_Process+0x1e>
 8001684:	230a      	movs	r3, #10
 8001686:	461a      	mov	r2, r3
 8001688:	4b27      	ldr	r3, [pc, #156]	@ (8001728 <KEY_Process+0xb4>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4413      	add	r3, r2
 800168e:	4a26      	ldr	r2, [pc, #152]	@ (8001728 <KEY_Process+0xb4>)
 8001690:	6013      	str	r3, [r2, #0]
 8001692:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001696:	4825      	ldr	r0, [pc, #148]	@ (800172c <KEY_Process+0xb8>)
 8001698:	f006 fd18 	bl	80080cc <HAL_GPIO_ReadPin>
 800169c:	4603      	mov	r3, r0
 800169e:	71fb      	strb	r3, [r7, #7]
 80016a0:	4b23      	ldr	r3, [pc, #140]	@ (8001730 <KEY_Process+0xbc>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	79fa      	ldrb	r2, [r7, #7]
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d025      	beq.n	80016f6 <KEY_Process+0x82>
 80016aa:	4b22      	ldr	r3, [pc, #136]	@ (8001734 <KEY_Process+0xc0>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	3301      	adds	r3, #1
 80016b0:	b2da      	uxtb	r2, r3
 80016b2:	4b20      	ldr	r3, [pc, #128]	@ (8001734 <KEY_Process+0xc0>)
 80016b4:	701a      	strb	r2, [r3, #0]
 80016b6:	4b1f      	ldr	r3, [pc, #124]	@ (8001734 <KEY_Process+0xc0>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	2b04      	cmp	r3, #4
 80016bc:	d91e      	bls.n	80016fc <KEY_Process+0x88>
 80016be:	4b1d      	ldr	r3, [pc, #116]	@ (8001734 <KEY_Process+0xc0>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	701a      	strb	r2, [r3, #0]
 80016c4:	4a1a      	ldr	r2, [pc, #104]	@ (8001730 <KEY_Process+0xbc>)
 80016c6:	79fb      	ldrb	r3, [r7, #7]
 80016c8:	7013      	strb	r3, [r2, #0]
 80016ca:	79fb      	ldrb	r3, [r7, #7]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d106      	bne.n	80016de <KEY_Process+0x6a>
 80016d0:	4b19      	ldr	r3, [pc, #100]	@ (8001738 <KEY_Process+0xc4>)
 80016d2:	2201      	movs	r2, #1
 80016d4:	701a      	strb	r2, [r3, #0]
 80016d6:	4b19      	ldr	r3, [pc, #100]	@ (800173c <KEY_Process+0xc8>)
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	e00e      	b.n	80016fc <KEY_Process+0x88>
 80016de:	4b17      	ldr	r3, [pc, #92]	@ (800173c <KEY_Process+0xc8>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80016e6:	d202      	bcs.n	80016ee <KEY_Process+0x7a>
 80016e8:	4b13      	ldr	r3, [pc, #76]	@ (8001738 <KEY_Process+0xc4>)
 80016ea:	2202      	movs	r2, #2
 80016ec:	701a      	strb	r2, [r3, #0]
 80016ee:	4b13      	ldr	r3, [pc, #76]	@ (800173c <KEY_Process+0xc8>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	e002      	b.n	80016fc <KEY_Process+0x88>
 80016f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001734 <KEY_Process+0xc0>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	701a      	strb	r2, [r3, #0]
 80016fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001738 <KEY_Process+0xc4>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	2b01      	cmp	r3, #1
 8001702:	d10c      	bne.n	800171e <KEY_Process+0xaa>
 8001704:	4b0d      	ldr	r3, [pc, #52]	@ (800173c <KEY_Process+0xc8>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	3301      	adds	r3, #1
 800170a:	4a0c      	ldr	r2, [pc, #48]	@ (800173c <KEY_Process+0xc8>)
 800170c:	6013      	str	r3, [r2, #0]
 800170e:	4b0b      	ldr	r3, [pc, #44]	@ (800173c <KEY_Process+0xc8>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001716:	d302      	bcc.n	800171e <KEY_Process+0xaa>
 8001718:	4b07      	ldr	r3, [pc, #28]	@ (8001738 <KEY_Process+0xc4>)
 800171a:	2203      	movs	r2, #3
 800171c:	701a      	strb	r2, [r3, #0]
 800171e:	bf00      	nop
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	200002f8 	.word	0x200002f8
 800172c:	40020400 	.word	0x40020400
 8001730:	20000000 	.word	0x20000000
 8001734:	200002fc 	.word	0x200002fc
 8001738:	200002f0 	.word	0x200002f0
 800173c:	200002f4 	.word	0x200002f4

08001740 <HAL_ADC_ConvCpltCallback>:
float VPA0F;
char message1[128];     //输出显示
char message2[128];
char msg[40];
// DMA完成回调函数
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
	measurement_done = 1;
 8001748:	4b04      	ldr	r3, [pc, #16]	@ (800175c <HAL_ADC_ConvCpltCallback+0x1c>)
 800174a:	2201      	movs	r2, #1
 800174c:	701a      	strb	r2, [r3, #0]
//	GPIO_Set_Low(GPIOA, GPIO_PIN_0);
//	GPIO_Set_Low(GPIOA, GPIO_PIN_4);
//	GPIO_Set_Low(GPIOA, GPIO_PIN_7);
}
 800174e:	bf00      	nop
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	20007a70 	.word	0x20007a70

08001760 <HAL_ADC_ErrorCallback>:
//DMA错误处理
void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc) {
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
	if (hadc->ErrorCode & HAL_ADC_ERROR_DMA) {
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
	}
}
 800176c:	bf00      	nop
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001788:	d11e      	bne.n	80017c8 <HAL_TIM_IC_CaptureCallback+0x50>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	7f1b      	ldrb	r3, [r3, #28]
 800178e:	2b02      	cmp	r3, #2
 8001790:	d11a      	bne.n	80017c8 <HAL_TIM_IC_CaptureCallback+0x50>
		// 关键修改：先停止定时器再读取值
		HAL_TIM_IC_Stop_IT(htim, TIM_CHANNEL_2);
 8001792:	2104      	movs	r1, #4
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f008 f86f 	bl	8009878 <HAL_TIM_IC_Stop_IT>
		HAL_TIM_Base_Stop_IT(htim);
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f007 feca 	bl	8009534 <HAL_TIM_Base_Stop_IT>

		// 清除中断标志！防止残留标志影响下次测量
		__HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2 | TIM_FLAG_UPDATE);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f06f 0205 	mvn.w	r2, #5
 80017a8:	611a      	str	r2, [r3, #16]

		capture_value = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80017aa:	2104      	movs	r1, #4
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f008 fb65 	bl	8009e7c <HAL_TIM_ReadCapturedValue>
 80017b2:	4603      	mov	r3, r0
 80017b4:	4a06      	ldr	r2, [pc, #24]	@ (80017d0 <HAL_TIM_IC_CaptureCallback+0x58>)
 80017b6:	6013      	str	r3, [r2, #0]

		// 确保定时器完全停止后再操作GPIO
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80017b8:	2200      	movs	r2, #0
 80017ba:	2180      	movs	r1, #128	@ 0x80
 80017bc:	4805      	ldr	r0, [pc, #20]	@ (80017d4 <HAL_TIM_IC_CaptureCallback+0x5c>)
 80017be:	f006 fc9d 	bl	80080fc <HAL_GPIO_WritePin>

		measurement_complete = 1;
 80017c2:	4b05      	ldr	r3, [pc, #20]	@ (80017d8 <HAL_TIM_IC_CaptureCallback+0x60>)
 80017c4:	2201      	movs	r2, #1
 80017c6:	701a      	strb	r2, [r3, #0]
	}
}
 80017c8:	bf00      	nop
 80017ca:	3708      	adds	r7, #8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	20007a74 	.word	0x20007a74
 80017d4:	40020000 	.word	0x40020000
 80017d8:	20007a7c 	.word	0x20007a7c

080017dc <HAL_TIM_PeriodElapsedCallback>:
//定时器2溢出中断回调
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017ec:	d10d      	bne.n	800180a <HAL_TIM_PeriodElapsedCallback+0x2e>
		// 防止测量完成后的无效溢出计数
		if (!measurement_complete) {
 80017ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001818 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d104      	bne.n	8001800 <HAL_TIM_PeriodElapsedCallback+0x24>
			overflow_count++;
 80017f6:	4b09      	ldr	r3, [pc, #36]	@ (800181c <HAL_TIM_PeriodElapsedCallback+0x40>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	3301      	adds	r3, #1
 80017fc:	4a07      	ldr	r2, [pc, #28]	@ (800181c <HAL_TIM_PeriodElapsedCallback+0x40>)
 80017fe:	6013      	str	r3, [r2, #0]
		}
		// 清除更新标志
		__HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f06f 0201 	mvn.w	r2, #1
 8001808:	611a      	str	r2, [r3, #16]
	}}
 800180a:	bf00      	nop
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	20007a7c 	.word	0x20007a7c
 800181c:	20007a78 	.word	0x20007a78

08001820 <predict_L_theory>:

// 预测电感理论值的统一非线性函数
float predict_L_theory(float L_actual, float ESR) {
 8001820:	b580      	push	{r7, lr}
 8001822:	ed2d 8b02 	vpush	{d8}
 8001826:	b08a      	sub	sp, #40	@ 0x28
 8001828:	af00      	add	r7, sp, #0
 800182a:	ed87 0a01 	vstr	s0, [r7, #4]
 800182e:	edc7 0a00 	vstr	s1, [r7]
    // 关键参数（基于物理规律优化）
    const float esr_mid = 8.0f;    // 特征中点ESR（8Ω）
 8001832:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8001836:	627b      	str	r3, [r7, #36]	@ 0x24
    const float esr_scale = 22.0f; // 30Ω - 8Ω = 22Ω
 8001838:	4b2f      	ldr	r3, [pc, #188]	@ (80018f8 <predict_L_theory+0xd8>)
 800183a:	623b      	str	r3, [r7, #32]
    const float min_factor = 0.5f; // ESR→0时的最小系数
 800183c:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 8001840:	61fb      	str	r3, [r7, #28]
    const float max_factor = 2.0f; // ESR→∞时的最大系数
 8001842:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001846:	61bb      	str	r3, [r7, #24]

    // 计算动态缩放因子（基于tanh的平滑过渡）
    float t = (ESR - esr_mid) / esr_scale;
 8001848:	ed97 7a00 	vldr	s14, [r7]
 800184c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001850:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001854:	ed97 7a08 	vldr	s14, [r7, #32]
 8001858:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800185c:	edc7 7a05 	vstr	s15, [r7, #20]
    float factor = min_factor + (max_factor - min_factor) * (0.5f + 0.5f * tanhf(3.0f * t));
 8001860:	ed97 7a06 	vldr	s14, [r7, #24]
 8001864:	edd7 7a07 	vldr	s15, [r7, #28]
 8001868:	ee37 8a67 	vsub.f32	s16, s14, s15
 800186c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001870:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8001874:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001878:	eeb0 0a67 	vmov.f32	s0, s15
 800187c:	f00c f82c 	bl	800d8d8 <tanhf>
 8001880:	eef0 7a40 	vmov.f32	s15, s0
 8001884:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001888:	ee67 7a87 	vmul.f32	s15, s15, s14
 800188c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001890:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001894:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001898:	ed97 7a07 	vldr	s14, [r7, #28]
 800189c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018a0:	edc7 7a04 	vstr	s15, [r7, #16]

    // 应用非线性补偿（ESR越高补偿越强）
    float compensation = 1.0f + 0.15f * powf(ESR / 30.0f, 2.0f);
 80018a4:	edd7 7a00 	vldr	s15, [r7]
 80018a8:	eef3 6a0e 	vmov.f32	s13, #62	@ 0x41f00000  30.0
 80018ac:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80018b0:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 80018b4:	eeb0 0a47 	vmov.f32	s0, s14
 80018b8:	f00b ffb6 	bl	800d828 <powf>
 80018bc:	eef0 7a40 	vmov.f32	s15, s0
 80018c0:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80018fc <predict_L_theory+0xdc>
 80018c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018c8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80018cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80018d0:	edc7 7a03 	vstr	s15, [r7, #12]
    return factor * L_actual * compensation;
 80018d4:	ed97 7a04 	vldr	s14, [r7, #16]
 80018d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80018dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80018e4:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 80018e8:	eeb0 0a67 	vmov.f32	s0, s15
 80018ec:	3728      	adds	r7, #40	@ 0x28
 80018ee:	46bd      	mov	sp, r7
 80018f0:	ecbd 8b02 	vpop	{d8}
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	41b00000 	.word	0x41b00000
 80018fc:	3e19999a 	.word	0x3e19999a

08001900 <StartMeasurement>:


/* 启动测量过程 */
void StartMeasurement(void) {
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
	// 确保完全停止定时器
	HAL_TIM_IC_Stop_IT(&htim2, TIM_CHANNEL_2);
 8001904:	2104      	movs	r1, #4
 8001906:	4815      	ldr	r0, [pc, #84]	@ (800195c <StartMeasurement+0x5c>)
 8001908:	f007 ffb6 	bl	8009878 <HAL_TIM_IC_Stop_IT>
	HAL_TIM_Base_Stop_IT(&htim2);
 800190c:	4813      	ldr	r0, [pc, #76]	@ (800195c <StartMeasurement+0x5c>)
 800190e:	f007 fe11 	bl	8009534 <HAL_TIM_Base_Stop_IT>

	// 清除所有可能残留的标志
	__HAL_TIM_CLEAR_FLAG(&htim2, TIM_FLAG_CC2 | TIM_FLAG_UPDATE);
 8001912:	4b12      	ldr	r3, [pc, #72]	@ (800195c <StartMeasurement+0x5c>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f06f 0205 	mvn.w	r2, #5
 800191a:	611a      	str	r2, [r3, #16]

	overflow_count = 0;
 800191c:	4b10      	ldr	r3, [pc, #64]	@ (8001960 <StartMeasurement+0x60>)
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
	measurement_complete = 0;
 8001922:	4b10      	ldr	r3, [pc, #64]	@ (8001964 <StartMeasurement+0x64>)
 8001924:	2200      	movs	r2, #0
 8001926:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim2, 0);  // 必须重置计数器
 8001928:	4b0c      	ldr	r3, [pc, #48]	@ (800195c <StartMeasurement+0x5c>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2200      	movs	r2, #0
 800192e:	625a      	str	r2, [r3, #36]	@ 0x24

	// GPIO操作（增加延时确保电平稳定）
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8001930:	2200      	movs	r2, #0
 8001932:	2180      	movs	r1, #128	@ 0x80
 8001934:	480c      	ldr	r0, [pc, #48]	@ (8001968 <StartMeasurement+0x68>)
 8001936:	f006 fbe1 	bl	80080fc <HAL_GPIO_WritePin>
	HAL_Delay(1);  // 延长稳定时间
 800193a:	2001      	movs	r0, #1
 800193c:	f004 ffbc 	bl	80068b8 <HAL_Delay>

	// 启动定时器（注意顺序）
	HAL_TIM_Base_Start_IT(&htim2);          // 先启动基础计数
 8001940:	4806      	ldr	r0, [pc, #24]	@ (800195c <StartMeasurement+0x5c>)
 8001942:	f007 fd95 	bl	8009470 <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2); // 再启动捕获
 8001946:	2104      	movs	r1, #4
 8001948:	4804      	ldr	r0, [pc, #16]	@ (800195c <StartMeasurement+0x5c>)
 800194a:	f007 fe7b 	bl	8009644 <HAL_TIM_IC_Start_IT>

	// 最后触发信号
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 800194e:	2201      	movs	r2, #1
 8001950:	2180      	movs	r1, #128	@ 0x80
 8001952:	4805      	ldr	r0, [pc, #20]	@ (8001968 <StartMeasurement+0x68>)
 8001954:	f006 fbd2 	bl	80080fc <HAL_GPIO_WritePin>
	//HAL_Delay(1);  // 延长稳定时间

}
 8001958:	bf00      	nop
 800195a:	bd80      	pop	{r7, pc}
 800195c:	20008058 	.word	0x20008058
 8001960:	20007a78 	.word	0x20007a78
 8001964:	20007a7c 	.word	0x20007a7c
 8001968:	40020000 	.word	0x40020000

0800196c <CalculateTimeConstant>:

/* 计算时间常数 */
float CalculateTimeConstant(void) {
 800196c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001970:	b08c      	sub	sp, #48	@ 0x30
 8001972:	af00      	add	r7, sp, #0
	uint32_t timer_clock = HAL_RCC_GetPCLK1Freq() * 2;
 8001974:	f007 fcaa 	bl	80092cc <HAL_RCC_GetPCLK1Freq>
 8001978:	4603      	mov	r3, r0
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint32_t prescaler = htim2.Init.Prescaler + 1;
 800197e:	4b23      	ldr	r3, [pc, #140]	@ (8001a0c <CalculateTimeConstant+0xa0>)
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	3301      	adds	r3, #1
 8001984:	62bb      	str	r3, [r7, #40]	@ 0x28

	// 关键修正：使用32位实际最大值
	uint32_t timer_max = 0xFFFFFFFF; // 32位定时器最大值
 8001986:	f04f 33ff 	mov.w	r3, #4294967295
 800198a:	627b      	str	r3, [r7, #36]	@ 0x24

	// 防止溢出计数为0时的异常
	uint64_t total_ticks = (uint64_t) overflow_count * timer_max
 800198c:	4b20      	ldr	r3, [pc, #128]	@ (8001a10 <CalculateTimeConstant+0xa4>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2200      	movs	r2, #0
 8001992:	469a      	mov	sl, r3
 8001994:	4693      	mov	fp, r2
 8001996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001998:	2200      	movs	r2, #0
 800199a:	4698      	mov	r8, r3
 800199c:	4691      	mov	r9, r2
 800199e:	fb08 f20b 	mul.w	r2, r8, fp
 80019a2:	fb0a f309 	mul.w	r3, sl, r9
 80019a6:	4413      	add	r3, r2
 80019a8:	fbaa 4508 	umull	r4, r5, sl, r8
 80019ac:	442b      	add	r3, r5
 80019ae:	461d      	mov	r5, r3
			+ capture_value;
 80019b0:	4b18      	ldr	r3, [pc, #96]	@ (8001a14 <CalculateTimeConstant+0xa8>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2200      	movs	r2, #0
 80019b6:	60bb      	str	r3, [r7, #8]
 80019b8:	60fa      	str	r2, [r7, #12]
	uint64_t total_ticks = (uint64_t) overflow_count * timer_max
 80019ba:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80019be:	460b      	mov	r3, r1
 80019c0:	18e3      	adds	r3, r4, r3
 80019c2:	603b      	str	r3, [r7, #0]
 80019c4:	4613      	mov	r3, r2
 80019c6:	eb45 0303 	adc.w	r3, r5, r3
 80019ca:	607b      	str	r3, [r7, #4]
 80019cc:	e9d7 3400 	ldrd	r3, r4, [r7]
 80019d0:	e9c7 3406 	strd	r3, r4, [r7, #24]

	float total_time = (float) total_ticks / (timer_clock / prescaler);
 80019d4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80019d8:	f7ff fa06 	bl	8000de8 <__aeabi_ul2f>
 80019dc:	ee06 0a90 	vmov	s13, r0
 80019e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80019e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80019e8:	ee07 3a90 	vmov	s15, r3
 80019ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80019f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019f4:	edc7 7a05 	vstr	s15, [r7, #20]
	return total_time;
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	ee07 3a90 	vmov	s15, r3
}
 80019fe:	eeb0 0a67 	vmov.f32	s0, s15
 8001a02:	3730      	adds	r7, #48	@ 0x30
 8001a04:	46bd      	mov	sp, r7
 8001a06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a0a:	bf00      	nop
 8001a0c:	20008058 	.word	0x20008058
 8001a10:	20007a78 	.word	0x20007a78
 8001a14:	20007a74 	.word	0x20007a74

08001a18 <black_box_test>:

//黑箱测量
void black_box_test() {
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
	GPIO_Set_HighZ(GPIOB, GPIO_PIN_15);
 8001a1e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001a22:	4824      	ldr	r0, [pc, #144]	@ (8001ab4 <black_box_test+0x9c>)
 8001a24:	f000 f8a6 	bl	8001b74 <GPIO_Set_HighZ>
	GPIO_Set_Low(GPIOA, GPIO_PIN_0);
 8001a28:	2101      	movs	r1, #1
 8001a2a:	4823      	ldr	r0, [pc, #140]	@ (8001ab8 <black_box_test+0xa0>)
 8001a2c:	f000 f8ec 	bl	8001c08 <GPIO_Set_Low>
	GPIO_Set_HighZ(GPIOA, GPIO_PIN_4);
 8001a30:	2110      	movs	r1, #16
 8001a32:	4821      	ldr	r0, [pc, #132]	@ (8001ab8 <black_box_test+0xa0>)
 8001a34:	f000 f89e 	bl	8001b74 <GPIO_Set_HighZ>
	GPIO_Set_Low(GPIOA, GPIO_PIN_7);
 8001a38:	2180      	movs	r1, #128	@ 0x80
 8001a3a:	481f      	ldr	r0, [pc, #124]	@ (8001ab8 <black_box_test+0xa0>)
 8001a3c:	f000 f8e4 	bl	8001c08 <GPIO_Set_Low>
	DMA_Measure();
 8001a40:	f002 f912 	bl	8003c68 <DMA_Measure>
	Determine_black_box();
 8001a44:	f002 fab4 	bl	8003fb0 <Determine_black_box>
	black_box.detected_type = UNKNOWN;
 8001a48:	4b1c      	ldr	r3, [pc, #112]	@ (8001abc <black_box_test+0xa4>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 3; i++) {
 8001a4e:	2300      	movs	r3, #0
 8001a50:	607b      	str	r3, [r7, #4]
 8001a52:	e023      	b.n	8001a9c <black_box_test+0x84>
		black_box.measurement[i].resistance = 0.0f;
 8001a54:	4919      	ldr	r1, [pc, #100]	@ (8001abc <black_box_test+0xa4>)
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	4613      	mov	r3, r2
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	4413      	add	r3, r2
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	440b      	add	r3, r1
 8001a62:	3304      	adds	r3, #4
 8001a64:	f04f 0200 	mov.w	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]
		black_box.measurement[i].capacitance = 0.0f;
 8001a6a:	4914      	ldr	r1, [pc, #80]	@ (8001abc <black_box_test+0xa4>)
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	4613      	mov	r3, r2
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	4413      	add	r3, r2
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	440b      	add	r3, r1
 8001a78:	3308      	adds	r3, #8
 8001a7a:	f04f 0200 	mov.w	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
		black_box.measurement[i].inductance = 0.0f;
 8001a80:	490e      	ldr	r1, [pc, #56]	@ (8001abc <black_box_test+0xa4>)
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	4613      	mov	r3, r2
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	4413      	add	r3, r2
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	440b      	add	r3, r1
 8001a8e:	330c      	adds	r3, #12
 8001a90:	f04f 0200 	mov.w	r2, #0
 8001a94:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 3; i++) {
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	607b      	str	r3, [r7, #4]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	ddd8      	ble.n	8001a54 <black_box_test+0x3c>
	}
	// 初始化测量次数为0
	black_box.measurement_count = 0;
 8001aa2:	4b06      	ldr	r3, [pc, #24]	@ (8001abc <black_box_test+0xa4>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
}
 8001aaa:	bf00      	nop
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40020400 	.word	0x40020400
 8001ab8:	40020000 	.word	0x40020000
 8001abc:	20000300 	.word	0x20000300

08001ac0 <component_test>:

void component_test() {
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
	GPIO_Set_HighZ(GPIOA, GPIO_PIN_4);
 8001ac4:	2110      	movs	r1, #16
 8001ac6:	481e      	ldr	r0, [pc, #120]	@ (8001b40 <component_test+0x80>)
 8001ac8:	f000 f854 	bl	8001b74 <GPIO_Set_HighZ>
	GPIO_Set_HighZ(GPIOB, GPIO_PIN_15);
 8001acc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001ad0:	481c      	ldr	r0, [pc, #112]	@ (8001b44 <component_test+0x84>)
 8001ad2:	f000 f84f 	bl	8001b74 <GPIO_Set_HighZ>
	GPIO_Set_Low(GPIOA, GPIO_PIN_0);
 8001ad6:	2101      	movs	r1, #1
 8001ad8:	4819      	ldr	r0, [pc, #100]	@ (8001b40 <component_test+0x80>)
 8001ada:	f000 f895 	bl	8001c08 <GPIO_Set_Low>
	GPIO_Set_Low(GPIOA, GPIO_PIN_7);
 8001ade:	2180      	movs	r1, #128	@ 0x80
 8001ae0:	4817      	ldr	r0, [pc, #92]	@ (8001b40 <component_test+0x80>)
 8001ae2:	f000 f891 	bl	8001c08 <GPIO_Set_Low>
	//memset(adc_buffer1_com, 0, sizeof(adc_buffer1_com));
	DMA_Measure_com(1, adc_buffer1_com);
 8001ae6:	4918      	ldr	r1, [pc, #96]	@ (8001b48 <component_test+0x88>)
 8001ae8:	2001      	movs	r0, #1
 8001aea:	f002 f83d 	bl	8003b68 <DMA_Measure_com>
	VPA1Z = VPA1;
 8001aee:	4b17      	ldr	r3, [pc, #92]	@ (8001b4c <component_test+0x8c>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a17      	ldr	r2, [pc, #92]	@ (8001b50 <component_test+0x90>)
 8001af4:	6013      	str	r3, [r2, #0]
	VPA0Z = VPA0;
 8001af6:	4b17      	ldr	r3, [pc, #92]	@ (8001b54 <component_test+0x94>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a17      	ldr	r2, [pc, #92]	@ (8001b58 <component_test+0x98>)
 8001afc:	6013      	str	r3, [r2, #0]
	VPA7Z = VPA7;
 8001afe:	4b17      	ldr	r3, [pc, #92]	@ (8001b5c <component_test+0x9c>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a17      	ldr	r2, [pc, #92]	@ (8001b60 <component_test+0xa0>)
 8001b04:	6013      	str	r3, [r2, #0]
	GPIO_Set_HighZ(GPIOA, GPIO_PIN_4);
 8001b06:	2110      	movs	r1, #16
 8001b08:	480d      	ldr	r0, [pc, #52]	@ (8001b40 <component_test+0x80>)
 8001b0a:	f000 f833 	bl	8001b74 <GPIO_Set_HighZ>
	GPIO_Set_HighZ(GPIOB, GPIO_PIN_15);
 8001b0e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001b12:	480c      	ldr	r0, [pc, #48]	@ (8001b44 <component_test+0x84>)
 8001b14:	f000 f82e 	bl	8001b74 <GPIO_Set_HighZ>
	//memset(adc_buffer2_com, 0, sizeof(adc_buffer2_com));
	DMA_Measure_com(2, adc_buffer2_com);
 8001b18:	4912      	ldr	r1, [pc, #72]	@ (8001b64 <component_test+0xa4>)
 8001b1a:	2002      	movs	r0, #2
 8001b1c:	f002 f824 	bl	8003b68 <DMA_Measure_com>
	VPA1F = VPA1;
 8001b20:	4b0a      	ldr	r3, [pc, #40]	@ (8001b4c <component_test+0x8c>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a10      	ldr	r2, [pc, #64]	@ (8001b68 <component_test+0xa8>)
 8001b26:	6013      	str	r3, [r2, #0]
	VPA0F = VPA0;
 8001b28:	4b0a      	ldr	r3, [pc, #40]	@ (8001b54 <component_test+0x94>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a0f      	ldr	r2, [pc, #60]	@ (8001b6c <component_test+0xac>)
 8001b2e:	6013      	str	r3, [r2, #0]
	VPA7F = VPA7;
 8001b30:	4b0a      	ldr	r3, [pc, #40]	@ (8001b5c <component_test+0x9c>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a0e      	ldr	r2, [pc, #56]	@ (8001b70 <component_test+0xb0>)
 8001b36:	6013      	str	r3, [r2, #0]
	Determine_component();
 8001b38:	f000 f8b6 	bl	8001ca8 <Determine_component>
}
 8001b3c:	bf00      	nop
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	40020000 	.word	0x40020000
 8001b44:	40020400 	.word	0x40020400
 8001b48:	20001360 	.word	0x20001360
 8001b4c:	20007a80 	.word	0x20007a80
 8001b50:	20007a84 	.word	0x20007a84
 8001b54:	20007a98 	.word	0x20007a98
 8001b58:	20007a9c 	.word	0x20007a9c
 8001b5c:	20007a8c 	.word	0x20007a8c
 8001b60:	20007a90 	.word	0x20007a90
 8001b64:	20002360 	.word	0x20002360
 8001b68:	20007a88 	.word	0x20007a88
 8001b6c:	20007aa0 	.word	0x20007aa0
 8001b70:	20007a94 	.word	0x20007a94

08001b74 <GPIO_Set_HighZ>:

void GPIO_Set_HighZ(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b08a      	sub	sp, #40	@ 0x28
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	807b      	strh	r3, [r7, #2]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001b80:	2300      	movs	r3, #0
 8001b82:	613b      	str	r3, [r7, #16]
 8001b84:	4b1f      	ldr	r3, [pc, #124]	@ (8001c04 <GPIO_Set_HighZ+0x90>)
 8001b86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b88:	4a1e      	ldr	r2, [pc, #120]	@ (8001c04 <GPIO_Set_HighZ+0x90>)
 8001b8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b8e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b90:	4b1c      	ldr	r3, [pc, #112]	@ (8001c04 <GPIO_Set_HighZ+0x90>)
 8001b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b98:	613b      	str	r3, [r7, #16]
 8001b9a:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	4b18      	ldr	r3, [pc, #96]	@ (8001c04 <GPIO_Set_HighZ+0x90>)
 8001ba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba4:	4a17      	ldr	r2, [pc, #92]	@ (8001c04 <GPIO_Set_HighZ+0x90>)
 8001ba6:	f043 0301 	orr.w	r3, r3, #1
 8001baa:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bac:	4b15      	ldr	r3, [pc, #84]	@ (8001c04 <GPIO_Set_HighZ+0x90>)
 8001bae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb0:	f003 0301 	and.w	r3, r3, #1
 8001bb4:	60fb      	str	r3, [r7, #12]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001bb8:	2300      	movs	r3, #0
 8001bba:	60bb      	str	r3, [r7, #8]
 8001bbc:	4b11      	ldr	r3, [pc, #68]	@ (8001c04 <GPIO_Set_HighZ+0x90>)
 8001bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc0:	4a10      	ldr	r2, [pc, #64]	@ (8001c04 <GPIO_Set_HighZ+0x90>)
 8001bc2:	f043 0302 	orr.w	r3, r3, #2
 8001bc6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bc8:	4b0e      	ldr	r3, [pc, #56]	@ (8001c04 <GPIO_Set_HighZ+0x90>)
 8001bca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	60bb      	str	r3, [r7, #8]
 8001bd2:	68bb      	ldr	r3, [r7, #8]

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001bd4:	f107 0314 	add.w	r3, r7, #20
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	605a      	str	r2, [r3, #4]
 8001bde:	609a      	str	r2, [r3, #8]
 8001be0:	60da      	str	r2, [r3, #12]
 8001be2:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001be4:	887b      	ldrh	r3, [r7, #2]
 8001be6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;  // 输入模式
 8001be8:	2300      	movs	r3, #0
 8001bea:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;      // 无上拉/下拉 → 高阻态
 8001bec:	2300      	movs	r3, #0
 8001bee:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001bf0:	f107 0314 	add.w	r3, r7, #20
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f006 f8e4 	bl	8007dc4 <HAL_GPIO_Init>
}
 8001bfc:	bf00      	nop
 8001bfe:	3728      	adds	r7, #40	@ 0x28
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	40023800 	.word	0x40023800

08001c08 <GPIO_Set_Low>:
 * @brief  设置GPIO为低电平输出
 * @param  GPIOx: GPIO端口
 * @param  GPIO_Pin: 引脚号
 * @retval 无
 */
void GPIO_Set_Low(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b08a      	sub	sp, #40	@ 0x28
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	460b      	mov	r3, r1
 8001c12:	807b      	strh	r3, [r7, #2]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001c14:	2300      	movs	r3, #0
 8001c16:	613b      	str	r3, [r7, #16]
 8001c18:	4b22      	ldr	r3, [pc, #136]	@ (8001ca4 <GPIO_Set_Low+0x9c>)
 8001c1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c1c:	4a21      	ldr	r2, [pc, #132]	@ (8001ca4 <GPIO_Set_Low+0x9c>)
 8001c1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c22:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c24:	4b1f      	ldr	r3, [pc, #124]	@ (8001ca4 <GPIO_Set_Low+0x9c>)
 8001c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c2c:	613b      	str	r3, [r7, #16]
 8001c2e:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001c30:	2300      	movs	r3, #0
 8001c32:	60fb      	str	r3, [r7, #12]
 8001c34:	4b1b      	ldr	r3, [pc, #108]	@ (8001ca4 <GPIO_Set_Low+0x9c>)
 8001c36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c38:	4a1a      	ldr	r2, [pc, #104]	@ (8001ca4 <GPIO_Set_Low+0x9c>)
 8001c3a:	f043 0301 	orr.w	r3, r3, #1
 8001c3e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c40:	4b18      	ldr	r3, [pc, #96]	@ (8001ca4 <GPIO_Set_Low+0x9c>)
 8001c42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c44:	f003 0301 	and.w	r3, r3, #1
 8001c48:	60fb      	str	r3, [r7, #12]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	60bb      	str	r3, [r7, #8]
 8001c50:	4b14      	ldr	r3, [pc, #80]	@ (8001ca4 <GPIO_Set_Low+0x9c>)
 8001c52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c54:	4a13      	ldr	r2, [pc, #76]	@ (8001ca4 <GPIO_Set_Low+0x9c>)
 8001c56:	f043 0302 	orr.w	r3, r3, #2
 8001c5a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c5c:	4b11      	ldr	r3, [pc, #68]	@ (8001ca4 <GPIO_Set_Low+0x9c>)
 8001c5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c60:	f003 0302 	and.w	r3, r3, #2
 8001c64:	60bb      	str	r3, [r7, #8]
 8001c66:	68bb      	ldr	r3, [r7, #8]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001c68:	f107 0314 	add.w	r3, r7, #20
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	605a      	str	r2, [r3, #4]
 8001c72:	609a      	str	r2, [r3, #8]
 8001c74:	60da      	str	r2, [r3, #12]
 8001c76:	611a      	str	r2, [r3, #16]
	// 先配置为输出模式
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001c78:	887b      	ldrh	r3, [r7, #2]
 8001c7a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;   // 推挽输出
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c80:	2300      	movs	r3, #0
 8001c82:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001c84:	f107 0314 	add.w	r3, r7, #20
 8001c88:	4619      	mov	r1, r3
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f006 f89a 	bl	8007dc4 <HAL_GPIO_Init>

	// 再设置低电平
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8001c90:	887b      	ldrh	r3, [r7, #2]
 8001c92:	2200      	movs	r2, #0
 8001c94:	4619      	mov	r1, r3
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f006 fa30 	bl	80080fc <HAL_GPIO_WritePin>
}
 8001c9c:	bf00      	nop
 8001c9e:	3728      	adds	r7, #40	@ 0x28
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	40023800 	.word	0x40023800

08001ca8 <Determine_component>:
//
void Determine_component() {
 8001ca8:	b5b0      	push	{r4, r5, r7, lr}
 8001caa:	b0d0      	sub	sp, #320	@ 0x140
 8001cac:	af02      	add	r7, sp, #8

	if (Analyze_trend(adc_buffer1_com, VPA1Z) == 1
 8001cae:	4bce      	ldr	r3, [pc, #824]	@ (8001fe8 <Determine_component+0x340>)
 8001cb0:	edd3 7a00 	vldr	s15, [r3]
 8001cb4:	eeb0 0a67 	vmov.f32	s0, s15
 8001cb8:	48cc      	ldr	r0, [pc, #816]	@ (8001fec <Determine_component+0x344>)
 8001cba:	f001 fbf9 	bl	80034b0 <Analyze_trend>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	f040 84f7 	bne.w	80026b4 <Determine_component+0xa0c>
			&& Analyze_trend(adc_buffer2_com, VPA1F) == -1) {
 8001cc6:	4bca      	ldr	r3, [pc, #808]	@ (8001ff0 <Determine_component+0x348>)
 8001cc8:	edd3 7a00 	vldr	s15, [r3]
 8001ccc:	eeb0 0a67 	vmov.f32	s0, s15
 8001cd0:	48c8      	ldr	r0, [pc, #800]	@ (8001ff4 <Determine_component+0x34c>)
 8001cd2:	f001 fbed 	bl	80034b0 <Analyze_trend>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cdc:	f040 84ea 	bne.w	80026b4 <Determine_component+0xa0c>
		component.type = COMPONENT_C;
 8001ce0:	4bc5      	ldr	r3, [pc, #788]	@ (8001ff8 <Determine_component+0x350>)
 8001ce2:	2202      	movs	r2, #2
 8001ce4:	701a      	strb	r2, [r3, #0]
		if (steady_test(adc_buffer1_com, VPA1Z)) {
 8001ce6:	4bc0      	ldr	r3, [pc, #768]	@ (8001fe8 <Determine_component+0x340>)
 8001ce8:	edd3 7a00 	vldr	s15, [r3]
 8001cec:	eeb0 0a67 	vmov.f32	s0, s15
 8001cf0:	48be      	ldr	r0, [pc, #760]	@ (8001fec <Determine_component+0x344>)
 8001cf2:	f001 fb2d 	bl	8003350 <steady_test>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	f000 8269 	beq.w	80021d0 <Determine_component+0x528>
			if (Find_tau_com(adc_buffer1_com)) {
 8001cfe:	48bb      	ldr	r0, [pc, #748]	@ (8001fec <Determine_component+0x344>)
 8001d00:	f001 f9ba 	bl	8003078 <Find_tau_com>
 8001d04:	eef0 7a40 	vmov.f32	s15, s0
 8001d08:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d10:	f000 8087 	beq.w	8001e22 <Determine_component+0x17a>
				float tau = Find_tau_com(adc_buffer1_com);
 8001d14:	48b5      	ldr	r0, [pc, #724]	@ (8001fec <Determine_component+0x344>)
 8001d16:	f001 f9af 	bl	8003078 <Find_tau_com>
 8001d1a:	ed87 0a19 	vstr	s0, [r7, #100]	@ 0x64
				float v_initial = 0.0f;
 8001d1e:	f04f 0300 	mov.w	r3, #0
 8001d22:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
				//int initial_index;
				for (int i = 0; i < BUFFER_SIZE; i++) {
 8001d26:	2300      	movs	r3, #0
 8001d28:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8001d2c:	e024      	b.n	8001d78 <Determine_component+0xd0>
					float voltage = (adc_buffer1_com[i] * VREF) / 4095.0f;
 8001d2e:	4aaf      	ldr	r2, [pc, #700]	@ (8001fec <Determine_component+0x344>)
 8001d30:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001d34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d38:	ee07 3a90 	vmov	s15, r3
 8001d3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d40:	ed9f 7aae 	vldr	s14, [pc, #696]	@ 8001ffc <Determine_component+0x354>
 8001d44:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001d48:	eddf 6aad 	vldr	s13, [pc, #692]	@ 8002000 <Determine_component+0x358>
 8001d4c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d50:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
					if (voltage > MIN_VOLTAGE) {
 8001d54:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8001d58:	ed9f 7aaa 	vldr	s14, [pc, #680]	@ 8002004 <Determine_component+0x35c>
 8001d5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d64:	dd03      	ble.n	8001d6e <Determine_component+0xc6>
						v_initial = voltage;
 8001d66:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001d68:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
						//initial_index=i;
						break;
 8001d6c:	e009      	b.n	8001d82 <Determine_component+0xda>
				for (int i = 0; i < BUFFER_SIZE; i++) {
 8001d6e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001d72:	3301      	adds	r3, #1
 8001d74:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8001d78:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001d7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001d80:	dbd5      	blt.n	8001d2e <Determine_component+0x86>
					}
				}
				float r_com = (v_initial * R_KNOWN) / (VREF - v_initial);
 8001d82:	edd7 7a4d 	vldr	s15, [r7, #308]	@ 0x134
 8001d86:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 8002008 <Determine_component+0x360>
 8001d8a:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001d8e:	ed9f 7a9b 	vldr	s14, [pc, #620]	@ 8001ffc <Determine_component+0x354>
 8001d92:	edd7 7a4d 	vldr	s15, [r7, #308]	@ 0x134
 8001d96:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d9e:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
				float c_com = tau / (r_com+51);
 8001da2:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8001da6:	ed9f 7a98 	vldr	s14, [pc, #608]	@ 8002008 <Determine_component+0x360>
 8001daa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001dae:	edd7 6a19 	vldr	s13, [r7, #100]	@ 0x64
 8001db2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001db6:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
//				sprintf(message1, "Rs=%.2fΩ", r_com);
//				sprintf(message2, "Cs=%.4fuF", c_com);
				sprintf(message1, "ESR=%.2f C=%.4fuF", r_com,(c_com * 1e6)-0.2f);
 8001dba:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8001dbc:	f7fe fbcc 	bl	8000558 <__aeabi_f2d>
 8001dc0:	4604      	mov	r4, r0
 8001dc2:	460d      	mov	r5, r1
 8001dc4:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8001dc6:	f7fe fbc7 	bl	8000558 <__aeabi_f2d>
 8001dca:	a383      	add	r3, pc, #524	@ (adr r3, 8001fd8 <Determine_component+0x330>)
 8001dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd0:	f7fe fc1a 	bl	8000608 <__aeabi_dmul>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	4610      	mov	r0, r2
 8001dda:	4619      	mov	r1, r3
 8001ddc:	a380      	add	r3, pc, #512	@ (adr r3, 8001fe0 <Determine_component+0x338>)
 8001dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001de2:	f7fe fa59 	bl	8000298 <__aeabi_dsub>
 8001de6:	4602      	mov	r2, r0
 8001de8:	460b      	mov	r3, r1
 8001dea:	e9cd 2300 	strd	r2, r3, [sp]
 8001dee:	4622      	mov	r2, r4
 8001df0:	462b      	mov	r3, r5
 8001df2:	4986      	ldr	r1, [pc, #536]	@ (800200c <Determine_component+0x364>)
 8001df4:	4886      	ldr	r0, [pc, #536]	@ (8002010 <Determine_component+0x368>)
 8001df6:	f009 fb65 	bl	800b4c4 <siprintf>
				OLED_NewFrame();
 8001dfa:	f003 fe43 	bl	8005a84 <OLED_NewFrame>
				OLED_DrawImage(0, 0, &CImg, OLED_COLOR_NORMAL);
 8001dfe:	2300      	movs	r3, #0
 8001e00:	4a84      	ldr	r2, [pc, #528]	@ (8002014 <Determine_component+0x36c>)
 8001e02:	2100      	movs	r1, #0
 8001e04:	2000      	movs	r0, #0
 8001e06:	f004 f80a 	bl	8005e1e <OLED_DrawImage>
				OLED_PrintASCIIString(0, 48, message1, &afont8x6,OLED_COLOR_NORMAL);
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	9300      	str	r3, [sp, #0]
 8001e0e:	4b82      	ldr	r3, [pc, #520]	@ (8002018 <Determine_component+0x370>)
 8001e10:	4a7f      	ldr	r2, [pc, #508]	@ (8002010 <Determine_component+0x368>)
 8001e12:	2130      	movs	r1, #48	@ 0x30
 8001e14:	2000      	movs	r0, #0
 8001e16:	f004 f851 	bl	8005ebc <OLED_PrintASCIIString>
				OLED_ShowFrame();
 8001e1a:	f003 fe3f 	bl	8005a9c <OLED_ShowFrame>
		if (steady_test(adc_buffer1_com, VPA1Z)) {
 8001e1e:	f001 b901 	b.w	8003024 <Determine_component+0x137c>
			} else {
				float v_initial = 0.0f;
 8001e22:	f04f 0300 	mov.w	r3, #0
 8001e26:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
				//int initial_index;
				for (int i = 0; i < BUFFER_SIZE; i++) {
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8001e30:	e025      	b.n	8001e7e <Determine_component+0x1d6>
					float voltage = (adc_buffer1_com[i] * VREF) / 4095.0f;
 8001e32:	4a6e      	ldr	r2, [pc, #440]	@ (8001fec <Determine_component+0x344>)
 8001e34:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001e38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001e3c:	ee07 3a90 	vmov	s15, r3
 8001e40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e44:	ed9f 7a6d 	vldr	s14, [pc, #436]	@ 8001ffc <Determine_component+0x354>
 8001e48:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001e4c:	eddf 6a6c 	vldr	s13, [pc, #432]	@ 8002000 <Determine_component+0x358>
 8001e50:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e54:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0
					if (voltage > MIN_VOLTAGE) {
 8001e58:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8001e5c:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 8002004 <Determine_component+0x35c>
 8001e60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e68:	dd04      	ble.n	8001e74 <Determine_component+0x1cc>
						v_initial = voltage;
 8001e6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001e6e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
						//initial_index=i;
						break;
 8001e72:	e009      	b.n	8001e88 <Determine_component+0x1e0>
				for (int i = 0; i < BUFFER_SIZE; i++) {
 8001e74:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001e78:	3301      	adds	r3, #1
 8001e7a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8001e7e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001e82:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001e86:	dbd4      	blt.n	8001e32 <Determine_component+0x18a>
					}
				}
				float r_com = (v_initial * R_KNOWN) / (VREF - v_initial);
 8001e88:	edd7 7a4b 	vldr	s15, [r7, #300]	@ 0x12c
 8001e8c:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8002008 <Determine_component+0x360>
 8001e90:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001e94:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8001ffc <Determine_component+0x354>
 8001e98:	edd7 7a4b 	vldr	s15, [r7, #300]	@ 0x12c
 8001e9c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ea0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ea4:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
				//确定是电容，换用5.1k
				GPIO_Set_HighZ(GPIOA, GPIO_PIN_0);
 8001ea8:	2101      	movs	r1, #1
 8001eaa:	485c      	ldr	r0, [pc, #368]	@ (800201c <Determine_component+0x374>)
 8001eac:	f7ff fe62 	bl	8001b74 <GPIO_Set_HighZ>
				GPIO_Set_Low(GPIOA, GPIO_PIN_4);
 8001eb0:	2110      	movs	r1, #16
 8001eb2:	485a      	ldr	r0, [pc, #360]	@ (800201c <Determine_component+0x374>)
 8001eb4:	f7ff fea8 	bl	8001c08 <GPIO_Set_Low>
				GPIO_Set_Low(GPIOA, GPIO_PIN_7);
 8001eb8:	2180      	movs	r1, #128	@ 0x80
 8001eba:	4858      	ldr	r0, [pc, #352]	@ (800201c <Determine_component+0x374>)
 8001ebc:	f7ff fea4 	bl	8001c08 <GPIO_Set_Low>
				GPIO_Set_HighZ(GPIOB, GPIO_PIN_15);
 8001ec0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001ec4:	4856      	ldr	r0, [pc, #344]	@ (8002020 <Determine_component+0x378>)
 8001ec6:	f7ff fe55 	bl	8001b74 <GPIO_Set_HighZ>
				memset(adc_buffer1_com, 0, sizeof(adc_buffer1_com));
 8001eca:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001ece:	2100      	movs	r1, #0
 8001ed0:	4846      	ldr	r0, [pc, #280]	@ (8001fec <Determine_component+0x344>)
 8001ed2:	f009 fb6c 	bl	800b5ae <memset>
				DMA_Measure_com(3, adc_buffer1_com);
 8001ed6:	4945      	ldr	r1, [pc, #276]	@ (8001fec <Determine_component+0x344>)
 8001ed8:	2003      	movs	r0, #3
 8001eda:	f001 fe45 	bl	8003b68 <DMA_Measure_com>
				VPA1Z = VPA1;
 8001ede:	4b51      	ldr	r3, [pc, #324]	@ (8002024 <Determine_component+0x37c>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a41      	ldr	r2, [pc, #260]	@ (8001fe8 <Determine_component+0x340>)
 8001ee4:	6013      	str	r3, [r2, #0]
				if (steady_test(adc_buffer1_com, VPA1Z)) {
 8001ee6:	4b40      	ldr	r3, [pc, #256]	@ (8001fe8 <Determine_component+0x340>)
 8001ee8:	edd3 7a00 	vldr	s15, [r3]
 8001eec:	eeb0 0a67 	vmov.f32	s0, s15
 8001ef0:	483e      	ldr	r0, [pc, #248]	@ (8001fec <Determine_component+0x344>)
 8001ef2:	f001 fa2d 	bl	8003350 <steady_test>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	f000 8097 	beq.w	800202c <Determine_component+0x384>
					float tau = Find_tau_com(adc_buffer1_com);
 8001efe:	483b      	ldr	r0, [pc, #236]	@ (8001fec <Determine_component+0x344>)
 8001f00:	f001 f8ba 	bl	8003078 <Find_tau_com>
 8001f04:	ed87 0a1d 	vstr	s0, [r7, #116]	@ 0x74
					float v_initial = 0.0f;
 8001f08:	f04f 0300 	mov.w	r3, #0
 8001f0c:	673b      	str	r3, [r7, #112]	@ 0x70
					//int initial_index;
					for (int i = 0; i < BUFFER_SIZE; i++) {
 8001f0e:	2300      	movs	r3, #0
 8001f10:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001f14:	e023      	b.n	8001f5e <Determine_component+0x2b6>
						float voltage = (adc_buffer1_com[i] * VREF) / 4095.0f;
 8001f16:	4a35      	ldr	r2, [pc, #212]	@ (8001fec <Determine_component+0x344>)
 8001f18:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001f1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f20:	ee07 3a90 	vmov	s15, r3
 8001f24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f28:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8001ffc <Determine_component+0x354>
 8001f2c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f30:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8002000 <Determine_component+0x358>
 8001f34:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f38:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
						if (voltage > MIN_VOLTAGE) {
 8001f3c:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8001f40:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8002004 <Determine_component+0x35c>
 8001f44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f4c:	dd02      	ble.n	8001f54 <Determine_component+0x2ac>
							v_initial = voltage;
 8001f4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f50:	673b      	str	r3, [r7, #112]	@ 0x70
							//initial_index=i;
							break;
 8001f52:	e009      	b.n	8001f68 <Determine_component+0x2c0>
					for (int i = 0; i < BUFFER_SIZE; i++) {
 8001f54:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001f58:	3301      	adds	r3, #1
 8001f5a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001f5e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001f62:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001f66:	dbd6      	blt.n	8001f16 <Determine_component+0x26e>
						}
					}
					//float r_com = (v_initial * 5100) / (VREF - v_initial);
					float c_com = tau / (r_com + 5100);
 8001f68:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8001f6c:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8002028 <Determine_component+0x380>
 8001f70:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001f74:	edd7 6a1d 	vldr	s13, [r7, #116]	@ 0x74
 8001f78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f7c:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
//					sprintf(message1, "Rs=%.2fΩ", r_com);
//					sprintf(message2, "Cs=%.4fuF", c_com * 1e6);
					sprintf(message1, "ESR=%.2f C=%.4fuF", r_com,c_com * 1e6);
 8001f80:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8001f84:	f7fe fae8 	bl	8000558 <__aeabi_f2d>
 8001f88:	4604      	mov	r4, r0
 8001f8a:	460d      	mov	r5, r1
 8001f8c:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8001f8e:	f7fe fae3 	bl	8000558 <__aeabi_f2d>
 8001f92:	a311      	add	r3, pc, #68	@ (adr r3, 8001fd8 <Determine_component+0x330>)
 8001f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f98:	f7fe fb36 	bl	8000608 <__aeabi_dmul>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	e9cd 2300 	strd	r2, r3, [sp]
 8001fa4:	4622      	mov	r2, r4
 8001fa6:	462b      	mov	r3, r5
 8001fa8:	4918      	ldr	r1, [pc, #96]	@ (800200c <Determine_component+0x364>)
 8001faa:	4819      	ldr	r0, [pc, #100]	@ (8002010 <Determine_component+0x368>)
 8001fac:	f009 fa8a 	bl	800b4c4 <siprintf>
					OLED_NewFrame();
 8001fb0:	f003 fd68 	bl	8005a84 <OLED_NewFrame>
					OLED_DrawImage(0, 0, &CImg, OLED_COLOR_NORMAL);
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	4a17      	ldr	r2, [pc, #92]	@ (8002014 <Determine_component+0x36c>)
 8001fb8:	2100      	movs	r1, #0
 8001fba:	2000      	movs	r0, #0
 8001fbc:	f003 ff2f 	bl	8005e1e <OLED_DrawImage>
					OLED_PrintASCIIString(0, 48, message1, &afont8x6,OLED_COLOR_NORMAL);
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	9300      	str	r3, [sp, #0]
 8001fc4:	4b14      	ldr	r3, [pc, #80]	@ (8002018 <Determine_component+0x370>)
 8001fc6:	4a12      	ldr	r2, [pc, #72]	@ (8002010 <Determine_component+0x368>)
 8001fc8:	2130      	movs	r1, #48	@ 0x30
 8001fca:	2000      	movs	r0, #0
 8001fcc:	f003 ff76 	bl	8005ebc <OLED_PrintASCIIString>
					OLED_ShowFrame();
 8001fd0:	f003 fd64 	bl	8005a9c <OLED_ShowFrame>
		if (steady_test(adc_buffer1_com, VPA1Z)) {
 8001fd4:	f001 b826 	b.w	8003024 <Determine_component+0x137c>
 8001fd8:	00000000 	.word	0x00000000
 8001fdc:	412e8480 	.word	0x412e8480
 8001fe0:	a0000000 	.word	0xa0000000
 8001fe4:	3fc99999 	.word	0x3fc99999
 8001fe8:	20007a84 	.word	0x20007a84
 8001fec:	20001360 	.word	0x20001360
 8001ff0:	20007a88 	.word	0x20007a88
 8001ff4:	20002360 	.word	0x20002360
 8001ff8:	2000032c 	.word	0x2000032c
 8001ffc:	40533333 	.word	0x40533333
 8002000:	457ff000 	.word	0x457ff000
 8002004:	3d4ccccd 	.word	0x3d4ccccd
 8002008:	424c0000 	.word	0x424c0000
 800200c:	0800e8d8 	.word	0x0800e8d8
 8002010:	20007aa4 	.word	0x20007aa4
 8002014:	0800fe50 	.word	0x0800fe50
 8002018:	0800ec30 	.word	0x0800ec30
 800201c:	40020000 	.word	0x40020000
 8002020:	40020400 	.word	0x40020400
 8002024:	20007a80 	.word	0x20007a80
 8002028:	459f6000 	.word	0x459f6000
				} else {   //换电阻后未达稳态
					float v_target1 = (adc_buffer1_com[800] * VREF) / 4095.0f;
 800202c:	4bae      	ldr	r3, [pc, #696]	@ (80022e8 <Determine_component+0x640>)
 800202e:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	@ 0x640
 8002032:	ee07 3a90 	vmov	s15, r3
 8002036:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800203a:	ed9f 7ab7 	vldr	s14, [pc, #732]	@ 8002318 <Determine_component+0x670>
 800203e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002042:	eddf 6aaa 	vldr	s13, [pc, #680]	@ 80022ec <Determine_component+0x644>
 8002046:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800204a:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
					float v_initial = 0.0f;
 800204e:	f04f 0300 	mov.w	r3, #0
 8002052:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
					//int initial_index;
					for (int i = 0; i < BUFFER_SIZE; i++) {
 8002056:	2300      	movs	r3, #0
 8002058:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800205c:	e025      	b.n	80020aa <Determine_component+0x402>
						float voltage = (adc_buffer1_com[i] * VREF) / 4095.0f;
 800205e:	4aa2      	ldr	r2, [pc, #648]	@ (80022e8 <Determine_component+0x640>)
 8002060:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002064:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002068:	ee07 3a90 	vmov	s15, r3
 800206c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002070:	ed9f 7aa9 	vldr	s14, [pc, #676]	@ 8002318 <Determine_component+0x670>
 8002074:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002078:	eddf 6a9c 	vldr	s13, [pc, #624]	@ 80022ec <Determine_component+0x644>
 800207c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002080:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
						if (voltage > MIN_VOLTAGE) {
 8002084:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8002088:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 80022f0 <Determine_component+0x648>
 800208c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002094:	dd04      	ble.n	80020a0 <Determine_component+0x3f8>
							v_initial = voltage;
 8002096:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800209a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
							//initial_index=i;
							break;
 800209e:	e009      	b.n	80020b4 <Determine_component+0x40c>
					for (int i = 0; i < BUFFER_SIZE; i++) {
 80020a0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80020a4:	3301      	adds	r3, #1
 80020a6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80020aa:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80020ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80020b2:	dbd4      	blt.n	800205e <Determine_component+0x3b6>
						}
					}
					int target1_index = 800;
 80020b4:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80020b8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
					float v_target2 = (adc_buffer1_com[1600] * VREF) / 4095.0f;
 80020bc:	4b8a      	ldr	r3, [pc, #552]	@ (80022e8 <Determine_component+0x640>)
 80020be:	f8b3 3c80 	ldrh.w	r3, [r3, #3200]	@ 0xc80
 80020c2:	ee07 3a90 	vmov	s15, r3
 80020c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020ca:	ed9f 7a93 	vldr	s14, [pc, #588]	@ 8002318 <Determine_component+0x670>
 80020ce:	ee27 7a87 	vmul.f32	s14, s15, s14
 80020d2:	eddf 6a86 	vldr	s13, [pc, #536]	@ 80022ec <Determine_component+0x644>
 80020d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020da:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
					;
					int target2_index = 1600;
 80020de:	f44f 63c8 	mov.w	r3, #1600	@ 0x640
 80020e2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
					float delta_t = (target2_index - target1_index)
 80020e6:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80020ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80020ee:	1ad3      	subs	r3, r2, r3
							/ (float) SAMPLE_RATE;
 80020f0:	ee07 3a90 	vmov	s15, r3
 80020f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
					float delta_t = (target2_index - target1_index)
 80020f8:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 80022f4 <Determine_component+0x64c>
 80020fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002100:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
					// 计算时间常数τ = Δt / ln[(V_ss - v1)/(V_ss - v2)]
					float tau = delta_t
							/ log((VPA1Z - v_target1) / (VPA1Z - v_target2));
 8002104:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8002108:	f7fe fa26 	bl	8000558 <__aeabi_f2d>
 800210c:	4604      	mov	r4, r0
 800210e:	460d      	mov	r5, r1
 8002110:	4b79      	ldr	r3, [pc, #484]	@ (80022f8 <Determine_component+0x650>)
 8002112:	ed93 7a00 	vldr	s14, [r3]
 8002116:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 800211a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800211e:	4b76      	ldr	r3, [pc, #472]	@ (80022f8 <Determine_component+0x650>)
 8002120:	edd3 6a00 	vldr	s13, [r3]
 8002124:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8002128:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800212c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002130:	ee16 0a90 	vmov	r0, s13
 8002134:	f7fe fa10 	bl	8000558 <__aeabi_f2d>
 8002138:	4602      	mov	r2, r0
 800213a:	460b      	mov	r3, r1
 800213c:	ec43 2b10 	vmov	d0, r2, r3
 8002140:	f00b fb06 	bl	800d750 <log>
 8002144:	ec53 2b10 	vmov	r2, r3, d0
 8002148:	4620      	mov	r0, r4
 800214a:	4629      	mov	r1, r5
 800214c:	f7fe fb86 	bl	800085c <__aeabi_ddiv>
 8002150:	4602      	mov	r2, r0
 8002152:	460b      	mov	r3, r1
					float tau = delta_t
 8002154:	4610      	mov	r0, r2
 8002156:	4619      	mov	r1, r3
 8002158:	f7fe fd2e 	bl	8000bb8 <__aeabi_d2f>
 800215c:	4603      	mov	r3, r0
 800215e:	67fb      	str	r3, [r7, #124]	@ 0x7c
					//float   r_com=(v_initial* 5100) / (VREF - v_initial);
					float c_com = tau / (r_com + 5100);
 8002160:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8002164:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 80022fc <Determine_component+0x654>
 8002168:	ee37 7a87 	vadd.f32	s14, s15, s14
 800216c:	edd7 6a1f 	vldr	s13, [r7, #124]	@ 0x7c
 8002170:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002174:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
//					sprintf(message1, "Rs=%.2fΩ", r_com);
//					sprintf(message2, "Cs=%.4fuF", c_com * 1e6);
					sprintf(message1, "ESR=%.2f C=%.4fuF", r_com,c_com * 1e6);
 8002178:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 800217c:	f7fe f9ec 	bl	8000558 <__aeabi_f2d>
 8002180:	4604      	mov	r4, r0
 8002182:	460d      	mov	r5, r1
 8002184:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8002186:	f7fe f9e7 	bl	8000558 <__aeabi_f2d>
 800218a:	a353      	add	r3, pc, #332	@ (adr r3, 80022d8 <Determine_component+0x630>)
 800218c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002190:	f7fe fa3a 	bl	8000608 <__aeabi_dmul>
 8002194:	4602      	mov	r2, r0
 8002196:	460b      	mov	r3, r1
 8002198:	e9cd 2300 	strd	r2, r3, [sp]
 800219c:	4622      	mov	r2, r4
 800219e:	462b      	mov	r3, r5
 80021a0:	4957      	ldr	r1, [pc, #348]	@ (8002300 <Determine_component+0x658>)
 80021a2:	4858      	ldr	r0, [pc, #352]	@ (8002304 <Determine_component+0x65c>)
 80021a4:	f009 f98e 	bl	800b4c4 <siprintf>
					OLED_NewFrame();
 80021a8:	f003 fc6c 	bl	8005a84 <OLED_NewFrame>
					OLED_DrawImage(0, 0, &CImg, OLED_COLOR_NORMAL);
 80021ac:	2300      	movs	r3, #0
 80021ae:	4a56      	ldr	r2, [pc, #344]	@ (8002308 <Determine_component+0x660>)
 80021b0:	2100      	movs	r1, #0
 80021b2:	2000      	movs	r0, #0
 80021b4:	f003 fe33 	bl	8005e1e <OLED_DrawImage>
					OLED_PrintASCIIString(0, 48, message1, &afont8x6,OLED_COLOR_NORMAL);
 80021b8:	2300      	movs	r3, #0
 80021ba:	9300      	str	r3, [sp, #0]
 80021bc:	4b53      	ldr	r3, [pc, #332]	@ (800230c <Determine_component+0x664>)
 80021be:	4a51      	ldr	r2, [pc, #324]	@ (8002304 <Determine_component+0x65c>)
 80021c0:	2130      	movs	r1, #48	@ 0x30
 80021c2:	2000      	movs	r0, #0
 80021c4:	f003 fe7a 	bl	8005ebc <OLED_PrintASCIIString>
					OLED_ShowFrame();
 80021c8:	f003 fc68 	bl	8005a9c <OLED_ShowFrame>
		if (steady_test(adc_buffer1_com, VPA1Z)) {
 80021cc:	f000 bf2a 	b.w	8003024 <Determine_component+0x137c>
			}

		} else {
			float v_initial;
			float index;
			int find = 0;
 80021d0:	2300      	movs	r3, #0
 80021d2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
			float initial_index;
			for (int i = 0; i < BUFFER_SIZE; i++) {
 80021d6:	2300      	movs	r3, #0
 80021d8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80021dc:	e02d      	b.n	800223a <Determine_component+0x592>
				float voltage = (adc_buffer1_com[i] * VREF) / 4095.0f;
 80021de:	4a42      	ldr	r2, [pc, #264]	@ (80022e8 <Determine_component+0x640>)
 80021e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80021e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80021e8:	ee07 3a90 	vmov	s15, r3
 80021ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021f0:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8002318 <Determine_component+0x670>
 80021f4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80021f8:	eddf 6a3c 	vldr	s13, [pc, #240]	@ 80022ec <Determine_component+0x644>
 80021fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002200:	edc7 7a37 	vstr	s15, [r7, #220]	@ 0xdc
				if (voltage > MIN_VOLTAGE) {
 8002204:	edd7 7a37 	vldr	s15, [r7, #220]	@ 0xdc
 8002208:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 80022f0 <Determine_component+0x648>
 800220c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002214:	dd0c      	ble.n	8002230 <Determine_component+0x588>
					v_initial = voltage;
 8002216:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800221a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
					initial_index = i;
 800221e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002222:	ee07 3a90 	vmov	s15, r3
 8002226:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800222a:	edc7 7a44 	vstr	s15, [r7, #272]	@ 0x110
					break;
 800222e:	e009      	b.n	8002244 <Determine_component+0x59c>
			for (int i = 0; i < BUFFER_SIZE; i++) {
 8002230:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002234:	3301      	adds	r3, #1
 8002236:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800223a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800223e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002242:	dbcc      	blt.n	80021de <Determine_component+0x536>
				}
			}
			//float r_com = (v_initial * R_KNOWN) / (VREF - v_initial);
			float v_target = 0.632 * VPA1Z;
 8002244:	4b2c      	ldr	r3, [pc, #176]	@ (80022f8 <Determine_component+0x650>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4618      	mov	r0, r3
 800224a:	f7fe f985 	bl	8000558 <__aeabi_f2d>
 800224e:	a324      	add	r3, pc, #144	@ (adr r3, 80022e0 <Determine_component+0x638>)
 8002250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002254:	f7fe f9d8 	bl	8000608 <__aeabi_dmul>
 8002258:	4602      	mov	r2, r0
 800225a:	460b      	mov	r3, r1
 800225c:	4610      	mov	r0, r2
 800225e:	4619      	mov	r1, r3
 8002260:	f7fe fcaa 	bl	8000bb8 <__aeabi_d2f>
 8002264:	4603      	mov	r3, r0
 8002266:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
			for (int i = 0; i < BUFFER_SIZE; i++) {
 800226a:	2300      	movs	r3, #0
 800226c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002270:	e05e      	b.n	8002330 <Determine_component+0x688>
				float voltage = (adc_buffer1_com[i] * VREF) / 4095.0f;
 8002272:	4a1d      	ldr	r2, [pc, #116]	@ (80022e8 <Determine_component+0x640>)
 8002274:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002278:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800227c:	ee07 3a90 	vmov	s15, r3
 8002280:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002284:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8002318 <Determine_component+0x670>
 8002288:	ee27 7a87 	vmul.f32	s14, s15, s14
 800228c:	eddf 6a17 	vldr	s13, [pc, #92]	@ 80022ec <Determine_component+0x644>
 8002290:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002294:	edc7 7a35 	vstr	s15, [r7, #212]	@ 0xd4
				if (voltage >= v_target) {
 8002298:	ed97 7a35 	vldr	s14, [r7, #212]	@ 0xd4
 800229c:	edd7 7a36 	vldr	s15, [r7, #216]	@ 0xd8
 80022a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022a8:	db3d      	blt.n	8002326 <Determine_component+0x67e>
					index = i;
 80022aa:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80022ae:	ee07 3a90 	vmov	s15, r3
 80022b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022b6:	edc7 7a46 	vstr	s15, [r7, #280]	@ 0x118
					if (index < BUFFER_SIZE - 1) {
 80022ba:	edd7 7a46 	vldr	s15, [r7, #280]	@ 0x118
 80022be:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8002310 <Determine_component+0x668>
 80022c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022ca:	d529      	bpl.n	8002320 <Determine_component+0x678>
						find = 1;
 80022cc:	2301      	movs	r3, #1
 80022ce:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
						break;
 80022d2:	e032      	b.n	800233a <Determine_component+0x692>
 80022d4:	f3af 8000 	nop.w
 80022d8:	00000000 	.word	0x00000000
 80022dc:	412e8480 	.word	0x412e8480
 80022e0:	10624dd3 	.word	0x10624dd3
 80022e4:	3fe43958 	.word	0x3fe43958
 80022e8:	20001360 	.word	0x20001360
 80022ec:	457ff000 	.word	0x457ff000
 80022f0:	3d4ccccd 	.word	0x3d4ccccd
 80022f4:	48f42400 	.word	0x48f42400
 80022f8:	20007a84 	.word	0x20007a84
 80022fc:	459f6000 	.word	0x459f6000
 8002300:	0800e8d8 	.word	0x0800e8d8
 8002304:	20007aa4 	.word	0x20007aa4
 8002308:	0800fe50 	.word	0x0800fe50
 800230c:	0800ec30 	.word	0x0800ec30
 8002310:	44ffe000 	.word	0x44ffe000
 8002314:	49742400 	.word	0x49742400
 8002318:	40533333 	.word	0x40533333
 800231c:	424c0000 	.word	0x424c0000
					} else {
						find = 0;
 8002320:	2300      	movs	r3, #0
 8002322:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
			for (int i = 0; i < BUFFER_SIZE; i++) {
 8002326:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800232a:	3301      	adds	r3, #1
 800232c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002330:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002334:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002338:	db9b      	blt.n	8002272 <Determine_component+0x5ca>
					}
				}
			}
			if (find == 1) {
 800233a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800233e:	2b01      	cmp	r3, #1
 8002340:	d156      	bne.n	80023f0 <Determine_component+0x748>
				float tau = (index - initial_index) * 2 / 1000000;
 8002342:	ed97 7a46 	vldr	s14, [r7, #280]	@ 0x118
 8002346:	edd7 7a44 	vldr	s15, [r7, #272]	@ 0x110
 800234a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800234e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002352:	ed5f 6a10 	vldr	s13, [pc, #-64]	@ 8002314 <Determine_component+0x66c>
 8002356:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800235a:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
				float r_com = (v_initial * R_KNOWN) / (VREF - v_initial);
 800235e:	edd7 7a47 	vldr	s15, [r7, #284]	@ 0x11c
 8002362:	ed1f 7a12 	vldr	s14, [pc, #-72]	@ 800231c <Determine_component+0x674>
 8002366:	ee67 6a87 	vmul.f32	s13, s15, s14
 800236a:	ed1f 7a15 	vldr	s14, [pc, #-84]	@ 8002318 <Determine_component+0x670>
 800236e:	edd7 7a47 	vldr	s15, [r7, #284]	@ 0x11c
 8002372:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002376:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800237a:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
				float c_com = tau / (r_com + R_KNOWN);
 800237e:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8002382:	ed1f 7a1a 	vldr	s14, [pc, #-104]	@ 800231c <Determine_component+0x674>
 8002386:	ee37 7a87 	vadd.f32	s14, s15, s14
 800238a:	edd7 6a2b 	vldr	s13, [r7, #172]	@ 0xac
 800238e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002392:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
//				sprintf(message1, "Rs=%.2fΩ", r_com);
//				sprintf(message2, "Cs=%.4fuF", c_com * 1e6);
				sprintf(message1, "ESR=%.2f C=%.4fuF", r_com,c_com * 1e6);
 8002396:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 800239a:	f7fe f8dd 	bl	8000558 <__aeabi_f2d>
 800239e:	4604      	mov	r4, r0
 80023a0:	460d      	mov	r5, r1
 80023a2:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 80023a6:	f7fe f8d7 	bl	8000558 <__aeabi_f2d>
 80023aa:	a3af      	add	r3, pc, #700	@ (adr r3, 8002668 <Determine_component+0x9c0>)
 80023ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b0:	f7fe f92a 	bl	8000608 <__aeabi_dmul>
 80023b4:	4602      	mov	r2, r0
 80023b6:	460b      	mov	r3, r1
 80023b8:	e9cd 2300 	strd	r2, r3, [sp]
 80023bc:	4622      	mov	r2, r4
 80023be:	462b      	mov	r3, r5
 80023c0:	49ab      	ldr	r1, [pc, #684]	@ (8002670 <Determine_component+0x9c8>)
 80023c2:	48ac      	ldr	r0, [pc, #688]	@ (8002674 <Determine_component+0x9cc>)
 80023c4:	f009 f87e 	bl	800b4c4 <siprintf>
				OLED_NewFrame();
 80023c8:	f003 fb5c 	bl	8005a84 <OLED_NewFrame>
				OLED_DrawImage(0, 0, &CImg, OLED_COLOR_NORMAL);
 80023cc:	2300      	movs	r3, #0
 80023ce:	4aaa      	ldr	r2, [pc, #680]	@ (8002678 <Determine_component+0x9d0>)
 80023d0:	2100      	movs	r1, #0
 80023d2:	2000      	movs	r0, #0
 80023d4:	f003 fd23 	bl	8005e1e <OLED_DrawImage>
				OLED_PrintASCIIString(0, 48, message1, &afont8x6,OLED_COLOR_NORMAL);
 80023d8:	2300      	movs	r3, #0
 80023da:	9300      	str	r3, [sp, #0]
 80023dc:	4ba7      	ldr	r3, [pc, #668]	@ (800267c <Determine_component+0x9d4>)
 80023de:	4aa5      	ldr	r2, [pc, #660]	@ (8002674 <Determine_component+0x9cc>)
 80023e0:	2130      	movs	r1, #48	@ 0x30
 80023e2:	2000      	movs	r0, #0
 80023e4:	f003 fd6a 	bl	8005ebc <OLED_PrintASCIIString>
				OLED_ShowFrame();
 80023e8:	f003 fb58 	bl	8005a9c <OLED_ShowFrame>
		if (steady_test(adc_buffer1_com, VPA1Z)) {
 80023ec:	f000 be1a 	b.w	8003024 <Determine_component+0x137c>
			} else {
				HAL_Delay(50);  // 10ms放电
 80023f0:	2032      	movs	r0, #50	@ 0x32
 80023f2:	f004 fa61 	bl	80068b8 <HAL_Delay>
				// 2. 启动DMA采样
				GPIO_Set_Low(GPIOA, GPIO_PIN_0);
 80023f6:	2101      	movs	r1, #1
 80023f8:	48a1      	ldr	r0, [pc, #644]	@ (8002680 <Determine_component+0x9d8>)
 80023fa:	f7ff fc05 	bl	8001c08 <GPIO_Set_Low>
				GPIO_Set_HighZ(GPIOA, GPIO_PIN_4);
 80023fe:	2110      	movs	r1, #16
 8002400:	489f      	ldr	r0, [pc, #636]	@ (8002680 <Determine_component+0x9d8>)
 8002402:	f7ff fbb7 	bl	8001b74 <GPIO_Set_HighZ>
				GPIO_Set_Low(GPIOA, GPIO_PIN_7);
 8002406:	2180      	movs	r1, #128	@ 0x80
 8002408:	489d      	ldr	r0, [pc, #628]	@ (8002680 <Determine_component+0x9d8>)
 800240a:	f7ff fbfd 	bl	8001c08 <GPIO_Set_Low>
				GPIO_Set_HighZ(GPIOB, GPIO_PIN_15);
 800240e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002412:	489c      	ldr	r0, [pc, #624]	@ (8002684 <Determine_component+0x9dc>)
 8002414:	f7ff fbae 	bl	8001b74 <GPIO_Set_HighZ>
				uint32_t start_tick = HAL_GetTick();
 8002418:	f004 fa42 	bl	80068a0 <HAL_GetTick>
 800241c:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
				HAL_ADC_Start_DMA(&hadc1, (uint32_t*) bigadc_buffer,
 8002420:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002424:	4998      	ldr	r1, [pc, #608]	@ (8002688 <Determine_component+0x9e0>)
 8002426:	4899      	ldr	r0, [pc, #612]	@ (800268c <Determine_component+0x9e4>)
 8002428:	f004 fbbe 	bl	8006ba8 <HAL_ADC_Start_DMA>
				BIGBUFFER_SIZE);
				measurement_done = 0;
 800242c:	4b98      	ldr	r3, [pc, #608]	@ (8002690 <Determine_component+0x9e8>)
 800242e:	2200      	movs	r2, #0
 8002430:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA, STEP_PIN, GPIO_PIN_SET);
 8002432:	2201      	movs	r2, #1
 8002434:	2101      	movs	r1, #1
 8002436:	4892      	ldr	r0, [pc, #584]	@ (8002680 <Determine_component+0x9d8>)
 8002438:	f005 fe60 	bl	80080fc <HAL_GPIO_WritePin>
				// 3. 短暂延时确保DMA已启动
				//HAL_Delay(1);
				while (!measurement_done)
 800243c:	bf00      	nop
 800243e:	4b94      	ldr	r3, [pc, #592]	@ (8002690 <Determine_component+0x9e8>)
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	b2db      	uxtb	r3, r3
 8002444:	2b00      	cmp	r3, #0
 8002446:	d0fa      	beq.n	800243e <Determine_component+0x796>
					;
				HAL_ADC_Stop_DMA(&hadc1);
 8002448:	4890      	ldr	r0, [pc, #576]	@ (800268c <Determine_component+0x9e4>)
 800244a:	f004 fca1 	bl	8006d90 <HAL_ADC_Stop_DMA>
				uint32_t end_tick = HAL_GetTick();
 800244e:	f004 fa27 	bl	80068a0 <HAL_GetTick>
 8002452:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
				HAL_Delay(50);
 8002456:	2032      	movs	r0, #50	@ 0x32
 8002458:	f004 fa2e 	bl	80068b8 <HAL_Delay>
				VPA1 = Sample_PA1_Average();
 800245c:	f001 feb8 	bl	80041d0 <Sample_PA1_Average>
 8002460:	eef0 7a40 	vmov.f32	s15, s0
 8002464:	4b8b      	ldr	r3, [pc, #556]	@ (8002694 <Determine_component+0x9ec>)
 8002466:	edc3 7a00 	vstr	s15, [r3]
				VPA0 = Sample_PA0_Average();
 800246a:	f001 fd4f 	bl	8003f0c <Sample_PA0_Average>
 800246e:	eef0 7a40 	vmov.f32	s15, s0
 8002472:	4b89      	ldr	r3, [pc, #548]	@ (8002698 <Determine_component+0x9f0>)
 8002474:	edc3 7a00 	vstr	s15, [r3]
				VPA7 = Sample_PA7_Average();
 8002478:	f001 fcf8 	bl	8003e6c <Sample_PA7_Average>
 800247c:	eef0 7a40 	vmov.f32	s15, s0
 8002480:	4b86      	ldr	r3, [pc, #536]	@ (800269c <Determine_component+0x9f4>)
 8002482:	edc3 7a00 	vstr	s15, [r3]
				GPIO_Set_Low(GPIOA, GPIO_PIN_0);
 8002486:	2101      	movs	r1, #1
 8002488:	487d      	ldr	r0, [pc, #500]	@ (8002680 <Determine_component+0x9d8>)
 800248a:	f7ff fbbd 	bl	8001c08 <GPIO_Set_Low>
				GPIO_Set_Low(GPIOA, GPIO_PIN_4);
 800248e:	2110      	movs	r1, #16
 8002490:	487b      	ldr	r0, [pc, #492]	@ (8002680 <Determine_component+0x9d8>)
 8002492:	f7ff fbb9 	bl	8001c08 <GPIO_Set_Low>
				GPIO_Set_Low(GPIOA, GPIO_PIN_7);
 8002496:	2180      	movs	r1, #128	@ 0x80
 8002498:	4879      	ldr	r0, [pc, #484]	@ (8002680 <Determine_component+0x9d8>)
 800249a:	f7ff fbb5 	bl	8001c08 <GPIO_Set_Low>
				GPIO_Set_Low(GPIOB, GPIO_PIN_15);
 800249e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80024a2:	4878      	ldr	r0, [pc, #480]	@ (8002684 <Determine_component+0x9dc>)
 80024a4:	f7ff fbb0 	bl	8001c08 <GPIO_Set_Low>
				float v_initial;
				float index;
				int find = 0;
 80024a8:	2300      	movs	r3, #0
 80024aa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
				float initial_index;
				for (int i = 0; i < BIGBUFFER_SIZE; i++) {
 80024ae:	2300      	movs	r3, #0
 80024b0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80024b4:	e02d      	b.n	8002512 <Determine_component+0x86a>
					float voltage = (bigadc_buffer[i] * VREF) / 4095.0f;
 80024b6:	4a74      	ldr	r2, [pc, #464]	@ (8002688 <Determine_component+0x9e0>)
 80024b8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80024bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80024c0:	ee07 3a90 	vmov	s15, r3
 80024c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024c8:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 80026a0 <Determine_component+0x9f8>
 80024cc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80024d0:	eddf 6a74 	vldr	s13, [pc, #464]	@ 80026a4 <Determine_component+0x9fc>
 80024d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024d8:	edc7 7a31 	vstr	s15, [r7, #196]	@ 0xc4
					if (voltage > MIN_VOLTAGE) {
 80024dc:	edd7 7a31 	vldr	s15, [r7, #196]	@ 0xc4
 80024e0:	ed9f 7a71 	vldr	s14, [pc, #452]	@ 80026a8 <Determine_component+0xa00>
 80024e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ec:	dd0c      	ble.n	8002508 <Determine_component+0x860>
						v_initial = voltage;
 80024ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80024f2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
						initial_index = i;
 80024f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80024fa:	ee07 3a90 	vmov	s15, r3
 80024fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002502:	edc7 7a3f 	vstr	s15, [r7, #252]	@ 0xfc
						break;
 8002506:	e00a      	b.n	800251e <Determine_component+0x876>
				for (int i = 0; i < BIGBUFFER_SIZE; i++) {
 8002508:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800250c:	3301      	adds	r3, #1
 800250e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002512:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002516:	f241 3287 	movw	r2, #4999	@ 0x1387
 800251a:	4293      	cmp	r3, r2
 800251c:	ddcb      	ble.n	80024b6 <Determine_component+0x80e>
					}
				}
				//float r_com = (v_initial * R_KNOWN) / (VREF - v_initial);
				float v_target = 0.632 * VPA1;
 800251e:	4b5d      	ldr	r3, [pc, #372]	@ (8002694 <Determine_component+0x9ec>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4618      	mov	r0, r3
 8002524:	f7fe f818 	bl	8000558 <__aeabi_f2d>
 8002528:	a34d      	add	r3, pc, #308	@ (adr r3, 8002660 <Determine_component+0x9b8>)
 800252a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800252e:	f7fe f86b 	bl	8000608 <__aeabi_dmul>
 8002532:	4602      	mov	r2, r0
 8002534:	460b      	mov	r3, r1
 8002536:	4610      	mov	r0, r2
 8002538:	4619      	mov	r1, r3
 800253a:	f7fe fb3d 	bl	8000bb8 <__aeabi_d2f>
 800253e:	4603      	mov	r3, r0
 8002540:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
				for (int i = 0; i < BIGBUFFER_SIZE; i++) {
 8002544:	2300      	movs	r3, #0
 8002546:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800254a:	e029      	b.n	80025a0 <Determine_component+0x8f8>
					float voltage = (bigadc_buffer[i] * VREF) / 4095.0f;
 800254c:	4a4e      	ldr	r2, [pc, #312]	@ (8002688 <Determine_component+0x9e0>)
 800254e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002552:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002556:	ee07 3a90 	vmov	s15, r3
 800255a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800255e:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 80026a0 <Determine_component+0x9f8>
 8002562:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002566:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80026a4 <Determine_component+0x9fc>
 800256a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800256e:	edc7 7a2f 	vstr	s15, [r7, #188]	@ 0xbc
					if (voltage >= v_target) {
 8002572:	ed97 7a2f 	vldr	s14, [r7, #188]	@ 0xbc
 8002576:	edd7 7a30 	vldr	s15, [r7, #192]	@ 0xc0
 800257a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800257e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002582:	db08      	blt.n	8002596 <Determine_component+0x8ee>
						index = i;
 8002584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002588:	ee07 3a90 	vmov	s15, r3
 800258c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002590:	edc7 7a40 	vstr	s15, [r7, #256]	@ 0x100
						break;
 8002594:	e00a      	b.n	80025ac <Determine_component+0x904>
				for (int i = 0; i < BIGBUFFER_SIZE; i++) {
 8002596:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800259a:	3301      	adds	r3, #1
 800259c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80025a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025a4:	f241 3287 	movw	r2, #4999	@ 0x1387
 80025a8:	4293      	cmp	r3, r2
 80025aa:	ddcf      	ble.n	800254c <Determine_component+0x8a4>
					}
				}
				float tau = (index - initial_index) * 2 / 1000000;
 80025ac:	ed97 7a40 	vldr	s14, [r7, #256]	@ 0x100
 80025b0:	edd7 7a3f 	vldr	s15, [r7, #252]	@ 0xfc
 80025b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025b8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80025bc:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80026ac <Determine_component+0xa04>
 80025c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025c4:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
				float r_com = (v_initial * R_KNOWN) / (VREF - v_initial);
 80025c8:	edd7 7a41 	vldr	s15, [r7, #260]	@ 0x104
 80025cc:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80026b0 <Determine_component+0xa08>
 80025d0:	ee67 6a87 	vmul.f32	s13, s15, s14
 80025d4:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80026a0 <Determine_component+0x9f8>
 80025d8:	edd7 7a41 	vldr	s15, [r7, #260]	@ 0x104
 80025dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80025e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025e4:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
				float c_com = tau / (r_com + R_KNOWN);
 80025e8:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 80025ec:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80026b0 <Determine_component+0xa08>
 80025f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80025f4:	edd7 6a2e 	vldr	s13, [r7, #184]	@ 0xb8
 80025f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025fc:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
//				sprintf(message1, "Rs=%.2fΩ", r_com);
//				sprintf(message2, "Cs=%.4fuF", c_com * 1e6);
				sprintf(message1, "ESR=%.2f C=%.4fuF", r_com,c_com * 1e6);
 8002600:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8002604:	f7fd ffa8 	bl	8000558 <__aeabi_f2d>
 8002608:	4604      	mov	r4, r0
 800260a:	460d      	mov	r5, r1
 800260c:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 8002610:	f7fd ffa2 	bl	8000558 <__aeabi_f2d>
 8002614:	a314      	add	r3, pc, #80	@ (adr r3, 8002668 <Determine_component+0x9c0>)
 8002616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800261a:	f7fd fff5 	bl	8000608 <__aeabi_dmul>
 800261e:	4602      	mov	r2, r0
 8002620:	460b      	mov	r3, r1
 8002622:	e9cd 2300 	strd	r2, r3, [sp]
 8002626:	4622      	mov	r2, r4
 8002628:	462b      	mov	r3, r5
 800262a:	4911      	ldr	r1, [pc, #68]	@ (8002670 <Determine_component+0x9c8>)
 800262c:	4811      	ldr	r0, [pc, #68]	@ (8002674 <Determine_component+0x9cc>)
 800262e:	f008 ff49 	bl	800b4c4 <siprintf>
				OLED_NewFrame();
 8002632:	f003 fa27 	bl	8005a84 <OLED_NewFrame>
				OLED_DrawImage(0, 0, &CImg, OLED_COLOR_NORMAL);
 8002636:	2300      	movs	r3, #0
 8002638:	4a0f      	ldr	r2, [pc, #60]	@ (8002678 <Determine_component+0x9d0>)
 800263a:	2100      	movs	r1, #0
 800263c:	2000      	movs	r0, #0
 800263e:	f003 fbee 	bl	8005e1e <OLED_DrawImage>
				OLED_PrintASCIIString(0, 48, message1, &afont8x6,OLED_COLOR_NORMAL);
 8002642:	2300      	movs	r3, #0
 8002644:	9300      	str	r3, [sp, #0]
 8002646:	4b0d      	ldr	r3, [pc, #52]	@ (800267c <Determine_component+0x9d4>)
 8002648:	4a0a      	ldr	r2, [pc, #40]	@ (8002674 <Determine_component+0x9cc>)
 800264a:	2130      	movs	r1, #48	@ 0x30
 800264c:	2000      	movs	r0, #0
 800264e:	f003 fc35 	bl	8005ebc <OLED_PrintASCIIString>
				OLED_ShowFrame();
 8002652:	f003 fa23 	bl	8005a9c <OLED_ShowFrame>
		if (steady_test(adc_buffer1_com, VPA1Z)) {
 8002656:	f000 bce5 	b.w	8003024 <Determine_component+0x137c>
 800265a:	bf00      	nop
 800265c:	f3af 8000 	nop.w
 8002660:	10624dd3 	.word	0x10624dd3
 8002664:	3fe43958 	.word	0x3fe43958
 8002668:	00000000 	.word	0x00000000
 800266c:	412e8480 	.word	0x412e8480
 8002670:	0800e8d8 	.word	0x0800e8d8
 8002674:	20007aa4 	.word	0x20007aa4
 8002678:	0800fe50 	.word	0x0800fe50
 800267c:	0800ec30 	.word	0x0800ec30
 8002680:	40020000 	.word	0x40020000
 8002684:	40020400 	.word	0x40020400
 8002688:	20005360 	.word	0x20005360
 800268c:	200001f4 	.word	0x200001f4
 8002690:	20007a70 	.word	0x20007a70
 8002694:	20007a80 	.word	0x20007a80
 8002698:	20007a98 	.word	0x20007a98
 800269c:	20007a8c 	.word	0x20007a8c
 80026a0:	40533333 	.word	0x40533333
 80026a4:	457ff000 	.word	0x457ff000
 80026a8:	3d4ccccd 	.word	0x3d4ccccd
 80026ac:	49742400 	.word	0x49742400
 80026b0:	424c0000 	.word	0x424c0000
			}

		}
		//计算RC
	}   //初末比较CL
	else if (Analyze_trend(adc_buffer1_com, VPA1Z) == -1
 80026b4:	4bc4      	ldr	r3, [pc, #784]	@ (80029c8 <Determine_component+0xd20>)
 80026b6:	edd3 7a00 	vldr	s15, [r3]
 80026ba:	eeb0 0a67 	vmov.f32	s0, s15
 80026be:	48c3      	ldr	r0, [pc, #780]	@ (80029cc <Determine_component+0xd24>)
 80026c0:	f000 fef6 	bl	80034b0 <Analyze_trend>
 80026c4:	4603      	mov	r3, r0
 80026c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ca:	f040 810c 	bne.w	80028e6 <Determine_component+0xc3e>
			&& Analyze_trend(adc_buffer2_com, VPA1F) == 1) {
 80026ce:	4bc0      	ldr	r3, [pc, #768]	@ (80029d0 <Determine_component+0xd28>)
 80026d0:	edd3 7a00 	vldr	s15, [r3]
 80026d4:	eeb0 0a67 	vmov.f32	s0, s15
 80026d8:	48be      	ldr	r0, [pc, #760]	@ (80029d4 <Determine_component+0xd2c>)
 80026da:	f000 fee9 	bl	80034b0 <Analyze_trend>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	f040 8100 	bne.w	80028e6 <Determine_component+0xc3e>
		component.type = COMPONENT_L;
 80026e6:	4bbc      	ldr	r3, [pc, #752]	@ (80029d8 <Determine_component+0xd30>)
 80026e8:	2203      	movs	r2, #3
 80026ea:	701a      	strb	r2, [r3, #0]
		//计算RL
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80026ec:	2201      	movs	r2, #1
 80026ee:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80026f2:	48ba      	ldr	r0, [pc, #744]	@ (80029dc <Determine_component+0xd34>)
 80026f4:	f005 fd02 	bl	80080fc <HAL_GPIO_WritePin>
		StartMeasurement();
 80026f8:	f7ff f902 	bl	8001900 <StartMeasurement>
		while (!measurement_complete);
 80026fc:	bf00      	nop
 80026fe:	4bb8      	ldr	r3, [pc, #736]	@ (80029e0 <Determine_component+0xd38>)
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d0fb      	beq.n	80026fe <Determine_component+0xa56>
		float total_time = CalculateTimeConstant();
 8002706:	f7ff f931 	bl	800196c <CalculateTimeConstant>
 800270a:	ed87 0a15 	vstr	s0, [r7, #84]	@ 0x54
		//计算
		float V_steady = VPA1F;       // 实际稳态电压
 800270e:	4bb0      	ldr	r3, [pc, #704]	@ (80029d0 <Determine_component+0xd28>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	653b      	str	r3, [r7, #80]	@ 0x50
		float V_supply = VPA7F;       // 实际电源电压
 8002714:	4bb3      	ldr	r3, [pc, #716]	@ (80029e4 <Determine_component+0xd3c>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	64fb      	str	r3, [r7, #76]	@ 0x4c
		float Rs = (R_KNOWN * fabs(V_supply - V_steady) / fmaxf(V_steady, 1e-6f));
 800271a:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800271e:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8002722:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002726:	eef0 7ae7 	vabs.f32	s15, s15
 800272a:	ee17 0a90 	vmov	r0, s15
 800272e:	f7fd ff13 	bl	8000558 <__aeabi_f2d>
 8002732:	f04f 0200 	mov.w	r2, #0
 8002736:	4bac      	ldr	r3, [pc, #688]	@ (80029e8 <Determine_component+0xd40>)
 8002738:	f7fd ff66 	bl	8000608 <__aeabi_dmul>
 800273c:	4602      	mov	r2, r0
 800273e:	460b      	mov	r3, r1
 8002740:	4614      	mov	r4, r2
 8002742:	461d      	mov	r5, r3
 8002744:	eddf 0aa9 	vldr	s1, [pc, #676]	@ 80029ec <Determine_component+0xd44>
 8002748:	ed97 0a14 	vldr	s0, [r7, #80]	@ 0x50
 800274c:	f00b fa70 	bl	800dc30 <fmaxf>
 8002750:	ee10 3a10 	vmov	r3, s0
 8002754:	4618      	mov	r0, r3
 8002756:	f7fd feff 	bl	8000558 <__aeabi_f2d>
 800275a:	4602      	mov	r2, r0
 800275c:	460b      	mov	r3, r1
 800275e:	4620      	mov	r0, r4
 8002760:	4629      	mov	r1, r5
 8002762:	f7fe f87b 	bl	800085c <__aeabi_ddiv>
 8002766:	4602      	mov	r2, r0
 8002768:	460b      	mov	r3, r1
 800276a:	4610      	mov	r0, r2
 800276c:	4619      	mov	r1, r3
 800276e:	f7fe fa23 	bl	8000bb8 <__aeabi_d2f>
 8002772:	4603      	mov	r3, r0
 8002774:	64bb      	str	r3, [r7, #72]	@ 0x48
		float R=1.5303*Rs+2.24;
 8002776:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8002778:	f7fd feee 	bl	8000558 <__aeabi_f2d>
 800277c:	a38e      	add	r3, pc, #568	@ (adr r3, 80029b8 <Determine_component+0xd10>)
 800277e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002782:	f7fd ff41 	bl	8000608 <__aeabi_dmul>
 8002786:	4602      	mov	r2, r0
 8002788:	460b      	mov	r3, r1
 800278a:	4610      	mov	r0, r2
 800278c:	4619      	mov	r1, r3
 800278e:	a38c      	add	r3, pc, #560	@ (adr r3, 80029c0 <Determine_component+0xd18>)
 8002790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002794:	f7fd fd82 	bl	800029c <__adddf3>
 8002798:	4602      	mov	r2, r0
 800279a:	460b      	mov	r3, r1
 800279c:	4610      	mov	r0, r2
 800279e:	4619      	mov	r1, r3
 80027a0:	f7fe fa0a 	bl	8000bb8 <__aeabi_d2f>
 80027a4:	4603      	mov	r3, r0
 80027a6:	647b      	str	r3, [r7, #68]	@ 0x44
		component.params.inductor.esr = fabsf(Rs);
 80027a8:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80027ac:	eef0 7ae7 	vabs.f32	s15, s15
 80027b0:	4b89      	ldr	r3, [pc, #548]	@ (80029d8 <Determine_component+0xd30>)
 80027b2:	edc3 7a02 	vstr	s15, [r3, #8]
		float a = fabs(VPA1F - Threshold_voltage_S) / VPA7F;
 80027b6:	4b86      	ldr	r3, [pc, #536]	@ (80029d0 <Determine_component+0xd28>)
 80027b8:	edd3 7a00 	vldr	s15, [r3]
 80027bc:	ed9f 7a8c 	vldr	s14, [pc, #560]	@ 80029f0 <Determine_component+0xd48>
 80027c0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80027c4:	eef0 6ae7 	vabs.f32	s13, s15
 80027c8:	4b86      	ldr	r3, [pc, #536]	@ (80029e4 <Determine_component+0xd3c>)
 80027ca:	ed93 7a00 	vldr	s14, [r3]
 80027ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027d2:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
		float tau = -total_time / log(a);
 80027d6:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80027da:	eef1 7a67 	vneg.f32	s15, s15
 80027de:	ee17 3a90 	vmov	r3, s15
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7fd feb8 	bl	8000558 <__aeabi_f2d>
 80027e8:	4604      	mov	r4, r0
 80027ea:	460d      	mov	r5, r1
 80027ec:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80027ee:	f7fd feb3 	bl	8000558 <__aeabi_f2d>
 80027f2:	4602      	mov	r2, r0
 80027f4:	460b      	mov	r3, r1
 80027f6:	ec43 2b10 	vmov	d0, r2, r3
 80027fa:	f00a ffa9 	bl	800d750 <log>
 80027fe:	ec53 2b10 	vmov	r2, r3, d0
 8002802:	4620      	mov	r0, r4
 8002804:	4629      	mov	r1, r5
 8002806:	f7fe f829 	bl	800085c <__aeabi_ddiv>
 800280a:	4602      	mov	r2, r0
 800280c:	460b      	mov	r3, r1
 800280e:	4610      	mov	r0, r2
 8002810:	4619      	mov	r1, r3
 8002812:	f7fe f9d1 	bl	8000bb8 <__aeabi_d2f>
 8002816:	4603      	mov	r3, r0
 8002818:	63fb      	str	r3, [r7, #60]	@ 0x3c
		tau = total_time*2.0f;
 800281a:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800281e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002822:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		component.params.inductor.inductance= tau * (R + R_KNOWN);
 8002826:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800282a:	ed9f 7a72 	vldr	s14, [pc, #456]	@ 80029f4 <Determine_component+0xd4c>
 800282e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002832:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800283a:	4b67      	ldr	r3, [pc, #412]	@ (80029d8 <Determine_component+0xd30>)
 800283c:	edc3 7a01 	vstr	s15, [r3, #4]
		float l_com=predict_L_theory(component.params.inductor.inductance, R-1);
 8002840:	4b65      	ldr	r3, [pc, #404]	@ (80029d8 <Determine_component+0xd30>)
 8002842:	ed93 7a01 	vldr	s14, [r3, #4]
 8002846:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800284a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800284e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002852:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002856:	f5a3 7480 	sub.w	r4, r3, #256	@ 0x100
 800285a:	eef0 0a67 	vmov.f32	s1, s15
 800285e:	eeb0 0a47 	vmov.f32	s0, s14
 8002862:	f7fe ffdd 	bl	8001820 <predict_L_theory>
 8002866:	ed84 0a00 	vstr	s0, [r4]
		measurement_complete = 0;
 800286a:	4b5d      	ldr	r3, [pc, #372]	@ (80029e0 <Determine_component+0xd38>)
 800286c:	2200      	movs	r2, #0
 800286e:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8002870:	2200      	movs	r2, #0
 8002872:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002876:	4859      	ldr	r0, [pc, #356]	@ (80029dc <Determine_component+0xd34>)
 8002878:	f005 fc40 	bl	80080fc <HAL_GPIO_WritePin>
		sprintf(message1, "ESR=%.2f L=%.4fmH", R-2,l_com * 1e3);
 800287c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002880:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8002884:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002888:	ee17 0a90 	vmov	r0, s15
 800288c:	f7fd fe64 	bl	8000558 <__aeabi_f2d>
 8002890:	4604      	mov	r4, r0
 8002892:	460d      	mov	r5, r1
 8002894:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002898:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800289c:	6818      	ldr	r0, [r3, #0]
 800289e:	f7fd fe5b 	bl	8000558 <__aeabi_f2d>
 80028a2:	f04f 0200 	mov.w	r2, #0
 80028a6:	4b54      	ldr	r3, [pc, #336]	@ (80029f8 <Determine_component+0xd50>)
 80028a8:	f7fd feae 	bl	8000608 <__aeabi_dmul>
 80028ac:	4602      	mov	r2, r0
 80028ae:	460b      	mov	r3, r1
 80028b0:	e9cd 2300 	strd	r2, r3, [sp]
 80028b4:	4622      	mov	r2, r4
 80028b6:	462b      	mov	r3, r5
 80028b8:	4950      	ldr	r1, [pc, #320]	@ (80029fc <Determine_component+0xd54>)
 80028ba:	4851      	ldr	r0, [pc, #324]	@ (8002a00 <Determine_component+0xd58>)
 80028bc:	f008 fe02 	bl	800b4c4 <siprintf>
		OLED_NewFrame();
 80028c0:	f003 f8e0 	bl	8005a84 <OLED_NewFrame>
		OLED_DrawImage(0, 0, &LImg, OLED_COLOR_NORMAL);
 80028c4:	2300      	movs	r3, #0
 80028c6:	4a4f      	ldr	r2, [pc, #316]	@ (8002a04 <Determine_component+0xd5c>)
 80028c8:	2100      	movs	r1, #0
 80028ca:	2000      	movs	r0, #0
 80028cc:	f003 faa7 	bl	8005e1e <OLED_DrawImage>
		OLED_PrintASCIIString(0, 48, message1, &afont8x6,OLED_COLOR_NORMAL);
 80028d0:	2300      	movs	r3, #0
 80028d2:	9300      	str	r3, [sp, #0]
 80028d4:	4b4c      	ldr	r3, [pc, #304]	@ (8002a08 <Determine_component+0xd60>)
 80028d6:	4a4a      	ldr	r2, [pc, #296]	@ (8002a00 <Determine_component+0xd58>)
 80028d8:	2130      	movs	r1, #48	@ 0x30
 80028da:	2000      	movs	r0, #0
 80028dc:	f003 faee 	bl	8005ebc <OLED_PrintASCIIString>
		OLED_ShowFrame();
 80028e0:	f003 f8dc 	bl	8005a9c <OLED_ShowFrame>
			&& Analyze_trend(adc_buffer2_com, VPA1F) == 1) {
 80028e4:	e39e      	b.n	8003024 <Determine_component+0x137c>
	} else {
		float a = Danalyze();
 80028e6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80028ea:	f5a3 7482 	sub.w	r4, r3, #260	@ 0x104
 80028ee:	f000 ff77 	bl	80037e0 <Danalyze>
 80028f2:	ed84 0a00 	vstr	s0, [r4]
		if (a) {   //求平均有极值，差值小于2v
 80028f6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80028fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80028fe:	edd3 7a00 	vldr	s15, [r3]
 8002902:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800290a:	f000 8085 	beq.w	8002a18 <Determine_component+0xd70>
			component.type = COMPONENT_D;
 800290e:	4b32      	ldr	r3, [pc, #200]	@ (80029d8 <Determine_component+0xd30>)
 8002910:	2204      	movs	r2, #4
 8002912:	701a      	strb	r2, [r3, #0]
			component.params.diode.forward_voltage = fabs(a);
 8002914:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002918:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800291c:	edd3 7a00 	vldr	s15, [r3]
 8002920:	eef0 7ae7 	vabs.f32	s15, s15
 8002924:	4b2c      	ldr	r3, [pc, #176]	@ (80029d8 <Determine_component+0xd30>)
 8002926:	edc3 7a01 	vstr	s15, [r3, #4]
			if (a > 0) {
 800292a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800292e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002932:	edd3 7a00 	vldr	s15, [r3]
 8002936:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800293a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800293e:	dd1d      	ble.n	800297c <Determine_component+0xcd4>
				component.params.diode.polarity == L_TO_R;   //>>
				sprintf(message1, "  V=%.2fv",component.params.diode.forward_voltage);
 8002940:	4b25      	ldr	r3, [pc, #148]	@ (80029d8 <Determine_component+0xd30>)
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	4618      	mov	r0, r3
 8002946:	f7fd fe07 	bl	8000558 <__aeabi_f2d>
 800294a:	4602      	mov	r2, r0
 800294c:	460b      	mov	r3, r1
 800294e:	492f      	ldr	r1, [pc, #188]	@ (8002a0c <Determine_component+0xd64>)
 8002950:	482b      	ldr	r0, [pc, #172]	@ (8002a00 <Determine_component+0xd58>)
 8002952:	f008 fdb7 	bl	800b4c4 <siprintf>
				OLED_NewFrame();
 8002956:	f003 f895 	bl	8005a84 <OLED_NewFrame>
				OLED_DrawImage(0, 0, &LEDImg, OLED_COLOR_NORMAL);
 800295a:	2300      	movs	r3, #0
 800295c:	4a2c      	ldr	r2, [pc, #176]	@ (8002a10 <Determine_component+0xd68>)
 800295e:	2100      	movs	r1, #0
 8002960:	2000      	movs	r0, #0
 8002962:	f003 fa5c 	bl	8005e1e <OLED_DrawImage>
				OLED_PrintASCIIString(0, 48, message1, &afont8x6,OLED_COLOR_NORMAL);
 8002966:	2300      	movs	r3, #0
 8002968:	9300      	str	r3, [sp, #0]
 800296a:	4b27      	ldr	r3, [pc, #156]	@ (8002a08 <Determine_component+0xd60>)
 800296c:	4a24      	ldr	r2, [pc, #144]	@ (8002a00 <Determine_component+0xd58>)
 800296e:	2130      	movs	r1, #48	@ 0x30
 8002970:	2000      	movs	r0, #0
 8002972:	f003 faa3 	bl	8005ebc <OLED_PrintASCIIString>
				OLED_ShowFrame();
 8002976:	f003 f891 	bl	8005a9c <OLED_ShowFrame>
 800297a:	e353      	b.n	8003024 <Determine_component+0x137c>

			} else {
				component.params.diode.polarity == R_TO_L;   //<<
				sprintf(message1, "  V=%.2fv",component.params.diode.forward_voltage);
 800297c:	4b16      	ldr	r3, [pc, #88]	@ (80029d8 <Determine_component+0xd30>)
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	4618      	mov	r0, r3
 8002982:	f7fd fde9 	bl	8000558 <__aeabi_f2d>
 8002986:	4602      	mov	r2, r0
 8002988:	460b      	mov	r3, r1
 800298a:	4920      	ldr	r1, [pc, #128]	@ (8002a0c <Determine_component+0xd64>)
 800298c:	481c      	ldr	r0, [pc, #112]	@ (8002a00 <Determine_component+0xd58>)
 800298e:	f008 fd99 	bl	800b4c4 <siprintf>
				OLED_NewFrame();
 8002992:	f003 f877 	bl	8005a84 <OLED_NewFrame>
				OLED_DrawImage(0, 0, &LEDYOUImg, OLED_COLOR_NORMAL);
 8002996:	2300      	movs	r3, #0
 8002998:	4a1e      	ldr	r2, [pc, #120]	@ (8002a14 <Determine_component+0xd6c>)
 800299a:	2100      	movs	r1, #0
 800299c:	2000      	movs	r0, #0
 800299e:	f003 fa3e 	bl	8005e1e <OLED_DrawImage>
				OLED_PrintASCIIString(0, 48, message1, &afont8x6,OLED_COLOR_NORMAL);
 80029a2:	2300      	movs	r3, #0
 80029a4:	9300      	str	r3, [sp, #0]
 80029a6:	4b18      	ldr	r3, [pc, #96]	@ (8002a08 <Determine_component+0xd60>)
 80029a8:	4a15      	ldr	r2, [pc, #84]	@ (8002a00 <Determine_component+0xd58>)
 80029aa:	2130      	movs	r1, #48	@ 0x30
 80029ac:	2000      	movs	r0, #0
 80029ae:	f003 fa85 	bl	8005ebc <OLED_PrintASCIIString>
				OLED_ShowFrame();
 80029b2:	f003 f873 	bl	8005a9c <OLED_ShowFrame>
 80029b6:	e335      	b.n	8003024 <Determine_component+0x137c>
 80029b8:	da5119ce 	.word	0xda5119ce
 80029bc:	3ff87c1b 	.word	0x3ff87c1b
 80029c0:	1eb851ec 	.word	0x1eb851ec
 80029c4:	4001eb85 	.word	0x4001eb85
 80029c8:	20007a84 	.word	0x20007a84
 80029cc:	20001360 	.word	0x20001360
 80029d0:	20007a88 	.word	0x20007a88
 80029d4:	20002360 	.word	0x20002360
 80029d8:	2000032c 	.word	0x2000032c
 80029dc:	40020000 	.word	0x40020000
 80029e0:	20007a7c 	.word	0x20007a7c
 80029e4:	20007a94 	.word	0x20007a94
 80029e8:	40498000 	.word	0x40498000
 80029ec:	358637bd 	.word	0x358637bd
 80029f0:	3f2b573f 	.word	0x3f2b573f
 80029f4:	424c0000 	.word	0x424c0000
 80029f8:	408f4000 	.word	0x408f4000
 80029fc:	0800e8ec 	.word	0x0800e8ec
 8002a00:	20007aa4 	.word	0x20007aa4
 8002a04:	0800ffd8 	.word	0x0800ffd8
 8002a08:	0800ec30 	.word	0x0800ec30
 8002a0c:	0800e900 	.word	0x0800e900
 8002a10:	08010260 	.word	0x08010260
 8002a14:	08010670 	.word	0x08010670
			}
			//计算D
		} else {
			//510k
			GPIO_Set_HighZ(GPIOA, GPIO_PIN_0);
 8002a18:	2101      	movs	r1, #1
 8002a1a:	48d7      	ldr	r0, [pc, #860]	@ (8002d78 <Determine_component+0x10d0>)
 8002a1c:	f7ff f8aa 	bl	8001b74 <GPIO_Set_HighZ>
			GPIO_Set_HighZ(GPIOA, GPIO_PIN_4);
 8002a20:	2110      	movs	r1, #16
 8002a22:	48d5      	ldr	r0, [pc, #852]	@ (8002d78 <Determine_component+0x10d0>)
 8002a24:	f7ff f8a6 	bl	8001b74 <GPIO_Set_HighZ>
			GPIO_Set_Low(GPIOA, GPIO_PIN_7);
 8002a28:	2180      	movs	r1, #128	@ 0x80
 8002a2a:	48d3      	ldr	r0, [pc, #844]	@ (8002d78 <Determine_component+0x10d0>)
 8002a2c:	f7ff f8ec 	bl	8001c08 <GPIO_Set_Low>
			GPIO_Set_Low(GPIOB, GPIO_PIN_15);
 8002a30:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002a34:	48d1      	ldr	r0, [pc, #836]	@ (8002d7c <Determine_component+0x10d4>)
 8002a36:	f7ff f8e7 	bl	8001c08 <GPIO_Set_Low>
			memset(adc_buffer3_com, 0, sizeof(adc_buffer3_com));
 8002a3a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002a3e:	2100      	movs	r1, #0
 8002a40:	48cf      	ldr	r0, [pc, #828]	@ (8002d80 <Determine_component+0x10d8>)
 8002a42:	f008 fdb4 	bl	800b5ae <memset>
			DMA_Measure_com(4, adc_buffer3_com);
 8002a46:	49ce      	ldr	r1, [pc, #824]	@ (8002d80 <Determine_component+0x10d8>)
 8002a48:	2004      	movs	r0, #4
 8002a4a:	f001 f88d 	bl	8003b68 <DMA_Measure_com>
			VPA1Z = VPA1;
 8002a4e:	4bcd      	ldr	r3, [pc, #820]	@ (8002d84 <Determine_component+0x10dc>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4acd      	ldr	r2, [pc, #820]	@ (8002d88 <Determine_component+0x10e0>)
 8002a54:	6013      	str	r3, [r2, #0]
			//VPA0Z=VPA0;
			//VPA7Z=VPA7;
			GPIO_Set_HighZ(GPIOA, GPIO_PIN_0);
 8002a56:	2101      	movs	r1, #1
 8002a58:	48c7      	ldr	r0, [pc, #796]	@ (8002d78 <Determine_component+0x10d0>)
 8002a5a:	f7ff f88b 	bl	8001b74 <GPIO_Set_HighZ>
			GPIO_Set_HighZ(GPIOA, GPIO_PIN_4);
 8002a5e:	2110      	movs	r1, #16
 8002a60:	48c5      	ldr	r0, [pc, #788]	@ (8002d78 <Determine_component+0x10d0>)
 8002a62:	f7ff f887 	bl	8001b74 <GPIO_Set_HighZ>
			memset(adc_buffer4_com, 0, sizeof(adc_buffer4_com));
 8002a66:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002a6a:	2100      	movs	r1, #0
 8002a6c:	48c7      	ldr	r0, [pc, #796]	@ (8002d8c <Determine_component+0x10e4>)
 8002a6e:	f008 fd9e 	bl	800b5ae <memset>
			DMA_Measure_com(2, adc_buffer4_com);
 8002a72:	49c6      	ldr	r1, [pc, #792]	@ (8002d8c <Determine_component+0x10e4>)
 8002a74:	2002      	movs	r0, #2
 8002a76:	f001 f877 	bl	8003b68 <DMA_Measure_com>
			VPA1F = VPA1;
 8002a7a:	4bc2      	ldr	r3, [pc, #776]	@ (8002d84 <Determine_component+0x10dc>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4ac4      	ldr	r2, [pc, #784]	@ (8002d90 <Determine_component+0x10e8>)
 8002a80:	6013      	str	r3, [r2, #0]
			//float index;
			//int find = 0;

			//float c_com = tau / r_com;
			int initial_index;
			int index = 0;
 8002a82:	2300      	movs	r3, #0
 8002a84:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
			if (Analyze_trend(adc_buffer3_com, VPA1Z) == 1
 8002a88:	4bbf      	ldr	r3, [pc, #764]	@ (8002d88 <Determine_component+0x10e0>)
 8002a8a:	edd3 7a00 	vldr	s15, [r3]
 8002a8e:	eeb0 0a67 	vmov.f32	s0, s15
 8002a92:	48bb      	ldr	r0, [pc, #748]	@ (8002d80 <Determine_component+0x10d8>)
 8002a94:	f000 fd0c 	bl	80034b0 <Analyze_trend>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	f040 8112 	bne.w	8002cc4 <Determine_component+0x101c>
					&& Analyze_trend(adc_buffer4_com, VPA1F) == -1) {
 8002aa0:	4bbb      	ldr	r3, [pc, #748]	@ (8002d90 <Determine_component+0x10e8>)
 8002aa2:	edd3 7a00 	vldr	s15, [r3]
 8002aa6:	eeb0 0a67 	vmov.f32	s0, s15
 8002aaa:	48b8      	ldr	r0, [pc, #736]	@ (8002d8c <Determine_component+0x10e4>)
 8002aac:	f000 fd00 	bl	80034b0 <Analyze_trend>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ab6:	f040 8105 	bne.w	8002cc4 <Determine_component+0x101c>
				component.type = COMPONENT_C;   //计算小c
 8002aba:	4bb6      	ldr	r3, [pc, #728]	@ (8002d94 <Determine_component+0x10ec>)
 8002abc:	2202      	movs	r2, #2
 8002abe:	701a      	strb	r2, [r3, #0]
				//float tau = Find_tau_com(adc_buffer1_com);
				float v_initial = 0.0f;
 8002ac0:	f04f 0300 	mov.w	r3, #0
 8002ac4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
				//int initial_index;
				for (int i = 0; i < BUFFER_SIZE; i++) {
 8002ac8:	2300      	movs	r3, #0
 8002aca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002ace:	e034      	b.n	8002b3a <Determine_component+0xe92>
					float voltage = (adc_buffer3_com[i] * VREF) / 4095.0f;
 8002ad0:	4aab      	ldr	r2, [pc, #684]	@ (8002d80 <Determine_component+0x10d8>)
 8002ad2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ad6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ada:	ee07 3a90 	vmov	s15, r3
 8002ade:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ae2:	ed9f 7aad 	vldr	s14, [pc, #692]	@ 8002d98 <Determine_component+0x10f0>
 8002ae6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002aea:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002aee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002af2:	eddf 6aaa 	vldr	s13, [pc, #680]	@ 8002d9c <Determine_component+0x10f4>
 8002af6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002afa:	edc3 7a00 	vstr	s15, [r3]
					if (voltage > MIN_VOLTAGE) {
 8002afe:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002b02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002b06:	edd3 7a00 	vldr	s15, [r3]
 8002b0a:	ed9f 7aa5 	vldr	s14, [pc, #660]	@ 8002da0 <Determine_component+0x10f8>
 8002b0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b16:	dd0b      	ble.n	8002b30 <Determine_component+0xe88>
						v_initial = voltage;
 8002b18:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002b1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
						initial_index = i;
 8002b26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b2a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
						break;
 8002b2e:	e009      	b.n	8002b44 <Determine_component+0xe9c>
				for (int i = 0; i < BUFFER_SIZE; i++) {
 8002b30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b34:	3301      	adds	r3, #1
 8002b36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002b3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b3e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b42:	dbc5      	blt.n	8002ad0 <Determine_component+0xe28>
					}
				}
				float r_com = (v_initial * R_KNOWN) / (VREF - v_initial);
 8002b44:	edd7 7a3a 	vldr	s15, [r7, #232]	@ 0xe8
 8002b48:	ed9f 7a96 	vldr	s14, [pc, #600]	@ 8002da4 <Determine_component+0x10fc>
 8002b4c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002b50:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 8002d98 <Determine_component+0x10f0>
 8002b54:	edd7 7a3a 	vldr	s15, [r7, #232]	@ 0xe8
 8002b58:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b5c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002b60:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002b64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b68:	edc3 7a00 	vstr	s15, [r3]
				//float c_com = tau / r_com;
				//sprintf(message1, "Rs=%.2fΩ", r_com);
				float v_target = 0.632 * VPA1Z;
 8002b6c:	4b86      	ldr	r3, [pc, #536]	@ (8002d88 <Determine_component+0x10e0>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7fd fcf1 	bl	8000558 <__aeabi_f2d>
 8002b76:	a37c      	add	r3, pc, #496	@ (adr r3, 8002d68 <Determine_component+0x10c0>)
 8002b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b7c:	f7fd fd44 	bl	8000608 <__aeabi_dmul>
 8002b80:	4602      	mov	r2, r0
 8002b82:	460b      	mov	r3, r1
 8002b84:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8002b88:	f5a1 7488 	sub.w	r4, r1, #272	@ 0x110
 8002b8c:	4610      	mov	r0, r2
 8002b8e:	4619      	mov	r1, r3
 8002b90:	f7fe f812 	bl	8000bb8 <__aeabi_d2f>
 8002b94:	4603      	mov	r3, r0
 8002b96:	6023      	str	r3, [r4, #0]
				for (int i = 0; i < BUFFER_SIZE; i++) {
 8002b98:	2300      	movs	r3, #0
 8002b9a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002b9e:	e031      	b.n	8002c04 <Determine_component+0xf5c>
					float voltage = (adc_buffer3_com[i] * VREF) / 4095.0f;
 8002ba0:	4a77      	ldr	r2, [pc, #476]	@ (8002d80 <Determine_component+0x10d8>)
 8002ba2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ba6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002baa:	ee07 3a90 	vmov	s15, r3
 8002bae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bb2:	ed9f 7a79 	vldr	s14, [pc, #484]	@ 8002d98 <Determine_component+0x10f0>
 8002bb6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002bba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002bbe:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002bc2:	eddf 6a76 	vldr	s13, [pc, #472]	@ 8002d9c <Determine_component+0x10f4>
 8002bc6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002bca:	edc3 7a00 	vstr	s15, [r3]
					if (voltage >= v_target) {
 8002bce:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002bd2:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 8002bd6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002bda:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002bde:	ed92 7a00 	vldr	s14, [r2]
 8002be2:	edd3 7a00 	vldr	s15, [r3]
 8002be6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bee:	db04      	blt.n	8002bfa <Determine_component+0xf52>
						index = i;
 8002bf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002bf4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
						break;
 8002bf8:	e009      	b.n	8002c0e <Determine_component+0xf66>
				for (int i = 0; i < BUFFER_SIZE; i++) {
 8002bfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002bfe:	3301      	adds	r3, #1
 8002c00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002c04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002c0c:	dbc8      	blt.n	8002ba0 <Determine_component+0xef8>
					}
				}
				float tau = (index - initial_index) * 2 / 1000000;
 8002c0e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8002c12:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	4a63      	ldr	r2, [pc, #396]	@ (8002da8 <Determine_component+0x1100>)
 8002c1a:	fb82 1203 	smull	r1, r2, r2, r3
 8002c1e:	1452      	asrs	r2, r2, #17
 8002c20:	17db      	asrs	r3, r3, #31
 8002c22:	1ad2      	subs	r2, r2, r3
 8002c24:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002c28:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002c2c:	ee07 2a90 	vmov	s15, r2
 8002c30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c34:	edc3 7a00 	vstr	s15, [r3]
				//float tau = Find_tau_com(adc_buffer3_com);
				float c_com = tau / r_com;
 8002c38:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002c3c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002c40:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8002c44:	f5a2 718c 	sub.w	r1, r2, #280	@ 0x118
 8002c48:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8002c4c:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8002c50:	edd1 6a00 	vldr	s13, [r1]
 8002c54:	ed92 7a00 	vldr	s14, [r2]
 8002c58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c5c:	edc3 7a00 	vstr	s15, [r3]
				//sprintf(message2, "Cs=%.2fΩ", c_com * 1e6);
				sprintf(message1, "ESR=%.2f C=%.4fuF", r_com,c_com * 1e6);
 8002c60:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002c64:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002c68:	6818      	ldr	r0, [r3, #0]
 8002c6a:	f7fd fc75 	bl	8000558 <__aeabi_f2d>
 8002c6e:	4604      	mov	r4, r0
 8002c70:	460d      	mov	r5, r1
 8002c72:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002c76:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002c7a:	6818      	ldr	r0, [r3, #0]
 8002c7c:	f7fd fc6c 	bl	8000558 <__aeabi_f2d>
 8002c80:	a33b      	add	r3, pc, #236	@ (adr r3, 8002d70 <Determine_component+0x10c8>)
 8002c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c86:	f7fd fcbf 	bl	8000608 <__aeabi_dmul>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	e9cd 2300 	strd	r2, r3, [sp]
 8002c92:	4622      	mov	r2, r4
 8002c94:	462b      	mov	r3, r5
 8002c96:	4945      	ldr	r1, [pc, #276]	@ (8002dac <Determine_component+0x1104>)
 8002c98:	4845      	ldr	r0, [pc, #276]	@ (8002db0 <Determine_component+0x1108>)
 8002c9a:	f008 fc13 	bl	800b4c4 <siprintf>
				OLED_NewFrame();
 8002c9e:	f002 fef1 	bl	8005a84 <OLED_NewFrame>
				OLED_DrawImage(0, 0, &CImg, OLED_COLOR_NORMAL);
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	4a43      	ldr	r2, [pc, #268]	@ (8002db4 <Determine_component+0x110c>)
 8002ca6:	2100      	movs	r1, #0
 8002ca8:	2000      	movs	r0, #0
 8002caa:	f003 f8b8 	bl	8005e1e <OLED_DrawImage>
				OLED_PrintASCIIString(0, 48, message1, &afont8x6,OLED_COLOR_NORMAL);
 8002cae:	2300      	movs	r3, #0
 8002cb0:	9300      	str	r3, [sp, #0]
 8002cb2:	4b41      	ldr	r3, [pc, #260]	@ (8002db8 <Determine_component+0x1110>)
 8002cb4:	4a3e      	ldr	r2, [pc, #248]	@ (8002db0 <Determine_component+0x1108>)
 8002cb6:	2130      	movs	r1, #48	@ 0x30
 8002cb8:	2000      	movs	r0, #0
 8002cba:	f003 f8ff 	bl	8005ebc <OLED_PrintASCIIString>
				OLED_ShowFrame();
 8002cbe:	f002 feed 	bl	8005a9c <OLED_ShowFrame>
					&& Analyze_trend(adc_buffer4_com, VPA1F) == -1) {
 8002cc2:	e1af      	b.n	8003024 <Determine_component+0x137c>
				//

			} else if (analyze_Vpicture(adc_buffer3_com, adc_buffer4_com)
 8002cc4:	4931      	ldr	r1, [pc, #196]	@ (8002d8c <Determine_component+0x10e4>)
 8002cc6:	482e      	ldr	r0, [pc, #184]	@ (8002d80 <Determine_component+0x10d8>)
 8002cc8:	f000 fb82 	bl	80033d0 <analyze_Vpicture>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	f040 80a0 	bne.w	8002e14 <Determine_component+0x116c>
					== 1) {
				//
				component.type = COMPONENT_R;   //
 8002cd4:	4b2f      	ldr	r3, [pc, #188]	@ (8002d94 <Determine_component+0x10ec>)
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	701a      	strb	r2, [r3, #0]
				float V = calculate_average(adc_buffer3_com);
 8002cda:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002cde:	f5a3 7498 	sub.w	r4, r3, #304	@ 0x130
 8002ce2:	4827      	ldr	r0, [pc, #156]	@ (8002d80 <Determine_component+0x10d8>)
 8002ce4:	f000 fef4 	bl	8003ad0 <calculate_average>
 8002ce8:	ed84 0a00 	vstr	s0, [r4]
				float R;
				R = 510000 / (VPA0Z - V) * V;
 8002cec:	4b33      	ldr	r3, [pc, #204]	@ (8002dbc <Determine_component+0x1114>)
 8002cee:	ed93 7a00 	vldr	s14, [r3]
 8002cf2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002cf6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002cfa:	edd3 7a00 	vldr	s15, [r3]
 8002cfe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002d02:	eddf 6a2f 	vldr	s13, [pc, #188]	@ 8002dc0 <Determine_component+0x1118>
 8002d06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d0a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002d0e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002d12:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8002d16:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8002d1a:	ed92 7a00 	vldr	s14, [r2]
 8002d1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d22:	edc3 7a00 	vstr	s15, [r3]
				if (fabs(R) > 12000000) {
 8002d26:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002d2a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002d2e:	edd3 7a00 	vldr	s15, [r3]
 8002d32:	eef0 7ae7 	vabs.f32	s15, s15
 8002d36:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8002dc4 <Determine_component+0x111c>
 8002d3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d42:	dd47      	ble.n	8002dd4 <Determine_component+0x112c>
					sprintf(msg, "NULL");
 8002d44:	4920      	ldr	r1, [pc, #128]	@ (8002dc8 <Determine_component+0x1120>)
 8002d46:	4821      	ldr	r0, [pc, #132]	@ (8002dcc <Determine_component+0x1124>)
 8002d48:	f008 fbbc 	bl	800b4c4 <siprintf>
					OLED_NewFrame();
 8002d4c:	f002 fe9a 	bl	8005a84 <OLED_NewFrame>
					OLED_PrintString(0, 0, msg, &font16x16, OLED_COLOR_NORMAL);
 8002d50:	2300      	movs	r3, #0
 8002d52:	9300      	str	r3, [sp, #0]
 8002d54:	4b1e      	ldr	r3, [pc, #120]	@ (8002dd0 <Determine_component+0x1128>)
 8002d56:	4a1d      	ldr	r2, [pc, #116]	@ (8002dcc <Determine_component+0x1124>)
 8002d58:	2100      	movs	r1, #0
 8002d5a:	2000      	movs	r0, #0
 8002d5c:	f003 f8ff 	bl	8005f5e <OLED_PrintString>
					OLED_ShowFrame();
 8002d60:	f002 fe9c 	bl	8005a9c <OLED_ShowFrame>
					return;
 8002d64:	e15e      	b.n	8003024 <Determine_component+0x137c>
 8002d66:	bf00      	nop
 8002d68:	10624dd3 	.word	0x10624dd3
 8002d6c:	3fe43958 	.word	0x3fe43958
 8002d70:	00000000 	.word	0x00000000
 8002d74:	412e8480 	.word	0x412e8480
 8002d78:	40020000 	.word	0x40020000
 8002d7c:	40020400 	.word	0x40020400
 8002d80:	20003360 	.word	0x20003360
 8002d84:	20007a80 	.word	0x20007a80
 8002d88:	20007a84 	.word	0x20007a84
 8002d8c:	20004360 	.word	0x20004360
 8002d90:	20007a88 	.word	0x20007a88
 8002d94:	2000032c 	.word	0x2000032c
 8002d98:	40533333 	.word	0x40533333
 8002d9c:	457ff000 	.word	0x457ff000
 8002da0:	3d4ccccd 	.word	0x3d4ccccd
 8002da4:	424c0000 	.word	0x424c0000
 8002da8:	431bde83 	.word	0x431bde83
 8002dac:	0800e8d8 	.word	0x0800e8d8
 8002db0:	20007aa4 	.word	0x20007aa4
 8002db4:	0800fe50 	.word	0x0800fe50
 8002db8:	0800ec30 	.word	0x0800ec30
 8002dbc:	20007a9c 	.word	0x20007a9c
 8002dc0:	48f90600 	.word	0x48f90600
 8002dc4:	4b371b00 	.word	0x4b371b00
 8002dc8:	0800e90c 	.word	0x0800e90c
 8002dcc:	20007ba4 	.word	0x20007ba4
 8002dd0:	08010798 	.word	0x08010798
				}else{
					sprintf(message1, " R=%.2fΩ", R);
 8002dd4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002dd8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002ddc:	6818      	ldr	r0, [r3, #0]
 8002dde:	f7fd fbbb 	bl	8000558 <__aeabi_f2d>
 8002de2:	4602      	mov	r2, r0
 8002de4:	460b      	mov	r3, r1
 8002de6:	4991      	ldr	r1, [pc, #580]	@ (800302c <Determine_component+0x1384>)
 8002de8:	4891      	ldr	r0, [pc, #580]	@ (8003030 <Determine_component+0x1388>)
 8002dea:	f008 fb6b 	bl	800b4c4 <siprintf>
					OLED_NewFrame();
 8002dee:	f002 fe49 	bl	8005a84 <OLED_NewFrame>
					OLED_DrawImage(0, 0, &RImg, OLED_COLOR_NORMAL);
 8002df2:	2300      	movs	r3, #0
 8002df4:	4a8f      	ldr	r2, [pc, #572]	@ (8003034 <Determine_component+0x138c>)
 8002df6:	2100      	movs	r1, #0
 8002df8:	2000      	movs	r0, #0
 8002dfa:	f003 f810 	bl	8005e1e <OLED_DrawImage>
					OLED_PrintString(0, 48, message1, &font12x12,
 8002dfe:	2300      	movs	r3, #0
 8002e00:	9300      	str	r3, [sp, #0]
 8002e02:	4b8d      	ldr	r3, [pc, #564]	@ (8003038 <Determine_component+0x1390>)
 8002e04:	4a8a      	ldr	r2, [pc, #552]	@ (8003030 <Determine_component+0x1388>)
 8002e06:	2130      	movs	r1, #48	@ 0x30
 8002e08:	2000      	movs	r0, #0
 8002e0a:	f003 f8a8 	bl	8005f5e <OLED_PrintString>
							OLED_COLOR_NORMAL);
					OLED_ShowFrame();
 8002e0e:	f002 fe45 	bl	8005a9c <OLED_ShowFrame>
 8002e12:	e107      	b.n	8003024 <Determine_component+0x137c>
				}

				//return 1;
				//计算大电阻
			} else if (analyze_Vpicture(adc_buffer1_com, adc_buffer2_com)
 8002e14:	4989      	ldr	r1, [pc, #548]	@ (800303c <Determine_component+0x1394>)
 8002e16:	488a      	ldr	r0, [pc, #552]	@ (8003040 <Determine_component+0x1398>)
 8002e18:	f000 fada 	bl	80033d0 <analyze_Vpicture>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d17b      	bne.n	8002f1a <Determine_component+0x1272>
					== 2) {
				component.type = COMPONENT_R;
 8002e22:	4b88      	ldr	r3, [pc, #544]	@ (8003044 <Determine_component+0x139c>)
 8002e24:	2201      	movs	r2, #1
 8002e26:	701a      	strb	r2, [r3, #0]
				//
				//换5.1k电阻计算
				GPIO_Set_HighZ(GPIOA, GPIO_PIN_0);
 8002e28:	2101      	movs	r1, #1
 8002e2a:	4887      	ldr	r0, [pc, #540]	@ (8003048 <Determine_component+0x13a0>)
 8002e2c:	f7fe fea2 	bl	8001b74 <GPIO_Set_HighZ>
				//GPIO_Set_High(GPIOA, GPIO_PIN_4);
				GPIO_Set_HighZ(GPIOB, GPIO_PIN_15);
 8002e30:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002e34:	4885      	ldr	r0, [pc, #532]	@ (800304c <Determine_component+0x13a4>)
 8002e36:	f7fe fe9d 	bl	8001b74 <GPIO_Set_HighZ>
				memset(adc_buffer3_com, 0, sizeof(adc_buffer3_com));
 8002e3a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002e3e:	2100      	movs	r1, #0
 8002e40:	4883      	ldr	r0, [pc, #524]	@ (8003050 <Determine_component+0x13a8>)
 8002e42:	f008 fbb4 	bl	800b5ae <memset>
				DMA_Measure_com(3, adc_buffer3_com);
 8002e46:	4982      	ldr	r1, [pc, #520]	@ (8003050 <Determine_component+0x13a8>)
 8002e48:	2003      	movs	r0, #3
 8002e4a:	f000 fe8d 	bl	8003b68 <DMA_Measure_com>
				float V = calculate_average(adc_buffer3_com);
 8002e4e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002e52:	f5a3 7494 	sub.w	r4, r3, #296	@ 0x128
 8002e56:	487e      	ldr	r0, [pc, #504]	@ (8003050 <Determine_component+0x13a8>)
 8002e58:	f000 fe3a 	bl	8003ad0 <calculate_average>
 8002e5c:	ed84 0a00 	vstr	s0, [r4]
				float R;
				R = 5100 / (VPA0Z - V) * V;
 8002e60:	4b7c      	ldr	r3, [pc, #496]	@ (8003054 <Determine_component+0x13ac>)
 8002e62:	ed93 7a00 	vldr	s14, [r3]
 8002e66:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002e6a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002e6e:	edd3 7a00 	vldr	s15, [r3]
 8002e72:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002e76:	eddf 6a78 	vldr	s13, [pc, #480]	@ 8003058 <Determine_component+0x13b0>
 8002e7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e7e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002e82:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002e86:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8002e8a:	f5a2 7294 	sub.w	r2, r2, #296	@ 0x128
 8002e8e:	ed92 7a00 	vldr	s14, [r2]
 8002e92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e96:	edc3 7a00 	vstr	s15, [r3]
				if (fabs(R) > 12000000) {
 8002e9a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002e9e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002ea2:	edd3 7a00 	vldr	s15, [r3]
 8002ea6:	eef0 7ae7 	vabs.f32	s15, s15
 8002eaa:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 800305c <Determine_component+0x13b4>
 8002eae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eb6:	dd10      	ble.n	8002eda <Determine_component+0x1232>
					sprintf(msg, "NULL");
 8002eb8:	4969      	ldr	r1, [pc, #420]	@ (8003060 <Determine_component+0x13b8>)
 8002eba:	486a      	ldr	r0, [pc, #424]	@ (8003064 <Determine_component+0x13bc>)
 8002ebc:	f008 fb02 	bl	800b4c4 <siprintf>
					OLED_NewFrame();
 8002ec0:	f002 fde0 	bl	8005a84 <OLED_NewFrame>
					OLED_PrintString(0, 0, msg, &font16x16, OLED_COLOR_NORMAL);
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	9300      	str	r3, [sp, #0]
 8002ec8:	4b67      	ldr	r3, [pc, #412]	@ (8003068 <Determine_component+0x13c0>)
 8002eca:	4a66      	ldr	r2, [pc, #408]	@ (8003064 <Determine_component+0x13bc>)
 8002ecc:	2100      	movs	r1, #0
 8002ece:	2000      	movs	r0, #0
 8002ed0:	f003 f845 	bl	8005f5e <OLED_PrintString>
					OLED_ShowFrame();
 8002ed4:	f002 fde2 	bl	8005a9c <OLED_ShowFrame>
					return;
 8002ed8:	e0a4      	b.n	8003024 <Determine_component+0x137c>
				} else {
					sprintf(message1, " R=%.2fΩ", R);
 8002eda:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002ede:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002ee2:	6818      	ldr	r0, [r3, #0]
 8002ee4:	f7fd fb38 	bl	8000558 <__aeabi_f2d>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	460b      	mov	r3, r1
 8002eec:	494f      	ldr	r1, [pc, #316]	@ (800302c <Determine_component+0x1384>)
 8002eee:	4850      	ldr	r0, [pc, #320]	@ (8003030 <Determine_component+0x1388>)
 8002ef0:	f008 fae8 	bl	800b4c4 <siprintf>
					OLED_NewFrame();
 8002ef4:	f002 fdc6 	bl	8005a84 <OLED_NewFrame>
					OLED_DrawImage(0, 0, &RImg, OLED_COLOR_NORMAL);
 8002ef8:	2300      	movs	r3, #0
 8002efa:	4a4e      	ldr	r2, [pc, #312]	@ (8003034 <Determine_component+0x138c>)
 8002efc:	2100      	movs	r1, #0
 8002efe:	2000      	movs	r0, #0
 8002f00:	f002 ff8d 	bl	8005e1e <OLED_DrawImage>
					OLED_PrintString(0, 48, message1, &font12x12,
 8002f04:	2300      	movs	r3, #0
 8002f06:	9300      	str	r3, [sp, #0]
 8002f08:	4b4b      	ldr	r3, [pc, #300]	@ (8003038 <Determine_component+0x1390>)
 8002f0a:	4a49      	ldr	r2, [pc, #292]	@ (8003030 <Determine_component+0x1388>)
 8002f0c:	2130      	movs	r1, #48	@ 0x30
 8002f0e:	2000      	movs	r0, #0
 8002f10:	f003 f825 	bl	8005f5e <OLED_PrintString>
							OLED_COLOR_NORMAL);
					OLED_ShowFrame();
 8002f14:	f002 fdc2 	bl	8005a9c <OLED_ShowFrame>
 8002f18:	e084      	b.n	8003024 <Determine_component+0x137c>
				}

			} else {
				//小电阻
				float V = calculate_average(adc_buffer1_com);
 8002f1a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002f1e:	f5a3 7490 	sub.w	r4, r3, #288	@ 0x120
 8002f22:	4847      	ldr	r0, [pc, #284]	@ (8003040 <Determine_component+0x1398>)
 8002f24:	f000 fdd4 	bl	8003ad0 <calculate_average>
 8002f28:	ed84 0a00 	vstr	s0, [r4]
				float R;
				R = 51 / (VPA0Z - V) * V;
 8002f2c:	4b49      	ldr	r3, [pc, #292]	@ (8003054 <Determine_component+0x13ac>)
 8002f2e:	ed93 7a00 	vldr	s14, [r3]
 8002f32:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002f36:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002f3a:	edd3 7a00 	vldr	s15, [r3]
 8002f3e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f42:	eddf 6a4a 	vldr	s13, [pc, #296]	@ 800306c <Determine_component+0x13c4>
 8002f46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f4a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002f4e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002f52:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8002f56:	f5a2 7290 	sub.w	r2, r2, #288	@ 0x120
 8002f5a:	ed92 7a00 	vldr	s14, [r2]
 8002f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f62:	edc3 7a00 	vstr	s15, [r3]
				if (R > 120000000) {
 8002f66:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002f6a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002f6e:	edd3 7a00 	vldr	s15, [r3]
 8002f72:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8003070 <Determine_component+0x13c8>
 8002f76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f7e:	dd10      	ble.n	8002fa2 <Determine_component+0x12fa>
					sprintf(msg, "NULL");
 8002f80:	4937      	ldr	r1, [pc, #220]	@ (8003060 <Determine_component+0x13b8>)
 8002f82:	4838      	ldr	r0, [pc, #224]	@ (8003064 <Determine_component+0x13bc>)
 8002f84:	f008 fa9e 	bl	800b4c4 <siprintf>
					OLED_NewFrame();
 8002f88:	f002 fd7c 	bl	8005a84 <OLED_NewFrame>
					OLED_PrintString(0, 0, msg, &font16x16, OLED_COLOR_NORMAL);
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	9300      	str	r3, [sp, #0]
 8002f90:	4b35      	ldr	r3, [pc, #212]	@ (8003068 <Determine_component+0x13c0>)
 8002f92:	4a34      	ldr	r2, [pc, #208]	@ (8003064 <Determine_component+0x13bc>)
 8002f94:	2100      	movs	r1, #0
 8002f96:	2000      	movs	r0, #0
 8002f98:	f002 ffe1 	bl	8005f5e <OLED_PrintString>
					OLED_ShowFrame();
 8002f9c:	f002 fd7e 	bl	8005a9c <OLED_ShowFrame>
 8002fa0:	e040      	b.n	8003024 <Determine_component+0x137c>
				} else {
					if (R > 20) {
 8002fa2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002fa6:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002faa:	edd3 7a00 	vldr	s15, [r3]
 8002fae:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8002fb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fba:	dd14      	ble.n	8002fe6 <Determine_component+0x133e>
						sprintf(message1, " R=%.2fΩ", R - 20);
 8002fbc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002fc0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002fc4:	edd3 7a00 	vldr	s15, [r3]
 8002fc8:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8002fcc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002fd0:	ee17 0a90 	vmov	r0, s15
 8002fd4:	f7fd fac0 	bl	8000558 <__aeabi_f2d>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	460b      	mov	r3, r1
 8002fdc:	4913      	ldr	r1, [pc, #76]	@ (800302c <Determine_component+0x1384>)
 8002fde:	4814      	ldr	r0, [pc, #80]	@ (8003030 <Determine_component+0x1388>)
 8002fe0:	f008 fa70 	bl	800b4c4 <siprintf>
 8002fe4:	e00c      	b.n	8003000 <Determine_component+0x1358>
					} else {
						sprintf(message1, " R=%.2fΩ", R);
 8002fe6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002fea:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002fee:	6818      	ldr	r0, [r3, #0]
 8002ff0:	f7fd fab2 	bl	8000558 <__aeabi_f2d>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	460b      	mov	r3, r1
 8002ff8:	490c      	ldr	r1, [pc, #48]	@ (800302c <Determine_component+0x1384>)
 8002ffa:	480d      	ldr	r0, [pc, #52]	@ (8003030 <Determine_component+0x1388>)
 8002ffc:	f008 fa62 	bl	800b4c4 <siprintf>
					}

					OLED_NewFrame();
 8003000:	f002 fd40 	bl	8005a84 <OLED_NewFrame>
					OLED_DrawImage(0, 0, &RImg, OLED_COLOR_NORMAL);
 8003004:	2300      	movs	r3, #0
 8003006:	4a0b      	ldr	r2, [pc, #44]	@ (8003034 <Determine_component+0x138c>)
 8003008:	2100      	movs	r1, #0
 800300a:	2000      	movs	r0, #0
 800300c:	f002 ff07 	bl	8005e1e <OLED_DrawImage>
					OLED_PrintString(0, 48, message1, &font12x12,
 8003010:	2300      	movs	r3, #0
 8003012:	9300      	str	r3, [sp, #0]
 8003014:	4b08      	ldr	r3, [pc, #32]	@ (8003038 <Determine_component+0x1390>)
 8003016:	4a06      	ldr	r2, [pc, #24]	@ (8003030 <Determine_component+0x1388>)
 8003018:	2130      	movs	r1, #48	@ 0x30
 800301a:	2000      	movs	r0, #0
 800301c:	f002 ff9f 	bl	8005f5e <OLED_PrintString>
							OLED_COLOR_NORMAL);
					OLED_ShowFrame();
 8003020:	f002 fd3c 	bl	8005a9c <OLED_ShowFrame>
			}

		}
	}

}
 8003024:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8003028:	46bd      	mov	sp, r7
 800302a:	bdb0      	pop	{r4, r5, r7, pc}
 800302c:	0800e914 	.word	0x0800e914
 8003030:	20007aa4 	.word	0x20007aa4
 8003034:	080103e8 	.word	0x080103e8
 8003038:	08010984 	.word	0x08010984
 800303c:	20002360 	.word	0x20002360
 8003040:	20001360 	.word	0x20001360
 8003044:	2000032c 	.word	0x2000032c
 8003048:	40020000 	.word	0x40020000
 800304c:	40020400 	.word	0x40020400
 8003050:	20003360 	.word	0x20003360
 8003054:	20007a9c 	.word	0x20007a9c
 8003058:	459f6000 	.word	0x459f6000
 800305c:	4b371b00 	.word	0x4b371b00
 8003060:	0800e90c 	.word	0x0800e90c
 8003064:	20007ba4 	.word	0x20007ba4
 8003068:	08010798 	.word	0x08010798
 800306c:	424c0000 	.word	0x424c0000
 8003070:	4ce4e1c0 	.word	0x4ce4e1c0
 8003074:	00000000 	.word	0x00000000

08003078 <Find_tau_com>:
float Find_tau_com(uint16_t *adc_buffer) {
 8003078:	b580      	push	{r7, lr}
 800307a:	b094      	sub	sp, #80	@ 0x50
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
	// 1. 寻找起始点
	float start_index = 0;
 8003080:	f04f 0300 	mov.w	r3, #0
 8003084:	64fb      	str	r3, [r7, #76]	@ 0x4c
	float v_start = 0;
 8003086:	f04f 0300 	mov.w	r3, #0
 800308a:	63fb      	str	r3, [r7, #60]	@ 0x3c

	for (int i = 0; i < BUFFER_SIZE; i++) {
 800308c:	2300      	movs	r3, #0
 800308e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003090:	e028      	b.n	80030e4 <Find_tau_com+0x6c>
		float voltage = (adc_buffer[i] * VREF) / 4095.0f;
 8003092:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003094:	005b      	lsls	r3, r3, #1
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	4413      	add	r3, r2
 800309a:	881b      	ldrh	r3, [r3, #0]
 800309c:	ee07 3a90 	vmov	s15, r3
 80030a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030a4:	ed9f 7aa6 	vldr	s14, [pc, #664]	@ 8003340 <Find_tau_com+0x2c8>
 80030a8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80030ac:	eddf 6aa5 	vldr	s13, [pc, #660]	@ 8003344 <Find_tau_com+0x2cc>
 80030b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80030b4:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		if (voltage > MIN_VOLTAGE) {
 80030b8:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80030bc:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 8003348 <Find_tau_com+0x2d0>
 80030c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030c8:	dd09      	ble.n	80030de <Find_tau_com+0x66>
			start_index = i;
 80030ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80030cc:	ee07 3a90 	vmov	s15, r3
 80030d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030d4:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
			v_start = voltage;
 80030d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030da:	63fb      	str	r3, [r7, #60]	@ 0x3c
			break;
 80030dc:	e006      	b.n	80030ec <Find_tau_com+0x74>
	for (int i = 0; i < BUFFER_SIZE; i++) {
 80030de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80030e0:	3301      	adds	r3, #1
 80030e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80030e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80030e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80030ea:	dbd2      	blt.n	8003092 <Find_tau_com+0x1a>
		}
	}

	// 2. 更准确地检测稳态点和稳态电压
	float v_steady = (adc_buffer[BUFFER_SIZE - 1] * VREF) / 4095.0f;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f603 73fe 	addw	r3, r3, #4094	@ 0xffe
 80030f2:	881b      	ldrh	r3, [r3, #0]
 80030f4:	ee07 3a90 	vmov	s15, r3
 80030f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030fc:	ed9f 7a90 	vldr	s14, [pc, #576]	@ 8003340 <Find_tau_com+0x2c8>
 8003100:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003104:	eddf 6a8f 	vldr	s13, [pc, #572]	@ 8003344 <Find_tau_com+0x2cc>
 8003108:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800310c:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

	// 3. 寻找目标电压点（使用改进的算法）
	float v_target1 = v_steady * 0.632;  // 1个时间常数
 8003110:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003112:	f7fd fa21 	bl	8000558 <__aeabi_f2d>
 8003116:	a386      	add	r3, pc, #536	@ (adr r3, 8003330 <Find_tau_com+0x2b8>)
 8003118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800311c:	f7fd fa74 	bl	8000608 <__aeabi_dmul>
 8003120:	4602      	mov	r2, r0
 8003122:	460b      	mov	r3, r1
 8003124:	4610      	mov	r0, r2
 8003126:	4619      	mov	r1, r3
 8003128:	f7fd fd46 	bl	8000bb8 <__aeabi_d2f>
 800312c:	4603      	mov	r3, r0
 800312e:	633b      	str	r3, [r7, #48]	@ 0x30
	float v_target2 = v_steady * 0.865;  // 2个时间常数
 8003130:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003132:	f7fd fa11 	bl	8000558 <__aeabi_f2d>
 8003136:	a380      	add	r3, pc, #512	@ (adr r3, 8003338 <Find_tau_com+0x2c0>)
 8003138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800313c:	f7fd fa64 	bl	8000608 <__aeabi_dmul>
 8003140:	4602      	mov	r2, r0
 8003142:	460b      	mov	r3, r1
 8003144:	4610      	mov	r0, r2
 8003146:	4619      	mov	r1, r3
 8003148:	f7fd fd36 	bl	8000bb8 <__aeabi_d2f>
 800314c:	4603      	mov	r3, r0
 800314e:	62fb      	str	r3, [r7, #44]	@ 0x2c

	uint16_t index1 = 0, index2 = 0;
 8003150:	2300      	movs	r3, #0
 8003152:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8003156:	2300      	movs	r3, #0
 8003158:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44

	// 使用线性插值提高时间点精度
	for (int i = start_index; i < BUFFER_SIZE - 1; i++) {
 800315c:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8003160:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003164:	ee17 3a90 	vmov	r3, s15
 8003168:	643b      	str	r3, [r7, #64]	@ 0x40
 800316a:	e094      	b.n	8003296 <Find_tau_com+0x21e>
		float voltage = (adc_buffer[i] * VREF) / 4095.0f;
 800316c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	4413      	add	r3, r2
 8003174:	881b      	ldrh	r3, [r3, #0]
 8003176:	ee07 3a90 	vmov	s15, r3
 800317a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800317e:	ed9f 7a70 	vldr	s14, [pc, #448]	@ 8003340 <Find_tau_com+0x2c8>
 8003182:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003186:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003344 <Find_tau_com+0x2cc>
 800318a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800318e:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		float next_voltage = (adc_buffer[i + 1] * VREF) / 4095.0f;
 8003192:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003194:	3301      	adds	r3, #1
 8003196:	005b      	lsls	r3, r3, #1
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	4413      	add	r3, r2
 800319c:	881b      	ldrh	r3, [r3, #0]
 800319e:	ee07 3a90 	vmov	s15, r3
 80031a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031a6:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 8003340 <Find_tau_com+0x2c8>
 80031aa:	ee27 7a87 	vmul.f32	s14, s15, s14
 80031ae:	eddf 6a65 	vldr	s13, [pc, #404]	@ 8003344 <Find_tau_com+0x2cc>
 80031b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80031b6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

		// 插值寻找更准确的交叉点
		if (index1 == 0 && voltage <= v_target1 && next_voltage >= v_target1) {
 80031ba:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d130      	bne.n	8003224 <Find_tau_com+0x1ac>
 80031c2:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80031c6:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80031ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031d2:	d827      	bhi.n	8003224 <Find_tau_com+0x1ac>
 80031d4:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80031d8:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80031dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031e4:	db1e      	blt.n	8003224 <Find_tau_com+0x1ac>
			float fraction = (v_target1 - voltage) / (next_voltage - voltage);
 80031e6:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80031ea:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80031ee:	ee77 6a67 	vsub.f32	s13, s14, s15
 80031f2:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80031f6:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80031fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80031fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003202:	edc7 7a08 	vstr	s15, [r7, #32]
			index1 = i + fraction;  // 线性插值计算更精确的位置
 8003206:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003208:	ee07 3a90 	vmov	s15, r3
 800320c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003210:	edd7 7a08 	vldr	s15, [r7, #32]
 8003214:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003218:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800321c:	ee17 3a90 	vmov	r3, s15
 8003220:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
		}

		if (index2 == 0 && voltage <= v_target2 && next_voltage >= v_target2) {
 8003224:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8003228:	2b00      	cmp	r3, #0
 800322a:	d131      	bne.n	8003290 <Find_tau_com+0x218>
 800322c:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8003230:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8003234:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800323c:	d828      	bhi.n	8003290 <Find_tau_com+0x218>
 800323e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003242:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8003246:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800324a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800324e:	db1f      	blt.n	8003290 <Find_tau_com+0x218>
			float fraction = (v_target2 - voltage) / (next_voltage - voltage);
 8003250:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8003254:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003258:	ee77 6a67 	vsub.f32	s13, s14, s15
 800325c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003260:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003264:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003268:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800326c:	edc7 7a07 	vstr	s15, [r7, #28]
			index2 = i + fraction;  // 线性插值计算更精确的位置
 8003270:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003272:	ee07 3a90 	vmov	s15, r3
 8003276:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800327a:	edd7 7a07 	vldr	s15, [r7, #28]
 800327e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003282:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003286:	ee17 3a90 	vmov	r3, s15
 800328a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
			break;
 800328e:	e008      	b.n	80032a2 <Find_tau_com+0x22a>
	for (int i = start_index; i < BUFFER_SIZE - 1; i++) {
 8003290:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003292:	3301      	adds	r3, #1
 8003294:	643b      	str	r3, [r7, #64]	@ 0x40
 8003296:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003298:	f240 72fe 	movw	r2, #2046	@ 0x7fe
 800329c:	4293      	cmp	r3, r2
 800329e:	f77f af65 	ble.w	800316c <Find_tau_com+0xf4>
		}
	}

	// 4. 计算时间常数（改进计算方法）
	if (index1 > 0 && index2 > 0 && index2 - index1 > 50) {
 80032a2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d037      	beq.n	800331a <Find_tau_com+0x2a2>
 80032aa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d033      	beq.n	800331a <Find_tau_com+0x2a2>
 80032b2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 80032b6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	2b32      	cmp	r3, #50	@ 0x32
 80032be:	dd2c      	ble.n	800331a <Find_tau_com+0x2a2>
		// 使用两个时间点计算时间常数，提高准确性
		float delta_index1 = index2 - index1;
 80032c0:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 80032c4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	ee07 3a90 	vmov	s15, r3
 80032ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032d2:	edc7 7a06 	vstr	s15, [r7, #24]
		float delta_index2=index1-start_index;
 80032d6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80032da:	ee07 3a90 	vmov	s15, r3
 80032de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80032e2:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 80032e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032ea:	edc7 7a05 	vstr	s15, [r7, #20]
		float delta_index=(delta_index1+delta_index2)/2;
 80032ee:	ed97 7a06 	vldr	s14, [r7, #24]
 80032f2:	edd7 7a05 	vldr	s15, [r7, #20]
 80032f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032fa:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80032fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003302:	edc7 7a04 	vstr	s15, [r7, #16]
		float tau = delta_index * (1.0f / SAMPLE_RATE);
 8003306:	edd7 7a04 	vldr	s15, [r7, #16]
 800330a:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 800334c <Find_tau_com+0x2d4>
 800330e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003312:	edc7 7a03 	vstr	s15, [r7, #12]
		return tau;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	e001      	b.n	800331e <Find_tau_com+0x2a6>
	} else {
		return 0;  // 无法计算有效时间常数
 800331a:	f04f 0300 	mov.w	r3, #0
	}
}
 800331e:	ee07 3a90 	vmov	s15, r3
 8003322:	eeb0 0a67 	vmov.f32	s0, s15
 8003326:	3750      	adds	r7, #80	@ 0x50
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	f3af 8000 	nop.w
 8003330:	10624dd3 	.word	0x10624dd3
 8003334:	3fe43958 	.word	0x3fe43958
 8003338:	7ae147ae 	.word	0x7ae147ae
 800333c:	3febae14 	.word	0x3febae14
 8003340:	40533333 	.word	0x40533333
 8003344:	457ff000 	.word	0x457ff000
 8003348:	3d4ccccd 	.word	0x3d4ccccd
 800334c:	360637bd 	.word	0x360637bd

08003350 <steady_test>:
int steady_test(uint16_t *adc_buffer, float V) {
 8003350:	b5b0      	push	{r4, r5, r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	ed87 0a00 	vstr	s0, [r7]
	float v_end = (adc_buffer[BUFFER_SIZE - 1] * VREF) / 4095.0f;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f603 73fe 	addw	r3, r3, #4094	@ 0xffe
 8003362:	881b      	ldrh	r3, [r3, #0]
 8003364:	ee07 3a90 	vmov	s15, r3
 8003368:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800336c:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80033c8 <steady_test+0x78>
 8003370:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003374:	eddf 6a15 	vldr	s13, [pc, #84]	@ 80033cc <steady_test+0x7c>
 8003378:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800337c:	edc7 7a03 	vstr	s15, [r7, #12]
	if (v_end > 0.98 * V) {
 8003380:	68f8      	ldr	r0, [r7, #12]
 8003382:	f7fd f8e9 	bl	8000558 <__aeabi_f2d>
 8003386:	4604      	mov	r4, r0
 8003388:	460d      	mov	r5, r1
 800338a:	6838      	ldr	r0, [r7, #0]
 800338c:	f7fd f8e4 	bl	8000558 <__aeabi_f2d>
 8003390:	a30b      	add	r3, pc, #44	@ (adr r3, 80033c0 <steady_test+0x70>)
 8003392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003396:	f7fd f937 	bl	8000608 <__aeabi_dmul>
 800339a:	4602      	mov	r2, r0
 800339c:	460b      	mov	r3, r1
 800339e:	4620      	mov	r0, r4
 80033a0:	4629      	mov	r1, r5
 80033a2:	f7fd fbc1 	bl	8000b28 <__aeabi_dcmpgt>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d001      	beq.n	80033b0 <steady_test+0x60>
		return 1;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e000      	b.n	80033b2 <steady_test+0x62>
	} else {
		return 0;
 80033b0:	2300      	movs	r3, #0
	}
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3710      	adds	r7, #16
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bdb0      	pop	{r4, r5, r7, pc}
 80033ba:	bf00      	nop
 80033bc:	f3af 8000 	nop.w
 80033c0:	f5c28f5c 	.word	0xf5c28f5c
 80033c4:	3fef5c28 	.word	0x3fef5c28
 80033c8:	40533333 	.word	0x40533333
 80033cc:	457ff000 	.word	0x457ff000

080033d0 <analyze_Vpicture>:
int analyze_Vpicture(uint16_t *adc_buffer, uint16_t *adc_buffer2) {
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b088      	sub	sp, #32
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
	float v1 = calculate_average(adc_buffer);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f000 fb78 	bl	8003ad0 <calculate_average>
 80033e0:	ed87 0a07 	vstr	s0, [r7, #28]
	float v2 = calculate_average(adc_buffer2);
 80033e4:	6838      	ldr	r0, [r7, #0]
 80033e6:	f000 fb73 	bl	8003ad0 <calculate_average>
 80033ea:	ed87 0a06 	vstr	s0, [r7, #24]
	float v_lowZ = 3.3 * 1 / 11;
 80033ee:	4b2d      	ldr	r3, [pc, #180]	@ (80034a4 <analyze_Vpicture+0xd4>)
 80033f0:	617b      	str	r3, [r7, #20]
	float v_highZ = 3.3 * 10 / 11;
 80033f2:	4b2d      	ldr	r3, [pc, #180]	@ (80034a8 <analyze_Vpicture+0xd8>)
 80033f4:	613b      	str	r3, [r7, #16]
	float v_lowF = 3.3 * 1 / 11;
 80033f6:	4b2b      	ldr	r3, [pc, #172]	@ (80034a4 <analyze_Vpicture+0xd4>)
 80033f8:	60fb      	str	r3, [r7, #12]
	float v_highF = 3.3 * 10 / 11;
 80033fa:	4b2b      	ldr	r3, [pc, #172]	@ (80034a8 <analyze_Vpicture+0xd8>)
 80033fc:	60bb      	str	r3, [r7, #8]
	if ((v_lowZ <= v1 && v1 <= v_highZ) && (v_lowF <= v2 && v2 <= v_highF)) {
 80033fe:	ed97 7a05 	vldr	s14, [r7, #20]
 8003402:	edd7 7a07 	vldr	s15, [r7, #28]
 8003406:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800340a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800340e:	d81c      	bhi.n	800344a <analyze_Vpicture+0x7a>
 8003410:	ed97 7a07 	vldr	s14, [r7, #28]
 8003414:	edd7 7a04 	vldr	s15, [r7, #16]
 8003418:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800341c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003420:	d813      	bhi.n	800344a <analyze_Vpicture+0x7a>
 8003422:	ed97 7a03 	vldr	s14, [r7, #12]
 8003426:	edd7 7a06 	vldr	s15, [r7, #24]
 800342a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800342e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003432:	d80a      	bhi.n	800344a <analyze_Vpicture+0x7a>
 8003434:	ed97 7a06 	vldr	s14, [r7, #24]
 8003438:	edd7 7a02 	vldr	s15, [r7, #8]
 800343c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003444:	d801      	bhi.n	800344a <analyze_Vpicture+0x7a>
		return 1;  //符合
 8003446:	2301      	movs	r3, #1
 8003448:	e027      	b.n	800349a <analyze_Vpicture+0xca>
	} else if (v1 > v_highZ && v2 < v_lowF) {
 800344a:	ed97 7a07 	vldr	s14, [r7, #28]
 800344e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003452:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800345a:	dd0a      	ble.n	8003472 <analyze_Vpicture+0xa2>
 800345c:	ed97 7a06 	vldr	s14, [r7, #24]
 8003460:	edd7 7a03 	vldr	s15, [r7, #12]
 8003464:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800346c:	d501      	bpl.n	8003472 <analyze_Vpicture+0xa2>
		return 2;  //大
 800346e:	2302      	movs	r3, #2
 8003470:	e013      	b.n	800349a <analyze_Vpicture+0xca>
	} else if (v1 < v_lowZ && v2 > v_highF) {
 8003472:	ed97 7a07 	vldr	s14, [r7, #28]
 8003476:	edd7 7a05 	vldr	s15, [r7, #20]
 800347a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800347e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003482:	d50a      	bpl.n	800349a <analyze_Vpicture+0xca>
 8003484:	ed97 7a06 	vldr	s14, [r7, #24]
 8003488:	edd7 7a02 	vldr	s15, [r7, #8]
 800348c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003494:	dd01      	ble.n	800349a <analyze_Vpicture+0xca>
		return 3;  //小
 8003496:	2303      	movs	r3, #3
 8003498:	e7ff      	b.n	800349a <analyze_Vpicture+0xca>
	}
}
 800349a:	4618      	mov	r0, r3
 800349c:	3720      	adds	r7, #32
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	3e99999a 	.word	0x3e99999a
 80034a8:	40400000 	.word	0x40400000
 80034ac:	00000000 	.word	0x00000000

080034b0 <Analyze_trend>:

int Analyze_trend(uint16_t *adc_buffer, float V_steady) {
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b098      	sub	sp, #96	@ 0x60
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	ed87 0a00 	vstr	s0, [r7]
	// 寻找起始有效电压点
	int start_index = -1;
 80034bc:	f04f 33ff 	mov.w	r3, #4294967295
 80034c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
	float start_voltage = 0.0f;
 80034c2:	f04f 0300 	mov.w	r3, #0
 80034c6:	65bb      	str	r3, [r7, #88]	@ 0x58
	for (int i = 0; i < BUFFER_SIZE; i++) {
 80034c8:	2300      	movs	r3, #0
 80034ca:	657b      	str	r3, [r7, #84]	@ 0x54
 80034cc:	e023      	b.n	8003516 <Analyze_trend+0x66>
		float voltage = (adc_buffer[i] * VREF) / 4095.0f;
 80034ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034d0:	005b      	lsls	r3, r3, #1
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	4413      	add	r3, r2
 80034d6:	881b      	ldrh	r3, [r3, #0]
 80034d8:	ee07 3a90 	vmov	s15, r3
 80034dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034e0:	ed9f 7abb 	vldr	s14, [pc, #748]	@ 80037d0 <Analyze_trend+0x320>
 80034e4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80034e8:	eddf 6aba 	vldr	s13, [pc, #744]	@ 80037d4 <Analyze_trend+0x324>
 80034ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80034f0:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		if (voltage > MIN_VOLTAGE) {
 80034f4:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80034f8:	ed9f 7ab7 	vldr	s14, [pc, #732]	@ 80037d8 <Analyze_trend+0x328>
 80034fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003504:	dd04      	ble.n	8003510 <Analyze_trend+0x60>
			start_index = i;
 8003506:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003508:	65fb      	str	r3, [r7, #92]	@ 0x5c
			start_voltage = voltage;
 800350a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800350c:	65bb      	str	r3, [r7, #88]	@ 0x58
			break;
 800350e:	e006      	b.n	800351e <Analyze_trend+0x6e>
	for (int i = 0; i < BUFFER_SIZE; i++) {
 8003510:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003512:	3301      	adds	r3, #1
 8003514:	657b      	str	r3, [r7, #84]	@ 0x54
 8003516:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003518:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800351c:	dbd7      	blt.n	80034ce <Analyze_trend+0x1e>
		}
	}

	if (start_index == -1)
 800351e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003524:	d101      	bne.n	800352a <Analyze_trend+0x7a>
		return 0; // 无有效数据
 8003526:	2300      	movs	r3, #0
 8003528:	e146      	b.n	80037b8 <Analyze_trend+0x308>

	// 计算结束电压（取最后10%数据的平均值）
	float end_voltage = 0.0f;
 800352a:	f04f 0300 	mov.w	r3, #0
 800352e:	653b      	str	r3, [r7, #80]	@ 0x50
	int count = 0;
 8003530:	2300      	movs	r3, #0
 8003532:	64fb      	str	r3, [r7, #76]	@ 0x4c
	for (int i = BUFFER_SIZE * 0.9; i < BUFFER_SIZE; i++) {
 8003534:	f240 7333 	movw	r3, #1843	@ 0x733
 8003538:	64bb      	str	r3, [r7, #72]	@ 0x48
 800353a:	e020      	b.n	800357e <Analyze_trend+0xce>
		if (i >= start_index) {
 800353c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800353e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003540:	429a      	cmp	r2, r3
 8003542:	db19      	blt.n	8003578 <Analyze_trend+0xc8>
			end_voltage += (adc_buffer[i] * VREF) / 4095.0f;
 8003544:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003546:	005b      	lsls	r3, r3, #1
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	4413      	add	r3, r2
 800354c:	881b      	ldrh	r3, [r3, #0]
 800354e:	ee07 3a90 	vmov	s15, r3
 8003552:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003556:	ed9f 7a9e 	vldr	s14, [pc, #632]	@ 80037d0 <Analyze_trend+0x320>
 800355a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800355e:	eddf 6a9d 	vldr	s13, [pc, #628]	@ 80037d4 <Analyze_trend+0x324>
 8003562:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003566:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800356a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800356e:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
			count++;
 8003572:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003574:	3301      	adds	r3, #1
 8003576:	64fb      	str	r3, [r7, #76]	@ 0x4c
	for (int i = BUFFER_SIZE * 0.9; i < BUFFER_SIZE; i++) {
 8003578:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800357a:	3301      	adds	r3, #1
 800357c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800357e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003580:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003584:	dbda      	blt.n	800353c <Analyze_trend+0x8c>
		}
	}

	if (count == 0)
 8003586:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003588:	2b00      	cmp	r3, #0
 800358a:	d101      	bne.n	8003590 <Analyze_trend+0xe0>
		return 0;
 800358c:	2300      	movs	r3, #0
 800358e:	e113      	b.n	80037b8 <Analyze_trend+0x308>
	end_voltage /= count;
 8003590:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003592:	ee07 3a90 	vmov	s15, r3
 8003596:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800359a:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 800359e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035a2:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50

	// 计算电压变化量
	float delta_voltage = end_voltage - start_voltage;
 80035a6:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80035aa:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80035ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035b2:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

	// 判断基本趋势
	if (fabsf(delta_voltage) < 0.1)
 80035b6:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80035ba:	eef0 7ae7 	vabs.f32	s15, s15
 80035be:	ee17 0a90 	vmov	r0, s15
 80035c2:	f7fc ffc9 	bl	8000558 <__aeabi_f2d>
 80035c6:	a37e      	add	r3, pc, #504	@ (adr r3, 80037c0 <Analyze_trend+0x310>)
 80035c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035cc:	f7fd fa8e 	bl	8000aec <__aeabi_dcmplt>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d001      	beq.n	80035da <Analyze_trend+0x12a>
		return 0; // 无明显趋势
 80035d6:	2300      	movs	r3, #0
 80035d8:	e0ee      	b.n	80037b8 <Analyze_trend+0x308>

	// 计算前20%数据的平均上升速率（用于区分电阻和电容）
	float fast_rising_threshold = 0.03f; // 快速上升阈值（V/采样点）
 80035da:	4b80      	ldr	r3, [pc, #512]	@ (80037dc <Analyze_trend+0x32c>)
 80035dc:	627b      	str	r3, [r7, #36]	@ 0x24
	float avg_initial_slope = 0.0f;
 80035de:	f04f 0300 	mov.w	r3, #0
 80035e2:	647b      	str	r3, [r7, #68]	@ 0x44
	int initial_points = BUFFER_SIZE * 0.2;
 80035e4:	f240 1399 	movw	r3, #409	@ 0x199
 80035e8:	623b      	str	r3, [r7, #32]
	int valid_initial_points = 0;
 80035ea:	2300      	movs	r3, #0
 80035ec:	643b      	str	r3, [r7, #64]	@ 0x40

	for (int i = start_index;
 80035ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80035f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80035f2:	e028      	b.n	8003646 <Analyze_trend+0x196>
			i < start_index + initial_points && i < BUFFER_SIZE - 1; i++) {
		float slope = ((adc_buffer[i + 1] - adc_buffer[i]) * VREF) / 4095.0f;
 80035f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035f6:	3301      	adds	r3, #1
 80035f8:	005b      	lsls	r3, r3, #1
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	4413      	add	r3, r2
 80035fe:	881b      	ldrh	r3, [r3, #0]
 8003600:	4619      	mov	r1, r3
 8003602:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003604:	005b      	lsls	r3, r3, #1
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	4413      	add	r3, r2
 800360a:	881b      	ldrh	r3, [r3, #0]
 800360c:	1acb      	subs	r3, r1, r3
 800360e:	ee07 3a90 	vmov	s15, r3
 8003612:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003616:	ed9f 7a6e 	vldr	s14, [pc, #440]	@ 80037d0 <Analyze_trend+0x320>
 800361a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800361e:	eddf 6a6d 	vldr	s13, [pc, #436]	@ 80037d4 <Analyze_trend+0x324>
 8003622:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003626:	edc7 7a07 	vstr	s15, [r7, #28]
		avg_initial_slope += slope;
 800362a:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 800362e:	edd7 7a07 	vldr	s15, [r7, #28]
 8003632:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003636:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
		valid_initial_points++;
 800363a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800363c:	3301      	adds	r3, #1
 800363e:	643b      	str	r3, [r7, #64]	@ 0x40
			i < start_index + initial_points && i < BUFFER_SIZE - 1; i++) {
 8003640:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003642:	3301      	adds	r3, #1
 8003644:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003646:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003648:	6a3b      	ldr	r3, [r7, #32]
 800364a:	4413      	add	r3, r2
 800364c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800364e:	429a      	cmp	r2, r3
 8003650:	da04      	bge.n	800365c <Analyze_trend+0x1ac>
 8003652:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003654:	f240 72fe 	movw	r2, #2046	@ 0x7fe
 8003658:	4293      	cmp	r3, r2
 800365a:	ddcb      	ble.n	80035f4 <Analyze_trend+0x144>
	}

	if (valid_initial_points > 0) {
 800365c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800365e:	2b00      	cmp	r3, #0
 8003660:	dd0a      	ble.n	8003678 <Analyze_trend+0x1c8>
		avg_initial_slope /= valid_initial_points;
 8003662:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003664:	ee07 3a90 	vmov	s15, r3
 8003668:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800366c:	edd7 6a11 	vldr	s13, [r7, #68]	@ 0x44
 8003670:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003674:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
	}

	// 计算曲线非线性度（电容充电为指数曲线，电阻为线性）
	float nonlinearity = 0.0f;
 8003678:	f04f 0300 	mov.w	r3, #0
 800367c:	63bb      	str	r3, [r7, #56]	@ 0x38
	int curve_points = BUFFER_SIZE * 0.5;
 800367e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003682:	61bb      	str	r3, [r7, #24]
	int valid_curve_points = 0;
 8003684:	2300      	movs	r3, #0
 8003686:	637b      	str	r3, [r7, #52]	@ 0x34

	for (int i = start_index;
 8003688:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800368a:	633b      	str	r3, [r7, #48]	@ 0x30
 800368c:	e05a      	b.n	8003744 <Analyze_trend+0x294>
			i < start_index + curve_points && i < BUFFER_SIZE - 2; i++) {
		float v1 = (adc_buffer[i] * VREF) / 4095.0f;
 800368e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003690:	005b      	lsls	r3, r3, #1
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	4413      	add	r3, r2
 8003696:	881b      	ldrh	r3, [r3, #0]
 8003698:	ee07 3a90 	vmov	s15, r3
 800369c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036a0:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 80037d0 <Analyze_trend+0x320>
 80036a4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80036a8:	eddf 6a4a 	vldr	s13, [pc, #296]	@ 80037d4 <Analyze_trend+0x324>
 80036ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80036b0:	edc7 7a05 	vstr	s15, [r7, #20]
		float v2 = (adc_buffer[i + 1] * VREF) / 4095.0f;
 80036b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036b6:	3301      	adds	r3, #1
 80036b8:	005b      	lsls	r3, r3, #1
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	4413      	add	r3, r2
 80036be:	881b      	ldrh	r3, [r3, #0]
 80036c0:	ee07 3a90 	vmov	s15, r3
 80036c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036c8:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 80037d0 <Analyze_trend+0x320>
 80036cc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80036d0:	eddf 6a40 	vldr	s13, [pc, #256]	@ 80037d4 <Analyze_trend+0x324>
 80036d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80036d8:	edc7 7a04 	vstr	s15, [r7, #16]
		float v3 = (adc_buffer[i + 2] * VREF) / 4095.0f;
 80036dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036de:	3302      	adds	r3, #2
 80036e0:	005b      	lsls	r3, r3, #1
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	4413      	add	r3, r2
 80036e6:	881b      	ldrh	r3, [r3, #0]
 80036e8:	ee07 3a90 	vmov	s15, r3
 80036ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036f0:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 80037d0 <Analyze_trend+0x320>
 80036f4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80036f8:	eddf 6a36 	vldr	s13, [pc, #216]	@ 80037d4 <Analyze_trend+0x324>
 80036fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003700:	edc7 7a03 	vstr	s15, [r7, #12]

		// 线性度指标：(v3-v2)与(v2-v1)的差异
		float linear_diff = fabsf((v3 - v2) - (v2 - v1));
 8003704:	ed97 7a03 	vldr	s14, [r7, #12]
 8003708:	edd7 7a04 	vldr	s15, [r7, #16]
 800370c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003710:	edd7 6a04 	vldr	s13, [r7, #16]
 8003714:	edd7 7a05 	vldr	s15, [r7, #20]
 8003718:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800371c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003720:	eef0 7ae7 	vabs.f32	s15, s15
 8003724:	edc7 7a02 	vstr	s15, [r7, #8]
		nonlinearity += linear_diff;
 8003728:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 800372c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003730:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003734:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		valid_curve_points++;
 8003738:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800373a:	3301      	adds	r3, #1
 800373c:	637b      	str	r3, [r7, #52]	@ 0x34
			i < start_index + curve_points && i < BUFFER_SIZE - 2; i++) {
 800373e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003740:	3301      	adds	r3, #1
 8003742:	633b      	str	r3, [r7, #48]	@ 0x30
 8003744:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	4413      	add	r3, r2
 800374a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800374c:	429a      	cmp	r2, r3
 800374e:	da04      	bge.n	800375a <Analyze_trend+0x2aa>
 8003750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003752:	f240 72fd 	movw	r2, #2045	@ 0x7fd
 8003756:	4293      	cmp	r3, r2
 8003758:	dd99      	ble.n	800368e <Analyze_trend+0x1de>
	}

	if (valid_curve_points > 0) {
 800375a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800375c:	2b00      	cmp	r3, #0
 800375e:	dd0a      	ble.n	8003776 <Analyze_trend+0x2c6>
		nonlinearity /= valid_curve_points;
 8003760:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003762:	ee07 3a90 	vmov	s15, r3
 8003766:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800376a:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 800376e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003772:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
	}

	// 关键判断逻辑：
	// 1. 若初始上升速率快且非线性度低，认为是电阻（返回0）
	// 2. 若初始上升速率慢且非线性度高，认为是电容（返回1）
	if (delta_voltage > 0) {
 8003776:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800377a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800377e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003782:	dd17      	ble.n	80037b4 <Analyze_trend+0x304>
		if (avg_initial_slope > fast_rising_threshold && nonlinearity < 0.005) {
 8003784:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8003788:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800378c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003794:	dd0c      	ble.n	80037b0 <Analyze_trend+0x300>
 8003796:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003798:	f7fc fede 	bl	8000558 <__aeabi_f2d>
 800379c:	a30a      	add	r3, pc, #40	@ (adr r3, 80037c8 <Analyze_trend+0x318>)
 800379e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037a2:	f7fd f9a3 	bl	8000aec <__aeabi_dcmplt>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d001      	beq.n	80037b0 <Analyze_trend+0x300>
			return 0; // 大电阻特性（快速上升且接近线性）
 80037ac:	2300      	movs	r3, #0
 80037ae:	e003      	b.n	80037b8 <Analyze_trend+0x308>
		} else {
			return 1; // 电容特性（缓慢上升且非线性）
 80037b0:	2301      	movs	r3, #1
 80037b2:	e001      	b.n	80037b8 <Analyze_trend+0x308>
		}
	} else {
		return -1; // 下降趋势
 80037b4:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3760      	adds	r7, #96	@ 0x60
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	9999999a 	.word	0x9999999a
 80037c4:	3fb99999 	.word	0x3fb99999
 80037c8:	47ae147b 	.word	0x47ae147b
 80037cc:	3f747ae1 	.word	0x3f747ae1
 80037d0:	40533333 	.word	0x40533333
 80037d4:	457ff000 	.word	0x457ff000
 80037d8:	3d4ccccd 	.word	0x3d4ccccd
 80037dc:	3cf5c28f 	.word	0x3cf5c28f

080037e0 <Danalyze>:

//
float Danalyze() {
 80037e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80037e4:	b090      	sub	sp, #64	@ 0x40
 80037e6:	af02      	add	r7, sp, #8
	//float IZ=fabs(VPA0Z-VPA1Z)
	// 判断电压范围的辅助函数

	float v1 = calculate_average(adc_buffer1_com);
 80037e8:	48a5      	ldr	r0, [pc, #660]	@ (8003a80 <Danalyze+0x2a0>)
 80037ea:	f000 f971 	bl	8003ad0 <calculate_average>
 80037ee:	ed87 0a0d 	vstr	s0, [r7, #52]	@ 0x34
	float IZ = fabs(VPA0Z - v1) / 51;
 80037f2:	4ba4      	ldr	r3, [pc, #656]	@ (8003a84 <Danalyze+0x2a4>)
 80037f4:	ed93 7a00 	vldr	s14, [r3]
 80037f8:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80037fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003800:	eeb0 7ae7 	vabs.f32	s14, s15
 8003804:	eddf 6aa0 	vldr	s13, [pc, #640]	@ 8003a88 <Danalyze+0x2a8>
 8003808:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800380c:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
	float v2 = calculate_average(adc_buffer2_com);
 8003810:	489e      	ldr	r0, [pc, #632]	@ (8003a8c <Danalyze+0x2ac>)
 8003812:	f000 f95d 	bl	8003ad0 <calculate_average>
 8003816:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
	float IF = fabs(v2 - VPA0F) / 51;
 800381a:	4b9d      	ldr	r3, [pc, #628]	@ (8003a90 <Danalyze+0x2b0>)
 800381c:	edd3 7a00 	vldr	s15, [r3]
 8003820:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8003824:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003828:	eeb0 7ae7 	vabs.f32	s14, s15
 800382c:	eddf 6a96 	vldr	s13, [pc, #600]	@ 8003a88 <Danalyze+0x2a8>
 8003830:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003834:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	float a = IZ / IF;
 8003838:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 800383c:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8003840:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003844:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	float b = IF / IZ;
 8003848:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 800384c:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8003850:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003854:	edc7 7a08 	vstr	s15, [r7, #32]
	if (fabs(v1-3.3)<0.01&&fabs(v2)<0.01) {
 8003858:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800385a:	f7fc fe7d 	bl	8000558 <__aeabi_f2d>
 800385e:	a382      	add	r3, pc, #520	@ (adr r3, 8003a68 <Danalyze+0x288>)
 8003860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003864:	f7fc fd18 	bl	8000298 <__aeabi_dsub>
 8003868:	4602      	mov	r2, r0
 800386a:	460b      	mov	r3, r1
 800386c:	4690      	mov	r8, r2
 800386e:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8003872:	a37f      	add	r3, pc, #508	@ (adr r3, 8003a70 <Danalyze+0x290>)
 8003874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003878:	4640      	mov	r0, r8
 800387a:	4649      	mov	r1, r9
 800387c:	f7fd f936 	bl	8000aec <__aeabi_dcmplt>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d022      	beq.n	80038cc <Danalyze+0xec>
 8003886:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800388a:	eef0 7ae7 	vabs.f32	s15, s15
 800388e:	ee17 0a90 	vmov	r0, s15
 8003892:	f7fc fe61 	bl	8000558 <__aeabi_f2d>
 8003896:	a376      	add	r3, pc, #472	@ (adr r3, 8003a70 <Danalyze+0x290>)
 8003898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800389c:	f7fd f926 	bl	8000aec <__aeabi_dcmplt>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d012      	beq.n	80038cc <Danalyze+0xec>
		sprintf(msg, "NULL");
 80038a6:	497b      	ldr	r1, [pc, #492]	@ (8003a94 <Danalyze+0x2b4>)
 80038a8:	487b      	ldr	r0, [pc, #492]	@ (8003a98 <Danalyze+0x2b8>)
 80038aa:	f007 fe0b 	bl	800b4c4 <siprintf>
		OLED_NewFrame();
 80038ae:	f002 f8e9 	bl	8005a84 <OLED_NewFrame>
		OLED_PrintString(0, 0, msg, &font16x16, OLED_COLOR_NORMAL);
 80038b2:	2300      	movs	r3, #0
 80038b4:	9300      	str	r3, [sp, #0]
 80038b6:	4b79      	ldr	r3, [pc, #484]	@ (8003a9c <Danalyze+0x2bc>)
 80038b8:	4a77      	ldr	r2, [pc, #476]	@ (8003a98 <Danalyze+0x2b8>)
 80038ba:	2100      	movs	r1, #0
 80038bc:	2000      	movs	r0, #0
 80038be:	f002 fb4e 	bl	8005f5e <OLED_PrintString>
		OLED_ShowFrame();
 80038c2:	f002 f8eb 	bl	8005a9c <OLED_ShowFrame>
		return 0;
 80038c6:	eddf 7a76 	vldr	s15, [pc, #472]	@ 8003aa0 <Danalyze+0x2c0>
 80038ca:	e0c4      	b.n	8003a56 <Danalyze+0x276>
	}
	//float delta = fabs(v1 - v2);
	else if (a > 20 || b > 20) {
 80038cc:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80038d0:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 80038d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038dc:	dc09      	bgt.n	80038f2 <Danalyze+0x112>
 80038de:	edd7 7a08 	vldr	s15, [r7, #32]
 80038e2:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 80038e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038ee:	f340 80b0 	ble.w	8003a52 <Danalyze+0x272>
		GPIO_Set_HighZ(GPIOA, GPIO_PIN_0);
 80038f2:	2101      	movs	r1, #1
 80038f4:	486b      	ldr	r0, [pc, #428]	@ (8003aa4 <Danalyze+0x2c4>)
 80038f6:	f7fe f93d 	bl	8001b74 <GPIO_Set_HighZ>
			GPIO_Set_HighZ(GPIOA, GPIO_PIN_4);
 80038fa:	2110      	movs	r1, #16
 80038fc:	4869      	ldr	r0, [pc, #420]	@ (8003aa4 <Danalyze+0x2c4>)
 80038fe:	f7fe f939 	bl	8001b74 <GPIO_Set_HighZ>
			GPIO_Set_Low(GPIOA, GPIO_PIN_7);
 8003902:	2180      	movs	r1, #128	@ 0x80
 8003904:	4867      	ldr	r0, [pc, #412]	@ (8003aa4 <Danalyze+0x2c4>)
 8003906:	f7fe f97f 	bl	8001c08 <GPIO_Set_Low>
			GPIO_Set_Low(GPIOB, GPIO_PIN_15);
 800390a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800390e:	4866      	ldr	r0, [pc, #408]	@ (8003aa8 <Danalyze+0x2c8>)
 8003910:	f7fe f97a 	bl	8001c08 <GPIO_Set_Low>
			memset(adc_buffer3_com, 0, sizeof(adc_buffer3_com));
 8003914:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003918:	2100      	movs	r1, #0
 800391a:	4864      	ldr	r0, [pc, #400]	@ (8003aac <Danalyze+0x2cc>)
 800391c:	f007 fe47 	bl	800b5ae <memset>
			DMA_Measure_com(4, adc_buffer3_com);
 8003920:	4962      	ldr	r1, [pc, #392]	@ (8003aac <Danalyze+0x2cc>)
 8003922:	2004      	movs	r0, #4
 8003924:	f000 f920 	bl	8003b68 <DMA_Measure_com>
			VPA1Z = VPA1;
 8003928:	4b61      	ldr	r3, [pc, #388]	@ (8003ab0 <Danalyze+0x2d0>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a61      	ldr	r2, [pc, #388]	@ (8003ab4 <Danalyze+0x2d4>)
 800392e:	6013      	str	r3, [r2, #0]
			VPA0Z=VPA0;
 8003930:	4b61      	ldr	r3, [pc, #388]	@ (8003ab8 <Danalyze+0x2d8>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a53      	ldr	r2, [pc, #332]	@ (8003a84 <Danalyze+0x2a4>)
 8003936:	6013      	str	r3, [r2, #0]
			VPA7Z=VPA7;
 8003938:	4b60      	ldr	r3, [pc, #384]	@ (8003abc <Danalyze+0x2dc>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a60      	ldr	r2, [pc, #384]	@ (8003ac0 <Danalyze+0x2e0>)
 800393e:	6013      	str	r3, [r2, #0]
			//VPA0Z=VPA0;
			//VPA7Z=VPA7;
			GPIO_Set_HighZ(GPIOA, GPIO_PIN_0);
 8003940:	2101      	movs	r1, #1
 8003942:	4858      	ldr	r0, [pc, #352]	@ (8003aa4 <Danalyze+0x2c4>)
 8003944:	f7fe f916 	bl	8001b74 <GPIO_Set_HighZ>
			GPIO_Set_HighZ(GPIOA, GPIO_PIN_4);
 8003948:	2110      	movs	r1, #16
 800394a:	4856      	ldr	r0, [pc, #344]	@ (8003aa4 <Danalyze+0x2c4>)
 800394c:	f7fe f912 	bl	8001b74 <GPIO_Set_HighZ>
			memset(adc_buffer4_com, 0, sizeof(adc_buffer4_com));
 8003950:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003954:	2100      	movs	r1, #0
 8003956:	485b      	ldr	r0, [pc, #364]	@ (8003ac4 <Danalyze+0x2e4>)
 8003958:	f007 fe29 	bl	800b5ae <memset>
			DMA_Measure_com(2, adc_buffer4_com);
 800395c:	4959      	ldr	r1, [pc, #356]	@ (8003ac4 <Danalyze+0x2e4>)
 800395e:	2002      	movs	r0, #2
 8003960:	f000 f902 	bl	8003b68 <DMA_Measure_com>
			VPA1F = VPA1;
 8003964:	4b52      	ldr	r3, [pc, #328]	@ (8003ab0 <Danalyze+0x2d0>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a57      	ldr	r2, [pc, #348]	@ (8003ac8 <Danalyze+0x2e8>)
 800396a:	6013      	str	r3, [r2, #0]
		    VPA0F=VPA0;
 800396c:	4b52      	ldr	r3, [pc, #328]	@ (8003ab8 <Danalyze+0x2d8>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a47      	ldr	r2, [pc, #284]	@ (8003a90 <Danalyze+0x2b0>)
 8003972:	6013      	str	r3, [r2, #0]
		    VPA7F=VPA7;
 8003974:	4b51      	ldr	r3, [pc, #324]	@ (8003abc <Danalyze+0x2dc>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a54      	ldr	r2, [pc, #336]	@ (8003acc <Danalyze+0x2ec>)
 800397a:	6013      	str	r3, [r2, #0]
			float v1 = calculate_average(adc_buffer3_com);
 800397c:	484b      	ldr	r0, [pc, #300]	@ (8003aac <Danalyze+0x2cc>)
 800397e:	f000 f8a7 	bl	8003ad0 <calculate_average>
 8003982:	ed87 0a07 	vstr	s0, [r7, #28]
			float IZ = fabs(VPA0Z - v1) / 51;
 8003986:	4b3f      	ldr	r3, [pc, #252]	@ (8003a84 <Danalyze+0x2a4>)
 8003988:	ed93 7a00 	vldr	s14, [r3]
 800398c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003990:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003994:	eeb0 7ae7 	vabs.f32	s14, s15
 8003998:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8003a88 <Danalyze+0x2a8>
 800399c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80039a0:	edc7 7a06 	vstr	s15, [r7, #24]
			float v2 = calculate_average(adc_buffer4_com);
 80039a4:	4847      	ldr	r0, [pc, #284]	@ (8003ac4 <Danalyze+0x2e4>)
 80039a6:	f000 f893 	bl	8003ad0 <calculate_average>
 80039aa:	ed87 0a05 	vstr	s0, [r7, #20]
			float IF = fabs(v2 - VPA0F) / 51;
 80039ae:	4b38      	ldr	r3, [pc, #224]	@ (8003a90 <Danalyze+0x2b0>)
 80039b0:	edd3 7a00 	vldr	s15, [r3]
 80039b4:	ed97 7a05 	vldr	s14, [r7, #20]
 80039b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039bc:	eeb0 7ae7 	vabs.f32	s14, s15
 80039c0:	eddf 6a31 	vldr	s13, [pc, #196]	@ 8003a88 <Danalyze+0x2a8>
 80039c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80039c8:	edc7 7a04 	vstr	s15, [r7, #16]
			float a = IZ / IF;
 80039cc:	edd7 6a06 	vldr	s13, [r7, #24]
 80039d0:	ed97 7a04 	vldr	s14, [r7, #16]
 80039d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039d8:	edc7 7a03 	vstr	s15, [r7, #12]
			float b = IF / IZ;
 80039dc:	edd7 6a04 	vldr	s13, [r7, #16]
 80039e0:	ed97 7a06 	vldr	s14, [r7, #24]
 80039e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039e8:	edc7 7a02 	vstr	s15, [r7, #8]
			float delta1=VPA1Z-VPA7Z;
 80039ec:	4b31      	ldr	r3, [pc, #196]	@ (8003ab4 <Danalyze+0x2d4>)
 80039ee:	ed93 7a00 	vldr	s14, [r3]
 80039f2:	4b33      	ldr	r3, [pc, #204]	@ (8003ac0 <Danalyze+0x2e0>)
 80039f4:	edd3 7a00 	vldr	s15, [r3]
 80039f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039fc:	edc7 7a01 	vstr	s15, [r7, #4]
		float delta2 = VPA7F - VPA1F;
 8003a00:	4b32      	ldr	r3, [pc, #200]	@ (8003acc <Danalyze+0x2ec>)
 8003a02:	ed93 7a00 	vldr	s14, [r3]
 8003a06:	4b30      	ldr	r3, [pc, #192]	@ (8003ac8 <Danalyze+0x2e8>)
 8003a08:	edd3 7a00 	vldr	s15, [r3]
 8003a0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a10:	edc7 7a00 	vstr	s15, [r7]

		if (fabs(v1-3.3)<0.1f) {
 8003a14:	69f8      	ldr	r0, [r7, #28]
 8003a16:	f7fc fd9f 	bl	8000558 <__aeabi_f2d>
 8003a1a:	a313      	add	r3, pc, #76	@ (adr r3, 8003a68 <Danalyze+0x288>)
 8003a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a20:	f7fc fc3a 	bl	8000298 <__aeabi_dsub>
 8003a24:	4602      	mov	r2, r0
 8003a26:	460b      	mov	r3, r1
 8003a28:	4614      	mov	r4, r2
 8003a2a:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8003a2e:	a312      	add	r3, pc, #72	@ (adr r3, 8003a78 <Danalyze+0x298>)
 8003a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a34:	4620      	mov	r0, r4
 8003a36:	4629      	mov	r1, r5
 8003a38:	f7fd f858 	bl	8000aec <__aeabi_dcmplt>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d004      	beq.n	8003a4c <Danalyze+0x26c>
			//sprintf(message1, " Z V=%.2fΩ", delta);
			return -delta2;
 8003a42:	edd7 7a00 	vldr	s15, [r7]
 8003a46:	eef1 7a67 	vneg.f32	s15, s15
 8003a4a:	e004      	b.n	8003a56 <Danalyze+0x276>
		} else {
			//sprintf(message1, " F V=%.2fΩ", delta);
			return delta1;
 8003a4c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a50:	e001      	b.n	8003a56 <Danalyze+0x276>
		}
	} else {
		return 0;
 8003a52:	eddf 7a13 	vldr	s15, [pc, #76]	@ 8003aa0 <Danalyze+0x2c0>
	}
}
 8003a56:	eeb0 0a67 	vmov.f32	s0, s15
 8003a5a:	3738      	adds	r7, #56	@ 0x38
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003a62:	bf00      	nop
 8003a64:	f3af 8000 	nop.w
 8003a68:	66666666 	.word	0x66666666
 8003a6c:	400a6666 	.word	0x400a6666
 8003a70:	47ae147b 	.word	0x47ae147b
 8003a74:	3f847ae1 	.word	0x3f847ae1
 8003a78:	a0000000 	.word	0xa0000000
 8003a7c:	3fb99999 	.word	0x3fb99999
 8003a80:	20001360 	.word	0x20001360
 8003a84:	20007a9c 	.word	0x20007a9c
 8003a88:	424c0000 	.word	0x424c0000
 8003a8c:	20002360 	.word	0x20002360
 8003a90:	20007aa0 	.word	0x20007aa0
 8003a94:	0800e90c 	.word	0x0800e90c
 8003a98:	20007ba4 	.word	0x20007ba4
 8003a9c:	08010798 	.word	0x08010798
 8003aa0:	00000000 	.word	0x00000000
 8003aa4:	40020000 	.word	0x40020000
 8003aa8:	40020400 	.word	0x40020400
 8003aac:	20003360 	.word	0x20003360
 8003ab0:	20007a80 	.word	0x20007a80
 8003ab4:	20007a84 	.word	0x20007a84
 8003ab8:	20007a98 	.word	0x20007a98
 8003abc:	20007a8c 	.word	0x20007a8c
 8003ac0:	20007a90 	.word	0x20007a90
 8003ac4:	20004360 	.word	0x20004360
 8003ac8:	20007a88 	.word	0x20007a88
 8003acc:	20007a94 	.word	0x20007a94

08003ad0 <calculate_average>:
//
//
float calculate_average(uint16_t *buffer) {
 8003ad0:	b480      	push	{r7}
 8003ad2:	b087      	sub	sp, #28
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
	float sum = 0.0f;
 8003ad8:	f04f 0300 	mov.w	r3, #0
 8003adc:	617b      	str	r3, [r7, #20]
	int count = 0;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	613b      	str	r3, [r7, #16]
	for (int i = 100; i < BUFFER_SIZE; i += SAMPLE_STEP) {
 8003ae2:	2364      	movs	r3, #100	@ 0x64
 8003ae4:	60fb      	str	r3, [r7, #12]
 8003ae6:	e014      	b.n	8003b12 <calculate_average+0x42>
		sum += buffer[i];
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	005b      	lsls	r3, r3, #1
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	4413      	add	r3, r2
 8003af0:	881b      	ldrh	r3, [r3, #0]
 8003af2:	ee07 3a90 	vmov	s15, r3
 8003af6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003afa:	ed97 7a05 	vldr	s14, [r7, #20]
 8003afe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b02:	edc7 7a05 	vstr	s15, [r7, #20]
		count++;
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	3301      	adds	r3, #1
 8003b0a:	613b      	str	r3, [r7, #16]
	for (int i = 100; i < BUFFER_SIZE; i += SAMPLE_STEP) {
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	3314      	adds	r3, #20
 8003b10:	60fb      	str	r3, [r7, #12]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b18:	dbe6      	blt.n	8003ae8 <calculate_average+0x18>
	}
	return (count > 0) ? (sum / count) * VREF / 4095.0f : 0.0f;
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	dd11      	ble.n	8003b44 <calculate_average+0x74>
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	ee07 3a90 	vmov	s15, r3
 8003b26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b2a:	edd7 6a05 	vldr	s13, [r7, #20]
 8003b2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b32:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8003b5c <calculate_average+0x8c>
 8003b36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b3a:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8003b60 <calculate_average+0x90>
 8003b3e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003b42:	e001      	b.n	8003b48 <calculate_average+0x78>
 8003b44:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8003b64 <calculate_average+0x94>
 8003b48:	eef0 7a47 	vmov.f32	s15, s14
}
 8003b4c:	eeb0 0a67 	vmov.f32	s0, s15
 8003b50:	371c      	adds	r7, #28
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	40533333 	.word	0x40533333
 8003b60:	457ff000 	.word	0x457ff000
 8003b64:	00000000 	.word	0x00000000

08003b68 <DMA_Measure_com>:
//
void DMA_Measure_com(int sign, uint16_t *adc_buffer) {
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b084      	sub	sp, #16
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	6039      	str	r1, [r7, #0]
	// 1. 电容放电
	//memset(adc_buffer, 0, BUFFER_SIZE);
	HAL_Delay(50);  // 10ms放电
 8003b72:	2032      	movs	r0, #50	@ 0x32
 8003b74:	f002 fea0 	bl	80068b8 <HAL_Delay>

	// 2. 启动DMA采样
	uint32_t start_tick = HAL_GetTick();
 8003b78:	f002 fe92 	bl	80068a0 <HAL_GetTick>
 8003b7c:	60f8      	str	r0, [r7, #12]
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_buffer, BUFFER_SIZE);
 8003b7e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003b82:	6839      	ldr	r1, [r7, #0]
 8003b84:	4831      	ldr	r0, [pc, #196]	@ (8003c4c <DMA_Measure_com+0xe4>)
 8003b86:	f003 f80f 	bl	8006ba8 <HAL_ADC_Start_DMA>
	measurement_done = 0;
 8003b8a:	4b31      	ldr	r3, [pc, #196]	@ (8003c50 <DMA_Measure_com+0xe8>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	701a      	strb	r2, [r3, #0]

	// 3. 短暂延时确保DMA已启动
	//HAL_Delay(1);

	if (sign == 1) {
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d105      	bne.n	8003ba2 <DMA_Measure_com+0x3a>
		// STEP_PIN: 高电平
		HAL_GPIO_WritePin(GPIOA, STEP_PIN, GPIO_PIN_SET);
 8003b96:	2201      	movs	r2, #1
 8003b98:	2101      	movs	r1, #1
 8003b9a:	482e      	ldr	r0, [pc, #184]	@ (8003c54 <DMA_Measure_com+0xec>)
 8003b9c:	f004 faae 	bl	80080fc <HAL_GPIO_WritePin>
 8003ba0:	e01a      	b.n	8003bd8 <DMA_Measure_com+0x70>
		//return 1;
	} else if (sign == 2) {
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d105      	bne.n	8003bb4 <DMA_Measure_com+0x4c>
		// STEP3_PIN: 高电平
		HAL_GPIO_WritePin(GPIOA, STEP2_PIN, GPIO_PIN_SET);
 8003ba8:	2201      	movs	r2, #1
 8003baa:	2180      	movs	r1, #128	@ 0x80
 8003bac:	4829      	ldr	r0, [pc, #164]	@ (8003c54 <DMA_Measure_com+0xec>)
 8003bae:	f004 faa5 	bl	80080fc <HAL_GPIO_WritePin>
 8003bb2:	e011      	b.n	8003bd8 <DMA_Measure_com+0x70>
	} else if (sign == 3) {
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2b03      	cmp	r3, #3
 8003bb8:	d105      	bne.n	8003bc6 <DMA_Measure_com+0x5e>
		// STEP2_PIN: 高电平
		HAL_GPIO_WritePin(GPIOA, STEP3_PIN, GPIO_PIN_SET);
 8003bba:	2201      	movs	r2, #1
 8003bbc:	2110      	movs	r1, #16
 8003bbe:	4825      	ldr	r0, [pc, #148]	@ (8003c54 <DMA_Measure_com+0xec>)
 8003bc0:	f004 fa9c 	bl	80080fc <HAL_GPIO_WritePin>
 8003bc4:	e008      	b.n	8003bd8 <DMA_Measure_com+0x70>
	} else if (sign == 4) {
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2b04      	cmp	r3, #4
 8003bca:	d105      	bne.n	8003bd8 <DMA_Measure_com+0x70>
		HAL_GPIO_WritePin(GPIOB, STEP4_PIN, GPIO_PIN_SET);
 8003bcc:	2201      	movs	r2, #1
 8003bce:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003bd2:	4821      	ldr	r0, [pc, #132]	@ (8003c58 <DMA_Measure_com+0xf0>)
 8003bd4:	f004 fa92 	bl	80080fc <HAL_GPIO_WritePin>
	}

	// 5. 等待测量完成
	while (!measurement_done)
 8003bd8:	bf00      	nop
 8003bda:	4b1d      	ldr	r3, [pc, #116]	@ (8003c50 <DMA_Measure_com+0xe8>)
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d0fa      	beq.n	8003bda <DMA_Measure_com+0x72>
		;
	HAL_ADC_Stop_DMA(&hadc1);
 8003be4:	4819      	ldr	r0, [pc, #100]	@ (8003c4c <DMA_Measure_com+0xe4>)
 8003be6:	f003 f8d3 	bl	8006d90 <HAL_ADC_Stop_DMA>
	uint32_t end_tick = HAL_GetTick();
 8003bea:	f002 fe59 	bl	80068a0 <HAL_GetTick>
 8003bee:	60b8      	str	r0, [r7, #8]
	HAL_Delay(50);
 8003bf0:	2032      	movs	r0, #50	@ 0x32
 8003bf2:	f002 fe61 	bl	80068b8 <HAL_Delay>
	VPA1 = Sample_PA1_Average();
 8003bf6:	f000 faeb 	bl	80041d0 <Sample_PA1_Average>
 8003bfa:	eef0 7a40 	vmov.f32	s15, s0
 8003bfe:	4b17      	ldr	r3, [pc, #92]	@ (8003c5c <DMA_Measure_com+0xf4>)
 8003c00:	edc3 7a00 	vstr	s15, [r3]
	VPA0 = Sample_PA0_Average();
 8003c04:	f000 f982 	bl	8003f0c <Sample_PA0_Average>
 8003c08:	eef0 7a40 	vmov.f32	s15, s0
 8003c0c:	4b14      	ldr	r3, [pc, #80]	@ (8003c60 <DMA_Measure_com+0xf8>)
 8003c0e:	edc3 7a00 	vstr	s15, [r3]
	VPA7 = Sample_PA7_Average();
 8003c12:	f000 f92b 	bl	8003e6c <Sample_PA7_Average>
 8003c16:	eef0 7a40 	vmov.f32	s15, s0
 8003c1a:	4b12      	ldr	r3, [pc, #72]	@ (8003c64 <DMA_Measure_com+0xfc>)
 8003c1c:	edc3 7a00 	vstr	s15, [r3]
	GPIO_Set_Low(GPIOA, GPIO_PIN_0);
 8003c20:	2101      	movs	r1, #1
 8003c22:	480c      	ldr	r0, [pc, #48]	@ (8003c54 <DMA_Measure_com+0xec>)
 8003c24:	f7fd fff0 	bl	8001c08 <GPIO_Set_Low>
	GPIO_Set_Low(GPIOA, GPIO_PIN_4);
 8003c28:	2110      	movs	r1, #16
 8003c2a:	480a      	ldr	r0, [pc, #40]	@ (8003c54 <DMA_Measure_com+0xec>)
 8003c2c:	f7fd ffec 	bl	8001c08 <GPIO_Set_Low>
	GPIO_Set_Low(GPIOA, GPIO_PIN_7);
 8003c30:	2180      	movs	r1, #128	@ 0x80
 8003c32:	4808      	ldr	r0, [pc, #32]	@ (8003c54 <DMA_Measure_com+0xec>)
 8003c34:	f7fd ffe8 	bl	8001c08 <GPIO_Set_Low>
	GPIO_Set_Low(GPIOB, GPIO_PIN_15);
 8003c38:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003c3c:	4806      	ldr	r0, [pc, #24]	@ (8003c58 <DMA_Measure_com+0xf0>)
 8003c3e:	f7fd ffe3 	bl	8001c08 <GPIO_Set_Low>
	// 6. 分析数据
	// Analyze_ADC_Data();
}
 8003c42:	bf00      	nop
 8003c44:	3710      	adds	r7, #16
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	200001f4 	.word	0x200001f4
 8003c50:	20007a70 	.word	0x20007a70
 8003c54:	40020000 	.word	0x40020000
 8003c58:	40020400 	.word	0x40020400
 8003c5c:	20007a80 	.word	0x20007a80
 8003c60:	20007a98 	.word	0x20007a98
 8003c64:	20007a8c 	.word	0x20007a8c

08003c68 <DMA_Measure>:
//
void DMA_Measure(void) {
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
	// 1. 电容放电
	HAL_Delay(50);  // 10ms放电
 8003c6e:	2032      	movs	r0, #50	@ 0x32
 8003c70:	f002 fe22 	bl	80068b8 <HAL_Delay>

	// 2. 启动DMA采样
	uint32_t start_tick = HAL_GetTick();
 8003c74:	f002 fe14 	bl	80068a0 <HAL_GetTick>
 8003c78:	60f8      	str	r0, [r7, #12]
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_buffer, BUFFER_SIZE);
 8003c7a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003c7e:	4939      	ldr	r1, [pc, #228]	@ (8003d64 <DMA_Measure+0xfc>)
 8003c80:	4839      	ldr	r0, [pc, #228]	@ (8003d68 <DMA_Measure+0x100>)
 8003c82:	f002 ff91 	bl	8006ba8 <HAL_ADC_Start_DMA>
	measurement_done = 0;
 8003c86:	4b39      	ldr	r3, [pc, #228]	@ (8003d6c <DMA_Measure+0x104>)
 8003c88:	2200      	movs	r2, #0
 8003c8a:	701a      	strb	r2, [r3, #0]

	// 3. 短暂延时确保DMA已启动
	//HAL_Delay(1);

	if (black_box.detected_type == UNKNOWN) {
 8003c8c:	4b38      	ldr	r3, [pc, #224]	@ (8003d70 <DMA_Measure+0x108>)
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d105      	bne.n	8003ca0 <DMA_Measure+0x38>
		// STEP_PIN: 高电平
		HAL_GPIO_WritePin(GPIOA, STEP_PIN, GPIO_PIN_SET);
 8003c94:	2201      	movs	r2, #1
 8003c96:	2101      	movs	r1, #1
 8003c98:	4836      	ldr	r0, [pc, #216]	@ (8003d74 <DMA_Measure+0x10c>)
 8003c9a:	f004 fa2f 	bl	80080fc <HAL_GPIO_WritePin>
 8003c9e:	e016      	b.n	8003cce <DMA_Measure+0x66>
	} else if (black_box.detected_type == RC || black_box.detected_type == OR) {
 8003ca0:	4b33      	ldr	r3, [pc, #204]	@ (8003d70 <DMA_Measure+0x108>)
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	2b08      	cmp	r3, #8
 8003ca6:	d003      	beq.n	8003cb0 <DMA_Measure+0x48>
 8003ca8:	4b31      	ldr	r3, [pc, #196]	@ (8003d70 <DMA_Measure+0x108>)
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	2b07      	cmp	r3, #7
 8003cae:	d105      	bne.n	8003cbc <DMA_Measure+0x54>
		// STEP3_PIN: 高电平
		HAL_GPIO_WritePin(GPIOA, STEP3_PIN, GPIO_PIN_SET);
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	2110      	movs	r1, #16
 8003cb4:	482f      	ldr	r0, [pc, #188]	@ (8003d74 <DMA_Measure+0x10c>)
 8003cb6:	f004 fa21 	bl	80080fc <HAL_GPIO_WritePin>
 8003cba:	e008      	b.n	8003cce <DMA_Measure+0x66>
	} else if (black_box.detected_type == RL) {
 8003cbc:	4b2c      	ldr	r3, [pc, #176]	@ (8003d70 <DMA_Measure+0x108>)
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	2b09      	cmp	r3, #9
 8003cc2:	d104      	bne.n	8003cce <DMA_Measure+0x66>
		// STEP2_PIN: 高电平
		HAL_GPIO_WritePin(GPIOA, STEP2_PIN_Pin, GPIO_PIN_SET);
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	2180      	movs	r1, #128	@ 0x80
 8003cc8:	482a      	ldr	r0, [pc, #168]	@ (8003d74 <DMA_Measure+0x10c>)
 8003cca:	f004 fa17 	bl	80080fc <HAL_GPIO_WritePin>
	}

	// 5. 等待测量完成
	while (!measurement_done)
 8003cce:	bf00      	nop
 8003cd0:	4b26      	ldr	r3, [pc, #152]	@ (8003d6c <DMA_Measure+0x104>)
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d0fa      	beq.n	8003cd0 <DMA_Measure+0x68>
		;
	HAL_ADC_Stop_DMA(&hadc1);
 8003cda:	4823      	ldr	r0, [pc, #140]	@ (8003d68 <DMA_Measure+0x100>)
 8003cdc:	f003 f858 	bl	8006d90 <HAL_ADC_Stop_DMA>
	uint32_t end_tick = HAL_GetTick();
 8003ce0:	f002 fdde 	bl	80068a0 <HAL_GetTick>
 8003ce4:	60b8      	str	r0, [r7, #8]
	float actual_rate = (BUFFER_SIZE) / (end_tick - start_tick);
 8003ce6:	68ba      	ldr	r2, [r7, #8]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cf4:	ee07 3a90 	vmov	s15, r3
 8003cf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cfc:	edc7 7a01 	vstr	s15, [r7, #4]
	sprintf(msg, "Rate: %.1fkHz", actual_rate);
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f7fc fc29 	bl	8000558 <__aeabi_f2d>
 8003d06:	4602      	mov	r2, r0
 8003d08:	460b      	mov	r3, r1
 8003d0a:	491b      	ldr	r1, [pc, #108]	@ (8003d78 <DMA_Measure+0x110>)
 8003d0c:	481b      	ldr	r0, [pc, #108]	@ (8003d7c <DMA_Measure+0x114>)
 8003d0e:	f007 fbd9 	bl	800b4c4 <siprintf>
	HAL_Delay(50);
 8003d12:	2032      	movs	r0, #50	@ 0x32
 8003d14:	f002 fdd0 	bl	80068b8 <HAL_Delay>
	VPA1 = Sample_PA1_Average();
 8003d18:	f000 fa5a 	bl	80041d0 <Sample_PA1_Average>
 8003d1c:	eef0 7a40 	vmov.f32	s15, s0
 8003d20:	4b17      	ldr	r3, [pc, #92]	@ (8003d80 <DMA_Measure+0x118>)
 8003d22:	edc3 7a00 	vstr	s15, [r3]
	VPA7 = Sample_PA7_Average();
 8003d26:	f000 f8a1 	bl	8003e6c <Sample_PA7_Average>
 8003d2a:	eef0 7a40 	vmov.f32	s15, s0
 8003d2e:	4b15      	ldr	r3, [pc, #84]	@ (8003d84 <DMA_Measure+0x11c>)
 8003d30:	edc3 7a00 	vstr	s15, [r3]
	VPA0 = Sample_PA0_Average();
 8003d34:	f000 f8ea 	bl	8003f0c <Sample_PA0_Average>
 8003d38:	eef0 7a40 	vmov.f32	s15, s0
 8003d3c:	4b12      	ldr	r3, [pc, #72]	@ (8003d88 <DMA_Measure+0x120>)
 8003d3e:	edc3 7a00 	vstr	s15, [r3]
	GPIO_Set_Low(GPIOA, GPIO_PIN_0);
 8003d42:	2101      	movs	r1, #1
 8003d44:	480b      	ldr	r0, [pc, #44]	@ (8003d74 <DMA_Measure+0x10c>)
 8003d46:	f7fd ff5f 	bl	8001c08 <GPIO_Set_Low>
	GPIO_Set_Low(GPIOA, GPIO_PIN_4);
 8003d4a:	2110      	movs	r1, #16
 8003d4c:	4809      	ldr	r0, [pc, #36]	@ (8003d74 <DMA_Measure+0x10c>)
 8003d4e:	f7fd ff5b 	bl	8001c08 <GPIO_Set_Low>
	GPIO_Set_Low(GPIOA, GPIO_PIN_7);
 8003d52:	2180      	movs	r1, #128	@ 0x80
 8003d54:	4807      	ldr	r0, [pc, #28]	@ (8003d74 <DMA_Measure+0x10c>)
 8003d56:	f7fd ff57 	bl	8001c08 <GPIO_Set_Low>

	// 6. 分析数据
	// Analyze_ADC_Data();
}
 8003d5a:	bf00      	nop
 8003d5c:	3710      	adds	r7, #16
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	20000338 	.word	0x20000338
 8003d68:	200001f4 	.word	0x200001f4
 8003d6c:	20007a70 	.word	0x20007a70
 8003d70:	20000300 	.word	0x20000300
 8003d74:	40020000 	.word	0x40020000
 8003d78:	0800e920 	.word	0x0800e920
 8003d7c:	20007ba4 	.word	0x20007ba4
 8003d80:	20007a80 	.word	0x20007a80
 8003d84:	20007a8c 	.word	0x20007a8c
 8003d88:	20007a98 	.word	0x20007a98

08003d8c <ADC_SampleWithTemporaryChannel>:
//
// 简化的通道切换函数
int ADC_SampleWithTemporaryChannel(ADC_HandleTypeDef *hadc,
		uint32_t temp_channel, uint16_t *buffer, int size) {
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b08a      	sub	sp, #40	@ 0x28
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	60b9      	str	r1, [r7, #8]
 8003d96:	607a      	str	r2, [r7, #4]
 8003d98:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status;

	// 1. 停止当前ADC DMA
	status = HAL_ADC_Stop_DMA(hadc);
 8003d9a:	68f8      	ldr	r0, [r7, #12]
 8003d9c:	f002 fff8 	bl	8006d90 <HAL_ADC_Stop_DMA>
 8003da0:	4603      	mov	r3, r0
 8003da2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (status != HAL_OK)
 8003da6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d002      	beq.n	8003db4 <ADC_SampleWithTemporaryChannel+0x28>
		return -1;
 8003dae:	f04f 33ff 	mov.w	r3, #4294967295
 8003db2:	e055      	b.n	8003e60 <ADC_SampleWithTemporaryChannel+0xd4>

	// 2. 配置为临时通道
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8003db4:	f107 0314 	add.w	r3, r7, #20
 8003db8:	2200      	movs	r2, #0
 8003dba:	601a      	str	r2, [r3, #0]
 8003dbc:	605a      	str	r2, [r3, #4]
 8003dbe:	609a      	str	r2, [r3, #8]
 8003dc0:	60da      	str	r2, [r3, #12]
	sConfig.Channel = temp_channel;
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	617b      	str	r3, [r7, #20]
	sConfig.Rank = 1;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	61bb      	str	r3, [r7, #24]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES; // 根据您的需求设置
 8003dca:	2300      	movs	r3, #0
 8003dcc:	61fb      	str	r3, [r7, #28]

	status = HAL_ADC_ConfigChannel(hadc, &sConfig);
 8003dce:	f107 0314 	add.w	r3, r7, #20
 8003dd2:	4619      	mov	r1, r3
 8003dd4:	68f8      	ldr	r0, [r7, #12]
 8003dd6:	f003 f849 	bl	8006e6c <HAL_ADC_ConfigChannel>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (status != HAL_OK)
 8003de0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d002      	beq.n	8003dee <ADC_SampleWithTemporaryChannel+0x62>
		return -2;
 8003de8:	f06f 0301 	mvn.w	r3, #1
 8003dec:	e038      	b.n	8003e60 <ADC_SampleWithTemporaryChannel+0xd4>

	// 3. 启动临时通道采样
	measurement_done = 0; // 重置完成标志
 8003dee:	4b1e      	ldr	r3, [pc, #120]	@ (8003e68 <ADC_SampleWithTemporaryChannel+0xdc>)
 8003df0:	2200      	movs	r2, #0
 8003df2:	701a      	strb	r2, [r3, #0]
	status = HAL_ADC_Start_DMA(hadc, (uint32_t*) buffer, size);
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	461a      	mov	r2, r3
 8003df8:	6879      	ldr	r1, [r7, #4]
 8003dfa:	68f8      	ldr	r0, [r7, #12]
 8003dfc:	f002 fed4 	bl	8006ba8 <HAL_ADC_Start_DMA>
 8003e00:	4603      	mov	r3, r0
 8003e02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (status != HAL_OK)
 8003e06:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d002      	beq.n	8003e14 <ADC_SampleWithTemporaryChannel+0x88>
		return -3;
 8003e0e:	f06f 0302 	mvn.w	r3, #2
 8003e12:	e025      	b.n	8003e60 <ADC_SampleWithTemporaryChannel+0xd4>

	// 4. 等待采样完成
	while (!measurement_done)
 8003e14:	bf00      	nop
 8003e16:	4b14      	ldr	r3, [pc, #80]	@ (8003e68 <ADC_SampleWithTemporaryChannel+0xdc>)
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d0fa      	beq.n	8003e16 <ADC_SampleWithTemporaryChannel+0x8a>
		; // 由DMA中断回调设置

	// 5. 停止DMA
	status = HAL_ADC_Stop_DMA(hadc);
 8003e20:	68f8      	ldr	r0, [r7, #12]
 8003e22:	f002 ffb5 	bl	8006d90 <HAL_ADC_Stop_DMA>
 8003e26:	4603      	mov	r3, r0
 8003e28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (status != HAL_OK)
 8003e2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d002      	beq.n	8003e3a <ADC_SampleWithTemporaryChannel+0xae>
		return -4;
 8003e34:	f06f 0303 	mvn.w	r3, #3
 8003e38:	e012      	b.n	8003e60 <ADC_SampleWithTemporaryChannel+0xd4>

	// 6. 恢复为默认通道1
	sConfig.Channel = ADC_CHANNEL_1;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	617b      	str	r3, [r7, #20]
	status = HAL_ADC_ConfigChannel(hadc, &sConfig);
 8003e3e:	f107 0314 	add.w	r3, r7, #20
 8003e42:	4619      	mov	r1, r3
 8003e44:	68f8      	ldr	r0, [r7, #12]
 8003e46:	f003 f811 	bl	8006e6c <HAL_ADC_ConfigChannel>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (status != HAL_OK)
 8003e50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d002      	beq.n	8003e5e <ADC_SampleWithTemporaryChannel+0xd2>
		return -5;
 8003e58:	f06f 0304 	mvn.w	r3, #4
 8003e5c:	e000      	b.n	8003e60 <ADC_SampleWithTemporaryChannel+0xd4>

	return 0;
 8003e5e:	2300      	movs	r3, #0
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3728      	adds	r7, #40	@ 0x28
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}
 8003e68:	20007a70 	.word	0x20007a70

08003e6c <Sample_PA7_Average>:
//
// 简化的采样函数
float Sample_PA7_Average(void) {
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
	memset(adc_buffer2, 0, sizeof(adc_buffer2));
 8003e72:	2228      	movs	r2, #40	@ 0x28
 8003e74:	2100      	movs	r1, #0
 8003e76:	4821      	ldr	r0, [pc, #132]	@ (8003efc <Sample_PA7_Average+0x90>)
 8003e78:	f007 fb99 	bl	800b5ae <memset>

	int result = ADC_SampleWithTemporaryChannel(&hadc1, ADC_CHANNEL_5,
 8003e7c:	2314      	movs	r3, #20
 8003e7e:	4a1f      	ldr	r2, [pc, #124]	@ (8003efc <Sample_PA7_Average+0x90>)
 8003e80:	2105      	movs	r1, #5
 8003e82:	481f      	ldr	r0, [pc, #124]	@ (8003f00 <Sample_PA7_Average+0x94>)
 8003e84:	f7ff ff82 	bl	8003d8c <ADC_SampleWithTemporaryChannel>
 8003e88:	6078      	str	r0, [r7, #4]
			adc_buffer2, BUFFER2_SIZE);

	if (result == 0) {
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d12c      	bne.n	8003eea <Sample_PA7_Average+0x7e>
		float sum = 0.0f;
 8003e90:	f04f 0300 	mov.w	r3, #0
 8003e94:	60fb      	str	r3, [r7, #12]
		for (int i = 0; i < BUFFER2_SIZE; i++) {
 8003e96:	2300      	movs	r3, #0
 8003e98:	60bb      	str	r3, [r7, #8]
 8003e9a:	e01c      	b.n	8003ed6 <Sample_PA7_Average+0x6a>
			float voltage = (adc_buffer2[i] * VREF) / 4095.0f;
 8003e9c:	4a17      	ldr	r2, [pc, #92]	@ (8003efc <Sample_PA7_Average+0x90>)
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ea4:	ee07 3a90 	vmov	s15, r3
 8003ea8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003eac:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8003f04 <Sample_PA7_Average+0x98>
 8003eb0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003eb4:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8003f08 <Sample_PA7_Average+0x9c>
 8003eb8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003ebc:	edc7 7a00 	vstr	s15, [r7]
			sum += voltage;
 8003ec0:	ed97 7a03 	vldr	s14, [r7, #12]
 8003ec4:	edd7 7a00 	vldr	s15, [r7]
 8003ec8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ecc:	edc7 7a03 	vstr	s15, [r7, #12]
		for (int i = 0; i < BUFFER2_SIZE; i++) {
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	60bb      	str	r3, [r7, #8]
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	2b13      	cmp	r3, #19
 8003eda:	dddf      	ble.n	8003e9c <Sample_PA7_Average+0x30>
		}
		return sum / BUFFER2_SIZE;
 8003edc:	edd7 7a03 	vldr	s15, [r7, #12]
 8003ee0:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 8003ee4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003ee8:	e001      	b.n	8003eee <Sample_PA7_Average+0x82>
	}
	return -1.0f; // 错误返回值
 8003eea:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
}
 8003eee:	eef0 7a47 	vmov.f32	s15, s14
 8003ef2:	eeb0 0a67 	vmov.f32	s0, s15
 8003ef6:	3710      	adds	r7, #16
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	20001338 	.word	0x20001338
 8003f00:	200001f4 	.word	0x200001f4
 8003f04:	40533333 	.word	0x40533333
 8003f08:	457ff000 	.word	0x457ff000

08003f0c <Sample_PA0_Average>:
float Sample_PA0_Average(void) {
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
	memset(adc_buffer2, 0, sizeof(adc_buffer2));
 8003f12:	2228      	movs	r2, #40	@ 0x28
 8003f14:	2100      	movs	r1, #0
 8003f16:	4821      	ldr	r0, [pc, #132]	@ (8003f9c <Sample_PA0_Average+0x90>)
 8003f18:	f007 fb49 	bl	800b5ae <memset>

	int result = ADC_SampleWithTemporaryChannel(&hadc1, ADC_CHANNEL_6,
 8003f1c:	2314      	movs	r3, #20
 8003f1e:	4a1f      	ldr	r2, [pc, #124]	@ (8003f9c <Sample_PA0_Average+0x90>)
 8003f20:	2106      	movs	r1, #6
 8003f22:	481f      	ldr	r0, [pc, #124]	@ (8003fa0 <Sample_PA0_Average+0x94>)
 8003f24:	f7ff ff32 	bl	8003d8c <ADC_SampleWithTemporaryChannel>
 8003f28:	6078      	str	r0, [r7, #4]
			adc_buffer2, BUFFER2_SIZE);

	if (result == 0) {
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d12c      	bne.n	8003f8a <Sample_PA0_Average+0x7e>
		float sum = 0.0f;
 8003f30:	f04f 0300 	mov.w	r3, #0
 8003f34:	60fb      	str	r3, [r7, #12]
		for (int i = 0; i < BUFFER2_SIZE; i++) {
 8003f36:	2300      	movs	r3, #0
 8003f38:	60bb      	str	r3, [r7, #8]
 8003f3a:	e01c      	b.n	8003f76 <Sample_PA0_Average+0x6a>
			float voltage = (adc_buffer2[i] * VREF) / 4095.0f;
 8003f3c:	4a17      	ldr	r2, [pc, #92]	@ (8003f9c <Sample_PA0_Average+0x90>)
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f44:	ee07 3a90 	vmov	s15, r3
 8003f48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f4c:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8003fa4 <Sample_PA0_Average+0x98>
 8003f50:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003f54:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8003fa8 <Sample_PA0_Average+0x9c>
 8003f58:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f5c:	edc7 7a00 	vstr	s15, [r7]
			sum += voltage;
 8003f60:	ed97 7a03 	vldr	s14, [r7, #12]
 8003f64:	edd7 7a00 	vldr	s15, [r7]
 8003f68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f6c:	edc7 7a03 	vstr	s15, [r7, #12]
		for (int i = 0; i < BUFFER2_SIZE; i++) {
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	3301      	adds	r3, #1
 8003f74:	60bb      	str	r3, [r7, #8]
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	2b13      	cmp	r3, #19
 8003f7a:	dddf      	ble.n	8003f3c <Sample_PA0_Average+0x30>
		}
		return sum / BUFFER2_SIZE;
 8003f7c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003f80:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 8003f84:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003f88:	e001      	b.n	8003f8e <Sample_PA0_Average+0x82>
	}
	return -1.0f; // 错误返回值
 8003f8a:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
}
 8003f8e:	eef0 7a47 	vmov.f32	s15, s14
 8003f92:	eeb0 0a67 	vmov.f32	s0, s15
 8003f96:	3710      	adds	r7, #16
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	20001338 	.word	0x20001338
 8003fa0:	200001f4 	.word	0x200001f4
 8003fa4:	40533333 	.word	0x40533333
 8003fa8:	457ff000 	.word	0x457ff000
 8003fac:	00000000 	.word	0x00000000

08003fb0 <Determine_black_box>:
	}

}

//判断黑箱类型
void Determine_black_box(void) {
 8003fb0:	b590      	push	{r4, r7, lr}
 8003fb2:	b08d      	sub	sp, #52	@ 0x34
 8003fb4:	af02      	add	r7, sp, #8
	float start_index;
	float MAX = 0;
 8003fb6:	f04f 0300 	mov.w	r3, #0
 8003fba:	627b      	str	r3, [r7, #36]	@ 0x24
	float v_initial = adc_buffer[10] * VREF / 4095.0f;
 8003fbc:	4b7a      	ldr	r3, [pc, #488]	@ (80041a8 <Determine_black_box+0x1f8>)
 8003fbe:	8a9b      	ldrh	r3, [r3, #20]
 8003fc0:	ee07 3a90 	vmov	s15, r3
 8003fc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fc8:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 80041ac <Determine_black_box+0x1fc>
 8003fcc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003fd0:	eddf 6a77 	vldr	s13, [pc, #476]	@ 80041b0 <Determine_black_box+0x200>
 8003fd4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003fd8:	edc7 7a08 	vstr	s15, [r7, #32]
	float v_steady = adc_buffer[BUFFER_SIZE - 1] * VREF / 4095.0f;
 8003fdc:	4b72      	ldr	r3, [pc, #456]	@ (80041a8 <Determine_black_box+0x1f8>)
 8003fde:	f8b3 3ffe 	ldrh.w	r3, [r3, #4094]	@ 0xffe
 8003fe2:	ee07 3a90 	vmov	s15, r3
 8003fe6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fea:	ed9f 7a70 	vldr	s14, [pc, #448]	@ 80041ac <Determine_black_box+0x1fc>
 8003fee:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003ff2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80041b0 <Determine_black_box+0x200>
 8003ff6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003ffa:	edc7 7a05 	vstr	s15, [r7, #20]

	for (int i = 0; i < BUFFER_SIZE; i++) {
 8003ffe:	2300      	movs	r3, #0
 8004000:	61fb      	str	r3, [r7, #28]
 8004002:	e027      	b.n	8004054 <Determine_black_box+0xa4>
		float voltage = (adc_buffer[i] * VREF) / 4095.0f;
 8004004:	4a68      	ldr	r2, [pc, #416]	@ (80041a8 <Determine_black_box+0x1f8>)
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800400c:	ee07 3a90 	vmov	s15, r3
 8004010:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004014:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 80041ac <Determine_black_box+0x1fc>
 8004018:	ee27 7a87 	vmul.f32	s14, s15, s14
 800401c:	eddf 6a64 	vldr	s13, [pc, #400]	@ 80041b0 <Determine_black_box+0x200>
 8004020:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004024:	edc7 7a04 	vstr	s15, [r7, #16]
		if (voltage > MIN_VOLTAGE) {
 8004028:	edd7 7a04 	vldr	s15, [r7, #16]
 800402c:	ed9f 7a61 	vldr	s14, [pc, #388]	@ 80041b4 <Determine_black_box+0x204>
 8004030:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004038:	dd09      	ble.n	800404e <Determine_black_box+0x9e>
			start_index = i;
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	ee07 3a90 	vmov	s15, r3
 8004040:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004044:	edc7 7a03 	vstr	s15, [r7, #12]
			v_initial = voltage;
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	623b      	str	r3, [r7, #32]
			break;
 800404c:	e006      	b.n	800405c <Determine_black_box+0xac>
	for (int i = 0; i < BUFFER_SIZE; i++) {
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	3301      	adds	r3, #1
 8004052:	61fb      	str	r3, [r7, #28]
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800405a:	dbd3      	blt.n	8004004 <Determine_black_box+0x54>
		}
	}
	//CESHI
	float index;
	for (int i = 0; i < BUFFER_SIZE; i++) {
 800405c:	2300      	movs	r3, #0
 800405e:	61bb      	str	r3, [r7, #24]
 8004060:	e026      	b.n	80040b0 <Determine_black_box+0x100>
		float voltage = (adc_buffer[i] * VREF) / 4095.0f;
 8004062:	4a51      	ldr	r2, [pc, #324]	@ (80041a8 <Determine_black_box+0x1f8>)
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800406a:	ee07 3a90 	vmov	s15, r3
 800406e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004072:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 80041ac <Determine_black_box+0x1fc>
 8004076:	ee27 7a87 	vmul.f32	s14, s15, s14
 800407a:	eddf 6a4d 	vldr	s13, [pc, #308]	@ 80041b0 <Determine_black_box+0x200>
 800407e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004082:	edc7 7a01 	vstr	s15, [r7, #4]
		if (voltage > MAX) {
 8004086:	ed97 7a01 	vldr	s14, [r7, #4]
 800408a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800408e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004096:	dd08      	ble.n	80040aa <Determine_black_box+0xfa>
			index = i;
 8004098:	69bb      	ldr	r3, [r7, #24]
 800409a:	ee07 3a90 	vmov	s15, r3
 800409e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040a2:	edc7 7a00 	vstr	s15, [r7]
			MAX = voltage;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	627b      	str	r3, [r7, #36]	@ 0x24
	for (int i = 0; i < BUFFER_SIZE; i++) {
 80040aa:	69bb      	ldr	r3, [r7, #24]
 80040ac:	3301      	adds	r3, #1
 80040ae:	61bb      	str	r3, [r7, #24]
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80040b6:	dbd4      	blt.n	8004062 <Determine_black_box+0xb2>
			//break;
		}
	}

	float chazhi = fabsf(v_initial - v_steady);
 80040b8:	ed97 7a08 	vldr	s14, [r7, #32]
 80040bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80040c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040c4:	eef0 7ae7 	vabs.f32	s15, s15
 80040c8:	edc7 7a02 	vstr	s15, [r7, #8]
	if (chazhi < 0.1 && !evaluate_voltage_slope()) {
 80040cc:	68b8      	ldr	r0, [r7, #8]
 80040ce:	f7fc fa43 	bl	8000558 <__aeabi_f2d>
 80040d2:	a333      	add	r3, pc, #204	@ (adr r3, 80041a0 <Determine_black_box+0x1f0>)
 80040d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d8:	f7fc fd08 	bl	8000aec <__aeabi_dcmplt>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d03b      	beq.n	800415a <Determine_black_box+0x1aa>
 80040e2:	f001 f875 	bl	80051d0 <evaluate_voltage_slope>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d136      	bne.n	800415a <Determine_black_box+0x1aa>
		black_box.detected_type = OR;
 80040ec:	4b32      	ldr	r3, [pc, #200]	@ (80041b8 <Determine_black_box+0x208>)
 80040ee:	2207      	movs	r2, #7
 80040f0:	701a      	strb	r2, [r3, #0]
		if (BigRtest() == 1) {
 80040f2:	f000 f8c5 	bl	8004280 <BigRtest>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d112      	bne.n	8004122 <Determine_black_box+0x172>
			strcpy(message1, "Pure Resistor");
 80040fc:	4a2f      	ldr	r2, [pc, #188]	@ (80041bc <Determine_black_box+0x20c>)
 80040fe:	4b30      	ldr	r3, [pc, #192]	@ (80041c0 <Determine_black_box+0x210>)
 8004100:	4614      	mov	r4, r2
 8004102:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004104:	c407      	stmia	r4!, {r0, r1, r2}
 8004106:	8023      	strh	r3, [r4, #0]
			OLED_NewFrame();
 8004108:	f001 fcbc 	bl	8005a84 <OLED_NewFrame>
			OLED_PrintString(0, 0, message1, &font16x16,OLED_COLOR_NORMAL);
 800410c:	2300      	movs	r3, #0
 800410e:	9300      	str	r3, [sp, #0]
 8004110:	4b2c      	ldr	r3, [pc, #176]	@ (80041c4 <Determine_black_box+0x214>)
 8004112:	4a2a      	ldr	r2, [pc, #168]	@ (80041bc <Determine_black_box+0x20c>)
 8004114:	2100      	movs	r1, #0
 8004116:	2000      	movs	r0, #0
 8004118:	f001 ff21 	bl	8005f5e <OLED_PrintString>
			OLED_ShowFrame();
 800411c:	f001 fcbe 	bl	8005a9c <OLED_ShowFrame>
		if (BigRtest() == 1) {
 8004120:	e03a      	b.n	8004198 <Determine_black_box+0x1e8>
		} else if (BigRtest() == 0) {
 8004122:	f000 f8ad 	bl	8004280 <BigRtest>
 8004126:	4603      	mov	r3, r0
 8004128:	2b00      	cmp	r3, #0
 800412a:	d105      	bne.n	8004138 <Determine_black_box+0x188>
			black_box.detected_type = RC;
 800412c:	4b22      	ldr	r3, [pc, #136]	@ (80041b8 <Determine_black_box+0x208>)
 800412e:	2208      	movs	r2, #8
 8004130:	701a      	strb	r2, [r3, #0]
			Analyze_ADC_RC_TEST();
 8004132:	f000 f985 	bl	8004440 <Analyze_ADC_RC_TEST>
		if (BigRtest() == 1) {
 8004136:	e02f      	b.n	8004198 <Determine_black_box+0x1e8>
		} else {
			sprintf(msg, "NULL");
 8004138:	4923      	ldr	r1, [pc, #140]	@ (80041c8 <Determine_black_box+0x218>)
 800413a:	4824      	ldr	r0, [pc, #144]	@ (80041cc <Determine_black_box+0x21c>)
 800413c:	f007 f9c2 	bl	800b4c4 <siprintf>
			OLED_NewFrame();
 8004140:	f001 fca0 	bl	8005a84 <OLED_NewFrame>
			OLED_PrintString(0, 0, msg, &font16x16,OLED_COLOR_NORMAL);
 8004144:	2300      	movs	r3, #0
 8004146:	9300      	str	r3, [sp, #0]
 8004148:	4b1e      	ldr	r3, [pc, #120]	@ (80041c4 <Determine_black_box+0x214>)
 800414a:	4a20      	ldr	r2, [pc, #128]	@ (80041cc <Determine_black_box+0x21c>)
 800414c:	2100      	movs	r1, #0
 800414e:	2000      	movs	r0, #0
 8004150:	f001 ff05 	bl	8005f5e <OLED_PrintString>
			OLED_ShowFrame();
 8004154:	f001 fca2 	bl	8005a9c <OLED_ShowFrame>
		if (BigRtest() == 1) {
 8004158:	e01e      	b.n	8004198 <Determine_black_box+0x1e8>
		}

	} else if (v_steady > v_initial) {
 800415a:	ed97 7a05 	vldr	s14, [r7, #20]
 800415e:	edd7 7a08 	vldr	s15, [r7, #32]
 8004162:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800416a:	dd05      	ble.n	8004178 <Determine_black_box+0x1c8>
		black_box.detected_type = RC;
 800416c:	4b12      	ldr	r3, [pc, #72]	@ (80041b8 <Determine_black_box+0x208>)
 800416e:	2208      	movs	r2, #8
 8004170:	701a      	strb	r2, [r3, #0]
		Analyze_ADC_RC_TEST();
 8004172:	f000 f965 	bl	8004440 <Analyze_ADC_RC_TEST>
	} else if (v_steady < v_initial) {
		black_box.detected_type = RL;
		Analyze_ADC_RL_TEST();
	}
}
 8004176:	e00f      	b.n	8004198 <Determine_black_box+0x1e8>
	} else if (v_steady < v_initial) {
 8004178:	ed97 7a05 	vldr	s14, [r7, #20]
 800417c:	edd7 7a08 	vldr	s15, [r7, #32]
 8004180:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004188:	d400      	bmi.n	800418c <Determine_black_box+0x1dc>
}
 800418a:	e005      	b.n	8004198 <Determine_black_box+0x1e8>
		black_box.detected_type = RL;
 800418c:	4b0a      	ldr	r3, [pc, #40]	@ (80041b8 <Determine_black_box+0x208>)
 800418e:	2209      	movs	r2, #9
 8004190:	701a      	strb	r2, [r3, #0]
		Analyze_ADC_RL_TEST();
 8004192:	f000 fc19 	bl	80049c8 <Analyze_ADC_RL_TEST>
}
 8004196:	e7ff      	b.n	8004198 <Determine_black_box+0x1e8>
 8004198:	bf00      	nop
 800419a:	372c      	adds	r7, #44	@ 0x2c
 800419c:	46bd      	mov	sp, r7
 800419e:	bd90      	pop	{r4, r7, pc}
 80041a0:	9999999a 	.word	0x9999999a
 80041a4:	3fb99999 	.word	0x3fb99999
 80041a8:	20000338 	.word	0x20000338
 80041ac:	40533333 	.word	0x40533333
 80041b0:	457ff000 	.word	0x457ff000
 80041b4:	3d4ccccd 	.word	0x3d4ccccd
 80041b8:	20000300 	.word	0x20000300
 80041bc:	20007aa4 	.word	0x20007aa4
 80041c0:	0800e938 	.word	0x0800e938
 80041c4:	08010798 	.word	0x08010798
 80041c8:	0800e90c 	.word	0x0800e90c
 80041cc:	20007ba4 	.word	0x20007ba4

080041d0 <Sample_PA1_Average>:
// 分析ADC数据
//
float Sample_PA1_Average(void) {
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0

	memset(adc_buffer2, 0, sizeof(adc_buffer2));
 80041d6:	2228      	movs	r2, #40	@ 0x28
 80041d8:	2100      	movs	r1, #0
 80041da:	4823      	ldr	r0, [pc, #140]	@ (8004268 <Sample_PA1_Average+0x98>)
 80041dc:	f007 f9e7 	bl	800b5ae <memset>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_buffer2, BUFFER2_SIZE);
 80041e0:	2214      	movs	r2, #20
 80041e2:	4921      	ldr	r1, [pc, #132]	@ (8004268 <Sample_PA1_Average+0x98>)
 80041e4:	4821      	ldr	r0, [pc, #132]	@ (800426c <Sample_PA1_Average+0x9c>)
 80041e6:	f002 fcdf 	bl	8006ba8 <HAL_ADC_Start_DMA>
	measurement_done = 0;
 80041ea:	4b21      	ldr	r3, [pc, #132]	@ (8004270 <Sample_PA1_Average+0xa0>)
 80041ec:	2200      	movs	r2, #0
 80041ee:	701a      	strb	r2, [r3, #0]
	while (!measurement_done)
 80041f0:	bf00      	nop
 80041f2:	4b1f      	ldr	r3, [pc, #124]	@ (8004270 <Sample_PA1_Average+0xa0>)
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d0fa      	beq.n	80041f2 <Sample_PA1_Average+0x22>
		;
	HAL_ADC_Stop_DMA(&hadc1);
 80041fc:	481b      	ldr	r0, [pc, #108]	@ (800426c <Sample_PA1_Average+0x9c>)
 80041fe:	f002 fdc7 	bl	8006d90 <HAL_ADC_Stop_DMA>
	// 3. 采样 20 次并计算平均值
	float sum = 0.0f;
 8004202:	f04f 0300 	mov.w	r3, #0
 8004206:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < BUFFER2_SIZE; i++) {
 8004208:	2300      	movs	r3, #0
 800420a:	60bb      	str	r3, [r7, #8]
 800420c:	e01c      	b.n	8004248 <Sample_PA1_Average+0x78>
		float voltage = (adc_buffer2[i] * VREF) / 4095.0f;
 800420e:	4a16      	ldr	r2, [pc, #88]	@ (8004268 <Sample_PA1_Average+0x98>)
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004216:	ee07 3a90 	vmov	s15, r3
 800421a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800421e:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8004274 <Sample_PA1_Average+0xa4>
 8004222:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004226:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8004278 <Sample_PA1_Average+0xa8>
 800422a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800422e:	edc7 7a01 	vstr	s15, [r7, #4]
		sum = sum + voltage;
 8004232:	ed97 7a03 	vldr	s14, [r7, #12]
 8004236:	edd7 7a01 	vldr	s15, [r7, #4]
 800423a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800423e:	edc7 7a03 	vstr	s15, [r7, #12]
	for (int i = 0; i < BUFFER2_SIZE; i++) {
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	3301      	adds	r3, #1
 8004246:	60bb      	str	r3, [r7, #8]
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	2b13      	cmp	r3, #19
 800424c:	dddf      	ble.n	800420e <Sample_PA1_Average+0x3e>
	}
	// 5. 返回平均值
	return sum / BUFFER2_SIZE;
 800424e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004252:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8004256:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800425a:	eef0 7a66 	vmov.f32	s15, s13
}
 800425e:	eeb0 0a67 	vmov.f32	s0, s15
 8004262:	3710      	adds	r7, #16
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}
 8004268:	20001338 	.word	0x20001338
 800426c:	200001f4 	.word	0x200001f4
 8004270:	20007a70 	.word	0x20007a70
 8004274:	40533333 	.word	0x40533333
 8004278:	457ff000 	.word	0x457ff000
 800427c:	00000000 	.word	0x00000000

08004280 <BigRtest>:
//
int BigRtest(void) {
 8004280:	b590      	push	{r4, r7, lr}
 8004282:	b08b      	sub	sp, #44	@ 0x2c
 8004284:	af02      	add	r7, sp, #8
	memset(adc_buffer, 0, sizeof(adc_buffer));
 8004286:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800428a:	2100      	movs	r1, #0
 800428c:	4862      	ldr	r0, [pc, #392]	@ (8004418 <BigRtest+0x198>)
 800428e:	f007 f98e 	bl	800b5ae <memset>
	float v_initial;
	float initial_index;
	float v_end;
	GPIO_Set_Low(GPIOA, GPIO_PIN_4);
 8004292:	2110      	movs	r1, #16
 8004294:	4861      	ldr	r0, [pc, #388]	@ (800441c <BigRtest+0x19c>)
 8004296:	f7fd fcb7 	bl	8001c08 <GPIO_Set_Low>
	GPIO_Set_Low(GPIOA, GPIO_PIN_7);
 800429a:	2180      	movs	r1, #128	@ 0x80
 800429c:	485f      	ldr	r0, [pc, #380]	@ (800441c <BigRtest+0x19c>)
 800429e:	f7fd fcb3 	bl	8001c08 <GPIO_Set_Low>
	GPIO_Set_HighZ(GPIOA, GPIO_PIN_0);
 80042a2:	2101      	movs	r1, #1
 80042a4:	485d      	ldr	r0, [pc, #372]	@ (800441c <BigRtest+0x19c>)
 80042a6:	f7fd fc65 	bl	8001b74 <GPIO_Set_HighZ>
	DMA_Measure();
 80042aa:	f7ff fcdd 	bl	8003c68 <DMA_Measure>
	for (int i = 0; i < BUFFER_SIZE; i++) {
 80042ae:	2300      	movs	r3, #0
 80042b0:	61bb      	str	r3, [r7, #24]
 80042b2:	e029      	b.n	8004308 <BigRtest+0x88>
		float voltage = (adc_buffer[i] * VREF) / 4095.0f;
 80042b4:	4a58      	ldr	r2, [pc, #352]	@ (8004418 <BigRtest+0x198>)
 80042b6:	69bb      	ldr	r3, [r7, #24]
 80042b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80042bc:	ee07 3a90 	vmov	s15, r3
 80042c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042c4:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8004420 <BigRtest+0x1a0>
 80042c8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80042cc:	eddf 6a55 	vldr	s13, [pc, #340]	@ 8004424 <BigRtest+0x1a4>
 80042d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80042d4:	edc7 7a05 	vstr	s15, [r7, #20]
		if (voltage > 0.4) {
 80042d8:	6978      	ldr	r0, [r7, #20]
 80042da:	f7fc f93d 	bl	8000558 <__aeabi_f2d>
 80042de:	a34a      	add	r3, pc, #296	@ (adr r3, 8004408 <BigRtest+0x188>)
 80042e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e4:	f7fc fc20 	bl	8000b28 <__aeabi_dcmpgt>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d009      	beq.n	8004302 <BigRtest+0x82>
			initial_index = i;
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	ee07 3a90 	vmov	s15, r3
 80042f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042f8:	edc7 7a04 	vstr	s15, [r7, #16]
			v_initial = voltage;
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	61fb      	str	r3, [r7, #28]
			break;
 8004300:	e006      	b.n	8004310 <BigRtest+0x90>
	for (int i = 0; i < BUFFER_SIZE; i++) {
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	3301      	adds	r3, #1
 8004306:	61bb      	str	r3, [r7, #24]
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800430e:	dbd1      	blt.n	80042b4 <BigRtest+0x34>
		}
	}
	v_end = (adc_buffer[BUFFER_SIZE - 1] * VREF / 4095.0f);
 8004310:	4b41      	ldr	r3, [pc, #260]	@ (8004418 <BigRtest+0x198>)
 8004312:	f8b3 3ffe 	ldrh.w	r3, [r3, #4094]	@ 0xffe
 8004316:	ee07 3a90 	vmov	s15, r3
 800431a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800431e:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8004420 <BigRtest+0x1a0>
 8004322:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004326:	eddf 6a3f 	vldr	s13, [pc, #252]	@ 8004424 <BigRtest+0x1a4>
 800432a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800432e:	edc7 7a03 	vstr	s15, [r7, #12]
	if (fabsf(VREF - v_initial) <= 0.1) {
 8004332:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8004420 <BigRtest+0x1a0>
 8004336:	edd7 7a07 	vldr	s15, [r7, #28]
 800433a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800433e:	eef0 7ae7 	vabs.f32	s15, s15
 8004342:	ee17 0a90 	vmov	r0, s15
 8004346:	f7fc f907 	bl	8000558 <__aeabi_f2d>
 800434a:	a331      	add	r3, pc, #196	@ (adr r3, 8004410 <BigRtest+0x190>)
 800434c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004350:	f7fc fbd6 	bl	8000b00 <__aeabi_dcmple>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d001      	beq.n	800435e <BigRtest+0xde>
		//sprintf(msg, "no load");
		return 2;
 800435a:	2302      	movs	r3, #2
 800435c:	e04f      	b.n	80043fe <BigRtest+0x17e>
	}
	float chazhi = fabsf(v_end - v_initial);
 800435e:	ed97 7a03 	vldr	s14, [r7, #12]
 8004362:	edd7 7a07 	vldr	s15, [r7, #28]
 8004366:	ee77 7a67 	vsub.f32	s15, s14, s15
 800436a:	eef0 7ae7 	vabs.f32	s15, s15
 800436e:	edc7 7a02 	vstr	s15, [r7, #8]
	if (chazhi < 0.1) {
 8004372:	68b8      	ldr	r0, [r7, #8]
 8004374:	f7fc f8f0 	bl	8000558 <__aeabi_f2d>
 8004378:	a325      	add	r3, pc, #148	@ (adr r3, 8004410 <BigRtest+0x190>)
 800437a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800437e:	f7fc fbb5 	bl	8000aec <__aeabi_dcmplt>
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d039      	beq.n	80043fc <BigRtest+0x17c>
		//black_box.detected_type=RESISTOR;
		float v1=calculate_average(adc_buffer);
 8004388:	4823      	ldr	r0, [pc, #140]	@ (8004418 <BigRtest+0x198>)
 800438a:	f7ff fba1 	bl	8003ad0 <calculate_average>
 800438e:	ed87 0a01 	vstr	s0, [r7, #4]
		float R=5100/(VREF-v1)*v1;
 8004392:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8004420 <BigRtest+0x1a0>
 8004396:	edd7 7a01 	vldr	s15, [r7, #4]
 800439a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800439e:	eddf 6a22 	vldr	s13, [pc, #136]	@ 8004428 <BigRtest+0x1a8>
 80043a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043a6:	ed97 7a01 	vldr	s14, [r7, #4]
 80043aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043ae:	edc7 7a00 	vstr	s15, [r7]
		strcpy(message1, "Pure Resistor");
 80043b2:	4a1e      	ldr	r2, [pc, #120]	@ (800442c <BigRtest+0x1ac>)
 80043b4:	4b1e      	ldr	r3, [pc, #120]	@ (8004430 <BigRtest+0x1b0>)
 80043b6:	4614      	mov	r4, r2
 80043b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80043ba:	c407      	stmia	r4!, {r0, r1, r2}
 80043bc:	8023      	strh	r3, [r4, #0]
		sprintf(message2, " R=%.2fΩ", R);
 80043be:	6838      	ldr	r0, [r7, #0]
 80043c0:	f7fc f8ca 	bl	8000558 <__aeabi_f2d>
 80043c4:	4602      	mov	r2, r0
 80043c6:	460b      	mov	r3, r1
 80043c8:	491a      	ldr	r1, [pc, #104]	@ (8004434 <BigRtest+0x1b4>)
 80043ca:	481b      	ldr	r0, [pc, #108]	@ (8004438 <BigRtest+0x1b8>)
 80043cc:	f007 f87a 	bl	800b4c4 <siprintf>
		OLED_NewFrame();
 80043d0:	f001 fb58 	bl	8005a84 <OLED_NewFrame>
		OLED_PrintString(0, 0, message1, &font12x12,OLED_COLOR_NORMAL);
 80043d4:	2300      	movs	r3, #0
 80043d6:	9300      	str	r3, [sp, #0]
 80043d8:	4b18      	ldr	r3, [pc, #96]	@ (800443c <BigRtest+0x1bc>)
 80043da:	4a14      	ldr	r2, [pc, #80]	@ (800442c <BigRtest+0x1ac>)
 80043dc:	2100      	movs	r1, #0
 80043de:	2000      	movs	r0, #0
 80043e0:	f001 fdbd 	bl	8005f5e <OLED_PrintString>
		OLED_PrintString(0, 16, message2, &font12x12,OLED_COLOR_NORMAL);
 80043e4:	2300      	movs	r3, #0
 80043e6:	9300      	str	r3, [sp, #0]
 80043e8:	4b14      	ldr	r3, [pc, #80]	@ (800443c <BigRtest+0x1bc>)
 80043ea:	4a13      	ldr	r2, [pc, #76]	@ (8004438 <BigRtest+0x1b8>)
 80043ec:	2110      	movs	r1, #16
 80043ee:	2000      	movs	r0, #0
 80043f0:	f001 fdb5 	bl	8005f5e <OLED_PrintString>
		OLED_ShowFrame();
 80043f4:	f001 fb52 	bl	8005a9c <OLED_ShowFrame>
		return 1;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e000      	b.n	80043fe <BigRtest+0x17e>
	} else {
		//black_box.detected_type=RC;
		return 0;
 80043fc:	2300      	movs	r3, #0
	}

}
 80043fe:	4618      	mov	r0, r3
 8004400:	3724      	adds	r7, #36	@ 0x24
 8004402:	46bd      	mov	sp, r7
 8004404:	bd90      	pop	{r4, r7, pc}
 8004406:	bf00      	nop
 8004408:	9999999a 	.word	0x9999999a
 800440c:	3fd99999 	.word	0x3fd99999
 8004410:	9999999a 	.word	0x9999999a
 8004414:	3fb99999 	.word	0x3fb99999
 8004418:	20000338 	.word	0x20000338
 800441c:	40020000 	.word	0x40020000
 8004420:	40533333 	.word	0x40533333
 8004424:	457ff000 	.word	0x457ff000
 8004428:	459f6000 	.word	0x459f6000
 800442c:	20007aa4 	.word	0x20007aa4
 8004430:	0800e938 	.word	0x0800e938
 8004434:	0800e914 	.word	0x0800e914
 8004438:	20007b24 	.word	0x20007b24
 800443c:	08010984 	.word	0x08010984

08004440 <Analyze_ADC_RC_TEST>:
//RC换用电阻5.1k
void Analyze_ADC_RC_TEST() {
 8004440:	b5b0      	push	{r4, r5, r7, lr}
 8004442:	b098      	sub	sp, #96	@ 0x60
 8004444:	af02      	add	r7, sp, #8
	//第二次ADC采样
	GPIO_Set_Low(GPIOA, GPIO_PIN_4);
 8004446:	2110      	movs	r1, #16
 8004448:	48c3      	ldr	r0, [pc, #780]	@ (8004758 <Analyze_ADC_RC_TEST+0x318>)
 800444a:	f7fd fbdd 	bl	8001c08 <GPIO_Set_Low>
	GPIO_Set_Low(GPIOA, GPIO_PIN_7);
 800444e:	2180      	movs	r1, #128	@ 0x80
 8004450:	48c1      	ldr	r0, [pc, #772]	@ (8004758 <Analyze_ADC_RC_TEST+0x318>)
 8004452:	f7fd fbd9 	bl	8001c08 <GPIO_Set_Low>
	GPIO_Set_HighZ(GPIOA, GPIO_PIN_0);
 8004456:	2101      	movs	r1, #1
 8004458:	48bf      	ldr	r0, [pc, #764]	@ (8004758 <Analyze_ADC_RC_TEST+0x318>)
 800445a:	f7fd fb8b 	bl	8001b74 <GPIO_Set_HighZ>
	DMA_Measure();
 800445e:	f7ff fc03 	bl	8003c68 <DMA_Measure>
	float start_index;
	float MAX = 0;
 8004462:	f04f 0300 	mov.w	r3, #0
 8004466:	657b      	str	r3, [r7, #84]	@ 0x54
	float r_black;
	float c_black;
	float v_initial_RCS;
	float v_initial_RCP;
	float v_end = adc_buffer[BUFFER_SIZE - 1] * VREF / 4095.0f;
 8004468:	4bbc      	ldr	r3, [pc, #752]	@ (800475c <Analyze_ADC_RC_TEST+0x31c>)
 800446a:	f8b3 3ffe 	ldrh.w	r3, [r3, #4094]	@ 0xffe
 800446e:	ee07 3a90 	vmov	s15, r3
 8004472:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004476:	ed9f 7aba 	vldr	s14, [pc, #744]	@ 8004760 <Analyze_ADC_RC_TEST+0x320>
 800447a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800447e:	eddf 6ab9 	vldr	s13, [pc, #740]	@ 8004764 <Analyze_ADC_RC_TEST+0x324>
 8004482:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004486:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
	//float v_start;
	for (int i = 0; i < BUFFER_SIZE; i++) {
 800448a:	2300      	movs	r3, #0
 800448c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800448e:	e029      	b.n	80044e4 <Analyze_ADC_RC_TEST+0xa4>
		float voltage = (adc_buffer[i] * VREF) / 4095.0f;
 8004490:	4ab2      	ldr	r2, [pc, #712]	@ (800475c <Analyze_ADC_RC_TEST+0x31c>)
 8004492:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004494:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004498:	ee07 3a90 	vmov	s15, r3
 800449c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044a0:	ed9f 7aaf 	vldr	s14, [pc, #700]	@ 8004760 <Analyze_ADC_RC_TEST+0x320>
 80044a4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80044a8:	eddf 6aae 	vldr	s13, [pc, #696]	@ 8004764 <Analyze_ADC_RC_TEST+0x324>
 80044ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80044b0:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		if (voltage > 0.4) {
 80044b4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80044b6:	f7fc f84f 	bl	8000558 <__aeabi_f2d>
 80044ba:	a3a1      	add	r3, pc, #644	@ (adr r3, 8004740 <Analyze_ADC_RC_TEST+0x300>)
 80044bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c0:	f7fc fb32 	bl	8000b28 <__aeabi_dcmpgt>
 80044c4:	4603      	mov	r3, r0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d009      	beq.n	80044de <Analyze_ADC_RC_TEST+0x9e>
			start_index = i;
 80044ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044cc:	ee07 3a90 	vmov	s15, r3
 80044d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044d4:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
			v_initial_RCS = voltage;
 80044d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044da:	653b      	str	r3, [r7, #80]	@ 0x50
			break;
 80044dc:	e006      	b.n	80044ec <Analyze_ADC_RC_TEST+0xac>
	for (int i = 0; i < BUFFER_SIZE; i++) {
 80044de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044e0:	3301      	adds	r3, #1
 80044e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044ea:	dbd1      	blt.n	8004490 <Analyze_ADC_RC_TEST+0x50>
		}
	}
	for (int i = 0; i < BUFFER_SIZE; i++) {
 80044ec:	2300      	movs	r3, #0
 80044ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044f0:	e029      	b.n	8004546 <Analyze_ADC_RC_TEST+0x106>
		float voltage = (adc_buffer[i] * VREF) / 4095.0f;
 80044f2:	4a9a      	ldr	r2, [pc, #616]	@ (800475c <Analyze_ADC_RC_TEST+0x31c>)
 80044f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80044f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80044fa:	ee07 3a90 	vmov	s15, r3
 80044fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004502:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 8004760 <Analyze_ADC_RC_TEST+0x320>
 8004506:	ee27 7a87 	vmul.f32	s14, s15, s14
 800450a:	eddf 6a96 	vldr	s13, [pc, #600]	@ 8004764 <Analyze_ADC_RC_TEST+0x324>
 800450e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004512:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		if (voltage > 0.1) {
 8004516:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004518:	f7fc f81e 	bl	8000558 <__aeabi_f2d>
 800451c:	a38a      	add	r3, pc, #552	@ (adr r3, 8004748 <Analyze_ADC_RC_TEST+0x308>)
 800451e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004522:	f7fc fb01 	bl	8000b28 <__aeabi_dcmpgt>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d009      	beq.n	8004540 <Analyze_ADC_RC_TEST+0x100>
			start_index = i;
 800452c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800452e:	ee07 3a90 	vmov	s15, r3
 8004532:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004536:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
			v_initial_RCP = voltage;
 800453a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800453c:	633b      	str	r3, [r7, #48]	@ 0x30
			break;
 800453e:	e006      	b.n	800454e <Analyze_ADC_RC_TEST+0x10e>
	for (int i = 0; i < BUFFER_SIZE; i++) {
 8004540:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004542:	3301      	adds	r3, #1
 8004544:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004546:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004548:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800454c:	dbd1      	blt.n	80044f2 <Analyze_ADC_RC_TEST+0xb2>
		}
	}
	//CESHI
	float index;
	for (int i = 0; i < BUFFER_SIZE; i++) {
 800454e:	2300      	movs	r3, #0
 8004550:	647b      	str	r3, [r7, #68]	@ 0x44
 8004552:	e026      	b.n	80045a2 <Analyze_ADC_RC_TEST+0x162>
		float voltage = (adc_buffer[i] * VREF) / 4095.0f;
 8004554:	4a81      	ldr	r2, [pc, #516]	@ (800475c <Analyze_ADC_RC_TEST+0x31c>)
 8004556:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004558:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800455c:	ee07 3a90 	vmov	s15, r3
 8004560:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004564:	ed9f 7a7e 	vldr	s14, [pc, #504]	@ 8004760 <Analyze_ADC_RC_TEST+0x320>
 8004568:	ee27 7a87 	vmul.f32	s14, s15, s14
 800456c:	eddf 6a7d 	vldr	s13, [pc, #500]	@ 8004764 <Analyze_ADC_RC_TEST+0x324>
 8004570:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004574:	edc7 7a02 	vstr	s15, [r7, #8]
		if (voltage > MAX) {
 8004578:	ed97 7a02 	vldr	s14, [r7, #8]
 800457c:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8004580:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004588:	dd08      	ble.n	800459c <Analyze_ADC_RC_TEST+0x15c>
			index = i;
 800458a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800458c:	ee07 3a90 	vmov	s15, r3
 8004590:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004594:	edc7 7a01 	vstr	s15, [r7, #4]
			MAX = voltage;
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	657b      	str	r3, [r7, #84]	@ 0x54
	for (int i = 0; i < BUFFER_SIZE; i++) {
 800459c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800459e:	3301      	adds	r3, #1
 80045a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80045a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045a8:	dbd4      	blt.n	8004554 <Analyze_ADC_RC_TEST+0x114>
			//break;
		}
	}
	if (v_initial_RCS + VPA1 >= VREF) {
 80045aa:	4b6f      	ldr	r3, [pc, #444]	@ (8004768 <Analyze_ADC_RC_TEST+0x328>)
 80045ac:	ed93 7a00 	vldr	s14, [r3]
 80045b0:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80045b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045b8:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 8004760 <Analyze_ADC_RC_TEST+0x320>
 80045bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045c4:	db03      	blt.n	80045ce <Analyze_ADC_RC_TEST+0x18e>
		black_box.detected_type = RC_SERIES;
 80045c6:	4b69      	ldr	r3, [pc, #420]	@ (800476c <Analyze_ADC_RC_TEST+0x32c>)
 80045c8:	2203      	movs	r2, #3
 80045ca:	701a      	strb	r2, [r3, #0]
 80045cc:	e002      	b.n	80045d4 <Analyze_ADC_RC_TEST+0x194>

	} else {
		black_box.detected_type = RC_PARALLEL;
 80045ce:	4b67      	ldr	r3, [pc, #412]	@ (800476c <Analyze_ADC_RC_TEST+0x32c>)
 80045d0:	2204      	movs	r2, #4
 80045d2:	701a      	strb	r2, [r3, #0]
	}
	if (evaluate_steady_state_fluctuation()) {
 80045d4:	f000 fd90 	bl	80050f8 <evaluate_steady_state_fluctuation>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	f000 80d6 	beq.w	800478c <Analyze_ADC_RC_TEST+0x34c>
		float tau = Find_tau();
 80045e0:	f000 ff5a 	bl	8005498 <Find_tau>
 80045e4:	ed87 0a03 	vstr	s0, [r7, #12]
		if (Find_tau()) {
 80045e8:	f000 ff56 	bl	8005498 <Find_tau>
 80045ec:	eef0 7a40 	vmov.f32	s15, s0
 80045f0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80045f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045f8:	f000 809a 	beq.w	8004730 <Analyze_ADC_RC_TEST+0x2f0>
			//计算tau，计算RC
			if (black_box.detected_type == RC_SERIES) {
 80045fc:	4b5b      	ldr	r3, [pc, #364]	@ (800476c <Analyze_ADC_RC_TEST+0x32c>)
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	2b03      	cmp	r3, #3
 8004602:	d145      	bne.n	8004690 <Analyze_ADC_RC_TEST+0x250>
				r_black = (v_initial_RCS * R_KNOWN2) / (VREF - v_initial_RCS);
 8004604:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8004608:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8004770 <Analyze_ADC_RC_TEST+0x330>
 800460c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8004610:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 8004760 <Analyze_ADC_RC_TEST+0x320>
 8004614:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8004618:	ee37 7a67 	vsub.f32	s14, s14, s15
 800461c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004620:	edc7 7a05 	vstr	s15, [r7, #20]
				c_black = tau / (r_black + R_KNOWN2);
 8004624:	edd7 7a05 	vldr	s15, [r7, #20]
 8004628:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 8004770 <Analyze_ADC_RC_TEST+0x330>
 800462c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004630:	edd7 6a03 	vldr	s13, [r7, #12]
 8004634:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004638:	edc7 7a04 	vstr	s15, [r7, #16]
				sprintf(message1, "R=%.2f C=%.4fuF", r_black,c_black * 1e6);
 800463c:	6978      	ldr	r0, [r7, #20]
 800463e:	f7fb ff8b 	bl	8000558 <__aeabi_f2d>
 8004642:	4604      	mov	r4, r0
 8004644:	460d      	mov	r5, r1
 8004646:	6938      	ldr	r0, [r7, #16]
 8004648:	f7fb ff86 	bl	8000558 <__aeabi_f2d>
 800464c:	a340      	add	r3, pc, #256	@ (adr r3, 8004750 <Analyze_ADC_RC_TEST+0x310>)
 800464e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004652:	f7fb ffd9 	bl	8000608 <__aeabi_dmul>
 8004656:	4602      	mov	r2, r0
 8004658:	460b      	mov	r3, r1
 800465a:	e9cd 2300 	strd	r2, r3, [sp]
 800465e:	4622      	mov	r2, r4
 8004660:	462b      	mov	r3, r5
 8004662:	4944      	ldr	r1, [pc, #272]	@ (8004774 <Analyze_ADC_RC_TEST+0x334>)
 8004664:	4844      	ldr	r0, [pc, #272]	@ (8004778 <Analyze_ADC_RC_TEST+0x338>)
 8004666:	f006 ff2d 	bl	800b4c4 <siprintf>
				OLED_NewFrame();
 800466a:	f001 fa0b 	bl	8005a84 <OLED_NewFrame>
				OLED_DrawImage(0, 0, &RCCHUANLIANImg, OLED_COLOR_NORMAL);
 800466e:	2300      	movs	r3, #0
 8004670:	4a42      	ldr	r2, [pc, #264]	@ (800477c <Analyze_ADC_RC_TEST+0x33c>)
 8004672:	2100      	movs	r1, #0
 8004674:	2000      	movs	r0, #0
 8004676:	f001 fbd2 	bl	8005e1e <OLED_DrawImage>
				OLED_PrintASCIIString(0, 48, message1, &afont8x6,OLED_COLOR_NORMAL);
 800467a:	2300      	movs	r3, #0
 800467c:	9300      	str	r3, [sp, #0]
 800467e:	4b40      	ldr	r3, [pc, #256]	@ (8004780 <Analyze_ADC_RC_TEST+0x340>)
 8004680:	4a3d      	ldr	r2, [pc, #244]	@ (8004778 <Analyze_ADC_RC_TEST+0x338>)
 8004682:	2130      	movs	r1, #48	@ 0x30
 8004684:	2000      	movs	r0, #0
 8004686:	f001 fc19 	bl	8005ebc <OLED_PrintASCIIString>
				OLED_ShowFrame();
 800468a:	f001 fa07 	bl	8005a9c <OLED_ShowFrame>
			OLED_DrawImage(0, 0, &RCBINGLIANImg, OLED_COLOR_NORMAL);
			OLED_PrintASCIIString(0, 48, message1, &afont8x6,OLED_COLOR_NORMAL);
			OLED_ShowFrame();
		}
	}
}
 800468e:	e17a      	b.n	8004986 <Analyze_ADC_RC_TEST+0x546>
				r_black = fabsf(R_KNOWN2 * v_end / (VREF - v_end));
 8004690:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8004694:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8004770 <Analyze_ADC_RC_TEST+0x330>
 8004698:	ee67 6a87 	vmul.f32	s13, s15, s14
 800469c:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8004760 <Analyze_ADC_RC_TEST+0x320>
 80046a0:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80046a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80046a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046ac:	eef0 7ae7 	vabs.f32	s15, s15
 80046b0:	edc7 7a05 	vstr	s15, [r7, #20]
				c_black = tau * (R_KNOWN2 + r_black) / (r_black * R_KNOWN2);
 80046b4:	edd7 7a05 	vldr	s15, [r7, #20]
 80046b8:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8004770 <Analyze_ADC_RC_TEST+0x330>
 80046bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80046c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80046c4:	ee67 6a27 	vmul.f32	s13, s14, s15
 80046c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80046cc:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8004770 <Analyze_ADC_RC_TEST+0x330>
 80046d0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80046d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046d8:	edc7 7a04 	vstr	s15, [r7, #16]
				sprintf(message1, "R=%.2f C=%.4fuF", r_black,c_black * 1e6);
 80046dc:	6978      	ldr	r0, [r7, #20]
 80046de:	f7fb ff3b 	bl	8000558 <__aeabi_f2d>
 80046e2:	4604      	mov	r4, r0
 80046e4:	460d      	mov	r5, r1
 80046e6:	6938      	ldr	r0, [r7, #16]
 80046e8:	f7fb ff36 	bl	8000558 <__aeabi_f2d>
 80046ec:	a318      	add	r3, pc, #96	@ (adr r3, 8004750 <Analyze_ADC_RC_TEST+0x310>)
 80046ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046f2:	f7fb ff89 	bl	8000608 <__aeabi_dmul>
 80046f6:	4602      	mov	r2, r0
 80046f8:	460b      	mov	r3, r1
 80046fa:	e9cd 2300 	strd	r2, r3, [sp]
 80046fe:	4622      	mov	r2, r4
 8004700:	462b      	mov	r3, r5
 8004702:	491c      	ldr	r1, [pc, #112]	@ (8004774 <Analyze_ADC_RC_TEST+0x334>)
 8004704:	481c      	ldr	r0, [pc, #112]	@ (8004778 <Analyze_ADC_RC_TEST+0x338>)
 8004706:	f006 fedd 	bl	800b4c4 <siprintf>
				OLED_NewFrame();
 800470a:	f001 f9bb 	bl	8005a84 <OLED_NewFrame>
				OLED_DrawImage(0, 0, &RCBINGLIANImg, OLED_COLOR_NORMAL);
 800470e:	2300      	movs	r3, #0
 8004710:	4a1c      	ldr	r2, [pc, #112]	@ (8004784 <Analyze_ADC_RC_TEST+0x344>)
 8004712:	2100      	movs	r1, #0
 8004714:	2000      	movs	r0, #0
 8004716:	f001 fb82 	bl	8005e1e <OLED_DrawImage>
				OLED_PrintASCIIString(0, 48, message1, &afont8x6,OLED_COLOR_NORMAL);
 800471a:	2300      	movs	r3, #0
 800471c:	9300      	str	r3, [sp, #0]
 800471e:	4b18      	ldr	r3, [pc, #96]	@ (8004780 <Analyze_ADC_RC_TEST+0x340>)
 8004720:	4a15      	ldr	r2, [pc, #84]	@ (8004778 <Analyze_ADC_RC_TEST+0x338>)
 8004722:	2130      	movs	r1, #48	@ 0x30
 8004724:	2000      	movs	r0, #0
 8004726:	f001 fbc9 	bl	8005ebc <OLED_PrintASCIIString>
				OLED_ShowFrame();
 800472a:	f001 f9b7 	bl	8005a9c <OLED_ShowFrame>
}
 800472e:	e12a      	b.n	8004986 <Analyze_ADC_RC_TEST+0x546>
			sprintf(message1, "too small");
 8004730:	4915      	ldr	r1, [pc, #84]	@ (8004788 <Analyze_ADC_RC_TEST+0x348>)
 8004732:	4811      	ldr	r0, [pc, #68]	@ (8004778 <Analyze_ADC_RC_TEST+0x338>)
 8004734:	f006 fec6 	bl	800b4c4 <siprintf>
}
 8004738:	e125      	b.n	8004986 <Analyze_ADC_RC_TEST+0x546>
 800473a:	bf00      	nop
 800473c:	f3af 8000 	nop.w
 8004740:	9999999a 	.word	0x9999999a
 8004744:	3fd99999 	.word	0x3fd99999
 8004748:	9999999a 	.word	0x9999999a
 800474c:	3fb99999 	.word	0x3fb99999
 8004750:	00000000 	.word	0x00000000
 8004754:	412e8480 	.word	0x412e8480
 8004758:	40020000 	.word	0x40020000
 800475c:	20000338 	.word	0x20000338
 8004760:	40533333 	.word	0x40533333
 8004764:	457ff000 	.word	0x457ff000
 8004768:	20007a80 	.word	0x20007a80
 800476c:	20000300 	.word	0x20000300
 8004770:	459f6000 	.word	0x459f6000
 8004774:	0800e948 	.word	0x0800e948
 8004778:	20007aa4 	.word	0x20007aa4
 800477c:	0800f430 	.word	0x0800f430
 8004780:	0800ec30 	.word	0x0800ec30
 8004784:	0800f6b8 	.word	0x0800f6b8
 8004788:	0800e958 	.word	0x0800e958
		float v_target1 = (adc_buffer[800] * VREF) / 4095.0f;
 800478c:	4b82      	ldr	r3, [pc, #520]	@ (8004998 <Analyze_ADC_RC_TEST+0x558>)
 800478e:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	@ 0x640
 8004792:	ee07 3a90 	vmov	s15, r3
 8004796:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800479a:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800499c <Analyze_ADC_RC_TEST+0x55c>
 800479e:	ee27 7a87 	vmul.f32	s14, s15, s14
 80047a2:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 80049a0 <Analyze_ADC_RC_TEST+0x560>
 80047a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80047aa:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		int target1_index = 800;
 80047ae:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80047b2:	62bb      	str	r3, [r7, #40]	@ 0x28
		float v_target2 = (adc_buffer[1600] * VREF) / 4095.0f;
 80047b4:	4b78      	ldr	r3, [pc, #480]	@ (8004998 <Analyze_ADC_RC_TEST+0x558>)
 80047b6:	f8b3 3c80 	ldrh.w	r3, [r3, #3200]	@ 0xc80
 80047ba:	ee07 3a90 	vmov	s15, r3
 80047be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80047c2:	ed9f 7a76 	vldr	s14, [pc, #472]	@ 800499c <Analyze_ADC_RC_TEST+0x55c>
 80047c6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80047ca:	eddf 6a75 	vldr	s13, [pc, #468]	@ 80049a0 <Analyze_ADC_RC_TEST+0x560>
 80047ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80047d2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		int target2_index = 1600;
 80047d6:	f44f 63c8 	mov.w	r3, #1600	@ 0x640
 80047da:	623b      	str	r3, [r7, #32]
		float delta_t = (target2_index - target1_index) / (float) SAMPLE_RATE;
 80047dc:	6a3a      	ldr	r2, [r7, #32]
 80047de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	ee07 3a90 	vmov	s15, r3
 80047e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80047ea:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80049a4 <Analyze_ADC_RC_TEST+0x564>
 80047ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80047f2:	edc7 7a07 	vstr	s15, [r7, #28]
		float tau = delta_t / log((VPA1 - v_target1) / (VPA1 - v_target2));
 80047f6:	69f8      	ldr	r0, [r7, #28]
 80047f8:	f7fb feae 	bl	8000558 <__aeabi_f2d>
 80047fc:	4604      	mov	r4, r0
 80047fe:	460d      	mov	r5, r1
 8004800:	4b69      	ldr	r3, [pc, #420]	@ (80049a8 <Analyze_ADC_RC_TEST+0x568>)
 8004802:	ed93 7a00 	vldr	s14, [r3]
 8004806:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800480a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800480e:	4b66      	ldr	r3, [pc, #408]	@ (80049a8 <Analyze_ADC_RC_TEST+0x568>)
 8004810:	edd3 6a00 	vldr	s13, [r3]
 8004814:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004818:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800481c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004820:	ee16 0a90 	vmov	r0, s13
 8004824:	f7fb fe98 	bl	8000558 <__aeabi_f2d>
 8004828:	4602      	mov	r2, r0
 800482a:	460b      	mov	r3, r1
 800482c:	ec43 2b10 	vmov	d0, r2, r3
 8004830:	f008 ff8e 	bl	800d750 <log>
 8004834:	ec53 2b10 	vmov	r2, r3, d0
 8004838:	4620      	mov	r0, r4
 800483a:	4629      	mov	r1, r5
 800483c:	f7fc f80e 	bl	800085c <__aeabi_ddiv>
 8004840:	4602      	mov	r2, r0
 8004842:	460b      	mov	r3, r1
 8004844:	4610      	mov	r0, r2
 8004846:	4619      	mov	r1, r3
 8004848:	f7fc f9b6 	bl	8000bb8 <__aeabi_d2f>
 800484c:	4603      	mov	r3, r0
 800484e:	61bb      	str	r3, [r7, #24]
		if (black_box.detected_type == RC_SERIES) {
 8004850:	4b56      	ldr	r3, [pc, #344]	@ (80049ac <Analyze_ADC_RC_TEST+0x56c>)
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	2b03      	cmp	r3, #3
 8004856:	d145      	bne.n	80048e4 <Analyze_ADC_RC_TEST+0x4a4>
			r_black = (v_initial_RCS * R_KNOWN2) / (VREF - v_initial_RCS);
 8004858:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800485c:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 80049b0 <Analyze_ADC_RC_TEST+0x570>
 8004860:	ee67 6a87 	vmul.f32	s13, s15, s14
 8004864:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800499c <Analyze_ADC_RC_TEST+0x55c>
 8004868:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800486c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004870:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004874:	edc7 7a05 	vstr	s15, [r7, #20]
			c_black = tau / (r_black + R_KNOWN2);
 8004878:	edd7 7a05 	vldr	s15, [r7, #20]
 800487c:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 80049b0 <Analyze_ADC_RC_TEST+0x570>
 8004880:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004884:	edd7 6a06 	vldr	s13, [r7, #24]
 8004888:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800488c:	edc7 7a04 	vstr	s15, [r7, #16]
			sprintf(message1, "R=%.2f C=%.4fuF", r_black,c_black * 1e6);
 8004890:	6978      	ldr	r0, [r7, #20]
 8004892:	f7fb fe61 	bl	8000558 <__aeabi_f2d>
 8004896:	4604      	mov	r4, r0
 8004898:	460d      	mov	r5, r1
 800489a:	6938      	ldr	r0, [r7, #16]
 800489c:	f7fb fe5c 	bl	8000558 <__aeabi_f2d>
 80048a0:	a33b      	add	r3, pc, #236	@ (adr r3, 8004990 <Analyze_ADC_RC_TEST+0x550>)
 80048a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048a6:	f7fb feaf 	bl	8000608 <__aeabi_dmul>
 80048aa:	4602      	mov	r2, r0
 80048ac:	460b      	mov	r3, r1
 80048ae:	e9cd 2300 	strd	r2, r3, [sp]
 80048b2:	4622      	mov	r2, r4
 80048b4:	462b      	mov	r3, r5
 80048b6:	493f      	ldr	r1, [pc, #252]	@ (80049b4 <Analyze_ADC_RC_TEST+0x574>)
 80048b8:	483f      	ldr	r0, [pc, #252]	@ (80049b8 <Analyze_ADC_RC_TEST+0x578>)
 80048ba:	f006 fe03 	bl	800b4c4 <siprintf>
			OLED_NewFrame();
 80048be:	f001 f8e1 	bl	8005a84 <OLED_NewFrame>
			OLED_DrawImage(0, 0, &RCCHUANLIANImg, OLED_COLOR_NORMAL);
 80048c2:	2300      	movs	r3, #0
 80048c4:	4a3d      	ldr	r2, [pc, #244]	@ (80049bc <Analyze_ADC_RC_TEST+0x57c>)
 80048c6:	2100      	movs	r1, #0
 80048c8:	2000      	movs	r0, #0
 80048ca:	f001 faa8 	bl	8005e1e <OLED_DrawImage>
			OLED_PrintASCIIString(0, 48, message1, &afont8x6,OLED_COLOR_NORMAL);
 80048ce:	2300      	movs	r3, #0
 80048d0:	9300      	str	r3, [sp, #0]
 80048d2:	4b3b      	ldr	r3, [pc, #236]	@ (80049c0 <Analyze_ADC_RC_TEST+0x580>)
 80048d4:	4a38      	ldr	r2, [pc, #224]	@ (80049b8 <Analyze_ADC_RC_TEST+0x578>)
 80048d6:	2130      	movs	r1, #48	@ 0x30
 80048d8:	2000      	movs	r0, #0
 80048da:	f001 faef 	bl	8005ebc <OLED_PrintASCIIString>
			OLED_ShowFrame();
 80048de:	f001 f8dd 	bl	8005a9c <OLED_ShowFrame>
}
 80048e2:	e050      	b.n	8004986 <Analyze_ADC_RC_TEST+0x546>
			r_black = fabsf(R_KNOWN2 * VPA1 / (VREF - VPA1));
 80048e4:	4b30      	ldr	r3, [pc, #192]	@ (80049a8 <Analyze_ADC_RC_TEST+0x568>)
 80048e6:	edd3 7a00 	vldr	s15, [r3]
 80048ea:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80049b0 <Analyze_ADC_RC_TEST+0x570>
 80048ee:	ee67 6a87 	vmul.f32	s13, s15, s14
 80048f2:	4b2d      	ldr	r3, [pc, #180]	@ (80049a8 <Analyze_ADC_RC_TEST+0x568>)
 80048f4:	edd3 7a00 	vldr	s15, [r3]
 80048f8:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 800499c <Analyze_ADC_RC_TEST+0x55c>
 80048fc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004900:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004904:	eef0 7ae7 	vabs.f32	s15, s15
 8004908:	edc7 7a05 	vstr	s15, [r7, #20]
			c_black = tau * (R_KNOWN2 + r_black) / (r_black * R_KNOWN2);
 800490c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004910:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 80049b0 <Analyze_ADC_RC_TEST+0x570>
 8004914:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004918:	edd7 7a06 	vldr	s15, [r7, #24]
 800491c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004920:	edd7 7a05 	vldr	s15, [r7, #20]
 8004924:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80049b0 <Analyze_ADC_RC_TEST+0x570>
 8004928:	ee27 7a87 	vmul.f32	s14, s15, s14
 800492c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004930:	edc7 7a04 	vstr	s15, [r7, #16]
			sprintf(message1, "R=%.2f C=%.4fuF", r_black,c_black * 1e6);
 8004934:	6978      	ldr	r0, [r7, #20]
 8004936:	f7fb fe0f 	bl	8000558 <__aeabi_f2d>
 800493a:	4604      	mov	r4, r0
 800493c:	460d      	mov	r5, r1
 800493e:	6938      	ldr	r0, [r7, #16]
 8004940:	f7fb fe0a 	bl	8000558 <__aeabi_f2d>
 8004944:	a312      	add	r3, pc, #72	@ (adr r3, 8004990 <Analyze_ADC_RC_TEST+0x550>)
 8004946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800494a:	f7fb fe5d 	bl	8000608 <__aeabi_dmul>
 800494e:	4602      	mov	r2, r0
 8004950:	460b      	mov	r3, r1
 8004952:	e9cd 2300 	strd	r2, r3, [sp]
 8004956:	4622      	mov	r2, r4
 8004958:	462b      	mov	r3, r5
 800495a:	4916      	ldr	r1, [pc, #88]	@ (80049b4 <Analyze_ADC_RC_TEST+0x574>)
 800495c:	4816      	ldr	r0, [pc, #88]	@ (80049b8 <Analyze_ADC_RC_TEST+0x578>)
 800495e:	f006 fdb1 	bl	800b4c4 <siprintf>
			OLED_NewFrame();
 8004962:	f001 f88f 	bl	8005a84 <OLED_NewFrame>
			OLED_DrawImage(0, 0, &RCBINGLIANImg, OLED_COLOR_NORMAL);
 8004966:	2300      	movs	r3, #0
 8004968:	4a16      	ldr	r2, [pc, #88]	@ (80049c4 <Analyze_ADC_RC_TEST+0x584>)
 800496a:	2100      	movs	r1, #0
 800496c:	2000      	movs	r0, #0
 800496e:	f001 fa56 	bl	8005e1e <OLED_DrawImage>
			OLED_PrintASCIIString(0, 48, message1, &afont8x6,OLED_COLOR_NORMAL);
 8004972:	2300      	movs	r3, #0
 8004974:	9300      	str	r3, [sp, #0]
 8004976:	4b12      	ldr	r3, [pc, #72]	@ (80049c0 <Analyze_ADC_RC_TEST+0x580>)
 8004978:	4a0f      	ldr	r2, [pc, #60]	@ (80049b8 <Analyze_ADC_RC_TEST+0x578>)
 800497a:	2130      	movs	r1, #48	@ 0x30
 800497c:	2000      	movs	r0, #0
 800497e:	f001 fa9d 	bl	8005ebc <OLED_PrintASCIIString>
			OLED_ShowFrame();
 8004982:	f001 f88b 	bl	8005a9c <OLED_ShowFrame>
}
 8004986:	bf00      	nop
 8004988:	3758      	adds	r7, #88	@ 0x58
 800498a:	46bd      	mov	sp, r7
 800498c:	bdb0      	pop	{r4, r5, r7, pc}
 800498e:	bf00      	nop
 8004990:	00000000 	.word	0x00000000
 8004994:	412e8480 	.word	0x412e8480
 8004998:	20000338 	.word	0x20000338
 800499c:	40533333 	.word	0x40533333
 80049a0:	457ff000 	.word	0x457ff000
 80049a4:	48f42400 	.word	0x48f42400
 80049a8:	20007a80 	.word	0x20007a80
 80049ac:	20000300 	.word	0x20000300
 80049b0:	459f6000 	.word	0x459f6000
 80049b4:	0800e948 	.word	0x0800e948
 80049b8:	20007aa4 	.word	0x20007aa4
 80049bc:	0800f430 	.word	0x0800f430
 80049c0:	0800ec30 	.word	0x0800ec30
 80049c4:	0800f6b8 	.word	0x0800f6b8

080049c8 <Analyze_ADC_RL_TEST>:

//RL换用方案B
void Analyze_ADC_RL_TEST() {
 80049c8:	b5b0      	push	{r4, r5, r7, lr}
 80049ca:	ed2d 8b02 	vpush	{d8}
 80049ce:	b09a      	sub	sp, #104	@ 0x68
 80049d0:	af02      	add	r7, sp, #8
	//第二次ADC采样
	GPIO_Set_Low(GPIOA, GPIO_PIN_7);   // PA0改为高电平输出
 80049d2:	2180      	movs	r1, #128	@ 0x80
 80049d4:	48be      	ldr	r0, [pc, #760]	@ (8004cd0 <Analyze_ADC_RL_TEST+0x308>)
 80049d6:	f7fd f917 	bl	8001c08 <GPIO_Set_Low>
	GPIO_Set_Low(GPIOA, GPIO_PIN_0);     // PB5改为低电平输出
 80049da:	2101      	movs	r1, #1
 80049dc:	48bc      	ldr	r0, [pc, #752]	@ (8004cd0 <Analyze_ADC_RL_TEST+0x308>)
 80049de:	f7fd f913 	bl	8001c08 <GPIO_Set_Low>
	GPIO_Set_HighZ(GPIOA, GPIO_PIN_4);  // PC13改为高阻态
 80049e2:	2110      	movs	r1, #16
 80049e4:	48ba      	ldr	r0, [pc, #744]	@ (8004cd0 <Analyze_ADC_RL_TEST+0x308>)
 80049e6:	f7fd f8c5 	bl	8001b74 <GPIO_Set_HighZ>
	DMA_Measure();
 80049ea:	f7ff f93d 	bl	8003c68 <DMA_Measure>
	float start_index;
	float MAX = 0;
 80049ee:	f04f 0300 	mov.w	r3, #0
 80049f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
	float v_initial_RLS;
	float v_initial_RLP;
	float v_steady = adc_buffer[BUFFER_SIZE - 1] * VREF / 4095.0f;
 80049f4:	4bb7      	ldr	r3, [pc, #732]	@ (8004cd4 <Analyze_ADC_RL_TEST+0x30c>)
 80049f6:	f8b3 3ffe 	ldrh.w	r3, [r3, #4094]	@ 0xffe
 80049fa:	ee07 3a90 	vmov	s15, r3
 80049fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a02:	ed9f 7ab5 	vldr	s14, [pc, #724]	@ 8004cd8 <Analyze_ADC_RL_TEST+0x310>
 8004a06:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004a0a:	eddf 6ab4 	vldr	s13, [pc, #720]	@ 8004cdc <Analyze_ADC_RL_TEST+0x314>
 8004a0e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004a12:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
	for (int i = 0; i < BUFFER_SIZE; i++) {
 8004a16:	2300      	movs	r3, #0
 8004a18:	657b      	str	r3, [r7, #84]	@ 0x54
 8004a1a:	e029      	b.n	8004a70 <Analyze_ADC_RL_TEST+0xa8>
		float voltage = (adc_buffer[i] * VREF) / 4095.0f;
 8004a1c:	4aad      	ldr	r2, [pc, #692]	@ (8004cd4 <Analyze_ADC_RL_TEST+0x30c>)
 8004a1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a24:	ee07 3a90 	vmov	s15, r3
 8004a28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a2c:	ed9f 7aaa 	vldr	s14, [pc, #680]	@ 8004cd8 <Analyze_ADC_RL_TEST+0x310>
 8004a30:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004a34:	eddf 6aa9 	vldr	s13, [pc, #676]	@ 8004cdc <Analyze_ADC_RL_TEST+0x314>
 8004a38:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004a3c:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
		if (voltage > 0.4) {
 8004a40:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8004a42:	f7fb fd89 	bl	8000558 <__aeabi_f2d>
 8004a46:	a39e      	add	r3, pc, #632	@ (adr r3, 8004cc0 <Analyze_ADC_RL_TEST+0x2f8>)
 8004a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a4c:	f7fc f86c 	bl	8000b28 <__aeabi_dcmpgt>
 8004a50:	4603      	mov	r3, r0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d009      	beq.n	8004a6a <Analyze_ADC_RL_TEST+0xa2>
			start_index = i;
 8004a56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a58:	ee07 3a90 	vmov	s15, r3
 8004a5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a60:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
			v_initial_RLP = voltage;
 8004a64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a66:	65bb      	str	r3, [r7, #88]	@ 0x58
			break;
 8004a68:	e006      	b.n	8004a78 <Analyze_ADC_RL_TEST+0xb0>
	for (int i = 0; i < BUFFER_SIZE; i++) {
 8004a6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a6c:	3301      	adds	r3, #1
 8004a6e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004a70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a72:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a76:	dbd1      	blt.n	8004a1c <Analyze_ADC_RL_TEST+0x54>
		}
	}
	for (int i = 0; i < BUFFER_SIZE; i++) {
 8004a78:	2300      	movs	r3, #0
 8004a7a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a7c:	e029      	b.n	8004ad2 <Analyze_ADC_RL_TEST+0x10a>
		float voltage = (adc_buffer[i] * VREF) / 4095.0f;
 8004a7e:	4a95      	ldr	r2, [pc, #596]	@ (8004cd4 <Analyze_ADC_RL_TEST+0x30c>)
 8004a80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a86:	ee07 3a90 	vmov	s15, r3
 8004a8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a8e:	ed9f 7a92 	vldr	s14, [pc, #584]	@ 8004cd8 <Analyze_ADC_RL_TEST+0x310>
 8004a92:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004a96:	eddf 6a91 	vldr	s13, [pc, #580]	@ 8004cdc <Analyze_ADC_RL_TEST+0x314>
 8004a9a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004a9e:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		if (voltage > 0.1) {
 8004aa2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8004aa4:	f7fb fd58 	bl	8000558 <__aeabi_f2d>
 8004aa8:	a387      	add	r3, pc, #540	@ (adr r3, 8004cc8 <Analyze_ADC_RL_TEST+0x300>)
 8004aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aae:	f7fc f83b 	bl	8000b28 <__aeabi_dcmpgt>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d009      	beq.n	8004acc <Analyze_ADC_RL_TEST+0x104>
			start_index = i;
 8004ab8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004aba:	ee07 3a90 	vmov	s15, r3
 8004abe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ac2:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
			v_initial_RLS = voltage;
 8004ac6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ac8:	63bb      	str	r3, [r7, #56]	@ 0x38
			break;
 8004aca:	e006      	b.n	8004ada <Analyze_ADC_RL_TEST+0x112>
	for (int i = 0; i < BUFFER_SIZE; i++) {
 8004acc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ace:	3301      	adds	r3, #1
 8004ad0:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ad2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ad4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ad8:	dbd1      	blt.n	8004a7e <Analyze_ADC_RL_TEST+0xb6>
		}
	}
	//CESHI
	float index;
	for (int i = 0; i < BUFFER_SIZE; i++) {
 8004ada:	2300      	movs	r3, #0
 8004adc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ade:	e026      	b.n	8004b2e <Analyze_ADC_RL_TEST+0x166>
		float voltage = (adc_buffer[i] * VREF) / 4095.0f;
 8004ae0:	4a7c      	ldr	r2, [pc, #496]	@ (8004cd4 <Analyze_ADC_RL_TEST+0x30c>)
 8004ae2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ae4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ae8:	ee07 3a90 	vmov	s15, r3
 8004aec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004af0:	ed9f 7a79 	vldr	s14, [pc, #484]	@ 8004cd8 <Analyze_ADC_RL_TEST+0x310>
 8004af4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004af8:	eddf 6a78 	vldr	s13, [pc, #480]	@ 8004cdc <Analyze_ADC_RL_TEST+0x314>
 8004afc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004b00:	edc7 7a01 	vstr	s15, [r7, #4]
		if (voltage > MAX) {
 8004b04:	ed97 7a01 	vldr	s14, [r7, #4]
 8004b08:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8004b0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b14:	dd08      	ble.n	8004b28 <Analyze_ADC_RL_TEST+0x160>
			index = i;
 8004b16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b18:	ee07 3a90 	vmov	s15, r3
 8004b1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b20:	edc7 7a00 	vstr	s15, [r7]
			MAX = voltage;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	65fb      	str	r3, [r7, #92]	@ 0x5c
	for (int i = 0; i < BUFFER_SIZE; i++) {
 8004b28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b34:	dbd4      	blt.n	8004ae0 <Analyze_ADC_RL_TEST+0x118>
			//break;
		}
	}
	if (v_initial_RLP + v_steady >= VPA7) {
 8004b36:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8004b3a:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8004b3e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004b42:	4b67      	ldr	r3, [pc, #412]	@ (8004ce0 <Analyze_ADC_RL_TEST+0x318>)
 8004b44:	edd3 7a00 	vldr	s15, [r3]
 8004b48:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b50:	db03      	blt.n	8004b5a <Analyze_ADC_RL_TEST+0x192>
		black_box.detected_type = RL_PARALLEL;
 8004b52:	4b64      	ldr	r3, [pc, #400]	@ (8004ce4 <Analyze_ADC_RL_TEST+0x31c>)
 8004b54:	2206      	movs	r2, #6
 8004b56:	701a      	strb	r2, [r3, #0]
 8004b58:	e002      	b.n	8004b60 <Analyze_ADC_RL_TEST+0x198>
	} else {
		black_box.detected_type = RL_SERIES;
 8004b5a:	4b62      	ldr	r3, [pc, #392]	@ (8004ce4 <Analyze_ADC_RL_TEST+0x31c>)
 8004b5c:	2205      	movs	r2, #5
 8004b5e:	701a      	strb	r2, [r3, #0]
//			sprintf(message1, "Rp=%.2fΩ", black_box.measurement[0].resistance);
//			sprintf(message2, "Lp=%.4fmH",
//					black_box.measurement[0].inductance * 1e3);
//		}
//	} else {
		if (black_box.detected_type == RL_SERIES) {
 8004b60:	4b60      	ldr	r3, [pc, #384]	@ (8004ce4 <Analyze_ADC_RL_TEST+0x31c>)
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	2b05      	cmp	r3, #5
 8004b66:	f040 80d3 	bne.w	8004d10 <Analyze_ADC_RL_TEST+0x348>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004b70:	4857      	ldr	r0, [pc, #348]	@ (8004cd0 <Analyze_ADC_RL_TEST+0x308>)
 8004b72:	f003 fac3 	bl	80080fc <HAL_GPIO_WritePin>
			StartMeasurement();
 8004b76:	f7fc fec3 	bl	8001900 <StartMeasurement>
			while (!measurement_complete);
 8004b7a:	bf00      	nop
 8004b7c:	4b5a      	ldr	r3, [pc, #360]	@ (8004ce8 <Analyze_ADC_RL_TEST+0x320>)
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d0fb      	beq.n	8004b7c <Analyze_ADC_RL_TEST+0x1b4>
			float total_time = CalculateTimeConstant();
 8004b84:	f7fc fef2 	bl	800196c <CalculateTimeConstant>
 8004b88:	ed87 0a07 	vstr	s0, [r7, #28]
			//计算
			float V_steady = VPA1;       // 实际稳态电压
 8004b8c:	4b57      	ldr	r3, [pc, #348]	@ (8004cec <Analyze_ADC_RL_TEST+0x324>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	61bb      	str	r3, [r7, #24]
			float V_supply = VPA7;       // 实际电源电压
 8004b92:	4b53      	ldr	r3, [pc, #332]	@ (8004ce0 <Analyze_ADC_RL_TEST+0x318>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	617b      	str	r3, [r7, #20]
			float Rs = R_KNOWN * (V_supply - V_steady) / fmaxf(V_steady, 1e-6f);
 8004b98:	ed97 7a05 	vldr	s14, [r7, #20]
 8004b9c:	edd7 7a06 	vldr	s15, [r7, #24]
 8004ba0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ba4:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8004cf0 <Analyze_ADC_RL_TEST+0x328>
 8004ba8:	ee27 8a87 	vmul.f32	s16, s15, s14
 8004bac:	eddf 0a51 	vldr	s1, [pc, #324]	@ 8004cf4 <Analyze_ADC_RL_TEST+0x32c>
 8004bb0:	ed97 0a06 	vldr	s0, [r7, #24]
 8004bb4:	f009 f83c 	bl	800dc30 <fmaxf>
 8004bb8:	eeb0 7a40 	vmov.f32	s14, s0
 8004bbc:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8004bc0:	edc7 7a04 	vstr	s15, [r7, #16]
			black_box.measurement[0].resistance = fabsf(Rs);
 8004bc4:	edd7 7a04 	vldr	s15, [r7, #16]
 8004bc8:	eef0 7ae7 	vabs.f32	s15, s15
 8004bcc:	4b45      	ldr	r3, [pc, #276]	@ (8004ce4 <Analyze_ADC_RL_TEST+0x31c>)
 8004bce:	edc3 7a01 	vstr	s15, [r3, #4]
			float a = fabs(VPA1 - Threshold_voltage_S) / VPA7;
 8004bd2:	4b46      	ldr	r3, [pc, #280]	@ (8004cec <Analyze_ADC_RL_TEST+0x324>)
 8004bd4:	edd3 7a00 	vldr	s15, [r3]
 8004bd8:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8004cf8 <Analyze_ADC_RL_TEST+0x330>
 8004bdc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004be0:	eef0 6ae7 	vabs.f32	s13, s15
 8004be4:	4b3e      	ldr	r3, [pc, #248]	@ (8004ce0 <Analyze_ADC_RL_TEST+0x318>)
 8004be6:	ed93 7a00 	vldr	s14, [r3]
 8004bea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bee:	edc7 7a03 	vstr	s15, [r7, #12]
			float tau = -total_time / log(a);
 8004bf2:	edd7 7a07 	vldr	s15, [r7, #28]
 8004bf6:	eef1 7a67 	vneg.f32	s15, s15
 8004bfa:	ee17 3a90 	vmov	r3, s15
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f7fb fcaa 	bl	8000558 <__aeabi_f2d>
 8004c04:	4604      	mov	r4, r0
 8004c06:	460d      	mov	r5, r1
 8004c08:	68f8      	ldr	r0, [r7, #12]
 8004c0a:	f7fb fca5 	bl	8000558 <__aeabi_f2d>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	460b      	mov	r3, r1
 8004c12:	ec43 2b10 	vmov	d0, r2, r3
 8004c16:	f008 fd9b 	bl	800d750 <log>
 8004c1a:	ec53 2b10 	vmov	r2, r3, d0
 8004c1e:	4620      	mov	r0, r4
 8004c20:	4629      	mov	r1, r5
 8004c22:	f7fb fe1b 	bl	800085c <__aeabi_ddiv>
 8004c26:	4602      	mov	r2, r0
 8004c28:	460b      	mov	r3, r1
 8004c2a:	4610      	mov	r0, r2
 8004c2c:	4619      	mov	r1, r3
 8004c2e:	f7fb ffc3 	bl	8000bb8 <__aeabi_d2f>
 8004c32:	4603      	mov	r3, r0
 8004c34:	60bb      	str	r3, [r7, #8]
			black_box.measurement[0].inductance = tau * (Rs + R_KNOWN);
 8004c36:	edd7 7a04 	vldr	s15, [r7, #16]
 8004c3a:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8004cf0 <Analyze_ADC_RL_TEST+0x328>
 8004c3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c42:	edd7 7a02 	vldr	s15, [r7, #8]
 8004c46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c4a:	4b26      	ldr	r3, [pc, #152]	@ (8004ce4 <Analyze_ADC_RL_TEST+0x31c>)
 8004c4c:	edc3 7a03 	vstr	s15, [r3, #12]
			measurement_complete = 0;
 8004c50:	4b25      	ldr	r3, [pc, #148]	@ (8004ce8 <Analyze_ADC_RL_TEST+0x320>)
 8004c52:	2200      	movs	r2, #0
 8004c54:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8004c56:	2200      	movs	r2, #0
 8004c58:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004c5c:	481c      	ldr	r0, [pc, #112]	@ (8004cd0 <Analyze_ADC_RL_TEST+0x308>)
 8004c5e:	f003 fa4d 	bl	80080fc <HAL_GPIO_WritePin>
			sprintf(message1, "R=%.2f L=%.4fmH", Rs,black_box.measurement[0].inductance * 1e3);
 8004c62:	6938      	ldr	r0, [r7, #16]
 8004c64:	f7fb fc78 	bl	8000558 <__aeabi_f2d>
 8004c68:	4604      	mov	r4, r0
 8004c6a:	460d      	mov	r5, r1
 8004c6c:	4b1d      	ldr	r3, [pc, #116]	@ (8004ce4 <Analyze_ADC_RL_TEST+0x31c>)
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	4618      	mov	r0, r3
 8004c72:	f7fb fc71 	bl	8000558 <__aeabi_f2d>
 8004c76:	f04f 0200 	mov.w	r2, #0
 8004c7a:	4b20      	ldr	r3, [pc, #128]	@ (8004cfc <Analyze_ADC_RL_TEST+0x334>)
 8004c7c:	f7fb fcc4 	bl	8000608 <__aeabi_dmul>
 8004c80:	4602      	mov	r2, r0
 8004c82:	460b      	mov	r3, r1
 8004c84:	e9cd 2300 	strd	r2, r3, [sp]
 8004c88:	4622      	mov	r2, r4
 8004c8a:	462b      	mov	r3, r5
 8004c8c:	491c      	ldr	r1, [pc, #112]	@ (8004d00 <Analyze_ADC_RL_TEST+0x338>)
 8004c8e:	481d      	ldr	r0, [pc, #116]	@ (8004d04 <Analyze_ADC_RL_TEST+0x33c>)
 8004c90:	f006 fc18 	bl	800b4c4 <siprintf>
			OLED_NewFrame();
 8004c94:	f000 fef6 	bl	8005a84 <OLED_NewFrame>
			OLED_DrawImage(0, 0, &RLCHUANLIANImg, OLED_COLOR_NORMAL);
 8004c98:	2300      	movs	r3, #0
 8004c9a:	4a1b      	ldr	r2, [pc, #108]	@ (8004d08 <Analyze_ADC_RL_TEST+0x340>)
 8004c9c:	2100      	movs	r1, #0
 8004c9e:	2000      	movs	r0, #0
 8004ca0:	f001 f8bd 	bl	8005e1e <OLED_DrawImage>
			OLED_PrintASCIIString(0, 48, message1, &afont8x6,OLED_COLOR_NORMAL);
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	9300      	str	r3, [sp, #0]
 8004ca8:	4b18      	ldr	r3, [pc, #96]	@ (8004d0c <Analyze_ADC_RL_TEST+0x344>)
 8004caa:	4a16      	ldr	r2, [pc, #88]	@ (8004d04 <Analyze_ADC_RL_TEST+0x33c>)
 8004cac:	2130      	movs	r1, #48	@ 0x30
 8004cae:	2000      	movs	r0, #0
 8004cb0:	f001 f904 	bl	8005ebc <OLED_PrintASCIIString>
			OLED_ShowFrame();
 8004cb4:	f000 fef2 	bl	8005a9c <OLED_ShowFrame>
			OLED_PrintASCIIString(0, 48, message1, &afont8x6,OLED_COLOR_NORMAL);
			OLED_ShowFrame();

	}

}
 8004cb8:	e09e      	b.n	8004df8 <Analyze_ADC_RL_TEST+0x430>
 8004cba:	bf00      	nop
 8004cbc:	f3af 8000 	nop.w
 8004cc0:	9999999a 	.word	0x9999999a
 8004cc4:	3fd99999 	.word	0x3fd99999
 8004cc8:	9999999a 	.word	0x9999999a
 8004ccc:	3fb99999 	.word	0x3fb99999
 8004cd0:	40020000 	.word	0x40020000
 8004cd4:	20000338 	.word	0x20000338
 8004cd8:	40533333 	.word	0x40533333
 8004cdc:	457ff000 	.word	0x457ff000
 8004ce0:	20007a8c 	.word	0x20007a8c
 8004ce4:	20000300 	.word	0x20000300
 8004ce8:	20007a7c 	.word	0x20007a7c
 8004cec:	20007a80 	.word	0x20007a80
 8004cf0:	424c0000 	.word	0x424c0000
 8004cf4:	358637bd 	.word	0x358637bd
 8004cf8:	3f2b573f 	.word	0x3f2b573f
 8004cfc:	408f4000 	.word	0x408f4000
 8004d00:	0800e964 	.word	0x0800e964
 8004d04:	20007aa4 	.word	0x20007aa4
 8004d08:	0800fbc8 	.word	0x0800fbc8
 8004d0c:	0800ec30 	.word	0x0800ec30
			float V_steady = VPA1;       // 实际稳态电压
 8004d10:	4b3c      	ldr	r3, [pc, #240]	@ (8004e04 <Analyze_ADC_RL_TEST+0x43c>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	637b      	str	r3, [r7, #52]	@ 0x34
			float V_supply = VPA7;       // 实际电源电压
 8004d16:	4b3c      	ldr	r3, [pc, #240]	@ (8004e08 <Analyze_ADC_RL_TEST+0x440>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	633b      	str	r3, [r7, #48]	@ 0x30
			float R_total = R_KNOWN * V_steady / (V_supply - V_steady);
 8004d1c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8004d20:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8004e0c <Analyze_ADC_RL_TEST+0x444>
 8004d24:	ee67 6a87 	vmul.f32	s13, s15, s14
 8004d28:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8004d2c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8004d30:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004d34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d38:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
			float RL = (R_KNOWN * R_total) / (R_KNOWN - R_total);
 8004d3c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8004d40:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8004e0c <Analyze_ADC_RL_TEST+0x444>
 8004d44:	ee67 6a87 	vmul.f32	s13, s15, s14
 8004d48:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8004e0c <Analyze_ADC_RL_TEST+0x444>
 8004d4c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8004d50:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004d54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d58:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
			black_box.measurement[0].resistance = RL;
 8004d5c:	4a2c      	ldr	r2, [pc, #176]	@ (8004e10 <Analyze_ADC_RL_TEST+0x448>)
 8004d5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d60:	6053      	str	r3, [r2, #4]
			float a = fabs(VPA1 - Threshold_voltage_P) / VPA7; // 使用并联阈值
 8004d62:	4b28      	ldr	r3, [pc, #160]	@ (8004e04 <Analyze_ADC_RL_TEST+0x43c>)
 8004d64:	edd3 7a00 	vldr	s15, [r3]
 8004d68:	eeb0 7a04 	vmov.f32	s14, #4	@ 0x40200000  2.5
 8004d6c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004d70:	eef0 6ae7 	vabs.f32	s13, s15
 8004d74:	4b24      	ldr	r3, [pc, #144]	@ (8004e08 <Analyze_ADC_RL_TEST+0x440>)
 8004d76:	ed93 7a00 	vldr	s14, [r3]
 8004d7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d7e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
			float tau = Calculate_tau();
 8004d82:	f000 f853 	bl	8004e2c <Calculate_tau>
 8004d86:	ed87 0a08 	vstr	s0, [r7, #32]
			black_box.measurement[0].inductance = tau * RL;
 8004d8a:	ed97 7a08 	vldr	s14, [r7, #32]
 8004d8e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8004d92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d96:	4b1e      	ldr	r3, [pc, #120]	@ (8004e10 <Analyze_ADC_RL_TEST+0x448>)
 8004d98:	edc3 7a03 	vstr	s15, [r3, #12]
			measurement_complete = 0;
 8004d9c:	4b1d      	ldr	r3, [pc, #116]	@ (8004e14 <Analyze_ADC_RL_TEST+0x44c>)
 8004d9e:	2200      	movs	r2, #0
 8004da0:	701a      	strb	r2, [r3, #0]
			sprintf(message1, "R=%.2f L=%.4fmH", RL,black_box.measurement[0].inductance * 1e3);
 8004da2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004da4:	f7fb fbd8 	bl	8000558 <__aeabi_f2d>
 8004da8:	4604      	mov	r4, r0
 8004daa:	460d      	mov	r5, r1
 8004dac:	4b18      	ldr	r3, [pc, #96]	@ (8004e10 <Analyze_ADC_RL_TEST+0x448>)
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	4618      	mov	r0, r3
 8004db2:	f7fb fbd1 	bl	8000558 <__aeabi_f2d>
 8004db6:	f04f 0200 	mov.w	r2, #0
 8004dba:	4b17      	ldr	r3, [pc, #92]	@ (8004e18 <Analyze_ADC_RL_TEST+0x450>)
 8004dbc:	f7fb fc24 	bl	8000608 <__aeabi_dmul>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	460b      	mov	r3, r1
 8004dc4:	e9cd 2300 	strd	r2, r3, [sp]
 8004dc8:	4622      	mov	r2, r4
 8004dca:	462b      	mov	r3, r5
 8004dcc:	4913      	ldr	r1, [pc, #76]	@ (8004e1c <Analyze_ADC_RL_TEST+0x454>)
 8004dce:	4814      	ldr	r0, [pc, #80]	@ (8004e20 <Analyze_ADC_RL_TEST+0x458>)
 8004dd0:	f006 fb78 	bl	800b4c4 <siprintf>
			OLED_NewFrame();
 8004dd4:	f000 fe56 	bl	8005a84 <OLED_NewFrame>
			OLED_DrawImage(0, 0, &RLBINGLIANImg, OLED_COLOR_NORMAL);
 8004dd8:	2300      	movs	r3, #0
 8004dda:	4a12      	ldr	r2, [pc, #72]	@ (8004e24 <Analyze_ADC_RL_TEST+0x45c>)
 8004ddc:	2100      	movs	r1, #0
 8004dde:	2000      	movs	r0, #0
 8004de0:	f001 f81d 	bl	8005e1e <OLED_DrawImage>
			OLED_PrintASCIIString(0, 48, message1, &afont8x6,OLED_COLOR_NORMAL);
 8004de4:	2300      	movs	r3, #0
 8004de6:	9300      	str	r3, [sp, #0]
 8004de8:	4b0f      	ldr	r3, [pc, #60]	@ (8004e28 <Analyze_ADC_RL_TEST+0x460>)
 8004dea:	4a0d      	ldr	r2, [pc, #52]	@ (8004e20 <Analyze_ADC_RL_TEST+0x458>)
 8004dec:	2130      	movs	r1, #48	@ 0x30
 8004dee:	2000      	movs	r0, #0
 8004df0:	f001 f864 	bl	8005ebc <OLED_PrintASCIIString>
			OLED_ShowFrame();
 8004df4:	f000 fe52 	bl	8005a9c <OLED_ShowFrame>
}
 8004df8:	bf00      	nop
 8004dfa:	3760      	adds	r7, #96	@ 0x60
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	ecbd 8b02 	vpop	{d8}
 8004e02:	bdb0      	pop	{r4, r5, r7, pc}
 8004e04:	20007a80 	.word	0x20007a80
 8004e08:	20007a8c 	.word	0x20007a8c
 8004e0c:	424c0000 	.word	0x424c0000
 8004e10:	20000300 	.word	0x20000300
 8004e14:	20007a7c 	.word	0x20007a7c
 8004e18:	408f4000 	.word	0x408f4000
 8004e1c:	0800e964 	.word	0x0800e964
 8004e20:	20007aa4 	.word	0x20007aa4
 8004e24:	0800f940 	.word	0x0800f940
 8004e28:	0800ec30 	.word	0x0800ec30

08004e2c <Calculate_tau>:
//
float Calculate_tau(void) {
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b092      	sub	sp, #72	@ 0x48
 8004e30:	af00      	add	r7, sp, #0
	float v_start;
	float v_steady;
	float v_end;

	// 寻找起始点
	for (int i = 0; i < BUFFER_SIZE; i++) {
 8004e32:	2300      	movs	r3, #0
 8004e34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e36:	e027      	b.n	8004e88 <Calculate_tau+0x5c>
		float voltage = (adc_buffer[i] * VREF) / 4095.0f;
 8004e38:	4aa8      	ldr	r2, [pc, #672]	@ (80050dc <Calculate_tau+0x2b0>)
 8004e3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e40:	ee07 3a90 	vmov	s15, r3
 8004e44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e48:	ed9f 7aa5 	vldr	s14, [pc, #660]	@ 80050e0 <Calculate_tau+0x2b4>
 8004e4c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004e50:	eddf 6aa4 	vldr	s13, [pc, #656]	@ 80050e4 <Calculate_tau+0x2b8>
 8004e54:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004e58:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		if (voltage > MIN_VOLTAGE) {
 8004e5c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8004e60:	ed9f 7aa1 	vldr	s14, [pc, #644]	@ 80050e8 <Calculate_tau+0x2bc>
 8004e64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e6c:	dd09      	ble.n	8004e82 <Calculate_tau+0x56>
			start_index = i;
 8004e6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e70:	ee07 3a90 	vmov	s15, r3
 8004e74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e78:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
			v_start = voltage;
 8004e7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e7e:	633b      	str	r3, [r7, #48]	@ 0x30
			break;
 8004e80:	e006      	b.n	8004e90 <Calculate_tau+0x64>
	for (int i = 0; i < BUFFER_SIZE; i++) {
 8004e82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e84:	3301      	adds	r3, #1
 8004e86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e8a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e8e:	dbd3      	blt.n	8004e38 <Calculate_tau+0xc>
		}
	}

	// 获取结束电压值
	v_end = (adc_buffer[BUFFER_SIZE - 1] * VREF) / 4095.0f;
 8004e90:	4b92      	ldr	r3, [pc, #584]	@ (80050dc <Calculate_tau+0x2b0>)
 8004e92:	f8b3 3ffe 	ldrh.w	r3, [r3, #4094]	@ 0xffe
 8004e96:	ee07 3a90 	vmov	s15, r3
 8004e9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e9e:	ed9f 7a90 	vldr	s14, [pc, #576]	@ 80050e0 <Calculate_tau+0x2b4>
 8004ea2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004ea6:	eddf 6a8f 	vldr	s13, [pc, #572]	@ 80050e4 <Calculate_tau+0x2b8>
 8004eaa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004eae:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

	// 寻找稳定点和稳定电压
	steady_index = start_index;
 8004eb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004eb4:	643b      	str	r3, [r7, #64]	@ 0x40
	v_steady = v_end;
 8004eb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eb8:	62bb      	str	r3, [r7, #40]	@ 0x28
	for (int i = start_index; i < BUFFER_SIZE; i++) {
 8004eba:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8004ebe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ec2:	ee17 3a90 	vmov	r3, s15
 8004ec6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004ec8:	e02b      	b.n	8004f22 <Calculate_tau+0xf6>
		float voltage = (adc_buffer[i] * VREF) / 4095.0f;
 8004eca:	4a84      	ldr	r2, [pc, #528]	@ (80050dc <Calculate_tau+0x2b0>)
 8004ecc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ece:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ed2:	ee07 3a90 	vmov	s15, r3
 8004ed6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004eda:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 80050e0 <Calculate_tau+0x2b4>
 8004ede:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004ee2:	eddf 6a80 	vldr	s13, [pc, #512]	@ 80050e4 <Calculate_tau+0x2b8>
 8004ee6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004eea:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		if (fabs(voltage - v_steady) <= 0.05f) {
 8004eee:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8004ef2:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8004ef6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004efa:	eef0 7ae7 	vabs.f32	s15, s15
 8004efe:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 80050e8 <Calculate_tau+0x2bc>
 8004f02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f0a:	d807      	bhi.n	8004f1c <Calculate_tau+0xf0>
			steady_index = i;
 8004f0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f0e:	ee07 3a90 	vmov	s15, r3
 8004f12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f16:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
			break;
 8004f1a:	e006      	b.n	8004f2a <Calculate_tau+0xfe>
	for (int i = start_index; i < BUFFER_SIZE; i++) {
 8004f1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f1e:	3301      	adds	r3, #1
 8004f20:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004f22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f24:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f28:	dbcf      	blt.n	8004eca <Calculate_tau+0x9e>
		}
	}

	// 计算有效数据长度
	float valid_length = steady_index - start_index;
 8004f2a:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8004f2e:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8004f32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f36:	edc7 7a08 	vstr	s15, [r7, #32]
	if (valid_length < 3) {
 8004f3a:	edd7 7a08 	vldr	s15, [r7, #32]
 8004f3e:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8004f42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f4a:	d502      	bpl.n	8004f52 <Calculate_tau+0x126>
		return 0; // 有效数据点太少
 8004f4c:	f04f 0300 	mov.w	r3, #0
 8004f50:	e0bd      	b.n	80050ce <Calculate_tau+0x2a2>
	}

	// 选择有效长度的1/3和2/3位置的索引
	uint16_t index1 = start_index + (uint16_t) (valid_length * 1.0f / 3.0f);
 8004f52:	ed97 7a08 	vldr	s14, [r7, #32]
 8004f56:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 8004f5a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004f5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f62:	ee17 3a90 	vmov	r3, s15
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	ee07 3a90 	vmov	s15, r3
 8004f6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004f70:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8004f74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f7c:	ee17 3a90 	vmov	r3, s15
 8004f80:	83fb      	strh	r3, [r7, #30]
	uint16_t index2 = start_index + (uint16_t) (valid_length * 2.0f / 3.0f);
 8004f82:	edd7 7a08 	vldr	s15, [r7, #32]
 8004f86:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8004f8a:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 8004f8e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004f92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f96:	ee17 3a90 	vmov	r3, s15
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	ee07 3a90 	vmov	s15, r3
 8004fa0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004fa4:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8004fa8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004fac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fb0:	ee17 3a90 	vmov	r3, s15
 8004fb4:	83bb      	strh	r3, [r7, #28]

	// 获取这两个点的电压值
	float v1 = (adc_buffer[index1] * VREF) / 4095.0f;
 8004fb6:	8bfb      	ldrh	r3, [r7, #30]
 8004fb8:	4a48      	ldr	r2, [pc, #288]	@ (80050dc <Calculate_tau+0x2b0>)
 8004fba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004fbe:	ee07 3a90 	vmov	s15, r3
 8004fc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004fc6:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 80050e0 <Calculate_tau+0x2b4>
 8004fca:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004fce:	eddf 6a45 	vldr	s13, [pc, #276]	@ 80050e4 <Calculate_tau+0x2b8>
 8004fd2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004fd6:	edc7 7a06 	vstr	s15, [r7, #24]
	float v2 = (adc_buffer[index2] * VREF) / 4095.0f;
 8004fda:	8bbb      	ldrh	r3, [r7, #28]
 8004fdc:	4a3f      	ldr	r2, [pc, #252]	@ (80050dc <Calculate_tau+0x2b0>)
 8004fde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004fe2:	ee07 3a90 	vmov	s15, r3
 8004fe6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004fea:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 80050e0 <Calculate_tau+0x2b4>
 8004fee:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004ff2:	eddf 6a3c 	vldr	s13, [pc, #240]	@ 80050e4 <Calculate_tau+0x2b8>
 8004ff6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004ffa:	edc7 7a05 	vstr	s15, [r7, #20]

	// 计算这两个点之间的时间间隔(采样点数)
	float delta_index = index2 - index1;
 8004ffe:	8bba      	ldrh	r2, [r7, #28]
 8005000:	8bfb      	ldrh	r3, [r7, #30]
 8005002:	1ad3      	subs	r3, r2, r3
 8005004:	ee07 3a90 	vmov	s15, r3
 8005008:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800500c:	edc7 7a04 	vstr	s15, [r7, #16]
	// 使用公式推导计算时间常数
	// 对于充电曲线: V(t) = V_steady * (1 - e^(-t/τ))
	// 设t1和t2是两个时间点，对应的电压是v1和v2
	// 经过数学推导可得: τ = Δt / ln((V_steady-v1)/(V_steady-v2))
	// 添加计算保护
	float delta_v1 = v_steady - v1;
 8005010:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8005014:	edd7 7a06 	vldr	s15, [r7, #24]
 8005018:	ee77 7a67 	vsub.f32	s15, s14, s15
 800501c:	edc7 7a03 	vstr	s15, [r7, #12]
	float delta_v2 = v_steady - v2;
 8005020:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8005024:	edd7 7a05 	vldr	s15, [r7, #20]
 8005028:	ee77 7a67 	vsub.f32	s15, s14, s15
 800502c:	edc7 7a02 	vstr	s15, [r7, #8]

	if (delta_v1 < 1e-6f || delta_v2 < 1e-6f) {
 8005030:	edd7 7a03 	vldr	s15, [r7, #12]
 8005034:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 80050ec <Calculate_tau+0x2c0>
 8005038:	eef4 7ac7 	vcmpe.f32	s15, s14
 800503c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005040:	d408      	bmi.n	8005054 <Calculate_tau+0x228>
 8005042:	edd7 7a02 	vldr	s15, [r7, #8]
 8005046:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 80050ec <Calculate_tau+0x2c0>
 800504a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800504e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005052:	d502      	bpl.n	800505a <Calculate_tau+0x22e>
		return 0;  // 防止log(0)或负值
 8005054:	f04f 0300 	mov.w	r3, #0
 8005058:	e039      	b.n	80050ce <Calculate_tau+0x2a2>
	}

	float log_val = logf(delta_v1 / delta_v2);
 800505a:	ed97 7a03 	vldr	s14, [r7, #12]
 800505e:	edd7 7a02 	vldr	s15, [r7, #8]
 8005062:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005066:	eeb0 0a66 	vmov.f32	s0, s13
 800506a:	f008 fbaf 	bl	800d7cc <logf>
 800506e:	ed87 0a01 	vstr	s0, [r7, #4]
	if (!isfinite(log_val)) {
 8005072:	edd7 7a01 	vldr	s15, [r7, #4]
 8005076:	eef0 7ae7 	vabs.f32	s15, s15
 800507a:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80050f0 <Calculate_tau+0x2c4>
 800507e:	eef4 7a47 	vcmp.f32	s15, s14
 8005082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005086:	d902      	bls.n	800508e <Calculate_tau+0x262>
		return 0;  // 处理NaN/Inf
 8005088:	f04f 0300 	mov.w	r3, #0
 800508c:	e01f      	b.n	80050ce <Calculate_tau+0x2a2>
	}

	float tau = (delta_index / SAMPLE_RATE) / log_val;  // 确保SAMPLE_RATE单位Hz
 800508e:	edd7 7a04 	vldr	s15, [r7, #16]
 8005092:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80050f4 <Calculate_tau+0x2c8>
 8005096:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800509a:	ed97 7a01 	vldr	s14, [r7, #4]
 800509e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050a2:	edc7 7a00 	vstr	s15, [r7]
	//float tau = delta_index * (1.0f / SAMPLE_RATE) / log((v_steady - v1) / (v_steady - v2));

	// 可靠性检查
	if (tau > 0 && delta_index > 2) {
 80050a6:	edd7 7a00 	vldr	s15, [r7]
 80050aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80050ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050b2:	dd0a      	ble.n	80050ca <Calculate_tau+0x29e>
 80050b4:	edd7 7a04 	vldr	s15, [r7, #16]
 80050b8:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80050bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050c4:	dd01      	ble.n	80050ca <Calculate_tau+0x29e>
		return tau;
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	e001      	b.n	80050ce <Calculate_tau+0x2a2>
	} else {
		return 0;
 80050ca:	f04f 0300 	mov.w	r3, #0
	}
}
 80050ce:	ee07 3a90 	vmov	s15, r3
 80050d2:	eeb0 0a67 	vmov.f32	s0, s15
 80050d6:	3748      	adds	r7, #72	@ 0x48
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}
 80050dc:	20000338 	.word	0x20000338
 80050e0:	40533333 	.word	0x40533333
 80050e4:	457ff000 	.word	0x457ff000
 80050e8:	3d4ccccd 	.word	0x3d4ccccd
 80050ec:	358637bd 	.word	0x358637bd
 80050f0:	7f7fffff 	.word	0x7f7fffff
 80050f4:	48f42400 	.word	0x48f42400

080050f8 <evaluate_steady_state_fluctuation>:
// 检查最后10%采样点的波动范围（判断是否达到稳态）
int evaluate_steady_state_fluctuation() {
 80050f8:	b5b0      	push	{r4, r5, r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
	float v_end = (adc_buffer[BUFFER_SIZE - 1] * VREF) / 4095.0f;
 80050fe:	4b30      	ldr	r3, [pc, #192]	@ (80051c0 <evaluate_steady_state_fluctuation+0xc8>)
 8005100:	f8b3 3ffe 	ldrh.w	r3, [r3, #4094]	@ 0xffe
 8005104:	ee07 3a90 	vmov	s15, r3
 8005108:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800510c:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 80051c4 <evaluate_steady_state_fluctuation+0xcc>
 8005110:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005114:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 80051c8 <evaluate_steady_state_fluctuation+0xd0>
 8005118:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800511c:	edc7 7a02 	vstr	s15, [r7, #8]
	int index = 0;
 8005120:	2300      	movs	r3, #0
 8005122:	607b      	str	r3, [r7, #4]
	float voltage;
	for (int i = 0; i < BUFFER_SIZE; i++) {
 8005124:	2300      	movs	r3, #0
 8005126:	60fb      	str	r3, [r7, #12]
 8005128:	e020      	b.n	800516c <evaluate_steady_state_fluctuation+0x74>
		voltage = (adc_buffer[i] * VREF) / 4095.0f;
 800512a:	4a25      	ldr	r2, [pc, #148]	@ (80051c0 <evaluate_steady_state_fluctuation+0xc8>)
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005132:	ee07 3a90 	vmov	s15, r3
 8005136:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800513a:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80051c4 <evaluate_steady_state_fluctuation+0xcc>
 800513e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005142:	eddf 6a21 	vldr	s13, [pc, #132]	@ 80051c8 <evaluate_steady_state_fluctuation+0xd0>
 8005146:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800514a:	edc7 7a00 	vstr	s15, [r7]
		if (voltage >= v_end) {
 800514e:	ed97 7a00 	vldr	s14, [r7]
 8005152:	edd7 7a02 	vldr	s15, [r7, #8]
 8005156:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800515a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800515e:	db02      	blt.n	8005166 <evaluate_steady_state_fluctuation+0x6e>
			index = i;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	607b      	str	r3, [r7, #4]
			break;
 8005164:	e006      	b.n	8005174 <evaluate_steady_state_fluctuation+0x7c>
	for (int i = 0; i < BUFFER_SIZE; i++) {
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	3301      	adds	r3, #1
 800516a:	60fb      	str	r3, [r7, #12]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005172:	dbda      	blt.n	800512a <evaluate_steady_state_fluctuation+0x32>
		}
	}
	if (v_end >= 0.98 * VPA1) {
 8005174:	68b8      	ldr	r0, [r7, #8]
 8005176:	f7fb f9ef 	bl	8000558 <__aeabi_f2d>
 800517a:	4604      	mov	r4, r0
 800517c:	460d      	mov	r5, r1
 800517e:	4b13      	ldr	r3, [pc, #76]	@ (80051cc <evaluate_steady_state_fluctuation+0xd4>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4618      	mov	r0, r3
 8005184:	f7fb f9e8 	bl	8000558 <__aeabi_f2d>
 8005188:	a30b      	add	r3, pc, #44	@ (adr r3, 80051b8 <evaluate_steady_state_fluctuation+0xc0>)
 800518a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800518e:	f7fb fa3b 	bl	8000608 <__aeabi_dmul>
 8005192:	4602      	mov	r2, r0
 8005194:	460b      	mov	r3, r1
 8005196:	4620      	mov	r0, r4
 8005198:	4629      	mov	r1, r5
 800519a:	f7fb fcbb 	bl	8000b14 <__aeabi_dcmpge>
 800519e:	4603      	mov	r3, r0
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d001      	beq.n	80051a8 <evaluate_steady_state_fluctuation+0xb0>
		return 1;
 80051a4:	2301      	movs	r3, #1
 80051a6:	e000      	b.n	80051aa <evaluate_steady_state_fluctuation+0xb2>
	} else {
		return 0;
 80051a8:	2300      	movs	r3, #0
	}
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3710      	adds	r7, #16
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bdb0      	pop	{r4, r5, r7, pc}
 80051b2:	bf00      	nop
 80051b4:	f3af 8000 	nop.w
 80051b8:	f5c28f5c 	.word	0xf5c28f5c
 80051bc:	3fef5c28 	.word	0x3fef5c28
 80051c0:	20000338 	.word	0x20000338
 80051c4:	40533333 	.word	0x40533333
 80051c8:	457ff000 	.word	0x457ff000
 80051cc:	20007a80 	.word	0x20007a80

080051d0 <evaluate_voltage_slope>:
// 检查电压变化方向是否单调
int evaluate_voltage_slope() {
 80051d0:	b480      	push	{r7}
 80051d2:	b099      	sub	sp, #100	@ 0x64
 80051d4:	af00      	add	r7, sp, #0
	// 查找首个电压超过0.1V的起始点
	int start_index = -1;
 80051d6:	f04f 33ff 	mov.w	r3, #4294967295
 80051da:	65fb      	str	r3, [r7, #92]	@ 0x5c
	for (int i = 0; i < BUFFER_SIZE; i++) {
 80051dc:	2300      	movs	r3, #0
 80051de:	65bb      	str	r3, [r7, #88]	@ 0x58
 80051e0:	e020      	b.n	8005224 <evaluate_voltage_slope+0x54>
		float voltage = (adc_buffer[i] * VREF) / 4095.0f;
 80051e2:	4aa6      	ldr	r2, [pc, #664]	@ (800547c <evaluate_voltage_slope+0x2ac>)
 80051e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80051e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051ea:	ee07 3a90 	vmov	s15, r3
 80051ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80051f2:	ed9f 7aa3 	vldr	s14, [pc, #652]	@ 8005480 <evaluate_voltage_slope+0x2b0>
 80051f6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80051fa:	eddf 6aa2 	vldr	s13, [pc, #648]	@ 8005484 <evaluate_voltage_slope+0x2b4>
 80051fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005202:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		if (voltage > 0.1f) {
 8005206:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800520a:	ed9f 7a9f 	vldr	s14, [pc, #636]	@ 8005488 <evaluate_voltage_slope+0x2b8>
 800520e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005216:	dd02      	ble.n	800521e <evaluate_voltage_slope+0x4e>
			start_index = i;
 8005218:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800521a:	65fb      	str	r3, [r7, #92]	@ 0x5c
			break;
 800521c:	e006      	b.n	800522c <evaluate_voltage_slope+0x5c>
	for (int i = 0; i < BUFFER_SIZE; i++) {
 800521e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005220:	3301      	adds	r3, #1
 8005222:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005224:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005226:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800522a:	dbda      	blt.n	80051e2 <evaluate_voltage_slope+0x12>
		}
	}
	if (start_index == -1 || start_index >= BUFFER_SIZE - 20) {
 800522c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800522e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005232:	d004      	beq.n	800523e <evaluate_voltage_slope+0x6e>
 8005234:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005236:	f240 72eb 	movw	r2, #2027	@ 0x7eb
 800523a:	4293      	cmp	r3, r2
 800523c:	dd01      	ble.n	8005242 <evaluate_voltage_slope+0x72>
		return 1; // 未找到有效起始点或数据不足，默认通过
 800523e:	2301      	movs	r3, #1
 8005240:	e116      	b.n	8005470 <evaluate_voltage_slope+0x2a0>
	}

	// 分析电压变化方向
	int consistent_direction = 1; // 是否保持单调
 8005242:	2301      	movs	r3, #1
 8005244:	657b      	str	r3, [r7, #84]	@ 0x54
	int first_direction = 0;     // 首个有效变化方向: 1=上升, -1=下降
 8005246:	2300      	movs	r3, #0
 8005248:	653b      	str	r3, [r7, #80]	@ 0x50
	float prev_voltage = (adc_buffer[start_index] * VREF) / 4095.0f;
 800524a:	4a8c      	ldr	r2, [pc, #560]	@ (800547c <evaluate_voltage_slope+0x2ac>)
 800524c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800524e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005252:	ee07 3a90 	vmov	s15, r3
 8005256:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800525a:	ed9f 7a89 	vldr	s14, [pc, #548]	@ 8005480 <evaluate_voltage_slope+0x2b0>
 800525e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005262:	eddf 6a88 	vldr	s13, [pc, #544]	@ 8005484 <evaluate_voltage_slope+0x2b4>
 8005266:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800526a:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
	float start_voltage = prev_voltage;
 800526e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005270:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int direction_changes = 0;   // 方向改变次数
 8005272:	2300      	movs	r3, #0
 8005274:	64bb      	str	r3, [r7, #72]	@ 0x48
	int significant_changes = 0; // 显著变化次数
 8005276:	2300      	movs	r3, #0
 8005278:	647b      	str	r3, [r7, #68]	@ 0x44

	for (int i = start_index + 1; i < start_index + 20; i++) {
 800527a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800527c:	3301      	adds	r3, #1
 800527e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005280:	e052      	b.n	8005328 <evaluate_voltage_slope+0x158>
		float current_voltage = (adc_buffer[i] * VREF) / 4095.0f;
 8005282:	4a7e      	ldr	r2, [pc, #504]	@ (800547c <evaluate_voltage_slope+0x2ac>)
 8005284:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005286:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800528a:	ee07 3a90 	vmov	s15, r3
 800528e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005292:	ed9f 7a7b 	vldr	s14, [pc, #492]	@ 8005480 <evaluate_voltage_slope+0x2b0>
 8005296:	ee27 7a87 	vmul.f32	s14, s15, s14
 800529a:	eddf 6a7a 	vldr	s13, [pc, #488]	@ 8005484 <evaluate_voltage_slope+0x2b4>
 800529e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80052a2:	edc7 7a03 	vstr	s15, [r7, #12]
		float delta = current_voltage - prev_voltage;
 80052a6:	ed97 7a03 	vldr	s14, [r7, #12]
 80052aa:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 80052ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80052b2:	edc7 7a02 	vstr	s15, [r7, #8]

		// 计算相对变化率（相对于VREF）
		float relative_delta = fabsf(delta) / VREF;
 80052b6:	edd7 7a02 	vldr	s15, [r7, #8]
 80052ba:	eeb0 7ae7 	vabs.f32	s14, s15
 80052be:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8005480 <evaluate_voltage_slope+0x2b0>
 80052c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80052c6:	edc7 7a01 	vstr	s15, [r7, #4]

		// 忽略微小变化（小于0.05% VREF）
		if (relative_delta < 0.0005f) {
 80052ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80052ce:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 800548c <evaluate_voltage_slope+0x2bc>
 80052d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052da:	d502      	bpl.n	80052e2 <evaluate_voltage_slope+0x112>
			prev_voltage = current_voltage;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	64fb      	str	r3, [r7, #76]	@ 0x4c
			continue;
 80052e0:	e01f      	b.n	8005322 <evaluate_voltage_slope+0x152>
		}

		significant_changes++;
 80052e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052e4:	3301      	adds	r3, #1
 80052e6:	647b      	str	r3, [r7, #68]	@ 0x44

		// 确定当前变化方向
		int current_direction = (delta > 0) ? 1 : -1;
 80052e8:	edd7 7a02 	vldr	s15, [r7, #8]
 80052ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80052f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052f4:	dd01      	ble.n	80052fa <evaluate_voltage_slope+0x12a>
 80052f6:	2301      	movs	r3, #1
 80052f8:	e001      	b.n	80052fe <evaluate_voltage_slope+0x12e>
 80052fa:	f04f 33ff 	mov.w	r3, #4294967295
 80052fe:	603b      	str	r3, [r7, #0]

		// 初始化首个有效方向
		if (first_direction == 0) {
 8005300:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005302:	2b00      	cmp	r3, #0
 8005304:	d102      	bne.n	800530c <evaluate_voltage_slope+0x13c>
			first_direction = current_direction;
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	653b      	str	r3, [r7, #80]	@ 0x50
 800530a:	e008      	b.n	800531e <evaluate_voltage_slope+0x14e>
		}
		// 检测方向变化
		else if (current_direction != first_direction) {
 800530c:	683a      	ldr	r2, [r7, #0]
 800530e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005310:	429a      	cmp	r2, r3
 8005312:	d004      	beq.n	800531e <evaluate_voltage_slope+0x14e>
			direction_changes++;
 8005314:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005316:	3301      	adds	r3, #1
 8005318:	64bb      	str	r3, [r7, #72]	@ 0x48
			consistent_direction = 0; // 方向改变，非单调
 800531a:	2300      	movs	r3, #0
 800531c:	657b      	str	r3, [r7, #84]	@ 0x54
		}

		prev_voltage = current_voltage;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	64fb      	str	r3, [r7, #76]	@ 0x4c
	for (int i = start_index + 1; i < start_index + 20; i++) {
 8005322:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005324:	3301      	adds	r3, #1
 8005326:	643b      	str	r3, [r7, #64]	@ 0x40
 8005328:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800532a:	3313      	adds	r3, #19
 800532c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800532e:	429a      	cmp	r2, r3
 8005330:	dda7      	ble.n	8005282 <evaluate_voltage_slope+0xb2>
	}

	float end_voltage = prev_voltage;
 8005332:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005334:	62bb      	str	r3, [r7, #40]	@ 0x28
	float total_change = fabsf(end_voltage - start_voltage);
 8005336:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800533a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800533e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005342:	eef0 7ae7 	vabs.f32	s15, s15
 8005346:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	float relative_total_change = total_change / VREF;
 800534a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800534e:	eddf 6a4c 	vldr	s13, [pc, #304]	@ 8005480 <evaluate_voltage_slope+0x2b0>
 8005352:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005356:	edc7 7a08 	vstr	s15, [r7, #32]

	// 计算平均变化率（绝对值）
	float total_slope = 0;
 800535a:	f04f 0300 	mov.w	r3, #0
 800535e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	int num_slopes = 0;
 8005360:	2300      	movs	r3, #0
 8005362:	63bb      	str	r3, [r7, #56]	@ 0x38
	for (int i = start_index; i < start_index + 19; i++) {
 8005364:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005366:	637b      	str	r3, [r7, #52]	@ 0x34
 8005368:	e038      	b.n	80053dc <evaluate_voltage_slope+0x20c>
		float v1 = (adc_buffer[i] * VREF) / 4095.0f;
 800536a:	4a44      	ldr	r2, [pc, #272]	@ (800547c <evaluate_voltage_slope+0x2ac>)
 800536c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800536e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005372:	ee07 3a90 	vmov	s15, r3
 8005376:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800537a:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 8005480 <evaluate_voltage_slope+0x2b0>
 800537e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005382:	eddf 6a40 	vldr	s13, [pc, #256]	@ 8005484 <evaluate_voltage_slope+0x2b4>
 8005386:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800538a:	edc7 7a05 	vstr	s15, [r7, #20]
		float v2 = (adc_buffer[i + 1] * VREF) / 4095.0f;
 800538e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005390:	3301      	adds	r3, #1
 8005392:	4a3a      	ldr	r2, [pc, #232]	@ (800547c <evaluate_voltage_slope+0x2ac>)
 8005394:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005398:	ee07 3a90 	vmov	s15, r3
 800539c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053a0:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8005480 <evaluate_voltage_slope+0x2b0>
 80053a4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80053a8:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8005484 <evaluate_voltage_slope+0x2b4>
 80053ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80053b0:	edc7 7a04 	vstr	s15, [r7, #16]
		total_slope += fabsf(v2 - v1);
 80053b4:	ed97 7a04 	vldr	s14, [r7, #16]
 80053b8:	edd7 7a05 	vldr	s15, [r7, #20]
 80053bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80053c0:	eef0 7ae7 	vabs.f32	s15, s15
 80053c4:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80053c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053cc:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		num_slopes++;
 80053d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053d2:	3301      	adds	r3, #1
 80053d4:	63bb      	str	r3, [r7, #56]	@ 0x38
	for (int i = start_index; i < start_index + 19; i++) {
 80053d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053d8:	3301      	adds	r3, #1
 80053da:	637b      	str	r3, [r7, #52]	@ 0x34
 80053dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80053de:	3312      	adds	r3, #18
 80053e0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80053e2:	429a      	cmp	r2, r3
 80053e4:	ddc1      	ble.n	800536a <evaluate_voltage_slope+0x19a>
	}
	float avg_slope = (num_slopes > 0) ? total_slope / num_slopes : 0;
 80053e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	dd09      	ble.n	8005400 <evaluate_voltage_slope+0x230>
 80053ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053ee:	ee07 3a90 	vmov	s15, r3
 80053f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80053f6:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 80053fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053fe:	e001      	b.n	8005404 <evaluate_voltage_slope+0x234>
 8005400:	eddf 7a23 	vldr	s15, [pc, #140]	@ 8005490 <evaluate_voltage_slope+0x2c0>
 8005404:	edc7 7a07 	vstr	s15, [r7, #28]
	float relative_avg_slope = avg_slope / VREF; // 相对平均斜率
 8005408:	ed97 7a07 	vldr	s14, [r7, #28]
 800540c:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 8005480 <evaluate_voltage_slope+0x2b0>
 8005410:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005414:	edc7 7a06 	vstr	s15, [r7, #24]

	// 计算最终判断结果
	// 1. 单调上升且整体有显著变化 → 电感/电容
	// 2. 单调上升但变化平缓，不过持续时间长 → 电感/电容
	// 3. 其他情况 → 电阻
	if (consistent_direction && first_direction == 1) {
 8005418:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800541a:	2b00      	cmp	r3, #0
 800541c:	d019      	beq.n	8005452 <evaluate_voltage_slope+0x282>
 800541e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005420:	2b01      	cmp	r3, #1
 8005422:	d116      	bne.n	8005452 <evaluate_voltage_slope+0x282>
		// 单调上升情况
		if (relative_total_change > 0.01f
 8005424:	edd7 7a08 	vldr	s15, [r7, #32]
 8005428:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8005494 <evaluate_voltage_slope+0x2c4>
 800542c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005434:	dc0b      	bgt.n	800544e <evaluate_voltage_slope+0x27e>
				|| (relative_avg_slope < 0.0005f && significant_changes > 15)) {
 8005436:	edd7 7a06 	vldr	s15, [r7, #24]
 800543a:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800548c <evaluate_voltage_slope+0x2bc>
 800543e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005446:	d504      	bpl.n	8005452 <evaluate_voltage_slope+0x282>
 8005448:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800544a:	2b0f      	cmp	r3, #15
 800544c:	dd01      	ble.n	8005452 <evaluate_voltage_slope+0x282>
			return 1; // 电感/电容
 800544e:	2301      	movs	r3, #1
 8005450:	e00e      	b.n	8005470 <evaluate_voltage_slope+0x2a0>
		}
	}

	// 其他情况判断
	return (consistent_direction && relative_avg_slope < 0.0005f) ? 1 : 0;
 8005452:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005454:	2b00      	cmp	r3, #0
 8005456:	d00a      	beq.n	800546e <evaluate_voltage_slope+0x29e>
 8005458:	edd7 7a06 	vldr	s15, [r7, #24]
 800545c:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 800548c <evaluate_voltage_slope+0x2bc>
 8005460:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005468:	d501      	bpl.n	800546e <evaluate_voltage_slope+0x29e>
 800546a:	2301      	movs	r3, #1
 800546c:	e000      	b.n	8005470 <evaluate_voltage_slope+0x2a0>
 800546e:	2300      	movs	r3, #0
}
 8005470:	4618      	mov	r0, r3
 8005472:	3764      	adds	r7, #100	@ 0x64
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr
 800547c:	20000338 	.word	0x20000338
 8005480:	40533333 	.word	0x40533333
 8005484:	457ff000 	.word	0x457ff000
 8005488:	3dcccccd 	.word	0x3dcccccd
 800548c:	3a03126f 	.word	0x3a03126f
 8005490:	00000000 	.word	0x00000000
 8005494:	3c23d70a 	.word	0x3c23d70a

08005498 <Find_tau>:
float Find_tau() {
 8005498:	b580      	push	{r7, lr}
 800549a:	b090      	sub	sp, #64	@ 0x40
 800549c:	af00      	add	r7, sp, #0
	float v_steady;
	float v_end;
	//float mid_index;
	//float v_mid;

	for (int i = 0; i < BUFFER_SIZE; i++) {
 800549e:	2300      	movs	r3, #0
 80054a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80054a2:	e027      	b.n	80054f4 <Find_tau+0x5c>
		float voltage = (adc_buffer[i] * VREF) / 4095.0f;
 80054a4:	4a7a      	ldr	r2, [pc, #488]	@ (8005690 <Find_tau+0x1f8>)
 80054a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054ac:	ee07 3a90 	vmov	s15, r3
 80054b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80054b4:	ed9f 7a77 	vldr	s14, [pc, #476]	@ 8005694 <Find_tau+0x1fc>
 80054b8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80054bc:	eddf 6a76 	vldr	s13, [pc, #472]	@ 8005698 <Find_tau+0x200>
 80054c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80054c4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		if (voltage > MIN_VOLTAGE) {
 80054c8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80054cc:	ed9f 7a73 	vldr	s14, [pc, #460]	@ 800569c <Find_tau+0x204>
 80054d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054d8:	dd09      	ble.n	80054ee <Find_tau+0x56>
			start_index = i;
 80054da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054dc:	ee07 3a90 	vmov	s15, r3
 80054e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80054e4:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
			v_start = voltage;
 80054e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ea:	623b      	str	r3, [r7, #32]
			break;
 80054ec:	e006      	b.n	80054fc <Find_tau+0x64>
	for (int i = 0; i < BUFFER_SIZE; i++) {
 80054ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054f0:	3301      	adds	r3, #1
 80054f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80054f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054fa:	dbd3      	blt.n	80054a4 <Find_tau+0xc>
		}
	}
	v_end = (adc_buffer[BUFFER_SIZE - 1] * VREF) / 4095.0f;
 80054fc:	4b64      	ldr	r3, [pc, #400]	@ (8005690 <Find_tau+0x1f8>)
 80054fe:	f8b3 3ffe 	ldrh.w	r3, [r3, #4094]	@ 0xffe
 8005502:	ee07 3a90 	vmov	s15, r3
 8005506:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800550a:	ed9f 7a62 	vldr	s14, [pc, #392]	@ 8005694 <Find_tau+0x1fc>
 800550e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005512:	eddf 6a61 	vldr	s13, [pc, #388]	@ 8005698 <Find_tau+0x200>
 8005516:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800551a:	edc7 7a07 	vstr	s15, [r7, #28]
	for (int i = 0; i < BUFFER_SIZE; i++) {
 800551e:	2300      	movs	r3, #0
 8005520:	633b      	str	r3, [r7, #48]	@ 0x30
 8005522:	e026      	b.n	8005572 <Find_tau+0xda>
		float voltage = (adc_buffer[i] * VREF) / 4095.0f;
 8005524:	4a5a      	ldr	r2, [pc, #360]	@ (8005690 <Find_tau+0x1f8>)
 8005526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005528:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800552c:	ee07 3a90 	vmov	s15, r3
 8005530:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005534:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 8005694 <Find_tau+0x1fc>
 8005538:	ee27 7a87 	vmul.f32	s14, s15, s14
 800553c:	eddf 6a56 	vldr	s13, [pc, #344]	@ 8005698 <Find_tau+0x200>
 8005540:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005544:	edc7 7a01 	vstr	s15, [r7, #4]
		if (voltage >= v_end) {
 8005548:	ed97 7a01 	vldr	s14, [r7, #4]
 800554c:	edd7 7a07 	vldr	s15, [r7, #28]
 8005550:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005558:	db08      	blt.n	800556c <Find_tau+0xd4>
			v_steady = v_end;
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	63bb      	str	r3, [r7, #56]	@ 0x38
			steady_index = i;
 800555e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005560:	ee07 3a90 	vmov	s15, r3
 8005564:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005568:	edc7 7a00 	vstr	s15, [r7]
	for (int i = 0; i < BUFFER_SIZE; i++) {
 800556c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800556e:	3301      	adds	r3, #1
 8005570:	633b      	str	r3, [r7, #48]	@ 0x30
 8005572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005574:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005578:	dbd4      	blt.n	8005524 <Find_tau+0x8c>
		}
	}
	// 3. 寻找目标点
	float v_target1 = v_steady * 0.632;  // 63.2% VREF (1个时间常数)
 800557a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800557c:	f7fa ffec 	bl	8000558 <__aeabi_f2d>
 8005580:	a33f      	add	r3, pc, #252	@ (adr r3, 8005680 <Find_tau+0x1e8>)
 8005582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005586:	f7fb f83f 	bl	8000608 <__aeabi_dmul>
 800558a:	4602      	mov	r2, r0
 800558c:	460b      	mov	r3, r1
 800558e:	4610      	mov	r0, r2
 8005590:	4619      	mov	r1, r3
 8005592:	f7fb fb11 	bl	8000bb8 <__aeabi_d2f>
 8005596:	4603      	mov	r3, r0
 8005598:	61bb      	str	r3, [r7, #24]
	float v_target2 = v_steady * 0.865;  // 86.5% VREF (2个时间常数)
 800559a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800559c:	f7fa ffdc 	bl	8000558 <__aeabi_f2d>
 80055a0:	a339      	add	r3, pc, #228	@ (adr r3, 8005688 <Find_tau+0x1f0>)
 80055a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a6:	f7fb f82f 	bl	8000608 <__aeabi_dmul>
 80055aa:	4602      	mov	r2, r0
 80055ac:	460b      	mov	r3, r1
 80055ae:	4610      	mov	r0, r2
 80055b0:	4619      	mov	r1, r3
 80055b2:	f7fb fb01 	bl	8000bb8 <__aeabi_d2f>
 80055b6:	4603      	mov	r3, r0
 80055b8:	617b      	str	r3, [r7, #20]
	uint16_t index1 = 0, index2 = 0;
 80055ba:	2300      	movs	r3, #0
 80055bc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80055be:	2300      	movs	r3, #0
 80055c0:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	for (int i = start_index; i < BUFFER_SIZE; i++) {
 80055c2:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80055c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80055ca:	ee17 3a90 	vmov	r3, s15
 80055ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80055d0:	e031      	b.n	8005636 <Find_tau+0x19e>
		float voltage = (adc_buffer[i] * VREF) / 4095.0f;
 80055d2:	4a2f      	ldr	r2, [pc, #188]	@ (8005690 <Find_tau+0x1f8>)
 80055d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055da:	ee07 3a90 	vmov	s15, r3
 80055de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055e2:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8005694 <Find_tau+0x1fc>
 80055e6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80055ea:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8005698 <Find_tau+0x200>
 80055ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80055f2:	edc7 7a04 	vstr	s15, [r7, #16]

		if (index1 == 0 && voltage >= v_target1) {
 80055f6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d10a      	bne.n	8005612 <Find_tau+0x17a>
 80055fc:	ed97 7a04 	vldr	s14, [r7, #16]
 8005600:	edd7 7a06 	vldr	s15, [r7, #24]
 8005604:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800560c:	db01      	blt.n	8005612 <Find_tau+0x17a>
			index1 = i;
 800560e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005610:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		}

		if (index2 == 0 && voltage >= v_target2) {
 8005612:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005614:	2b00      	cmp	r3, #0
 8005616:	d10b      	bne.n	8005630 <Find_tau+0x198>
 8005618:	ed97 7a04 	vldr	s14, [r7, #16]
 800561c:	edd7 7a05 	vldr	s15, [r7, #20]
 8005620:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005628:	db02      	blt.n	8005630 <Find_tau+0x198>
			index2 = i;
 800562a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800562c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
			break;  // 找到第二个点后停止
 800562e:	e006      	b.n	800563e <Find_tau+0x1a6>
	for (int i = start_index; i < BUFFER_SIZE; i++) {
 8005630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005632:	3301      	adds	r3, #1
 8005634:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005638:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800563c:	dbc9      	blt.n	80055d2 <Find_tau+0x13a>
		}
	}

	// 4. 计算时间常数
	float delta_index = index2 - index1;
 800563e:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8005640:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005642:	1ad3      	subs	r3, r2, r3
 8005644:	ee07 3a90 	vmov	s15, r3
 8005648:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800564c:	edc7 7a03 	vstr	s15, [r7, #12]
	float tau = delta_index * (1.0f / SAMPLE_RATE);  // 采样间隔时间
 8005650:	edd7 7a03 	vldr	s15, [r7, #12]
 8005654:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 80056a0 <Find_tau+0x208>
 8005658:	ee67 7a87 	vmul.f32	s15, s15, s14
 800565c:	edc7 7a02 	vstr	s15, [r7, #8]
//    		mid_index=i;
//    		break;
//    	}
//    }
//    float tau=(mid_index-start_index) * (1.0f / SAMPLE_RATE);
	if (index2 - index1 > 10) {
 8005660:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8005662:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	2b0a      	cmp	r3, #10
 8005668:	dd01      	ble.n	800566e <Find_tau+0x1d6>
		return tau;
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	e001      	b.n	8005672 <Find_tau+0x1da>
	} else {
		return 0;
 800566e:	f04f 0300 	mov.w	r3, #0
	}
}
 8005672:	ee07 3a90 	vmov	s15, r3
 8005676:	eeb0 0a67 	vmov.f32	s0, s15
 800567a:	3740      	adds	r7, #64	@ 0x40
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}
 8005680:	10624dd3 	.word	0x10624dd3
 8005684:	3fe43958 	.word	0x3fe43958
 8005688:	7ae147ae 	.word	0x7ae147ae
 800568c:	3febae14 	.word	0x3febae14
 8005690:	20000338 	.word	0x20000338
 8005694:	40533333 	.word	0x40533333
 8005698:	457ff000 	.word	0x457ff000
 800569c:	3d4ccccd 	.word	0x3d4ccccd
 80056a0:	360637bd 	.word	0x360637bd

080056a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80056aa:	f001 f893 	bl	80067d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80056ae:	f000 f8f7 	bl	80058a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80056b2:	f7fb fe65 	bl	8001380 <MX_GPIO_Init>
  MX_DMA_Init();
 80056b6:	f7fb fe43 	bl	8001340 <MX_DMA_Init>
  MX_ADC1_Init();
 80056ba:	f7fb fd71 	bl	80011a0 <MX_ADC1_Init>
  MX_TIM3_Init();
 80056be:	f000 fed1 	bl	8006464 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80056c2:	f000 ffeb 	bl	800669c <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80056c6:	f7fb ff15 	bl	80014f4 <MX_I2C1_Init>
  MX_TIM2_Init();
 80056ca:	f000 fe5b 	bl	8006384 <MX_TIM2_Init>
  MX_TIM4_Init();
 80056ce:	f000 ff15 	bl	80064fc <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
	HAL_Delay(30); // 单片机启动比OLED上电快,需要延迟等待一下
 80056d2:	201e      	movs	r0, #30
 80056d4:	f001 f8f0 	bl	80068b8 <HAL_Delay>
	OLED_Init();
 80056d8:	f000 f978 	bl	80059cc <OLED_Init>
	HAL_TIM_Base_Start_IT(&htim4);
 80056dc:	4863      	ldr	r0, [pc, #396]	@ (800586c <main+0x1c8>)
 80056de:	f003 fec7 	bl	8009470 <HAL_TIM_Base_Start_IT>
	KEY_Init();
 80056e2:	f7fb ff7d 	bl	80015e0 <KEY_Init>
	//启用TIM3触发ADC
	TIM_HandleTypeDef *adc_timer = &htim3;
 80056e6:	4b62      	ldr	r3, [pc, #392]	@ (8005870 <main+0x1cc>)
 80056e8:	607b      	str	r3, [r7, #4]
	// 设置采样率 (500kHz)
	adc_timer->Instance->PSC = 100 - 1;   // 99 (CubeMX配置)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	2263      	movs	r2, #99	@ 0x63
 80056f0:	629a      	str	r2, [r3, #40]	@ 0x28
	adc_timer->Instance->ARR = 2 - 1;   // 9 (CubeMX配置);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	2201      	movs	r2, #1
 80056f8:	62da      	str	r2, [r3, #44]	@ 0x2c
	//adc_timer->Instance->ARR = 2 - 1;   // 9 (CubeMX配置)
	HAL_TIM_Base_Start(adc_timer);
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f003 fe5e 	bl	80093bc <HAL_TIM_Base_Start>

	//开屏动画
	OLED_NewFrame();
 8005700:	f000 f9c0 	bl	8005a84 <OLED_NewFrame>
	OLED_PrintString(0, 0, "电路黑箱测试仪", &font12x12, OLED_COLOR_NORMAL);
 8005704:	2300      	movs	r3, #0
 8005706:	9300      	str	r3, [sp, #0]
 8005708:	4b5a      	ldr	r3, [pc, #360]	@ (8005874 <main+0x1d0>)
 800570a:	4a5b      	ldr	r2, [pc, #364]	@ (8005878 <main+0x1d4>)
 800570c:	2100      	movs	r1, #0
 800570e:	2000      	movs	r0, #0
 8005710:	f000 fc25 	bl	8005f5e <OLED_PrintString>
	OLED_PrintString(0, 15, "李博宇 23231054", &font12x12, OLED_COLOR_NORMAL);
 8005714:	2300      	movs	r3, #0
 8005716:	9300      	str	r3, [sp, #0]
 8005718:	4b56      	ldr	r3, [pc, #344]	@ (8005874 <main+0x1d0>)
 800571a:	4a58      	ldr	r2, [pc, #352]	@ (800587c <main+0x1d8>)
 800571c:	210f      	movs	r1, #15
 800571e:	2000      	movs	r0, #0
 8005720:	f000 fc1d 	bl	8005f5e <OLED_PrintString>
	OLED_PrintString(0, 30, "薛诗上 23211305", &font12x12, OLED_COLOR_NORMAL);
 8005724:	2300      	movs	r3, #0
 8005726:	9300      	str	r3, [sp, #0]
 8005728:	4b52      	ldr	r3, [pc, #328]	@ (8005874 <main+0x1d0>)
 800572a:	4a55      	ldr	r2, [pc, #340]	@ (8005880 <main+0x1dc>)
 800572c:	211e      	movs	r1, #30
 800572e:	2000      	movs	r0, #0
 8005730:	f000 fc15 	bl	8005f5e <OLED_PrintString>
	OLED_PrintString(0, 45, "张烁今 23211311", &font12x12, OLED_COLOR_NORMAL);
 8005734:	2300      	movs	r3, #0
 8005736:	9300      	str	r3, [sp, #0]
 8005738:	4b4e      	ldr	r3, [pc, #312]	@ (8005874 <main+0x1d0>)
 800573a:	4a52      	ldr	r2, [pc, #328]	@ (8005884 <main+0x1e0>)
 800573c:	212d      	movs	r1, #45	@ 0x2d
 800573e:	2000      	movs	r0, #0
 8005740:	f000 fc0d 	bl	8005f5e <OLED_PrintString>
	OLED_ShowFrame();
 8005744:	f000 f9aa 	bl	8005a9c <OLED_ShowFrame>
	HAL_Delay(2000);
 8005748:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800574c:	f001 f8b4 	bl	80068b8 <HAL_Delay>
  /* USER CODE BEGIN WHILE */
//按钮相关变量
	Key_State state;
//	uint32_t idle_time;这个是检验倒计时是否正常工作的变量，没用了目前
	while (1) {
		state = KEY_GetState();
 8005750:	f7fb ff58 	bl	8001604 <KEY_GetState>
 8005754:	4603      	mov	r3, r0
 8005756:	70fb      	strb	r3, [r7, #3]

					if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == GPIO_PIN_SET) {
 8005758:	2102      	movs	r1, #2
 800575a:	484b      	ldr	r0, [pc, #300]	@ (8005888 <main+0x1e4>)
 800575c:	f002 fcb6 	bl	80080cc <HAL_GPIO_ReadPin>
 8005760:	4603      	mov	r3, r0
 8005762:	2b01      	cmp	r3, #1
 8005764:	d125      	bne.n	80057b2 <main+0x10e>
					      if(state == KEY_STATE_SHORT_PRESS) {
 8005766:	78fb      	ldrb	r3, [r7, #3]
 8005768:	2b02      	cmp	r3, #2
 800576a:	d15f      	bne.n	800582c <main+0x188>
				         OLED_NewFrame();
 800576c:	f000 f98a 	bl	8005a84 <OLED_NewFrame>
				         OLED_PrintString(0, 0, "BLACK_BOX TEST", &font12x12, OLED_COLOR_NORMAL);
 8005770:	2300      	movs	r3, #0
 8005772:	9300      	str	r3, [sp, #0]
 8005774:	4b3f      	ldr	r3, [pc, #252]	@ (8005874 <main+0x1d0>)
 8005776:	4a45      	ldr	r2, [pc, #276]	@ (800588c <main+0x1e8>)
 8005778:	2100      	movs	r1, #0
 800577a:	2000      	movs	r0, #0
 800577c:	f000 fbef 	bl	8005f5e <OLED_PrintString>
				         OLED_ShowFrame();
 8005780:	f000 f98c 	bl	8005a9c <OLED_ShowFrame>
				         HAL_Delay(1000);
 8005784:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005788:	f001 f896 	bl	80068b8 <HAL_Delay>
				         OLED_NewFrame();
 800578c:	f000 f97a 	bl	8005a84 <OLED_NewFrame>
						 OLED_PrintString(0, 0, "under testing ...", &font12x12, OLED_COLOR_NORMAL);
 8005790:	2300      	movs	r3, #0
 8005792:	9300      	str	r3, [sp, #0]
 8005794:	4b37      	ldr	r3, [pc, #220]	@ (8005874 <main+0x1d0>)
 8005796:	4a3e      	ldr	r2, [pc, #248]	@ (8005890 <main+0x1ec>)
 8005798:	2100      	movs	r1, #0
 800579a:	2000      	movs	r0, #0
 800579c:	f000 fbdf 	bl	8005f5e <OLED_PrintString>
						 OLED_ShowFrame();
 80057a0:	f000 f97c 	bl	8005a9c <OLED_ShowFrame>
						 black_box_test();
 80057a4:	f7fc f938 	bl	8001a18 <black_box_test>
						 HAL_Delay(1500);
 80057a8:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80057ac:	f001 f884 	bl	80068b8 <HAL_Delay>
 80057b0:	e03c      	b.n	800582c <main+0x188>
					       //}

					}
					//原件测量，基本思路同上
					else {
					      if(state == KEY_STATE_SHORT_PRESS) {
 80057b2:	78fb      	ldrb	r3, [r7, #3]
 80057b4:	2b02      	cmp	r3, #2
 80057b6:	d122      	bne.n	80057fe <main+0x15a>
					         OLED_NewFrame();
 80057b8:	f000 f964 	bl	8005a84 <OLED_NewFrame>
					         OLED_PrintString(0, 0, "COMPONENT TEST", &font12x12, OLED_COLOR_NORMAL);
 80057bc:	2300      	movs	r3, #0
 80057be:	9300      	str	r3, [sp, #0]
 80057c0:	4b2c      	ldr	r3, [pc, #176]	@ (8005874 <main+0x1d0>)
 80057c2:	4a34      	ldr	r2, [pc, #208]	@ (8005894 <main+0x1f0>)
 80057c4:	2100      	movs	r1, #0
 80057c6:	2000      	movs	r0, #0
 80057c8:	f000 fbc9 	bl	8005f5e <OLED_PrintString>
					         OLED_ShowFrame();
 80057cc:	f000 f966 	bl	8005a9c <OLED_ShowFrame>
					         OLED_NewFrame();
 80057d0:	f000 f958 	bl	8005a84 <OLED_NewFrame>
					         HAL_Delay(1000);
 80057d4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80057d8:	f001 f86e 	bl	80068b8 <HAL_Delay>
							 OLED_PrintString(0, 0, "under testing ...", &font12x12, OLED_COLOR_NORMAL);
 80057dc:	2300      	movs	r3, #0
 80057de:	9300      	str	r3, [sp, #0]
 80057e0:	4b24      	ldr	r3, [pc, #144]	@ (8005874 <main+0x1d0>)
 80057e2:	4a2b      	ldr	r2, [pc, #172]	@ (8005890 <main+0x1ec>)
 80057e4:	2100      	movs	r1, #0
 80057e6:	2000      	movs	r0, #0
 80057e8:	f000 fbb9 	bl	8005f5e <OLED_PrintString>
							 OLED_ShowFrame();
 80057ec:	f000 f956 	bl	8005a9c <OLED_ShowFrame>
				             component_test();
 80057f0:	f7fc f966 	bl	8001ac0 <component_test>
							 HAL_Delay(1500);
 80057f4:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80057f8:	f001 f85e 	bl	80068b8 <HAL_Delay>
 80057fc:	e016      	b.n	800582c <main+0x188>
						       }
						      else if(state == KEY_STATE_LONG_PRESS) {
 80057fe:	78fb      	ldrb	r3, [r7, #3]
 8005800:	2b03      	cmp	r3, #3
 8005802:	d113      	bne.n	800582c <main+0x188>
						    	  OLED_NewFrame();
 8005804:	f000 f93e 	bl	8005a84 <OLED_NewFrame>
							    	  OLED_PrintString(0, 0, "POWER OFF", &font12x12, OLED_COLOR_NORMAL);
 8005808:	2300      	movs	r3, #0
 800580a:	9300      	str	r3, [sp, #0]
 800580c:	4b19      	ldr	r3, [pc, #100]	@ (8005874 <main+0x1d0>)
 800580e:	4a22      	ldr	r2, [pc, #136]	@ (8005898 <main+0x1f4>)
 8005810:	2100      	movs	r1, #0
 8005812:	2000      	movs	r0, #0
 8005814:	f000 fba3 	bl	8005f5e <OLED_PrintString>
							    	  OLED_ShowFrame();
 8005818:	f000 f940 	bl	8005a9c <OLED_ShowFrame>
							    	 HAL_Delay(10);
 800581c:	200a      	movs	r0, #10
 800581e:	f001 f84b 	bl	80068b8 <HAL_Delay>
						     HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8005822:	2200      	movs	r2, #0
 8005824:	2108      	movs	r1, #8
 8005826:	481d      	ldr	r0, [pc, #116]	@ (800589c <main+0x1f8>)
 8005828:	f002 fc68 	bl	80080fc <HAL_GPIO_WritePin>
//		OLED_PrintString(0, 0, message1, &afont8x6, OLED_COLOR_NORMAL);
//		OLED_PrintString(0, 10, message2, &afont8x6, OLED_COLOR_NORMAL);
//		OLED_PrintString(0, 40, msg, &font16x16, OLED_COLOR_NORMAL);
//		OLED_ShowFrame();
//30s无操作关机函数
		HAL_Delay(1500);  // 每2秒测量一次
 800582c:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8005830:	f001 f842 	bl	80068b8 <HAL_Delay>
		if(KEY_GetIdleState() == IDLE_STATE_30S_INACTIVE) {
 8005834:	f7fb ff00 	bl	8001638 <KEY_GetIdleState>
 8005838:	4603      	mov	r3, r0
 800583a:	2b01      	cmp	r3, #1
 800583c:	d188      	bne.n	8005750 <main+0xac>
	                // 30秒无操作处理
	           OLED_NewFrame();
 800583e:	f000 f921 	bl	8005a84 <OLED_NewFrame>
	           OLED_PrintString(0, 0, "POWER OFF", &font12x12, OLED_COLOR_NORMAL);
 8005842:	2300      	movs	r3, #0
 8005844:	9300      	str	r3, [sp, #0]
 8005846:	4b0b      	ldr	r3, [pc, #44]	@ (8005874 <main+0x1d0>)
 8005848:	4a13      	ldr	r2, [pc, #76]	@ (8005898 <main+0x1f4>)
 800584a:	2100      	movs	r1, #0
 800584c:	2000      	movs	r0, #0
 800584e:	f000 fb86 	bl	8005f5e <OLED_PrintString>
	           OLED_ShowFrame();
 8005852:	f000 f923 	bl	8005a9c <OLED_ShowFrame>
	          HAL_Delay(1000);
 8005856:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800585a:	f001 f82d 	bl	80068b8 <HAL_Delay>
	          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 800585e:	2200      	movs	r2, #0
 8005860:	2108      	movs	r1, #8
 8005862:	480e      	ldr	r0, [pc, #56]	@ (800589c <main+0x1f8>)
 8005864:	f002 fc4a 	bl	80080fc <HAL_GPIO_WritePin>
		state = KEY_GetState();
 8005868:	e772      	b.n	8005750 <main+0xac>
 800586a:	bf00      	nop
 800586c:	200080e8 	.word	0x200080e8
 8005870:	200080a0 	.word	0x200080a0
 8005874:	08010984 	.word	0x08010984
 8005878:	0800e974 	.word	0x0800e974
 800587c:	0800e98c 	.word	0x0800e98c
 8005880:	0800e9a0 	.word	0x0800e9a0
 8005884:	0800e9b4 	.word	0x0800e9b4
 8005888:	40020400 	.word	0x40020400
 800588c:	0800e9c8 	.word	0x0800e9c8
 8005890:	0800e9d8 	.word	0x0800e9d8
 8005894:	0800e9ec 	.word	0x0800e9ec
 8005898:	0800e9fc 	.word	0x0800e9fc
 800589c:	40020000 	.word	0x40020000

080058a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b094      	sub	sp, #80	@ 0x50
 80058a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80058a6:	f107 0320 	add.w	r3, r7, #32
 80058aa:	2230      	movs	r2, #48	@ 0x30
 80058ac:	2100      	movs	r1, #0
 80058ae:	4618      	mov	r0, r3
 80058b0:	f005 fe7d 	bl	800b5ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80058b4:	f107 030c 	add.w	r3, r7, #12
 80058b8:	2200      	movs	r2, #0
 80058ba:	601a      	str	r2, [r3, #0]
 80058bc:	605a      	str	r2, [r3, #4]
 80058be:	609a      	str	r2, [r3, #8]
 80058c0:	60da      	str	r2, [r3, #12]
 80058c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80058c4:	2300      	movs	r3, #0
 80058c6:	60bb      	str	r3, [r7, #8]
 80058c8:	4b27      	ldr	r3, [pc, #156]	@ (8005968 <SystemClock_Config+0xc8>)
 80058ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058cc:	4a26      	ldr	r2, [pc, #152]	@ (8005968 <SystemClock_Config+0xc8>)
 80058ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80058d4:	4b24      	ldr	r3, [pc, #144]	@ (8005968 <SystemClock_Config+0xc8>)
 80058d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058dc:	60bb      	str	r3, [r7, #8]
 80058de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80058e0:	2300      	movs	r3, #0
 80058e2:	607b      	str	r3, [r7, #4]
 80058e4:	4b21      	ldr	r3, [pc, #132]	@ (800596c <SystemClock_Config+0xcc>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a20      	ldr	r2, [pc, #128]	@ (800596c <SystemClock_Config+0xcc>)
 80058ea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80058ee:	6013      	str	r3, [r2, #0]
 80058f0:	4b1e      	ldr	r3, [pc, #120]	@ (800596c <SystemClock_Config+0xcc>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80058f8:	607b      	str	r3, [r7, #4]
 80058fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80058fc:	2302      	movs	r3, #2
 80058fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005900:	2301      	movs	r3, #1
 8005902:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005904:	2310      	movs	r3, #16
 8005906:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005908:	2302      	movs	r3, #2
 800590a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800590c:	2300      	movs	r3, #0
 800590e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8005910:	2308      	movs	r3, #8
 8005912:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8005914:	2364      	movs	r3, #100	@ 0x64
 8005916:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005918:	2302      	movs	r3, #2
 800591a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800591c:	2304      	movs	r3, #4
 800591e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005920:	f107 0320 	add.w	r3, r7, #32
 8005924:	4618      	mov	r0, r3
 8005926:	f003 f8a1 	bl	8008a6c <HAL_RCC_OscConfig>
 800592a:	4603      	mov	r3, r0
 800592c:	2b00      	cmp	r3, #0
 800592e:	d001      	beq.n	8005934 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8005930:	f000 f81e 	bl	8005970 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005934:	230f      	movs	r3, #15
 8005936:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005938:	2302      	movs	r3, #2
 800593a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800593c:	2300      	movs	r3, #0
 800593e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005940:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005944:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005946:	2300      	movs	r3, #0
 8005948:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800594a:	f107 030c 	add.w	r3, r7, #12
 800594e:	2103      	movs	r1, #3
 8005950:	4618      	mov	r0, r3
 8005952:	f003 fb03 	bl	8008f5c <HAL_RCC_ClockConfig>
 8005956:	4603      	mov	r3, r0
 8005958:	2b00      	cmp	r3, #0
 800595a:	d001      	beq.n	8005960 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800595c:	f000 f808 	bl	8005970 <Error_Handler>
  }
}
 8005960:	bf00      	nop
 8005962:	3750      	adds	r7, #80	@ 0x50
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}
 8005968:	40023800 	.word	0x40023800
 800596c:	40007000 	.word	0x40007000

08005970 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005970:	b480      	push	{r7}
 8005972:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005974:	b672      	cpsid	i
}
 8005976:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8005978:	bf00      	nop
 800597a:	e7fd      	b.n	8005978 <Error_Handler+0x8>

0800597c <OLED_Send>:
 800597c:	b580      	push	{r7, lr}
 800597e:	b084      	sub	sp, #16
 8005980:	af02      	add	r7, sp, #8
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	460b      	mov	r3, r1
 8005986:	70fb      	strb	r3, [r7, #3]
 8005988:	78fb      	ldrb	r3, [r7, #3]
 800598a:	b29b      	uxth	r3, r3
 800598c:	f04f 32ff 	mov.w	r2, #4294967295
 8005990:	9200      	str	r2, [sp, #0]
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	2178      	movs	r1, #120	@ 0x78
 8005996:	4803      	ldr	r0, [pc, #12]	@ (80059a4 <OLED_Send+0x28>)
 8005998:	f002 fd0e 	bl	80083b8 <HAL_I2C_Master_Transmit>
 800599c:	bf00      	nop
 800599e:	3708      	adds	r7, #8
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}
 80059a4:	2000029c 	.word	0x2000029c

080059a8 <OLED_SendCmd>:
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b082      	sub	sp, #8
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	4603      	mov	r3, r0
 80059b0:	71fb      	strb	r3, [r7, #7]
 80059b2:	4a05      	ldr	r2, [pc, #20]	@ (80059c8 <OLED_SendCmd+0x20>)
 80059b4:	79fb      	ldrb	r3, [r7, #7]
 80059b6:	7053      	strb	r3, [r2, #1]
 80059b8:	2102      	movs	r1, #2
 80059ba:	4803      	ldr	r0, [pc, #12]	@ (80059c8 <OLED_SendCmd+0x20>)
 80059bc:	f7ff ffde 	bl	800597c <OLED_Send>
 80059c0:	bf00      	nop
 80059c2:	3708      	adds	r7, #8
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}
 80059c8:	20007fcc 	.word	0x20007fcc

080059cc <OLED_Init>:
 80059cc:	b580      	push	{r7, lr}
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	20ae      	movs	r0, #174	@ 0xae
 80059d2:	f7ff ffe9 	bl	80059a8 <OLED_SendCmd>
 80059d6:	2020      	movs	r0, #32
 80059d8:	f7ff ffe6 	bl	80059a8 <OLED_SendCmd>
 80059dc:	2010      	movs	r0, #16
 80059de:	f7ff ffe3 	bl	80059a8 <OLED_SendCmd>
 80059e2:	20b0      	movs	r0, #176	@ 0xb0
 80059e4:	f7ff ffe0 	bl	80059a8 <OLED_SendCmd>
 80059e8:	20c8      	movs	r0, #200	@ 0xc8
 80059ea:	f7ff ffdd 	bl	80059a8 <OLED_SendCmd>
 80059ee:	2000      	movs	r0, #0
 80059f0:	f7ff ffda 	bl	80059a8 <OLED_SendCmd>
 80059f4:	2010      	movs	r0, #16
 80059f6:	f7ff ffd7 	bl	80059a8 <OLED_SendCmd>
 80059fa:	2040      	movs	r0, #64	@ 0x40
 80059fc:	f7ff ffd4 	bl	80059a8 <OLED_SendCmd>
 8005a00:	2081      	movs	r0, #129	@ 0x81
 8005a02:	f7ff ffd1 	bl	80059a8 <OLED_SendCmd>
 8005a06:	20df      	movs	r0, #223	@ 0xdf
 8005a08:	f7ff ffce 	bl	80059a8 <OLED_SendCmd>
 8005a0c:	20a1      	movs	r0, #161	@ 0xa1
 8005a0e:	f7ff ffcb 	bl	80059a8 <OLED_SendCmd>
 8005a12:	20a6      	movs	r0, #166	@ 0xa6
 8005a14:	f7ff ffc8 	bl	80059a8 <OLED_SendCmd>
 8005a18:	20a8      	movs	r0, #168	@ 0xa8
 8005a1a:	f7ff ffc5 	bl	80059a8 <OLED_SendCmd>
 8005a1e:	203f      	movs	r0, #63	@ 0x3f
 8005a20:	f7ff ffc2 	bl	80059a8 <OLED_SendCmd>
 8005a24:	20a4      	movs	r0, #164	@ 0xa4
 8005a26:	f7ff ffbf 	bl	80059a8 <OLED_SendCmd>
 8005a2a:	20d3      	movs	r0, #211	@ 0xd3
 8005a2c:	f7ff ffbc 	bl	80059a8 <OLED_SendCmd>
 8005a30:	2000      	movs	r0, #0
 8005a32:	f7ff ffb9 	bl	80059a8 <OLED_SendCmd>
 8005a36:	20d5      	movs	r0, #213	@ 0xd5
 8005a38:	f7ff ffb6 	bl	80059a8 <OLED_SendCmd>
 8005a3c:	20f0      	movs	r0, #240	@ 0xf0
 8005a3e:	f7ff ffb3 	bl	80059a8 <OLED_SendCmd>
 8005a42:	20d9      	movs	r0, #217	@ 0xd9
 8005a44:	f7ff ffb0 	bl	80059a8 <OLED_SendCmd>
 8005a48:	2022      	movs	r0, #34	@ 0x22
 8005a4a:	f7ff ffad 	bl	80059a8 <OLED_SendCmd>
 8005a4e:	20da      	movs	r0, #218	@ 0xda
 8005a50:	f7ff ffaa 	bl	80059a8 <OLED_SendCmd>
 8005a54:	2012      	movs	r0, #18
 8005a56:	f7ff ffa7 	bl	80059a8 <OLED_SendCmd>
 8005a5a:	20db      	movs	r0, #219	@ 0xdb
 8005a5c:	f7ff ffa4 	bl	80059a8 <OLED_SendCmd>
 8005a60:	2020      	movs	r0, #32
 8005a62:	f7ff ffa1 	bl	80059a8 <OLED_SendCmd>
 8005a66:	208d      	movs	r0, #141	@ 0x8d
 8005a68:	f7ff ff9e 	bl	80059a8 <OLED_SendCmd>
 8005a6c:	2014      	movs	r0, #20
 8005a6e:	f7ff ff9b 	bl	80059a8 <OLED_SendCmd>
 8005a72:	f000 f807 	bl	8005a84 <OLED_NewFrame>
 8005a76:	f000 f811 	bl	8005a9c <OLED_ShowFrame>
 8005a7a:	20af      	movs	r0, #175	@ 0xaf
 8005a7c:	f7ff ff94 	bl	80059a8 <OLED_SendCmd>
 8005a80:	bf00      	nop
 8005a82:	bd80      	pop	{r7, pc}

08005a84 <OLED_NewFrame>:
 8005a84:	b580      	push	{r7, lr}
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005a8c:	2100      	movs	r1, #0
 8005a8e:	4802      	ldr	r0, [pc, #8]	@ (8005a98 <OLED_NewFrame+0x14>)
 8005a90:	f005 fd8d 	bl	800b5ae <memset>
 8005a94:	bf00      	nop
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	20007bcc 	.word	0x20007bcc

08005a9c <OLED_ShowFrame>:
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b082      	sub	sp, #8
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	4b15      	ldr	r3, [pc, #84]	@ (8005af8 <OLED_ShowFrame+0x5c>)
 8005aa4:	2240      	movs	r2, #64	@ 0x40
 8005aa6:	701a      	strb	r2, [r3, #0]
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	71fb      	strb	r3, [r7, #7]
 8005aac:	e01b      	b.n	8005ae6 <OLED_ShowFrame+0x4a>
 8005aae:	79fb      	ldrb	r3, [r7, #7]
 8005ab0:	3b50      	subs	r3, #80	@ 0x50
 8005ab2:	b2db      	uxtb	r3, r3
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f7ff ff77 	bl	80059a8 <OLED_SendCmd>
 8005aba:	2000      	movs	r0, #0
 8005abc:	f7ff ff74 	bl	80059a8 <OLED_SendCmd>
 8005ac0:	2010      	movs	r0, #16
 8005ac2:	f7ff ff71 	bl	80059a8 <OLED_SendCmd>
 8005ac6:	480d      	ldr	r0, [pc, #52]	@ (8005afc <OLED_ShowFrame+0x60>)
 8005ac8:	79fb      	ldrb	r3, [r7, #7]
 8005aca:	01db      	lsls	r3, r3, #7
 8005acc:	4a0c      	ldr	r2, [pc, #48]	@ (8005b00 <OLED_ShowFrame+0x64>)
 8005ace:	4413      	add	r3, r2
 8005ad0:	2280      	movs	r2, #128	@ 0x80
 8005ad2:	4619      	mov	r1, r3
 8005ad4:	f005 fdeb 	bl	800b6ae <memcpy>
 8005ad8:	2181      	movs	r1, #129	@ 0x81
 8005ada:	4807      	ldr	r0, [pc, #28]	@ (8005af8 <OLED_ShowFrame+0x5c>)
 8005adc:	f7ff ff4e 	bl	800597c <OLED_Send>
 8005ae0:	79fb      	ldrb	r3, [r7, #7]
 8005ae2:	3301      	adds	r3, #1
 8005ae4:	71fb      	strb	r3, [r7, #7]
 8005ae6:	79fb      	ldrb	r3, [r7, #7]
 8005ae8:	2b07      	cmp	r3, #7
 8005aea:	d9e0      	bls.n	8005aae <OLED_ShowFrame+0x12>
 8005aec:	bf00      	nop
 8005aee:	bf00      	nop
 8005af0:	3708      	adds	r7, #8
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	20007fd0 	.word	0x20007fd0
 8005afc:	20007fd1 	.word	0x20007fd1
 8005b00:	20007bcc 	.word	0x20007bcc

08005b04 <OLED_SetByte_Fine>:
 8005b04:	b490      	push	{r4, r7}
 8005b06:	b082      	sub	sp, #8
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	4604      	mov	r4, r0
 8005b0c:	4608      	mov	r0, r1
 8005b0e:	4611      	mov	r1, r2
 8005b10:	461a      	mov	r2, r3
 8005b12:	4623      	mov	r3, r4
 8005b14:	71fb      	strb	r3, [r7, #7]
 8005b16:	4603      	mov	r3, r0
 8005b18:	71bb      	strb	r3, [r7, #6]
 8005b1a:	460b      	mov	r3, r1
 8005b1c:	717b      	strb	r3, [r7, #5]
 8005b1e:	4613      	mov	r3, r2
 8005b20:	713b      	strb	r3, [r7, #4]
 8005b22:	79fb      	ldrb	r3, [r7, #7]
 8005b24:	2b07      	cmp	r3, #7
 8005b26:	d85f      	bhi.n	8005be8 <OLED_SetByte_Fine+0xe4>
 8005b28:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	db5b      	blt.n	8005be8 <OLED_SetByte_Fine+0xe4>
 8005b30:	7d3b      	ldrb	r3, [r7, #20]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d002      	beq.n	8005b3c <OLED_SetByte_Fine+0x38>
 8005b36:	797b      	ldrb	r3, [r7, #5]
 8005b38:	43db      	mvns	r3, r3
 8005b3a:	717b      	strb	r3, [r7, #5]
 8005b3c:	7c3b      	ldrb	r3, [r7, #16]
 8005b3e:	3301      	adds	r3, #1
 8005b40:	22ff      	movs	r2, #255	@ 0xff
 8005b42:	fa02 f303 	lsl.w	r3, r2, r3
 8005b46:	b25a      	sxtb	r2, r3
 8005b48:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	b25a      	sxtb	r2, r3
 8005b50:	793b      	ldrb	r3, [r7, #4]
 8005b52:	f1c3 0308 	rsb	r3, r3, #8
 8005b56:	21ff      	movs	r1, #255	@ 0xff
 8005b58:	fa41 f303 	asr.w	r3, r1, r3
 8005b5c:	b25b      	sxtb	r3, r3
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	b25b      	sxtb	r3, r3
 8005b62:	b2da      	uxtb	r2, r3
 8005b64:	4b23      	ldr	r3, [pc, #140]	@ (8005bf4 <OLED_SetByte_Fine+0xf0>)
 8005b66:	701a      	strb	r2, [r3, #0]
 8005b68:	79fa      	ldrb	r2, [r7, #7]
 8005b6a:	79bb      	ldrb	r3, [r7, #6]
 8005b6c:	4922      	ldr	r1, [pc, #136]	@ (8005bf8 <OLED_SetByte_Fine+0xf4>)
 8005b6e:	01d2      	lsls	r2, r2, #7
 8005b70:	440a      	add	r2, r1
 8005b72:	4413      	add	r3, r2
 8005b74:	7818      	ldrb	r0, [r3, #0]
 8005b76:	4b1f      	ldr	r3, [pc, #124]	@ (8005bf4 <OLED_SetByte_Fine+0xf0>)
 8005b78:	7819      	ldrb	r1, [r3, #0]
 8005b7a:	79fa      	ldrb	r2, [r7, #7]
 8005b7c:	79bb      	ldrb	r3, [r7, #6]
 8005b7e:	4001      	ands	r1, r0
 8005b80:	b2c8      	uxtb	r0, r1
 8005b82:	491d      	ldr	r1, [pc, #116]	@ (8005bf8 <OLED_SetByte_Fine+0xf4>)
 8005b84:	01d2      	lsls	r2, r2, #7
 8005b86:	440a      	add	r2, r1
 8005b88:	4413      	add	r3, r2
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	701a      	strb	r2, [r3, #0]
 8005b8e:	7c3b      	ldrb	r3, [r7, #16]
 8005b90:	3301      	adds	r3, #1
 8005b92:	22ff      	movs	r2, #255	@ 0xff
 8005b94:	fa02 f303 	lsl.w	r3, r2, r3
 8005b98:	b25b      	sxtb	r3, r3
 8005b9a:	43db      	mvns	r3, r3
 8005b9c:	b25a      	sxtb	r2, r3
 8005b9e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	b25a      	sxtb	r2, r3
 8005ba6:	793b      	ldrb	r3, [r7, #4]
 8005ba8:	f1c3 0308 	rsb	r3, r3, #8
 8005bac:	f06f 01ff 	mvn.w	r1, #255	@ 0xff
 8005bb0:	fa41 f303 	asr.w	r3, r1, r3
 8005bb4:	b25b      	sxtb	r3, r3
 8005bb6:	4013      	ands	r3, r2
 8005bb8:	b25b      	sxtb	r3, r3
 8005bba:	b2da      	uxtb	r2, r3
 8005bbc:	4b0d      	ldr	r3, [pc, #52]	@ (8005bf4 <OLED_SetByte_Fine+0xf0>)
 8005bbe:	701a      	strb	r2, [r3, #0]
 8005bc0:	79fa      	ldrb	r2, [r7, #7]
 8005bc2:	79bb      	ldrb	r3, [r7, #6]
 8005bc4:	490c      	ldr	r1, [pc, #48]	@ (8005bf8 <OLED_SetByte_Fine+0xf4>)
 8005bc6:	01d2      	lsls	r2, r2, #7
 8005bc8:	440a      	add	r2, r1
 8005bca:	4413      	add	r3, r2
 8005bcc:	7818      	ldrb	r0, [r3, #0]
 8005bce:	4b09      	ldr	r3, [pc, #36]	@ (8005bf4 <OLED_SetByte_Fine+0xf0>)
 8005bd0:	7819      	ldrb	r1, [r3, #0]
 8005bd2:	79fa      	ldrb	r2, [r7, #7]
 8005bd4:	79bb      	ldrb	r3, [r7, #6]
 8005bd6:	4301      	orrs	r1, r0
 8005bd8:	b2c8      	uxtb	r0, r1
 8005bda:	4907      	ldr	r1, [pc, #28]	@ (8005bf8 <OLED_SetByte_Fine+0xf4>)
 8005bdc:	01d2      	lsls	r2, r2, #7
 8005bde:	440a      	add	r2, r1
 8005be0:	4413      	add	r3, r2
 8005be2:	4602      	mov	r2, r0
 8005be4:	701a      	strb	r2, [r3, #0]
 8005be6:	e000      	b.n	8005bea <OLED_SetByte_Fine+0xe6>
 8005be8:	bf00      	nop
 8005bea:	3708      	adds	r7, #8
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bc90      	pop	{r4, r7}
 8005bf0:	4770      	bx	lr
 8005bf2:	bf00      	nop
 8005bf4:	20008051 	.word	0x20008051
 8005bf8:	20007bcc 	.word	0x20007bcc

08005bfc <OLED_SetBits_Fine>:
 8005bfc:	b5b0      	push	{r4, r5, r7, lr}
 8005bfe:	b086      	sub	sp, #24
 8005c00:	af02      	add	r7, sp, #8
 8005c02:	4604      	mov	r4, r0
 8005c04:	4608      	mov	r0, r1
 8005c06:	4611      	mov	r1, r2
 8005c08:	461a      	mov	r2, r3
 8005c0a:	4623      	mov	r3, r4
 8005c0c:	71fb      	strb	r3, [r7, #7]
 8005c0e:	4603      	mov	r3, r0
 8005c10:	71bb      	strb	r3, [r7, #6]
 8005c12:	460b      	mov	r3, r1
 8005c14:	717b      	strb	r3, [r7, #5]
 8005c16:	4613      	mov	r3, r2
 8005c18:	713b      	strb	r3, [r7, #4]
 8005c1a:	79bb      	ldrb	r3, [r7, #6]
 8005c1c:	08db      	lsrs	r3, r3, #3
 8005c1e:	73fb      	strb	r3, [r7, #15]
 8005c20:	79bb      	ldrb	r3, [r7, #6]
 8005c22:	f003 0307 	and.w	r3, r3, #7
 8005c26:	73bb      	strb	r3, [r7, #14]
 8005c28:	7bba      	ldrb	r2, [r7, #14]
 8005c2a:	793b      	ldrb	r3, [r7, #4]
 8005c2c:	4413      	add	r3, r2
 8005c2e:	2b08      	cmp	r3, #8
 8005c30:	dd29      	ble.n	8005c86 <OLED_SetBits_Fine+0x8a>
 8005c32:	797a      	ldrb	r2, [r7, #5]
 8005c34:	7bbb      	ldrb	r3, [r7, #14]
 8005c36:	fa02 f303 	lsl.w	r3, r2, r3
 8005c3a:	b2da      	uxtb	r2, r3
 8005c3c:	7bbc      	ldrb	r4, [r7, #14]
 8005c3e:	79f9      	ldrb	r1, [r7, #7]
 8005c40:	7bf8      	ldrb	r0, [r7, #15]
 8005c42:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005c46:	9301      	str	r3, [sp, #4]
 8005c48:	2307      	movs	r3, #7
 8005c4a:	9300      	str	r3, [sp, #0]
 8005c4c:	4623      	mov	r3, r4
 8005c4e:	f7ff ff59 	bl	8005b04 <OLED_SetByte_Fine>
 8005c52:	7bfb      	ldrb	r3, [r7, #15]
 8005c54:	3301      	adds	r3, #1
 8005c56:	b2d8      	uxtb	r0, r3
 8005c58:	797a      	ldrb	r2, [r7, #5]
 8005c5a:	7bbb      	ldrb	r3, [r7, #14]
 8005c5c:	f1c3 0308 	rsb	r3, r3, #8
 8005c60:	fa42 f303 	asr.w	r3, r2, r3
 8005c64:	b2dc      	uxtb	r4, r3
 8005c66:	793a      	ldrb	r2, [r7, #4]
 8005c68:	7bbb      	ldrb	r3, [r7, #14]
 8005c6a:	4413      	add	r3, r2
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	3b09      	subs	r3, #9
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	79f9      	ldrb	r1, [r7, #7]
 8005c74:	f897 2020 	ldrb.w	r2, [r7, #32]
 8005c78:	9201      	str	r2, [sp, #4]
 8005c7a:	9300      	str	r3, [sp, #0]
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	4622      	mov	r2, r4
 8005c80:	f7ff ff40 	bl	8005b04 <OLED_SetByte_Fine>
 8005c84:	e015      	b.n	8005cb2 <OLED_SetBits_Fine+0xb6>
 8005c86:	797a      	ldrb	r2, [r7, #5]
 8005c88:	7bbb      	ldrb	r3, [r7, #14]
 8005c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c8e:	b2dc      	uxtb	r4, r3
 8005c90:	7bba      	ldrb	r2, [r7, #14]
 8005c92:	793b      	ldrb	r3, [r7, #4]
 8005c94:	4413      	add	r3, r2
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	3b01      	subs	r3, #1
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	7bbd      	ldrb	r5, [r7, #14]
 8005c9e:	79f9      	ldrb	r1, [r7, #7]
 8005ca0:	7bf8      	ldrb	r0, [r7, #15]
 8005ca2:	f897 2020 	ldrb.w	r2, [r7, #32]
 8005ca6:	9201      	str	r2, [sp, #4]
 8005ca8:	9300      	str	r3, [sp, #0]
 8005caa:	462b      	mov	r3, r5
 8005cac:	4622      	mov	r2, r4
 8005cae:	f7ff ff29 	bl	8005b04 <OLED_SetByte_Fine>
 8005cb2:	bf00      	nop
 8005cb4:	3710      	adds	r7, #16
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bdb0      	pop	{r4, r5, r7, pc}

08005cba <OLED_SetBits>:
 8005cba:	b590      	push	{r4, r7, lr}
 8005cbc:	b087      	sub	sp, #28
 8005cbe:	af02      	add	r7, sp, #8
 8005cc0:	4604      	mov	r4, r0
 8005cc2:	4608      	mov	r0, r1
 8005cc4:	4611      	mov	r1, r2
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	4623      	mov	r3, r4
 8005cca:	71fb      	strb	r3, [r7, #7]
 8005ccc:	4603      	mov	r3, r0
 8005cce:	71bb      	strb	r3, [r7, #6]
 8005cd0:	460b      	mov	r3, r1
 8005cd2:	717b      	strb	r3, [r7, #5]
 8005cd4:	4613      	mov	r3, r2
 8005cd6:	713b      	strb	r3, [r7, #4]
 8005cd8:	79bb      	ldrb	r3, [r7, #6]
 8005cda:	08db      	lsrs	r3, r3, #3
 8005cdc:	73fb      	strb	r3, [r7, #15]
 8005cde:	79bb      	ldrb	r3, [r7, #6]
 8005ce0:	f003 0307 	and.w	r3, r3, #7
 8005ce4:	73bb      	strb	r3, [r7, #14]
 8005ce6:	797a      	ldrb	r2, [r7, #5]
 8005ce8:	7bbb      	ldrb	r3, [r7, #14]
 8005cea:	fa02 f303 	lsl.w	r3, r2, r3
 8005cee:	b2da      	uxtb	r2, r3
 8005cf0:	7bbc      	ldrb	r4, [r7, #14]
 8005cf2:	79f9      	ldrb	r1, [r7, #7]
 8005cf4:	7bf8      	ldrb	r0, [r7, #15]
 8005cf6:	793b      	ldrb	r3, [r7, #4]
 8005cf8:	9301      	str	r3, [sp, #4]
 8005cfa:	2307      	movs	r3, #7
 8005cfc:	9300      	str	r3, [sp, #0]
 8005cfe:	4623      	mov	r3, r4
 8005d00:	f7ff ff00 	bl	8005b04 <OLED_SetByte_Fine>
 8005d04:	7bbb      	ldrb	r3, [r7, #14]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d014      	beq.n	8005d34 <OLED_SetBits+0x7a>
 8005d0a:	7bfb      	ldrb	r3, [r7, #15]
 8005d0c:	3301      	adds	r3, #1
 8005d0e:	b2d8      	uxtb	r0, r3
 8005d10:	797a      	ldrb	r2, [r7, #5]
 8005d12:	7bbb      	ldrb	r3, [r7, #14]
 8005d14:	f1c3 0308 	rsb	r3, r3, #8
 8005d18:	fa42 f303 	asr.w	r3, r2, r3
 8005d1c:	b2dc      	uxtb	r4, r3
 8005d1e:	7bbb      	ldrb	r3, [r7, #14]
 8005d20:	3b01      	subs	r3, #1
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	79f9      	ldrb	r1, [r7, #7]
 8005d26:	793a      	ldrb	r2, [r7, #4]
 8005d28:	9201      	str	r2, [sp, #4]
 8005d2a:	9300      	str	r3, [sp, #0]
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	4622      	mov	r2, r4
 8005d30:	f7ff fee8 	bl	8005b04 <OLED_SetByte_Fine>
 8005d34:	bf00      	nop
 8005d36:	3714      	adds	r7, #20
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd90      	pop	{r4, r7, pc}

08005d3c <OLED_SetBlock>:
 8005d3c:	b590      	push	{r4, r7, lr}
 8005d3e:	b087      	sub	sp, #28
 8005d40:	af02      	add	r7, sp, #8
 8005d42:	603a      	str	r2, [r7, #0]
 8005d44:	461a      	mov	r2, r3
 8005d46:	4603      	mov	r3, r0
 8005d48:	71fb      	strb	r3, [r7, #7]
 8005d4a:	460b      	mov	r3, r1
 8005d4c:	71bb      	strb	r3, [r7, #6]
 8005d4e:	4613      	mov	r3, r2
 8005d50:	717b      	strb	r3, [r7, #5]
 8005d52:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005d56:	08db      	lsrs	r3, r3, #3
 8005d58:	733b      	strb	r3, [r7, #12]
 8005d5a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005d5e:	f003 0307 	and.w	r3, r3, #7
 8005d62:	72fb      	strb	r3, [r7, #11]
 8005d64:	2300      	movs	r3, #0
 8005d66:	73fb      	strb	r3, [r7, #15]
 8005d68:	e025      	b.n	8005db6 <OLED_SetBlock+0x7a>
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	73bb      	strb	r3, [r7, #14]
 8005d6e:	e01b      	b.n	8005da8 <OLED_SetBlock+0x6c>
 8005d70:	79fa      	ldrb	r2, [r7, #7]
 8005d72:	7bfb      	ldrb	r3, [r7, #15]
 8005d74:	4413      	add	r3, r2
 8005d76:	b2d8      	uxtb	r0, r3
 8005d78:	7bbb      	ldrb	r3, [r7, #14]
 8005d7a:	00db      	lsls	r3, r3, #3
 8005d7c:	b2da      	uxtb	r2, r3
 8005d7e:	79bb      	ldrb	r3, [r7, #6]
 8005d80:	4413      	add	r3, r2
 8005d82:	b2dc      	uxtb	r4, r3
 8005d84:	7bfa      	ldrb	r2, [r7, #15]
 8005d86:	7bbb      	ldrb	r3, [r7, #14]
 8005d88:	7979      	ldrb	r1, [r7, #5]
 8005d8a:	fb01 f303 	mul.w	r3, r1, r3
 8005d8e:	4413      	add	r3, r2
 8005d90:	461a      	mov	r2, r3
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	4413      	add	r3, r2
 8005d96:	781a      	ldrb	r2, [r3, #0]
 8005d98:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005d9c:	4621      	mov	r1, r4
 8005d9e:	f7ff ff8c 	bl	8005cba <OLED_SetBits>
 8005da2:	7bbb      	ldrb	r3, [r7, #14]
 8005da4:	3301      	adds	r3, #1
 8005da6:	73bb      	strb	r3, [r7, #14]
 8005da8:	7bba      	ldrb	r2, [r7, #14]
 8005daa:	7b3b      	ldrb	r3, [r7, #12]
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d3df      	bcc.n	8005d70 <OLED_SetBlock+0x34>
 8005db0:	7bfb      	ldrb	r3, [r7, #15]
 8005db2:	3301      	adds	r3, #1
 8005db4:	73fb      	strb	r3, [r7, #15]
 8005db6:	7bfa      	ldrb	r2, [r7, #15]
 8005db8:	797b      	ldrb	r3, [r7, #5]
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d3d5      	bcc.n	8005d6a <OLED_SetBlock+0x2e>
 8005dbe:	7afb      	ldrb	r3, [r7, #11]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d028      	beq.n	8005e16 <OLED_SetBlock+0xda>
 8005dc4:	797b      	ldrb	r3, [r7, #5]
 8005dc6:	b29a      	uxth	r2, r3
 8005dc8:	7b3b      	ldrb	r3, [r7, #12]
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	fb12 f303 	smulbb	r3, r2, r3
 8005dd0:	813b      	strh	r3, [r7, #8]
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	737b      	strb	r3, [r7, #13]
 8005dd6:	e01a      	b.n	8005e0e <OLED_SetBlock+0xd2>
 8005dd8:	79fa      	ldrb	r2, [r7, #7]
 8005dda:	7b7b      	ldrb	r3, [r7, #13]
 8005ddc:	4413      	add	r3, r2
 8005dde:	b2d8      	uxtb	r0, r3
 8005de0:	7b3b      	ldrb	r3, [r7, #12]
 8005de2:	00db      	lsls	r3, r3, #3
 8005de4:	b2da      	uxtb	r2, r3
 8005de6:	79bb      	ldrb	r3, [r7, #6]
 8005de8:	4413      	add	r3, r2
 8005dea:	b2d9      	uxtb	r1, r3
 8005dec:	893a      	ldrh	r2, [r7, #8]
 8005dee:	7b7b      	ldrb	r3, [r7, #13]
 8005df0:	4413      	add	r3, r2
 8005df2:	461a      	mov	r2, r3
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	4413      	add	r3, r2
 8005df8:	781a      	ldrb	r2, [r3, #0]
 8005dfa:	7afc      	ldrb	r4, [r7, #11]
 8005dfc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005e00:	9300      	str	r3, [sp, #0]
 8005e02:	4623      	mov	r3, r4
 8005e04:	f7ff fefa 	bl	8005bfc <OLED_SetBits_Fine>
 8005e08:	7b7b      	ldrb	r3, [r7, #13]
 8005e0a:	3301      	adds	r3, #1
 8005e0c:	737b      	strb	r3, [r7, #13]
 8005e0e:	7b7a      	ldrb	r2, [r7, #13]
 8005e10:	797b      	ldrb	r3, [r7, #5]
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d3e0      	bcc.n	8005dd8 <OLED_SetBlock+0x9c>
 8005e16:	bf00      	nop
 8005e18:	3714      	adds	r7, #20
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd90      	pop	{r4, r7, pc}

08005e1e <OLED_DrawImage>:
 8005e1e:	b5b0      	push	{r4, r5, r7, lr}
 8005e20:	b084      	sub	sp, #16
 8005e22:	af02      	add	r7, sp, #8
 8005e24:	603a      	str	r2, [r7, #0]
 8005e26:	461a      	mov	r2, r3
 8005e28:	4603      	mov	r3, r0
 8005e2a:	71fb      	strb	r3, [r7, #7]
 8005e2c:	460b      	mov	r3, r1
 8005e2e:	71bb      	strb	r3, [r7, #6]
 8005e30:	4613      	mov	r3, r2
 8005e32:	717b      	strb	r3, [r7, #5]
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	685c      	ldr	r4, [r3, #4]
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	881b      	ldrh	r3, [r3, #0]
 8005e3c:	b2dd      	uxtb	r5, r3
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	885b      	ldrh	r3, [r3, #2]
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	79b9      	ldrb	r1, [r7, #6]
 8005e46:	79f8      	ldrb	r0, [r7, #7]
 8005e48:	797a      	ldrb	r2, [r7, #5]
 8005e4a:	9201      	str	r2, [sp, #4]
 8005e4c:	9300      	str	r3, [sp, #0]
 8005e4e:	462b      	mov	r3, r5
 8005e50:	4622      	mov	r2, r4
 8005e52:	f7ff ff73 	bl	8005d3c <OLED_SetBlock>
 8005e56:	bf00      	nop
 8005e58:	3708      	adds	r7, #8
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bdb0      	pop	{r4, r5, r7, pc}

08005e5e <OLED_PrintASCIIChar>:
 8005e5e:	b5b0      	push	{r4, r5, r7, lr}
 8005e60:	b084      	sub	sp, #16
 8005e62:	af02      	add	r7, sp, #8
 8005e64:	603b      	str	r3, [r7, #0]
 8005e66:	4603      	mov	r3, r0
 8005e68:	71fb      	strb	r3, [r7, #7]
 8005e6a:	460b      	mov	r3, r1
 8005e6c:	71bb      	strb	r3, [r7, #6]
 8005e6e:	4613      	mov	r3, r2
 8005e70:	717b      	strb	r3, [r7, #5]
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	685a      	ldr	r2, [r3, #4]
 8005e76:	797b      	ldrb	r3, [r7, #5]
 8005e78:	f1a3 0120 	sub.w	r1, r3, #32
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	3307      	adds	r3, #7
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	da00      	bge.n	8005e88 <OLED_PrintASCIIChar+0x2a>
 8005e86:	3307      	adds	r3, #7
 8005e88:	10db      	asrs	r3, r3, #3
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	785b      	ldrb	r3, [r3, #1]
 8005e90:	fb00 f303 	mul.w	r3, r0, r3
 8005e94:	fb01 f303 	mul.w	r3, r1, r3
 8005e98:	18d4      	adds	r4, r2, r3
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	785d      	ldrb	r5, [r3, #1]
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	79b9      	ldrb	r1, [r7, #6]
 8005ea4:	79f8      	ldrb	r0, [r7, #7]
 8005ea6:	7e3a      	ldrb	r2, [r7, #24]
 8005ea8:	9201      	str	r2, [sp, #4]
 8005eaa:	9300      	str	r3, [sp, #0]
 8005eac:	462b      	mov	r3, r5
 8005eae:	4622      	mov	r2, r4
 8005eb0:	f7ff ff44 	bl	8005d3c <OLED_SetBlock>
 8005eb4:	bf00      	nop
 8005eb6:	3708      	adds	r7, #8
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bdb0      	pop	{r4, r5, r7, pc}

08005ebc <OLED_PrintASCIIString>:
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b088      	sub	sp, #32
 8005ec0:	af02      	add	r7, sp, #8
 8005ec2:	60ba      	str	r2, [r7, #8]
 8005ec4:	607b      	str	r3, [r7, #4]
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	73fb      	strb	r3, [r7, #15]
 8005eca:	460b      	mov	r3, r1
 8005ecc:	73bb      	strb	r3, [r7, #14]
 8005ece:	7bfb      	ldrb	r3, [r7, #15]
 8005ed0:	75fb      	strb	r3, [r7, #23]
 8005ed2:	e011      	b.n	8005ef8 <OLED_PrintASCIIString+0x3c>
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	781a      	ldrb	r2, [r3, #0]
 8005ed8:	7bb9      	ldrb	r1, [r7, #14]
 8005eda:	7df8      	ldrb	r0, [r7, #23]
 8005edc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005ee0:	9300      	str	r3, [sp, #0]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f7ff ffbb 	bl	8005e5e <OLED_PrintASCIIChar>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	785a      	ldrb	r2, [r3, #1]
 8005eec:	7dfb      	ldrb	r3, [r7, #23]
 8005eee:	4413      	add	r3, r2
 8005ef0:	75fb      	strb	r3, [r7, #23]
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	3301      	adds	r3, #1
 8005ef6:	60bb      	str	r3, [r7, #8]
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d1e9      	bne.n	8005ed4 <OLED_PrintASCIIString+0x18>
 8005f00:	bf00      	nop
 8005f02:	bf00      	nop
 8005f04:	3718      	adds	r7, #24
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}

08005f0a <_OLED_GetUTF8Len>:
 8005f0a:	b480      	push	{r7}
 8005f0c:	b083      	sub	sp, #12
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	6078      	str	r0, [r7, #4]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	b25b      	sxtb	r3, r3
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	db01      	blt.n	8005f20 <_OLED_GetUTF8Len+0x16>
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	e018      	b.n	8005f52 <_OLED_GetUTF8Len+0x48>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8005f28:	2bc0      	cmp	r3, #192	@ 0xc0
 8005f2a:	d101      	bne.n	8005f30 <_OLED_GetUTF8Len+0x26>
 8005f2c:	2302      	movs	r3, #2
 8005f2e:	e010      	b.n	8005f52 <_OLED_GetUTF8Len+0x48>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005f38:	2be0      	cmp	r3, #224	@ 0xe0
 8005f3a:	d101      	bne.n	8005f40 <_OLED_GetUTF8Len+0x36>
 8005f3c:	2303      	movs	r3, #3
 8005f3e:	e008      	b.n	8005f52 <_OLED_GetUTF8Len+0x48>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8005f48:	2bf0      	cmp	r3, #240	@ 0xf0
 8005f4a:	d101      	bne.n	8005f50 <_OLED_GetUTF8Len+0x46>
 8005f4c:	2304      	movs	r3, #4
 8005f4e:	e000      	b.n	8005f52 <_OLED_GetUTF8Len+0x48>
 8005f50:	2300      	movs	r3, #0
 8005f52:	4618      	mov	r0, r3
 8005f54:	370c      	adds	r7, #12
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr

08005f5e <OLED_PrintString>:
 8005f5e:	b5b0      	push	{r4, r5, r7, lr}
 8005f60:	b08a      	sub	sp, #40	@ 0x28
 8005f62:	af02      	add	r7, sp, #8
 8005f64:	60ba      	str	r2, [r7, #8]
 8005f66:	607b      	str	r3, [r7, #4]
 8005f68:	4603      	mov	r3, r0
 8005f6a:	73fb      	strb	r3, [r7, #15]
 8005f6c:	460b      	mov	r3, r1
 8005f6e:	73bb      	strb	r3, [r7, #14]
 8005f70:	2300      	movs	r3, #0
 8005f72:	83fb      	strh	r3, [r7, #30]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	3307      	adds	r3, #7
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	da00      	bge.n	8005f80 <OLED_PrintString+0x22>
 8005f7e:	3307      	adds	r3, #7
 8005f80:	10db      	asrs	r3, r3, #3
 8005f82:	b2da      	uxtb	r2, r3
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	785b      	ldrb	r3, [r3, #1]
 8005f88:	fb12 f303 	smulbb	r3, r2, r3
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	3304      	adds	r3, #4
 8005f90:	76fb      	strb	r3, [r7, #27]
 8005f92:	e07d      	b.n	8006090 <OLED_PrintString+0x132>
 8005f94:	2300      	movs	r3, #0
 8005f96:	777b      	strb	r3, [r7, #29]
 8005f98:	8bfb      	ldrh	r3, [r7, #30]
 8005f9a:	68ba      	ldr	r2, [r7, #8]
 8005f9c:	4413      	add	r3, r2
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f7ff ffb3 	bl	8005f0a <_OLED_GetUTF8Len>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	76bb      	strb	r3, [r7, #26]
 8005fa8:	7ebb      	ldrb	r3, [r7, #26]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d078      	beq.n	80060a0 <OLED_PrintString+0x142>
 8005fae:	2300      	movs	r3, #0
 8005fb0:	773b      	strb	r3, [r7, #28]
 8005fb2:	e032      	b.n	800601a <OLED_PrintString+0xbc>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	7f3a      	ldrb	r2, [r7, #28]
 8005fba:	7ef9      	ldrb	r1, [r7, #27]
 8005fbc:	fb01 f202 	mul.w	r2, r1, r2
 8005fc0:	4413      	add	r3, r2
 8005fc2:	617b      	str	r3, [r7, #20]
 8005fc4:	8bfb      	ldrh	r3, [r7, #30]
 8005fc6:	68ba      	ldr	r2, [r7, #8]
 8005fc8:	4413      	add	r3, r2
 8005fca:	7eba      	ldrb	r2, [r7, #26]
 8005fcc:	6979      	ldr	r1, [r7, #20]
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f005 fadd 	bl	800b58e <memcmp>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d11c      	bne.n	8006014 <OLED_PrintString+0xb6>
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	1d1c      	adds	r4, r3, #4
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	785d      	ldrb	r5, [r3, #1]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	7bb9      	ldrb	r1, [r7, #14]
 8005fe8:	7bf8      	ldrb	r0, [r7, #15]
 8005fea:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8005fee:	9201      	str	r2, [sp, #4]
 8005ff0:	9300      	str	r3, [sp, #0]
 8005ff2:	462b      	mov	r3, r5
 8005ff4:	4622      	mov	r2, r4
 8005ff6:	f7ff fea1 	bl	8005d3c <OLED_SetBlock>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	785a      	ldrb	r2, [r3, #1]
 8005ffe:	7bfb      	ldrb	r3, [r7, #15]
 8006000:	4413      	add	r3, r2
 8006002:	73fb      	strb	r3, [r7, #15]
 8006004:	7ebb      	ldrb	r3, [r7, #26]
 8006006:	b29a      	uxth	r2, r3
 8006008:	8bfb      	ldrh	r3, [r7, #30]
 800600a:	4413      	add	r3, r2
 800600c:	83fb      	strh	r3, [r7, #30]
 800600e:	2301      	movs	r3, #1
 8006010:	777b      	strb	r3, [r7, #29]
 8006012:	e007      	b.n	8006024 <OLED_PrintString+0xc6>
 8006014:	7f3b      	ldrb	r3, [r7, #28]
 8006016:	3301      	adds	r3, #1
 8006018:	773b      	strb	r3, [r7, #28]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	7a1b      	ldrb	r3, [r3, #8]
 800601e:	7f3a      	ldrb	r2, [r7, #28]
 8006020:	429a      	cmp	r2, r3
 8006022:	d3c7      	bcc.n	8005fb4 <OLED_PrintString+0x56>
 8006024:	7f7b      	ldrb	r3, [r7, #29]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d132      	bne.n	8006090 <OLED_PrintString+0x132>
 800602a:	7ebb      	ldrb	r3, [r7, #26]
 800602c:	2b01      	cmp	r3, #1
 800602e:	d119      	bne.n	8006064 <OLED_PrintString+0x106>
 8006030:	8bfb      	ldrh	r3, [r7, #30]
 8006032:	68ba      	ldr	r2, [r7, #8]
 8006034:	4413      	add	r3, r2
 8006036:	781a      	ldrb	r2, [r3, #0]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	68dc      	ldr	r4, [r3, #12]
 800603c:	7bb9      	ldrb	r1, [r7, #14]
 800603e:	7bf8      	ldrb	r0, [r7, #15]
 8006040:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8006044:	9300      	str	r3, [sp, #0]
 8006046:	4623      	mov	r3, r4
 8006048:	f7ff ff09 	bl	8005e5e <OLED_PrintASCIIChar>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	68db      	ldr	r3, [r3, #12]
 8006050:	785a      	ldrb	r2, [r3, #1]
 8006052:	7bfb      	ldrb	r3, [r7, #15]
 8006054:	4413      	add	r3, r2
 8006056:	73fb      	strb	r3, [r7, #15]
 8006058:	7ebb      	ldrb	r3, [r7, #26]
 800605a:	b29a      	uxth	r2, r3
 800605c:	8bfb      	ldrh	r3, [r7, #30]
 800605e:	4413      	add	r3, r2
 8006060:	83fb      	strh	r3, [r7, #30]
 8006062:	e015      	b.n	8006090 <OLED_PrintString+0x132>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	68da      	ldr	r2, [r3, #12]
 8006068:	7bb9      	ldrb	r1, [r7, #14]
 800606a:	7bf8      	ldrb	r0, [r7, #15]
 800606c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8006070:	9300      	str	r3, [sp, #0]
 8006072:	4613      	mov	r3, r2
 8006074:	2220      	movs	r2, #32
 8006076:	f7ff fef2 	bl	8005e5e <OLED_PrintASCIIChar>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	68db      	ldr	r3, [r3, #12]
 800607e:	785a      	ldrb	r2, [r3, #1]
 8006080:	7bfb      	ldrb	r3, [r7, #15]
 8006082:	4413      	add	r3, r2
 8006084:	73fb      	strb	r3, [r7, #15]
 8006086:	7ebb      	ldrb	r3, [r7, #26]
 8006088:	b29a      	uxth	r2, r3
 800608a:	8bfb      	ldrh	r3, [r7, #30]
 800608c:	4413      	add	r3, r2
 800608e:	83fb      	strh	r3, [r7, #30]
 8006090:	8bfb      	ldrh	r3, [r7, #30]
 8006092:	68ba      	ldr	r2, [r7, #8]
 8006094:	4413      	add	r3, r2
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	2b00      	cmp	r3, #0
 800609a:	f47f af7b 	bne.w	8005f94 <OLED_PrintString+0x36>
 800609e:	e000      	b.n	80060a2 <OLED_PrintString+0x144>
 80060a0:	bf00      	nop
 80060a2:	bf00      	nop
 80060a4:	3720      	adds	r7, #32
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080060ac <HAL_MspInit>:
 80060ac:	b480      	push	{r7}
 80060ae:	b083      	sub	sp, #12
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	2300      	movs	r3, #0
 80060b4:	607b      	str	r3, [r7, #4]
 80060b6:	4b10      	ldr	r3, [pc, #64]	@ (80060f8 <HAL_MspInit+0x4c>)
 80060b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060ba:	4a0f      	ldr	r2, [pc, #60]	@ (80060f8 <HAL_MspInit+0x4c>)
 80060bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80060c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80060c2:	4b0d      	ldr	r3, [pc, #52]	@ (80060f8 <HAL_MspInit+0x4c>)
 80060c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80060ca:	607b      	str	r3, [r7, #4]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2300      	movs	r3, #0
 80060d0:	603b      	str	r3, [r7, #0]
 80060d2:	4b09      	ldr	r3, [pc, #36]	@ (80060f8 <HAL_MspInit+0x4c>)
 80060d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060d6:	4a08      	ldr	r2, [pc, #32]	@ (80060f8 <HAL_MspInit+0x4c>)
 80060d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80060dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80060de:	4b06      	ldr	r3, [pc, #24]	@ (80060f8 <HAL_MspInit+0x4c>)
 80060e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80060e6:	603b      	str	r3, [r7, #0]
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	bf00      	nop
 80060ec:	370c      	adds	r7, #12
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr
 80060f6:	bf00      	nop
 80060f8:	40023800 	.word	0x40023800

080060fc <NMI_Handler>:
 80060fc:	b480      	push	{r7}
 80060fe:	af00      	add	r7, sp, #0
 8006100:	bf00      	nop
 8006102:	e7fd      	b.n	8006100 <NMI_Handler+0x4>

08006104 <HardFault_Handler>:
 8006104:	b480      	push	{r7}
 8006106:	af00      	add	r7, sp, #0
 8006108:	bf00      	nop
 800610a:	e7fd      	b.n	8006108 <HardFault_Handler+0x4>

0800610c <MemManage_Handler>:
 800610c:	b480      	push	{r7}
 800610e:	af00      	add	r7, sp, #0
 8006110:	bf00      	nop
 8006112:	e7fd      	b.n	8006110 <MemManage_Handler+0x4>

08006114 <BusFault_Handler>:
 8006114:	b480      	push	{r7}
 8006116:	af00      	add	r7, sp, #0
 8006118:	bf00      	nop
 800611a:	e7fd      	b.n	8006118 <BusFault_Handler+0x4>

0800611c <UsageFault_Handler>:
 800611c:	b480      	push	{r7}
 800611e:	af00      	add	r7, sp, #0
 8006120:	bf00      	nop
 8006122:	e7fd      	b.n	8006120 <UsageFault_Handler+0x4>

08006124 <SVC_Handler>:
 8006124:	b480      	push	{r7}
 8006126:	af00      	add	r7, sp, #0
 8006128:	bf00      	nop
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr

08006132 <DebugMon_Handler>:
 8006132:	b480      	push	{r7}
 8006134:	af00      	add	r7, sp, #0
 8006136:	bf00      	nop
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr

08006140 <PendSV_Handler>:
 8006140:	b480      	push	{r7}
 8006142:	af00      	add	r7, sp, #0
 8006144:	bf00      	nop
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr

0800614e <SysTick_Handler>:
 800614e:	b580      	push	{r7, lr}
 8006150:	af00      	add	r7, sp, #0
 8006152:	f000 fb91 	bl	8006878 <HAL_IncTick>
 8006156:	bf00      	nop
 8006158:	bd80      	pop	{r7, pc}
	...

0800615c <ADC_IRQHandler>:
 800615c:	b580      	push	{r7, lr}
 800615e:	af00      	add	r7, sp, #0
 8006160:	4802      	ldr	r0, [pc, #8]	@ (800616c <ADC_IRQHandler+0x10>)
 8006162:	f000 fc10 	bl	8006986 <HAL_ADC_IRQHandler>
 8006166:	bf00      	nop
 8006168:	bd80      	pop	{r7, pc}
 800616a:	bf00      	nop
 800616c:	200001f4 	.word	0x200001f4

08006170 <TIM2_IRQHandler>:
 8006170:	b580      	push	{r7, lr}
 8006172:	af00      	add	r7, sp, #0
 8006174:	4802      	ldr	r0, [pc, #8]	@ (8006180 <TIM2_IRQHandler+0x10>)
 8006176:	f003 fc2d 	bl	80099d4 <HAL_TIM_IRQHandler>
 800617a:	bf00      	nop
 800617c:	bd80      	pop	{r7, pc}
 800617e:	bf00      	nop
 8006180:	20008058 	.word	0x20008058

08006184 <TIM4_IRQHandler>:
 8006184:	b580      	push	{r7, lr}
 8006186:	af00      	add	r7, sp, #0
 8006188:	4b0c      	ldr	r3, [pc, #48]	@ (80061bc <TIM4_IRQHandler+0x38>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	691b      	ldr	r3, [r3, #16]
 800618e:	f003 0301 	and.w	r3, r3, #1
 8006192:	2b01      	cmp	r3, #1
 8006194:	d10d      	bne.n	80061b2 <TIM4_IRQHandler+0x2e>
 8006196:	4b09      	ldr	r3, [pc, #36]	@ (80061bc <TIM4_IRQHandler+0x38>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	68db      	ldr	r3, [r3, #12]
 800619c:	f003 0301 	and.w	r3, r3, #1
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d106      	bne.n	80061b2 <TIM4_IRQHandler+0x2e>
 80061a4:	4b05      	ldr	r3, [pc, #20]	@ (80061bc <TIM4_IRQHandler+0x38>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f06f 0201 	mvn.w	r2, #1
 80061ac:	611a      	str	r2, [r3, #16]
 80061ae:	f7fb fa61 	bl	8001674 <KEY_Process>
 80061b2:	4802      	ldr	r0, [pc, #8]	@ (80061bc <TIM4_IRQHandler+0x38>)
 80061b4:	f003 fc0e 	bl	80099d4 <HAL_TIM_IRQHandler>
 80061b8:	bf00      	nop
 80061ba:	bd80      	pop	{r7, pc}
 80061bc:	200080e8 	.word	0x200080e8

080061c0 <DMA2_Stream0_IRQHandler>:
 80061c0:	b580      	push	{r7, lr}
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	4802      	ldr	r0, [pc, #8]	@ (80061d0 <DMA2_Stream0_IRQHandler+0x10>)
 80061c6:	f001 fb93 	bl	80078f0 <HAL_DMA_IRQHandler>
 80061ca:	bf00      	nop
 80061cc:	bd80      	pop	{r7, pc}
 80061ce:	bf00      	nop
 80061d0:	2000023c 	.word	0x2000023c

080061d4 <_getpid>:
 80061d4:	b480      	push	{r7}
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	2301      	movs	r3, #1
 80061da:	4618      	mov	r0, r3
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr

080061e4 <_kill>:
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b082      	sub	sp, #8
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	6039      	str	r1, [r7, #0]
 80061ee:	f005 fa31 	bl	800b654 <__errno>
 80061f2:	4603      	mov	r3, r0
 80061f4:	2216      	movs	r2, #22
 80061f6:	601a      	str	r2, [r3, #0]
 80061f8:	f04f 33ff 	mov.w	r3, #4294967295
 80061fc:	4618      	mov	r0, r3
 80061fe:	3708      	adds	r7, #8
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}

08006204 <_exit>:
 8006204:	b580      	push	{r7, lr}
 8006206:	b082      	sub	sp, #8
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	f04f 31ff 	mov.w	r1, #4294967295
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f7ff ffe7 	bl	80061e4 <_kill>
 8006216:	bf00      	nop
 8006218:	e7fd      	b.n	8006216 <_exit+0x12>

0800621a <_read>:
 800621a:	b580      	push	{r7, lr}
 800621c:	b086      	sub	sp, #24
 800621e:	af00      	add	r7, sp, #0
 8006220:	60f8      	str	r0, [r7, #12]
 8006222:	60b9      	str	r1, [r7, #8]
 8006224:	607a      	str	r2, [r7, #4]
 8006226:	2300      	movs	r3, #0
 8006228:	617b      	str	r3, [r7, #20]
 800622a:	e00a      	b.n	8006242 <_read+0x28>
 800622c:	f3af 8000 	nop.w
 8006230:	4601      	mov	r1, r0
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	1c5a      	adds	r2, r3, #1
 8006236:	60ba      	str	r2, [r7, #8]
 8006238:	b2ca      	uxtb	r2, r1
 800623a:	701a      	strb	r2, [r3, #0]
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	3301      	adds	r3, #1
 8006240:	617b      	str	r3, [r7, #20]
 8006242:	697a      	ldr	r2, [r7, #20]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	429a      	cmp	r2, r3
 8006248:	dbf0      	blt.n	800622c <_read+0x12>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4618      	mov	r0, r3
 800624e:	3718      	adds	r7, #24
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <_write>:
 8006254:	b580      	push	{r7, lr}
 8006256:	b086      	sub	sp, #24
 8006258:	af00      	add	r7, sp, #0
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	60b9      	str	r1, [r7, #8]
 800625e:	607a      	str	r2, [r7, #4]
 8006260:	2300      	movs	r3, #0
 8006262:	617b      	str	r3, [r7, #20]
 8006264:	e009      	b.n	800627a <_write+0x26>
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	1c5a      	adds	r2, r3, #1
 800626a:	60ba      	str	r2, [r7, #8]
 800626c:	781b      	ldrb	r3, [r3, #0]
 800626e:	4618      	mov	r0, r3
 8006270:	f3af 8000 	nop.w
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	3301      	adds	r3, #1
 8006278:	617b      	str	r3, [r7, #20]
 800627a:	697a      	ldr	r2, [r7, #20]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	429a      	cmp	r2, r3
 8006280:	dbf1      	blt.n	8006266 <_write+0x12>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	4618      	mov	r0, r3
 8006286:	3718      	adds	r7, #24
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}

0800628c <_close>:
 800628c:	b480      	push	{r7}
 800628e:	b083      	sub	sp, #12
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	f04f 33ff 	mov.w	r3, #4294967295
 8006298:	4618      	mov	r0, r3
 800629a:	370c      	adds	r7, #12
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr

080062a4 <_fstat>:
 80062a4:	b480      	push	{r7}
 80062a6:	b083      	sub	sp, #12
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	6039      	str	r1, [r7, #0]
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80062b4:	605a      	str	r2, [r3, #4]
 80062b6:	2300      	movs	r3, #0
 80062b8:	4618      	mov	r0, r3
 80062ba:	370c      	adds	r7, #12
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <_isatty>:
 80062c4:	b480      	push	{r7}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	2301      	movs	r3, #1
 80062ce:	4618      	mov	r0, r3
 80062d0:	370c      	adds	r7, #12
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr

080062da <_lseek>:
 80062da:	b480      	push	{r7}
 80062dc:	b085      	sub	sp, #20
 80062de:	af00      	add	r7, sp, #0
 80062e0:	60f8      	str	r0, [r7, #12]
 80062e2:	60b9      	str	r1, [r7, #8]
 80062e4:	607a      	str	r2, [r7, #4]
 80062e6:	2300      	movs	r3, #0
 80062e8:	4618      	mov	r0, r3
 80062ea:	3714      	adds	r7, #20
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr

080062f4 <_sbrk>:
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b086      	sub	sp, #24
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
 80062fc:	4a14      	ldr	r2, [pc, #80]	@ (8006350 <_sbrk+0x5c>)
 80062fe:	4b15      	ldr	r3, [pc, #84]	@ (8006354 <_sbrk+0x60>)
 8006300:	1ad3      	subs	r3, r2, r3
 8006302:	617b      	str	r3, [r7, #20]
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	613b      	str	r3, [r7, #16]
 8006308:	4b13      	ldr	r3, [pc, #76]	@ (8006358 <_sbrk+0x64>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d102      	bne.n	8006316 <_sbrk+0x22>
 8006310:	4b11      	ldr	r3, [pc, #68]	@ (8006358 <_sbrk+0x64>)
 8006312:	4a12      	ldr	r2, [pc, #72]	@ (800635c <_sbrk+0x68>)
 8006314:	601a      	str	r2, [r3, #0]
 8006316:	4b10      	ldr	r3, [pc, #64]	@ (8006358 <_sbrk+0x64>)
 8006318:	681a      	ldr	r2, [r3, #0]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	4413      	add	r3, r2
 800631e:	693a      	ldr	r2, [r7, #16]
 8006320:	429a      	cmp	r2, r3
 8006322:	d207      	bcs.n	8006334 <_sbrk+0x40>
 8006324:	f005 f996 	bl	800b654 <__errno>
 8006328:	4603      	mov	r3, r0
 800632a:	220c      	movs	r2, #12
 800632c:	601a      	str	r2, [r3, #0]
 800632e:	f04f 33ff 	mov.w	r3, #4294967295
 8006332:	e009      	b.n	8006348 <_sbrk+0x54>
 8006334:	4b08      	ldr	r3, [pc, #32]	@ (8006358 <_sbrk+0x64>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	60fb      	str	r3, [r7, #12]
 800633a:	4b07      	ldr	r3, [pc, #28]	@ (8006358 <_sbrk+0x64>)
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	4413      	add	r3, r2
 8006342:	4a05      	ldr	r2, [pc, #20]	@ (8006358 <_sbrk+0x64>)
 8006344:	6013      	str	r3, [r2, #0]
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	4618      	mov	r0, r3
 800634a:	3718      	adds	r7, #24
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}
 8006350:	20020000 	.word	0x20020000
 8006354:	00000400 	.word	0x00000400
 8006358:	20008054 	.word	0x20008054
 800635c:	200082c8 	.word	0x200082c8

08006360 <SystemInit>:
 8006360:	b480      	push	{r7}
 8006362:	af00      	add	r7, sp, #0
 8006364:	4b06      	ldr	r3, [pc, #24]	@ (8006380 <SystemInit+0x20>)
 8006366:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800636a:	4a05      	ldr	r2, [pc, #20]	@ (8006380 <SystemInit+0x20>)
 800636c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006370:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8006374:	bf00      	nop
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr
 800637e:	bf00      	nop
 8006380:	e000ed00 	.word	0xe000ed00

08006384 <MX_TIM2_Init>:
 8006384:	b580      	push	{r7, lr}
 8006386:	b08a      	sub	sp, #40	@ 0x28
 8006388:	af00      	add	r7, sp, #0
 800638a:	f107 0318 	add.w	r3, r7, #24
 800638e:	2200      	movs	r2, #0
 8006390:	601a      	str	r2, [r3, #0]
 8006392:	605a      	str	r2, [r3, #4]
 8006394:	609a      	str	r2, [r3, #8]
 8006396:	60da      	str	r2, [r3, #12]
 8006398:	f107 0310 	add.w	r3, r7, #16
 800639c:	2200      	movs	r2, #0
 800639e:	601a      	str	r2, [r3, #0]
 80063a0:	605a      	str	r2, [r3, #4]
 80063a2:	463b      	mov	r3, r7
 80063a4:	2200      	movs	r2, #0
 80063a6:	601a      	str	r2, [r3, #0]
 80063a8:	605a      	str	r2, [r3, #4]
 80063aa:	609a      	str	r2, [r3, #8]
 80063ac:	60da      	str	r2, [r3, #12]
 80063ae:	4b2c      	ldr	r3, [pc, #176]	@ (8006460 <MX_TIM2_Init+0xdc>)
 80063b0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80063b4:	601a      	str	r2, [r3, #0]
 80063b6:	4b2a      	ldr	r3, [pc, #168]	@ (8006460 <MX_TIM2_Init+0xdc>)
 80063b8:	2200      	movs	r2, #0
 80063ba:	605a      	str	r2, [r3, #4]
 80063bc:	4b28      	ldr	r3, [pc, #160]	@ (8006460 <MX_TIM2_Init+0xdc>)
 80063be:	2200      	movs	r2, #0
 80063c0:	609a      	str	r2, [r3, #8]
 80063c2:	4b27      	ldr	r3, [pc, #156]	@ (8006460 <MX_TIM2_Init+0xdc>)
 80063c4:	f04f 32ff 	mov.w	r2, #4294967295
 80063c8:	60da      	str	r2, [r3, #12]
 80063ca:	4b25      	ldr	r3, [pc, #148]	@ (8006460 <MX_TIM2_Init+0xdc>)
 80063cc:	2200      	movs	r2, #0
 80063ce:	611a      	str	r2, [r3, #16]
 80063d0:	4b23      	ldr	r3, [pc, #140]	@ (8006460 <MX_TIM2_Init+0xdc>)
 80063d2:	2200      	movs	r2, #0
 80063d4:	619a      	str	r2, [r3, #24]
 80063d6:	4822      	ldr	r0, [pc, #136]	@ (8006460 <MX_TIM2_Init+0xdc>)
 80063d8:	f002 ffa0 	bl	800931c <HAL_TIM_Base_Init>
 80063dc:	4603      	mov	r3, r0
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d001      	beq.n	80063e6 <MX_TIM2_Init+0x62>
 80063e2:	f7ff fac5 	bl	8005970 <Error_Handler>
 80063e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80063ea:	61bb      	str	r3, [r7, #24]
 80063ec:	f107 0318 	add.w	r3, r7, #24
 80063f0:	4619      	mov	r1, r3
 80063f2:	481b      	ldr	r0, [pc, #108]	@ (8006460 <MX_TIM2_Init+0xdc>)
 80063f4:	f003 fc7a 	bl	8009cec <HAL_TIM_ConfigClockSource>
 80063f8:	4603      	mov	r3, r0
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d001      	beq.n	8006402 <MX_TIM2_Init+0x7e>
 80063fe:	f7ff fab7 	bl	8005970 <Error_Handler>
 8006402:	4817      	ldr	r0, [pc, #92]	@ (8006460 <MX_TIM2_Init+0xdc>)
 8006404:	f003 f8c5 	bl	8009592 <HAL_TIM_IC_Init>
 8006408:	4603      	mov	r3, r0
 800640a:	2b00      	cmp	r3, #0
 800640c:	d001      	beq.n	8006412 <MX_TIM2_Init+0x8e>
 800640e:	f7ff faaf 	bl	8005970 <Error_Handler>
 8006412:	2300      	movs	r3, #0
 8006414:	613b      	str	r3, [r7, #16]
 8006416:	2300      	movs	r3, #0
 8006418:	617b      	str	r3, [r7, #20]
 800641a:	f107 0310 	add.w	r3, r7, #16
 800641e:	4619      	mov	r1, r3
 8006420:	480f      	ldr	r0, [pc, #60]	@ (8006460 <MX_TIM2_Init+0xdc>)
 8006422:	f003 fff1 	bl	800a408 <HAL_TIMEx_MasterConfigSynchronization>
 8006426:	4603      	mov	r3, r0
 8006428:	2b00      	cmp	r3, #0
 800642a:	d001      	beq.n	8006430 <MX_TIM2_Init+0xac>
 800642c:	f7ff faa0 	bl	8005970 <Error_Handler>
 8006430:	2300      	movs	r3, #0
 8006432:	603b      	str	r3, [r7, #0]
 8006434:	2301      	movs	r3, #1
 8006436:	607b      	str	r3, [r7, #4]
 8006438:	2300      	movs	r3, #0
 800643a:	60bb      	str	r3, [r7, #8]
 800643c:	2300      	movs	r3, #0
 800643e:	60fb      	str	r3, [r7, #12]
 8006440:	463b      	mov	r3, r7
 8006442:	2204      	movs	r2, #4
 8006444:	4619      	mov	r1, r3
 8006446:	4806      	ldr	r0, [pc, #24]	@ (8006460 <MX_TIM2_Init+0xdc>)
 8006448:	f003 fbb4 	bl	8009bb4 <HAL_TIM_IC_ConfigChannel>
 800644c:	4603      	mov	r3, r0
 800644e:	2b00      	cmp	r3, #0
 8006450:	d001      	beq.n	8006456 <MX_TIM2_Init+0xd2>
 8006452:	f7ff fa8d 	bl	8005970 <Error_Handler>
 8006456:	bf00      	nop
 8006458:	3728      	adds	r7, #40	@ 0x28
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	20008058 	.word	0x20008058

08006464 <MX_TIM3_Init>:
 8006464:	b580      	push	{r7, lr}
 8006466:	b086      	sub	sp, #24
 8006468:	af00      	add	r7, sp, #0
 800646a:	f107 0308 	add.w	r3, r7, #8
 800646e:	2200      	movs	r2, #0
 8006470:	601a      	str	r2, [r3, #0]
 8006472:	605a      	str	r2, [r3, #4]
 8006474:	609a      	str	r2, [r3, #8]
 8006476:	60da      	str	r2, [r3, #12]
 8006478:	463b      	mov	r3, r7
 800647a:	2200      	movs	r2, #0
 800647c:	601a      	str	r2, [r3, #0]
 800647e:	605a      	str	r2, [r3, #4]
 8006480:	4b1c      	ldr	r3, [pc, #112]	@ (80064f4 <MX_TIM3_Init+0x90>)
 8006482:	4a1d      	ldr	r2, [pc, #116]	@ (80064f8 <MX_TIM3_Init+0x94>)
 8006484:	601a      	str	r2, [r3, #0]
 8006486:	4b1b      	ldr	r3, [pc, #108]	@ (80064f4 <MX_TIM3_Init+0x90>)
 8006488:	2263      	movs	r2, #99	@ 0x63
 800648a:	605a      	str	r2, [r3, #4]
 800648c:	4b19      	ldr	r3, [pc, #100]	@ (80064f4 <MX_TIM3_Init+0x90>)
 800648e:	2200      	movs	r2, #0
 8006490:	609a      	str	r2, [r3, #8]
 8006492:	4b18      	ldr	r3, [pc, #96]	@ (80064f4 <MX_TIM3_Init+0x90>)
 8006494:	2209      	movs	r2, #9
 8006496:	60da      	str	r2, [r3, #12]
 8006498:	4b16      	ldr	r3, [pc, #88]	@ (80064f4 <MX_TIM3_Init+0x90>)
 800649a:	2200      	movs	r2, #0
 800649c:	611a      	str	r2, [r3, #16]
 800649e:	4b15      	ldr	r3, [pc, #84]	@ (80064f4 <MX_TIM3_Init+0x90>)
 80064a0:	2200      	movs	r2, #0
 80064a2:	619a      	str	r2, [r3, #24]
 80064a4:	4813      	ldr	r0, [pc, #76]	@ (80064f4 <MX_TIM3_Init+0x90>)
 80064a6:	f002 ff39 	bl	800931c <HAL_TIM_Base_Init>
 80064aa:	4603      	mov	r3, r0
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d001      	beq.n	80064b4 <MX_TIM3_Init+0x50>
 80064b0:	f7ff fa5e 	bl	8005970 <Error_Handler>
 80064b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80064b8:	60bb      	str	r3, [r7, #8]
 80064ba:	f107 0308 	add.w	r3, r7, #8
 80064be:	4619      	mov	r1, r3
 80064c0:	480c      	ldr	r0, [pc, #48]	@ (80064f4 <MX_TIM3_Init+0x90>)
 80064c2:	f003 fc13 	bl	8009cec <HAL_TIM_ConfigClockSource>
 80064c6:	4603      	mov	r3, r0
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d001      	beq.n	80064d0 <MX_TIM3_Init+0x6c>
 80064cc:	f7ff fa50 	bl	8005970 <Error_Handler>
 80064d0:	2320      	movs	r3, #32
 80064d2:	603b      	str	r3, [r7, #0]
 80064d4:	2300      	movs	r3, #0
 80064d6:	607b      	str	r3, [r7, #4]
 80064d8:	463b      	mov	r3, r7
 80064da:	4619      	mov	r1, r3
 80064dc:	4805      	ldr	r0, [pc, #20]	@ (80064f4 <MX_TIM3_Init+0x90>)
 80064de:	f003 ff93 	bl	800a408 <HAL_TIMEx_MasterConfigSynchronization>
 80064e2:	4603      	mov	r3, r0
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d001      	beq.n	80064ec <MX_TIM3_Init+0x88>
 80064e8:	f7ff fa42 	bl	8005970 <Error_Handler>
 80064ec:	bf00      	nop
 80064ee:	3718      	adds	r7, #24
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}
 80064f4:	200080a0 	.word	0x200080a0
 80064f8:	40000400 	.word	0x40000400

080064fc <MX_TIM4_Init>:
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b086      	sub	sp, #24
 8006500:	af00      	add	r7, sp, #0
 8006502:	f107 0308 	add.w	r3, r7, #8
 8006506:	2200      	movs	r2, #0
 8006508:	601a      	str	r2, [r3, #0]
 800650a:	605a      	str	r2, [r3, #4]
 800650c:	609a      	str	r2, [r3, #8]
 800650e:	60da      	str	r2, [r3, #12]
 8006510:	463b      	mov	r3, r7
 8006512:	2200      	movs	r2, #0
 8006514:	601a      	str	r2, [r3, #0]
 8006516:	605a      	str	r2, [r3, #4]
 8006518:	4b1d      	ldr	r3, [pc, #116]	@ (8006590 <MX_TIM4_Init+0x94>)
 800651a:	4a1e      	ldr	r2, [pc, #120]	@ (8006594 <MX_TIM4_Init+0x98>)
 800651c:	601a      	str	r2, [r3, #0]
 800651e:	4b1c      	ldr	r3, [pc, #112]	@ (8006590 <MX_TIM4_Init+0x94>)
 8006520:	f242 720f 	movw	r2, #9999	@ 0x270f
 8006524:	605a      	str	r2, [r3, #4]
 8006526:	4b1a      	ldr	r3, [pc, #104]	@ (8006590 <MX_TIM4_Init+0x94>)
 8006528:	2200      	movs	r2, #0
 800652a:	609a      	str	r2, [r3, #8]
 800652c:	4b18      	ldr	r3, [pc, #96]	@ (8006590 <MX_TIM4_Init+0x94>)
 800652e:	2263      	movs	r2, #99	@ 0x63
 8006530:	60da      	str	r2, [r3, #12]
 8006532:	4b17      	ldr	r3, [pc, #92]	@ (8006590 <MX_TIM4_Init+0x94>)
 8006534:	2200      	movs	r2, #0
 8006536:	611a      	str	r2, [r3, #16]
 8006538:	4b15      	ldr	r3, [pc, #84]	@ (8006590 <MX_TIM4_Init+0x94>)
 800653a:	2280      	movs	r2, #128	@ 0x80
 800653c:	619a      	str	r2, [r3, #24]
 800653e:	4814      	ldr	r0, [pc, #80]	@ (8006590 <MX_TIM4_Init+0x94>)
 8006540:	f002 feec 	bl	800931c <HAL_TIM_Base_Init>
 8006544:	4603      	mov	r3, r0
 8006546:	2b00      	cmp	r3, #0
 8006548:	d001      	beq.n	800654e <MX_TIM4_Init+0x52>
 800654a:	f7ff fa11 	bl	8005970 <Error_Handler>
 800654e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006552:	60bb      	str	r3, [r7, #8]
 8006554:	f107 0308 	add.w	r3, r7, #8
 8006558:	4619      	mov	r1, r3
 800655a:	480d      	ldr	r0, [pc, #52]	@ (8006590 <MX_TIM4_Init+0x94>)
 800655c:	f003 fbc6 	bl	8009cec <HAL_TIM_ConfigClockSource>
 8006560:	4603      	mov	r3, r0
 8006562:	2b00      	cmp	r3, #0
 8006564:	d001      	beq.n	800656a <MX_TIM4_Init+0x6e>
 8006566:	f7ff fa03 	bl	8005970 <Error_Handler>
 800656a:	2300      	movs	r3, #0
 800656c:	603b      	str	r3, [r7, #0]
 800656e:	2300      	movs	r3, #0
 8006570:	607b      	str	r3, [r7, #4]
 8006572:	463b      	mov	r3, r7
 8006574:	4619      	mov	r1, r3
 8006576:	4806      	ldr	r0, [pc, #24]	@ (8006590 <MX_TIM4_Init+0x94>)
 8006578:	f003 ff46 	bl	800a408 <HAL_TIMEx_MasterConfigSynchronization>
 800657c:	4603      	mov	r3, r0
 800657e:	2b00      	cmp	r3, #0
 8006580:	d001      	beq.n	8006586 <MX_TIM4_Init+0x8a>
 8006582:	f7ff f9f5 	bl	8005970 <Error_Handler>
 8006586:	bf00      	nop
 8006588:	3718      	adds	r7, #24
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
 800658e:	bf00      	nop
 8006590:	200080e8 	.word	0x200080e8
 8006594:	40000800 	.word	0x40000800

08006598 <HAL_TIM_Base_MspInit>:
 8006598:	b580      	push	{r7, lr}
 800659a:	b08c      	sub	sp, #48	@ 0x30
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	f107 031c 	add.w	r3, r7, #28
 80065a4:	2200      	movs	r2, #0
 80065a6:	601a      	str	r2, [r3, #0]
 80065a8:	605a      	str	r2, [r3, #4]
 80065aa:	609a      	str	r2, [r3, #8]
 80065ac:	60da      	str	r2, [r3, #12]
 80065ae:	611a      	str	r2, [r3, #16]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065b8:	d134      	bne.n	8006624 <HAL_TIM_Base_MspInit+0x8c>
 80065ba:	2300      	movs	r3, #0
 80065bc:	61bb      	str	r3, [r7, #24]
 80065be:	4b33      	ldr	r3, [pc, #204]	@ (800668c <HAL_TIM_Base_MspInit+0xf4>)
 80065c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065c2:	4a32      	ldr	r2, [pc, #200]	@ (800668c <HAL_TIM_Base_MspInit+0xf4>)
 80065c4:	f043 0301 	orr.w	r3, r3, #1
 80065c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80065ca:	4b30      	ldr	r3, [pc, #192]	@ (800668c <HAL_TIM_Base_MspInit+0xf4>)
 80065cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065ce:	f003 0301 	and.w	r3, r3, #1
 80065d2:	61bb      	str	r3, [r7, #24]
 80065d4:	69bb      	ldr	r3, [r7, #24]
 80065d6:	2300      	movs	r3, #0
 80065d8:	617b      	str	r3, [r7, #20]
 80065da:	4b2c      	ldr	r3, [pc, #176]	@ (800668c <HAL_TIM_Base_MspInit+0xf4>)
 80065dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065de:	4a2b      	ldr	r2, [pc, #172]	@ (800668c <HAL_TIM_Base_MspInit+0xf4>)
 80065e0:	f043 0302 	orr.w	r3, r3, #2
 80065e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80065e6:	4b29      	ldr	r3, [pc, #164]	@ (800668c <HAL_TIM_Base_MspInit+0xf4>)
 80065e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065ea:	f003 0302 	and.w	r3, r3, #2
 80065ee:	617b      	str	r3, [r7, #20]
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	2308      	movs	r3, #8
 80065f4:	61fb      	str	r3, [r7, #28]
 80065f6:	2302      	movs	r3, #2
 80065f8:	623b      	str	r3, [r7, #32]
 80065fa:	2300      	movs	r3, #0
 80065fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80065fe:	2300      	movs	r3, #0
 8006600:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006602:	2301      	movs	r3, #1
 8006604:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006606:	f107 031c 	add.w	r3, r7, #28
 800660a:	4619      	mov	r1, r3
 800660c:	4820      	ldr	r0, [pc, #128]	@ (8006690 <HAL_TIM_Base_MspInit+0xf8>)
 800660e:	f001 fbd9 	bl	8007dc4 <HAL_GPIO_Init>
 8006612:	2200      	movs	r2, #0
 8006614:	2100      	movs	r1, #0
 8006616:	201c      	movs	r0, #28
 8006618:	f000 ffbd 	bl	8007596 <HAL_NVIC_SetPriority>
 800661c:	201c      	movs	r0, #28
 800661e:	f000 ffd6 	bl	80075ce <HAL_NVIC_EnableIRQ>
 8006622:	e02e      	b.n	8006682 <HAL_TIM_Base_MspInit+0xea>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a1a      	ldr	r2, [pc, #104]	@ (8006694 <HAL_TIM_Base_MspInit+0xfc>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d10e      	bne.n	800664c <HAL_TIM_Base_MspInit+0xb4>
 800662e:	2300      	movs	r3, #0
 8006630:	613b      	str	r3, [r7, #16]
 8006632:	4b16      	ldr	r3, [pc, #88]	@ (800668c <HAL_TIM_Base_MspInit+0xf4>)
 8006634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006636:	4a15      	ldr	r2, [pc, #84]	@ (800668c <HAL_TIM_Base_MspInit+0xf4>)
 8006638:	f043 0302 	orr.w	r3, r3, #2
 800663c:	6413      	str	r3, [r2, #64]	@ 0x40
 800663e:	4b13      	ldr	r3, [pc, #76]	@ (800668c <HAL_TIM_Base_MspInit+0xf4>)
 8006640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006642:	f003 0302 	and.w	r3, r3, #2
 8006646:	613b      	str	r3, [r7, #16]
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	e01a      	b.n	8006682 <HAL_TIM_Base_MspInit+0xea>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a11      	ldr	r2, [pc, #68]	@ (8006698 <HAL_TIM_Base_MspInit+0x100>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d115      	bne.n	8006682 <HAL_TIM_Base_MspInit+0xea>
 8006656:	2300      	movs	r3, #0
 8006658:	60fb      	str	r3, [r7, #12]
 800665a:	4b0c      	ldr	r3, [pc, #48]	@ (800668c <HAL_TIM_Base_MspInit+0xf4>)
 800665c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800665e:	4a0b      	ldr	r2, [pc, #44]	@ (800668c <HAL_TIM_Base_MspInit+0xf4>)
 8006660:	f043 0304 	orr.w	r3, r3, #4
 8006664:	6413      	str	r3, [r2, #64]	@ 0x40
 8006666:	4b09      	ldr	r3, [pc, #36]	@ (800668c <HAL_TIM_Base_MspInit+0xf4>)
 8006668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800666a:	f003 0304 	and.w	r3, r3, #4
 800666e:	60fb      	str	r3, [r7, #12]
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2200      	movs	r2, #0
 8006674:	2102      	movs	r1, #2
 8006676:	201e      	movs	r0, #30
 8006678:	f000 ff8d 	bl	8007596 <HAL_NVIC_SetPriority>
 800667c:	201e      	movs	r0, #30
 800667e:	f000 ffa6 	bl	80075ce <HAL_NVIC_EnableIRQ>
 8006682:	bf00      	nop
 8006684:	3730      	adds	r7, #48	@ 0x30
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}
 800668a:	bf00      	nop
 800668c:	40023800 	.word	0x40023800
 8006690:	40020400 	.word	0x40020400
 8006694:	40000400 	.word	0x40000400
 8006698:	40000800 	.word	0x40000800

0800669c <MX_USART1_UART_Init>:
 800669c:	b580      	push	{r7, lr}
 800669e:	af00      	add	r7, sp, #0
 80066a0:	4b11      	ldr	r3, [pc, #68]	@ (80066e8 <MX_USART1_UART_Init+0x4c>)
 80066a2:	4a12      	ldr	r2, [pc, #72]	@ (80066ec <MX_USART1_UART_Init+0x50>)
 80066a4:	601a      	str	r2, [r3, #0]
 80066a6:	4b10      	ldr	r3, [pc, #64]	@ (80066e8 <MX_USART1_UART_Init+0x4c>)
 80066a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80066ac:	605a      	str	r2, [r3, #4]
 80066ae:	4b0e      	ldr	r3, [pc, #56]	@ (80066e8 <MX_USART1_UART_Init+0x4c>)
 80066b0:	2200      	movs	r2, #0
 80066b2:	609a      	str	r2, [r3, #8]
 80066b4:	4b0c      	ldr	r3, [pc, #48]	@ (80066e8 <MX_USART1_UART_Init+0x4c>)
 80066b6:	2200      	movs	r2, #0
 80066b8:	60da      	str	r2, [r3, #12]
 80066ba:	4b0b      	ldr	r3, [pc, #44]	@ (80066e8 <MX_USART1_UART_Init+0x4c>)
 80066bc:	2200      	movs	r2, #0
 80066be:	611a      	str	r2, [r3, #16]
 80066c0:	4b09      	ldr	r3, [pc, #36]	@ (80066e8 <MX_USART1_UART_Init+0x4c>)
 80066c2:	220c      	movs	r2, #12
 80066c4:	615a      	str	r2, [r3, #20]
 80066c6:	4b08      	ldr	r3, [pc, #32]	@ (80066e8 <MX_USART1_UART_Init+0x4c>)
 80066c8:	2200      	movs	r2, #0
 80066ca:	619a      	str	r2, [r3, #24]
 80066cc:	4b06      	ldr	r3, [pc, #24]	@ (80066e8 <MX_USART1_UART_Init+0x4c>)
 80066ce:	2200      	movs	r2, #0
 80066d0:	61da      	str	r2, [r3, #28]
 80066d2:	4805      	ldr	r0, [pc, #20]	@ (80066e8 <MX_USART1_UART_Init+0x4c>)
 80066d4:	f003 ff1a 	bl	800a50c <HAL_UART_Init>
 80066d8:	4603      	mov	r3, r0
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d001      	beq.n	80066e2 <MX_USART1_UART_Init+0x46>
 80066de:	f7ff f947 	bl	8005970 <Error_Handler>
 80066e2:	bf00      	nop
 80066e4:	bd80      	pop	{r7, pc}
 80066e6:	bf00      	nop
 80066e8:	20008130 	.word	0x20008130
 80066ec:	40011000 	.word	0x40011000

080066f0 <HAL_UART_MspInit>:
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b08a      	sub	sp, #40	@ 0x28
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	f107 0314 	add.w	r3, r7, #20
 80066fc:	2200      	movs	r2, #0
 80066fe:	601a      	str	r2, [r3, #0]
 8006700:	605a      	str	r2, [r3, #4]
 8006702:	609a      	str	r2, [r3, #8]
 8006704:	60da      	str	r2, [r3, #12]
 8006706:	611a      	str	r2, [r3, #16]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a19      	ldr	r2, [pc, #100]	@ (8006774 <HAL_UART_MspInit+0x84>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d12c      	bne.n	800676c <HAL_UART_MspInit+0x7c>
 8006712:	2300      	movs	r3, #0
 8006714:	613b      	str	r3, [r7, #16]
 8006716:	4b18      	ldr	r3, [pc, #96]	@ (8006778 <HAL_UART_MspInit+0x88>)
 8006718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800671a:	4a17      	ldr	r2, [pc, #92]	@ (8006778 <HAL_UART_MspInit+0x88>)
 800671c:	f043 0310 	orr.w	r3, r3, #16
 8006720:	6453      	str	r3, [r2, #68]	@ 0x44
 8006722:	4b15      	ldr	r3, [pc, #84]	@ (8006778 <HAL_UART_MspInit+0x88>)
 8006724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006726:	f003 0310 	and.w	r3, r3, #16
 800672a:	613b      	str	r3, [r7, #16]
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	2300      	movs	r3, #0
 8006730:	60fb      	str	r3, [r7, #12]
 8006732:	4b11      	ldr	r3, [pc, #68]	@ (8006778 <HAL_UART_MspInit+0x88>)
 8006734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006736:	4a10      	ldr	r2, [pc, #64]	@ (8006778 <HAL_UART_MspInit+0x88>)
 8006738:	f043 0301 	orr.w	r3, r3, #1
 800673c:	6313      	str	r3, [r2, #48]	@ 0x30
 800673e:	4b0e      	ldr	r3, [pc, #56]	@ (8006778 <HAL_UART_MspInit+0x88>)
 8006740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006742:	f003 0301 	and.w	r3, r3, #1
 8006746:	60fb      	str	r3, [r7, #12]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800674e:	617b      	str	r3, [r7, #20]
 8006750:	2302      	movs	r3, #2
 8006752:	61bb      	str	r3, [r7, #24]
 8006754:	2300      	movs	r3, #0
 8006756:	61fb      	str	r3, [r7, #28]
 8006758:	2303      	movs	r3, #3
 800675a:	623b      	str	r3, [r7, #32]
 800675c:	2307      	movs	r3, #7
 800675e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006760:	f107 0314 	add.w	r3, r7, #20
 8006764:	4619      	mov	r1, r3
 8006766:	4805      	ldr	r0, [pc, #20]	@ (800677c <HAL_UART_MspInit+0x8c>)
 8006768:	f001 fb2c 	bl	8007dc4 <HAL_GPIO_Init>
 800676c:	bf00      	nop
 800676e:	3728      	adds	r7, #40	@ 0x28
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}
 8006774:	40011000 	.word	0x40011000
 8006778:	40023800 	.word	0x40023800
 800677c:	40020000 	.word	0x40020000

08006780 <Reset_Handler>:
 8006780:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80067b8 <LoopFillZerobss+0xe>
 8006784:	f7ff fdec 	bl	8006360 <SystemInit>
 8006788:	480c      	ldr	r0, [pc, #48]	@ (80067bc <LoopFillZerobss+0x12>)
 800678a:	490d      	ldr	r1, [pc, #52]	@ (80067c0 <LoopFillZerobss+0x16>)
 800678c:	4a0d      	ldr	r2, [pc, #52]	@ (80067c4 <LoopFillZerobss+0x1a>)
 800678e:	2300      	movs	r3, #0
 8006790:	e002      	b.n	8006798 <LoopCopyDataInit>

08006792 <CopyDataInit>:
 8006792:	58d4      	ldr	r4, [r2, r3]
 8006794:	50c4      	str	r4, [r0, r3]
 8006796:	3304      	adds	r3, #4

08006798 <LoopCopyDataInit>:
 8006798:	18c4      	adds	r4, r0, r3
 800679a:	428c      	cmp	r4, r1
 800679c:	d3f9      	bcc.n	8006792 <CopyDataInit>
 800679e:	4a0a      	ldr	r2, [pc, #40]	@ (80067c8 <LoopFillZerobss+0x1e>)
 80067a0:	4c0a      	ldr	r4, [pc, #40]	@ (80067cc <LoopFillZerobss+0x22>)
 80067a2:	2300      	movs	r3, #0
 80067a4:	e001      	b.n	80067aa <LoopFillZerobss>

080067a6 <FillZerobss>:
 80067a6:	6013      	str	r3, [r2, #0]
 80067a8:	3204      	adds	r2, #4

080067aa <LoopFillZerobss>:
 80067aa:	42a2      	cmp	r2, r4
 80067ac:	d3fb      	bcc.n	80067a6 <FillZerobss>
 80067ae:	f004 ff57 	bl	800b660 <__libc_init_array>
 80067b2:	f7fe ff77 	bl	80056a4 <main>
 80067b6:	4770      	bx	lr
 80067b8:	20020000 	.word	0x20020000
 80067bc:	20000000 	.word	0x20000000
 80067c0:	200001d8 	.word	0x200001d8
 80067c4:	08010d60 	.word	0x08010d60
 80067c8:	200001d8 	.word	0x200001d8
 80067cc:	200082c8 	.word	0x200082c8

080067d0 <DMA1_Stream0_IRQHandler>:
 80067d0:	e7fe      	b.n	80067d0 <DMA1_Stream0_IRQHandler>
	...

080067d4 <HAL_Init>:
 80067d4:	b580      	push	{r7, lr}
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	4b0e      	ldr	r3, [pc, #56]	@ (8006814 <HAL_Init+0x40>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a0d      	ldr	r2, [pc, #52]	@ (8006814 <HAL_Init+0x40>)
 80067de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80067e2:	6013      	str	r3, [r2, #0]
 80067e4:	4b0b      	ldr	r3, [pc, #44]	@ (8006814 <HAL_Init+0x40>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a0a      	ldr	r2, [pc, #40]	@ (8006814 <HAL_Init+0x40>)
 80067ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80067ee:	6013      	str	r3, [r2, #0]
 80067f0:	4b08      	ldr	r3, [pc, #32]	@ (8006814 <HAL_Init+0x40>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a07      	ldr	r2, [pc, #28]	@ (8006814 <HAL_Init+0x40>)
 80067f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067fa:	6013      	str	r3, [r2, #0]
 80067fc:	2003      	movs	r0, #3
 80067fe:	f000 febf 	bl	8007580 <HAL_NVIC_SetPriorityGrouping>
 8006802:	200f      	movs	r0, #15
 8006804:	f000 f808 	bl	8006818 <HAL_InitTick>
 8006808:	f7ff fc50 	bl	80060ac <HAL_MspInit>
 800680c:	2300      	movs	r3, #0
 800680e:	4618      	mov	r0, r3
 8006810:	bd80      	pop	{r7, pc}
 8006812:	bf00      	nop
 8006814:	40023c00 	.word	0x40023c00

08006818 <HAL_InitTick>:
 8006818:	b580      	push	{r7, lr}
 800681a:	b082      	sub	sp, #8
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	4b12      	ldr	r3, [pc, #72]	@ (800686c <HAL_InitTick+0x54>)
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	4b12      	ldr	r3, [pc, #72]	@ (8006870 <HAL_InitTick+0x58>)
 8006826:	781b      	ldrb	r3, [r3, #0]
 8006828:	4619      	mov	r1, r3
 800682a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800682e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006832:	fbb2 f3f3 	udiv	r3, r2, r3
 8006836:	4618      	mov	r0, r3
 8006838:	f000 fed7 	bl	80075ea <HAL_SYSTICK_Config>
 800683c:	4603      	mov	r3, r0
 800683e:	2b00      	cmp	r3, #0
 8006840:	d001      	beq.n	8006846 <HAL_InitTick+0x2e>
 8006842:	2301      	movs	r3, #1
 8006844:	e00e      	b.n	8006864 <HAL_InitTick+0x4c>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2b0f      	cmp	r3, #15
 800684a:	d80a      	bhi.n	8006862 <HAL_InitTick+0x4a>
 800684c:	2200      	movs	r2, #0
 800684e:	6879      	ldr	r1, [r7, #4]
 8006850:	f04f 30ff 	mov.w	r0, #4294967295
 8006854:	f000 fe9f 	bl	8007596 <HAL_NVIC_SetPriority>
 8006858:	4a06      	ldr	r2, [pc, #24]	@ (8006874 <HAL_InitTick+0x5c>)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6013      	str	r3, [r2, #0]
 800685e:	2300      	movs	r3, #0
 8006860:	e000      	b.n	8006864 <HAL_InitTick+0x4c>
 8006862:	2301      	movs	r3, #1
 8006864:	4618      	mov	r0, r3
 8006866:	3708      	adds	r7, #8
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}
 800686c:	20000004 	.word	0x20000004
 8006870:	2000000c 	.word	0x2000000c
 8006874:	20000008 	.word	0x20000008

08006878 <HAL_IncTick>:
 8006878:	b480      	push	{r7}
 800687a:	af00      	add	r7, sp, #0
 800687c:	4b06      	ldr	r3, [pc, #24]	@ (8006898 <HAL_IncTick+0x20>)
 800687e:	781b      	ldrb	r3, [r3, #0]
 8006880:	461a      	mov	r2, r3
 8006882:	4b06      	ldr	r3, [pc, #24]	@ (800689c <HAL_IncTick+0x24>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4413      	add	r3, r2
 8006888:	4a04      	ldr	r2, [pc, #16]	@ (800689c <HAL_IncTick+0x24>)
 800688a:	6013      	str	r3, [r2, #0]
 800688c:	bf00      	nop
 800688e:	46bd      	mov	sp, r7
 8006890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006894:	4770      	bx	lr
 8006896:	bf00      	nop
 8006898:	2000000c 	.word	0x2000000c
 800689c:	20008178 	.word	0x20008178

080068a0 <HAL_GetTick>:
 80068a0:	b480      	push	{r7}
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	4b03      	ldr	r3, [pc, #12]	@ (80068b4 <HAL_GetTick+0x14>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4618      	mov	r0, r3
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr
 80068b2:	bf00      	nop
 80068b4:	20008178 	.word	0x20008178

080068b8 <HAL_Delay>:
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b084      	sub	sp, #16
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	f7ff ffee 	bl	80068a0 <HAL_GetTick>
 80068c4:	60b8      	str	r0, [r7, #8]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	60fb      	str	r3, [r7, #12]
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068d0:	d005      	beq.n	80068de <HAL_Delay+0x26>
 80068d2:	4b0a      	ldr	r3, [pc, #40]	@ (80068fc <HAL_Delay+0x44>)
 80068d4:	781b      	ldrb	r3, [r3, #0]
 80068d6:	461a      	mov	r2, r3
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	4413      	add	r3, r2
 80068dc:	60fb      	str	r3, [r7, #12]
 80068de:	bf00      	nop
 80068e0:	f7ff ffde 	bl	80068a0 <HAL_GetTick>
 80068e4:	4602      	mov	r2, r0
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	1ad3      	subs	r3, r2, r3
 80068ea:	68fa      	ldr	r2, [r7, #12]
 80068ec:	429a      	cmp	r2, r3
 80068ee:	d8f7      	bhi.n	80068e0 <HAL_Delay+0x28>
 80068f0:	bf00      	nop
 80068f2:	bf00      	nop
 80068f4:	3710      	adds	r7, #16
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}
 80068fa:	bf00      	nop
 80068fc:	2000000c 	.word	0x2000000c

08006900 <HAL_ADC_Init>:
 8006900:	b580      	push	{r7, lr}
 8006902:	b084      	sub	sp, #16
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
 8006908:	2300      	movs	r3, #0
 800690a:	73fb      	strb	r3, [r7, #15]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d101      	bne.n	8006916 <HAL_ADC_Init+0x16>
 8006912:	2301      	movs	r3, #1
 8006914:	e033      	b.n	800697e <HAL_ADC_Init+0x7e>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800691a:	2b00      	cmp	r3, #0
 800691c:	d109      	bne.n	8006932 <HAL_ADC_Init+0x32>
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f7fa fc90 	bl	8001244 <HAL_ADC_MspInit>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	645a      	str	r2, [r3, #68]	@ 0x44
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2200      	movs	r2, #0
 800692e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006936:	f003 0310 	and.w	r3, r3, #16
 800693a:	2b00      	cmp	r3, #0
 800693c:	d118      	bne.n	8006970 <HAL_ADC_Init+0x70>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006942:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8006946:	f023 0302 	bic.w	r3, r3, #2
 800694a:	f043 0202 	orr.w	r2, r3, #2
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	641a      	str	r2, [r3, #64]	@ 0x40
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f000 fbbc 	bl	80070d0 <ADC_Init>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	645a      	str	r2, [r3, #68]	@ 0x44
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006962:	f023 0303 	bic.w	r3, r3, #3
 8006966:	f043 0201 	orr.w	r2, r3, #1
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	641a      	str	r2, [r3, #64]	@ 0x40
 800696e:	e001      	b.n	8006974 <HAL_ADC_Init+0x74>
 8006970:	2301      	movs	r3, #1
 8006972:	73fb      	strb	r3, [r7, #15]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2200      	movs	r2, #0
 8006978:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800697c:	7bfb      	ldrb	r3, [r7, #15]
 800697e:	4618      	mov	r0, r3
 8006980:	3710      	adds	r7, #16
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}

08006986 <HAL_ADC_IRQHandler>:
 8006986:	b580      	push	{r7, lr}
 8006988:	b086      	sub	sp, #24
 800698a:	af00      	add	r7, sp, #0
 800698c:	6078      	str	r0, [r7, #4]
 800698e:	2300      	movs	r3, #0
 8006990:	617b      	str	r3, [r7, #20]
 8006992:	2300      	movs	r3, #0
 8006994:	613b      	str	r3, [r7, #16]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	60fb      	str	r3, [r7, #12]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	60bb      	str	r3, [r7, #8]
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	f003 0302 	and.w	r3, r3, #2
 80069ac:	617b      	str	r3, [r7, #20]
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	f003 0320 	and.w	r3, r3, #32
 80069b4:	613b      	str	r3, [r7, #16]
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d049      	beq.n	8006a50 <HAL_ADC_IRQHandler+0xca>
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d046      	beq.n	8006a50 <HAL_ADC_IRQHandler+0xca>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069c6:	f003 0310 	and.w	r3, r3, #16
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d105      	bne.n	80069da <HAL_ADC_IRQHandler+0x54>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069d2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	641a      	str	r2, [r3, #64]	@ 0x40
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	689b      	ldr	r3, [r3, #8]
 80069e0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d12b      	bne.n	8006a40 <HAL_ADC_IRQHandler+0xba>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	7e1b      	ldrb	r3, [r3, #24]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d127      	bne.n	8006a40 <HAL_ADC_IRQHandler+0xba>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069f6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d006      	beq.n	8006a0c <HAL_ADC_IRQHandler+0x86>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d119      	bne.n	8006a40 <HAL_ADC_IRQHandler+0xba>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	685a      	ldr	r2, [r3, #4]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f022 0220 	bic.w	r2, r2, #32
 8006a1a:	605a      	str	r2, [r3, #4]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a20:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	641a      	str	r2, [r3, #64]	@ 0x40
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a2c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d105      	bne.n	8006a40 <HAL_ADC_IRQHandler+0xba>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a38:	f043 0201 	orr.w	r2, r3, #1
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	641a      	str	r2, [r3, #64]	@ 0x40
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f7fa fe7d 	bl	8001740 <HAL_ADC_ConvCpltCallback>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f06f 0212 	mvn.w	r2, #18
 8006a4e:	601a      	str	r2, [r3, #0]
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f003 0304 	and.w	r3, r3, #4
 8006a56:	617b      	str	r3, [r7, #20]
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a5e:	613b      	str	r3, [r7, #16]
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d057      	beq.n	8006b16 <HAL_ADC_IRQHandler+0x190>
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d054      	beq.n	8006b16 <HAL_ADC_IRQHandler+0x190>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a70:	f003 0310 	and.w	r3, r3, #16
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d105      	bne.n	8006a84 <HAL_ADC_IRQHandler+0xfe>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a7c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	641a      	str	r2, [r3, #64]	@ 0x40
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d139      	bne.n	8006b06 <HAL_ADC_IRQHandler+0x180>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a98:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d006      	beq.n	8006aae <HAL_ADC_IRQHandler+0x128>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	689b      	ldr	r3, [r3, #8]
 8006aa6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d12b      	bne.n	8006b06 <HAL_ADC_IRQHandler+0x180>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d124      	bne.n	8006b06 <HAL_ADC_IRQHandler+0x180>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	689b      	ldr	r3, [r3, #8]
 8006ac2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d11d      	bne.n	8006b06 <HAL_ADC_IRQHandler+0x180>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	7e1b      	ldrb	r3, [r3, #24]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d119      	bne.n	8006b06 <HAL_ADC_IRQHandler+0x180>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	685a      	ldr	r2, [r3, #4]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006ae0:	605a      	str	r2, [r3, #4]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ae6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	641a      	str	r2, [r3, #64]	@ 0x40
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006af2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d105      	bne.n	8006b06 <HAL_ADC_IRQHandler+0x180>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006afe:	f043 0201 	orr.w	r2, r3, #1
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	641a      	str	r2, [r3, #64]	@ 0x40
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f000 fc60 	bl	80073cc <HAL_ADCEx_InjectedConvCpltCallback>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f06f 020c 	mvn.w	r2, #12
 8006b14:	601a      	str	r2, [r3, #0]
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	f003 0301 	and.w	r3, r3, #1
 8006b1c:	617b      	str	r3, [r7, #20]
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b24:	613b      	str	r3, [r7, #16]
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d017      	beq.n	8006b5c <HAL_ADC_IRQHandler+0x1d6>
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d014      	beq.n	8006b5c <HAL_ADC_IRQHandler+0x1d6>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f003 0301 	and.w	r3, r3, #1
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d10d      	bne.n	8006b5c <HAL_ADC_IRQHandler+0x1d6>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b44:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	641a      	str	r2, [r3, #64]	@ 0x40
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f000 f983 	bl	8006e58 <HAL_ADC_LevelOutOfWindowCallback>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f06f 0201 	mvn.w	r2, #1
 8006b5a:	601a      	str	r2, [r3, #0]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f003 0320 	and.w	r3, r3, #32
 8006b62:	617b      	str	r3, [r7, #20]
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006b6a:	613b      	str	r3, [r7, #16]
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d015      	beq.n	8006b9e <HAL_ADC_IRQHandler+0x218>
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d012      	beq.n	8006b9e <HAL_ADC_IRQHandler+0x218>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b7c:	f043 0202 	orr.w	r2, r3, #2
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	645a      	str	r2, [r3, #68]	@ 0x44
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f06f 0220 	mvn.w	r2, #32
 8006b8c:	601a      	str	r2, [r3, #0]
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f7fa fde6 	bl	8001760 <HAL_ADC_ErrorCallback>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f06f 0220 	mvn.w	r2, #32
 8006b9c:	601a      	str	r2, [r3, #0]
 8006b9e:	bf00      	nop
 8006ba0:	3718      	adds	r7, #24
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}
	...

08006ba8 <HAL_ADC_Start_DMA>:
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b088      	sub	sp, #32
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	60f8      	str	r0, [r7, #12]
 8006bb0:	60b9      	str	r1, [r7, #8]
 8006bb2:	607a      	str	r2, [r7, #4]
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	617b      	str	r3, [r7, #20]
 8006bb8:	2300      	movs	r3, #0
 8006bba:	77fb      	strb	r3, [r7, #31]
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006bc2:	2b01      	cmp	r3, #1
 8006bc4:	d101      	bne.n	8006bca <HAL_ADC_Start_DMA+0x22>
 8006bc6:	2302      	movs	r3, #2
 8006bc8:	e0d0      	b.n	8006d6c <HAL_ADC_Start_DMA+0x1c4>
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2201      	movs	r2, #1
 8006bce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	689b      	ldr	r3, [r3, #8]
 8006bd8:	f003 0301 	and.w	r3, r3, #1
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	d018      	beq.n	8006c12 <HAL_ADC_Start_DMA+0x6a>
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	689a      	ldr	r2, [r3, #8]
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f042 0201 	orr.w	r2, r2, #1
 8006bee:	609a      	str	r2, [r3, #8]
 8006bf0:	4b60      	ldr	r3, [pc, #384]	@ (8006d74 <HAL_ADC_Start_DMA+0x1cc>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a60      	ldr	r2, [pc, #384]	@ (8006d78 <HAL_ADC_Start_DMA+0x1d0>)
 8006bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8006bfa:	0c9a      	lsrs	r2, r3, #18
 8006bfc:	4613      	mov	r3, r2
 8006bfe:	005b      	lsls	r3, r3, #1
 8006c00:	4413      	add	r3, r2
 8006c02:	617b      	str	r3, [r7, #20]
 8006c04:	e002      	b.n	8006c0c <HAL_ADC_Start_DMA+0x64>
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	3b01      	subs	r3, #1
 8006c0a:	617b      	str	r3, [r7, #20]
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d1f9      	bne.n	8006c06 <HAL_ADC_Start_DMA+0x5e>
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c20:	d107      	bne.n	8006c32 <HAL_ADC_Start_DMA+0x8a>
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	689a      	ldr	r2, [r3, #8]
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006c30:	609a      	str	r2, [r3, #8]
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	f003 0301 	and.w	r3, r3, #1
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	f040 8088 	bne.w	8006d52 <HAL_ADC_Start_DMA+0x1aa>
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c46:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8006c4a:	f023 0301 	bic.w	r3, r3, #1
 8006c4e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	641a      	str	r2, [r3, #64]	@ 0x40
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d007      	beq.n	8006c74 <HAL_ADC_Start_DMA+0xcc>
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c68:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8006c6c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	641a      	str	r2, [r3, #64]	@ 0x40
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c78:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006c7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c80:	d106      	bne.n	8006c90 <HAL_ADC_Start_DMA+0xe8>
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c86:	f023 0206 	bic.w	r2, r3, #6
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	645a      	str	r2, [r3, #68]	@ 0x44
 8006c8e:	e002      	b.n	8006c96 <HAL_ADC_Start_DMA+0xee>
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2200      	movs	r2, #0
 8006c94:	645a      	str	r2, [r3, #68]	@ 0x44
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8006c9e:	4b37      	ldr	r3, [pc, #220]	@ (8006d7c <HAL_ADC_Start_DMA+0x1d4>)
 8006ca0:	61bb      	str	r3, [r7, #24]
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ca6:	4a36      	ldr	r2, [pc, #216]	@ (8006d80 <HAL_ADC_Start_DMA+0x1d8>)
 8006ca8:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cae:	4a35      	ldr	r2, [pc, #212]	@ (8006d84 <HAL_ADC_Start_DMA+0x1dc>)
 8006cb0:	641a      	str	r2, [r3, #64]	@ 0x40
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cb6:	4a34      	ldr	r2, [pc, #208]	@ (8006d88 <HAL_ADC_Start_DMA+0x1e0>)
 8006cb8:	64da      	str	r2, [r3, #76]	@ 0x4c
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8006cc2:	601a      	str	r2, [r3, #0]
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	685a      	ldr	r2, [r3, #4]
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8006cd2:	605a      	str	r2, [r3, #4]
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	689a      	ldr	r2, [r3, #8]
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006ce2:	609a      	str	r2, [r3, #8]
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	334c      	adds	r3, #76	@ 0x4c
 8006cee:	4619      	mov	r1, r3
 8006cf0:	68ba      	ldr	r2, [r7, #8]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f000 fd34 	bl	8007760 <HAL_DMA_Start_IT>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	77fb      	strb	r3, [r7, #31]
 8006cfc:	69bb      	ldr	r3, [r7, #24]
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	f003 031f 	and.w	r3, r3, #31
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d10f      	bne.n	8006d28 <HAL_ADC_Start_DMA+0x180>
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	689b      	ldr	r3, [r3, #8]
 8006d0e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d129      	bne.n	8006d6a <HAL_ADC_Start_DMA+0x1c2>
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	689a      	ldr	r2, [r3, #8]
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8006d24:	609a      	str	r2, [r3, #8]
 8006d26:	e020      	b.n	8006d6a <HAL_ADC_Start_DMA+0x1c2>
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a17      	ldr	r2, [pc, #92]	@ (8006d8c <HAL_ADC_Start_DMA+0x1e4>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d11b      	bne.n	8006d6a <HAL_ADC_Start_DMA+0x1c2>
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d114      	bne.n	8006d6a <HAL_ADC_Start_DMA+0x1c2>
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	689a      	ldr	r2, [r3, #8]
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8006d4e:	609a      	str	r2, [r3, #8]
 8006d50:	e00b      	b.n	8006d6a <HAL_ADC_Start_DMA+0x1c2>
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d56:	f043 0210 	orr.w	r2, r3, #16
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	641a      	str	r2, [r3, #64]	@ 0x40
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d62:	f043 0201 	orr.w	r2, r3, #1
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	645a      	str	r2, [r3, #68]	@ 0x44
 8006d6a:	7ffb      	ldrb	r3, [r7, #31]
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3720      	adds	r7, #32
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}
 8006d74:	20000004 	.word	0x20000004
 8006d78:	431bde83 	.word	0x431bde83
 8006d7c:	40012300 	.word	0x40012300
 8006d80:	080072c9 	.word	0x080072c9
 8006d84:	08007383 	.word	0x08007383
 8006d88:	0800739f 	.word	0x0800739f
 8006d8c:	40012000 	.word	0x40012000

08006d90 <HAL_ADC_Stop_DMA>:
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b084      	sub	sp, #16
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	2300      	movs	r3, #0
 8006d9a:	73fb      	strb	r3, [r7, #15]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006da2:	2b01      	cmp	r3, #1
 8006da4:	d101      	bne.n	8006daa <HAL_ADC_Stop_DMA+0x1a>
 8006da6:	2302      	movs	r3, #2
 8006da8:	e048      	b.n	8006e3c <HAL_ADC_Stop_DMA+0xac>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2201      	movs	r2, #1
 8006dae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	689a      	ldr	r2, [r3, #8]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f022 0201 	bic.w	r2, r2, #1
 8006dc0:	609a      	str	r2, [r3, #8]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	689b      	ldr	r3, [r3, #8]
 8006dc8:	f003 0301 	and.w	r3, r3, #1
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d130      	bne.n	8006e32 <HAL_ADC_Stop_DMA+0xa2>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	689a      	ldr	r2, [r3, #8]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006dde:	609a      	str	r2, [r3, #8]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006de4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006de8:	b2db      	uxtb	r3, r3
 8006dea:	2b02      	cmp	r3, #2
 8006dec:	d10f      	bne.n	8006e0e <HAL_ADC_Stop_DMA+0x7e>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006df2:	4618      	mov	r0, r3
 8006df4:	f000 fd0c 	bl	8007810 <HAL_DMA_Abort>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	73fb      	strb	r3, [r7, #15]
 8006dfc:	7bfb      	ldrb	r3, [r7, #15]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d005      	beq.n	8006e0e <HAL_ADC_Stop_DMA+0x7e>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e06:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	641a      	str	r2, [r3, #64]	@ 0x40
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	685a      	ldr	r2, [r3, #4]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 8006e1c:	605a      	str	r2, [r3, #4]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e22:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8006e26:	f023 0301 	bic.w	r3, r3, #1
 8006e2a:	f043 0201 	orr.w	r2, r3, #1
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	641a      	str	r2, [r3, #64]	@ 0x40
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2200      	movs	r2, #0
 8006e36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8006e3a:	7bfb      	ldrb	r3, [r7, #15]
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3710      	adds	r7, #16
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <HAL_ADC_ConvHalfCpltCallback>:
 8006e44:	b480      	push	{r7}
 8006e46:	b083      	sub	sp, #12
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	bf00      	nop
 8006e4e:	370c      	adds	r7, #12
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr

08006e58 <HAL_ADC_LevelOutOfWindowCallback>:
 8006e58:	b480      	push	{r7}
 8006e5a:	b083      	sub	sp, #12
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
 8006e60:	bf00      	nop
 8006e62:	370c      	adds	r7, #12
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr

08006e6c <HAL_ADC_ConfigChannel>:
 8006e6c:	b480      	push	{r7}
 8006e6e:	b085      	sub	sp, #20
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	6039      	str	r1, [r7, #0]
 8006e76:	2300      	movs	r3, #0
 8006e78:	60bb      	str	r3, [r7, #8]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d101      	bne.n	8006e88 <HAL_ADC_ConfigChannel+0x1c>
 8006e84:	2302      	movs	r3, #2
 8006e86:	e113      	b.n	80070b0 <HAL_ADC_ConfigChannel+0x244>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	2b09      	cmp	r3, #9
 8006e96:	d925      	bls.n	8006ee4 <HAL_ADC_ConfigChannel+0x78>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	68d9      	ldr	r1, [r3, #12]
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	4613      	mov	r3, r2
 8006ea8:	005b      	lsls	r3, r3, #1
 8006eaa:	4413      	add	r3, r2
 8006eac:	3b1e      	subs	r3, #30
 8006eae:	2207      	movs	r2, #7
 8006eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8006eb4:	43da      	mvns	r2, r3
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	400a      	ands	r2, r1
 8006ebc:	60da      	str	r2, [r3, #12]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	68d9      	ldr	r1, [r3, #12]
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	689a      	ldr	r2, [r3, #8]
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	b29b      	uxth	r3, r3
 8006ece:	4618      	mov	r0, r3
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	005b      	lsls	r3, r3, #1
 8006ed4:	4403      	add	r3, r0
 8006ed6:	3b1e      	subs	r3, #30
 8006ed8:	409a      	lsls	r2, r3
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	430a      	orrs	r2, r1
 8006ee0:	60da      	str	r2, [r3, #12]
 8006ee2:	e022      	b.n	8006f2a <HAL_ADC_ConfigChannel+0xbe>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	6919      	ldr	r1, [r3, #16]
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	b29b      	uxth	r3, r3
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	4613      	mov	r3, r2
 8006ef4:	005b      	lsls	r3, r3, #1
 8006ef6:	4413      	add	r3, r2
 8006ef8:	2207      	movs	r2, #7
 8006efa:	fa02 f303 	lsl.w	r3, r2, r3
 8006efe:	43da      	mvns	r2, r3
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	400a      	ands	r2, r1
 8006f06:	611a      	str	r2, [r3, #16]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	6919      	ldr	r1, [r3, #16]
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	689a      	ldr	r2, [r3, #8]
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	b29b      	uxth	r3, r3
 8006f18:	4618      	mov	r0, r3
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	005b      	lsls	r3, r3, #1
 8006f1e:	4403      	add	r3, r0
 8006f20:	409a      	lsls	r2, r3
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	430a      	orrs	r2, r1
 8006f28:	611a      	str	r2, [r3, #16]
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	2b06      	cmp	r3, #6
 8006f30:	d824      	bhi.n	8006f7c <HAL_ADC_ConfigChannel+0x110>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	685a      	ldr	r2, [r3, #4]
 8006f3c:	4613      	mov	r3, r2
 8006f3e:	009b      	lsls	r3, r3, #2
 8006f40:	4413      	add	r3, r2
 8006f42:	3b05      	subs	r3, #5
 8006f44:	221f      	movs	r2, #31
 8006f46:	fa02 f303 	lsl.w	r3, r2, r3
 8006f4a:	43da      	mvns	r2, r3
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	400a      	ands	r2, r1
 8006f52:	635a      	str	r2, [r3, #52]	@ 0x34
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	b29b      	uxth	r3, r3
 8006f60:	4618      	mov	r0, r3
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	685a      	ldr	r2, [r3, #4]
 8006f66:	4613      	mov	r3, r2
 8006f68:	009b      	lsls	r3, r3, #2
 8006f6a:	4413      	add	r3, r2
 8006f6c:	3b05      	subs	r3, #5
 8006f6e:	fa00 f203 	lsl.w	r2, r0, r3
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	430a      	orrs	r2, r1
 8006f78:	635a      	str	r2, [r3, #52]	@ 0x34
 8006f7a:	e04c      	b.n	8007016 <HAL_ADC_ConfigChannel+0x1aa>
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	2b0c      	cmp	r3, #12
 8006f82:	d824      	bhi.n	8006fce <HAL_ADC_ConfigChannel+0x162>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	685a      	ldr	r2, [r3, #4]
 8006f8e:	4613      	mov	r3, r2
 8006f90:	009b      	lsls	r3, r3, #2
 8006f92:	4413      	add	r3, r2
 8006f94:	3b23      	subs	r3, #35	@ 0x23
 8006f96:	221f      	movs	r2, #31
 8006f98:	fa02 f303 	lsl.w	r3, r2, r3
 8006f9c:	43da      	mvns	r2, r3
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	400a      	ands	r2, r1
 8006fa4:	631a      	str	r2, [r3, #48]	@ 0x30
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	685a      	ldr	r2, [r3, #4]
 8006fb8:	4613      	mov	r3, r2
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	4413      	add	r3, r2
 8006fbe:	3b23      	subs	r3, #35	@ 0x23
 8006fc0:	fa00 f203 	lsl.w	r2, r0, r3
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	430a      	orrs	r2, r1
 8006fca:	631a      	str	r2, [r3, #48]	@ 0x30
 8006fcc:	e023      	b.n	8007016 <HAL_ADC_ConfigChannel+0x1aa>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	685a      	ldr	r2, [r3, #4]
 8006fd8:	4613      	mov	r3, r2
 8006fda:	009b      	lsls	r3, r3, #2
 8006fdc:	4413      	add	r3, r2
 8006fde:	3b41      	subs	r3, #65	@ 0x41
 8006fe0:	221f      	movs	r2, #31
 8006fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8006fe6:	43da      	mvns	r2, r3
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	400a      	ands	r2, r1
 8006fee:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	685a      	ldr	r2, [r3, #4]
 8007002:	4613      	mov	r3, r2
 8007004:	009b      	lsls	r3, r3, #2
 8007006:	4413      	add	r3, r2
 8007008:	3b41      	subs	r3, #65	@ 0x41
 800700a:	fa00 f203 	lsl.w	r2, r0, r3
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	430a      	orrs	r2, r1
 8007014:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007016:	4b29      	ldr	r3, [pc, #164]	@ (80070bc <HAL_ADC_ConfigChannel+0x250>)
 8007018:	60fb      	str	r3, [r7, #12]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a28      	ldr	r2, [pc, #160]	@ (80070c0 <HAL_ADC_ConfigChannel+0x254>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d10f      	bne.n	8007044 <HAL_ADC_ConfigChannel+0x1d8>
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	2b12      	cmp	r3, #18
 800702a:	d10b      	bne.n	8007044 <HAL_ADC_ConfigChannel+0x1d8>
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	605a      	str	r2, [r3, #4]
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	605a      	str	r2, [r3, #4]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a1d      	ldr	r2, [pc, #116]	@ (80070c0 <HAL_ADC_ConfigChannel+0x254>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d12b      	bne.n	80070a6 <HAL_ADC_ConfigChannel+0x23a>
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a1c      	ldr	r2, [pc, #112]	@ (80070c4 <HAL_ADC_ConfigChannel+0x258>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d003      	beq.n	8007060 <HAL_ADC_ConfigChannel+0x1f4>
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	2b11      	cmp	r3, #17
 800705e:	d122      	bne.n	80070a6 <HAL_ADC_ConfigChannel+0x23a>
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	605a      	str	r2, [r3, #4]
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	605a      	str	r2, [r3, #4]
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a11      	ldr	r2, [pc, #68]	@ (80070c4 <HAL_ADC_ConfigChannel+0x258>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d111      	bne.n	80070a6 <HAL_ADC_ConfigChannel+0x23a>
 8007082:	4b11      	ldr	r3, [pc, #68]	@ (80070c8 <HAL_ADC_ConfigChannel+0x25c>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a11      	ldr	r2, [pc, #68]	@ (80070cc <HAL_ADC_ConfigChannel+0x260>)
 8007088:	fba2 2303 	umull	r2, r3, r2, r3
 800708c:	0c9a      	lsrs	r2, r3, #18
 800708e:	4613      	mov	r3, r2
 8007090:	009b      	lsls	r3, r3, #2
 8007092:	4413      	add	r3, r2
 8007094:	005b      	lsls	r3, r3, #1
 8007096:	60bb      	str	r3, [r7, #8]
 8007098:	e002      	b.n	80070a0 <HAL_ADC_ConfigChannel+0x234>
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	3b01      	subs	r3, #1
 800709e:	60bb      	str	r3, [r7, #8]
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d1f9      	bne.n	800709a <HAL_ADC_ConfigChannel+0x22e>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2200      	movs	r2, #0
 80070aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80070ae:	2300      	movs	r3, #0
 80070b0:	4618      	mov	r0, r3
 80070b2:	3714      	adds	r7, #20
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr
 80070bc:	40012300 	.word	0x40012300
 80070c0:	40012000 	.word	0x40012000
 80070c4:	10000012 	.word	0x10000012
 80070c8:	20000004 	.word	0x20000004
 80070cc:	431bde83 	.word	0x431bde83

080070d0 <ADC_Init>:
 80070d0:	b480      	push	{r7}
 80070d2:	b085      	sub	sp, #20
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	4b79      	ldr	r3, [pc, #484]	@ (80072c0 <ADC_Init+0x1f0>)
 80070da:	60fb      	str	r3, [r7, #12]
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	605a      	str	r2, [r3, #4]
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	685a      	ldr	r2, [r3, #4]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	431a      	orrs	r2, r3
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	605a      	str	r2, [r3, #4]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	685a      	ldr	r2, [r3, #4]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007104:	605a      	str	r2, [r3, #4]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	6859      	ldr	r1, [r3, #4]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	691b      	ldr	r3, [r3, #16]
 8007110:	021a      	lsls	r2, r3, #8
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	430a      	orrs	r2, r1
 8007118:	605a      	str	r2, [r3, #4]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	685a      	ldr	r2, [r3, #4]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8007128:	605a      	str	r2, [r3, #4]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	6859      	ldr	r1, [r3, #4]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	689a      	ldr	r2, [r3, #8]
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	430a      	orrs	r2, r1
 800713a:	605a      	str	r2, [r3, #4]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	689a      	ldr	r2, [r3, #8]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800714a:	609a      	str	r2, [r3, #8]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	6899      	ldr	r1, [r3, #8]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	68da      	ldr	r2, [r3, #12]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	430a      	orrs	r2, r1
 800715c:	609a      	str	r2, [r3, #8]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007162:	4a58      	ldr	r2, [pc, #352]	@ (80072c4 <ADC_Init+0x1f4>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d022      	beq.n	80071ae <ADC_Init+0xde>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	689a      	ldr	r2, [r3, #8]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007176:	609a      	str	r2, [r3, #8]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	6899      	ldr	r1, [r3, #8]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	430a      	orrs	r2, r1
 8007188:	609a      	str	r2, [r3, #8]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	689a      	ldr	r2, [r3, #8]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8007198:	609a      	str	r2, [r3, #8]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	6899      	ldr	r1, [r3, #8]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	430a      	orrs	r2, r1
 80071aa:	609a      	str	r2, [r3, #8]
 80071ac:	e00f      	b.n	80071ce <ADC_Init+0xfe>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	689a      	ldr	r2, [r3, #8]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80071bc:	609a      	str	r2, [r3, #8]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	689a      	ldr	r2, [r3, #8]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80071cc:	609a      	str	r2, [r3, #8]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	689a      	ldr	r2, [r3, #8]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f022 0202 	bic.w	r2, r2, #2
 80071dc:	609a      	str	r2, [r3, #8]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	6899      	ldr	r1, [r3, #8]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	7e1b      	ldrb	r3, [r3, #24]
 80071e8:	005a      	lsls	r2, r3, #1
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	430a      	orrs	r2, r1
 80071f0:	609a      	str	r2, [r3, #8]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d01b      	beq.n	8007234 <ADC_Init+0x164>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	685a      	ldr	r2, [r3, #4]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800720a:	605a      	str	r2, [r3, #4]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	685a      	ldr	r2, [r3, #4]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800721a:	605a      	str	r2, [r3, #4]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	6859      	ldr	r1, [r3, #4]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007226:	3b01      	subs	r3, #1
 8007228:	035a      	lsls	r2, r3, #13
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	430a      	orrs	r2, r1
 8007230:	605a      	str	r2, [r3, #4]
 8007232:	e007      	b.n	8007244 <ADC_Init+0x174>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	685a      	ldr	r2, [r3, #4]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007242:	605a      	str	r2, [r3, #4]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8007252:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	69db      	ldr	r3, [r3, #28]
 800725e:	3b01      	subs	r3, #1
 8007260:	051a      	lsls	r2, r3, #20
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	430a      	orrs	r2, r1
 8007268:	62da      	str	r2, [r3, #44]	@ 0x2c
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	689a      	ldr	r2, [r3, #8]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8007278:	609a      	str	r2, [r3, #8]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	6899      	ldr	r1, [r3, #8]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007286:	025a      	lsls	r2, r3, #9
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	430a      	orrs	r2, r1
 800728e:	609a      	str	r2, [r3, #8]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	689a      	ldr	r2, [r3, #8]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800729e:	609a      	str	r2, [r3, #8]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	6899      	ldr	r1, [r3, #8]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	695b      	ldr	r3, [r3, #20]
 80072aa:	029a      	lsls	r2, r3, #10
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	430a      	orrs	r2, r1
 80072b2:	609a      	str	r2, [r3, #8]
 80072b4:	bf00      	nop
 80072b6:	3714      	adds	r7, #20
 80072b8:	46bd      	mov	sp, r7
 80072ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072be:	4770      	bx	lr
 80072c0:	40012300 	.word	0x40012300
 80072c4:	0f000001 	.word	0x0f000001

080072c8 <ADC_DMAConvCplt>:
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b084      	sub	sp, #16
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072d4:	60fb      	str	r3, [r7, #12]
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072da:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d13c      	bne.n	800735c <ADC_DMAConvCplt+0x94>
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072e6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	641a      	str	r2, [r3, #64]	@ 0x40
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	689b      	ldr	r3, [r3, #8]
 80072f4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d12b      	bne.n	8007354 <ADC_DMAConvCplt+0x8c>
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	7e1b      	ldrb	r3, [r3, #24]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d127      	bne.n	8007354 <ADC_DMAConvCplt+0x8c>
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800730a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
 800730e:	2b00      	cmp	r3, #0
 8007310:	d006      	beq.n	8007320 <ADC_DMAConvCplt+0x58>
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800731c:	2b00      	cmp	r3, #0
 800731e:	d119      	bne.n	8007354 <ADC_DMAConvCplt+0x8c>
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	685a      	ldr	r2, [r3, #4]
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f022 0220 	bic.w	r2, r2, #32
 800732e:	605a      	str	r2, [r3, #4]
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007334:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	641a      	str	r2, [r3, #64]	@ 0x40
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007340:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007344:	2b00      	cmp	r3, #0
 8007346:	d105      	bne.n	8007354 <ADC_DMAConvCplt+0x8c>
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800734c:	f043 0201 	orr.w	r2, r3, #1
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	641a      	str	r2, [r3, #64]	@ 0x40
 8007354:	68f8      	ldr	r0, [r7, #12]
 8007356:	f7fa f9f3 	bl	8001740 <HAL_ADC_ConvCpltCallback>
 800735a:	e00e      	b.n	800737a <ADC_DMAConvCplt+0xb2>
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007360:	f003 0310 	and.w	r3, r3, #16
 8007364:	2b00      	cmp	r3, #0
 8007366:	d003      	beq.n	8007370 <ADC_DMAConvCplt+0xa8>
 8007368:	68f8      	ldr	r0, [r7, #12]
 800736a:	f7fa f9f9 	bl	8001760 <HAL_ADC_ErrorCallback>
 800736e:	e004      	b.n	800737a <ADC_DMAConvCplt+0xb2>
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007374:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	4798      	blx	r3
 800737a:	bf00      	nop
 800737c:	3710      	adds	r7, #16
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}

08007382 <ADC_DMAHalfConvCplt>:
 8007382:	b580      	push	{r7, lr}
 8007384:	b084      	sub	sp, #16
 8007386:	af00      	add	r7, sp, #0
 8007388:	6078      	str	r0, [r7, #4]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800738e:	60fb      	str	r3, [r7, #12]
 8007390:	68f8      	ldr	r0, [r7, #12]
 8007392:	f7ff fd57 	bl	8006e44 <HAL_ADC_ConvHalfCpltCallback>
 8007396:	bf00      	nop
 8007398:	3710      	adds	r7, #16
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}

0800739e <ADC_DMAError>:
 800739e:	b580      	push	{r7, lr}
 80073a0:	b084      	sub	sp, #16
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	6078      	str	r0, [r7, #4]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073aa:	60fb      	str	r3, [r7, #12]
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	2240      	movs	r2, #64	@ 0x40
 80073b0:	641a      	str	r2, [r3, #64]	@ 0x40
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073b6:	f043 0204 	orr.w	r2, r3, #4
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	645a      	str	r2, [r3, #68]	@ 0x44
 80073be:	68f8      	ldr	r0, [r7, #12]
 80073c0:	f7fa f9ce 	bl	8001760 <HAL_ADC_ErrorCallback>
 80073c4:	bf00      	nop
 80073c6:	3710      	adds	r7, #16
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}

080073cc <HAL_ADCEx_InjectedConvCpltCallback>:
 80073cc:	b480      	push	{r7}
 80073ce:	b083      	sub	sp, #12
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	bf00      	nop
 80073d6:	370c      	adds	r7, #12
 80073d8:	46bd      	mov	sp, r7
 80073da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073de:	4770      	bx	lr

080073e0 <__NVIC_SetPriorityGrouping>:
 80073e0:	b480      	push	{r7}
 80073e2:	b085      	sub	sp, #20
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f003 0307 	and.w	r3, r3, #7
 80073ee:	60fb      	str	r3, [r7, #12]
 80073f0:	4b0c      	ldr	r3, [pc, #48]	@ (8007424 <__NVIC_SetPriorityGrouping+0x44>)
 80073f2:	68db      	ldr	r3, [r3, #12]
 80073f4:	60bb      	str	r3, [r7, #8]
 80073f6:	68ba      	ldr	r2, [r7, #8]
 80073f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80073fc:	4013      	ands	r3, r2
 80073fe:	60bb      	str	r3, [r7, #8]
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	021a      	lsls	r2, r3, #8
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	4313      	orrs	r3, r2
 8007408:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800740c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007410:	60bb      	str	r3, [r7, #8]
 8007412:	4a04      	ldr	r2, [pc, #16]	@ (8007424 <__NVIC_SetPriorityGrouping+0x44>)
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	60d3      	str	r3, [r2, #12]
 8007418:	bf00      	nop
 800741a:	3714      	adds	r7, #20
 800741c:	46bd      	mov	sp, r7
 800741e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007422:	4770      	bx	lr
 8007424:	e000ed00 	.word	0xe000ed00

08007428 <__NVIC_GetPriorityGrouping>:
 8007428:	b480      	push	{r7}
 800742a:	af00      	add	r7, sp, #0
 800742c:	4b04      	ldr	r3, [pc, #16]	@ (8007440 <__NVIC_GetPriorityGrouping+0x18>)
 800742e:	68db      	ldr	r3, [r3, #12]
 8007430:	0a1b      	lsrs	r3, r3, #8
 8007432:	f003 0307 	and.w	r3, r3, #7
 8007436:	4618      	mov	r0, r3
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr
 8007440:	e000ed00 	.word	0xe000ed00

08007444 <__NVIC_EnableIRQ>:
 8007444:	b480      	push	{r7}
 8007446:	b083      	sub	sp, #12
 8007448:	af00      	add	r7, sp, #0
 800744a:	4603      	mov	r3, r0
 800744c:	71fb      	strb	r3, [r7, #7]
 800744e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007452:	2b00      	cmp	r3, #0
 8007454:	db0b      	blt.n	800746e <__NVIC_EnableIRQ+0x2a>
 8007456:	79fb      	ldrb	r3, [r7, #7]
 8007458:	f003 021f 	and.w	r2, r3, #31
 800745c:	4907      	ldr	r1, [pc, #28]	@ (800747c <__NVIC_EnableIRQ+0x38>)
 800745e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007462:	095b      	lsrs	r3, r3, #5
 8007464:	2001      	movs	r0, #1
 8007466:	fa00 f202 	lsl.w	r2, r0, r2
 800746a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800746e:	bf00      	nop
 8007470:	370c      	adds	r7, #12
 8007472:	46bd      	mov	sp, r7
 8007474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007478:	4770      	bx	lr
 800747a:	bf00      	nop
 800747c:	e000e100 	.word	0xe000e100

08007480 <__NVIC_SetPriority>:
 8007480:	b480      	push	{r7}
 8007482:	b083      	sub	sp, #12
 8007484:	af00      	add	r7, sp, #0
 8007486:	4603      	mov	r3, r0
 8007488:	6039      	str	r1, [r7, #0]
 800748a:	71fb      	strb	r3, [r7, #7]
 800748c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007490:	2b00      	cmp	r3, #0
 8007492:	db0a      	blt.n	80074aa <__NVIC_SetPriority+0x2a>
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	b2da      	uxtb	r2, r3
 8007498:	490c      	ldr	r1, [pc, #48]	@ (80074cc <__NVIC_SetPriority+0x4c>)
 800749a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800749e:	0112      	lsls	r2, r2, #4
 80074a0:	b2d2      	uxtb	r2, r2
 80074a2:	440b      	add	r3, r1
 80074a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 80074a8:	e00a      	b.n	80074c0 <__NVIC_SetPriority+0x40>
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	b2da      	uxtb	r2, r3
 80074ae:	4908      	ldr	r1, [pc, #32]	@ (80074d0 <__NVIC_SetPriority+0x50>)
 80074b0:	79fb      	ldrb	r3, [r7, #7]
 80074b2:	f003 030f 	and.w	r3, r3, #15
 80074b6:	3b04      	subs	r3, #4
 80074b8:	0112      	lsls	r2, r2, #4
 80074ba:	b2d2      	uxtb	r2, r2
 80074bc:	440b      	add	r3, r1
 80074be:	761a      	strb	r2, [r3, #24]
 80074c0:	bf00      	nop
 80074c2:	370c      	adds	r7, #12
 80074c4:	46bd      	mov	sp, r7
 80074c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ca:	4770      	bx	lr
 80074cc:	e000e100 	.word	0xe000e100
 80074d0:	e000ed00 	.word	0xe000ed00

080074d4 <NVIC_EncodePriority>:
 80074d4:	b480      	push	{r7}
 80074d6:	b089      	sub	sp, #36	@ 0x24
 80074d8:	af00      	add	r7, sp, #0
 80074da:	60f8      	str	r0, [r7, #12]
 80074dc:	60b9      	str	r1, [r7, #8]
 80074de:	607a      	str	r2, [r7, #4]
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f003 0307 	and.w	r3, r3, #7
 80074e6:	61fb      	str	r3, [r7, #28]
 80074e8:	69fb      	ldr	r3, [r7, #28]
 80074ea:	f1c3 0307 	rsb	r3, r3, #7
 80074ee:	2b04      	cmp	r3, #4
 80074f0:	bf28      	it	cs
 80074f2:	2304      	movcs	r3, #4
 80074f4:	61bb      	str	r3, [r7, #24]
 80074f6:	69fb      	ldr	r3, [r7, #28]
 80074f8:	3304      	adds	r3, #4
 80074fa:	2b06      	cmp	r3, #6
 80074fc:	d902      	bls.n	8007504 <NVIC_EncodePriority+0x30>
 80074fe:	69fb      	ldr	r3, [r7, #28]
 8007500:	3b03      	subs	r3, #3
 8007502:	e000      	b.n	8007506 <NVIC_EncodePriority+0x32>
 8007504:	2300      	movs	r3, #0
 8007506:	617b      	str	r3, [r7, #20]
 8007508:	f04f 32ff 	mov.w	r2, #4294967295
 800750c:	69bb      	ldr	r3, [r7, #24]
 800750e:	fa02 f303 	lsl.w	r3, r2, r3
 8007512:	43da      	mvns	r2, r3
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	401a      	ands	r2, r3
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	409a      	lsls	r2, r3
 800751c:	f04f 31ff 	mov.w	r1, #4294967295
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	fa01 f303 	lsl.w	r3, r1, r3
 8007526:	43d9      	mvns	r1, r3
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	400b      	ands	r3, r1
 800752c:	4313      	orrs	r3, r2
 800752e:	4618      	mov	r0, r3
 8007530:	3724      	adds	r7, #36	@ 0x24
 8007532:	46bd      	mov	sp, r7
 8007534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007538:	4770      	bx	lr
	...

0800753c <SysTick_Config>:
 800753c:	b580      	push	{r7, lr}
 800753e:	b082      	sub	sp, #8
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	3b01      	subs	r3, #1
 8007548:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800754c:	d301      	bcc.n	8007552 <SysTick_Config+0x16>
 800754e:	2301      	movs	r3, #1
 8007550:	e00f      	b.n	8007572 <SysTick_Config+0x36>
 8007552:	4a0a      	ldr	r2, [pc, #40]	@ (800757c <SysTick_Config+0x40>)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	3b01      	subs	r3, #1
 8007558:	6053      	str	r3, [r2, #4]
 800755a:	210f      	movs	r1, #15
 800755c:	f04f 30ff 	mov.w	r0, #4294967295
 8007560:	f7ff ff8e 	bl	8007480 <__NVIC_SetPriority>
 8007564:	4b05      	ldr	r3, [pc, #20]	@ (800757c <SysTick_Config+0x40>)
 8007566:	2200      	movs	r2, #0
 8007568:	609a      	str	r2, [r3, #8]
 800756a:	4b04      	ldr	r3, [pc, #16]	@ (800757c <SysTick_Config+0x40>)
 800756c:	2207      	movs	r2, #7
 800756e:	601a      	str	r2, [r3, #0]
 8007570:	2300      	movs	r3, #0
 8007572:	4618      	mov	r0, r3
 8007574:	3708      	adds	r7, #8
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}
 800757a:	bf00      	nop
 800757c:	e000e010 	.word	0xe000e010

08007580 <HAL_NVIC_SetPriorityGrouping>:
 8007580:	b580      	push	{r7, lr}
 8007582:	b082      	sub	sp, #8
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f7ff ff29 	bl	80073e0 <__NVIC_SetPriorityGrouping>
 800758e:	bf00      	nop
 8007590:	3708      	adds	r7, #8
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}

08007596 <HAL_NVIC_SetPriority>:
 8007596:	b580      	push	{r7, lr}
 8007598:	b086      	sub	sp, #24
 800759a:	af00      	add	r7, sp, #0
 800759c:	4603      	mov	r3, r0
 800759e:	60b9      	str	r1, [r7, #8]
 80075a0:	607a      	str	r2, [r7, #4]
 80075a2:	73fb      	strb	r3, [r7, #15]
 80075a4:	2300      	movs	r3, #0
 80075a6:	617b      	str	r3, [r7, #20]
 80075a8:	f7ff ff3e 	bl	8007428 <__NVIC_GetPriorityGrouping>
 80075ac:	6178      	str	r0, [r7, #20]
 80075ae:	687a      	ldr	r2, [r7, #4]
 80075b0:	68b9      	ldr	r1, [r7, #8]
 80075b2:	6978      	ldr	r0, [r7, #20]
 80075b4:	f7ff ff8e 	bl	80074d4 <NVIC_EncodePriority>
 80075b8:	4602      	mov	r2, r0
 80075ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80075be:	4611      	mov	r1, r2
 80075c0:	4618      	mov	r0, r3
 80075c2:	f7ff ff5d 	bl	8007480 <__NVIC_SetPriority>
 80075c6:	bf00      	nop
 80075c8:	3718      	adds	r7, #24
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}

080075ce <HAL_NVIC_EnableIRQ>:
 80075ce:	b580      	push	{r7, lr}
 80075d0:	b082      	sub	sp, #8
 80075d2:	af00      	add	r7, sp, #0
 80075d4:	4603      	mov	r3, r0
 80075d6:	71fb      	strb	r3, [r7, #7]
 80075d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075dc:	4618      	mov	r0, r3
 80075de:	f7ff ff31 	bl	8007444 <__NVIC_EnableIRQ>
 80075e2:	bf00      	nop
 80075e4:	3708      	adds	r7, #8
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}

080075ea <HAL_SYSTICK_Config>:
 80075ea:	b580      	push	{r7, lr}
 80075ec:	b082      	sub	sp, #8
 80075ee:	af00      	add	r7, sp, #0
 80075f0:	6078      	str	r0, [r7, #4]
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f7ff ffa2 	bl	800753c <SysTick_Config>
 80075f8:	4603      	mov	r3, r0
 80075fa:	4618      	mov	r0, r3
 80075fc:	3708      	adds	r7, #8
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}
	...

08007604 <HAL_DMA_Init>:
 8007604:	b580      	push	{r7, lr}
 8007606:	b086      	sub	sp, #24
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
 800760c:	2300      	movs	r3, #0
 800760e:	617b      	str	r3, [r7, #20]
 8007610:	f7ff f946 	bl	80068a0 <HAL_GetTick>
 8007614:	6138      	str	r0, [r7, #16]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d101      	bne.n	8007620 <HAL_DMA_Init+0x1c>
 800761c:	2301      	movs	r3, #1
 800761e:	e099      	b.n	8007754 <HAL_DMA_Init+0x150>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2202      	movs	r2, #2
 8007624:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2200      	movs	r2, #0
 800762c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	681a      	ldr	r2, [r3, #0]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f022 0201 	bic.w	r2, r2, #1
 800763e:	601a      	str	r2, [r3, #0]
 8007640:	e00f      	b.n	8007662 <HAL_DMA_Init+0x5e>
 8007642:	f7ff f92d 	bl	80068a0 <HAL_GetTick>
 8007646:	4602      	mov	r2, r0
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	1ad3      	subs	r3, r2, r3
 800764c:	2b05      	cmp	r3, #5
 800764e:	d908      	bls.n	8007662 <HAL_DMA_Init+0x5e>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2220      	movs	r2, #32
 8007654:	655a      	str	r2, [r3, #84]	@ 0x54
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2203      	movs	r2, #3
 800765a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800765e:	2303      	movs	r3, #3
 8007660:	e078      	b.n	8007754 <HAL_DMA_Init+0x150>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f003 0301 	and.w	r3, r3, #1
 800766c:	2b00      	cmp	r3, #0
 800766e:	d1e8      	bne.n	8007642 <HAL_DMA_Init+0x3e>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	617b      	str	r3, [r7, #20]
 8007678:	697a      	ldr	r2, [r7, #20]
 800767a:	4b38      	ldr	r3, [pc, #224]	@ (800775c <HAL_DMA_Init+0x158>)
 800767c:	4013      	ands	r3, r2
 800767e:	617b      	str	r3, [r7, #20]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	685a      	ldr	r2, [r3, #4]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	689b      	ldr	r3, [r3, #8]
 8007688:	431a      	orrs	r2, r3
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	68db      	ldr	r3, [r3, #12]
 800768e:	431a      	orrs	r2, r3
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	691b      	ldr	r3, [r3, #16]
 8007694:	431a      	orrs	r2, r3
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	695b      	ldr	r3, [r3, #20]
 800769a:	431a      	orrs	r2, r3
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	699b      	ldr	r3, [r3, #24]
 80076a0:	431a      	orrs	r2, r3
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	69db      	ldr	r3, [r3, #28]
 80076a6:	431a      	orrs	r2, r3
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6a1b      	ldr	r3, [r3, #32]
 80076ac:	4313      	orrs	r3, r2
 80076ae:	697a      	ldr	r2, [r7, #20]
 80076b0:	4313      	orrs	r3, r2
 80076b2:	617b      	str	r3, [r7, #20]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076b8:	2b04      	cmp	r3, #4
 80076ba:	d107      	bne.n	80076cc <HAL_DMA_Init+0xc8>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076c4:	4313      	orrs	r3, r2
 80076c6:	697a      	ldr	r2, [r7, #20]
 80076c8:	4313      	orrs	r3, r2
 80076ca:	617b      	str	r3, [r7, #20]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	697a      	ldr	r2, [r7, #20]
 80076d2:	601a      	str	r2, [r3, #0]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	695b      	ldr	r3, [r3, #20]
 80076da:	617b      	str	r3, [r7, #20]
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	f023 0307 	bic.w	r3, r3, #7
 80076e2:	617b      	str	r3, [r7, #20]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076e8:	697a      	ldr	r2, [r7, #20]
 80076ea:	4313      	orrs	r3, r2
 80076ec:	617b      	str	r3, [r7, #20]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076f2:	2b04      	cmp	r3, #4
 80076f4:	d117      	bne.n	8007726 <HAL_DMA_Init+0x122>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076fa:	697a      	ldr	r2, [r7, #20]
 80076fc:	4313      	orrs	r3, r2
 80076fe:	617b      	str	r3, [r7, #20]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007704:	2b00      	cmp	r3, #0
 8007706:	d00e      	beq.n	8007726 <HAL_DMA_Init+0x122>
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f000 fadf 	bl	8007ccc <DMA_CheckFifoParam>
 800770e:	4603      	mov	r3, r0
 8007710:	2b00      	cmp	r3, #0
 8007712:	d008      	beq.n	8007726 <HAL_DMA_Init+0x122>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2240      	movs	r2, #64	@ 0x40
 8007718:	655a      	str	r2, [r3, #84]	@ 0x54
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2201      	movs	r2, #1
 800771e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8007722:	2301      	movs	r3, #1
 8007724:	e016      	b.n	8007754 <HAL_DMA_Init+0x150>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	697a      	ldr	r2, [r7, #20]
 800772c:	615a      	str	r2, [r3, #20]
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f000 fa96 	bl	8007c60 <DMA_CalcBaseAndBitshift>
 8007734:	4603      	mov	r3, r0
 8007736:	60fb      	str	r3, [r7, #12]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800773c:	223f      	movs	r2, #63	@ 0x3f
 800773e:	409a      	lsls	r2, r3
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	609a      	str	r2, [r3, #8]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2200      	movs	r2, #0
 8007748:	655a      	str	r2, [r3, #84]	@ 0x54
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2201      	movs	r2, #1
 800774e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8007752:	2300      	movs	r3, #0
 8007754:	4618      	mov	r0, r3
 8007756:	3718      	adds	r7, #24
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}
 800775c:	f010803f 	.word	0xf010803f

08007760 <HAL_DMA_Start_IT>:
 8007760:	b580      	push	{r7, lr}
 8007762:	b086      	sub	sp, #24
 8007764:	af00      	add	r7, sp, #0
 8007766:	60f8      	str	r0, [r7, #12]
 8007768:	60b9      	str	r1, [r7, #8]
 800776a:	607a      	str	r2, [r7, #4]
 800776c:	603b      	str	r3, [r7, #0]
 800776e:	2300      	movs	r3, #0
 8007770:	75fb      	strb	r3, [r7, #23]
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007776:	613b      	str	r3, [r7, #16]
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800777e:	2b01      	cmp	r3, #1
 8007780:	d101      	bne.n	8007786 <HAL_DMA_Start_IT+0x26>
 8007782:	2302      	movs	r3, #2
 8007784:	e040      	b.n	8007808 <HAL_DMA_Start_IT+0xa8>
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2201      	movs	r2, #1
 800778a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007794:	b2db      	uxtb	r3, r3
 8007796:	2b01      	cmp	r3, #1
 8007798:	d12f      	bne.n	80077fa <HAL_DMA_Start_IT+0x9a>
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2202      	movs	r2, #2
 800779e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2200      	movs	r2, #0
 80077a6:	655a      	str	r2, [r3, #84]	@ 0x54
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	687a      	ldr	r2, [r7, #4]
 80077ac:	68b9      	ldr	r1, [r7, #8]
 80077ae:	68f8      	ldr	r0, [r7, #12]
 80077b0:	f000 fa28 	bl	8007c04 <DMA_SetConfig>
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077b8:	223f      	movs	r2, #63	@ 0x3f
 80077ba:	409a      	lsls	r2, r3
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	609a      	str	r2, [r3, #8]
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	681a      	ldr	r2, [r3, #0]
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f042 0216 	orr.w	r2, r2, #22
 80077ce:	601a      	str	r2, [r3, #0]
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d007      	beq.n	80077e8 <HAL_DMA_Start_IT+0x88>
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	681a      	ldr	r2, [r3, #0]
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f042 0208 	orr.w	r2, r2, #8
 80077e6:	601a      	str	r2, [r3, #0]
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	681a      	ldr	r2, [r3, #0]
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f042 0201 	orr.w	r2, r2, #1
 80077f6:	601a      	str	r2, [r3, #0]
 80077f8:	e005      	b.n	8007806 <HAL_DMA_Start_IT+0xa6>
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2200      	movs	r2, #0
 80077fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8007802:	2302      	movs	r3, #2
 8007804:	75fb      	strb	r3, [r7, #23]
 8007806:	7dfb      	ldrb	r3, [r7, #23]
 8007808:	4618      	mov	r0, r3
 800780a:	3718      	adds	r7, #24
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}

08007810 <HAL_DMA_Abort>:
 8007810:	b580      	push	{r7, lr}
 8007812:	b084      	sub	sp, #16
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800781c:	60fb      	str	r3, [r7, #12]
 800781e:	f7ff f83f 	bl	80068a0 <HAL_GetTick>
 8007822:	60b8      	str	r0, [r7, #8]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800782a:	b2db      	uxtb	r3, r3
 800782c:	2b02      	cmp	r3, #2
 800782e:	d008      	beq.n	8007842 <HAL_DMA_Abort+0x32>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2280      	movs	r2, #128	@ 0x80
 8007834:	655a      	str	r2, [r3, #84]	@ 0x54
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2200      	movs	r2, #0
 800783a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 800783e:	2301      	movs	r3, #1
 8007840:	e052      	b.n	80078e8 <HAL_DMA_Abort+0xd8>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	681a      	ldr	r2, [r3, #0]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f022 0216 	bic.w	r2, r2, #22
 8007850:	601a      	str	r2, [r3, #0]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	695a      	ldr	r2, [r3, #20]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007860:	615a      	str	r2, [r3, #20]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007866:	2b00      	cmp	r3, #0
 8007868:	d103      	bne.n	8007872 <HAL_DMA_Abort+0x62>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800786e:	2b00      	cmp	r3, #0
 8007870:	d007      	beq.n	8007882 <HAL_DMA_Abort+0x72>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	681a      	ldr	r2, [r3, #0]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f022 0208 	bic.w	r2, r2, #8
 8007880:	601a      	str	r2, [r3, #0]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	681a      	ldr	r2, [r3, #0]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f022 0201 	bic.w	r2, r2, #1
 8007890:	601a      	str	r2, [r3, #0]
 8007892:	e013      	b.n	80078bc <HAL_DMA_Abort+0xac>
 8007894:	f7ff f804 	bl	80068a0 <HAL_GetTick>
 8007898:	4602      	mov	r2, r0
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	1ad3      	subs	r3, r2, r3
 800789e:	2b05      	cmp	r3, #5
 80078a0:	d90c      	bls.n	80078bc <HAL_DMA_Abort+0xac>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2220      	movs	r2, #32
 80078a6:	655a      	str	r2, [r3, #84]	@ 0x54
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2203      	movs	r2, #3
 80078ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2200      	movs	r2, #0
 80078b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 80078b8:	2303      	movs	r3, #3
 80078ba:	e015      	b.n	80078e8 <HAL_DMA_Abort+0xd8>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f003 0301 	and.w	r3, r3, #1
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d1e4      	bne.n	8007894 <HAL_DMA_Abort+0x84>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80078ce:	223f      	movs	r2, #63	@ 0x3f
 80078d0:	409a      	lsls	r2, r3
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	609a      	str	r2, [r3, #8]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2201      	movs	r2, #1
 80078da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2200      	movs	r2, #0
 80078e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 80078e6:	2300      	movs	r3, #0
 80078e8:	4618      	mov	r0, r3
 80078ea:	3710      	adds	r7, #16
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}

080078f0 <HAL_DMA_IRQHandler>:
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b086      	sub	sp, #24
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
 80078f8:	2300      	movs	r3, #0
 80078fa:	60bb      	str	r3, [r7, #8]
 80078fc:	4b8e      	ldr	r3, [pc, #568]	@ (8007b38 <HAL_DMA_IRQHandler+0x248>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a8e      	ldr	r2, [pc, #568]	@ (8007b3c <HAL_DMA_IRQHandler+0x24c>)
 8007902:	fba2 2303 	umull	r2, r3, r2, r3
 8007906:	0a9b      	lsrs	r3, r3, #10
 8007908:	617b      	str	r3, [r7, #20]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800790e:	613b      	str	r3, [r7, #16]
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	60fb      	str	r3, [r7, #12]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800791a:	2208      	movs	r2, #8
 800791c:	409a      	lsls	r2, r3
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	4013      	ands	r3, r2
 8007922:	2b00      	cmp	r3, #0
 8007924:	d01a      	beq.n	800795c <HAL_DMA_IRQHandler+0x6c>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f003 0304 	and.w	r3, r3, #4
 8007930:	2b00      	cmp	r3, #0
 8007932:	d013      	beq.n	800795c <HAL_DMA_IRQHandler+0x6c>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	681a      	ldr	r2, [r3, #0]
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f022 0204 	bic.w	r2, r2, #4
 8007942:	601a      	str	r2, [r3, #0]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007948:	2208      	movs	r2, #8
 800794a:	409a      	lsls	r2, r3
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	609a      	str	r2, [r3, #8]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007954:	f043 0201 	orr.w	r2, r3, #1
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	655a      	str	r2, [r3, #84]	@ 0x54
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007960:	2201      	movs	r2, #1
 8007962:	409a      	lsls	r2, r3
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	4013      	ands	r3, r2
 8007968:	2b00      	cmp	r3, #0
 800796a:	d012      	beq.n	8007992 <HAL_DMA_IRQHandler+0xa2>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	695b      	ldr	r3, [r3, #20]
 8007972:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007976:	2b00      	cmp	r3, #0
 8007978:	d00b      	beq.n	8007992 <HAL_DMA_IRQHandler+0xa2>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800797e:	2201      	movs	r2, #1
 8007980:	409a      	lsls	r2, r3
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	609a      	str	r2, [r3, #8]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800798a:	f043 0202 	orr.w	r2, r3, #2
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	655a      	str	r2, [r3, #84]	@ 0x54
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007996:	2204      	movs	r2, #4
 8007998:	409a      	lsls	r2, r3
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	4013      	ands	r3, r2
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d012      	beq.n	80079c8 <HAL_DMA_IRQHandler+0xd8>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f003 0302 	and.w	r3, r3, #2
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d00b      	beq.n	80079c8 <HAL_DMA_IRQHandler+0xd8>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80079b4:	2204      	movs	r2, #4
 80079b6:	409a      	lsls	r2, r3
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	609a      	str	r2, [r3, #8]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079c0:	f043 0204 	orr.w	r2, r3, #4
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	655a      	str	r2, [r3, #84]	@ 0x54
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80079cc:	2210      	movs	r2, #16
 80079ce:	409a      	lsls	r2, r3
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	4013      	ands	r3, r2
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d043      	beq.n	8007a60 <HAL_DMA_IRQHandler+0x170>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f003 0308 	and.w	r3, r3, #8
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d03c      	beq.n	8007a60 <HAL_DMA_IRQHandler+0x170>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80079ea:	2210      	movs	r2, #16
 80079ec:	409a      	lsls	r2, r3
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	609a      	str	r2, [r3, #8]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d018      	beq.n	8007a32 <HAL_DMA_IRQHandler+0x142>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d108      	bne.n	8007a20 <HAL_DMA_IRQHandler+0x130>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d024      	beq.n	8007a60 <HAL_DMA_IRQHandler+0x170>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	4798      	blx	r3
 8007a1e:	e01f      	b.n	8007a60 <HAL_DMA_IRQHandler+0x170>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d01b      	beq.n	8007a60 <HAL_DMA_IRQHandler+0x170>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	4798      	blx	r3
 8007a30:	e016      	b.n	8007a60 <HAL_DMA_IRQHandler+0x170>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d107      	bne.n	8007a50 <HAL_DMA_IRQHandler+0x160>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	681a      	ldr	r2, [r3, #0]
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f022 0208 	bic.w	r2, r2, #8
 8007a4e:	601a      	str	r2, [r3, #0]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d003      	beq.n	8007a60 <HAL_DMA_IRQHandler+0x170>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	4798      	blx	r3
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a64:	2220      	movs	r2, #32
 8007a66:	409a      	lsls	r2, r3
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	4013      	ands	r3, r2
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	f000 808f 	beq.w	8007b90 <HAL_DMA_IRQHandler+0x2a0>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f003 0310 	and.w	r3, r3, #16
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	f000 8087 	beq.w	8007b90 <HAL_DMA_IRQHandler+0x2a0>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a86:	2220      	movs	r2, #32
 8007a88:	409a      	lsls	r2, r3
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	609a      	str	r2, [r3, #8]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007a94:	b2db      	uxtb	r3, r3
 8007a96:	2b05      	cmp	r3, #5
 8007a98:	d136      	bne.n	8007b08 <HAL_DMA_IRQHandler+0x218>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	681a      	ldr	r2, [r3, #0]
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f022 0216 	bic.w	r2, r2, #22
 8007aa8:	601a      	str	r2, [r3, #0]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	695a      	ldr	r2, [r3, #20]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007ab8:	615a      	str	r2, [r3, #20]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d103      	bne.n	8007aca <HAL_DMA_IRQHandler+0x1da>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d007      	beq.n	8007ada <HAL_DMA_IRQHandler+0x1ea>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	681a      	ldr	r2, [r3, #0]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f022 0208 	bic.w	r2, r2, #8
 8007ad8:	601a      	str	r2, [r3, #0]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ade:	223f      	movs	r2, #63	@ 0x3f
 8007ae0:	409a      	lsls	r2, r3
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	609a      	str	r2, [r3, #8]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2201      	movs	r2, #1
 8007aea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2200      	movs	r2, #0
 8007af2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d07e      	beq.n	8007bfc <HAL_DMA_IRQHandler+0x30c>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	4798      	blx	r3
 8007b06:	e079      	b.n	8007bfc <HAL_DMA_IRQHandler+0x30c>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d01d      	beq.n	8007b52 <HAL_DMA_IRQHandler+0x262>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d10d      	bne.n	8007b40 <HAL_DMA_IRQHandler+0x250>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d031      	beq.n	8007b90 <HAL_DMA_IRQHandler+0x2a0>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	4798      	blx	r3
 8007b34:	e02c      	b.n	8007b90 <HAL_DMA_IRQHandler+0x2a0>
 8007b36:	bf00      	nop
 8007b38:	20000004 	.word	0x20000004
 8007b3c:	1b4e81b5 	.word	0x1b4e81b5
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d023      	beq.n	8007b90 <HAL_DMA_IRQHandler+0x2a0>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	4798      	blx	r3
 8007b50:	e01e      	b.n	8007b90 <HAL_DMA_IRQHandler+0x2a0>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d10f      	bne.n	8007b80 <HAL_DMA_IRQHandler+0x290>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	681a      	ldr	r2, [r3, #0]
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f022 0210 	bic.w	r2, r2, #16
 8007b6e:	601a      	str	r2, [r3, #0]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2201      	movs	r2, #1
 8007b74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d003      	beq.n	8007b90 <HAL_DMA_IRQHandler+0x2a0>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	4798      	blx	r3
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d032      	beq.n	8007bfe <HAL_DMA_IRQHandler+0x30e>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b9c:	f003 0301 	and.w	r3, r3, #1
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d022      	beq.n	8007bea <HAL_DMA_IRQHandler+0x2fa>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2205      	movs	r2, #5
 8007ba8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	681a      	ldr	r2, [r3, #0]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f022 0201 	bic.w	r2, r2, #1
 8007bba:	601a      	str	r2, [r3, #0]
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	3301      	adds	r3, #1
 8007bc0:	60bb      	str	r3, [r7, #8]
 8007bc2:	697a      	ldr	r2, [r7, #20]
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	d307      	bcc.n	8007bd8 <HAL_DMA_IRQHandler+0x2e8>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f003 0301 	and.w	r3, r3, #1
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d1f2      	bne.n	8007bbc <HAL_DMA_IRQHandler+0x2cc>
 8007bd6:	e000      	b.n	8007bda <HAL_DMA_IRQHandler+0x2ea>
 8007bd8:	bf00      	nop
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2201      	movs	r2, #1
 8007bde:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2200      	movs	r2, #0
 8007be6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d005      	beq.n	8007bfe <HAL_DMA_IRQHandler+0x30e>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	4798      	blx	r3
 8007bfa:	e000      	b.n	8007bfe <HAL_DMA_IRQHandler+0x30e>
 8007bfc:	bf00      	nop
 8007bfe:	3718      	adds	r7, #24
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}

08007c04 <DMA_SetConfig>:
 8007c04:	b480      	push	{r7}
 8007c06:	b085      	sub	sp, #20
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	60f8      	str	r0, [r7, #12]
 8007c0c:	60b9      	str	r1, [r7, #8]
 8007c0e:	607a      	str	r2, [r7, #4]
 8007c10:	603b      	str	r3, [r7, #0]
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	681a      	ldr	r2, [r3, #0]
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007c20:	601a      	str	r2, [r3, #0]
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	683a      	ldr	r2, [r7, #0]
 8007c28:	605a      	str	r2, [r3, #4]
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	689b      	ldr	r3, [r3, #8]
 8007c2e:	2b40      	cmp	r3, #64	@ 0x40
 8007c30:	d108      	bne.n	8007c44 <DMA_SetConfig+0x40>
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	687a      	ldr	r2, [r7, #4]
 8007c38:	609a      	str	r2, [r3, #8]
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	68ba      	ldr	r2, [r7, #8]
 8007c40:	60da      	str	r2, [r3, #12]
 8007c42:	e007      	b.n	8007c54 <DMA_SetConfig+0x50>
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	68ba      	ldr	r2, [r7, #8]
 8007c4a:	609a      	str	r2, [r3, #8]
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	687a      	ldr	r2, [r7, #4]
 8007c52:	60da      	str	r2, [r3, #12]
 8007c54:	bf00      	nop
 8007c56:	3714      	adds	r7, #20
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5e:	4770      	bx	lr

08007c60 <DMA_CalcBaseAndBitshift>:
 8007c60:	b480      	push	{r7}
 8007c62:	b085      	sub	sp, #20
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	b2db      	uxtb	r3, r3
 8007c6e:	3b10      	subs	r3, #16
 8007c70:	4a14      	ldr	r2, [pc, #80]	@ (8007cc4 <DMA_CalcBaseAndBitshift+0x64>)
 8007c72:	fba2 2303 	umull	r2, r3, r2, r3
 8007c76:	091b      	lsrs	r3, r3, #4
 8007c78:	60fb      	str	r3, [r7, #12]
 8007c7a:	4a13      	ldr	r2, [pc, #76]	@ (8007cc8 <DMA_CalcBaseAndBitshift+0x68>)
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	4413      	add	r3, r2
 8007c80:	781b      	ldrb	r3, [r3, #0]
 8007c82:	461a      	mov	r2, r3
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2b03      	cmp	r3, #3
 8007c8c:	d909      	bls.n	8007ca2 <DMA_CalcBaseAndBitshift+0x42>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8007c96:	f023 0303 	bic.w	r3, r3, #3
 8007c9a:	1d1a      	adds	r2, r3, #4
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	659a      	str	r2, [r3, #88]	@ 0x58
 8007ca0:	e007      	b.n	8007cb2 <DMA_CalcBaseAndBitshift+0x52>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8007caa:	f023 0303 	bic.w	r3, r3, #3
 8007cae:	687a      	ldr	r2, [r7, #4]
 8007cb0:	6593      	str	r3, [r2, #88]	@ 0x58
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3714      	adds	r7, #20
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc0:	4770      	bx	lr
 8007cc2:	bf00      	nop
 8007cc4:	aaaaaaab 	.word	0xaaaaaaab
 8007cc8:	080109ac 	.word	0x080109ac

08007ccc <DMA_CheckFifoParam>:
 8007ccc:	b480      	push	{r7}
 8007cce:	b085      	sub	sp, #20
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	73fb      	strb	r3, [r7, #15]
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cdc:	60bb      	str	r3, [r7, #8]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	699b      	ldr	r3, [r3, #24]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d11f      	bne.n	8007d26 <DMA_CheckFifoParam+0x5a>
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	2b03      	cmp	r3, #3
 8007cea:	d856      	bhi.n	8007d9a <DMA_CheckFifoParam+0xce>
 8007cec:	a201      	add	r2, pc, #4	@ (adr r2, 8007cf4 <DMA_CheckFifoParam+0x28>)
 8007cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cf2:	bf00      	nop
 8007cf4:	08007d05 	.word	0x08007d05
 8007cf8:	08007d17 	.word	0x08007d17
 8007cfc:	08007d05 	.word	0x08007d05
 8007d00:	08007d9b 	.word	0x08007d9b
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d08:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d046      	beq.n	8007d9e <DMA_CheckFifoParam+0xd2>
 8007d10:	2301      	movs	r3, #1
 8007d12:	73fb      	strb	r3, [r7, #15]
 8007d14:	e043      	b.n	8007d9e <DMA_CheckFifoParam+0xd2>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d1a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007d1e:	d140      	bne.n	8007da2 <DMA_CheckFifoParam+0xd6>
 8007d20:	2301      	movs	r3, #1
 8007d22:	73fb      	strb	r3, [r7, #15]
 8007d24:	e03d      	b.n	8007da2 <DMA_CheckFifoParam+0xd6>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	699b      	ldr	r3, [r3, #24]
 8007d2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d2e:	d121      	bne.n	8007d74 <DMA_CheckFifoParam+0xa8>
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	2b03      	cmp	r3, #3
 8007d34:	d837      	bhi.n	8007da6 <DMA_CheckFifoParam+0xda>
 8007d36:	a201      	add	r2, pc, #4	@ (adr r2, 8007d3c <DMA_CheckFifoParam+0x70>)
 8007d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d3c:	08007d4d 	.word	0x08007d4d
 8007d40:	08007d53 	.word	0x08007d53
 8007d44:	08007d4d 	.word	0x08007d4d
 8007d48:	08007d65 	.word	0x08007d65
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	73fb      	strb	r3, [r7, #15]
 8007d50:	e030      	b.n	8007db4 <DMA_CheckFifoParam+0xe8>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d56:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d025      	beq.n	8007daa <DMA_CheckFifoParam+0xde>
 8007d5e:	2301      	movs	r3, #1
 8007d60:	73fb      	strb	r3, [r7, #15]
 8007d62:	e022      	b.n	8007daa <DMA_CheckFifoParam+0xde>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d68:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007d6c:	d11f      	bne.n	8007dae <DMA_CheckFifoParam+0xe2>
 8007d6e:	2301      	movs	r3, #1
 8007d70:	73fb      	strb	r3, [r7, #15]
 8007d72:	e01c      	b.n	8007dae <DMA_CheckFifoParam+0xe2>
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	2b02      	cmp	r3, #2
 8007d78:	d903      	bls.n	8007d82 <DMA_CheckFifoParam+0xb6>
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	2b03      	cmp	r3, #3
 8007d7e:	d003      	beq.n	8007d88 <DMA_CheckFifoParam+0xbc>
 8007d80:	e018      	b.n	8007db4 <DMA_CheckFifoParam+0xe8>
 8007d82:	2301      	movs	r3, #1
 8007d84:	73fb      	strb	r3, [r7, #15]
 8007d86:	e015      	b.n	8007db4 <DMA_CheckFifoParam+0xe8>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d8c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d00e      	beq.n	8007db2 <DMA_CheckFifoParam+0xe6>
 8007d94:	2301      	movs	r3, #1
 8007d96:	73fb      	strb	r3, [r7, #15]
 8007d98:	e00b      	b.n	8007db2 <DMA_CheckFifoParam+0xe6>
 8007d9a:	bf00      	nop
 8007d9c:	e00a      	b.n	8007db4 <DMA_CheckFifoParam+0xe8>
 8007d9e:	bf00      	nop
 8007da0:	e008      	b.n	8007db4 <DMA_CheckFifoParam+0xe8>
 8007da2:	bf00      	nop
 8007da4:	e006      	b.n	8007db4 <DMA_CheckFifoParam+0xe8>
 8007da6:	bf00      	nop
 8007da8:	e004      	b.n	8007db4 <DMA_CheckFifoParam+0xe8>
 8007daa:	bf00      	nop
 8007dac:	e002      	b.n	8007db4 <DMA_CheckFifoParam+0xe8>
 8007dae:	bf00      	nop
 8007db0:	e000      	b.n	8007db4 <DMA_CheckFifoParam+0xe8>
 8007db2:	bf00      	nop
 8007db4:	7bfb      	ldrb	r3, [r7, #15]
 8007db6:	4618      	mov	r0, r3
 8007db8:	3714      	adds	r7, #20
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc0:	4770      	bx	lr
 8007dc2:	bf00      	nop

08007dc4 <HAL_GPIO_Init>:
 8007dc4:	b480      	push	{r7}
 8007dc6:	b089      	sub	sp, #36	@ 0x24
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
 8007dcc:	6039      	str	r1, [r7, #0]
 8007dce:	2300      	movs	r3, #0
 8007dd0:	617b      	str	r3, [r7, #20]
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	613b      	str	r3, [r7, #16]
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	61bb      	str	r3, [r7, #24]
 8007dda:	2300      	movs	r3, #0
 8007ddc:	61fb      	str	r3, [r7, #28]
 8007dde:	e159      	b.n	8008094 <HAL_GPIO_Init+0x2d0>
 8007de0:	2201      	movs	r2, #1
 8007de2:	69fb      	ldr	r3, [r7, #28]
 8007de4:	fa02 f303 	lsl.w	r3, r2, r3
 8007de8:	617b      	str	r3, [r7, #20]
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	697a      	ldr	r2, [r7, #20]
 8007df0:	4013      	ands	r3, r2
 8007df2:	613b      	str	r3, [r7, #16]
 8007df4:	693a      	ldr	r2, [r7, #16]
 8007df6:	697b      	ldr	r3, [r7, #20]
 8007df8:	429a      	cmp	r2, r3
 8007dfa:	f040 8148 	bne.w	800808e <HAL_GPIO_Init+0x2ca>
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	685b      	ldr	r3, [r3, #4]
 8007e02:	f003 0303 	and.w	r3, r3, #3
 8007e06:	2b01      	cmp	r3, #1
 8007e08:	d005      	beq.n	8007e16 <HAL_GPIO_Init+0x52>
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	685b      	ldr	r3, [r3, #4]
 8007e0e:	f003 0303 	and.w	r3, r3, #3
 8007e12:	2b02      	cmp	r3, #2
 8007e14:	d130      	bne.n	8007e78 <HAL_GPIO_Init+0xb4>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	689b      	ldr	r3, [r3, #8]
 8007e1a:	61bb      	str	r3, [r7, #24]
 8007e1c:	69fb      	ldr	r3, [r7, #28]
 8007e1e:	005b      	lsls	r3, r3, #1
 8007e20:	2203      	movs	r2, #3
 8007e22:	fa02 f303 	lsl.w	r3, r2, r3
 8007e26:	43db      	mvns	r3, r3
 8007e28:	69ba      	ldr	r2, [r7, #24]
 8007e2a:	4013      	ands	r3, r2
 8007e2c:	61bb      	str	r3, [r7, #24]
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	68da      	ldr	r2, [r3, #12]
 8007e32:	69fb      	ldr	r3, [r7, #28]
 8007e34:	005b      	lsls	r3, r3, #1
 8007e36:	fa02 f303 	lsl.w	r3, r2, r3
 8007e3a:	69ba      	ldr	r2, [r7, #24]
 8007e3c:	4313      	orrs	r3, r2
 8007e3e:	61bb      	str	r3, [r7, #24]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	69ba      	ldr	r2, [r7, #24]
 8007e44:	609a      	str	r2, [r3, #8]
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	685b      	ldr	r3, [r3, #4]
 8007e4a:	61bb      	str	r3, [r7, #24]
 8007e4c:	2201      	movs	r2, #1
 8007e4e:	69fb      	ldr	r3, [r7, #28]
 8007e50:	fa02 f303 	lsl.w	r3, r2, r3
 8007e54:	43db      	mvns	r3, r3
 8007e56:	69ba      	ldr	r2, [r7, #24]
 8007e58:	4013      	ands	r3, r2
 8007e5a:	61bb      	str	r3, [r7, #24]
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	685b      	ldr	r3, [r3, #4]
 8007e60:	091b      	lsrs	r3, r3, #4
 8007e62:	f003 0201 	and.w	r2, r3, #1
 8007e66:	69fb      	ldr	r3, [r7, #28]
 8007e68:	fa02 f303 	lsl.w	r3, r2, r3
 8007e6c:	69ba      	ldr	r2, [r7, #24]
 8007e6e:	4313      	orrs	r3, r2
 8007e70:	61bb      	str	r3, [r7, #24]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	69ba      	ldr	r2, [r7, #24]
 8007e76:	605a      	str	r2, [r3, #4]
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	685b      	ldr	r3, [r3, #4]
 8007e7c:	f003 0303 	and.w	r3, r3, #3
 8007e80:	2b03      	cmp	r3, #3
 8007e82:	d017      	beq.n	8007eb4 <HAL_GPIO_Init+0xf0>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	68db      	ldr	r3, [r3, #12]
 8007e88:	61bb      	str	r3, [r7, #24]
 8007e8a:	69fb      	ldr	r3, [r7, #28]
 8007e8c:	005b      	lsls	r3, r3, #1
 8007e8e:	2203      	movs	r2, #3
 8007e90:	fa02 f303 	lsl.w	r3, r2, r3
 8007e94:	43db      	mvns	r3, r3
 8007e96:	69ba      	ldr	r2, [r7, #24]
 8007e98:	4013      	ands	r3, r2
 8007e9a:	61bb      	str	r3, [r7, #24]
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	689a      	ldr	r2, [r3, #8]
 8007ea0:	69fb      	ldr	r3, [r7, #28]
 8007ea2:	005b      	lsls	r3, r3, #1
 8007ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ea8:	69ba      	ldr	r2, [r7, #24]
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	61bb      	str	r3, [r7, #24]
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	69ba      	ldr	r2, [r7, #24]
 8007eb2:	60da      	str	r2, [r3, #12]
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	f003 0303 	and.w	r3, r3, #3
 8007ebc:	2b02      	cmp	r3, #2
 8007ebe:	d123      	bne.n	8007f08 <HAL_GPIO_Init+0x144>
 8007ec0:	69fb      	ldr	r3, [r7, #28]
 8007ec2:	08da      	lsrs	r2, r3, #3
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	3208      	adds	r2, #8
 8007ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ecc:	61bb      	str	r3, [r7, #24]
 8007ece:	69fb      	ldr	r3, [r7, #28]
 8007ed0:	f003 0307 	and.w	r3, r3, #7
 8007ed4:	009b      	lsls	r3, r3, #2
 8007ed6:	220f      	movs	r2, #15
 8007ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8007edc:	43db      	mvns	r3, r3
 8007ede:	69ba      	ldr	r2, [r7, #24]
 8007ee0:	4013      	ands	r3, r2
 8007ee2:	61bb      	str	r3, [r7, #24]
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	691a      	ldr	r2, [r3, #16]
 8007ee8:	69fb      	ldr	r3, [r7, #28]
 8007eea:	f003 0307 	and.w	r3, r3, #7
 8007eee:	009b      	lsls	r3, r3, #2
 8007ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ef4:	69ba      	ldr	r2, [r7, #24]
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	61bb      	str	r3, [r7, #24]
 8007efa:	69fb      	ldr	r3, [r7, #28]
 8007efc:	08da      	lsrs	r2, r3, #3
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	3208      	adds	r2, #8
 8007f02:	69b9      	ldr	r1, [r7, #24]
 8007f04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	61bb      	str	r3, [r7, #24]
 8007f0e:	69fb      	ldr	r3, [r7, #28]
 8007f10:	005b      	lsls	r3, r3, #1
 8007f12:	2203      	movs	r2, #3
 8007f14:	fa02 f303 	lsl.w	r3, r2, r3
 8007f18:	43db      	mvns	r3, r3
 8007f1a:	69ba      	ldr	r2, [r7, #24]
 8007f1c:	4013      	ands	r3, r2
 8007f1e:	61bb      	str	r3, [r7, #24]
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	f003 0203 	and.w	r2, r3, #3
 8007f28:	69fb      	ldr	r3, [r7, #28]
 8007f2a:	005b      	lsls	r3, r3, #1
 8007f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8007f30:	69ba      	ldr	r2, [r7, #24]
 8007f32:	4313      	orrs	r3, r2
 8007f34:	61bb      	str	r3, [r7, #24]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	69ba      	ldr	r2, [r7, #24]
 8007f3a:	601a      	str	r2, [r3, #0]
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	f000 80a2 	beq.w	800808e <HAL_GPIO_Init+0x2ca>
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	60fb      	str	r3, [r7, #12]
 8007f4e:	4b57      	ldr	r3, [pc, #348]	@ (80080ac <HAL_GPIO_Init+0x2e8>)
 8007f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f52:	4a56      	ldr	r2, [pc, #344]	@ (80080ac <HAL_GPIO_Init+0x2e8>)
 8007f54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007f58:	6453      	str	r3, [r2, #68]	@ 0x44
 8007f5a:	4b54      	ldr	r3, [pc, #336]	@ (80080ac <HAL_GPIO_Init+0x2e8>)
 8007f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007f62:	60fb      	str	r3, [r7, #12]
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	4a52      	ldr	r2, [pc, #328]	@ (80080b0 <HAL_GPIO_Init+0x2ec>)
 8007f68:	69fb      	ldr	r3, [r7, #28]
 8007f6a:	089b      	lsrs	r3, r3, #2
 8007f6c:	3302      	adds	r3, #2
 8007f6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f72:	61bb      	str	r3, [r7, #24]
 8007f74:	69fb      	ldr	r3, [r7, #28]
 8007f76:	f003 0303 	and.w	r3, r3, #3
 8007f7a:	009b      	lsls	r3, r3, #2
 8007f7c:	220f      	movs	r2, #15
 8007f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8007f82:	43db      	mvns	r3, r3
 8007f84:	69ba      	ldr	r2, [r7, #24]
 8007f86:	4013      	ands	r3, r2
 8007f88:	61bb      	str	r3, [r7, #24]
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	4a49      	ldr	r2, [pc, #292]	@ (80080b4 <HAL_GPIO_Init+0x2f0>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d019      	beq.n	8007fc6 <HAL_GPIO_Init+0x202>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	4a48      	ldr	r2, [pc, #288]	@ (80080b8 <HAL_GPIO_Init+0x2f4>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d013      	beq.n	8007fc2 <HAL_GPIO_Init+0x1fe>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	4a47      	ldr	r2, [pc, #284]	@ (80080bc <HAL_GPIO_Init+0x2f8>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d00d      	beq.n	8007fbe <HAL_GPIO_Init+0x1fa>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	4a46      	ldr	r2, [pc, #280]	@ (80080c0 <HAL_GPIO_Init+0x2fc>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d007      	beq.n	8007fba <HAL_GPIO_Init+0x1f6>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	4a45      	ldr	r2, [pc, #276]	@ (80080c4 <HAL_GPIO_Init+0x300>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d101      	bne.n	8007fb6 <HAL_GPIO_Init+0x1f2>
 8007fb2:	2304      	movs	r3, #4
 8007fb4:	e008      	b.n	8007fc8 <HAL_GPIO_Init+0x204>
 8007fb6:	2307      	movs	r3, #7
 8007fb8:	e006      	b.n	8007fc8 <HAL_GPIO_Init+0x204>
 8007fba:	2303      	movs	r3, #3
 8007fbc:	e004      	b.n	8007fc8 <HAL_GPIO_Init+0x204>
 8007fbe:	2302      	movs	r3, #2
 8007fc0:	e002      	b.n	8007fc8 <HAL_GPIO_Init+0x204>
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	e000      	b.n	8007fc8 <HAL_GPIO_Init+0x204>
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	69fa      	ldr	r2, [r7, #28]
 8007fca:	f002 0203 	and.w	r2, r2, #3
 8007fce:	0092      	lsls	r2, r2, #2
 8007fd0:	4093      	lsls	r3, r2
 8007fd2:	69ba      	ldr	r2, [r7, #24]
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	61bb      	str	r3, [r7, #24]
 8007fd8:	4935      	ldr	r1, [pc, #212]	@ (80080b0 <HAL_GPIO_Init+0x2ec>)
 8007fda:	69fb      	ldr	r3, [r7, #28]
 8007fdc:	089b      	lsrs	r3, r3, #2
 8007fde:	3302      	adds	r3, #2
 8007fe0:	69ba      	ldr	r2, [r7, #24]
 8007fe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007fe6:	4b38      	ldr	r3, [pc, #224]	@ (80080c8 <HAL_GPIO_Init+0x304>)
 8007fe8:	689b      	ldr	r3, [r3, #8]
 8007fea:	61bb      	str	r3, [r7, #24]
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	43db      	mvns	r3, r3
 8007ff0:	69ba      	ldr	r2, [r7, #24]
 8007ff2:	4013      	ands	r3, r2
 8007ff4:	61bb      	str	r3, [r7, #24]
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	685b      	ldr	r3, [r3, #4]
 8007ffa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d003      	beq.n	800800a <HAL_GPIO_Init+0x246>
 8008002:	69ba      	ldr	r2, [r7, #24]
 8008004:	693b      	ldr	r3, [r7, #16]
 8008006:	4313      	orrs	r3, r2
 8008008:	61bb      	str	r3, [r7, #24]
 800800a:	4a2f      	ldr	r2, [pc, #188]	@ (80080c8 <HAL_GPIO_Init+0x304>)
 800800c:	69bb      	ldr	r3, [r7, #24]
 800800e:	6093      	str	r3, [r2, #8]
 8008010:	4b2d      	ldr	r3, [pc, #180]	@ (80080c8 <HAL_GPIO_Init+0x304>)
 8008012:	68db      	ldr	r3, [r3, #12]
 8008014:	61bb      	str	r3, [r7, #24]
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	43db      	mvns	r3, r3
 800801a:	69ba      	ldr	r2, [r7, #24]
 800801c:	4013      	ands	r3, r2
 800801e:	61bb      	str	r3, [r7, #24]
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	685b      	ldr	r3, [r3, #4]
 8008024:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008028:	2b00      	cmp	r3, #0
 800802a:	d003      	beq.n	8008034 <HAL_GPIO_Init+0x270>
 800802c:	69ba      	ldr	r2, [r7, #24]
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	4313      	orrs	r3, r2
 8008032:	61bb      	str	r3, [r7, #24]
 8008034:	4a24      	ldr	r2, [pc, #144]	@ (80080c8 <HAL_GPIO_Init+0x304>)
 8008036:	69bb      	ldr	r3, [r7, #24]
 8008038:	60d3      	str	r3, [r2, #12]
 800803a:	4b23      	ldr	r3, [pc, #140]	@ (80080c8 <HAL_GPIO_Init+0x304>)
 800803c:	685b      	ldr	r3, [r3, #4]
 800803e:	61bb      	str	r3, [r7, #24]
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	43db      	mvns	r3, r3
 8008044:	69ba      	ldr	r2, [r7, #24]
 8008046:	4013      	ands	r3, r2
 8008048:	61bb      	str	r3, [r7, #24]
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	685b      	ldr	r3, [r3, #4]
 800804e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008052:	2b00      	cmp	r3, #0
 8008054:	d003      	beq.n	800805e <HAL_GPIO_Init+0x29a>
 8008056:	69ba      	ldr	r2, [r7, #24]
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	4313      	orrs	r3, r2
 800805c:	61bb      	str	r3, [r7, #24]
 800805e:	4a1a      	ldr	r2, [pc, #104]	@ (80080c8 <HAL_GPIO_Init+0x304>)
 8008060:	69bb      	ldr	r3, [r7, #24]
 8008062:	6053      	str	r3, [r2, #4]
 8008064:	4b18      	ldr	r3, [pc, #96]	@ (80080c8 <HAL_GPIO_Init+0x304>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	61bb      	str	r3, [r7, #24]
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	43db      	mvns	r3, r3
 800806e:	69ba      	ldr	r2, [r7, #24]
 8008070:	4013      	ands	r3, r2
 8008072:	61bb      	str	r3, [r7, #24]
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	685b      	ldr	r3, [r3, #4]
 8008078:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800807c:	2b00      	cmp	r3, #0
 800807e:	d003      	beq.n	8008088 <HAL_GPIO_Init+0x2c4>
 8008080:	69ba      	ldr	r2, [r7, #24]
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	4313      	orrs	r3, r2
 8008086:	61bb      	str	r3, [r7, #24]
 8008088:	4a0f      	ldr	r2, [pc, #60]	@ (80080c8 <HAL_GPIO_Init+0x304>)
 800808a:	69bb      	ldr	r3, [r7, #24]
 800808c:	6013      	str	r3, [r2, #0]
 800808e:	69fb      	ldr	r3, [r7, #28]
 8008090:	3301      	adds	r3, #1
 8008092:	61fb      	str	r3, [r7, #28]
 8008094:	69fb      	ldr	r3, [r7, #28]
 8008096:	2b0f      	cmp	r3, #15
 8008098:	f67f aea2 	bls.w	8007de0 <HAL_GPIO_Init+0x1c>
 800809c:	bf00      	nop
 800809e:	bf00      	nop
 80080a0:	3724      	adds	r7, #36	@ 0x24
 80080a2:	46bd      	mov	sp, r7
 80080a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a8:	4770      	bx	lr
 80080aa:	bf00      	nop
 80080ac:	40023800 	.word	0x40023800
 80080b0:	40013800 	.word	0x40013800
 80080b4:	40020000 	.word	0x40020000
 80080b8:	40020400 	.word	0x40020400
 80080bc:	40020800 	.word	0x40020800
 80080c0:	40020c00 	.word	0x40020c00
 80080c4:	40021000 	.word	0x40021000
 80080c8:	40013c00 	.word	0x40013c00

080080cc <HAL_GPIO_ReadPin>:
 80080cc:	b480      	push	{r7}
 80080ce:	b085      	sub	sp, #20
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
 80080d4:	460b      	mov	r3, r1
 80080d6:	807b      	strh	r3, [r7, #2]
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	691a      	ldr	r2, [r3, #16]
 80080dc:	887b      	ldrh	r3, [r7, #2]
 80080de:	4013      	ands	r3, r2
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d002      	beq.n	80080ea <HAL_GPIO_ReadPin+0x1e>
 80080e4:	2301      	movs	r3, #1
 80080e6:	73fb      	strb	r3, [r7, #15]
 80080e8:	e001      	b.n	80080ee <HAL_GPIO_ReadPin+0x22>
 80080ea:	2300      	movs	r3, #0
 80080ec:	73fb      	strb	r3, [r7, #15]
 80080ee:	7bfb      	ldrb	r3, [r7, #15]
 80080f0:	4618      	mov	r0, r3
 80080f2:	3714      	adds	r7, #20
 80080f4:	46bd      	mov	sp, r7
 80080f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fa:	4770      	bx	lr

080080fc <HAL_GPIO_WritePin>:
 80080fc:	b480      	push	{r7}
 80080fe:	b083      	sub	sp, #12
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
 8008104:	460b      	mov	r3, r1
 8008106:	807b      	strh	r3, [r7, #2]
 8008108:	4613      	mov	r3, r2
 800810a:	707b      	strb	r3, [r7, #1]
 800810c:	787b      	ldrb	r3, [r7, #1]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d003      	beq.n	800811a <HAL_GPIO_WritePin+0x1e>
 8008112:	887a      	ldrh	r2, [r7, #2]
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	619a      	str	r2, [r3, #24]
 8008118:	e003      	b.n	8008122 <HAL_GPIO_WritePin+0x26>
 800811a:	887b      	ldrh	r3, [r7, #2]
 800811c:	041a      	lsls	r2, r3, #16
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	619a      	str	r2, [r3, #24]
 8008122:	bf00      	nop
 8008124:	370c      	adds	r7, #12
 8008126:	46bd      	mov	sp, r7
 8008128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812c:	4770      	bx	lr
	...

08008130 <HAL_I2C_Init>:
 8008130:	b580      	push	{r7, lr}
 8008132:	b084      	sub	sp, #16
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d101      	bne.n	8008142 <HAL_I2C_Init+0x12>
 800813e:	2301      	movs	r3, #1
 8008140:	e12b      	b.n	800839a <HAL_I2C_Init+0x26a>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008148:	b2db      	uxtb	r3, r3
 800814a:	2b00      	cmp	r3, #0
 800814c:	d106      	bne.n	800815c <HAL_I2C_Init+0x2c>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2200      	movs	r2, #0
 8008152:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f7f9 f9fa 	bl	8001550 <HAL_I2C_MspInit>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2224      	movs	r2, #36	@ 0x24
 8008160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	681a      	ldr	r2, [r3, #0]
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f022 0201 	bic.w	r2, r2, #1
 8008172:	601a      	str	r2, [r3, #0]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	681a      	ldr	r2, [r3, #0]
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008182:	601a      	str	r2, [r3, #0]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	681a      	ldr	r2, [r3, #0]
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008192:	601a      	str	r2, [r3, #0]
 8008194:	f001 f89a 	bl	80092cc <HAL_RCC_GetPCLK1Freq>
 8008198:	60f8      	str	r0, [r7, #12]
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	685b      	ldr	r3, [r3, #4]
 800819e:	4a81      	ldr	r2, [pc, #516]	@ (80083a4 <HAL_I2C_Init+0x274>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d807      	bhi.n	80081b4 <HAL_I2C_Init+0x84>
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	4a80      	ldr	r2, [pc, #512]	@ (80083a8 <HAL_I2C_Init+0x278>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	bf94      	ite	ls
 80081ac:	2301      	movls	r3, #1
 80081ae:	2300      	movhi	r3, #0
 80081b0:	b2db      	uxtb	r3, r3
 80081b2:	e006      	b.n	80081c2 <HAL_I2C_Init+0x92>
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	4a7d      	ldr	r2, [pc, #500]	@ (80083ac <HAL_I2C_Init+0x27c>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	bf94      	ite	ls
 80081bc:	2301      	movls	r3, #1
 80081be:	2300      	movhi	r3, #0
 80081c0:	b2db      	uxtb	r3, r3
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d001      	beq.n	80081ca <HAL_I2C_Init+0x9a>
 80081c6:	2301      	movs	r3, #1
 80081c8:	e0e7      	b.n	800839a <HAL_I2C_Init+0x26a>
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	4a78      	ldr	r2, [pc, #480]	@ (80083b0 <HAL_I2C_Init+0x280>)
 80081ce:	fba2 2303 	umull	r2, r3, r2, r3
 80081d2:	0c9b      	lsrs	r3, r3, #18
 80081d4:	60bb      	str	r3, [r7, #8]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	68ba      	ldr	r2, [r7, #8]
 80081e6:	430a      	orrs	r2, r1
 80081e8:	605a      	str	r2, [r3, #4]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	6a1b      	ldr	r3, [r3, #32]
 80081f0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	4a6a      	ldr	r2, [pc, #424]	@ (80083a4 <HAL_I2C_Init+0x274>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d802      	bhi.n	8008204 <HAL_I2C_Init+0xd4>
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	3301      	adds	r3, #1
 8008202:	e009      	b.n	8008218 <HAL_I2C_Init+0xe8>
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800820a:	fb02 f303 	mul.w	r3, r2, r3
 800820e:	4a69      	ldr	r2, [pc, #420]	@ (80083b4 <HAL_I2C_Init+0x284>)
 8008210:	fba2 2303 	umull	r2, r3, r2, r3
 8008214:	099b      	lsrs	r3, r3, #6
 8008216:	3301      	adds	r3, #1
 8008218:	687a      	ldr	r2, [r7, #4]
 800821a:	6812      	ldr	r2, [r2, #0]
 800821c:	430b      	orrs	r3, r1
 800821e:	6213      	str	r3, [r2, #32]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	69db      	ldr	r3, [r3, #28]
 8008226:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800822a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	685b      	ldr	r3, [r3, #4]
 8008232:	495c      	ldr	r1, [pc, #368]	@ (80083a4 <HAL_I2C_Init+0x274>)
 8008234:	428b      	cmp	r3, r1
 8008236:	d819      	bhi.n	800826c <HAL_I2C_Init+0x13c>
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	1e59      	subs	r1, r3, #1
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	005b      	lsls	r3, r3, #1
 8008242:	fbb1 f3f3 	udiv	r3, r1, r3
 8008246:	1c59      	adds	r1, r3, #1
 8008248:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800824c:	400b      	ands	r3, r1
 800824e:	2b00      	cmp	r3, #0
 8008250:	d00a      	beq.n	8008268 <HAL_I2C_Init+0x138>
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	1e59      	subs	r1, r3, #1
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	685b      	ldr	r3, [r3, #4]
 800825a:	005b      	lsls	r3, r3, #1
 800825c:	fbb1 f3f3 	udiv	r3, r1, r3
 8008260:	3301      	adds	r3, #1
 8008262:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008266:	e051      	b.n	800830c <HAL_I2C_Init+0x1dc>
 8008268:	2304      	movs	r3, #4
 800826a:	e04f      	b.n	800830c <HAL_I2C_Init+0x1dc>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	689b      	ldr	r3, [r3, #8]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d111      	bne.n	8008298 <HAL_I2C_Init+0x168>
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	1e58      	subs	r0, r3, #1
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6859      	ldr	r1, [r3, #4]
 800827c:	460b      	mov	r3, r1
 800827e:	005b      	lsls	r3, r3, #1
 8008280:	440b      	add	r3, r1
 8008282:	fbb0 f3f3 	udiv	r3, r0, r3
 8008286:	3301      	adds	r3, #1
 8008288:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800828c:	2b00      	cmp	r3, #0
 800828e:	bf0c      	ite	eq
 8008290:	2301      	moveq	r3, #1
 8008292:	2300      	movne	r3, #0
 8008294:	b2db      	uxtb	r3, r3
 8008296:	e012      	b.n	80082be <HAL_I2C_Init+0x18e>
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	1e58      	subs	r0, r3, #1
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6859      	ldr	r1, [r3, #4]
 80082a0:	460b      	mov	r3, r1
 80082a2:	009b      	lsls	r3, r3, #2
 80082a4:	440b      	add	r3, r1
 80082a6:	0099      	lsls	r1, r3, #2
 80082a8:	440b      	add	r3, r1
 80082aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80082ae:	3301      	adds	r3, #1
 80082b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	bf0c      	ite	eq
 80082b8:	2301      	moveq	r3, #1
 80082ba:	2300      	movne	r3, #0
 80082bc:	b2db      	uxtb	r3, r3
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d001      	beq.n	80082c6 <HAL_I2C_Init+0x196>
 80082c2:	2301      	movs	r3, #1
 80082c4:	e022      	b.n	800830c <HAL_I2C_Init+0x1dc>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	689b      	ldr	r3, [r3, #8]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d10e      	bne.n	80082ec <HAL_I2C_Init+0x1bc>
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	1e58      	subs	r0, r3, #1
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6859      	ldr	r1, [r3, #4]
 80082d6:	460b      	mov	r3, r1
 80082d8:	005b      	lsls	r3, r3, #1
 80082da:	440b      	add	r3, r1
 80082dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80082e0:	3301      	adds	r3, #1
 80082e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80082e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80082ea:	e00f      	b.n	800830c <HAL_I2C_Init+0x1dc>
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	1e58      	subs	r0, r3, #1
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6859      	ldr	r1, [r3, #4]
 80082f4:	460b      	mov	r3, r1
 80082f6:	009b      	lsls	r3, r3, #2
 80082f8:	440b      	add	r3, r1
 80082fa:	0099      	lsls	r1, r3, #2
 80082fc:	440b      	add	r3, r1
 80082fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8008302:	3301      	adds	r3, #1
 8008304:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008308:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800830c:	6879      	ldr	r1, [r7, #4]
 800830e:	6809      	ldr	r1, [r1, #0]
 8008310:	4313      	orrs	r3, r2
 8008312:	61cb      	str	r3, [r1, #28]
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	69da      	ldr	r2, [r3, #28]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6a1b      	ldr	r3, [r3, #32]
 8008326:	431a      	orrs	r2, r3
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	430a      	orrs	r2, r1
 800832e:	601a      	str	r2, [r3, #0]
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	689b      	ldr	r3, [r3, #8]
 8008336:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800833a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800833e:	687a      	ldr	r2, [r7, #4]
 8008340:	6911      	ldr	r1, [r2, #16]
 8008342:	687a      	ldr	r2, [r7, #4]
 8008344:	68d2      	ldr	r2, [r2, #12]
 8008346:	4311      	orrs	r1, r2
 8008348:	687a      	ldr	r2, [r7, #4]
 800834a:	6812      	ldr	r2, [r2, #0]
 800834c:	430b      	orrs	r3, r1
 800834e:	6093      	str	r3, [r2, #8]
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	68db      	ldr	r3, [r3, #12]
 8008356:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	695a      	ldr	r2, [r3, #20]
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	699b      	ldr	r3, [r3, #24]
 8008362:	431a      	orrs	r2, r3
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	430a      	orrs	r2, r1
 800836a:	60da      	str	r2, [r3, #12]
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	681a      	ldr	r2, [r3, #0]
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f042 0201 	orr.w	r2, r2, #1
 800837a:	601a      	str	r2, [r3, #0]
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2200      	movs	r2, #0
 8008380:	641a      	str	r2, [r3, #64]	@ 0x40
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2220      	movs	r2, #32
 8008386:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2200      	movs	r2, #0
 800838e:	631a      	str	r2, [r3, #48]	@ 0x30
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2200      	movs	r2, #0
 8008394:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008398:	2300      	movs	r3, #0
 800839a:	4618      	mov	r0, r3
 800839c:	3710      	adds	r7, #16
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}
 80083a2:	bf00      	nop
 80083a4:	000186a0 	.word	0x000186a0
 80083a8:	001e847f 	.word	0x001e847f
 80083ac:	003d08ff 	.word	0x003d08ff
 80083b0:	431bde83 	.word	0x431bde83
 80083b4:	10624dd3 	.word	0x10624dd3

080083b8 <HAL_I2C_Master_Transmit>:
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b088      	sub	sp, #32
 80083bc:	af02      	add	r7, sp, #8
 80083be:	60f8      	str	r0, [r7, #12]
 80083c0:	607a      	str	r2, [r7, #4]
 80083c2:	461a      	mov	r2, r3
 80083c4:	460b      	mov	r3, r1
 80083c6:	817b      	strh	r3, [r7, #10]
 80083c8:	4613      	mov	r3, r2
 80083ca:	813b      	strh	r3, [r7, #8]
 80083cc:	f7fe fa68 	bl	80068a0 <HAL_GetTick>
 80083d0:	6178      	str	r0, [r7, #20]
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80083d8:	b2db      	uxtb	r3, r3
 80083da:	2b20      	cmp	r3, #32
 80083dc:	f040 80e0 	bne.w	80085a0 <HAL_I2C_Master_Transmit+0x1e8>
 80083e0:	697b      	ldr	r3, [r7, #20]
 80083e2:	9300      	str	r3, [sp, #0]
 80083e4:	2319      	movs	r3, #25
 80083e6:	2201      	movs	r2, #1
 80083e8:	4970      	ldr	r1, [pc, #448]	@ (80085ac <HAL_I2C_Master_Transmit+0x1f4>)
 80083ea:	68f8      	ldr	r0, [r7, #12]
 80083ec:	f000 f964 	bl	80086b8 <I2C_WaitOnFlagUntilTimeout>
 80083f0:	4603      	mov	r3, r0
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d001      	beq.n	80083fa <HAL_I2C_Master_Transmit+0x42>
 80083f6:	2302      	movs	r3, #2
 80083f8:	e0d3      	b.n	80085a2 <HAL_I2C_Master_Transmit+0x1ea>
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008400:	2b01      	cmp	r3, #1
 8008402:	d101      	bne.n	8008408 <HAL_I2C_Master_Transmit+0x50>
 8008404:	2302      	movs	r3, #2
 8008406:	e0cc      	b.n	80085a2 <HAL_I2C_Master_Transmit+0x1ea>
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	2201      	movs	r2, #1
 800840c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f003 0301 	and.w	r3, r3, #1
 800841a:	2b01      	cmp	r3, #1
 800841c:	d007      	beq.n	800842e <HAL_I2C_Master_Transmit+0x76>
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	681a      	ldr	r2, [r3, #0]
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f042 0201 	orr.w	r2, r2, #1
 800842c:	601a      	str	r2, [r3, #0]
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	681a      	ldr	r2, [r3, #0]
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800843c:	601a      	str	r2, [r3, #0]
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	2221      	movs	r2, #33	@ 0x21
 8008442:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	2210      	movs	r2, #16
 800844a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	2200      	movs	r2, #0
 8008452:	641a      	str	r2, [r3, #64]	@ 0x40
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	687a      	ldr	r2, [r7, #4]
 8008458:	625a      	str	r2, [r3, #36]	@ 0x24
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	893a      	ldrh	r2, [r7, #8]
 800845e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008464:	b29a      	uxth	r2, r3
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	851a      	strh	r2, [r3, #40]	@ 0x28
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	4a50      	ldr	r2, [pc, #320]	@ (80085b0 <HAL_I2C_Master_Transmit+0x1f8>)
 800846e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8008470:	8979      	ldrh	r1, [r7, #10]
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	6a3a      	ldr	r2, [r7, #32]
 8008476:	68f8      	ldr	r0, [r7, #12]
 8008478:	f000 f89c 	bl	80085b4 <I2C_MasterRequestWrite>
 800847c:	4603      	mov	r3, r0
 800847e:	2b00      	cmp	r3, #0
 8008480:	d001      	beq.n	8008486 <HAL_I2C_Master_Transmit+0xce>
 8008482:	2301      	movs	r3, #1
 8008484:	e08d      	b.n	80085a2 <HAL_I2C_Master_Transmit+0x1ea>
 8008486:	2300      	movs	r3, #0
 8008488:	613b      	str	r3, [r7, #16]
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	695b      	ldr	r3, [r3, #20]
 8008490:	613b      	str	r3, [r7, #16]
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	699b      	ldr	r3, [r3, #24]
 8008498:	613b      	str	r3, [r7, #16]
 800849a:	693b      	ldr	r3, [r7, #16]
 800849c:	e066      	b.n	800856c <HAL_I2C_Master_Transmit+0x1b4>
 800849e:	697a      	ldr	r2, [r7, #20]
 80084a0:	6a39      	ldr	r1, [r7, #32]
 80084a2:	68f8      	ldr	r0, [r7, #12]
 80084a4:	f000 fa22 	bl	80088ec <I2C_WaitOnTXEFlagUntilTimeout>
 80084a8:	4603      	mov	r3, r0
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d00d      	beq.n	80084ca <HAL_I2C_Master_Transmit+0x112>
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084b2:	2b04      	cmp	r3, #4
 80084b4:	d107      	bne.n	80084c6 <HAL_I2C_Master_Transmit+0x10e>
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	681a      	ldr	r2, [r3, #0]
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80084c4:	601a      	str	r2, [r3, #0]
 80084c6:	2301      	movs	r3, #1
 80084c8:	e06b      	b.n	80085a2 <HAL_I2C_Master_Transmit+0x1ea>
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084ce:	781a      	ldrb	r2, [r3, #0]
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	611a      	str	r2, [r3, #16]
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084da:	1c5a      	adds	r2, r3, #1
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	625a      	str	r2, [r3, #36]	@ 0x24
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80084e4:	b29b      	uxth	r3, r3
 80084e6:	3b01      	subs	r3, #1
 80084e8:	b29a      	uxth	r2, r3
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80084f2:	3b01      	subs	r3, #1
 80084f4:	b29a      	uxth	r2, r3
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	851a      	strh	r2, [r3, #40]	@ 0x28
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	695b      	ldr	r3, [r3, #20]
 8008500:	f003 0304 	and.w	r3, r3, #4
 8008504:	2b04      	cmp	r3, #4
 8008506:	d11b      	bne.n	8008540 <HAL_I2C_Master_Transmit+0x188>
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800850c:	2b00      	cmp	r3, #0
 800850e:	d017      	beq.n	8008540 <HAL_I2C_Master_Transmit+0x188>
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008514:	781a      	ldrb	r2, [r3, #0]
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	611a      	str	r2, [r3, #16]
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008520:	1c5a      	adds	r2, r3, #1
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	625a      	str	r2, [r3, #36]	@ 0x24
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800852a:	b29b      	uxth	r3, r3
 800852c:	3b01      	subs	r3, #1
 800852e:	b29a      	uxth	r2, r3
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008538:	3b01      	subs	r3, #1
 800853a:	b29a      	uxth	r2, r3
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8008540:	697a      	ldr	r2, [r7, #20]
 8008542:	6a39      	ldr	r1, [r7, #32]
 8008544:	68f8      	ldr	r0, [r7, #12]
 8008546:	f000 fa19 	bl	800897c <I2C_WaitOnBTFFlagUntilTimeout>
 800854a:	4603      	mov	r3, r0
 800854c:	2b00      	cmp	r3, #0
 800854e:	d00d      	beq.n	800856c <HAL_I2C_Master_Transmit+0x1b4>
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008554:	2b04      	cmp	r3, #4
 8008556:	d107      	bne.n	8008568 <HAL_I2C_Master_Transmit+0x1b0>
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	681a      	ldr	r2, [r3, #0]
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008566:	601a      	str	r2, [r3, #0]
 8008568:	2301      	movs	r3, #1
 800856a:	e01a      	b.n	80085a2 <HAL_I2C_Master_Transmit+0x1ea>
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008570:	2b00      	cmp	r3, #0
 8008572:	d194      	bne.n	800849e <HAL_I2C_Master_Transmit+0xe6>
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	681a      	ldr	r2, [r3, #0]
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008582:	601a      	str	r2, [r3, #0]
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	2220      	movs	r2, #32
 8008588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	2200      	movs	r2, #0
 8008590:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	2200      	movs	r2, #0
 8008598:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800859c:	2300      	movs	r3, #0
 800859e:	e000      	b.n	80085a2 <HAL_I2C_Master_Transmit+0x1ea>
 80085a0:	2302      	movs	r3, #2
 80085a2:	4618      	mov	r0, r3
 80085a4:	3718      	adds	r7, #24
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}
 80085aa:	bf00      	nop
 80085ac:	00100002 	.word	0x00100002
 80085b0:	ffff0000 	.word	0xffff0000

080085b4 <I2C_MasterRequestWrite>:
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b088      	sub	sp, #32
 80085b8:	af02      	add	r7, sp, #8
 80085ba:	60f8      	str	r0, [r7, #12]
 80085bc:	607a      	str	r2, [r7, #4]
 80085be:	603b      	str	r3, [r7, #0]
 80085c0:	460b      	mov	r3, r1
 80085c2:	817b      	strh	r3, [r7, #10]
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085c8:	617b      	str	r3, [r7, #20]
 80085ca:	697b      	ldr	r3, [r7, #20]
 80085cc:	2b08      	cmp	r3, #8
 80085ce:	d006      	beq.n	80085de <I2C_MasterRequestWrite+0x2a>
 80085d0:	697b      	ldr	r3, [r7, #20]
 80085d2:	2b01      	cmp	r3, #1
 80085d4:	d003      	beq.n	80085de <I2C_MasterRequestWrite+0x2a>
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80085dc:	d108      	bne.n	80085f0 <I2C_MasterRequestWrite+0x3c>
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	681a      	ldr	r2, [r3, #0]
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80085ec:	601a      	str	r2, [r3, #0]
 80085ee:	e00b      	b.n	8008608 <I2C_MasterRequestWrite+0x54>
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085f4:	2b12      	cmp	r3, #18
 80085f6:	d107      	bne.n	8008608 <I2C_MasterRequestWrite+0x54>
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	681a      	ldr	r2, [r3, #0]
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008606:	601a      	str	r2, [r3, #0]
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	9300      	str	r3, [sp, #0]
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2200      	movs	r2, #0
 8008610:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008614:	68f8      	ldr	r0, [r7, #12]
 8008616:	f000 f84f 	bl	80086b8 <I2C_WaitOnFlagUntilTimeout>
 800861a:	4603      	mov	r3, r0
 800861c:	2b00      	cmp	r3, #0
 800861e:	d00d      	beq.n	800863c <I2C_MasterRequestWrite+0x88>
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800862a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800862e:	d103      	bne.n	8008638 <I2C_MasterRequestWrite+0x84>
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008636:	641a      	str	r2, [r3, #64]	@ 0x40
 8008638:	2303      	movs	r3, #3
 800863a:	e035      	b.n	80086a8 <I2C_MasterRequestWrite+0xf4>
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	691b      	ldr	r3, [r3, #16]
 8008640:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008644:	d108      	bne.n	8008658 <I2C_MasterRequestWrite+0xa4>
 8008646:	897b      	ldrh	r3, [r7, #10]
 8008648:	b2db      	uxtb	r3, r3
 800864a:	461a      	mov	r2, r3
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008654:	611a      	str	r2, [r3, #16]
 8008656:	e01b      	b.n	8008690 <I2C_MasterRequestWrite+0xdc>
 8008658:	897b      	ldrh	r3, [r7, #10]
 800865a:	11db      	asrs	r3, r3, #7
 800865c:	b2db      	uxtb	r3, r3
 800865e:	f003 0306 	and.w	r3, r3, #6
 8008662:	b2db      	uxtb	r3, r3
 8008664:	f063 030f 	orn	r3, r3, #15
 8008668:	b2da      	uxtb	r2, r3
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	611a      	str	r2, [r3, #16]
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	687a      	ldr	r2, [r7, #4]
 8008674:	490e      	ldr	r1, [pc, #56]	@ (80086b0 <I2C_MasterRequestWrite+0xfc>)
 8008676:	68f8      	ldr	r0, [r7, #12]
 8008678:	f000 f898 	bl	80087ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800867c:	4603      	mov	r3, r0
 800867e:	2b00      	cmp	r3, #0
 8008680:	d001      	beq.n	8008686 <I2C_MasterRequestWrite+0xd2>
 8008682:	2301      	movs	r3, #1
 8008684:	e010      	b.n	80086a8 <I2C_MasterRequestWrite+0xf4>
 8008686:	897b      	ldrh	r3, [r7, #10]
 8008688:	b2da      	uxtb	r2, r3
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	611a      	str	r2, [r3, #16]
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	687a      	ldr	r2, [r7, #4]
 8008694:	4907      	ldr	r1, [pc, #28]	@ (80086b4 <I2C_MasterRequestWrite+0x100>)
 8008696:	68f8      	ldr	r0, [r7, #12]
 8008698:	f000 f888 	bl	80087ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800869c:	4603      	mov	r3, r0
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d001      	beq.n	80086a6 <I2C_MasterRequestWrite+0xf2>
 80086a2:	2301      	movs	r3, #1
 80086a4:	e000      	b.n	80086a8 <I2C_MasterRequestWrite+0xf4>
 80086a6:	2300      	movs	r3, #0
 80086a8:	4618      	mov	r0, r3
 80086aa:	3718      	adds	r7, #24
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}
 80086b0:	00010008 	.word	0x00010008
 80086b4:	00010002 	.word	0x00010002

080086b8 <I2C_WaitOnFlagUntilTimeout>:
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b084      	sub	sp, #16
 80086bc:	af00      	add	r7, sp, #0
 80086be:	60f8      	str	r0, [r7, #12]
 80086c0:	60b9      	str	r1, [r7, #8]
 80086c2:	603b      	str	r3, [r7, #0]
 80086c4:	4613      	mov	r3, r2
 80086c6:	71fb      	strb	r3, [r7, #7]
 80086c8:	e048      	b.n	800875c <I2C_WaitOnFlagUntilTimeout+0xa4>
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086d0:	d044      	beq.n	800875c <I2C_WaitOnFlagUntilTimeout+0xa4>
 80086d2:	f7fe f8e5 	bl	80068a0 <HAL_GetTick>
 80086d6:	4602      	mov	r2, r0
 80086d8:	69bb      	ldr	r3, [r7, #24]
 80086da:	1ad3      	subs	r3, r2, r3
 80086dc:	683a      	ldr	r2, [r7, #0]
 80086de:	429a      	cmp	r2, r3
 80086e0:	d302      	bcc.n	80086e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d139      	bne.n	800875c <I2C_WaitOnFlagUntilTimeout+0xa4>
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	0c1b      	lsrs	r3, r3, #16
 80086ec:	b2db      	uxtb	r3, r3
 80086ee:	2b01      	cmp	r3, #1
 80086f0:	d10d      	bne.n	800870e <I2C_WaitOnFlagUntilTimeout+0x56>
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	695b      	ldr	r3, [r3, #20]
 80086f8:	43da      	mvns	r2, r3
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	4013      	ands	r3, r2
 80086fe:	b29b      	uxth	r3, r3
 8008700:	2b00      	cmp	r3, #0
 8008702:	bf0c      	ite	eq
 8008704:	2301      	moveq	r3, #1
 8008706:	2300      	movne	r3, #0
 8008708:	b2db      	uxtb	r3, r3
 800870a:	461a      	mov	r2, r3
 800870c:	e00c      	b.n	8008728 <I2C_WaitOnFlagUntilTimeout+0x70>
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	699b      	ldr	r3, [r3, #24]
 8008714:	43da      	mvns	r2, r3
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	4013      	ands	r3, r2
 800871a:	b29b      	uxth	r3, r3
 800871c:	2b00      	cmp	r3, #0
 800871e:	bf0c      	ite	eq
 8008720:	2301      	moveq	r3, #1
 8008722:	2300      	movne	r3, #0
 8008724:	b2db      	uxtb	r3, r3
 8008726:	461a      	mov	r2, r3
 8008728:	79fb      	ldrb	r3, [r7, #7]
 800872a:	429a      	cmp	r2, r3
 800872c:	d116      	bne.n	800875c <I2C_WaitOnFlagUntilTimeout+0xa4>
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	2200      	movs	r2, #0
 8008732:	631a      	str	r2, [r3, #48]	@ 0x30
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	2220      	movs	r2, #32
 8008738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	2200      	movs	r2, #0
 8008740:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008748:	f043 0220 	orr.w	r2, r3, #32
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	641a      	str	r2, [r3, #64]	@ 0x40
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	2200      	movs	r2, #0
 8008754:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8008758:	2301      	movs	r3, #1
 800875a:	e023      	b.n	80087a4 <I2C_WaitOnFlagUntilTimeout+0xec>
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	0c1b      	lsrs	r3, r3, #16
 8008760:	b2db      	uxtb	r3, r3
 8008762:	2b01      	cmp	r3, #1
 8008764:	d10d      	bne.n	8008782 <I2C_WaitOnFlagUntilTimeout+0xca>
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	695b      	ldr	r3, [r3, #20]
 800876c:	43da      	mvns	r2, r3
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	4013      	ands	r3, r2
 8008772:	b29b      	uxth	r3, r3
 8008774:	2b00      	cmp	r3, #0
 8008776:	bf0c      	ite	eq
 8008778:	2301      	moveq	r3, #1
 800877a:	2300      	movne	r3, #0
 800877c:	b2db      	uxtb	r3, r3
 800877e:	461a      	mov	r2, r3
 8008780:	e00c      	b.n	800879c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	699b      	ldr	r3, [r3, #24]
 8008788:	43da      	mvns	r2, r3
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	4013      	ands	r3, r2
 800878e:	b29b      	uxth	r3, r3
 8008790:	2b00      	cmp	r3, #0
 8008792:	bf0c      	ite	eq
 8008794:	2301      	moveq	r3, #1
 8008796:	2300      	movne	r3, #0
 8008798:	b2db      	uxtb	r3, r3
 800879a:	461a      	mov	r2, r3
 800879c:	79fb      	ldrb	r3, [r7, #7]
 800879e:	429a      	cmp	r2, r3
 80087a0:	d093      	beq.n	80086ca <I2C_WaitOnFlagUntilTimeout+0x12>
 80087a2:	2300      	movs	r3, #0
 80087a4:	4618      	mov	r0, r3
 80087a6:	3710      	adds	r7, #16
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd80      	pop	{r7, pc}

080087ac <I2C_WaitOnMasterAddressFlagUntilTimeout>:
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b084      	sub	sp, #16
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	60f8      	str	r0, [r7, #12]
 80087b4:	60b9      	str	r1, [r7, #8]
 80087b6:	607a      	str	r2, [r7, #4]
 80087b8:	603b      	str	r3, [r7, #0]
 80087ba:	e071      	b.n	80088a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	695b      	ldr	r3, [r3, #20]
 80087c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80087c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80087ca:	d123      	bne.n	8008814 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	681a      	ldr	r2, [r3, #0]
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80087da:	601a      	str	r2, [r3, #0]
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80087e4:	615a      	str	r2, [r3, #20]
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	2200      	movs	r2, #0
 80087ea:	631a      	str	r2, [r3, #48]	@ 0x30
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	2220      	movs	r2, #32
 80087f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	2200      	movs	r2, #0
 80087f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008800:	f043 0204 	orr.w	r2, r3, #4
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	641a      	str	r2, [r3, #64]	@ 0x40
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2200      	movs	r2, #0
 800880c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8008810:	2301      	movs	r3, #1
 8008812:	e067      	b.n	80088e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800881a:	d041      	beq.n	80088a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
 800881c:	f7fe f840 	bl	80068a0 <HAL_GetTick>
 8008820:	4602      	mov	r2, r0
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	1ad3      	subs	r3, r2, r3
 8008826:	687a      	ldr	r2, [r7, #4]
 8008828:	429a      	cmp	r2, r3
 800882a:	d302      	bcc.n	8008832 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d136      	bne.n	80088a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	0c1b      	lsrs	r3, r3, #16
 8008836:	b2db      	uxtb	r3, r3
 8008838:	2b01      	cmp	r3, #1
 800883a:	d10c      	bne.n	8008856 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	695b      	ldr	r3, [r3, #20]
 8008842:	43da      	mvns	r2, r3
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	4013      	ands	r3, r2
 8008848:	b29b      	uxth	r3, r3
 800884a:	2b00      	cmp	r3, #0
 800884c:	bf14      	ite	ne
 800884e:	2301      	movne	r3, #1
 8008850:	2300      	moveq	r3, #0
 8008852:	b2db      	uxtb	r3, r3
 8008854:	e00b      	b.n	800886e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	699b      	ldr	r3, [r3, #24]
 800885c:	43da      	mvns	r2, r3
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	4013      	ands	r3, r2
 8008862:	b29b      	uxth	r3, r3
 8008864:	2b00      	cmp	r3, #0
 8008866:	bf14      	ite	ne
 8008868:	2301      	movne	r3, #1
 800886a:	2300      	moveq	r3, #0
 800886c:	b2db      	uxtb	r3, r3
 800886e:	2b00      	cmp	r3, #0
 8008870:	d016      	beq.n	80088a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	2200      	movs	r2, #0
 8008876:	631a      	str	r2, [r3, #48]	@ 0x30
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	2220      	movs	r2, #32
 800887c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	2200      	movs	r2, #0
 8008884:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800888c:	f043 0220 	orr.w	r2, r3, #32
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	641a      	str	r2, [r3, #64]	@ 0x40
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	2200      	movs	r2, #0
 8008898:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800889c:	2301      	movs	r3, #1
 800889e:	e021      	b.n	80088e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	0c1b      	lsrs	r3, r3, #16
 80088a4:	b2db      	uxtb	r3, r3
 80088a6:	2b01      	cmp	r3, #1
 80088a8:	d10c      	bne.n	80088c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	695b      	ldr	r3, [r3, #20]
 80088b0:	43da      	mvns	r2, r3
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	4013      	ands	r3, r2
 80088b6:	b29b      	uxth	r3, r3
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	bf14      	ite	ne
 80088bc:	2301      	movne	r3, #1
 80088be:	2300      	moveq	r3, #0
 80088c0:	b2db      	uxtb	r3, r3
 80088c2:	e00b      	b.n	80088dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	699b      	ldr	r3, [r3, #24]
 80088ca:	43da      	mvns	r2, r3
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	4013      	ands	r3, r2
 80088d0:	b29b      	uxth	r3, r3
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	bf14      	ite	ne
 80088d6:	2301      	movne	r3, #1
 80088d8:	2300      	moveq	r3, #0
 80088da:	b2db      	uxtb	r3, r3
 80088dc:	2b00      	cmp	r3, #0
 80088de:	f47f af6d 	bne.w	80087bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 80088e2:	2300      	movs	r3, #0
 80088e4:	4618      	mov	r0, r3
 80088e6:	3710      	adds	r7, #16
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}

080088ec <I2C_WaitOnTXEFlagUntilTimeout>:
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b084      	sub	sp, #16
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	60f8      	str	r0, [r7, #12]
 80088f4:	60b9      	str	r1, [r7, #8]
 80088f6:	607a      	str	r2, [r7, #4]
 80088f8:	e034      	b.n	8008964 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
 80088fa:	68f8      	ldr	r0, [r7, #12]
 80088fc:	f000 f886 	bl	8008a0c <I2C_IsAcknowledgeFailed>
 8008900:	4603      	mov	r3, r0
 8008902:	2b00      	cmp	r3, #0
 8008904:	d001      	beq.n	800890a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
 8008906:	2301      	movs	r3, #1
 8008908:	e034      	b.n	8008974 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008910:	d028      	beq.n	8008964 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
 8008912:	f7fd ffc5 	bl	80068a0 <HAL_GetTick>
 8008916:	4602      	mov	r2, r0
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	1ad3      	subs	r3, r2, r3
 800891c:	68ba      	ldr	r2, [r7, #8]
 800891e:	429a      	cmp	r2, r3
 8008920:	d302      	bcc.n	8008928 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d11d      	bne.n	8008964 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	695b      	ldr	r3, [r3, #20]
 800892e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008932:	2b80      	cmp	r3, #128	@ 0x80
 8008934:	d016      	beq.n	8008964 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	2200      	movs	r2, #0
 800893a:	631a      	str	r2, [r3, #48]	@ 0x30
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	2220      	movs	r2, #32
 8008940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	2200      	movs	r2, #0
 8008948:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008950:	f043 0220 	orr.w	r2, r3, #32
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	641a      	str	r2, [r3, #64]	@ 0x40
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	2200      	movs	r2, #0
 800895c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8008960:	2301      	movs	r3, #1
 8008962:	e007      	b.n	8008974 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	695b      	ldr	r3, [r3, #20]
 800896a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800896e:	2b80      	cmp	r3, #128	@ 0x80
 8008970:	d1c3      	bne.n	80088fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
 8008972:	2300      	movs	r3, #0
 8008974:	4618      	mov	r0, r3
 8008976:	3710      	adds	r7, #16
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}

0800897c <I2C_WaitOnBTFFlagUntilTimeout>:
 800897c:	b580      	push	{r7, lr}
 800897e:	b084      	sub	sp, #16
 8008980:	af00      	add	r7, sp, #0
 8008982:	60f8      	str	r0, [r7, #12]
 8008984:	60b9      	str	r1, [r7, #8]
 8008986:	607a      	str	r2, [r7, #4]
 8008988:	e034      	b.n	80089f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
 800898a:	68f8      	ldr	r0, [r7, #12]
 800898c:	f000 f83e 	bl	8008a0c <I2C_IsAcknowledgeFailed>
 8008990:	4603      	mov	r3, r0
 8008992:	2b00      	cmp	r3, #0
 8008994:	d001      	beq.n	800899a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
 8008996:	2301      	movs	r3, #1
 8008998:	e034      	b.n	8008a04 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089a0:	d028      	beq.n	80089f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
 80089a2:	f7fd ff7d 	bl	80068a0 <HAL_GetTick>
 80089a6:	4602      	mov	r2, r0
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	1ad3      	subs	r3, r2, r3
 80089ac:	68ba      	ldr	r2, [r7, #8]
 80089ae:	429a      	cmp	r2, r3
 80089b0:	d302      	bcc.n	80089b8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d11d      	bne.n	80089f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	695b      	ldr	r3, [r3, #20]
 80089be:	f003 0304 	and.w	r3, r3, #4
 80089c2:	2b04      	cmp	r3, #4
 80089c4:	d016      	beq.n	80089f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	2200      	movs	r2, #0
 80089ca:	631a      	str	r2, [r3, #48]	@ 0x30
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	2220      	movs	r2, #32
 80089d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	2200      	movs	r2, #0
 80089d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089e0:	f043 0220 	orr.w	r2, r3, #32
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	641a      	str	r2, [r3, #64]	@ 0x40
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	2200      	movs	r2, #0
 80089ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80089f0:	2301      	movs	r3, #1
 80089f2:	e007      	b.n	8008a04 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	695b      	ldr	r3, [r3, #20]
 80089fa:	f003 0304 	and.w	r3, r3, #4
 80089fe:	2b04      	cmp	r3, #4
 8008a00:	d1c3      	bne.n	800898a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
 8008a02:	2300      	movs	r3, #0
 8008a04:	4618      	mov	r0, r3
 8008a06:	3710      	adds	r7, #16
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}

08008a0c <I2C_IsAcknowledgeFailed>:
 8008a0c:	b480      	push	{r7}
 8008a0e:	b083      	sub	sp, #12
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	695b      	ldr	r3, [r3, #20]
 8008a1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008a1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a22:	d11b      	bne.n	8008a5c <I2C_IsAcknowledgeFailed+0x50>
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008a2c:	615a      	str	r2, [r3, #20]
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2200      	movs	r2, #0
 8008a32:	631a      	str	r2, [r3, #48]	@ 0x30
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2220      	movs	r2, #32
 8008a38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a48:	f043 0204 	orr.w	r2, r3, #4
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	641a      	str	r2, [r3, #64]	@ 0x40
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2200      	movs	r2, #0
 8008a54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8008a58:	2301      	movs	r3, #1
 8008a5a:	e000      	b.n	8008a5e <I2C_IsAcknowledgeFailed+0x52>
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	4618      	mov	r0, r3
 8008a60:	370c      	adds	r7, #12
 8008a62:	46bd      	mov	sp, r7
 8008a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a68:	4770      	bx	lr
	...

08008a6c <HAL_RCC_OscConfig>:
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b086      	sub	sp, #24
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d101      	bne.n	8008a7e <HAL_RCC_OscConfig+0x12>
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	e267      	b.n	8008f4e <HAL_RCC_OscConfig+0x4e2>
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f003 0301 	and.w	r3, r3, #1
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d075      	beq.n	8008b76 <HAL_RCC_OscConfig+0x10a>
 8008a8a:	4b88      	ldr	r3, [pc, #544]	@ (8008cac <HAL_RCC_OscConfig+0x240>)
 8008a8c:	689b      	ldr	r3, [r3, #8]
 8008a8e:	f003 030c 	and.w	r3, r3, #12
 8008a92:	2b04      	cmp	r3, #4
 8008a94:	d00c      	beq.n	8008ab0 <HAL_RCC_OscConfig+0x44>
 8008a96:	4b85      	ldr	r3, [pc, #532]	@ (8008cac <HAL_RCC_OscConfig+0x240>)
 8008a98:	689b      	ldr	r3, [r3, #8]
 8008a9a:	f003 030c 	and.w	r3, r3, #12
 8008a9e:	2b08      	cmp	r3, #8
 8008aa0:	d112      	bne.n	8008ac8 <HAL_RCC_OscConfig+0x5c>
 8008aa2:	4b82      	ldr	r3, [pc, #520]	@ (8008cac <HAL_RCC_OscConfig+0x240>)
 8008aa4:	685b      	ldr	r3, [r3, #4]
 8008aa6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008aaa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008aae:	d10b      	bne.n	8008ac8 <HAL_RCC_OscConfig+0x5c>
 8008ab0:	4b7e      	ldr	r3, [pc, #504]	@ (8008cac <HAL_RCC_OscConfig+0x240>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d05b      	beq.n	8008b74 <HAL_RCC_OscConfig+0x108>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	685b      	ldr	r3, [r3, #4]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d157      	bne.n	8008b74 <HAL_RCC_OscConfig+0x108>
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	e242      	b.n	8008f4e <HAL_RCC_OscConfig+0x4e2>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	685b      	ldr	r3, [r3, #4]
 8008acc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ad0:	d106      	bne.n	8008ae0 <HAL_RCC_OscConfig+0x74>
 8008ad2:	4b76      	ldr	r3, [pc, #472]	@ (8008cac <HAL_RCC_OscConfig+0x240>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	4a75      	ldr	r2, [pc, #468]	@ (8008cac <HAL_RCC_OscConfig+0x240>)
 8008ad8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008adc:	6013      	str	r3, [r2, #0]
 8008ade:	e01d      	b.n	8008b1c <HAL_RCC_OscConfig+0xb0>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	685b      	ldr	r3, [r3, #4]
 8008ae4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008ae8:	d10c      	bne.n	8008b04 <HAL_RCC_OscConfig+0x98>
 8008aea:	4b70      	ldr	r3, [pc, #448]	@ (8008cac <HAL_RCC_OscConfig+0x240>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	4a6f      	ldr	r2, [pc, #444]	@ (8008cac <HAL_RCC_OscConfig+0x240>)
 8008af0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008af4:	6013      	str	r3, [r2, #0]
 8008af6:	4b6d      	ldr	r3, [pc, #436]	@ (8008cac <HAL_RCC_OscConfig+0x240>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	4a6c      	ldr	r2, [pc, #432]	@ (8008cac <HAL_RCC_OscConfig+0x240>)
 8008afc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008b00:	6013      	str	r3, [r2, #0]
 8008b02:	e00b      	b.n	8008b1c <HAL_RCC_OscConfig+0xb0>
 8008b04:	4b69      	ldr	r3, [pc, #420]	@ (8008cac <HAL_RCC_OscConfig+0x240>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4a68      	ldr	r2, [pc, #416]	@ (8008cac <HAL_RCC_OscConfig+0x240>)
 8008b0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008b0e:	6013      	str	r3, [r2, #0]
 8008b10:	4b66      	ldr	r3, [pc, #408]	@ (8008cac <HAL_RCC_OscConfig+0x240>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	4a65      	ldr	r2, [pc, #404]	@ (8008cac <HAL_RCC_OscConfig+0x240>)
 8008b16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008b1a:	6013      	str	r3, [r2, #0]
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	685b      	ldr	r3, [r3, #4]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d013      	beq.n	8008b4c <HAL_RCC_OscConfig+0xe0>
 8008b24:	f7fd febc 	bl	80068a0 <HAL_GetTick>
 8008b28:	6138      	str	r0, [r7, #16]
 8008b2a:	e008      	b.n	8008b3e <HAL_RCC_OscConfig+0xd2>
 8008b2c:	f7fd feb8 	bl	80068a0 <HAL_GetTick>
 8008b30:	4602      	mov	r2, r0
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	1ad3      	subs	r3, r2, r3
 8008b36:	2b64      	cmp	r3, #100	@ 0x64
 8008b38:	d901      	bls.n	8008b3e <HAL_RCC_OscConfig+0xd2>
 8008b3a:	2303      	movs	r3, #3
 8008b3c:	e207      	b.n	8008f4e <HAL_RCC_OscConfig+0x4e2>
 8008b3e:	4b5b      	ldr	r3, [pc, #364]	@ (8008cac <HAL_RCC_OscConfig+0x240>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d0f0      	beq.n	8008b2c <HAL_RCC_OscConfig+0xc0>
 8008b4a:	e014      	b.n	8008b76 <HAL_RCC_OscConfig+0x10a>
 8008b4c:	f7fd fea8 	bl	80068a0 <HAL_GetTick>
 8008b50:	6138      	str	r0, [r7, #16]
 8008b52:	e008      	b.n	8008b66 <HAL_RCC_OscConfig+0xfa>
 8008b54:	f7fd fea4 	bl	80068a0 <HAL_GetTick>
 8008b58:	4602      	mov	r2, r0
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	1ad3      	subs	r3, r2, r3
 8008b5e:	2b64      	cmp	r3, #100	@ 0x64
 8008b60:	d901      	bls.n	8008b66 <HAL_RCC_OscConfig+0xfa>
 8008b62:	2303      	movs	r3, #3
 8008b64:	e1f3      	b.n	8008f4e <HAL_RCC_OscConfig+0x4e2>
 8008b66:	4b51      	ldr	r3, [pc, #324]	@ (8008cac <HAL_RCC_OscConfig+0x240>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d1f0      	bne.n	8008b54 <HAL_RCC_OscConfig+0xe8>
 8008b72:	e000      	b.n	8008b76 <HAL_RCC_OscConfig+0x10a>
 8008b74:	bf00      	nop
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f003 0302 	and.w	r3, r3, #2
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d063      	beq.n	8008c4a <HAL_RCC_OscConfig+0x1de>
 8008b82:	4b4a      	ldr	r3, [pc, #296]	@ (8008cac <HAL_RCC_OscConfig+0x240>)
 8008b84:	689b      	ldr	r3, [r3, #8]
 8008b86:	f003 030c 	and.w	r3, r3, #12
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d00b      	beq.n	8008ba6 <HAL_RCC_OscConfig+0x13a>
 8008b8e:	4b47      	ldr	r3, [pc, #284]	@ (8008cac <HAL_RCC_OscConfig+0x240>)
 8008b90:	689b      	ldr	r3, [r3, #8]
 8008b92:	f003 030c 	and.w	r3, r3, #12
 8008b96:	2b08      	cmp	r3, #8
 8008b98:	d11c      	bne.n	8008bd4 <HAL_RCC_OscConfig+0x168>
 8008b9a:	4b44      	ldr	r3, [pc, #272]	@ (8008cac <HAL_RCC_OscConfig+0x240>)
 8008b9c:	685b      	ldr	r3, [r3, #4]
 8008b9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d116      	bne.n	8008bd4 <HAL_RCC_OscConfig+0x168>
 8008ba6:	4b41      	ldr	r3, [pc, #260]	@ (8008cac <HAL_RCC_OscConfig+0x240>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f003 0302 	and.w	r3, r3, #2
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d005      	beq.n	8008bbe <HAL_RCC_OscConfig+0x152>
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	68db      	ldr	r3, [r3, #12]
 8008bb6:	2b01      	cmp	r3, #1
 8008bb8:	d001      	beq.n	8008bbe <HAL_RCC_OscConfig+0x152>
 8008bba:	2301      	movs	r3, #1
 8008bbc:	e1c7      	b.n	8008f4e <HAL_RCC_OscConfig+0x4e2>
 8008bbe:	4b3b      	ldr	r3, [pc, #236]	@ (8008cac <HAL_RCC_OscConfig+0x240>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	691b      	ldr	r3, [r3, #16]
 8008bca:	00db      	lsls	r3, r3, #3
 8008bcc:	4937      	ldr	r1, [pc, #220]	@ (8008cac <HAL_RCC_OscConfig+0x240>)
 8008bce:	4313      	orrs	r3, r2
 8008bd0:	600b      	str	r3, [r1, #0]
 8008bd2:	e03a      	b.n	8008c4a <HAL_RCC_OscConfig+0x1de>
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	68db      	ldr	r3, [r3, #12]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d020      	beq.n	8008c1e <HAL_RCC_OscConfig+0x1b2>
 8008bdc:	4b34      	ldr	r3, [pc, #208]	@ (8008cb0 <HAL_RCC_OscConfig+0x244>)
 8008bde:	2201      	movs	r2, #1
 8008be0:	601a      	str	r2, [r3, #0]
 8008be2:	f7fd fe5d 	bl	80068a0 <HAL_GetTick>
 8008be6:	6138      	str	r0, [r7, #16]
 8008be8:	e008      	b.n	8008bfc <HAL_RCC_OscConfig+0x190>
 8008bea:	f7fd fe59 	bl	80068a0 <HAL_GetTick>
 8008bee:	4602      	mov	r2, r0
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	1ad3      	subs	r3, r2, r3
 8008bf4:	2b02      	cmp	r3, #2
 8008bf6:	d901      	bls.n	8008bfc <HAL_RCC_OscConfig+0x190>
 8008bf8:	2303      	movs	r3, #3
 8008bfa:	e1a8      	b.n	8008f4e <HAL_RCC_OscConfig+0x4e2>
 8008bfc:	4b2b      	ldr	r3, [pc, #172]	@ (8008cac <HAL_RCC_OscConfig+0x240>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f003 0302 	and.w	r3, r3, #2
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d0f0      	beq.n	8008bea <HAL_RCC_OscConfig+0x17e>
 8008c08:	4b28      	ldr	r3, [pc, #160]	@ (8008cac <HAL_RCC_OscConfig+0x240>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	691b      	ldr	r3, [r3, #16]
 8008c14:	00db      	lsls	r3, r3, #3
 8008c16:	4925      	ldr	r1, [pc, #148]	@ (8008cac <HAL_RCC_OscConfig+0x240>)
 8008c18:	4313      	orrs	r3, r2
 8008c1a:	600b      	str	r3, [r1, #0]
 8008c1c:	e015      	b.n	8008c4a <HAL_RCC_OscConfig+0x1de>
 8008c1e:	4b24      	ldr	r3, [pc, #144]	@ (8008cb0 <HAL_RCC_OscConfig+0x244>)
 8008c20:	2200      	movs	r2, #0
 8008c22:	601a      	str	r2, [r3, #0]
 8008c24:	f7fd fe3c 	bl	80068a0 <HAL_GetTick>
 8008c28:	6138      	str	r0, [r7, #16]
 8008c2a:	e008      	b.n	8008c3e <HAL_RCC_OscConfig+0x1d2>
 8008c2c:	f7fd fe38 	bl	80068a0 <HAL_GetTick>
 8008c30:	4602      	mov	r2, r0
 8008c32:	693b      	ldr	r3, [r7, #16]
 8008c34:	1ad3      	subs	r3, r2, r3
 8008c36:	2b02      	cmp	r3, #2
 8008c38:	d901      	bls.n	8008c3e <HAL_RCC_OscConfig+0x1d2>
 8008c3a:	2303      	movs	r3, #3
 8008c3c:	e187      	b.n	8008f4e <HAL_RCC_OscConfig+0x4e2>
 8008c3e:	4b1b      	ldr	r3, [pc, #108]	@ (8008cac <HAL_RCC_OscConfig+0x240>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f003 0302 	and.w	r3, r3, #2
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d1f0      	bne.n	8008c2c <HAL_RCC_OscConfig+0x1c0>
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f003 0308 	and.w	r3, r3, #8
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d036      	beq.n	8008cc4 <HAL_RCC_OscConfig+0x258>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	695b      	ldr	r3, [r3, #20]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d016      	beq.n	8008c8c <HAL_RCC_OscConfig+0x220>
 8008c5e:	4b15      	ldr	r3, [pc, #84]	@ (8008cb4 <HAL_RCC_OscConfig+0x248>)
 8008c60:	2201      	movs	r2, #1
 8008c62:	601a      	str	r2, [r3, #0]
 8008c64:	f7fd fe1c 	bl	80068a0 <HAL_GetTick>
 8008c68:	6138      	str	r0, [r7, #16]
 8008c6a:	e008      	b.n	8008c7e <HAL_RCC_OscConfig+0x212>
 8008c6c:	f7fd fe18 	bl	80068a0 <HAL_GetTick>
 8008c70:	4602      	mov	r2, r0
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	1ad3      	subs	r3, r2, r3
 8008c76:	2b02      	cmp	r3, #2
 8008c78:	d901      	bls.n	8008c7e <HAL_RCC_OscConfig+0x212>
 8008c7a:	2303      	movs	r3, #3
 8008c7c:	e167      	b.n	8008f4e <HAL_RCC_OscConfig+0x4e2>
 8008c7e:	4b0b      	ldr	r3, [pc, #44]	@ (8008cac <HAL_RCC_OscConfig+0x240>)
 8008c80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c82:	f003 0302 	and.w	r3, r3, #2
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d0f0      	beq.n	8008c6c <HAL_RCC_OscConfig+0x200>
 8008c8a:	e01b      	b.n	8008cc4 <HAL_RCC_OscConfig+0x258>
 8008c8c:	4b09      	ldr	r3, [pc, #36]	@ (8008cb4 <HAL_RCC_OscConfig+0x248>)
 8008c8e:	2200      	movs	r2, #0
 8008c90:	601a      	str	r2, [r3, #0]
 8008c92:	f7fd fe05 	bl	80068a0 <HAL_GetTick>
 8008c96:	6138      	str	r0, [r7, #16]
 8008c98:	e00e      	b.n	8008cb8 <HAL_RCC_OscConfig+0x24c>
 8008c9a:	f7fd fe01 	bl	80068a0 <HAL_GetTick>
 8008c9e:	4602      	mov	r2, r0
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	1ad3      	subs	r3, r2, r3
 8008ca4:	2b02      	cmp	r3, #2
 8008ca6:	d907      	bls.n	8008cb8 <HAL_RCC_OscConfig+0x24c>
 8008ca8:	2303      	movs	r3, #3
 8008caa:	e150      	b.n	8008f4e <HAL_RCC_OscConfig+0x4e2>
 8008cac:	40023800 	.word	0x40023800
 8008cb0:	42470000 	.word	0x42470000
 8008cb4:	42470e80 	.word	0x42470e80
 8008cb8:	4b88      	ldr	r3, [pc, #544]	@ (8008edc <HAL_RCC_OscConfig+0x470>)
 8008cba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008cbc:	f003 0302 	and.w	r3, r3, #2
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d1ea      	bne.n	8008c9a <HAL_RCC_OscConfig+0x22e>
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f003 0304 	and.w	r3, r3, #4
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	f000 8097 	beq.w	8008e00 <HAL_RCC_OscConfig+0x394>
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	75fb      	strb	r3, [r7, #23]
 8008cd6:	4b81      	ldr	r3, [pc, #516]	@ (8008edc <HAL_RCC_OscConfig+0x470>)
 8008cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d10f      	bne.n	8008d02 <HAL_RCC_OscConfig+0x296>
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	60bb      	str	r3, [r7, #8]
 8008ce6:	4b7d      	ldr	r3, [pc, #500]	@ (8008edc <HAL_RCC_OscConfig+0x470>)
 8008ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cea:	4a7c      	ldr	r2, [pc, #496]	@ (8008edc <HAL_RCC_OscConfig+0x470>)
 8008cec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008cf0:	6413      	str	r3, [r2, #64]	@ 0x40
 8008cf2:	4b7a      	ldr	r3, [pc, #488]	@ (8008edc <HAL_RCC_OscConfig+0x470>)
 8008cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008cfa:	60bb      	str	r3, [r7, #8]
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	2301      	movs	r3, #1
 8008d00:	75fb      	strb	r3, [r7, #23]
 8008d02:	4b77      	ldr	r3, [pc, #476]	@ (8008ee0 <HAL_RCC_OscConfig+0x474>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d118      	bne.n	8008d40 <HAL_RCC_OscConfig+0x2d4>
 8008d0e:	4b74      	ldr	r3, [pc, #464]	@ (8008ee0 <HAL_RCC_OscConfig+0x474>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	4a73      	ldr	r2, [pc, #460]	@ (8008ee0 <HAL_RCC_OscConfig+0x474>)
 8008d14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008d18:	6013      	str	r3, [r2, #0]
 8008d1a:	f7fd fdc1 	bl	80068a0 <HAL_GetTick>
 8008d1e:	6138      	str	r0, [r7, #16]
 8008d20:	e008      	b.n	8008d34 <HAL_RCC_OscConfig+0x2c8>
 8008d22:	f7fd fdbd 	bl	80068a0 <HAL_GetTick>
 8008d26:	4602      	mov	r2, r0
 8008d28:	693b      	ldr	r3, [r7, #16]
 8008d2a:	1ad3      	subs	r3, r2, r3
 8008d2c:	2b02      	cmp	r3, #2
 8008d2e:	d901      	bls.n	8008d34 <HAL_RCC_OscConfig+0x2c8>
 8008d30:	2303      	movs	r3, #3
 8008d32:	e10c      	b.n	8008f4e <HAL_RCC_OscConfig+0x4e2>
 8008d34:	4b6a      	ldr	r3, [pc, #424]	@ (8008ee0 <HAL_RCC_OscConfig+0x474>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d0f0      	beq.n	8008d22 <HAL_RCC_OscConfig+0x2b6>
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	689b      	ldr	r3, [r3, #8]
 8008d44:	2b01      	cmp	r3, #1
 8008d46:	d106      	bne.n	8008d56 <HAL_RCC_OscConfig+0x2ea>
 8008d48:	4b64      	ldr	r3, [pc, #400]	@ (8008edc <HAL_RCC_OscConfig+0x470>)
 8008d4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d4c:	4a63      	ldr	r2, [pc, #396]	@ (8008edc <HAL_RCC_OscConfig+0x470>)
 8008d4e:	f043 0301 	orr.w	r3, r3, #1
 8008d52:	6713      	str	r3, [r2, #112]	@ 0x70
 8008d54:	e01c      	b.n	8008d90 <HAL_RCC_OscConfig+0x324>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	689b      	ldr	r3, [r3, #8]
 8008d5a:	2b05      	cmp	r3, #5
 8008d5c:	d10c      	bne.n	8008d78 <HAL_RCC_OscConfig+0x30c>
 8008d5e:	4b5f      	ldr	r3, [pc, #380]	@ (8008edc <HAL_RCC_OscConfig+0x470>)
 8008d60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d62:	4a5e      	ldr	r2, [pc, #376]	@ (8008edc <HAL_RCC_OscConfig+0x470>)
 8008d64:	f043 0304 	orr.w	r3, r3, #4
 8008d68:	6713      	str	r3, [r2, #112]	@ 0x70
 8008d6a:	4b5c      	ldr	r3, [pc, #368]	@ (8008edc <HAL_RCC_OscConfig+0x470>)
 8008d6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d6e:	4a5b      	ldr	r2, [pc, #364]	@ (8008edc <HAL_RCC_OscConfig+0x470>)
 8008d70:	f043 0301 	orr.w	r3, r3, #1
 8008d74:	6713      	str	r3, [r2, #112]	@ 0x70
 8008d76:	e00b      	b.n	8008d90 <HAL_RCC_OscConfig+0x324>
 8008d78:	4b58      	ldr	r3, [pc, #352]	@ (8008edc <HAL_RCC_OscConfig+0x470>)
 8008d7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d7c:	4a57      	ldr	r2, [pc, #348]	@ (8008edc <HAL_RCC_OscConfig+0x470>)
 8008d7e:	f023 0301 	bic.w	r3, r3, #1
 8008d82:	6713      	str	r3, [r2, #112]	@ 0x70
 8008d84:	4b55      	ldr	r3, [pc, #340]	@ (8008edc <HAL_RCC_OscConfig+0x470>)
 8008d86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d88:	4a54      	ldr	r2, [pc, #336]	@ (8008edc <HAL_RCC_OscConfig+0x470>)
 8008d8a:	f023 0304 	bic.w	r3, r3, #4
 8008d8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	689b      	ldr	r3, [r3, #8]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d015      	beq.n	8008dc4 <HAL_RCC_OscConfig+0x358>
 8008d98:	f7fd fd82 	bl	80068a0 <HAL_GetTick>
 8008d9c:	6138      	str	r0, [r7, #16]
 8008d9e:	e00a      	b.n	8008db6 <HAL_RCC_OscConfig+0x34a>
 8008da0:	f7fd fd7e 	bl	80068a0 <HAL_GetTick>
 8008da4:	4602      	mov	r2, r0
 8008da6:	693b      	ldr	r3, [r7, #16]
 8008da8:	1ad3      	subs	r3, r2, r3
 8008daa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d901      	bls.n	8008db6 <HAL_RCC_OscConfig+0x34a>
 8008db2:	2303      	movs	r3, #3
 8008db4:	e0cb      	b.n	8008f4e <HAL_RCC_OscConfig+0x4e2>
 8008db6:	4b49      	ldr	r3, [pc, #292]	@ (8008edc <HAL_RCC_OscConfig+0x470>)
 8008db8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008dba:	f003 0302 	and.w	r3, r3, #2
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d0ee      	beq.n	8008da0 <HAL_RCC_OscConfig+0x334>
 8008dc2:	e014      	b.n	8008dee <HAL_RCC_OscConfig+0x382>
 8008dc4:	f7fd fd6c 	bl	80068a0 <HAL_GetTick>
 8008dc8:	6138      	str	r0, [r7, #16]
 8008dca:	e00a      	b.n	8008de2 <HAL_RCC_OscConfig+0x376>
 8008dcc:	f7fd fd68 	bl	80068a0 <HAL_GetTick>
 8008dd0:	4602      	mov	r2, r0
 8008dd2:	693b      	ldr	r3, [r7, #16]
 8008dd4:	1ad3      	subs	r3, r2, r3
 8008dd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d901      	bls.n	8008de2 <HAL_RCC_OscConfig+0x376>
 8008dde:	2303      	movs	r3, #3
 8008de0:	e0b5      	b.n	8008f4e <HAL_RCC_OscConfig+0x4e2>
 8008de2:	4b3e      	ldr	r3, [pc, #248]	@ (8008edc <HAL_RCC_OscConfig+0x470>)
 8008de4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008de6:	f003 0302 	and.w	r3, r3, #2
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d1ee      	bne.n	8008dcc <HAL_RCC_OscConfig+0x360>
 8008dee:	7dfb      	ldrb	r3, [r7, #23]
 8008df0:	2b01      	cmp	r3, #1
 8008df2:	d105      	bne.n	8008e00 <HAL_RCC_OscConfig+0x394>
 8008df4:	4b39      	ldr	r3, [pc, #228]	@ (8008edc <HAL_RCC_OscConfig+0x470>)
 8008df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008df8:	4a38      	ldr	r2, [pc, #224]	@ (8008edc <HAL_RCC_OscConfig+0x470>)
 8008dfa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008dfe:	6413      	str	r3, [r2, #64]	@ 0x40
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	699b      	ldr	r3, [r3, #24]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	f000 80a1 	beq.w	8008f4c <HAL_RCC_OscConfig+0x4e0>
 8008e0a:	4b34      	ldr	r3, [pc, #208]	@ (8008edc <HAL_RCC_OscConfig+0x470>)
 8008e0c:	689b      	ldr	r3, [r3, #8]
 8008e0e:	f003 030c 	and.w	r3, r3, #12
 8008e12:	2b08      	cmp	r3, #8
 8008e14:	d05c      	beq.n	8008ed0 <HAL_RCC_OscConfig+0x464>
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	699b      	ldr	r3, [r3, #24]
 8008e1a:	2b02      	cmp	r3, #2
 8008e1c:	d141      	bne.n	8008ea2 <HAL_RCC_OscConfig+0x436>
 8008e1e:	4b31      	ldr	r3, [pc, #196]	@ (8008ee4 <HAL_RCC_OscConfig+0x478>)
 8008e20:	2200      	movs	r2, #0
 8008e22:	601a      	str	r2, [r3, #0]
 8008e24:	f7fd fd3c 	bl	80068a0 <HAL_GetTick>
 8008e28:	6138      	str	r0, [r7, #16]
 8008e2a:	e008      	b.n	8008e3e <HAL_RCC_OscConfig+0x3d2>
 8008e2c:	f7fd fd38 	bl	80068a0 <HAL_GetTick>
 8008e30:	4602      	mov	r2, r0
 8008e32:	693b      	ldr	r3, [r7, #16]
 8008e34:	1ad3      	subs	r3, r2, r3
 8008e36:	2b02      	cmp	r3, #2
 8008e38:	d901      	bls.n	8008e3e <HAL_RCC_OscConfig+0x3d2>
 8008e3a:	2303      	movs	r3, #3
 8008e3c:	e087      	b.n	8008f4e <HAL_RCC_OscConfig+0x4e2>
 8008e3e:	4b27      	ldr	r3, [pc, #156]	@ (8008edc <HAL_RCC_OscConfig+0x470>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d1f0      	bne.n	8008e2c <HAL_RCC_OscConfig+0x3c0>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	69da      	ldr	r2, [r3, #28]
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6a1b      	ldr	r3, [r3, #32]
 8008e52:	431a      	orrs	r2, r3
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e58:	019b      	lsls	r3, r3, #6
 8008e5a:	431a      	orrs	r2, r3
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e60:	085b      	lsrs	r3, r3, #1
 8008e62:	3b01      	subs	r3, #1
 8008e64:	041b      	lsls	r3, r3, #16
 8008e66:	431a      	orrs	r2, r3
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e6c:	061b      	lsls	r3, r3, #24
 8008e6e:	491b      	ldr	r1, [pc, #108]	@ (8008edc <HAL_RCC_OscConfig+0x470>)
 8008e70:	4313      	orrs	r3, r2
 8008e72:	604b      	str	r3, [r1, #4]
 8008e74:	4b1b      	ldr	r3, [pc, #108]	@ (8008ee4 <HAL_RCC_OscConfig+0x478>)
 8008e76:	2201      	movs	r2, #1
 8008e78:	601a      	str	r2, [r3, #0]
 8008e7a:	f7fd fd11 	bl	80068a0 <HAL_GetTick>
 8008e7e:	6138      	str	r0, [r7, #16]
 8008e80:	e008      	b.n	8008e94 <HAL_RCC_OscConfig+0x428>
 8008e82:	f7fd fd0d 	bl	80068a0 <HAL_GetTick>
 8008e86:	4602      	mov	r2, r0
 8008e88:	693b      	ldr	r3, [r7, #16]
 8008e8a:	1ad3      	subs	r3, r2, r3
 8008e8c:	2b02      	cmp	r3, #2
 8008e8e:	d901      	bls.n	8008e94 <HAL_RCC_OscConfig+0x428>
 8008e90:	2303      	movs	r3, #3
 8008e92:	e05c      	b.n	8008f4e <HAL_RCC_OscConfig+0x4e2>
 8008e94:	4b11      	ldr	r3, [pc, #68]	@ (8008edc <HAL_RCC_OscConfig+0x470>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d0f0      	beq.n	8008e82 <HAL_RCC_OscConfig+0x416>
 8008ea0:	e054      	b.n	8008f4c <HAL_RCC_OscConfig+0x4e0>
 8008ea2:	4b10      	ldr	r3, [pc, #64]	@ (8008ee4 <HAL_RCC_OscConfig+0x478>)
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	601a      	str	r2, [r3, #0]
 8008ea8:	f7fd fcfa 	bl	80068a0 <HAL_GetTick>
 8008eac:	6138      	str	r0, [r7, #16]
 8008eae:	e008      	b.n	8008ec2 <HAL_RCC_OscConfig+0x456>
 8008eb0:	f7fd fcf6 	bl	80068a0 <HAL_GetTick>
 8008eb4:	4602      	mov	r2, r0
 8008eb6:	693b      	ldr	r3, [r7, #16]
 8008eb8:	1ad3      	subs	r3, r2, r3
 8008eba:	2b02      	cmp	r3, #2
 8008ebc:	d901      	bls.n	8008ec2 <HAL_RCC_OscConfig+0x456>
 8008ebe:	2303      	movs	r3, #3
 8008ec0:	e045      	b.n	8008f4e <HAL_RCC_OscConfig+0x4e2>
 8008ec2:	4b06      	ldr	r3, [pc, #24]	@ (8008edc <HAL_RCC_OscConfig+0x470>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d1f0      	bne.n	8008eb0 <HAL_RCC_OscConfig+0x444>
 8008ece:	e03d      	b.n	8008f4c <HAL_RCC_OscConfig+0x4e0>
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	699b      	ldr	r3, [r3, #24]
 8008ed4:	2b01      	cmp	r3, #1
 8008ed6:	d107      	bne.n	8008ee8 <HAL_RCC_OscConfig+0x47c>
 8008ed8:	2301      	movs	r3, #1
 8008eda:	e038      	b.n	8008f4e <HAL_RCC_OscConfig+0x4e2>
 8008edc:	40023800 	.word	0x40023800
 8008ee0:	40007000 	.word	0x40007000
 8008ee4:	42470060 	.word	0x42470060
 8008ee8:	4b1b      	ldr	r3, [pc, #108]	@ (8008f58 <HAL_RCC_OscConfig+0x4ec>)
 8008eea:	685b      	ldr	r3, [r3, #4]
 8008eec:	60fb      	str	r3, [r7, #12]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	699b      	ldr	r3, [r3, #24]
 8008ef2:	2b01      	cmp	r3, #1
 8008ef4:	d028      	beq.n	8008f48 <HAL_RCC_OscConfig+0x4dc>
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	69db      	ldr	r3, [r3, #28]
 8008f00:	429a      	cmp	r2, r3
 8008f02:	d121      	bne.n	8008f48 <HAL_RCC_OscConfig+0x4dc>
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6a1b      	ldr	r3, [r3, #32]
 8008f0e:	429a      	cmp	r2, r3
 8008f10:	d11a      	bne.n	8008f48 <HAL_RCC_OscConfig+0x4dc>
 8008f12:	68fa      	ldr	r2, [r7, #12]
 8008f14:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008f18:	4013      	ands	r3, r2
 8008f1a:	687a      	ldr	r2, [r7, #4]
 8008f1c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008f1e:	0192      	lsls	r2, r2, #6
 8008f20:	4293      	cmp	r3, r2
 8008f22:	d111      	bne.n	8008f48 <HAL_RCC_OscConfig+0x4dc>
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f2e:	085b      	lsrs	r3, r3, #1
 8008f30:	3b01      	subs	r3, #1
 8008f32:	041b      	lsls	r3, r3, #16
 8008f34:	429a      	cmp	r2, r3
 8008f36:	d107      	bne.n	8008f48 <HAL_RCC_OscConfig+0x4dc>
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f42:	061b      	lsls	r3, r3, #24
 8008f44:	429a      	cmp	r2, r3
 8008f46:	d001      	beq.n	8008f4c <HAL_RCC_OscConfig+0x4e0>
 8008f48:	2301      	movs	r3, #1
 8008f4a:	e000      	b.n	8008f4e <HAL_RCC_OscConfig+0x4e2>
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	4618      	mov	r0, r3
 8008f50:	3718      	adds	r7, #24
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}
 8008f56:	bf00      	nop
 8008f58:	40023800 	.word	0x40023800

08008f5c <HAL_RCC_ClockConfig>:
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b084      	sub	sp, #16
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
 8008f64:	6039      	str	r1, [r7, #0]
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d101      	bne.n	8008f70 <HAL_RCC_ClockConfig+0x14>
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	e0cc      	b.n	800910a <HAL_RCC_ClockConfig+0x1ae>
 8008f70:	4b68      	ldr	r3, [pc, #416]	@ (8009114 <HAL_RCC_ClockConfig+0x1b8>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f003 0307 	and.w	r3, r3, #7
 8008f78:	683a      	ldr	r2, [r7, #0]
 8008f7a:	429a      	cmp	r2, r3
 8008f7c:	d90c      	bls.n	8008f98 <HAL_RCC_ClockConfig+0x3c>
 8008f7e:	4b65      	ldr	r3, [pc, #404]	@ (8009114 <HAL_RCC_ClockConfig+0x1b8>)
 8008f80:	683a      	ldr	r2, [r7, #0]
 8008f82:	b2d2      	uxtb	r2, r2
 8008f84:	701a      	strb	r2, [r3, #0]
 8008f86:	4b63      	ldr	r3, [pc, #396]	@ (8009114 <HAL_RCC_ClockConfig+0x1b8>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f003 0307 	and.w	r3, r3, #7
 8008f8e:	683a      	ldr	r2, [r7, #0]
 8008f90:	429a      	cmp	r2, r3
 8008f92:	d001      	beq.n	8008f98 <HAL_RCC_ClockConfig+0x3c>
 8008f94:	2301      	movs	r3, #1
 8008f96:	e0b8      	b.n	800910a <HAL_RCC_ClockConfig+0x1ae>
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f003 0302 	and.w	r3, r3, #2
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d020      	beq.n	8008fe6 <HAL_RCC_ClockConfig+0x8a>
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f003 0304 	and.w	r3, r3, #4
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d005      	beq.n	8008fbc <HAL_RCC_ClockConfig+0x60>
 8008fb0:	4b59      	ldr	r3, [pc, #356]	@ (8009118 <HAL_RCC_ClockConfig+0x1bc>)
 8008fb2:	689b      	ldr	r3, [r3, #8]
 8008fb4:	4a58      	ldr	r2, [pc, #352]	@ (8009118 <HAL_RCC_ClockConfig+0x1bc>)
 8008fb6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008fba:	6093      	str	r3, [r2, #8]
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f003 0308 	and.w	r3, r3, #8
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d005      	beq.n	8008fd4 <HAL_RCC_ClockConfig+0x78>
 8008fc8:	4b53      	ldr	r3, [pc, #332]	@ (8009118 <HAL_RCC_ClockConfig+0x1bc>)
 8008fca:	689b      	ldr	r3, [r3, #8]
 8008fcc:	4a52      	ldr	r2, [pc, #328]	@ (8009118 <HAL_RCC_ClockConfig+0x1bc>)
 8008fce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8008fd2:	6093      	str	r3, [r2, #8]
 8008fd4:	4b50      	ldr	r3, [pc, #320]	@ (8009118 <HAL_RCC_ClockConfig+0x1bc>)
 8008fd6:	689b      	ldr	r3, [r3, #8]
 8008fd8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	689b      	ldr	r3, [r3, #8]
 8008fe0:	494d      	ldr	r1, [pc, #308]	@ (8009118 <HAL_RCC_ClockConfig+0x1bc>)
 8008fe2:	4313      	orrs	r3, r2
 8008fe4:	608b      	str	r3, [r1, #8]
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f003 0301 	and.w	r3, r3, #1
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d044      	beq.n	800907c <HAL_RCC_ClockConfig+0x120>
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	685b      	ldr	r3, [r3, #4]
 8008ff6:	2b01      	cmp	r3, #1
 8008ff8:	d107      	bne.n	800900a <HAL_RCC_ClockConfig+0xae>
 8008ffa:	4b47      	ldr	r3, [pc, #284]	@ (8009118 <HAL_RCC_ClockConfig+0x1bc>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009002:	2b00      	cmp	r3, #0
 8009004:	d119      	bne.n	800903a <HAL_RCC_ClockConfig+0xde>
 8009006:	2301      	movs	r3, #1
 8009008:	e07f      	b.n	800910a <HAL_RCC_ClockConfig+0x1ae>
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	685b      	ldr	r3, [r3, #4]
 800900e:	2b02      	cmp	r3, #2
 8009010:	d003      	beq.n	800901a <HAL_RCC_ClockConfig+0xbe>
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	685b      	ldr	r3, [r3, #4]
 8009016:	2b03      	cmp	r3, #3
 8009018:	d107      	bne.n	800902a <HAL_RCC_ClockConfig+0xce>
 800901a:	4b3f      	ldr	r3, [pc, #252]	@ (8009118 <HAL_RCC_ClockConfig+0x1bc>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009022:	2b00      	cmp	r3, #0
 8009024:	d109      	bne.n	800903a <HAL_RCC_ClockConfig+0xde>
 8009026:	2301      	movs	r3, #1
 8009028:	e06f      	b.n	800910a <HAL_RCC_ClockConfig+0x1ae>
 800902a:	4b3b      	ldr	r3, [pc, #236]	@ (8009118 <HAL_RCC_ClockConfig+0x1bc>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f003 0302 	and.w	r3, r3, #2
 8009032:	2b00      	cmp	r3, #0
 8009034:	d101      	bne.n	800903a <HAL_RCC_ClockConfig+0xde>
 8009036:	2301      	movs	r3, #1
 8009038:	e067      	b.n	800910a <HAL_RCC_ClockConfig+0x1ae>
 800903a:	4b37      	ldr	r3, [pc, #220]	@ (8009118 <HAL_RCC_ClockConfig+0x1bc>)
 800903c:	689b      	ldr	r3, [r3, #8]
 800903e:	f023 0203 	bic.w	r2, r3, #3
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	685b      	ldr	r3, [r3, #4]
 8009046:	4934      	ldr	r1, [pc, #208]	@ (8009118 <HAL_RCC_ClockConfig+0x1bc>)
 8009048:	4313      	orrs	r3, r2
 800904a:	608b      	str	r3, [r1, #8]
 800904c:	f7fd fc28 	bl	80068a0 <HAL_GetTick>
 8009050:	60f8      	str	r0, [r7, #12]
 8009052:	e00a      	b.n	800906a <HAL_RCC_ClockConfig+0x10e>
 8009054:	f7fd fc24 	bl	80068a0 <HAL_GetTick>
 8009058:	4602      	mov	r2, r0
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	1ad3      	subs	r3, r2, r3
 800905e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009062:	4293      	cmp	r3, r2
 8009064:	d901      	bls.n	800906a <HAL_RCC_ClockConfig+0x10e>
 8009066:	2303      	movs	r3, #3
 8009068:	e04f      	b.n	800910a <HAL_RCC_ClockConfig+0x1ae>
 800906a:	4b2b      	ldr	r3, [pc, #172]	@ (8009118 <HAL_RCC_ClockConfig+0x1bc>)
 800906c:	689b      	ldr	r3, [r3, #8]
 800906e:	f003 020c 	and.w	r2, r3, #12
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	685b      	ldr	r3, [r3, #4]
 8009076:	009b      	lsls	r3, r3, #2
 8009078:	429a      	cmp	r2, r3
 800907a:	d1eb      	bne.n	8009054 <HAL_RCC_ClockConfig+0xf8>
 800907c:	4b25      	ldr	r3, [pc, #148]	@ (8009114 <HAL_RCC_ClockConfig+0x1b8>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f003 0307 	and.w	r3, r3, #7
 8009084:	683a      	ldr	r2, [r7, #0]
 8009086:	429a      	cmp	r2, r3
 8009088:	d20c      	bcs.n	80090a4 <HAL_RCC_ClockConfig+0x148>
 800908a:	4b22      	ldr	r3, [pc, #136]	@ (8009114 <HAL_RCC_ClockConfig+0x1b8>)
 800908c:	683a      	ldr	r2, [r7, #0]
 800908e:	b2d2      	uxtb	r2, r2
 8009090:	701a      	strb	r2, [r3, #0]
 8009092:	4b20      	ldr	r3, [pc, #128]	@ (8009114 <HAL_RCC_ClockConfig+0x1b8>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f003 0307 	and.w	r3, r3, #7
 800909a:	683a      	ldr	r2, [r7, #0]
 800909c:	429a      	cmp	r2, r3
 800909e:	d001      	beq.n	80090a4 <HAL_RCC_ClockConfig+0x148>
 80090a0:	2301      	movs	r3, #1
 80090a2:	e032      	b.n	800910a <HAL_RCC_ClockConfig+0x1ae>
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f003 0304 	and.w	r3, r3, #4
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d008      	beq.n	80090c2 <HAL_RCC_ClockConfig+0x166>
 80090b0:	4b19      	ldr	r3, [pc, #100]	@ (8009118 <HAL_RCC_ClockConfig+0x1bc>)
 80090b2:	689b      	ldr	r3, [r3, #8]
 80090b4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	68db      	ldr	r3, [r3, #12]
 80090bc:	4916      	ldr	r1, [pc, #88]	@ (8009118 <HAL_RCC_ClockConfig+0x1bc>)
 80090be:	4313      	orrs	r3, r2
 80090c0:	608b      	str	r3, [r1, #8]
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f003 0308 	and.w	r3, r3, #8
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d009      	beq.n	80090e2 <HAL_RCC_ClockConfig+0x186>
 80090ce:	4b12      	ldr	r3, [pc, #72]	@ (8009118 <HAL_RCC_ClockConfig+0x1bc>)
 80090d0:	689b      	ldr	r3, [r3, #8]
 80090d2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	691b      	ldr	r3, [r3, #16]
 80090da:	00db      	lsls	r3, r3, #3
 80090dc:	490e      	ldr	r1, [pc, #56]	@ (8009118 <HAL_RCC_ClockConfig+0x1bc>)
 80090de:	4313      	orrs	r3, r2
 80090e0:	608b      	str	r3, [r1, #8]
 80090e2:	f000 f821 	bl	8009128 <HAL_RCC_GetSysClockFreq>
 80090e6:	4602      	mov	r2, r0
 80090e8:	4b0b      	ldr	r3, [pc, #44]	@ (8009118 <HAL_RCC_ClockConfig+0x1bc>)
 80090ea:	689b      	ldr	r3, [r3, #8]
 80090ec:	091b      	lsrs	r3, r3, #4
 80090ee:	f003 030f 	and.w	r3, r3, #15
 80090f2:	490a      	ldr	r1, [pc, #40]	@ (800911c <HAL_RCC_ClockConfig+0x1c0>)
 80090f4:	5ccb      	ldrb	r3, [r1, r3]
 80090f6:	fa22 f303 	lsr.w	r3, r2, r3
 80090fa:	4a09      	ldr	r2, [pc, #36]	@ (8009120 <HAL_RCC_ClockConfig+0x1c4>)
 80090fc:	6013      	str	r3, [r2, #0]
 80090fe:	4b09      	ldr	r3, [pc, #36]	@ (8009124 <HAL_RCC_ClockConfig+0x1c8>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	4618      	mov	r0, r3
 8009104:	f7fd fb88 	bl	8006818 <HAL_InitTick>
 8009108:	2300      	movs	r3, #0
 800910a:	4618      	mov	r0, r3
 800910c:	3710      	adds	r7, #16
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}
 8009112:	bf00      	nop
 8009114:	40023c00 	.word	0x40023c00
 8009118:	40023800 	.word	0x40023800
 800911c:	08010994 	.word	0x08010994
 8009120:	20000004 	.word	0x20000004
 8009124:	20000008 	.word	0x20000008

08009128 <HAL_RCC_GetSysClockFreq>:
 8009128:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800912c:	b090      	sub	sp, #64	@ 0x40
 800912e:	af00      	add	r7, sp, #0
 8009130:	2300      	movs	r3, #0
 8009132:	637b      	str	r3, [r7, #52]	@ 0x34
 8009134:	2300      	movs	r3, #0
 8009136:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009138:	2300      	movs	r3, #0
 800913a:	633b      	str	r3, [r7, #48]	@ 0x30
 800913c:	2300      	movs	r3, #0
 800913e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009140:	4b59      	ldr	r3, [pc, #356]	@ (80092a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8009142:	689b      	ldr	r3, [r3, #8]
 8009144:	f003 030c 	and.w	r3, r3, #12
 8009148:	2b08      	cmp	r3, #8
 800914a:	d00d      	beq.n	8009168 <HAL_RCC_GetSysClockFreq+0x40>
 800914c:	2b08      	cmp	r3, #8
 800914e:	f200 80a1 	bhi.w	8009294 <HAL_RCC_GetSysClockFreq+0x16c>
 8009152:	2b00      	cmp	r3, #0
 8009154:	d002      	beq.n	800915c <HAL_RCC_GetSysClockFreq+0x34>
 8009156:	2b04      	cmp	r3, #4
 8009158:	d003      	beq.n	8009162 <HAL_RCC_GetSysClockFreq+0x3a>
 800915a:	e09b      	b.n	8009294 <HAL_RCC_GetSysClockFreq+0x16c>
 800915c:	4b53      	ldr	r3, [pc, #332]	@ (80092ac <HAL_RCC_GetSysClockFreq+0x184>)
 800915e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009160:	e09b      	b.n	800929a <HAL_RCC_GetSysClockFreq+0x172>
 8009162:	4b53      	ldr	r3, [pc, #332]	@ (80092b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8009164:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009166:	e098      	b.n	800929a <HAL_RCC_GetSysClockFreq+0x172>
 8009168:	4b4f      	ldr	r3, [pc, #316]	@ (80092a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800916a:	685b      	ldr	r3, [r3, #4]
 800916c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009170:	637b      	str	r3, [r7, #52]	@ 0x34
 8009172:	4b4d      	ldr	r3, [pc, #308]	@ (80092a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8009174:	685b      	ldr	r3, [r3, #4]
 8009176:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800917a:	2b00      	cmp	r3, #0
 800917c:	d028      	beq.n	80091d0 <HAL_RCC_GetSysClockFreq+0xa8>
 800917e:	4b4a      	ldr	r3, [pc, #296]	@ (80092a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8009180:	685b      	ldr	r3, [r3, #4]
 8009182:	099b      	lsrs	r3, r3, #6
 8009184:	2200      	movs	r2, #0
 8009186:	623b      	str	r3, [r7, #32]
 8009188:	627a      	str	r2, [r7, #36]	@ 0x24
 800918a:	6a3b      	ldr	r3, [r7, #32]
 800918c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8009190:	2100      	movs	r1, #0
 8009192:	4b47      	ldr	r3, [pc, #284]	@ (80092b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8009194:	fb03 f201 	mul.w	r2, r3, r1
 8009198:	2300      	movs	r3, #0
 800919a:	fb00 f303 	mul.w	r3, r0, r3
 800919e:	4413      	add	r3, r2
 80091a0:	4a43      	ldr	r2, [pc, #268]	@ (80092b0 <HAL_RCC_GetSysClockFreq+0x188>)
 80091a2:	fba0 1202 	umull	r1, r2, r0, r2
 80091a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80091a8:	460a      	mov	r2, r1
 80091aa:	62ba      	str	r2, [r7, #40]	@ 0x28
 80091ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80091ae:	4413      	add	r3, r2
 80091b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80091b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091b4:	2200      	movs	r2, #0
 80091b6:	61bb      	str	r3, [r7, #24]
 80091b8:	61fa      	str	r2, [r7, #28]
 80091ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80091be:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80091c2:	f7f7 fe57 	bl	8000e74 <__aeabi_uldivmod>
 80091c6:	4602      	mov	r2, r0
 80091c8:	460b      	mov	r3, r1
 80091ca:	4613      	mov	r3, r2
 80091cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80091ce:	e053      	b.n	8009278 <HAL_RCC_GetSysClockFreq+0x150>
 80091d0:	4b35      	ldr	r3, [pc, #212]	@ (80092a8 <HAL_RCC_GetSysClockFreq+0x180>)
 80091d2:	685b      	ldr	r3, [r3, #4]
 80091d4:	099b      	lsrs	r3, r3, #6
 80091d6:	2200      	movs	r2, #0
 80091d8:	613b      	str	r3, [r7, #16]
 80091da:	617a      	str	r2, [r7, #20]
 80091dc:	693b      	ldr	r3, [r7, #16]
 80091de:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80091e2:	f04f 0b00 	mov.w	fp, #0
 80091e6:	4652      	mov	r2, sl
 80091e8:	465b      	mov	r3, fp
 80091ea:	f04f 0000 	mov.w	r0, #0
 80091ee:	f04f 0100 	mov.w	r1, #0
 80091f2:	0159      	lsls	r1, r3, #5
 80091f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80091f8:	0150      	lsls	r0, r2, #5
 80091fa:	4602      	mov	r2, r0
 80091fc:	460b      	mov	r3, r1
 80091fe:	ebb2 080a 	subs.w	r8, r2, sl
 8009202:	eb63 090b 	sbc.w	r9, r3, fp
 8009206:	f04f 0200 	mov.w	r2, #0
 800920a:	f04f 0300 	mov.w	r3, #0
 800920e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8009212:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8009216:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800921a:	ebb2 0408 	subs.w	r4, r2, r8
 800921e:	eb63 0509 	sbc.w	r5, r3, r9
 8009222:	f04f 0200 	mov.w	r2, #0
 8009226:	f04f 0300 	mov.w	r3, #0
 800922a:	00eb      	lsls	r3, r5, #3
 800922c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009230:	00e2      	lsls	r2, r4, #3
 8009232:	4614      	mov	r4, r2
 8009234:	461d      	mov	r5, r3
 8009236:	eb14 030a 	adds.w	r3, r4, sl
 800923a:	603b      	str	r3, [r7, #0]
 800923c:	eb45 030b 	adc.w	r3, r5, fp
 8009240:	607b      	str	r3, [r7, #4]
 8009242:	f04f 0200 	mov.w	r2, #0
 8009246:	f04f 0300 	mov.w	r3, #0
 800924a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800924e:	4629      	mov	r1, r5
 8009250:	028b      	lsls	r3, r1, #10
 8009252:	4621      	mov	r1, r4
 8009254:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009258:	4621      	mov	r1, r4
 800925a:	028a      	lsls	r2, r1, #10
 800925c:	4610      	mov	r0, r2
 800925e:	4619      	mov	r1, r3
 8009260:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009262:	2200      	movs	r2, #0
 8009264:	60bb      	str	r3, [r7, #8]
 8009266:	60fa      	str	r2, [r7, #12]
 8009268:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800926c:	f7f7 fe02 	bl	8000e74 <__aeabi_uldivmod>
 8009270:	4602      	mov	r2, r0
 8009272:	460b      	mov	r3, r1
 8009274:	4613      	mov	r3, r2
 8009276:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009278:	4b0b      	ldr	r3, [pc, #44]	@ (80092a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800927a:	685b      	ldr	r3, [r3, #4]
 800927c:	0c1b      	lsrs	r3, r3, #16
 800927e:	f003 0303 	and.w	r3, r3, #3
 8009282:	3301      	adds	r3, #1
 8009284:	005b      	lsls	r3, r3, #1
 8009286:	633b      	str	r3, [r7, #48]	@ 0x30
 8009288:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800928a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800928c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009290:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009292:	e002      	b.n	800929a <HAL_RCC_GetSysClockFreq+0x172>
 8009294:	4b05      	ldr	r3, [pc, #20]	@ (80092ac <HAL_RCC_GetSysClockFreq+0x184>)
 8009296:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009298:	bf00      	nop
 800929a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800929c:	4618      	mov	r0, r3
 800929e:	3740      	adds	r7, #64	@ 0x40
 80092a0:	46bd      	mov	sp, r7
 80092a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80092a6:	bf00      	nop
 80092a8:	40023800 	.word	0x40023800
 80092ac:	00f42400 	.word	0x00f42400
 80092b0:	017d7840 	.word	0x017d7840

080092b4 <HAL_RCC_GetHCLKFreq>:
 80092b4:	b480      	push	{r7}
 80092b6:	af00      	add	r7, sp, #0
 80092b8:	4b03      	ldr	r3, [pc, #12]	@ (80092c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	4618      	mov	r0, r3
 80092be:	46bd      	mov	sp, r7
 80092c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c4:	4770      	bx	lr
 80092c6:	bf00      	nop
 80092c8:	20000004 	.word	0x20000004

080092cc <HAL_RCC_GetPCLK1Freq>:
 80092cc:	b580      	push	{r7, lr}
 80092ce:	af00      	add	r7, sp, #0
 80092d0:	f7ff fff0 	bl	80092b4 <HAL_RCC_GetHCLKFreq>
 80092d4:	4602      	mov	r2, r0
 80092d6:	4b05      	ldr	r3, [pc, #20]	@ (80092ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80092d8:	689b      	ldr	r3, [r3, #8]
 80092da:	0a9b      	lsrs	r3, r3, #10
 80092dc:	f003 0307 	and.w	r3, r3, #7
 80092e0:	4903      	ldr	r1, [pc, #12]	@ (80092f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80092e2:	5ccb      	ldrb	r3, [r1, r3]
 80092e4:	fa22 f303 	lsr.w	r3, r2, r3
 80092e8:	4618      	mov	r0, r3
 80092ea:	bd80      	pop	{r7, pc}
 80092ec:	40023800 	.word	0x40023800
 80092f0:	080109a4 	.word	0x080109a4

080092f4 <HAL_RCC_GetPCLK2Freq>:
 80092f4:	b580      	push	{r7, lr}
 80092f6:	af00      	add	r7, sp, #0
 80092f8:	f7ff ffdc 	bl	80092b4 <HAL_RCC_GetHCLKFreq>
 80092fc:	4602      	mov	r2, r0
 80092fe:	4b05      	ldr	r3, [pc, #20]	@ (8009314 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009300:	689b      	ldr	r3, [r3, #8]
 8009302:	0b5b      	lsrs	r3, r3, #13
 8009304:	f003 0307 	and.w	r3, r3, #7
 8009308:	4903      	ldr	r1, [pc, #12]	@ (8009318 <HAL_RCC_GetPCLK2Freq+0x24>)
 800930a:	5ccb      	ldrb	r3, [r1, r3]
 800930c:	fa22 f303 	lsr.w	r3, r2, r3
 8009310:	4618      	mov	r0, r3
 8009312:	bd80      	pop	{r7, pc}
 8009314:	40023800 	.word	0x40023800
 8009318:	080109a4 	.word	0x080109a4

0800931c <HAL_TIM_Base_Init>:
 800931c:	b580      	push	{r7, lr}
 800931e:	b082      	sub	sp, #8
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d101      	bne.n	800932e <HAL_TIM_Base_Init+0x12>
 800932a:	2301      	movs	r3, #1
 800932c:	e041      	b.n	80093b2 <HAL_TIM_Base_Init+0x96>
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009334:	b2db      	uxtb	r3, r3
 8009336:	2b00      	cmp	r3, #0
 8009338:	d106      	bne.n	8009348 <HAL_TIM_Base_Init+0x2c>
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2200      	movs	r2, #0
 800933e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f7fd f928 	bl	8006598 <HAL_TIM_Base_MspInit>
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2202      	movs	r2, #2
 800934c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681a      	ldr	r2, [r3, #0]
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	3304      	adds	r3, #4
 8009358:	4619      	mov	r1, r3
 800935a:	4610      	mov	r0, r2
 800935c:	f000 fdf0 	bl	8009f40 <TIM_Base_SetConfig>
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2201      	movs	r2, #1
 8009364:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2201      	movs	r2, #1
 800936c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2201      	movs	r2, #1
 8009374:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2201      	movs	r2, #1
 800937c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2201      	movs	r2, #1
 8009384:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2201      	movs	r2, #1
 800938c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2201      	movs	r2, #1
 8009394:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2201      	movs	r2, #1
 800939c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2201      	movs	r2, #1
 80093a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2201      	movs	r2, #1
 80093ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80093b0:	2300      	movs	r3, #0
 80093b2:	4618      	mov	r0, r3
 80093b4:	3708      	adds	r7, #8
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}
	...

080093bc <HAL_TIM_Base_Start>:
 80093bc:	b480      	push	{r7}
 80093be:	b085      	sub	sp, #20
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80093ca:	b2db      	uxtb	r3, r3
 80093cc:	2b01      	cmp	r3, #1
 80093ce:	d001      	beq.n	80093d4 <HAL_TIM_Base_Start+0x18>
 80093d0:	2301      	movs	r3, #1
 80093d2:	e03c      	b.n	800944e <HAL_TIM_Base_Start+0x92>
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2202      	movs	r2, #2
 80093d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	4a1e      	ldr	r2, [pc, #120]	@ (800945c <HAL_TIM_Base_Start+0xa0>)
 80093e2:	4293      	cmp	r3, r2
 80093e4:	d018      	beq.n	8009418 <HAL_TIM_Base_Start+0x5c>
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80093ee:	d013      	beq.n	8009418 <HAL_TIM_Base_Start+0x5c>
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	4a1a      	ldr	r2, [pc, #104]	@ (8009460 <HAL_TIM_Base_Start+0xa4>)
 80093f6:	4293      	cmp	r3, r2
 80093f8:	d00e      	beq.n	8009418 <HAL_TIM_Base_Start+0x5c>
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	4a19      	ldr	r2, [pc, #100]	@ (8009464 <HAL_TIM_Base_Start+0xa8>)
 8009400:	4293      	cmp	r3, r2
 8009402:	d009      	beq.n	8009418 <HAL_TIM_Base_Start+0x5c>
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	4a17      	ldr	r2, [pc, #92]	@ (8009468 <HAL_TIM_Base_Start+0xac>)
 800940a:	4293      	cmp	r3, r2
 800940c:	d004      	beq.n	8009418 <HAL_TIM_Base_Start+0x5c>
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	4a16      	ldr	r2, [pc, #88]	@ (800946c <HAL_TIM_Base_Start+0xb0>)
 8009414:	4293      	cmp	r3, r2
 8009416:	d111      	bne.n	800943c <HAL_TIM_Base_Start+0x80>
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	689b      	ldr	r3, [r3, #8]
 800941e:	f003 0307 	and.w	r3, r3, #7
 8009422:	60fb      	str	r3, [r7, #12]
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	2b06      	cmp	r3, #6
 8009428:	d010      	beq.n	800944c <HAL_TIM_Base_Start+0x90>
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	681a      	ldr	r2, [r3, #0]
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f042 0201 	orr.w	r2, r2, #1
 8009438:	601a      	str	r2, [r3, #0]
 800943a:	e007      	b.n	800944c <HAL_TIM_Base_Start+0x90>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	681a      	ldr	r2, [r3, #0]
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	f042 0201 	orr.w	r2, r2, #1
 800944a:	601a      	str	r2, [r3, #0]
 800944c:	2300      	movs	r3, #0
 800944e:	4618      	mov	r0, r3
 8009450:	3714      	adds	r7, #20
 8009452:	46bd      	mov	sp, r7
 8009454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009458:	4770      	bx	lr
 800945a:	bf00      	nop
 800945c:	40010000 	.word	0x40010000
 8009460:	40000400 	.word	0x40000400
 8009464:	40000800 	.word	0x40000800
 8009468:	40000c00 	.word	0x40000c00
 800946c:	40014000 	.word	0x40014000

08009470 <HAL_TIM_Base_Start_IT>:
 8009470:	b480      	push	{r7}
 8009472:	b085      	sub	sp, #20
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800947e:	b2db      	uxtb	r3, r3
 8009480:	2b01      	cmp	r3, #1
 8009482:	d001      	beq.n	8009488 <HAL_TIM_Base_Start_IT+0x18>
 8009484:	2301      	movs	r3, #1
 8009486:	e044      	b.n	8009512 <HAL_TIM_Base_Start_IT+0xa2>
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2202      	movs	r2, #2
 800948c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	68da      	ldr	r2, [r3, #12]
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f042 0201 	orr.w	r2, r2, #1
 800949e:	60da      	str	r2, [r3, #12]
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	4a1e      	ldr	r2, [pc, #120]	@ (8009520 <HAL_TIM_Base_Start_IT+0xb0>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d018      	beq.n	80094dc <HAL_TIM_Base_Start_IT+0x6c>
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80094b2:	d013      	beq.n	80094dc <HAL_TIM_Base_Start_IT+0x6c>
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	4a1a      	ldr	r2, [pc, #104]	@ (8009524 <HAL_TIM_Base_Start_IT+0xb4>)
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d00e      	beq.n	80094dc <HAL_TIM_Base_Start_IT+0x6c>
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	4a19      	ldr	r2, [pc, #100]	@ (8009528 <HAL_TIM_Base_Start_IT+0xb8>)
 80094c4:	4293      	cmp	r3, r2
 80094c6:	d009      	beq.n	80094dc <HAL_TIM_Base_Start_IT+0x6c>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	4a17      	ldr	r2, [pc, #92]	@ (800952c <HAL_TIM_Base_Start_IT+0xbc>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d004      	beq.n	80094dc <HAL_TIM_Base_Start_IT+0x6c>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	4a16      	ldr	r2, [pc, #88]	@ (8009530 <HAL_TIM_Base_Start_IT+0xc0>)
 80094d8:	4293      	cmp	r3, r2
 80094da:	d111      	bne.n	8009500 <HAL_TIM_Base_Start_IT+0x90>
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	689b      	ldr	r3, [r3, #8]
 80094e2:	f003 0307 	and.w	r3, r3, #7
 80094e6:	60fb      	str	r3, [r7, #12]
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	2b06      	cmp	r3, #6
 80094ec:	d010      	beq.n	8009510 <HAL_TIM_Base_Start_IT+0xa0>
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	681a      	ldr	r2, [r3, #0]
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	f042 0201 	orr.w	r2, r2, #1
 80094fc:	601a      	str	r2, [r3, #0]
 80094fe:	e007      	b.n	8009510 <HAL_TIM_Base_Start_IT+0xa0>
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	681a      	ldr	r2, [r3, #0]
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f042 0201 	orr.w	r2, r2, #1
 800950e:	601a      	str	r2, [r3, #0]
 8009510:	2300      	movs	r3, #0
 8009512:	4618      	mov	r0, r3
 8009514:	3714      	adds	r7, #20
 8009516:	46bd      	mov	sp, r7
 8009518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951c:	4770      	bx	lr
 800951e:	bf00      	nop
 8009520:	40010000 	.word	0x40010000
 8009524:	40000400 	.word	0x40000400
 8009528:	40000800 	.word	0x40000800
 800952c:	40000c00 	.word	0x40000c00
 8009530:	40014000 	.word	0x40014000

08009534 <HAL_TIM_Base_Stop_IT>:
 8009534:	b480      	push	{r7}
 8009536:	b083      	sub	sp, #12
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	68da      	ldr	r2, [r3, #12]
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f022 0201 	bic.w	r2, r2, #1
 800954a:	60da      	str	r2, [r3, #12]
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	6a1a      	ldr	r2, [r3, #32]
 8009552:	f241 1311 	movw	r3, #4369	@ 0x1111
 8009556:	4013      	ands	r3, r2
 8009558:	2b00      	cmp	r3, #0
 800955a:	d10f      	bne.n	800957c <HAL_TIM_Base_Stop_IT+0x48>
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	6a1a      	ldr	r2, [r3, #32]
 8009562:	f240 4344 	movw	r3, #1092	@ 0x444
 8009566:	4013      	ands	r3, r2
 8009568:	2b00      	cmp	r3, #0
 800956a:	d107      	bne.n	800957c <HAL_TIM_Base_Stop_IT+0x48>
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	681a      	ldr	r2, [r3, #0]
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f022 0201 	bic.w	r2, r2, #1
 800957a:	601a      	str	r2, [r3, #0]
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2201      	movs	r2, #1
 8009580:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8009584:	2300      	movs	r3, #0
 8009586:	4618      	mov	r0, r3
 8009588:	370c      	adds	r7, #12
 800958a:	46bd      	mov	sp, r7
 800958c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009590:	4770      	bx	lr

08009592 <HAL_TIM_IC_Init>:
 8009592:	b580      	push	{r7, lr}
 8009594:	b082      	sub	sp, #8
 8009596:	af00      	add	r7, sp, #0
 8009598:	6078      	str	r0, [r7, #4]
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d101      	bne.n	80095a4 <HAL_TIM_IC_Init+0x12>
 80095a0:	2301      	movs	r3, #1
 80095a2:	e041      	b.n	8009628 <HAL_TIM_IC_Init+0x96>
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80095aa:	b2db      	uxtb	r3, r3
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d106      	bne.n	80095be <HAL_TIM_IC_Init+0x2c>
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2200      	movs	r2, #0
 80095b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	f000 f839 	bl	8009630 <HAL_TIM_IC_MspInit>
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2202      	movs	r2, #2
 80095c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681a      	ldr	r2, [r3, #0]
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	3304      	adds	r3, #4
 80095ce:	4619      	mov	r1, r3
 80095d0:	4610      	mov	r0, r2
 80095d2:	f000 fcb5 	bl	8009f40 <TIM_Base_SetConfig>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2201      	movs	r2, #1
 80095da:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2201      	movs	r2, #1
 80095e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2201      	movs	r2, #1
 80095ea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2201      	movs	r2, #1
 80095f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2201      	movs	r2, #1
 80095fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2201      	movs	r2, #1
 8009602:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2201      	movs	r2, #1
 800960a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2201      	movs	r2, #1
 8009612:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2201      	movs	r2, #1
 800961a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2201      	movs	r2, #1
 8009622:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8009626:	2300      	movs	r3, #0
 8009628:	4618      	mov	r0, r3
 800962a:	3708      	adds	r7, #8
 800962c:	46bd      	mov	sp, r7
 800962e:	bd80      	pop	{r7, pc}

08009630 <HAL_TIM_IC_MspInit>:
 8009630:	b480      	push	{r7}
 8009632:	b083      	sub	sp, #12
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
 8009638:	bf00      	nop
 800963a:	370c      	adds	r7, #12
 800963c:	46bd      	mov	sp, r7
 800963e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009642:	4770      	bx	lr

08009644 <HAL_TIM_IC_Start_IT>:
 8009644:	b580      	push	{r7, lr}
 8009646:	b084      	sub	sp, #16
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
 800964c:	6039      	str	r1, [r7, #0]
 800964e:	2300      	movs	r3, #0
 8009650:	73fb      	strb	r3, [r7, #15]
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d104      	bne.n	8009662 <HAL_TIM_IC_Start_IT+0x1e>
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800965e:	b2db      	uxtb	r3, r3
 8009660:	e013      	b.n	800968a <HAL_TIM_IC_Start_IT+0x46>
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	2b04      	cmp	r3, #4
 8009666:	d104      	bne.n	8009672 <HAL_TIM_IC_Start_IT+0x2e>
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800966e:	b2db      	uxtb	r3, r3
 8009670:	e00b      	b.n	800968a <HAL_TIM_IC_Start_IT+0x46>
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	2b08      	cmp	r3, #8
 8009676:	d104      	bne.n	8009682 <HAL_TIM_IC_Start_IT+0x3e>
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800967e:	b2db      	uxtb	r3, r3
 8009680:	e003      	b.n	800968a <HAL_TIM_IC_Start_IT+0x46>
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009688:	b2db      	uxtb	r3, r3
 800968a:	73bb      	strb	r3, [r7, #14]
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d104      	bne.n	800969c <HAL_TIM_IC_Start_IT+0x58>
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009698:	b2db      	uxtb	r3, r3
 800969a:	e013      	b.n	80096c4 <HAL_TIM_IC_Start_IT+0x80>
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	2b04      	cmp	r3, #4
 80096a0:	d104      	bne.n	80096ac <HAL_TIM_IC_Start_IT+0x68>
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80096a8:	b2db      	uxtb	r3, r3
 80096aa:	e00b      	b.n	80096c4 <HAL_TIM_IC_Start_IT+0x80>
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	2b08      	cmp	r3, #8
 80096b0:	d104      	bne.n	80096bc <HAL_TIM_IC_Start_IT+0x78>
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80096b8:	b2db      	uxtb	r3, r3
 80096ba:	e003      	b.n	80096c4 <HAL_TIM_IC_Start_IT+0x80>
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80096c2:	b2db      	uxtb	r3, r3
 80096c4:	737b      	strb	r3, [r7, #13]
 80096c6:	7bbb      	ldrb	r3, [r7, #14]
 80096c8:	2b01      	cmp	r3, #1
 80096ca:	d102      	bne.n	80096d2 <HAL_TIM_IC_Start_IT+0x8e>
 80096cc:	7b7b      	ldrb	r3, [r7, #13]
 80096ce:	2b01      	cmp	r3, #1
 80096d0:	d001      	beq.n	80096d6 <HAL_TIM_IC_Start_IT+0x92>
 80096d2:	2301      	movs	r3, #1
 80096d4:	e0c2      	b.n	800985c <HAL_TIM_IC_Start_IT+0x218>
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d104      	bne.n	80096e6 <HAL_TIM_IC_Start_IT+0xa2>
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2202      	movs	r2, #2
 80096e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80096e4:	e013      	b.n	800970e <HAL_TIM_IC_Start_IT+0xca>
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	2b04      	cmp	r3, #4
 80096ea:	d104      	bne.n	80096f6 <HAL_TIM_IC_Start_IT+0xb2>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2202      	movs	r2, #2
 80096f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80096f4:	e00b      	b.n	800970e <HAL_TIM_IC_Start_IT+0xca>
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	2b08      	cmp	r3, #8
 80096fa:	d104      	bne.n	8009706 <HAL_TIM_IC_Start_IT+0xc2>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2202      	movs	r2, #2
 8009700:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009704:	e003      	b.n	800970e <HAL_TIM_IC_Start_IT+0xca>
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2202      	movs	r2, #2
 800970a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d104      	bne.n	800971e <HAL_TIM_IC_Start_IT+0xda>
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2202      	movs	r2, #2
 8009718:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800971c:	e013      	b.n	8009746 <HAL_TIM_IC_Start_IT+0x102>
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	2b04      	cmp	r3, #4
 8009722:	d104      	bne.n	800972e <HAL_TIM_IC_Start_IT+0xea>
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2202      	movs	r2, #2
 8009728:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800972c:	e00b      	b.n	8009746 <HAL_TIM_IC_Start_IT+0x102>
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	2b08      	cmp	r3, #8
 8009732:	d104      	bne.n	800973e <HAL_TIM_IC_Start_IT+0xfa>
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2202      	movs	r2, #2
 8009738:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800973c:	e003      	b.n	8009746 <HAL_TIM_IC_Start_IT+0x102>
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2202      	movs	r2, #2
 8009742:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	2b0c      	cmp	r3, #12
 800974a:	d841      	bhi.n	80097d0 <HAL_TIM_IC_Start_IT+0x18c>
 800974c:	a201      	add	r2, pc, #4	@ (adr r2, 8009754 <HAL_TIM_IC_Start_IT+0x110>)
 800974e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009752:	bf00      	nop
 8009754:	08009789 	.word	0x08009789
 8009758:	080097d1 	.word	0x080097d1
 800975c:	080097d1 	.word	0x080097d1
 8009760:	080097d1 	.word	0x080097d1
 8009764:	0800979b 	.word	0x0800979b
 8009768:	080097d1 	.word	0x080097d1
 800976c:	080097d1 	.word	0x080097d1
 8009770:	080097d1 	.word	0x080097d1
 8009774:	080097ad 	.word	0x080097ad
 8009778:	080097d1 	.word	0x080097d1
 800977c:	080097d1 	.word	0x080097d1
 8009780:	080097d1 	.word	0x080097d1
 8009784:	080097bf 	.word	0x080097bf
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	68da      	ldr	r2, [r3, #12]
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	f042 0202 	orr.w	r2, r2, #2
 8009796:	60da      	str	r2, [r3, #12]
 8009798:	e01d      	b.n	80097d6 <HAL_TIM_IC_Start_IT+0x192>
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	68da      	ldr	r2, [r3, #12]
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f042 0204 	orr.w	r2, r2, #4
 80097a8:	60da      	str	r2, [r3, #12]
 80097aa:	e014      	b.n	80097d6 <HAL_TIM_IC_Start_IT+0x192>
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	68da      	ldr	r2, [r3, #12]
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f042 0208 	orr.w	r2, r2, #8
 80097ba:	60da      	str	r2, [r3, #12]
 80097bc:	e00b      	b.n	80097d6 <HAL_TIM_IC_Start_IT+0x192>
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	68da      	ldr	r2, [r3, #12]
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f042 0210 	orr.w	r2, r2, #16
 80097cc:	60da      	str	r2, [r3, #12]
 80097ce:	e002      	b.n	80097d6 <HAL_TIM_IC_Start_IT+0x192>
 80097d0:	2301      	movs	r3, #1
 80097d2:	73fb      	strb	r3, [r7, #15]
 80097d4:	bf00      	nop
 80097d6:	7bfb      	ldrb	r3, [r7, #15]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d13e      	bne.n	800985a <HAL_TIM_IC_Start_IT+0x216>
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	2201      	movs	r2, #1
 80097e2:	6839      	ldr	r1, [r7, #0]
 80097e4:	4618      	mov	r0, r3
 80097e6:	f000 fde9 	bl	800a3bc <TIM_CCxChannelCmd>
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	4a1d      	ldr	r2, [pc, #116]	@ (8009864 <HAL_TIM_IC_Start_IT+0x220>)
 80097f0:	4293      	cmp	r3, r2
 80097f2:	d018      	beq.n	8009826 <HAL_TIM_IC_Start_IT+0x1e2>
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097fc:	d013      	beq.n	8009826 <HAL_TIM_IC_Start_IT+0x1e2>
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	4a19      	ldr	r2, [pc, #100]	@ (8009868 <HAL_TIM_IC_Start_IT+0x224>)
 8009804:	4293      	cmp	r3, r2
 8009806:	d00e      	beq.n	8009826 <HAL_TIM_IC_Start_IT+0x1e2>
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	4a17      	ldr	r2, [pc, #92]	@ (800986c <HAL_TIM_IC_Start_IT+0x228>)
 800980e:	4293      	cmp	r3, r2
 8009810:	d009      	beq.n	8009826 <HAL_TIM_IC_Start_IT+0x1e2>
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	4a16      	ldr	r2, [pc, #88]	@ (8009870 <HAL_TIM_IC_Start_IT+0x22c>)
 8009818:	4293      	cmp	r3, r2
 800981a:	d004      	beq.n	8009826 <HAL_TIM_IC_Start_IT+0x1e2>
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	4a14      	ldr	r2, [pc, #80]	@ (8009874 <HAL_TIM_IC_Start_IT+0x230>)
 8009822:	4293      	cmp	r3, r2
 8009824:	d111      	bne.n	800984a <HAL_TIM_IC_Start_IT+0x206>
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	689b      	ldr	r3, [r3, #8]
 800982c:	f003 0307 	and.w	r3, r3, #7
 8009830:	60bb      	str	r3, [r7, #8]
 8009832:	68bb      	ldr	r3, [r7, #8]
 8009834:	2b06      	cmp	r3, #6
 8009836:	d010      	beq.n	800985a <HAL_TIM_IC_Start_IT+0x216>
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	681a      	ldr	r2, [r3, #0]
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f042 0201 	orr.w	r2, r2, #1
 8009846:	601a      	str	r2, [r3, #0]
 8009848:	e007      	b.n	800985a <HAL_TIM_IC_Start_IT+0x216>
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	681a      	ldr	r2, [r3, #0]
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f042 0201 	orr.w	r2, r2, #1
 8009858:	601a      	str	r2, [r3, #0]
 800985a:	7bfb      	ldrb	r3, [r7, #15]
 800985c:	4618      	mov	r0, r3
 800985e:	3710      	adds	r7, #16
 8009860:	46bd      	mov	sp, r7
 8009862:	bd80      	pop	{r7, pc}
 8009864:	40010000 	.word	0x40010000
 8009868:	40000400 	.word	0x40000400
 800986c:	40000800 	.word	0x40000800
 8009870:	40000c00 	.word	0x40000c00
 8009874:	40014000 	.word	0x40014000

08009878 <HAL_TIM_IC_Stop_IT>:
 8009878:	b580      	push	{r7, lr}
 800987a:	b084      	sub	sp, #16
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
 8009880:	6039      	str	r1, [r7, #0]
 8009882:	2300      	movs	r3, #0
 8009884:	73fb      	strb	r3, [r7, #15]
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	2b0c      	cmp	r3, #12
 800988a:	d841      	bhi.n	8009910 <HAL_TIM_IC_Stop_IT+0x98>
 800988c:	a201      	add	r2, pc, #4	@ (adr r2, 8009894 <HAL_TIM_IC_Stop_IT+0x1c>)
 800988e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009892:	bf00      	nop
 8009894:	080098c9 	.word	0x080098c9
 8009898:	08009911 	.word	0x08009911
 800989c:	08009911 	.word	0x08009911
 80098a0:	08009911 	.word	0x08009911
 80098a4:	080098db 	.word	0x080098db
 80098a8:	08009911 	.word	0x08009911
 80098ac:	08009911 	.word	0x08009911
 80098b0:	08009911 	.word	0x08009911
 80098b4:	080098ed 	.word	0x080098ed
 80098b8:	08009911 	.word	0x08009911
 80098bc:	08009911 	.word	0x08009911
 80098c0:	08009911 	.word	0x08009911
 80098c4:	080098ff 	.word	0x080098ff
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	68da      	ldr	r2, [r3, #12]
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	f022 0202 	bic.w	r2, r2, #2
 80098d6:	60da      	str	r2, [r3, #12]
 80098d8:	e01d      	b.n	8009916 <HAL_TIM_IC_Stop_IT+0x9e>
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	68da      	ldr	r2, [r3, #12]
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f022 0204 	bic.w	r2, r2, #4
 80098e8:	60da      	str	r2, [r3, #12]
 80098ea:	e014      	b.n	8009916 <HAL_TIM_IC_Stop_IT+0x9e>
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	68da      	ldr	r2, [r3, #12]
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f022 0208 	bic.w	r2, r2, #8
 80098fa:	60da      	str	r2, [r3, #12]
 80098fc:	e00b      	b.n	8009916 <HAL_TIM_IC_Stop_IT+0x9e>
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	68da      	ldr	r2, [r3, #12]
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f022 0210 	bic.w	r2, r2, #16
 800990c:	60da      	str	r2, [r3, #12]
 800990e:	e002      	b.n	8009916 <HAL_TIM_IC_Stop_IT+0x9e>
 8009910:	2301      	movs	r3, #1
 8009912:	73fb      	strb	r3, [r7, #15]
 8009914:	bf00      	nop
 8009916:	7bfb      	ldrb	r3, [r7, #15]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d156      	bne.n	80099ca <HAL_TIM_IC_Stop_IT+0x152>
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	2200      	movs	r2, #0
 8009922:	6839      	ldr	r1, [r7, #0]
 8009924:	4618      	mov	r0, r3
 8009926:	f000 fd49 	bl	800a3bc <TIM_CCxChannelCmd>
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	6a1a      	ldr	r2, [r3, #32]
 8009930:	f241 1311 	movw	r3, #4369	@ 0x1111
 8009934:	4013      	ands	r3, r2
 8009936:	2b00      	cmp	r3, #0
 8009938:	d10f      	bne.n	800995a <HAL_TIM_IC_Stop_IT+0xe2>
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	6a1a      	ldr	r2, [r3, #32]
 8009940:	f240 4344 	movw	r3, #1092	@ 0x444
 8009944:	4013      	ands	r3, r2
 8009946:	2b00      	cmp	r3, #0
 8009948:	d107      	bne.n	800995a <HAL_TIM_IC_Stop_IT+0xe2>
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	681a      	ldr	r2, [r3, #0]
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	f022 0201 	bic.w	r2, r2, #1
 8009958:	601a      	str	r2, [r3, #0]
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d104      	bne.n	800996a <HAL_TIM_IC_Stop_IT+0xf2>
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2201      	movs	r2, #1
 8009964:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009968:	e013      	b.n	8009992 <HAL_TIM_IC_Stop_IT+0x11a>
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	2b04      	cmp	r3, #4
 800996e:	d104      	bne.n	800997a <HAL_TIM_IC_Stop_IT+0x102>
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2201      	movs	r2, #1
 8009974:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009978:	e00b      	b.n	8009992 <HAL_TIM_IC_Stop_IT+0x11a>
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	2b08      	cmp	r3, #8
 800997e:	d104      	bne.n	800998a <HAL_TIM_IC_Stop_IT+0x112>
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2201      	movs	r2, #1
 8009984:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009988:	e003      	b.n	8009992 <HAL_TIM_IC_Stop_IT+0x11a>
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2201      	movs	r2, #1
 800998e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d104      	bne.n	80099a2 <HAL_TIM_IC_Stop_IT+0x12a>
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2201      	movs	r2, #1
 800999c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80099a0:	e013      	b.n	80099ca <HAL_TIM_IC_Stop_IT+0x152>
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	2b04      	cmp	r3, #4
 80099a6:	d104      	bne.n	80099b2 <HAL_TIM_IC_Stop_IT+0x13a>
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2201      	movs	r2, #1
 80099ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80099b0:	e00b      	b.n	80099ca <HAL_TIM_IC_Stop_IT+0x152>
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	2b08      	cmp	r3, #8
 80099b6:	d104      	bne.n	80099c2 <HAL_TIM_IC_Stop_IT+0x14a>
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2201      	movs	r2, #1
 80099bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80099c0:	e003      	b.n	80099ca <HAL_TIM_IC_Stop_IT+0x152>
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2201      	movs	r2, #1
 80099c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80099ca:	7bfb      	ldrb	r3, [r7, #15]
 80099cc:	4618      	mov	r0, r3
 80099ce:	3710      	adds	r7, #16
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bd80      	pop	{r7, pc}

080099d4 <HAL_TIM_IRQHandler>:
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b084      	sub	sp, #16
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	68db      	ldr	r3, [r3, #12]
 80099e2:	60fb      	str	r3, [r7, #12]
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	691b      	ldr	r3, [r3, #16]
 80099ea:	60bb      	str	r3, [r7, #8]
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	f003 0302 	and.w	r3, r3, #2
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d020      	beq.n	8009a38 <HAL_TIM_IRQHandler+0x64>
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	f003 0302 	and.w	r3, r3, #2
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d01b      	beq.n	8009a38 <HAL_TIM_IRQHandler+0x64>
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f06f 0202 	mvn.w	r2, #2
 8009a08:	611a      	str	r2, [r3, #16]
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2201      	movs	r2, #1
 8009a0e:	771a      	strb	r2, [r3, #28]
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	699b      	ldr	r3, [r3, #24]
 8009a16:	f003 0303 	and.w	r3, r3, #3
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d003      	beq.n	8009a26 <HAL_TIM_IRQHandler+0x52>
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f7f7 feaa 	bl	8001778 <HAL_TIM_IC_CaptureCallback>
 8009a24:	e005      	b.n	8009a32 <HAL_TIM_IRQHandler+0x5e>
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	f000 fa6c 	bl	8009f04 <HAL_TIM_OC_DelayElapsedCallback>
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	f000 fa73 	bl	8009f18 <HAL_TIM_PWM_PulseFinishedCallback>
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2200      	movs	r2, #0
 8009a36:	771a      	strb	r2, [r3, #28]
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	f003 0304 	and.w	r3, r3, #4
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d020      	beq.n	8009a84 <HAL_TIM_IRQHandler+0xb0>
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	f003 0304 	and.w	r3, r3, #4
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d01b      	beq.n	8009a84 <HAL_TIM_IRQHandler+0xb0>
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	f06f 0204 	mvn.w	r2, #4
 8009a54:	611a      	str	r2, [r3, #16]
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2202      	movs	r2, #2
 8009a5a:	771a      	strb	r2, [r3, #28]
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	699b      	ldr	r3, [r3, #24]
 8009a62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d003      	beq.n	8009a72 <HAL_TIM_IRQHandler+0x9e>
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f7f7 fe84 	bl	8001778 <HAL_TIM_IC_CaptureCallback>
 8009a70:	e005      	b.n	8009a7e <HAL_TIM_IRQHandler+0xaa>
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f000 fa46 	bl	8009f04 <HAL_TIM_OC_DelayElapsedCallback>
 8009a78:	6878      	ldr	r0, [r7, #4]
 8009a7a:	f000 fa4d 	bl	8009f18 <HAL_TIM_PWM_PulseFinishedCallback>
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2200      	movs	r2, #0
 8009a82:	771a      	strb	r2, [r3, #28]
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	f003 0308 	and.w	r3, r3, #8
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d020      	beq.n	8009ad0 <HAL_TIM_IRQHandler+0xfc>
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	f003 0308 	and.w	r3, r3, #8
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d01b      	beq.n	8009ad0 <HAL_TIM_IRQHandler+0xfc>
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f06f 0208 	mvn.w	r2, #8
 8009aa0:	611a      	str	r2, [r3, #16]
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2204      	movs	r2, #4
 8009aa6:	771a      	strb	r2, [r3, #28]
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	69db      	ldr	r3, [r3, #28]
 8009aae:	f003 0303 	and.w	r3, r3, #3
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d003      	beq.n	8009abe <HAL_TIM_IRQHandler+0xea>
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f7f7 fe5e 	bl	8001778 <HAL_TIM_IC_CaptureCallback>
 8009abc:	e005      	b.n	8009aca <HAL_TIM_IRQHandler+0xf6>
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f000 fa20 	bl	8009f04 <HAL_TIM_OC_DelayElapsedCallback>
 8009ac4:	6878      	ldr	r0, [r7, #4]
 8009ac6:	f000 fa27 	bl	8009f18 <HAL_TIM_PWM_PulseFinishedCallback>
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	2200      	movs	r2, #0
 8009ace:	771a      	strb	r2, [r3, #28]
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	f003 0310 	and.w	r3, r3, #16
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d020      	beq.n	8009b1c <HAL_TIM_IRQHandler+0x148>
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	f003 0310 	and.w	r3, r3, #16
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d01b      	beq.n	8009b1c <HAL_TIM_IRQHandler+0x148>
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f06f 0210 	mvn.w	r2, #16
 8009aec:	611a      	str	r2, [r3, #16]
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2208      	movs	r2, #8
 8009af2:	771a      	strb	r2, [r3, #28]
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	69db      	ldr	r3, [r3, #28]
 8009afa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d003      	beq.n	8009b0a <HAL_TIM_IRQHandler+0x136>
 8009b02:	6878      	ldr	r0, [r7, #4]
 8009b04:	f7f7 fe38 	bl	8001778 <HAL_TIM_IC_CaptureCallback>
 8009b08:	e005      	b.n	8009b16 <HAL_TIM_IRQHandler+0x142>
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f000 f9fa 	bl	8009f04 <HAL_TIM_OC_DelayElapsedCallback>
 8009b10:	6878      	ldr	r0, [r7, #4]
 8009b12:	f000 fa01 	bl	8009f18 <HAL_TIM_PWM_PulseFinishedCallback>
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2200      	movs	r2, #0
 8009b1a:	771a      	strb	r2, [r3, #28]
 8009b1c:	68bb      	ldr	r3, [r7, #8]
 8009b1e:	f003 0301 	and.w	r3, r3, #1
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d00c      	beq.n	8009b40 <HAL_TIM_IRQHandler+0x16c>
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	f003 0301 	and.w	r3, r3, #1
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d007      	beq.n	8009b40 <HAL_TIM_IRQHandler+0x16c>
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	f06f 0201 	mvn.w	r2, #1
 8009b38:	611a      	str	r2, [r3, #16]
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	f7f7 fe4e 	bl	80017dc <HAL_TIM_PeriodElapsedCallback>
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d00c      	beq.n	8009b64 <HAL_TIM_IRQHandler+0x190>
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d007      	beq.n	8009b64 <HAL_TIM_IRQHandler+0x190>
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8009b5c:	611a      	str	r2, [r3, #16]
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f000 fcca 	bl	800a4f8 <HAL_TIMEx_BreakCallback>
 8009b64:	68bb      	ldr	r3, [r7, #8]
 8009b66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d00c      	beq.n	8009b88 <HAL_TIM_IRQHandler+0x1b4>
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d007      	beq.n	8009b88 <HAL_TIM_IRQHandler+0x1b4>
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009b80:	611a      	str	r2, [r3, #16]
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f000 f9d2 	bl	8009f2c <HAL_TIM_TriggerCallback>
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	f003 0320 	and.w	r3, r3, #32
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d00c      	beq.n	8009bac <HAL_TIM_IRQHandler+0x1d8>
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	f003 0320 	and.w	r3, r3, #32
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d007      	beq.n	8009bac <HAL_TIM_IRQHandler+0x1d8>
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f06f 0220 	mvn.w	r2, #32
 8009ba4:	611a      	str	r2, [r3, #16]
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	f000 fc9c 	bl	800a4e4 <HAL_TIMEx_CommutCallback>
 8009bac:	bf00      	nop
 8009bae:	3710      	adds	r7, #16
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	bd80      	pop	{r7, pc}

08009bb4 <HAL_TIM_IC_ConfigChannel>:
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b086      	sub	sp, #24
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	60f8      	str	r0, [r7, #12]
 8009bbc:	60b9      	str	r1, [r7, #8]
 8009bbe:	607a      	str	r2, [r7, #4]
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	75fb      	strb	r3, [r7, #23]
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009bca:	2b01      	cmp	r3, #1
 8009bcc:	d101      	bne.n	8009bd2 <HAL_TIM_IC_ConfigChannel+0x1e>
 8009bce:	2302      	movs	r3, #2
 8009bd0:	e088      	b.n	8009ce4 <HAL_TIM_IC_ConfigChannel+0x130>
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	2201      	movs	r2, #1
 8009bd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d11b      	bne.n	8009c18 <HAL_TIM_IC_ConfigChannel+0x64>
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	6818      	ldr	r0, [r3, #0]
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	6819      	ldr	r1, [r3, #0]
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	685a      	ldr	r2, [r3, #4]
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	68db      	ldr	r3, [r3, #12]
 8009bf0:	f000 fa2c 	bl	800a04c <TIM_TI1_SetConfig>
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	699a      	ldr	r2, [r3, #24]
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f022 020c 	bic.w	r2, r2, #12
 8009c02:	619a      	str	r2, [r3, #24]
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	6999      	ldr	r1, [r3, #24]
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	689a      	ldr	r2, [r3, #8]
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	430a      	orrs	r2, r1
 8009c14:	619a      	str	r2, [r3, #24]
 8009c16:	e060      	b.n	8009cda <HAL_TIM_IC_ConfigChannel+0x126>
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2b04      	cmp	r3, #4
 8009c1c:	d11c      	bne.n	8009c58 <HAL_TIM_IC_ConfigChannel+0xa4>
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	6818      	ldr	r0, [r3, #0]
 8009c22:	68bb      	ldr	r3, [r7, #8]
 8009c24:	6819      	ldr	r1, [r3, #0]
 8009c26:	68bb      	ldr	r3, [r7, #8]
 8009c28:	685a      	ldr	r2, [r3, #4]
 8009c2a:	68bb      	ldr	r3, [r7, #8]
 8009c2c:	68db      	ldr	r3, [r3, #12]
 8009c2e:	f000 faa4 	bl	800a17a <TIM_TI2_SetConfig>
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	699a      	ldr	r2, [r3, #24]
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8009c40:	619a      	str	r2, [r3, #24]
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	6999      	ldr	r1, [r3, #24]
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	689b      	ldr	r3, [r3, #8]
 8009c4c:	021a      	lsls	r2, r3, #8
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	430a      	orrs	r2, r1
 8009c54:	619a      	str	r2, [r3, #24]
 8009c56:	e040      	b.n	8009cda <HAL_TIM_IC_ConfigChannel+0x126>
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2b08      	cmp	r3, #8
 8009c5c:	d11b      	bne.n	8009c96 <HAL_TIM_IC_ConfigChannel+0xe2>
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	6818      	ldr	r0, [r3, #0]
 8009c62:	68bb      	ldr	r3, [r7, #8]
 8009c64:	6819      	ldr	r1, [r3, #0]
 8009c66:	68bb      	ldr	r3, [r7, #8]
 8009c68:	685a      	ldr	r2, [r3, #4]
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	68db      	ldr	r3, [r3, #12]
 8009c6e:	f000 faf1 	bl	800a254 <TIM_TI3_SetConfig>
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	69da      	ldr	r2, [r3, #28]
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	f022 020c 	bic.w	r2, r2, #12
 8009c80:	61da      	str	r2, [r3, #28]
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	69d9      	ldr	r1, [r3, #28]
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	689a      	ldr	r2, [r3, #8]
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	430a      	orrs	r2, r1
 8009c92:	61da      	str	r2, [r3, #28]
 8009c94:	e021      	b.n	8009cda <HAL_TIM_IC_ConfigChannel+0x126>
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2b0c      	cmp	r3, #12
 8009c9a:	d11c      	bne.n	8009cd6 <HAL_TIM_IC_ConfigChannel+0x122>
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	6818      	ldr	r0, [r3, #0]
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	6819      	ldr	r1, [r3, #0]
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	685a      	ldr	r2, [r3, #4]
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	68db      	ldr	r3, [r3, #12]
 8009cac:	f000 fb0e 	bl	800a2cc <TIM_TI4_SetConfig>
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	69da      	ldr	r2, [r3, #28]
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8009cbe:	61da      	str	r2, [r3, #28]
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	69d9      	ldr	r1, [r3, #28]
 8009cc6:	68bb      	ldr	r3, [r7, #8]
 8009cc8:	689b      	ldr	r3, [r3, #8]
 8009cca:	021a      	lsls	r2, r3, #8
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	430a      	orrs	r2, r1
 8009cd2:	61da      	str	r2, [r3, #28]
 8009cd4:	e001      	b.n	8009cda <HAL_TIM_IC_ConfigChannel+0x126>
 8009cd6:	2301      	movs	r3, #1
 8009cd8:	75fb      	strb	r3, [r7, #23]
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	2200      	movs	r2, #0
 8009cde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8009ce2:	7dfb      	ldrb	r3, [r7, #23]
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	3718      	adds	r7, #24
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd80      	pop	{r7, pc}

08009cec <HAL_TIM_ConfigClockSource>:
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b084      	sub	sp, #16
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
 8009cf4:	6039      	str	r1, [r7, #0]
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	73fb      	strb	r3, [r7, #15]
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009d00:	2b01      	cmp	r3, #1
 8009d02:	d101      	bne.n	8009d08 <HAL_TIM_ConfigClockSource+0x1c>
 8009d04:	2302      	movs	r3, #2
 8009d06:	e0b4      	b.n	8009e72 <HAL_TIM_ConfigClockSource+0x186>
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2201      	movs	r2, #1
 8009d0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2202      	movs	r2, #2
 8009d14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	689b      	ldr	r3, [r3, #8]
 8009d1e:	60bb      	str	r3, [r7, #8]
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009d26:	60bb      	str	r3, [r7, #8]
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009d2e:	60bb      	str	r3, [r7, #8]
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	68ba      	ldr	r2, [r7, #8]
 8009d36:	609a      	str	r2, [r3, #8]
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009d40:	d03e      	beq.n	8009dc0 <HAL_TIM_ConfigClockSource+0xd4>
 8009d42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009d46:	f200 8087 	bhi.w	8009e58 <HAL_TIM_ConfigClockSource+0x16c>
 8009d4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d4e:	f000 8086 	beq.w	8009e5e <HAL_TIM_ConfigClockSource+0x172>
 8009d52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d56:	d87f      	bhi.n	8009e58 <HAL_TIM_ConfigClockSource+0x16c>
 8009d58:	2b70      	cmp	r3, #112	@ 0x70
 8009d5a:	d01a      	beq.n	8009d92 <HAL_TIM_ConfigClockSource+0xa6>
 8009d5c:	2b70      	cmp	r3, #112	@ 0x70
 8009d5e:	d87b      	bhi.n	8009e58 <HAL_TIM_ConfigClockSource+0x16c>
 8009d60:	2b60      	cmp	r3, #96	@ 0x60
 8009d62:	d050      	beq.n	8009e06 <HAL_TIM_ConfigClockSource+0x11a>
 8009d64:	2b60      	cmp	r3, #96	@ 0x60
 8009d66:	d877      	bhi.n	8009e58 <HAL_TIM_ConfigClockSource+0x16c>
 8009d68:	2b50      	cmp	r3, #80	@ 0x50
 8009d6a:	d03c      	beq.n	8009de6 <HAL_TIM_ConfigClockSource+0xfa>
 8009d6c:	2b50      	cmp	r3, #80	@ 0x50
 8009d6e:	d873      	bhi.n	8009e58 <HAL_TIM_ConfigClockSource+0x16c>
 8009d70:	2b40      	cmp	r3, #64	@ 0x40
 8009d72:	d058      	beq.n	8009e26 <HAL_TIM_ConfigClockSource+0x13a>
 8009d74:	2b40      	cmp	r3, #64	@ 0x40
 8009d76:	d86f      	bhi.n	8009e58 <HAL_TIM_ConfigClockSource+0x16c>
 8009d78:	2b30      	cmp	r3, #48	@ 0x30
 8009d7a:	d064      	beq.n	8009e46 <HAL_TIM_ConfigClockSource+0x15a>
 8009d7c:	2b30      	cmp	r3, #48	@ 0x30
 8009d7e:	d86b      	bhi.n	8009e58 <HAL_TIM_ConfigClockSource+0x16c>
 8009d80:	2b20      	cmp	r3, #32
 8009d82:	d060      	beq.n	8009e46 <HAL_TIM_ConfigClockSource+0x15a>
 8009d84:	2b20      	cmp	r3, #32
 8009d86:	d867      	bhi.n	8009e58 <HAL_TIM_ConfigClockSource+0x16c>
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d05c      	beq.n	8009e46 <HAL_TIM_ConfigClockSource+0x15a>
 8009d8c:	2b10      	cmp	r3, #16
 8009d8e:	d05a      	beq.n	8009e46 <HAL_TIM_ConfigClockSource+0x15a>
 8009d90:	e062      	b.n	8009e58 <HAL_TIM_ConfigClockSource+0x16c>
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	6818      	ldr	r0, [r3, #0]
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	6899      	ldr	r1, [r3, #8]
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	685a      	ldr	r2, [r3, #4]
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	68db      	ldr	r3, [r3, #12]
 8009da2:	f000 faeb 	bl	800a37c <TIM_ETR_SetConfig>
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	689b      	ldr	r3, [r3, #8]
 8009dac:	60bb      	str	r3, [r7, #8]
 8009dae:	68bb      	ldr	r3, [r7, #8]
 8009db0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009db4:	60bb      	str	r3, [r7, #8]
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	68ba      	ldr	r2, [r7, #8]
 8009dbc:	609a      	str	r2, [r3, #8]
 8009dbe:	e04f      	b.n	8009e60 <HAL_TIM_ConfigClockSource+0x174>
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	6818      	ldr	r0, [r3, #0]
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	6899      	ldr	r1, [r3, #8]
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	685a      	ldr	r2, [r3, #4]
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	68db      	ldr	r3, [r3, #12]
 8009dd0:	f000 fad4 	bl	800a37c <TIM_ETR_SetConfig>
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	689a      	ldr	r2, [r3, #8]
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009de2:	609a      	str	r2, [r3, #8]
 8009de4:	e03c      	b.n	8009e60 <HAL_TIM_ConfigClockSource+0x174>
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	6818      	ldr	r0, [r3, #0]
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	6859      	ldr	r1, [r3, #4]
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	68db      	ldr	r3, [r3, #12]
 8009df2:	461a      	mov	r2, r3
 8009df4:	f000 f992 	bl	800a11c <TIM_TI1_ConfigInputStage>
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	2150      	movs	r1, #80	@ 0x50
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f000 faa1 	bl	800a346 <TIM_ITRx_SetConfig>
 8009e04:	e02c      	b.n	8009e60 <HAL_TIM_ConfigClockSource+0x174>
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6818      	ldr	r0, [r3, #0]
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	6859      	ldr	r1, [r3, #4]
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	68db      	ldr	r3, [r3, #12]
 8009e12:	461a      	mov	r2, r3
 8009e14:	f000 f9ee 	bl	800a1f4 <TIM_TI2_ConfigInputStage>
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	2160      	movs	r1, #96	@ 0x60
 8009e1e:	4618      	mov	r0, r3
 8009e20:	f000 fa91 	bl	800a346 <TIM_ITRx_SetConfig>
 8009e24:	e01c      	b.n	8009e60 <HAL_TIM_ConfigClockSource+0x174>
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	6818      	ldr	r0, [r3, #0]
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	6859      	ldr	r1, [r3, #4]
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	68db      	ldr	r3, [r3, #12]
 8009e32:	461a      	mov	r2, r3
 8009e34:	f000 f972 	bl	800a11c <TIM_TI1_ConfigInputStage>
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	2140      	movs	r1, #64	@ 0x40
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f000 fa81 	bl	800a346 <TIM_ITRx_SetConfig>
 8009e44:	e00c      	b.n	8009e60 <HAL_TIM_ConfigClockSource+0x174>
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681a      	ldr	r2, [r3, #0]
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	4619      	mov	r1, r3
 8009e50:	4610      	mov	r0, r2
 8009e52:	f000 fa78 	bl	800a346 <TIM_ITRx_SetConfig>
 8009e56:	e003      	b.n	8009e60 <HAL_TIM_ConfigClockSource+0x174>
 8009e58:	2301      	movs	r3, #1
 8009e5a:	73fb      	strb	r3, [r7, #15]
 8009e5c:	e000      	b.n	8009e60 <HAL_TIM_ConfigClockSource+0x174>
 8009e5e:	bf00      	nop
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2201      	movs	r2, #1
 8009e64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8009e70:	7bfb      	ldrb	r3, [r7, #15]
 8009e72:	4618      	mov	r0, r3
 8009e74:	3710      	adds	r7, #16
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd80      	pop	{r7, pc}
	...

08009e7c <HAL_TIM_ReadCapturedValue>:
 8009e7c:	b480      	push	{r7}
 8009e7e:	b085      	sub	sp, #20
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
 8009e84:	6039      	str	r1, [r7, #0]
 8009e86:	2300      	movs	r3, #0
 8009e88:	60fb      	str	r3, [r7, #12]
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	2b0c      	cmp	r3, #12
 8009e8e:	d831      	bhi.n	8009ef4 <HAL_TIM_ReadCapturedValue+0x78>
 8009e90:	a201      	add	r2, pc, #4	@ (adr r2, 8009e98 <HAL_TIM_ReadCapturedValue+0x1c>)
 8009e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e96:	bf00      	nop
 8009e98:	08009ecd 	.word	0x08009ecd
 8009e9c:	08009ef5 	.word	0x08009ef5
 8009ea0:	08009ef5 	.word	0x08009ef5
 8009ea4:	08009ef5 	.word	0x08009ef5
 8009ea8:	08009ed7 	.word	0x08009ed7
 8009eac:	08009ef5 	.word	0x08009ef5
 8009eb0:	08009ef5 	.word	0x08009ef5
 8009eb4:	08009ef5 	.word	0x08009ef5
 8009eb8:	08009ee1 	.word	0x08009ee1
 8009ebc:	08009ef5 	.word	0x08009ef5
 8009ec0:	08009ef5 	.word	0x08009ef5
 8009ec4:	08009ef5 	.word	0x08009ef5
 8009ec8:	08009eeb 	.word	0x08009eeb
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ed2:	60fb      	str	r3, [r7, #12]
 8009ed4:	e00f      	b.n	8009ef6 <HAL_TIM_ReadCapturedValue+0x7a>
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009edc:	60fb      	str	r3, [r7, #12]
 8009ede:	e00a      	b.n	8009ef6 <HAL_TIM_ReadCapturedValue+0x7a>
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ee6:	60fb      	str	r3, [r7, #12]
 8009ee8:	e005      	b.n	8009ef6 <HAL_TIM_ReadCapturedValue+0x7a>
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ef0:	60fb      	str	r3, [r7, #12]
 8009ef2:	e000      	b.n	8009ef6 <HAL_TIM_ReadCapturedValue+0x7a>
 8009ef4:	bf00      	nop
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	4618      	mov	r0, r3
 8009efa:	3714      	adds	r7, #20
 8009efc:	46bd      	mov	sp, r7
 8009efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f02:	4770      	bx	lr

08009f04 <HAL_TIM_OC_DelayElapsedCallback>:
 8009f04:	b480      	push	{r7}
 8009f06:	b083      	sub	sp, #12
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
 8009f0c:	bf00      	nop
 8009f0e:	370c      	adds	r7, #12
 8009f10:	46bd      	mov	sp, r7
 8009f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f16:	4770      	bx	lr

08009f18 <HAL_TIM_PWM_PulseFinishedCallback>:
 8009f18:	b480      	push	{r7}
 8009f1a:	b083      	sub	sp, #12
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
 8009f20:	bf00      	nop
 8009f22:	370c      	adds	r7, #12
 8009f24:	46bd      	mov	sp, r7
 8009f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2a:	4770      	bx	lr

08009f2c <HAL_TIM_TriggerCallback>:
 8009f2c:	b480      	push	{r7}
 8009f2e:	b083      	sub	sp, #12
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
 8009f34:	bf00      	nop
 8009f36:	370c      	adds	r7, #12
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3e:	4770      	bx	lr

08009f40 <TIM_Base_SetConfig>:
 8009f40:	b480      	push	{r7}
 8009f42:	b085      	sub	sp, #20
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
 8009f48:	6039      	str	r1, [r7, #0]
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	60fb      	str	r3, [r7, #12]
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	4a37      	ldr	r2, [pc, #220]	@ (800a030 <TIM_Base_SetConfig+0xf0>)
 8009f54:	4293      	cmp	r3, r2
 8009f56:	d00f      	beq.n	8009f78 <TIM_Base_SetConfig+0x38>
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f5e:	d00b      	beq.n	8009f78 <TIM_Base_SetConfig+0x38>
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	4a34      	ldr	r2, [pc, #208]	@ (800a034 <TIM_Base_SetConfig+0xf4>)
 8009f64:	4293      	cmp	r3, r2
 8009f66:	d007      	beq.n	8009f78 <TIM_Base_SetConfig+0x38>
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	4a33      	ldr	r2, [pc, #204]	@ (800a038 <TIM_Base_SetConfig+0xf8>)
 8009f6c:	4293      	cmp	r3, r2
 8009f6e:	d003      	beq.n	8009f78 <TIM_Base_SetConfig+0x38>
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	4a32      	ldr	r2, [pc, #200]	@ (800a03c <TIM_Base_SetConfig+0xfc>)
 8009f74:	4293      	cmp	r3, r2
 8009f76:	d108      	bne.n	8009f8a <TIM_Base_SetConfig+0x4a>
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f7e:	60fb      	str	r3, [r7, #12]
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	685b      	ldr	r3, [r3, #4]
 8009f84:	68fa      	ldr	r2, [r7, #12]
 8009f86:	4313      	orrs	r3, r2
 8009f88:	60fb      	str	r3, [r7, #12]
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	4a28      	ldr	r2, [pc, #160]	@ (800a030 <TIM_Base_SetConfig+0xf0>)
 8009f8e:	4293      	cmp	r3, r2
 8009f90:	d01b      	beq.n	8009fca <TIM_Base_SetConfig+0x8a>
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f98:	d017      	beq.n	8009fca <TIM_Base_SetConfig+0x8a>
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	4a25      	ldr	r2, [pc, #148]	@ (800a034 <TIM_Base_SetConfig+0xf4>)
 8009f9e:	4293      	cmp	r3, r2
 8009fa0:	d013      	beq.n	8009fca <TIM_Base_SetConfig+0x8a>
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	4a24      	ldr	r2, [pc, #144]	@ (800a038 <TIM_Base_SetConfig+0xf8>)
 8009fa6:	4293      	cmp	r3, r2
 8009fa8:	d00f      	beq.n	8009fca <TIM_Base_SetConfig+0x8a>
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	4a23      	ldr	r2, [pc, #140]	@ (800a03c <TIM_Base_SetConfig+0xfc>)
 8009fae:	4293      	cmp	r3, r2
 8009fb0:	d00b      	beq.n	8009fca <TIM_Base_SetConfig+0x8a>
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	4a22      	ldr	r2, [pc, #136]	@ (800a040 <TIM_Base_SetConfig+0x100>)
 8009fb6:	4293      	cmp	r3, r2
 8009fb8:	d007      	beq.n	8009fca <TIM_Base_SetConfig+0x8a>
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	4a21      	ldr	r2, [pc, #132]	@ (800a044 <TIM_Base_SetConfig+0x104>)
 8009fbe:	4293      	cmp	r3, r2
 8009fc0:	d003      	beq.n	8009fca <TIM_Base_SetConfig+0x8a>
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	4a20      	ldr	r2, [pc, #128]	@ (800a048 <TIM_Base_SetConfig+0x108>)
 8009fc6:	4293      	cmp	r3, r2
 8009fc8:	d108      	bne.n	8009fdc <TIM_Base_SetConfig+0x9c>
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009fd0:	60fb      	str	r3, [r7, #12]
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	68db      	ldr	r3, [r3, #12]
 8009fd6:	68fa      	ldr	r2, [r7, #12]
 8009fd8:	4313      	orrs	r3, r2
 8009fda:	60fb      	str	r3, [r7, #12]
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009fe2:	683b      	ldr	r3, [r7, #0]
 8009fe4:	695b      	ldr	r3, [r3, #20]
 8009fe6:	4313      	orrs	r3, r2
 8009fe8:	60fb      	str	r3, [r7, #12]
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	689a      	ldr	r2, [r3, #8]
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	681a      	ldr	r2, [r3, #0]
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	629a      	str	r2, [r3, #40]	@ 0x28
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	4a0c      	ldr	r2, [pc, #48]	@ (800a030 <TIM_Base_SetConfig+0xf0>)
 8009ffe:	4293      	cmp	r3, r2
 800a000:	d103      	bne.n	800a00a <TIM_Base_SetConfig+0xca>
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	691a      	ldr	r2, [r3, #16]
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	631a      	str	r2, [r3, #48]	@ 0x30
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	f043 0204 	orr.w	r2, r3, #4
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	601a      	str	r2, [r3, #0]
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	2201      	movs	r2, #1
 800a01a:	615a      	str	r2, [r3, #20]
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	68fa      	ldr	r2, [r7, #12]
 800a020:	601a      	str	r2, [r3, #0]
 800a022:	bf00      	nop
 800a024:	3714      	adds	r7, #20
 800a026:	46bd      	mov	sp, r7
 800a028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02c:	4770      	bx	lr
 800a02e:	bf00      	nop
 800a030:	40010000 	.word	0x40010000
 800a034:	40000400 	.word	0x40000400
 800a038:	40000800 	.word	0x40000800
 800a03c:	40000c00 	.word	0x40000c00
 800a040:	40014000 	.word	0x40014000
 800a044:	40014400 	.word	0x40014400
 800a048:	40014800 	.word	0x40014800

0800a04c <TIM_TI1_SetConfig>:
 800a04c:	b480      	push	{r7}
 800a04e:	b087      	sub	sp, #28
 800a050:	af00      	add	r7, sp, #0
 800a052:	60f8      	str	r0, [r7, #12]
 800a054:	60b9      	str	r1, [r7, #8]
 800a056:	607a      	str	r2, [r7, #4]
 800a058:	603b      	str	r3, [r7, #0]
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	6a1b      	ldr	r3, [r3, #32]
 800a05e:	613b      	str	r3, [r7, #16]
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	6a1b      	ldr	r3, [r3, #32]
 800a064:	f023 0201 	bic.w	r2, r3, #1
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	621a      	str	r2, [r3, #32]
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	699b      	ldr	r3, [r3, #24]
 800a070:	617b      	str	r3, [r7, #20]
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	4a24      	ldr	r2, [pc, #144]	@ (800a108 <TIM_TI1_SetConfig+0xbc>)
 800a076:	4293      	cmp	r3, r2
 800a078:	d013      	beq.n	800a0a2 <TIM_TI1_SetConfig+0x56>
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a080:	d00f      	beq.n	800a0a2 <TIM_TI1_SetConfig+0x56>
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	4a21      	ldr	r2, [pc, #132]	@ (800a10c <TIM_TI1_SetConfig+0xc0>)
 800a086:	4293      	cmp	r3, r2
 800a088:	d00b      	beq.n	800a0a2 <TIM_TI1_SetConfig+0x56>
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	4a20      	ldr	r2, [pc, #128]	@ (800a110 <TIM_TI1_SetConfig+0xc4>)
 800a08e:	4293      	cmp	r3, r2
 800a090:	d007      	beq.n	800a0a2 <TIM_TI1_SetConfig+0x56>
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	4a1f      	ldr	r2, [pc, #124]	@ (800a114 <TIM_TI1_SetConfig+0xc8>)
 800a096:	4293      	cmp	r3, r2
 800a098:	d003      	beq.n	800a0a2 <TIM_TI1_SetConfig+0x56>
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	4a1e      	ldr	r2, [pc, #120]	@ (800a118 <TIM_TI1_SetConfig+0xcc>)
 800a09e:	4293      	cmp	r3, r2
 800a0a0:	d101      	bne.n	800a0a6 <TIM_TI1_SetConfig+0x5a>
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	e000      	b.n	800a0a8 <TIM_TI1_SetConfig+0x5c>
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d008      	beq.n	800a0be <TIM_TI1_SetConfig+0x72>
 800a0ac:	697b      	ldr	r3, [r7, #20]
 800a0ae:	f023 0303 	bic.w	r3, r3, #3
 800a0b2:	617b      	str	r3, [r7, #20]
 800a0b4:	697a      	ldr	r2, [r7, #20]
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	4313      	orrs	r3, r2
 800a0ba:	617b      	str	r3, [r7, #20]
 800a0bc:	e003      	b.n	800a0c6 <TIM_TI1_SetConfig+0x7a>
 800a0be:	697b      	ldr	r3, [r7, #20]
 800a0c0:	f043 0301 	orr.w	r3, r3, #1
 800a0c4:	617b      	str	r3, [r7, #20]
 800a0c6:	697b      	ldr	r3, [r7, #20]
 800a0c8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a0cc:	617b      	str	r3, [r7, #20]
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	011b      	lsls	r3, r3, #4
 800a0d2:	b2db      	uxtb	r3, r3
 800a0d4:	697a      	ldr	r2, [r7, #20]
 800a0d6:	4313      	orrs	r3, r2
 800a0d8:	617b      	str	r3, [r7, #20]
 800a0da:	693b      	ldr	r3, [r7, #16]
 800a0dc:	f023 030a 	bic.w	r3, r3, #10
 800a0e0:	613b      	str	r3, [r7, #16]
 800a0e2:	68bb      	ldr	r3, [r7, #8]
 800a0e4:	f003 030a 	and.w	r3, r3, #10
 800a0e8:	693a      	ldr	r2, [r7, #16]
 800a0ea:	4313      	orrs	r3, r2
 800a0ec:	613b      	str	r3, [r7, #16]
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	697a      	ldr	r2, [r7, #20]
 800a0f2:	619a      	str	r2, [r3, #24]
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	693a      	ldr	r2, [r7, #16]
 800a0f8:	621a      	str	r2, [r3, #32]
 800a0fa:	bf00      	nop
 800a0fc:	371c      	adds	r7, #28
 800a0fe:	46bd      	mov	sp, r7
 800a100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a104:	4770      	bx	lr
 800a106:	bf00      	nop
 800a108:	40010000 	.word	0x40010000
 800a10c:	40000400 	.word	0x40000400
 800a110:	40000800 	.word	0x40000800
 800a114:	40000c00 	.word	0x40000c00
 800a118:	40014000 	.word	0x40014000

0800a11c <TIM_TI1_ConfigInputStage>:
 800a11c:	b480      	push	{r7}
 800a11e:	b087      	sub	sp, #28
 800a120:	af00      	add	r7, sp, #0
 800a122:	60f8      	str	r0, [r7, #12]
 800a124:	60b9      	str	r1, [r7, #8]
 800a126:	607a      	str	r2, [r7, #4]
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	6a1b      	ldr	r3, [r3, #32]
 800a12c:	617b      	str	r3, [r7, #20]
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	6a1b      	ldr	r3, [r3, #32]
 800a132:	f023 0201 	bic.w	r2, r3, #1
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	621a      	str	r2, [r3, #32]
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	699b      	ldr	r3, [r3, #24]
 800a13e:	613b      	str	r3, [r7, #16]
 800a140:	693b      	ldr	r3, [r7, #16]
 800a142:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a146:	613b      	str	r3, [r7, #16]
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	011b      	lsls	r3, r3, #4
 800a14c:	693a      	ldr	r2, [r7, #16]
 800a14e:	4313      	orrs	r3, r2
 800a150:	613b      	str	r3, [r7, #16]
 800a152:	697b      	ldr	r3, [r7, #20]
 800a154:	f023 030a 	bic.w	r3, r3, #10
 800a158:	617b      	str	r3, [r7, #20]
 800a15a:	697a      	ldr	r2, [r7, #20]
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	4313      	orrs	r3, r2
 800a160:	617b      	str	r3, [r7, #20]
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	693a      	ldr	r2, [r7, #16]
 800a166:	619a      	str	r2, [r3, #24]
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	697a      	ldr	r2, [r7, #20]
 800a16c:	621a      	str	r2, [r3, #32]
 800a16e:	bf00      	nop
 800a170:	371c      	adds	r7, #28
 800a172:	46bd      	mov	sp, r7
 800a174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a178:	4770      	bx	lr

0800a17a <TIM_TI2_SetConfig>:
 800a17a:	b480      	push	{r7}
 800a17c:	b087      	sub	sp, #28
 800a17e:	af00      	add	r7, sp, #0
 800a180:	60f8      	str	r0, [r7, #12]
 800a182:	60b9      	str	r1, [r7, #8]
 800a184:	607a      	str	r2, [r7, #4]
 800a186:	603b      	str	r3, [r7, #0]
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	6a1b      	ldr	r3, [r3, #32]
 800a18c:	617b      	str	r3, [r7, #20]
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	6a1b      	ldr	r3, [r3, #32]
 800a192:	f023 0210 	bic.w	r2, r3, #16
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	621a      	str	r2, [r3, #32]
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	699b      	ldr	r3, [r3, #24]
 800a19e:	613b      	str	r3, [r7, #16]
 800a1a0:	693b      	ldr	r3, [r7, #16]
 800a1a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a1a6:	613b      	str	r3, [r7, #16]
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	021b      	lsls	r3, r3, #8
 800a1ac:	693a      	ldr	r2, [r7, #16]
 800a1ae:	4313      	orrs	r3, r2
 800a1b0:	613b      	str	r3, [r7, #16]
 800a1b2:	693b      	ldr	r3, [r7, #16]
 800a1b4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a1b8:	613b      	str	r3, [r7, #16]
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	031b      	lsls	r3, r3, #12
 800a1be:	b29b      	uxth	r3, r3
 800a1c0:	693a      	ldr	r2, [r7, #16]
 800a1c2:	4313      	orrs	r3, r2
 800a1c4:	613b      	str	r3, [r7, #16]
 800a1c6:	697b      	ldr	r3, [r7, #20]
 800a1c8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a1cc:	617b      	str	r3, [r7, #20]
 800a1ce:	68bb      	ldr	r3, [r7, #8]
 800a1d0:	011b      	lsls	r3, r3, #4
 800a1d2:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800a1d6:	697a      	ldr	r2, [r7, #20]
 800a1d8:	4313      	orrs	r3, r2
 800a1da:	617b      	str	r3, [r7, #20]
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	693a      	ldr	r2, [r7, #16]
 800a1e0:	619a      	str	r2, [r3, #24]
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	697a      	ldr	r2, [r7, #20]
 800a1e6:	621a      	str	r2, [r3, #32]
 800a1e8:	bf00      	nop
 800a1ea:	371c      	adds	r7, #28
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f2:	4770      	bx	lr

0800a1f4 <TIM_TI2_ConfigInputStage>:
 800a1f4:	b480      	push	{r7}
 800a1f6:	b087      	sub	sp, #28
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	60f8      	str	r0, [r7, #12]
 800a1fc:	60b9      	str	r1, [r7, #8]
 800a1fe:	607a      	str	r2, [r7, #4]
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	6a1b      	ldr	r3, [r3, #32]
 800a204:	617b      	str	r3, [r7, #20]
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	6a1b      	ldr	r3, [r3, #32]
 800a20a:	f023 0210 	bic.w	r2, r3, #16
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	621a      	str	r2, [r3, #32]
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	699b      	ldr	r3, [r3, #24]
 800a216:	613b      	str	r3, [r7, #16]
 800a218:	693b      	ldr	r3, [r7, #16]
 800a21a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a21e:	613b      	str	r3, [r7, #16]
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	031b      	lsls	r3, r3, #12
 800a224:	693a      	ldr	r2, [r7, #16]
 800a226:	4313      	orrs	r3, r2
 800a228:	613b      	str	r3, [r7, #16]
 800a22a:	697b      	ldr	r3, [r7, #20]
 800a22c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a230:	617b      	str	r3, [r7, #20]
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	011b      	lsls	r3, r3, #4
 800a236:	697a      	ldr	r2, [r7, #20]
 800a238:	4313      	orrs	r3, r2
 800a23a:	617b      	str	r3, [r7, #20]
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	693a      	ldr	r2, [r7, #16]
 800a240:	619a      	str	r2, [r3, #24]
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	697a      	ldr	r2, [r7, #20]
 800a246:	621a      	str	r2, [r3, #32]
 800a248:	bf00      	nop
 800a24a:	371c      	adds	r7, #28
 800a24c:	46bd      	mov	sp, r7
 800a24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a252:	4770      	bx	lr

0800a254 <TIM_TI3_SetConfig>:
 800a254:	b480      	push	{r7}
 800a256:	b087      	sub	sp, #28
 800a258:	af00      	add	r7, sp, #0
 800a25a:	60f8      	str	r0, [r7, #12]
 800a25c:	60b9      	str	r1, [r7, #8]
 800a25e:	607a      	str	r2, [r7, #4]
 800a260:	603b      	str	r3, [r7, #0]
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	6a1b      	ldr	r3, [r3, #32]
 800a266:	617b      	str	r3, [r7, #20]
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	6a1b      	ldr	r3, [r3, #32]
 800a26c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	621a      	str	r2, [r3, #32]
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	69db      	ldr	r3, [r3, #28]
 800a278:	613b      	str	r3, [r7, #16]
 800a27a:	693b      	ldr	r3, [r7, #16]
 800a27c:	f023 0303 	bic.w	r3, r3, #3
 800a280:	613b      	str	r3, [r7, #16]
 800a282:	693a      	ldr	r2, [r7, #16]
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	4313      	orrs	r3, r2
 800a288:	613b      	str	r3, [r7, #16]
 800a28a:	693b      	ldr	r3, [r7, #16]
 800a28c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a290:	613b      	str	r3, [r7, #16]
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	011b      	lsls	r3, r3, #4
 800a296:	b2db      	uxtb	r3, r3
 800a298:	693a      	ldr	r2, [r7, #16]
 800a29a:	4313      	orrs	r3, r2
 800a29c:	613b      	str	r3, [r7, #16]
 800a29e:	697b      	ldr	r3, [r7, #20]
 800a2a0:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800a2a4:	617b      	str	r3, [r7, #20]
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	021b      	lsls	r3, r3, #8
 800a2aa:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800a2ae:	697a      	ldr	r2, [r7, #20]
 800a2b0:	4313      	orrs	r3, r2
 800a2b2:	617b      	str	r3, [r7, #20]
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	693a      	ldr	r2, [r7, #16]
 800a2b8:	61da      	str	r2, [r3, #28]
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	697a      	ldr	r2, [r7, #20]
 800a2be:	621a      	str	r2, [r3, #32]
 800a2c0:	bf00      	nop
 800a2c2:	371c      	adds	r7, #28
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ca:	4770      	bx	lr

0800a2cc <TIM_TI4_SetConfig>:
 800a2cc:	b480      	push	{r7}
 800a2ce:	b087      	sub	sp, #28
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	60f8      	str	r0, [r7, #12]
 800a2d4:	60b9      	str	r1, [r7, #8]
 800a2d6:	607a      	str	r2, [r7, #4]
 800a2d8:	603b      	str	r3, [r7, #0]
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	6a1b      	ldr	r3, [r3, #32]
 800a2de:	617b      	str	r3, [r7, #20]
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	6a1b      	ldr	r3, [r3, #32]
 800a2e4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	621a      	str	r2, [r3, #32]
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	69db      	ldr	r3, [r3, #28]
 800a2f0:	613b      	str	r3, [r7, #16]
 800a2f2:	693b      	ldr	r3, [r7, #16]
 800a2f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a2f8:	613b      	str	r3, [r7, #16]
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	021b      	lsls	r3, r3, #8
 800a2fe:	693a      	ldr	r2, [r7, #16]
 800a300:	4313      	orrs	r3, r2
 800a302:	613b      	str	r3, [r7, #16]
 800a304:	693b      	ldr	r3, [r7, #16]
 800a306:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a30a:	613b      	str	r3, [r7, #16]
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	031b      	lsls	r3, r3, #12
 800a310:	b29b      	uxth	r3, r3
 800a312:	693a      	ldr	r2, [r7, #16]
 800a314:	4313      	orrs	r3, r2
 800a316:	613b      	str	r3, [r7, #16]
 800a318:	697b      	ldr	r3, [r7, #20]
 800a31a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800a31e:	617b      	str	r3, [r7, #20]
 800a320:	68bb      	ldr	r3, [r7, #8]
 800a322:	031b      	lsls	r3, r3, #12
 800a324:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800a328:	697a      	ldr	r2, [r7, #20]
 800a32a:	4313      	orrs	r3, r2
 800a32c:	617b      	str	r3, [r7, #20]
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	693a      	ldr	r2, [r7, #16]
 800a332:	61da      	str	r2, [r3, #28]
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	697a      	ldr	r2, [r7, #20]
 800a338:	621a      	str	r2, [r3, #32]
 800a33a:	bf00      	nop
 800a33c:	371c      	adds	r7, #28
 800a33e:	46bd      	mov	sp, r7
 800a340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a344:	4770      	bx	lr

0800a346 <TIM_ITRx_SetConfig>:
 800a346:	b480      	push	{r7}
 800a348:	b085      	sub	sp, #20
 800a34a:	af00      	add	r7, sp, #0
 800a34c:	6078      	str	r0, [r7, #4]
 800a34e:	6039      	str	r1, [r7, #0]
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	689b      	ldr	r3, [r3, #8]
 800a354:	60fb      	str	r3, [r7, #12]
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a35c:	60fb      	str	r3, [r7, #12]
 800a35e:	683a      	ldr	r2, [r7, #0]
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	4313      	orrs	r3, r2
 800a364:	f043 0307 	orr.w	r3, r3, #7
 800a368:	60fb      	str	r3, [r7, #12]
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	68fa      	ldr	r2, [r7, #12]
 800a36e:	609a      	str	r2, [r3, #8]
 800a370:	bf00      	nop
 800a372:	3714      	adds	r7, #20
 800a374:	46bd      	mov	sp, r7
 800a376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37a:	4770      	bx	lr

0800a37c <TIM_ETR_SetConfig>:
 800a37c:	b480      	push	{r7}
 800a37e:	b087      	sub	sp, #28
 800a380:	af00      	add	r7, sp, #0
 800a382:	60f8      	str	r0, [r7, #12]
 800a384:	60b9      	str	r1, [r7, #8]
 800a386:	607a      	str	r2, [r7, #4]
 800a388:	603b      	str	r3, [r7, #0]
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	689b      	ldr	r3, [r3, #8]
 800a38e:	617b      	str	r3, [r7, #20]
 800a390:	697b      	ldr	r3, [r7, #20]
 800a392:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a396:	617b      	str	r3, [r7, #20]
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	021a      	lsls	r2, r3, #8
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	431a      	orrs	r2, r3
 800a3a0:	68bb      	ldr	r3, [r7, #8]
 800a3a2:	4313      	orrs	r3, r2
 800a3a4:	697a      	ldr	r2, [r7, #20]
 800a3a6:	4313      	orrs	r3, r2
 800a3a8:	617b      	str	r3, [r7, #20]
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	697a      	ldr	r2, [r7, #20]
 800a3ae:	609a      	str	r2, [r3, #8]
 800a3b0:	bf00      	nop
 800a3b2:	371c      	adds	r7, #28
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ba:	4770      	bx	lr

0800a3bc <TIM_CCxChannelCmd>:
 800a3bc:	b480      	push	{r7}
 800a3be:	b087      	sub	sp, #28
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	60f8      	str	r0, [r7, #12]
 800a3c4:	60b9      	str	r1, [r7, #8]
 800a3c6:	607a      	str	r2, [r7, #4]
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	f003 031f 	and.w	r3, r3, #31
 800a3ce:	2201      	movs	r2, #1
 800a3d0:	fa02 f303 	lsl.w	r3, r2, r3
 800a3d4:	617b      	str	r3, [r7, #20]
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	6a1a      	ldr	r2, [r3, #32]
 800a3da:	697b      	ldr	r3, [r7, #20]
 800a3dc:	43db      	mvns	r3, r3
 800a3de:	401a      	ands	r2, r3
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	621a      	str	r2, [r3, #32]
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	6a1a      	ldr	r2, [r3, #32]
 800a3e8:	68bb      	ldr	r3, [r7, #8]
 800a3ea:	f003 031f 	and.w	r3, r3, #31
 800a3ee:	6879      	ldr	r1, [r7, #4]
 800a3f0:	fa01 f303 	lsl.w	r3, r1, r3
 800a3f4:	431a      	orrs	r2, r3
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	621a      	str	r2, [r3, #32]
 800a3fa:	bf00      	nop
 800a3fc:	371c      	adds	r7, #28
 800a3fe:	46bd      	mov	sp, r7
 800a400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a404:	4770      	bx	lr
	...

0800a408 <HAL_TIMEx_MasterConfigSynchronization>:
 800a408:	b480      	push	{r7}
 800a40a:	b085      	sub	sp, #20
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
 800a410:	6039      	str	r1, [r7, #0]
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a418:	2b01      	cmp	r3, #1
 800a41a:	d101      	bne.n	800a420 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a41c:	2302      	movs	r3, #2
 800a41e:	e050      	b.n	800a4c2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	2201      	movs	r2, #1
 800a424:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2202      	movs	r2, #2
 800a42c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	685b      	ldr	r3, [r3, #4]
 800a436:	60fb      	str	r3, [r7, #12]
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	689b      	ldr	r3, [r3, #8]
 800a43e:	60bb      	str	r3, [r7, #8]
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a446:	60fb      	str	r3, [r7, #12]
 800a448:	683b      	ldr	r3, [r7, #0]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	68fa      	ldr	r2, [r7, #12]
 800a44e:	4313      	orrs	r3, r2
 800a450:	60fb      	str	r3, [r7, #12]
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	68fa      	ldr	r2, [r7, #12]
 800a458:	605a      	str	r2, [r3, #4]
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	4a1c      	ldr	r2, [pc, #112]	@ (800a4d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a460:	4293      	cmp	r3, r2
 800a462:	d018      	beq.n	800a496 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a46c:	d013      	beq.n	800a496 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	4a18      	ldr	r2, [pc, #96]	@ (800a4d4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800a474:	4293      	cmp	r3, r2
 800a476:	d00e      	beq.n	800a496 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	4a16      	ldr	r2, [pc, #88]	@ (800a4d8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800a47e:	4293      	cmp	r3, r2
 800a480:	d009      	beq.n	800a496 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	4a15      	ldr	r2, [pc, #84]	@ (800a4dc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800a488:	4293      	cmp	r3, r2
 800a48a:	d004      	beq.n	800a496 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	4a13      	ldr	r2, [pc, #76]	@ (800a4e0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800a492:	4293      	cmp	r3, r2
 800a494:	d10c      	bne.n	800a4b0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 800a496:	68bb      	ldr	r3, [r7, #8]
 800a498:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a49c:	60bb      	str	r3, [r7, #8]
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	685b      	ldr	r3, [r3, #4]
 800a4a2:	68ba      	ldr	r2, [r7, #8]
 800a4a4:	4313      	orrs	r3, r2
 800a4a6:	60bb      	str	r3, [r7, #8]
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	68ba      	ldr	r2, [r7, #8]
 800a4ae:	609a      	str	r2, [r3, #8]
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2201      	movs	r2, #1
 800a4b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	3714      	adds	r7, #20
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4cc:	4770      	bx	lr
 800a4ce:	bf00      	nop
 800a4d0:	40010000 	.word	0x40010000
 800a4d4:	40000400 	.word	0x40000400
 800a4d8:	40000800 	.word	0x40000800
 800a4dc:	40000c00 	.word	0x40000c00
 800a4e0:	40014000 	.word	0x40014000

0800a4e4 <HAL_TIMEx_CommutCallback>:
 800a4e4:	b480      	push	{r7}
 800a4e6:	b083      	sub	sp, #12
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
 800a4ec:	bf00      	nop
 800a4ee:	370c      	adds	r7, #12
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f6:	4770      	bx	lr

0800a4f8 <HAL_TIMEx_BreakCallback>:
 800a4f8:	b480      	push	{r7}
 800a4fa:	b083      	sub	sp, #12
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
 800a500:	bf00      	nop
 800a502:	370c      	adds	r7, #12
 800a504:	46bd      	mov	sp, r7
 800a506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50a:	4770      	bx	lr

0800a50c <HAL_UART_Init>:
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b082      	sub	sp, #8
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d101      	bne.n	800a51e <HAL_UART_Init+0x12>
 800a51a:	2301      	movs	r3, #1
 800a51c:	e042      	b.n	800a5a4 <HAL_UART_Init+0x98>
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a524:	b2db      	uxtb	r3, r3
 800a526:	2b00      	cmp	r3, #0
 800a528:	d106      	bne.n	800a538 <HAL_UART_Init+0x2c>
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2200      	movs	r2, #0
 800a52e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	f7fc f8dc 	bl	80066f0 <HAL_UART_MspInit>
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2224      	movs	r2, #36	@ 0x24
 800a53c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	68da      	ldr	r2, [r3, #12]
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a54e:	60da      	str	r2, [r3, #12]
 800a550:	6878      	ldr	r0, [r7, #4]
 800a552:	f000 f82b 	bl	800a5ac <UART_SetConfig>
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	691a      	ldr	r2, [r3, #16]
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a564:	611a      	str	r2, [r3, #16]
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	695a      	ldr	r2, [r3, #20]
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a574:	615a      	str	r2, [r3, #20]
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	68da      	ldr	r2, [r3, #12]
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a584:	60da      	str	r2, [r3, #12]
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2200      	movs	r2, #0
 800a58a:	645a      	str	r2, [r3, #68]	@ 0x44
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2220      	movs	r2, #32
 800a590:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2220      	movs	r2, #32
 800a598:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2200      	movs	r2, #0
 800a5a0:	635a      	str	r2, [r3, #52]	@ 0x34
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	3708      	adds	r7, #8
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	bd80      	pop	{r7, pc}

0800a5ac <UART_SetConfig>:
 800a5ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a5b0:	b0c0      	sub	sp, #256	@ 0x100
 800a5b2:	af00      	add	r7, sp, #0
 800a5b4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
 800a5b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	691b      	ldr	r3, [r3, #16]
 800a5c0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800a5c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a5c8:	68d9      	ldr	r1, [r3, #12]
 800a5ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a5ce:	681a      	ldr	r2, [r3, #0]
 800a5d0:	ea40 0301 	orr.w	r3, r0, r1
 800a5d4:	6113      	str	r3, [r2, #16]
 800a5d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a5da:	689a      	ldr	r2, [r3, #8]
 800a5dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a5e0:	691b      	ldr	r3, [r3, #16]
 800a5e2:	431a      	orrs	r2, r3
 800a5e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a5e8:	695b      	ldr	r3, [r3, #20]
 800a5ea:	431a      	orrs	r2, r3
 800a5ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a5f0:	69db      	ldr	r3, [r3, #28]
 800a5f2:	4313      	orrs	r3, r2
 800a5f4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a5f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	68db      	ldr	r3, [r3, #12]
 800a600:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800a604:	f021 010c 	bic.w	r1, r1, #12
 800a608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a60c:	681a      	ldr	r2, [r3, #0]
 800a60e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a612:	430b      	orrs	r3, r1
 800a614:	60d3      	str	r3, [r2, #12]
 800a616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	695b      	ldr	r3, [r3, #20]
 800a61e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800a622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a626:	6999      	ldr	r1, [r3, #24]
 800a628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a62c:	681a      	ldr	r2, [r3, #0]
 800a62e:	ea40 0301 	orr.w	r3, r0, r1
 800a632:	6153      	str	r3, [r2, #20]
 800a634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a638:	681a      	ldr	r2, [r3, #0]
 800a63a:	4b8f      	ldr	r3, [pc, #572]	@ (800a878 <UART_SetConfig+0x2cc>)
 800a63c:	429a      	cmp	r2, r3
 800a63e:	d005      	beq.n	800a64c <UART_SetConfig+0xa0>
 800a640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a644:	681a      	ldr	r2, [r3, #0]
 800a646:	4b8d      	ldr	r3, [pc, #564]	@ (800a87c <UART_SetConfig+0x2d0>)
 800a648:	429a      	cmp	r2, r3
 800a64a:	d104      	bne.n	800a656 <UART_SetConfig+0xaa>
 800a64c:	f7fe fe52 	bl	80092f4 <HAL_RCC_GetPCLK2Freq>
 800a650:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800a654:	e003      	b.n	800a65e <UART_SetConfig+0xb2>
 800a656:	f7fe fe39 	bl	80092cc <HAL_RCC_GetPCLK1Freq>
 800a65a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800a65e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a662:	69db      	ldr	r3, [r3, #28]
 800a664:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a668:	f040 810c 	bne.w	800a884 <UART_SetConfig+0x2d8>
 800a66c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a670:	2200      	movs	r2, #0
 800a672:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a676:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800a67a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800a67e:	4622      	mov	r2, r4
 800a680:	462b      	mov	r3, r5
 800a682:	1891      	adds	r1, r2, r2
 800a684:	65b9      	str	r1, [r7, #88]	@ 0x58
 800a686:	415b      	adcs	r3, r3
 800a688:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a68a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800a68e:	4621      	mov	r1, r4
 800a690:	eb12 0801 	adds.w	r8, r2, r1
 800a694:	4629      	mov	r1, r5
 800a696:	eb43 0901 	adc.w	r9, r3, r1
 800a69a:	f04f 0200 	mov.w	r2, #0
 800a69e:	f04f 0300 	mov.w	r3, #0
 800a6a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a6a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a6aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a6ae:	4690      	mov	r8, r2
 800a6b0:	4699      	mov	r9, r3
 800a6b2:	4623      	mov	r3, r4
 800a6b4:	eb18 0303 	adds.w	r3, r8, r3
 800a6b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a6bc:	462b      	mov	r3, r5
 800a6be:	eb49 0303 	adc.w	r3, r9, r3
 800a6c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a6c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a6ca:	685b      	ldr	r3, [r3, #4]
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a6d2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800a6d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a6da:	460b      	mov	r3, r1
 800a6dc:	18db      	adds	r3, r3, r3
 800a6de:	653b      	str	r3, [r7, #80]	@ 0x50
 800a6e0:	4613      	mov	r3, r2
 800a6e2:	eb42 0303 	adc.w	r3, r2, r3
 800a6e6:	657b      	str	r3, [r7, #84]	@ 0x54
 800a6e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800a6ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800a6f0:	f7f6 fbc0 	bl	8000e74 <__aeabi_uldivmod>
 800a6f4:	4602      	mov	r2, r0
 800a6f6:	460b      	mov	r3, r1
 800a6f8:	4b61      	ldr	r3, [pc, #388]	@ (800a880 <UART_SetConfig+0x2d4>)
 800a6fa:	fba3 2302 	umull	r2, r3, r3, r2
 800a6fe:	095b      	lsrs	r3, r3, #5
 800a700:	011c      	lsls	r4, r3, #4
 800a702:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a706:	2200      	movs	r2, #0
 800a708:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a70c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800a710:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800a714:	4642      	mov	r2, r8
 800a716:	464b      	mov	r3, r9
 800a718:	1891      	adds	r1, r2, r2
 800a71a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800a71c:	415b      	adcs	r3, r3
 800a71e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a720:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800a724:	4641      	mov	r1, r8
 800a726:	eb12 0a01 	adds.w	sl, r2, r1
 800a72a:	4649      	mov	r1, r9
 800a72c:	eb43 0b01 	adc.w	fp, r3, r1
 800a730:	f04f 0200 	mov.w	r2, #0
 800a734:	f04f 0300 	mov.w	r3, #0
 800a738:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a73c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a740:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a744:	4692      	mov	sl, r2
 800a746:	469b      	mov	fp, r3
 800a748:	4643      	mov	r3, r8
 800a74a:	eb1a 0303 	adds.w	r3, sl, r3
 800a74e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a752:	464b      	mov	r3, r9
 800a754:	eb4b 0303 	adc.w	r3, fp, r3
 800a758:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a75c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a760:	685b      	ldr	r3, [r3, #4]
 800a762:	2200      	movs	r2, #0
 800a764:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a768:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800a76c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a770:	460b      	mov	r3, r1
 800a772:	18db      	adds	r3, r3, r3
 800a774:	643b      	str	r3, [r7, #64]	@ 0x40
 800a776:	4613      	mov	r3, r2
 800a778:	eb42 0303 	adc.w	r3, r2, r3
 800a77c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a77e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800a782:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800a786:	f7f6 fb75 	bl	8000e74 <__aeabi_uldivmod>
 800a78a:	4602      	mov	r2, r0
 800a78c:	460b      	mov	r3, r1
 800a78e:	4611      	mov	r1, r2
 800a790:	4b3b      	ldr	r3, [pc, #236]	@ (800a880 <UART_SetConfig+0x2d4>)
 800a792:	fba3 2301 	umull	r2, r3, r3, r1
 800a796:	095b      	lsrs	r3, r3, #5
 800a798:	2264      	movs	r2, #100	@ 0x64
 800a79a:	fb02 f303 	mul.w	r3, r2, r3
 800a79e:	1acb      	subs	r3, r1, r3
 800a7a0:	00db      	lsls	r3, r3, #3
 800a7a2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800a7a6:	4b36      	ldr	r3, [pc, #216]	@ (800a880 <UART_SetConfig+0x2d4>)
 800a7a8:	fba3 2302 	umull	r2, r3, r3, r2
 800a7ac:	095b      	lsrs	r3, r3, #5
 800a7ae:	005b      	lsls	r3, r3, #1
 800a7b0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800a7b4:	441c      	add	r4, r3
 800a7b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a7c0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800a7c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800a7c8:	4642      	mov	r2, r8
 800a7ca:	464b      	mov	r3, r9
 800a7cc:	1891      	adds	r1, r2, r2
 800a7ce:	63b9      	str	r1, [r7, #56]	@ 0x38
 800a7d0:	415b      	adcs	r3, r3
 800a7d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a7d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800a7d8:	4641      	mov	r1, r8
 800a7da:	1851      	adds	r1, r2, r1
 800a7dc:	6339      	str	r1, [r7, #48]	@ 0x30
 800a7de:	4649      	mov	r1, r9
 800a7e0:	414b      	adcs	r3, r1
 800a7e2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a7e4:	f04f 0200 	mov.w	r2, #0
 800a7e8:	f04f 0300 	mov.w	r3, #0
 800a7ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800a7f0:	4659      	mov	r1, fp
 800a7f2:	00cb      	lsls	r3, r1, #3
 800a7f4:	4651      	mov	r1, sl
 800a7f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a7fa:	4651      	mov	r1, sl
 800a7fc:	00ca      	lsls	r2, r1, #3
 800a7fe:	4610      	mov	r0, r2
 800a800:	4619      	mov	r1, r3
 800a802:	4603      	mov	r3, r0
 800a804:	4642      	mov	r2, r8
 800a806:	189b      	adds	r3, r3, r2
 800a808:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a80c:	464b      	mov	r3, r9
 800a80e:	460a      	mov	r2, r1
 800a810:	eb42 0303 	adc.w	r3, r2, r3
 800a814:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a81c:	685b      	ldr	r3, [r3, #4]
 800a81e:	2200      	movs	r2, #0
 800a820:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a824:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800a828:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a82c:	460b      	mov	r3, r1
 800a82e:	18db      	adds	r3, r3, r3
 800a830:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a832:	4613      	mov	r3, r2
 800a834:	eb42 0303 	adc.w	r3, r2, r3
 800a838:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a83a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a83e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800a842:	f7f6 fb17 	bl	8000e74 <__aeabi_uldivmod>
 800a846:	4602      	mov	r2, r0
 800a848:	460b      	mov	r3, r1
 800a84a:	4b0d      	ldr	r3, [pc, #52]	@ (800a880 <UART_SetConfig+0x2d4>)
 800a84c:	fba3 1302 	umull	r1, r3, r3, r2
 800a850:	095b      	lsrs	r3, r3, #5
 800a852:	2164      	movs	r1, #100	@ 0x64
 800a854:	fb01 f303 	mul.w	r3, r1, r3
 800a858:	1ad3      	subs	r3, r2, r3
 800a85a:	00db      	lsls	r3, r3, #3
 800a85c:	3332      	adds	r3, #50	@ 0x32
 800a85e:	4a08      	ldr	r2, [pc, #32]	@ (800a880 <UART_SetConfig+0x2d4>)
 800a860:	fba2 2303 	umull	r2, r3, r2, r3
 800a864:	095b      	lsrs	r3, r3, #5
 800a866:	f003 0207 	and.w	r2, r3, #7
 800a86a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	4422      	add	r2, r4
 800a872:	609a      	str	r2, [r3, #8]
 800a874:	e106      	b.n	800aa84 <UART_SetConfig+0x4d8>
 800a876:	bf00      	nop
 800a878:	40011000 	.word	0x40011000
 800a87c:	40011400 	.word	0x40011400
 800a880:	51eb851f 	.word	0x51eb851f
 800a884:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a888:	2200      	movs	r2, #0
 800a88a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a88e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800a892:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800a896:	4642      	mov	r2, r8
 800a898:	464b      	mov	r3, r9
 800a89a:	1891      	adds	r1, r2, r2
 800a89c:	6239      	str	r1, [r7, #32]
 800a89e:	415b      	adcs	r3, r3
 800a8a0:	627b      	str	r3, [r7, #36]	@ 0x24
 800a8a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a8a6:	4641      	mov	r1, r8
 800a8a8:	1854      	adds	r4, r2, r1
 800a8aa:	4649      	mov	r1, r9
 800a8ac:	eb43 0501 	adc.w	r5, r3, r1
 800a8b0:	f04f 0200 	mov.w	r2, #0
 800a8b4:	f04f 0300 	mov.w	r3, #0
 800a8b8:	00eb      	lsls	r3, r5, #3
 800a8ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a8be:	00e2      	lsls	r2, r4, #3
 800a8c0:	4614      	mov	r4, r2
 800a8c2:	461d      	mov	r5, r3
 800a8c4:	4643      	mov	r3, r8
 800a8c6:	18e3      	adds	r3, r4, r3
 800a8c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a8cc:	464b      	mov	r3, r9
 800a8ce:	eb45 0303 	adc.w	r3, r5, r3
 800a8d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a8d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a8da:	685b      	ldr	r3, [r3, #4]
 800a8dc:	2200      	movs	r2, #0
 800a8de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a8e2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a8e6:	f04f 0200 	mov.w	r2, #0
 800a8ea:	f04f 0300 	mov.w	r3, #0
 800a8ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800a8f2:	4629      	mov	r1, r5
 800a8f4:	008b      	lsls	r3, r1, #2
 800a8f6:	4621      	mov	r1, r4
 800a8f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a8fc:	4621      	mov	r1, r4
 800a8fe:	008a      	lsls	r2, r1, #2
 800a900:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800a904:	f7f6 fab6 	bl	8000e74 <__aeabi_uldivmod>
 800a908:	4602      	mov	r2, r0
 800a90a:	460b      	mov	r3, r1
 800a90c:	4b60      	ldr	r3, [pc, #384]	@ (800aa90 <UART_SetConfig+0x4e4>)
 800a90e:	fba3 2302 	umull	r2, r3, r3, r2
 800a912:	095b      	lsrs	r3, r3, #5
 800a914:	011c      	lsls	r4, r3, #4
 800a916:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a91a:	2200      	movs	r2, #0
 800a91c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a920:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800a924:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800a928:	4642      	mov	r2, r8
 800a92a:	464b      	mov	r3, r9
 800a92c:	1891      	adds	r1, r2, r2
 800a92e:	61b9      	str	r1, [r7, #24]
 800a930:	415b      	adcs	r3, r3
 800a932:	61fb      	str	r3, [r7, #28]
 800a934:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a938:	4641      	mov	r1, r8
 800a93a:	1851      	adds	r1, r2, r1
 800a93c:	6139      	str	r1, [r7, #16]
 800a93e:	4649      	mov	r1, r9
 800a940:	414b      	adcs	r3, r1
 800a942:	617b      	str	r3, [r7, #20]
 800a944:	f04f 0200 	mov.w	r2, #0
 800a948:	f04f 0300 	mov.w	r3, #0
 800a94c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a950:	4659      	mov	r1, fp
 800a952:	00cb      	lsls	r3, r1, #3
 800a954:	4651      	mov	r1, sl
 800a956:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a95a:	4651      	mov	r1, sl
 800a95c:	00ca      	lsls	r2, r1, #3
 800a95e:	4610      	mov	r0, r2
 800a960:	4619      	mov	r1, r3
 800a962:	4603      	mov	r3, r0
 800a964:	4642      	mov	r2, r8
 800a966:	189b      	adds	r3, r3, r2
 800a968:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a96c:	464b      	mov	r3, r9
 800a96e:	460a      	mov	r2, r1
 800a970:	eb42 0303 	adc.w	r3, r2, r3
 800a974:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a97c:	685b      	ldr	r3, [r3, #4]
 800a97e:	2200      	movs	r2, #0
 800a980:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a982:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800a984:	f04f 0200 	mov.w	r2, #0
 800a988:	f04f 0300 	mov.w	r3, #0
 800a98c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800a990:	4649      	mov	r1, r9
 800a992:	008b      	lsls	r3, r1, #2
 800a994:	4641      	mov	r1, r8
 800a996:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a99a:	4641      	mov	r1, r8
 800a99c:	008a      	lsls	r2, r1, #2
 800a99e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800a9a2:	f7f6 fa67 	bl	8000e74 <__aeabi_uldivmod>
 800a9a6:	4602      	mov	r2, r0
 800a9a8:	460b      	mov	r3, r1
 800a9aa:	4611      	mov	r1, r2
 800a9ac:	4b38      	ldr	r3, [pc, #224]	@ (800aa90 <UART_SetConfig+0x4e4>)
 800a9ae:	fba3 2301 	umull	r2, r3, r3, r1
 800a9b2:	095b      	lsrs	r3, r3, #5
 800a9b4:	2264      	movs	r2, #100	@ 0x64
 800a9b6:	fb02 f303 	mul.w	r3, r2, r3
 800a9ba:	1acb      	subs	r3, r1, r3
 800a9bc:	011b      	lsls	r3, r3, #4
 800a9be:	3332      	adds	r3, #50	@ 0x32
 800a9c0:	4a33      	ldr	r2, [pc, #204]	@ (800aa90 <UART_SetConfig+0x4e4>)
 800a9c2:	fba2 2303 	umull	r2, r3, r2, r3
 800a9c6:	095b      	lsrs	r3, r3, #5
 800a9c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a9cc:	441c      	add	r4, r3
 800a9ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	673b      	str	r3, [r7, #112]	@ 0x70
 800a9d6:	677a      	str	r2, [r7, #116]	@ 0x74
 800a9d8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800a9dc:	4642      	mov	r2, r8
 800a9de:	464b      	mov	r3, r9
 800a9e0:	1891      	adds	r1, r2, r2
 800a9e2:	60b9      	str	r1, [r7, #8]
 800a9e4:	415b      	adcs	r3, r3
 800a9e6:	60fb      	str	r3, [r7, #12]
 800a9e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a9ec:	4641      	mov	r1, r8
 800a9ee:	1851      	adds	r1, r2, r1
 800a9f0:	6039      	str	r1, [r7, #0]
 800a9f2:	4649      	mov	r1, r9
 800a9f4:	414b      	adcs	r3, r1
 800a9f6:	607b      	str	r3, [r7, #4]
 800a9f8:	f04f 0200 	mov.w	r2, #0
 800a9fc:	f04f 0300 	mov.w	r3, #0
 800aa00:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800aa04:	4659      	mov	r1, fp
 800aa06:	00cb      	lsls	r3, r1, #3
 800aa08:	4651      	mov	r1, sl
 800aa0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800aa0e:	4651      	mov	r1, sl
 800aa10:	00ca      	lsls	r2, r1, #3
 800aa12:	4610      	mov	r0, r2
 800aa14:	4619      	mov	r1, r3
 800aa16:	4603      	mov	r3, r0
 800aa18:	4642      	mov	r2, r8
 800aa1a:	189b      	adds	r3, r3, r2
 800aa1c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800aa1e:	464b      	mov	r3, r9
 800aa20:	460a      	mov	r2, r1
 800aa22:	eb42 0303 	adc.w	r3, r2, r3
 800aa26:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800aa28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa2c:	685b      	ldr	r3, [r3, #4]
 800aa2e:	2200      	movs	r2, #0
 800aa30:	663b      	str	r3, [r7, #96]	@ 0x60
 800aa32:	667a      	str	r2, [r7, #100]	@ 0x64
 800aa34:	f04f 0200 	mov.w	r2, #0
 800aa38:	f04f 0300 	mov.w	r3, #0
 800aa3c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800aa40:	4649      	mov	r1, r9
 800aa42:	008b      	lsls	r3, r1, #2
 800aa44:	4641      	mov	r1, r8
 800aa46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800aa4a:	4641      	mov	r1, r8
 800aa4c:	008a      	lsls	r2, r1, #2
 800aa4e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800aa52:	f7f6 fa0f 	bl	8000e74 <__aeabi_uldivmod>
 800aa56:	4602      	mov	r2, r0
 800aa58:	460b      	mov	r3, r1
 800aa5a:	4b0d      	ldr	r3, [pc, #52]	@ (800aa90 <UART_SetConfig+0x4e4>)
 800aa5c:	fba3 1302 	umull	r1, r3, r3, r2
 800aa60:	095b      	lsrs	r3, r3, #5
 800aa62:	2164      	movs	r1, #100	@ 0x64
 800aa64:	fb01 f303 	mul.w	r3, r1, r3
 800aa68:	1ad3      	subs	r3, r2, r3
 800aa6a:	011b      	lsls	r3, r3, #4
 800aa6c:	3332      	adds	r3, #50	@ 0x32
 800aa6e:	4a08      	ldr	r2, [pc, #32]	@ (800aa90 <UART_SetConfig+0x4e4>)
 800aa70:	fba2 2303 	umull	r2, r3, r2, r3
 800aa74:	095b      	lsrs	r3, r3, #5
 800aa76:	f003 020f 	and.w	r2, r3, #15
 800aa7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	4422      	add	r2, r4
 800aa82:	609a      	str	r2, [r3, #8]
 800aa84:	bf00      	nop
 800aa86:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aa90:	51eb851f 	.word	0x51eb851f

0800aa94 <__cvt>:
 800aa94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aa98:	ec57 6b10 	vmov	r6, r7, d0
 800aa9c:	2f00      	cmp	r7, #0
 800aa9e:	460c      	mov	r4, r1
 800aaa0:	4619      	mov	r1, r3
 800aaa2:	463b      	mov	r3, r7
 800aaa4:	bfbb      	ittet	lt
 800aaa6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800aaaa:	461f      	movlt	r7, r3
 800aaac:	2300      	movge	r3, #0
 800aaae:	232d      	movlt	r3, #45	@ 0x2d
 800aab0:	700b      	strb	r3, [r1, #0]
 800aab2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aab4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800aab8:	4691      	mov	r9, r2
 800aaba:	f023 0820 	bic.w	r8, r3, #32
 800aabe:	bfbc      	itt	lt
 800aac0:	4632      	movlt	r2, r6
 800aac2:	4616      	movlt	r6, r2
 800aac4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800aac8:	d005      	beq.n	800aad6 <__cvt+0x42>
 800aaca:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800aace:	d100      	bne.n	800aad2 <__cvt+0x3e>
 800aad0:	3401      	adds	r4, #1
 800aad2:	2102      	movs	r1, #2
 800aad4:	e000      	b.n	800aad8 <__cvt+0x44>
 800aad6:	2103      	movs	r1, #3
 800aad8:	ab03      	add	r3, sp, #12
 800aada:	9301      	str	r3, [sp, #4]
 800aadc:	ab02      	add	r3, sp, #8
 800aade:	9300      	str	r3, [sp, #0]
 800aae0:	ec47 6b10 	vmov	d0, r6, r7
 800aae4:	4653      	mov	r3, sl
 800aae6:	4622      	mov	r2, r4
 800aae8:	f000 fe7a 	bl	800b7e0 <_dtoa_r>
 800aaec:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800aaf0:	4605      	mov	r5, r0
 800aaf2:	d119      	bne.n	800ab28 <__cvt+0x94>
 800aaf4:	f019 0f01 	tst.w	r9, #1
 800aaf8:	d00e      	beq.n	800ab18 <__cvt+0x84>
 800aafa:	eb00 0904 	add.w	r9, r0, r4
 800aafe:	2200      	movs	r2, #0
 800ab00:	2300      	movs	r3, #0
 800ab02:	4630      	mov	r0, r6
 800ab04:	4639      	mov	r1, r7
 800ab06:	f7f5 ffe7 	bl	8000ad8 <__aeabi_dcmpeq>
 800ab0a:	b108      	cbz	r0, 800ab10 <__cvt+0x7c>
 800ab0c:	f8cd 900c 	str.w	r9, [sp, #12]
 800ab10:	2230      	movs	r2, #48	@ 0x30
 800ab12:	9b03      	ldr	r3, [sp, #12]
 800ab14:	454b      	cmp	r3, r9
 800ab16:	d31e      	bcc.n	800ab56 <__cvt+0xc2>
 800ab18:	9b03      	ldr	r3, [sp, #12]
 800ab1a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ab1c:	1b5b      	subs	r3, r3, r5
 800ab1e:	4628      	mov	r0, r5
 800ab20:	6013      	str	r3, [r2, #0]
 800ab22:	b004      	add	sp, #16
 800ab24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab28:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ab2c:	eb00 0904 	add.w	r9, r0, r4
 800ab30:	d1e5      	bne.n	800aafe <__cvt+0x6a>
 800ab32:	7803      	ldrb	r3, [r0, #0]
 800ab34:	2b30      	cmp	r3, #48	@ 0x30
 800ab36:	d10a      	bne.n	800ab4e <__cvt+0xba>
 800ab38:	2200      	movs	r2, #0
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	4630      	mov	r0, r6
 800ab3e:	4639      	mov	r1, r7
 800ab40:	f7f5 ffca 	bl	8000ad8 <__aeabi_dcmpeq>
 800ab44:	b918      	cbnz	r0, 800ab4e <__cvt+0xba>
 800ab46:	f1c4 0401 	rsb	r4, r4, #1
 800ab4a:	f8ca 4000 	str.w	r4, [sl]
 800ab4e:	f8da 3000 	ldr.w	r3, [sl]
 800ab52:	4499      	add	r9, r3
 800ab54:	e7d3      	b.n	800aafe <__cvt+0x6a>
 800ab56:	1c59      	adds	r1, r3, #1
 800ab58:	9103      	str	r1, [sp, #12]
 800ab5a:	701a      	strb	r2, [r3, #0]
 800ab5c:	e7d9      	b.n	800ab12 <__cvt+0x7e>

0800ab5e <__exponent>:
 800ab5e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ab60:	2900      	cmp	r1, #0
 800ab62:	bfba      	itte	lt
 800ab64:	4249      	neglt	r1, r1
 800ab66:	232d      	movlt	r3, #45	@ 0x2d
 800ab68:	232b      	movge	r3, #43	@ 0x2b
 800ab6a:	2909      	cmp	r1, #9
 800ab6c:	7002      	strb	r2, [r0, #0]
 800ab6e:	7043      	strb	r3, [r0, #1]
 800ab70:	dd29      	ble.n	800abc6 <__exponent+0x68>
 800ab72:	f10d 0307 	add.w	r3, sp, #7
 800ab76:	461d      	mov	r5, r3
 800ab78:	270a      	movs	r7, #10
 800ab7a:	461a      	mov	r2, r3
 800ab7c:	fbb1 f6f7 	udiv	r6, r1, r7
 800ab80:	fb07 1416 	mls	r4, r7, r6, r1
 800ab84:	3430      	adds	r4, #48	@ 0x30
 800ab86:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ab8a:	460c      	mov	r4, r1
 800ab8c:	2c63      	cmp	r4, #99	@ 0x63
 800ab8e:	f103 33ff 	add.w	r3, r3, #4294967295
 800ab92:	4631      	mov	r1, r6
 800ab94:	dcf1      	bgt.n	800ab7a <__exponent+0x1c>
 800ab96:	3130      	adds	r1, #48	@ 0x30
 800ab98:	1e94      	subs	r4, r2, #2
 800ab9a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ab9e:	1c41      	adds	r1, r0, #1
 800aba0:	4623      	mov	r3, r4
 800aba2:	42ab      	cmp	r3, r5
 800aba4:	d30a      	bcc.n	800abbc <__exponent+0x5e>
 800aba6:	f10d 0309 	add.w	r3, sp, #9
 800abaa:	1a9b      	subs	r3, r3, r2
 800abac:	42ac      	cmp	r4, r5
 800abae:	bf88      	it	hi
 800abb0:	2300      	movhi	r3, #0
 800abb2:	3302      	adds	r3, #2
 800abb4:	4403      	add	r3, r0
 800abb6:	1a18      	subs	r0, r3, r0
 800abb8:	b003      	add	sp, #12
 800abba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abbc:	f813 6b01 	ldrb.w	r6, [r3], #1
 800abc0:	f801 6f01 	strb.w	r6, [r1, #1]!
 800abc4:	e7ed      	b.n	800aba2 <__exponent+0x44>
 800abc6:	2330      	movs	r3, #48	@ 0x30
 800abc8:	3130      	adds	r1, #48	@ 0x30
 800abca:	7083      	strb	r3, [r0, #2]
 800abcc:	70c1      	strb	r1, [r0, #3]
 800abce:	1d03      	adds	r3, r0, #4
 800abd0:	e7f1      	b.n	800abb6 <__exponent+0x58>
	...

0800abd4 <_printf_float>:
 800abd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abd8:	b08d      	sub	sp, #52	@ 0x34
 800abda:	460c      	mov	r4, r1
 800abdc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800abe0:	4616      	mov	r6, r2
 800abe2:	461f      	mov	r7, r3
 800abe4:	4605      	mov	r5, r0
 800abe6:	f000 fceb 	bl	800b5c0 <_localeconv_r>
 800abea:	6803      	ldr	r3, [r0, #0]
 800abec:	9304      	str	r3, [sp, #16]
 800abee:	4618      	mov	r0, r3
 800abf0:	f7f5 fb46 	bl	8000280 <strlen>
 800abf4:	2300      	movs	r3, #0
 800abf6:	930a      	str	r3, [sp, #40]	@ 0x28
 800abf8:	f8d8 3000 	ldr.w	r3, [r8]
 800abfc:	9005      	str	r0, [sp, #20]
 800abfe:	3307      	adds	r3, #7
 800ac00:	f023 0307 	bic.w	r3, r3, #7
 800ac04:	f103 0208 	add.w	r2, r3, #8
 800ac08:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ac0c:	f8d4 b000 	ldr.w	fp, [r4]
 800ac10:	f8c8 2000 	str.w	r2, [r8]
 800ac14:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ac18:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ac1c:	9307      	str	r3, [sp, #28]
 800ac1e:	f8cd 8018 	str.w	r8, [sp, #24]
 800ac22:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800ac26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac2a:	4b9c      	ldr	r3, [pc, #624]	@ (800ae9c <_printf_float+0x2c8>)
 800ac2c:	f04f 32ff 	mov.w	r2, #4294967295
 800ac30:	f7f5 ff84 	bl	8000b3c <__aeabi_dcmpun>
 800ac34:	bb70      	cbnz	r0, 800ac94 <_printf_float+0xc0>
 800ac36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac3a:	4b98      	ldr	r3, [pc, #608]	@ (800ae9c <_printf_float+0x2c8>)
 800ac3c:	f04f 32ff 	mov.w	r2, #4294967295
 800ac40:	f7f5 ff5e 	bl	8000b00 <__aeabi_dcmple>
 800ac44:	bb30      	cbnz	r0, 800ac94 <_printf_float+0xc0>
 800ac46:	2200      	movs	r2, #0
 800ac48:	2300      	movs	r3, #0
 800ac4a:	4640      	mov	r0, r8
 800ac4c:	4649      	mov	r1, r9
 800ac4e:	f7f5 ff4d 	bl	8000aec <__aeabi_dcmplt>
 800ac52:	b110      	cbz	r0, 800ac5a <_printf_float+0x86>
 800ac54:	232d      	movs	r3, #45	@ 0x2d
 800ac56:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ac5a:	4a91      	ldr	r2, [pc, #580]	@ (800aea0 <_printf_float+0x2cc>)
 800ac5c:	4b91      	ldr	r3, [pc, #580]	@ (800aea4 <_printf_float+0x2d0>)
 800ac5e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ac62:	bf8c      	ite	hi
 800ac64:	4690      	movhi	r8, r2
 800ac66:	4698      	movls	r8, r3
 800ac68:	2303      	movs	r3, #3
 800ac6a:	6123      	str	r3, [r4, #16]
 800ac6c:	f02b 0304 	bic.w	r3, fp, #4
 800ac70:	6023      	str	r3, [r4, #0]
 800ac72:	f04f 0900 	mov.w	r9, #0
 800ac76:	9700      	str	r7, [sp, #0]
 800ac78:	4633      	mov	r3, r6
 800ac7a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ac7c:	4621      	mov	r1, r4
 800ac7e:	4628      	mov	r0, r5
 800ac80:	f000 f9d2 	bl	800b028 <_printf_common>
 800ac84:	3001      	adds	r0, #1
 800ac86:	f040 808d 	bne.w	800ada4 <_printf_float+0x1d0>
 800ac8a:	f04f 30ff 	mov.w	r0, #4294967295
 800ac8e:	b00d      	add	sp, #52	@ 0x34
 800ac90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac94:	4642      	mov	r2, r8
 800ac96:	464b      	mov	r3, r9
 800ac98:	4640      	mov	r0, r8
 800ac9a:	4649      	mov	r1, r9
 800ac9c:	f7f5 ff4e 	bl	8000b3c <__aeabi_dcmpun>
 800aca0:	b140      	cbz	r0, 800acb4 <_printf_float+0xe0>
 800aca2:	464b      	mov	r3, r9
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	bfbc      	itt	lt
 800aca8:	232d      	movlt	r3, #45	@ 0x2d
 800acaa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800acae:	4a7e      	ldr	r2, [pc, #504]	@ (800aea8 <_printf_float+0x2d4>)
 800acb0:	4b7e      	ldr	r3, [pc, #504]	@ (800aeac <_printf_float+0x2d8>)
 800acb2:	e7d4      	b.n	800ac5e <_printf_float+0x8a>
 800acb4:	6863      	ldr	r3, [r4, #4]
 800acb6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800acba:	9206      	str	r2, [sp, #24]
 800acbc:	1c5a      	adds	r2, r3, #1
 800acbe:	d13b      	bne.n	800ad38 <_printf_float+0x164>
 800acc0:	2306      	movs	r3, #6
 800acc2:	6063      	str	r3, [r4, #4]
 800acc4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800acc8:	2300      	movs	r3, #0
 800acca:	6022      	str	r2, [r4, #0]
 800accc:	9303      	str	r3, [sp, #12]
 800acce:	ab0a      	add	r3, sp, #40	@ 0x28
 800acd0:	e9cd a301 	strd	sl, r3, [sp, #4]
 800acd4:	ab09      	add	r3, sp, #36	@ 0x24
 800acd6:	9300      	str	r3, [sp, #0]
 800acd8:	6861      	ldr	r1, [r4, #4]
 800acda:	ec49 8b10 	vmov	d0, r8, r9
 800acde:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ace2:	4628      	mov	r0, r5
 800ace4:	f7ff fed6 	bl	800aa94 <__cvt>
 800ace8:	9b06      	ldr	r3, [sp, #24]
 800acea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800acec:	2b47      	cmp	r3, #71	@ 0x47
 800acee:	4680      	mov	r8, r0
 800acf0:	d129      	bne.n	800ad46 <_printf_float+0x172>
 800acf2:	1cc8      	adds	r0, r1, #3
 800acf4:	db02      	blt.n	800acfc <_printf_float+0x128>
 800acf6:	6863      	ldr	r3, [r4, #4]
 800acf8:	4299      	cmp	r1, r3
 800acfa:	dd41      	ble.n	800ad80 <_printf_float+0x1ac>
 800acfc:	f1aa 0a02 	sub.w	sl, sl, #2
 800ad00:	fa5f fa8a 	uxtb.w	sl, sl
 800ad04:	3901      	subs	r1, #1
 800ad06:	4652      	mov	r2, sl
 800ad08:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ad0c:	9109      	str	r1, [sp, #36]	@ 0x24
 800ad0e:	f7ff ff26 	bl	800ab5e <__exponent>
 800ad12:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ad14:	1813      	adds	r3, r2, r0
 800ad16:	2a01      	cmp	r2, #1
 800ad18:	4681      	mov	r9, r0
 800ad1a:	6123      	str	r3, [r4, #16]
 800ad1c:	dc02      	bgt.n	800ad24 <_printf_float+0x150>
 800ad1e:	6822      	ldr	r2, [r4, #0]
 800ad20:	07d2      	lsls	r2, r2, #31
 800ad22:	d501      	bpl.n	800ad28 <_printf_float+0x154>
 800ad24:	3301      	adds	r3, #1
 800ad26:	6123      	str	r3, [r4, #16]
 800ad28:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d0a2      	beq.n	800ac76 <_printf_float+0xa2>
 800ad30:	232d      	movs	r3, #45	@ 0x2d
 800ad32:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ad36:	e79e      	b.n	800ac76 <_printf_float+0xa2>
 800ad38:	9a06      	ldr	r2, [sp, #24]
 800ad3a:	2a47      	cmp	r2, #71	@ 0x47
 800ad3c:	d1c2      	bne.n	800acc4 <_printf_float+0xf0>
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d1c0      	bne.n	800acc4 <_printf_float+0xf0>
 800ad42:	2301      	movs	r3, #1
 800ad44:	e7bd      	b.n	800acc2 <_printf_float+0xee>
 800ad46:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ad4a:	d9db      	bls.n	800ad04 <_printf_float+0x130>
 800ad4c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800ad50:	d118      	bne.n	800ad84 <_printf_float+0x1b0>
 800ad52:	2900      	cmp	r1, #0
 800ad54:	6863      	ldr	r3, [r4, #4]
 800ad56:	dd0b      	ble.n	800ad70 <_printf_float+0x19c>
 800ad58:	6121      	str	r1, [r4, #16]
 800ad5a:	b913      	cbnz	r3, 800ad62 <_printf_float+0x18e>
 800ad5c:	6822      	ldr	r2, [r4, #0]
 800ad5e:	07d0      	lsls	r0, r2, #31
 800ad60:	d502      	bpl.n	800ad68 <_printf_float+0x194>
 800ad62:	3301      	adds	r3, #1
 800ad64:	440b      	add	r3, r1
 800ad66:	6123      	str	r3, [r4, #16]
 800ad68:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ad6a:	f04f 0900 	mov.w	r9, #0
 800ad6e:	e7db      	b.n	800ad28 <_printf_float+0x154>
 800ad70:	b913      	cbnz	r3, 800ad78 <_printf_float+0x1a4>
 800ad72:	6822      	ldr	r2, [r4, #0]
 800ad74:	07d2      	lsls	r2, r2, #31
 800ad76:	d501      	bpl.n	800ad7c <_printf_float+0x1a8>
 800ad78:	3302      	adds	r3, #2
 800ad7a:	e7f4      	b.n	800ad66 <_printf_float+0x192>
 800ad7c:	2301      	movs	r3, #1
 800ad7e:	e7f2      	b.n	800ad66 <_printf_float+0x192>
 800ad80:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ad84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ad86:	4299      	cmp	r1, r3
 800ad88:	db05      	blt.n	800ad96 <_printf_float+0x1c2>
 800ad8a:	6823      	ldr	r3, [r4, #0]
 800ad8c:	6121      	str	r1, [r4, #16]
 800ad8e:	07d8      	lsls	r0, r3, #31
 800ad90:	d5ea      	bpl.n	800ad68 <_printf_float+0x194>
 800ad92:	1c4b      	adds	r3, r1, #1
 800ad94:	e7e7      	b.n	800ad66 <_printf_float+0x192>
 800ad96:	2900      	cmp	r1, #0
 800ad98:	bfd4      	ite	le
 800ad9a:	f1c1 0202 	rsble	r2, r1, #2
 800ad9e:	2201      	movgt	r2, #1
 800ada0:	4413      	add	r3, r2
 800ada2:	e7e0      	b.n	800ad66 <_printf_float+0x192>
 800ada4:	6823      	ldr	r3, [r4, #0]
 800ada6:	055a      	lsls	r2, r3, #21
 800ada8:	d407      	bmi.n	800adba <_printf_float+0x1e6>
 800adaa:	6923      	ldr	r3, [r4, #16]
 800adac:	4642      	mov	r2, r8
 800adae:	4631      	mov	r1, r6
 800adb0:	4628      	mov	r0, r5
 800adb2:	47b8      	blx	r7
 800adb4:	3001      	adds	r0, #1
 800adb6:	d12b      	bne.n	800ae10 <_printf_float+0x23c>
 800adb8:	e767      	b.n	800ac8a <_printf_float+0xb6>
 800adba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800adbe:	f240 80dd 	bls.w	800af7c <_printf_float+0x3a8>
 800adc2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800adc6:	2200      	movs	r2, #0
 800adc8:	2300      	movs	r3, #0
 800adca:	f7f5 fe85 	bl	8000ad8 <__aeabi_dcmpeq>
 800adce:	2800      	cmp	r0, #0
 800add0:	d033      	beq.n	800ae3a <_printf_float+0x266>
 800add2:	4a37      	ldr	r2, [pc, #220]	@ (800aeb0 <_printf_float+0x2dc>)
 800add4:	2301      	movs	r3, #1
 800add6:	4631      	mov	r1, r6
 800add8:	4628      	mov	r0, r5
 800adda:	47b8      	blx	r7
 800addc:	3001      	adds	r0, #1
 800adde:	f43f af54 	beq.w	800ac8a <_printf_float+0xb6>
 800ade2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ade6:	4543      	cmp	r3, r8
 800ade8:	db02      	blt.n	800adf0 <_printf_float+0x21c>
 800adea:	6823      	ldr	r3, [r4, #0]
 800adec:	07d8      	lsls	r0, r3, #31
 800adee:	d50f      	bpl.n	800ae10 <_printf_float+0x23c>
 800adf0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800adf4:	4631      	mov	r1, r6
 800adf6:	4628      	mov	r0, r5
 800adf8:	47b8      	blx	r7
 800adfa:	3001      	adds	r0, #1
 800adfc:	f43f af45 	beq.w	800ac8a <_printf_float+0xb6>
 800ae00:	f04f 0900 	mov.w	r9, #0
 800ae04:	f108 38ff 	add.w	r8, r8, #4294967295
 800ae08:	f104 0a1a 	add.w	sl, r4, #26
 800ae0c:	45c8      	cmp	r8, r9
 800ae0e:	dc09      	bgt.n	800ae24 <_printf_float+0x250>
 800ae10:	6823      	ldr	r3, [r4, #0]
 800ae12:	079b      	lsls	r3, r3, #30
 800ae14:	f100 8103 	bmi.w	800b01e <_printf_float+0x44a>
 800ae18:	68e0      	ldr	r0, [r4, #12]
 800ae1a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ae1c:	4298      	cmp	r0, r3
 800ae1e:	bfb8      	it	lt
 800ae20:	4618      	movlt	r0, r3
 800ae22:	e734      	b.n	800ac8e <_printf_float+0xba>
 800ae24:	2301      	movs	r3, #1
 800ae26:	4652      	mov	r2, sl
 800ae28:	4631      	mov	r1, r6
 800ae2a:	4628      	mov	r0, r5
 800ae2c:	47b8      	blx	r7
 800ae2e:	3001      	adds	r0, #1
 800ae30:	f43f af2b 	beq.w	800ac8a <_printf_float+0xb6>
 800ae34:	f109 0901 	add.w	r9, r9, #1
 800ae38:	e7e8      	b.n	800ae0c <_printf_float+0x238>
 800ae3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	dc39      	bgt.n	800aeb4 <_printf_float+0x2e0>
 800ae40:	4a1b      	ldr	r2, [pc, #108]	@ (800aeb0 <_printf_float+0x2dc>)
 800ae42:	2301      	movs	r3, #1
 800ae44:	4631      	mov	r1, r6
 800ae46:	4628      	mov	r0, r5
 800ae48:	47b8      	blx	r7
 800ae4a:	3001      	adds	r0, #1
 800ae4c:	f43f af1d 	beq.w	800ac8a <_printf_float+0xb6>
 800ae50:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800ae54:	ea59 0303 	orrs.w	r3, r9, r3
 800ae58:	d102      	bne.n	800ae60 <_printf_float+0x28c>
 800ae5a:	6823      	ldr	r3, [r4, #0]
 800ae5c:	07d9      	lsls	r1, r3, #31
 800ae5e:	d5d7      	bpl.n	800ae10 <_printf_float+0x23c>
 800ae60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ae64:	4631      	mov	r1, r6
 800ae66:	4628      	mov	r0, r5
 800ae68:	47b8      	blx	r7
 800ae6a:	3001      	adds	r0, #1
 800ae6c:	f43f af0d 	beq.w	800ac8a <_printf_float+0xb6>
 800ae70:	f04f 0a00 	mov.w	sl, #0
 800ae74:	f104 0b1a 	add.w	fp, r4, #26
 800ae78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae7a:	425b      	negs	r3, r3
 800ae7c:	4553      	cmp	r3, sl
 800ae7e:	dc01      	bgt.n	800ae84 <_printf_float+0x2b0>
 800ae80:	464b      	mov	r3, r9
 800ae82:	e793      	b.n	800adac <_printf_float+0x1d8>
 800ae84:	2301      	movs	r3, #1
 800ae86:	465a      	mov	r2, fp
 800ae88:	4631      	mov	r1, r6
 800ae8a:	4628      	mov	r0, r5
 800ae8c:	47b8      	blx	r7
 800ae8e:	3001      	adds	r0, #1
 800ae90:	f43f aefb 	beq.w	800ac8a <_printf_float+0xb6>
 800ae94:	f10a 0a01 	add.w	sl, sl, #1
 800ae98:	e7ee      	b.n	800ae78 <_printf_float+0x2a4>
 800ae9a:	bf00      	nop
 800ae9c:	7fefffff 	.word	0x7fefffff
 800aea0:	080109b8 	.word	0x080109b8
 800aea4:	080109b4 	.word	0x080109b4
 800aea8:	080109c0 	.word	0x080109c0
 800aeac:	080109bc 	.word	0x080109bc
 800aeb0:	080109c4 	.word	0x080109c4
 800aeb4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800aeb6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800aeba:	4553      	cmp	r3, sl
 800aebc:	bfa8      	it	ge
 800aebe:	4653      	movge	r3, sl
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	4699      	mov	r9, r3
 800aec4:	dc36      	bgt.n	800af34 <_printf_float+0x360>
 800aec6:	f04f 0b00 	mov.w	fp, #0
 800aeca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aece:	f104 021a 	add.w	r2, r4, #26
 800aed2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800aed4:	9306      	str	r3, [sp, #24]
 800aed6:	eba3 0309 	sub.w	r3, r3, r9
 800aeda:	455b      	cmp	r3, fp
 800aedc:	dc31      	bgt.n	800af42 <_printf_float+0x36e>
 800aede:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aee0:	459a      	cmp	sl, r3
 800aee2:	dc3a      	bgt.n	800af5a <_printf_float+0x386>
 800aee4:	6823      	ldr	r3, [r4, #0]
 800aee6:	07da      	lsls	r2, r3, #31
 800aee8:	d437      	bmi.n	800af5a <_printf_float+0x386>
 800aeea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aeec:	ebaa 0903 	sub.w	r9, sl, r3
 800aef0:	9b06      	ldr	r3, [sp, #24]
 800aef2:	ebaa 0303 	sub.w	r3, sl, r3
 800aef6:	4599      	cmp	r9, r3
 800aef8:	bfa8      	it	ge
 800aefa:	4699      	movge	r9, r3
 800aefc:	f1b9 0f00 	cmp.w	r9, #0
 800af00:	dc33      	bgt.n	800af6a <_printf_float+0x396>
 800af02:	f04f 0800 	mov.w	r8, #0
 800af06:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800af0a:	f104 0b1a 	add.w	fp, r4, #26
 800af0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af10:	ebaa 0303 	sub.w	r3, sl, r3
 800af14:	eba3 0309 	sub.w	r3, r3, r9
 800af18:	4543      	cmp	r3, r8
 800af1a:	f77f af79 	ble.w	800ae10 <_printf_float+0x23c>
 800af1e:	2301      	movs	r3, #1
 800af20:	465a      	mov	r2, fp
 800af22:	4631      	mov	r1, r6
 800af24:	4628      	mov	r0, r5
 800af26:	47b8      	blx	r7
 800af28:	3001      	adds	r0, #1
 800af2a:	f43f aeae 	beq.w	800ac8a <_printf_float+0xb6>
 800af2e:	f108 0801 	add.w	r8, r8, #1
 800af32:	e7ec      	b.n	800af0e <_printf_float+0x33a>
 800af34:	4642      	mov	r2, r8
 800af36:	4631      	mov	r1, r6
 800af38:	4628      	mov	r0, r5
 800af3a:	47b8      	blx	r7
 800af3c:	3001      	adds	r0, #1
 800af3e:	d1c2      	bne.n	800aec6 <_printf_float+0x2f2>
 800af40:	e6a3      	b.n	800ac8a <_printf_float+0xb6>
 800af42:	2301      	movs	r3, #1
 800af44:	4631      	mov	r1, r6
 800af46:	4628      	mov	r0, r5
 800af48:	9206      	str	r2, [sp, #24]
 800af4a:	47b8      	blx	r7
 800af4c:	3001      	adds	r0, #1
 800af4e:	f43f ae9c 	beq.w	800ac8a <_printf_float+0xb6>
 800af52:	9a06      	ldr	r2, [sp, #24]
 800af54:	f10b 0b01 	add.w	fp, fp, #1
 800af58:	e7bb      	b.n	800aed2 <_printf_float+0x2fe>
 800af5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af5e:	4631      	mov	r1, r6
 800af60:	4628      	mov	r0, r5
 800af62:	47b8      	blx	r7
 800af64:	3001      	adds	r0, #1
 800af66:	d1c0      	bne.n	800aeea <_printf_float+0x316>
 800af68:	e68f      	b.n	800ac8a <_printf_float+0xb6>
 800af6a:	9a06      	ldr	r2, [sp, #24]
 800af6c:	464b      	mov	r3, r9
 800af6e:	4442      	add	r2, r8
 800af70:	4631      	mov	r1, r6
 800af72:	4628      	mov	r0, r5
 800af74:	47b8      	blx	r7
 800af76:	3001      	adds	r0, #1
 800af78:	d1c3      	bne.n	800af02 <_printf_float+0x32e>
 800af7a:	e686      	b.n	800ac8a <_printf_float+0xb6>
 800af7c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800af80:	f1ba 0f01 	cmp.w	sl, #1
 800af84:	dc01      	bgt.n	800af8a <_printf_float+0x3b6>
 800af86:	07db      	lsls	r3, r3, #31
 800af88:	d536      	bpl.n	800aff8 <_printf_float+0x424>
 800af8a:	2301      	movs	r3, #1
 800af8c:	4642      	mov	r2, r8
 800af8e:	4631      	mov	r1, r6
 800af90:	4628      	mov	r0, r5
 800af92:	47b8      	blx	r7
 800af94:	3001      	adds	r0, #1
 800af96:	f43f ae78 	beq.w	800ac8a <_printf_float+0xb6>
 800af9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af9e:	4631      	mov	r1, r6
 800afa0:	4628      	mov	r0, r5
 800afa2:	47b8      	blx	r7
 800afa4:	3001      	adds	r0, #1
 800afa6:	f43f ae70 	beq.w	800ac8a <_printf_float+0xb6>
 800afaa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800afae:	2200      	movs	r2, #0
 800afb0:	2300      	movs	r3, #0
 800afb2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800afb6:	f7f5 fd8f 	bl	8000ad8 <__aeabi_dcmpeq>
 800afba:	b9c0      	cbnz	r0, 800afee <_printf_float+0x41a>
 800afbc:	4653      	mov	r3, sl
 800afbe:	f108 0201 	add.w	r2, r8, #1
 800afc2:	4631      	mov	r1, r6
 800afc4:	4628      	mov	r0, r5
 800afc6:	47b8      	blx	r7
 800afc8:	3001      	adds	r0, #1
 800afca:	d10c      	bne.n	800afe6 <_printf_float+0x412>
 800afcc:	e65d      	b.n	800ac8a <_printf_float+0xb6>
 800afce:	2301      	movs	r3, #1
 800afd0:	465a      	mov	r2, fp
 800afd2:	4631      	mov	r1, r6
 800afd4:	4628      	mov	r0, r5
 800afd6:	47b8      	blx	r7
 800afd8:	3001      	adds	r0, #1
 800afda:	f43f ae56 	beq.w	800ac8a <_printf_float+0xb6>
 800afde:	f108 0801 	add.w	r8, r8, #1
 800afe2:	45d0      	cmp	r8, sl
 800afe4:	dbf3      	blt.n	800afce <_printf_float+0x3fa>
 800afe6:	464b      	mov	r3, r9
 800afe8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800afec:	e6df      	b.n	800adae <_printf_float+0x1da>
 800afee:	f04f 0800 	mov.w	r8, #0
 800aff2:	f104 0b1a 	add.w	fp, r4, #26
 800aff6:	e7f4      	b.n	800afe2 <_printf_float+0x40e>
 800aff8:	2301      	movs	r3, #1
 800affa:	4642      	mov	r2, r8
 800affc:	e7e1      	b.n	800afc2 <_printf_float+0x3ee>
 800affe:	2301      	movs	r3, #1
 800b000:	464a      	mov	r2, r9
 800b002:	4631      	mov	r1, r6
 800b004:	4628      	mov	r0, r5
 800b006:	47b8      	blx	r7
 800b008:	3001      	adds	r0, #1
 800b00a:	f43f ae3e 	beq.w	800ac8a <_printf_float+0xb6>
 800b00e:	f108 0801 	add.w	r8, r8, #1
 800b012:	68e3      	ldr	r3, [r4, #12]
 800b014:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b016:	1a5b      	subs	r3, r3, r1
 800b018:	4543      	cmp	r3, r8
 800b01a:	dcf0      	bgt.n	800affe <_printf_float+0x42a>
 800b01c:	e6fc      	b.n	800ae18 <_printf_float+0x244>
 800b01e:	f04f 0800 	mov.w	r8, #0
 800b022:	f104 0919 	add.w	r9, r4, #25
 800b026:	e7f4      	b.n	800b012 <_printf_float+0x43e>

0800b028 <_printf_common>:
 800b028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b02c:	4616      	mov	r6, r2
 800b02e:	4698      	mov	r8, r3
 800b030:	688a      	ldr	r2, [r1, #8]
 800b032:	690b      	ldr	r3, [r1, #16]
 800b034:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b038:	4293      	cmp	r3, r2
 800b03a:	bfb8      	it	lt
 800b03c:	4613      	movlt	r3, r2
 800b03e:	6033      	str	r3, [r6, #0]
 800b040:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b044:	4607      	mov	r7, r0
 800b046:	460c      	mov	r4, r1
 800b048:	b10a      	cbz	r2, 800b04e <_printf_common+0x26>
 800b04a:	3301      	adds	r3, #1
 800b04c:	6033      	str	r3, [r6, #0]
 800b04e:	6823      	ldr	r3, [r4, #0]
 800b050:	0699      	lsls	r1, r3, #26
 800b052:	bf42      	ittt	mi
 800b054:	6833      	ldrmi	r3, [r6, #0]
 800b056:	3302      	addmi	r3, #2
 800b058:	6033      	strmi	r3, [r6, #0]
 800b05a:	6825      	ldr	r5, [r4, #0]
 800b05c:	f015 0506 	ands.w	r5, r5, #6
 800b060:	d106      	bne.n	800b070 <_printf_common+0x48>
 800b062:	f104 0a19 	add.w	sl, r4, #25
 800b066:	68e3      	ldr	r3, [r4, #12]
 800b068:	6832      	ldr	r2, [r6, #0]
 800b06a:	1a9b      	subs	r3, r3, r2
 800b06c:	42ab      	cmp	r3, r5
 800b06e:	dc26      	bgt.n	800b0be <_printf_common+0x96>
 800b070:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b074:	6822      	ldr	r2, [r4, #0]
 800b076:	3b00      	subs	r3, #0
 800b078:	bf18      	it	ne
 800b07a:	2301      	movne	r3, #1
 800b07c:	0692      	lsls	r2, r2, #26
 800b07e:	d42b      	bmi.n	800b0d8 <_printf_common+0xb0>
 800b080:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b084:	4641      	mov	r1, r8
 800b086:	4638      	mov	r0, r7
 800b088:	47c8      	blx	r9
 800b08a:	3001      	adds	r0, #1
 800b08c:	d01e      	beq.n	800b0cc <_printf_common+0xa4>
 800b08e:	6823      	ldr	r3, [r4, #0]
 800b090:	6922      	ldr	r2, [r4, #16]
 800b092:	f003 0306 	and.w	r3, r3, #6
 800b096:	2b04      	cmp	r3, #4
 800b098:	bf02      	ittt	eq
 800b09a:	68e5      	ldreq	r5, [r4, #12]
 800b09c:	6833      	ldreq	r3, [r6, #0]
 800b09e:	1aed      	subeq	r5, r5, r3
 800b0a0:	68a3      	ldr	r3, [r4, #8]
 800b0a2:	bf0c      	ite	eq
 800b0a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b0a8:	2500      	movne	r5, #0
 800b0aa:	4293      	cmp	r3, r2
 800b0ac:	bfc4      	itt	gt
 800b0ae:	1a9b      	subgt	r3, r3, r2
 800b0b0:	18ed      	addgt	r5, r5, r3
 800b0b2:	2600      	movs	r6, #0
 800b0b4:	341a      	adds	r4, #26
 800b0b6:	42b5      	cmp	r5, r6
 800b0b8:	d11a      	bne.n	800b0f0 <_printf_common+0xc8>
 800b0ba:	2000      	movs	r0, #0
 800b0bc:	e008      	b.n	800b0d0 <_printf_common+0xa8>
 800b0be:	2301      	movs	r3, #1
 800b0c0:	4652      	mov	r2, sl
 800b0c2:	4641      	mov	r1, r8
 800b0c4:	4638      	mov	r0, r7
 800b0c6:	47c8      	blx	r9
 800b0c8:	3001      	adds	r0, #1
 800b0ca:	d103      	bne.n	800b0d4 <_printf_common+0xac>
 800b0cc:	f04f 30ff 	mov.w	r0, #4294967295
 800b0d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0d4:	3501      	adds	r5, #1
 800b0d6:	e7c6      	b.n	800b066 <_printf_common+0x3e>
 800b0d8:	18e1      	adds	r1, r4, r3
 800b0da:	1c5a      	adds	r2, r3, #1
 800b0dc:	2030      	movs	r0, #48	@ 0x30
 800b0de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b0e2:	4422      	add	r2, r4
 800b0e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b0e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b0ec:	3302      	adds	r3, #2
 800b0ee:	e7c7      	b.n	800b080 <_printf_common+0x58>
 800b0f0:	2301      	movs	r3, #1
 800b0f2:	4622      	mov	r2, r4
 800b0f4:	4641      	mov	r1, r8
 800b0f6:	4638      	mov	r0, r7
 800b0f8:	47c8      	blx	r9
 800b0fa:	3001      	adds	r0, #1
 800b0fc:	d0e6      	beq.n	800b0cc <_printf_common+0xa4>
 800b0fe:	3601      	adds	r6, #1
 800b100:	e7d9      	b.n	800b0b6 <_printf_common+0x8e>
	...

0800b104 <_printf_i>:
 800b104:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b108:	7e0f      	ldrb	r7, [r1, #24]
 800b10a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b10c:	2f78      	cmp	r7, #120	@ 0x78
 800b10e:	4691      	mov	r9, r2
 800b110:	4680      	mov	r8, r0
 800b112:	460c      	mov	r4, r1
 800b114:	469a      	mov	sl, r3
 800b116:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b11a:	d807      	bhi.n	800b12c <_printf_i+0x28>
 800b11c:	2f62      	cmp	r7, #98	@ 0x62
 800b11e:	d80a      	bhi.n	800b136 <_printf_i+0x32>
 800b120:	2f00      	cmp	r7, #0
 800b122:	f000 80d1 	beq.w	800b2c8 <_printf_i+0x1c4>
 800b126:	2f58      	cmp	r7, #88	@ 0x58
 800b128:	f000 80b8 	beq.w	800b29c <_printf_i+0x198>
 800b12c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b130:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b134:	e03a      	b.n	800b1ac <_printf_i+0xa8>
 800b136:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b13a:	2b15      	cmp	r3, #21
 800b13c:	d8f6      	bhi.n	800b12c <_printf_i+0x28>
 800b13e:	a101      	add	r1, pc, #4	@ (adr r1, 800b144 <_printf_i+0x40>)
 800b140:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b144:	0800b19d 	.word	0x0800b19d
 800b148:	0800b1b1 	.word	0x0800b1b1
 800b14c:	0800b12d 	.word	0x0800b12d
 800b150:	0800b12d 	.word	0x0800b12d
 800b154:	0800b12d 	.word	0x0800b12d
 800b158:	0800b12d 	.word	0x0800b12d
 800b15c:	0800b1b1 	.word	0x0800b1b1
 800b160:	0800b12d 	.word	0x0800b12d
 800b164:	0800b12d 	.word	0x0800b12d
 800b168:	0800b12d 	.word	0x0800b12d
 800b16c:	0800b12d 	.word	0x0800b12d
 800b170:	0800b2af 	.word	0x0800b2af
 800b174:	0800b1db 	.word	0x0800b1db
 800b178:	0800b269 	.word	0x0800b269
 800b17c:	0800b12d 	.word	0x0800b12d
 800b180:	0800b12d 	.word	0x0800b12d
 800b184:	0800b2d1 	.word	0x0800b2d1
 800b188:	0800b12d 	.word	0x0800b12d
 800b18c:	0800b1db 	.word	0x0800b1db
 800b190:	0800b12d 	.word	0x0800b12d
 800b194:	0800b12d 	.word	0x0800b12d
 800b198:	0800b271 	.word	0x0800b271
 800b19c:	6833      	ldr	r3, [r6, #0]
 800b19e:	1d1a      	adds	r2, r3, #4
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	6032      	str	r2, [r6, #0]
 800b1a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b1a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b1ac:	2301      	movs	r3, #1
 800b1ae:	e09c      	b.n	800b2ea <_printf_i+0x1e6>
 800b1b0:	6833      	ldr	r3, [r6, #0]
 800b1b2:	6820      	ldr	r0, [r4, #0]
 800b1b4:	1d19      	adds	r1, r3, #4
 800b1b6:	6031      	str	r1, [r6, #0]
 800b1b8:	0606      	lsls	r6, r0, #24
 800b1ba:	d501      	bpl.n	800b1c0 <_printf_i+0xbc>
 800b1bc:	681d      	ldr	r5, [r3, #0]
 800b1be:	e003      	b.n	800b1c8 <_printf_i+0xc4>
 800b1c0:	0645      	lsls	r5, r0, #25
 800b1c2:	d5fb      	bpl.n	800b1bc <_printf_i+0xb8>
 800b1c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b1c8:	2d00      	cmp	r5, #0
 800b1ca:	da03      	bge.n	800b1d4 <_printf_i+0xd0>
 800b1cc:	232d      	movs	r3, #45	@ 0x2d
 800b1ce:	426d      	negs	r5, r5
 800b1d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b1d4:	4858      	ldr	r0, [pc, #352]	@ (800b338 <_printf_i+0x234>)
 800b1d6:	230a      	movs	r3, #10
 800b1d8:	e011      	b.n	800b1fe <_printf_i+0xfa>
 800b1da:	6821      	ldr	r1, [r4, #0]
 800b1dc:	6833      	ldr	r3, [r6, #0]
 800b1de:	0608      	lsls	r0, r1, #24
 800b1e0:	f853 5b04 	ldr.w	r5, [r3], #4
 800b1e4:	d402      	bmi.n	800b1ec <_printf_i+0xe8>
 800b1e6:	0649      	lsls	r1, r1, #25
 800b1e8:	bf48      	it	mi
 800b1ea:	b2ad      	uxthmi	r5, r5
 800b1ec:	2f6f      	cmp	r7, #111	@ 0x6f
 800b1ee:	4852      	ldr	r0, [pc, #328]	@ (800b338 <_printf_i+0x234>)
 800b1f0:	6033      	str	r3, [r6, #0]
 800b1f2:	bf14      	ite	ne
 800b1f4:	230a      	movne	r3, #10
 800b1f6:	2308      	moveq	r3, #8
 800b1f8:	2100      	movs	r1, #0
 800b1fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b1fe:	6866      	ldr	r6, [r4, #4]
 800b200:	60a6      	str	r6, [r4, #8]
 800b202:	2e00      	cmp	r6, #0
 800b204:	db05      	blt.n	800b212 <_printf_i+0x10e>
 800b206:	6821      	ldr	r1, [r4, #0]
 800b208:	432e      	orrs	r6, r5
 800b20a:	f021 0104 	bic.w	r1, r1, #4
 800b20e:	6021      	str	r1, [r4, #0]
 800b210:	d04b      	beq.n	800b2aa <_printf_i+0x1a6>
 800b212:	4616      	mov	r6, r2
 800b214:	fbb5 f1f3 	udiv	r1, r5, r3
 800b218:	fb03 5711 	mls	r7, r3, r1, r5
 800b21c:	5dc7      	ldrb	r7, [r0, r7]
 800b21e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b222:	462f      	mov	r7, r5
 800b224:	42bb      	cmp	r3, r7
 800b226:	460d      	mov	r5, r1
 800b228:	d9f4      	bls.n	800b214 <_printf_i+0x110>
 800b22a:	2b08      	cmp	r3, #8
 800b22c:	d10b      	bne.n	800b246 <_printf_i+0x142>
 800b22e:	6823      	ldr	r3, [r4, #0]
 800b230:	07df      	lsls	r7, r3, #31
 800b232:	d508      	bpl.n	800b246 <_printf_i+0x142>
 800b234:	6923      	ldr	r3, [r4, #16]
 800b236:	6861      	ldr	r1, [r4, #4]
 800b238:	4299      	cmp	r1, r3
 800b23a:	bfde      	ittt	le
 800b23c:	2330      	movle	r3, #48	@ 0x30
 800b23e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b242:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b246:	1b92      	subs	r2, r2, r6
 800b248:	6122      	str	r2, [r4, #16]
 800b24a:	f8cd a000 	str.w	sl, [sp]
 800b24e:	464b      	mov	r3, r9
 800b250:	aa03      	add	r2, sp, #12
 800b252:	4621      	mov	r1, r4
 800b254:	4640      	mov	r0, r8
 800b256:	f7ff fee7 	bl	800b028 <_printf_common>
 800b25a:	3001      	adds	r0, #1
 800b25c:	d14a      	bne.n	800b2f4 <_printf_i+0x1f0>
 800b25e:	f04f 30ff 	mov.w	r0, #4294967295
 800b262:	b004      	add	sp, #16
 800b264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b268:	6823      	ldr	r3, [r4, #0]
 800b26a:	f043 0320 	orr.w	r3, r3, #32
 800b26e:	6023      	str	r3, [r4, #0]
 800b270:	4832      	ldr	r0, [pc, #200]	@ (800b33c <_printf_i+0x238>)
 800b272:	2778      	movs	r7, #120	@ 0x78
 800b274:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b278:	6823      	ldr	r3, [r4, #0]
 800b27a:	6831      	ldr	r1, [r6, #0]
 800b27c:	061f      	lsls	r7, r3, #24
 800b27e:	f851 5b04 	ldr.w	r5, [r1], #4
 800b282:	d402      	bmi.n	800b28a <_printf_i+0x186>
 800b284:	065f      	lsls	r7, r3, #25
 800b286:	bf48      	it	mi
 800b288:	b2ad      	uxthmi	r5, r5
 800b28a:	6031      	str	r1, [r6, #0]
 800b28c:	07d9      	lsls	r1, r3, #31
 800b28e:	bf44      	itt	mi
 800b290:	f043 0320 	orrmi.w	r3, r3, #32
 800b294:	6023      	strmi	r3, [r4, #0]
 800b296:	b11d      	cbz	r5, 800b2a0 <_printf_i+0x19c>
 800b298:	2310      	movs	r3, #16
 800b29a:	e7ad      	b.n	800b1f8 <_printf_i+0xf4>
 800b29c:	4826      	ldr	r0, [pc, #152]	@ (800b338 <_printf_i+0x234>)
 800b29e:	e7e9      	b.n	800b274 <_printf_i+0x170>
 800b2a0:	6823      	ldr	r3, [r4, #0]
 800b2a2:	f023 0320 	bic.w	r3, r3, #32
 800b2a6:	6023      	str	r3, [r4, #0]
 800b2a8:	e7f6      	b.n	800b298 <_printf_i+0x194>
 800b2aa:	4616      	mov	r6, r2
 800b2ac:	e7bd      	b.n	800b22a <_printf_i+0x126>
 800b2ae:	6833      	ldr	r3, [r6, #0]
 800b2b0:	6825      	ldr	r5, [r4, #0]
 800b2b2:	6961      	ldr	r1, [r4, #20]
 800b2b4:	1d18      	adds	r0, r3, #4
 800b2b6:	6030      	str	r0, [r6, #0]
 800b2b8:	062e      	lsls	r6, r5, #24
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	d501      	bpl.n	800b2c2 <_printf_i+0x1be>
 800b2be:	6019      	str	r1, [r3, #0]
 800b2c0:	e002      	b.n	800b2c8 <_printf_i+0x1c4>
 800b2c2:	0668      	lsls	r0, r5, #25
 800b2c4:	d5fb      	bpl.n	800b2be <_printf_i+0x1ba>
 800b2c6:	8019      	strh	r1, [r3, #0]
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	6123      	str	r3, [r4, #16]
 800b2cc:	4616      	mov	r6, r2
 800b2ce:	e7bc      	b.n	800b24a <_printf_i+0x146>
 800b2d0:	6833      	ldr	r3, [r6, #0]
 800b2d2:	1d1a      	adds	r2, r3, #4
 800b2d4:	6032      	str	r2, [r6, #0]
 800b2d6:	681e      	ldr	r6, [r3, #0]
 800b2d8:	6862      	ldr	r2, [r4, #4]
 800b2da:	2100      	movs	r1, #0
 800b2dc:	4630      	mov	r0, r6
 800b2de:	f7f4 ff7f 	bl	80001e0 <memchr>
 800b2e2:	b108      	cbz	r0, 800b2e8 <_printf_i+0x1e4>
 800b2e4:	1b80      	subs	r0, r0, r6
 800b2e6:	6060      	str	r0, [r4, #4]
 800b2e8:	6863      	ldr	r3, [r4, #4]
 800b2ea:	6123      	str	r3, [r4, #16]
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b2f2:	e7aa      	b.n	800b24a <_printf_i+0x146>
 800b2f4:	6923      	ldr	r3, [r4, #16]
 800b2f6:	4632      	mov	r2, r6
 800b2f8:	4649      	mov	r1, r9
 800b2fa:	4640      	mov	r0, r8
 800b2fc:	47d0      	blx	sl
 800b2fe:	3001      	adds	r0, #1
 800b300:	d0ad      	beq.n	800b25e <_printf_i+0x15a>
 800b302:	6823      	ldr	r3, [r4, #0]
 800b304:	079b      	lsls	r3, r3, #30
 800b306:	d413      	bmi.n	800b330 <_printf_i+0x22c>
 800b308:	68e0      	ldr	r0, [r4, #12]
 800b30a:	9b03      	ldr	r3, [sp, #12]
 800b30c:	4298      	cmp	r0, r3
 800b30e:	bfb8      	it	lt
 800b310:	4618      	movlt	r0, r3
 800b312:	e7a6      	b.n	800b262 <_printf_i+0x15e>
 800b314:	2301      	movs	r3, #1
 800b316:	4632      	mov	r2, r6
 800b318:	4649      	mov	r1, r9
 800b31a:	4640      	mov	r0, r8
 800b31c:	47d0      	blx	sl
 800b31e:	3001      	adds	r0, #1
 800b320:	d09d      	beq.n	800b25e <_printf_i+0x15a>
 800b322:	3501      	adds	r5, #1
 800b324:	68e3      	ldr	r3, [r4, #12]
 800b326:	9903      	ldr	r1, [sp, #12]
 800b328:	1a5b      	subs	r3, r3, r1
 800b32a:	42ab      	cmp	r3, r5
 800b32c:	dcf2      	bgt.n	800b314 <_printf_i+0x210>
 800b32e:	e7eb      	b.n	800b308 <_printf_i+0x204>
 800b330:	2500      	movs	r5, #0
 800b332:	f104 0619 	add.w	r6, r4, #25
 800b336:	e7f5      	b.n	800b324 <_printf_i+0x220>
 800b338:	080109c6 	.word	0x080109c6
 800b33c:	080109d7 	.word	0x080109d7

0800b340 <std>:
 800b340:	2300      	movs	r3, #0
 800b342:	b510      	push	{r4, lr}
 800b344:	4604      	mov	r4, r0
 800b346:	e9c0 3300 	strd	r3, r3, [r0]
 800b34a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b34e:	6083      	str	r3, [r0, #8]
 800b350:	8181      	strh	r1, [r0, #12]
 800b352:	6643      	str	r3, [r0, #100]	@ 0x64
 800b354:	81c2      	strh	r2, [r0, #14]
 800b356:	6183      	str	r3, [r0, #24]
 800b358:	4619      	mov	r1, r3
 800b35a:	2208      	movs	r2, #8
 800b35c:	305c      	adds	r0, #92	@ 0x5c
 800b35e:	f000 f926 	bl	800b5ae <memset>
 800b362:	4b0d      	ldr	r3, [pc, #52]	@ (800b398 <std+0x58>)
 800b364:	6263      	str	r3, [r4, #36]	@ 0x24
 800b366:	4b0d      	ldr	r3, [pc, #52]	@ (800b39c <std+0x5c>)
 800b368:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b36a:	4b0d      	ldr	r3, [pc, #52]	@ (800b3a0 <std+0x60>)
 800b36c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b36e:	4b0d      	ldr	r3, [pc, #52]	@ (800b3a4 <std+0x64>)
 800b370:	6323      	str	r3, [r4, #48]	@ 0x30
 800b372:	4b0d      	ldr	r3, [pc, #52]	@ (800b3a8 <std+0x68>)
 800b374:	6224      	str	r4, [r4, #32]
 800b376:	429c      	cmp	r4, r3
 800b378:	d006      	beq.n	800b388 <std+0x48>
 800b37a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b37e:	4294      	cmp	r4, r2
 800b380:	d002      	beq.n	800b388 <std+0x48>
 800b382:	33d0      	adds	r3, #208	@ 0xd0
 800b384:	429c      	cmp	r4, r3
 800b386:	d105      	bne.n	800b394 <std+0x54>
 800b388:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b38c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b390:	f000 b98a 	b.w	800b6a8 <__retarget_lock_init_recursive>
 800b394:	bd10      	pop	{r4, pc}
 800b396:	bf00      	nop
 800b398:	0800b509 	.word	0x0800b509
 800b39c:	0800b52b 	.word	0x0800b52b
 800b3a0:	0800b563 	.word	0x0800b563
 800b3a4:	0800b587 	.word	0x0800b587
 800b3a8:	2000817c 	.word	0x2000817c

0800b3ac <stdio_exit_handler>:
 800b3ac:	4a02      	ldr	r2, [pc, #8]	@ (800b3b8 <stdio_exit_handler+0xc>)
 800b3ae:	4903      	ldr	r1, [pc, #12]	@ (800b3bc <stdio_exit_handler+0x10>)
 800b3b0:	4803      	ldr	r0, [pc, #12]	@ (800b3c0 <stdio_exit_handler+0x14>)
 800b3b2:	f000 b869 	b.w	800b488 <_fwalk_sglue>
 800b3b6:	bf00      	nop
 800b3b8:	20000010 	.word	0x20000010
 800b3bc:	0800d02d 	.word	0x0800d02d
 800b3c0:	20000020 	.word	0x20000020

0800b3c4 <cleanup_stdio>:
 800b3c4:	6841      	ldr	r1, [r0, #4]
 800b3c6:	4b0c      	ldr	r3, [pc, #48]	@ (800b3f8 <cleanup_stdio+0x34>)
 800b3c8:	4299      	cmp	r1, r3
 800b3ca:	b510      	push	{r4, lr}
 800b3cc:	4604      	mov	r4, r0
 800b3ce:	d001      	beq.n	800b3d4 <cleanup_stdio+0x10>
 800b3d0:	f001 fe2c 	bl	800d02c <_fflush_r>
 800b3d4:	68a1      	ldr	r1, [r4, #8]
 800b3d6:	4b09      	ldr	r3, [pc, #36]	@ (800b3fc <cleanup_stdio+0x38>)
 800b3d8:	4299      	cmp	r1, r3
 800b3da:	d002      	beq.n	800b3e2 <cleanup_stdio+0x1e>
 800b3dc:	4620      	mov	r0, r4
 800b3de:	f001 fe25 	bl	800d02c <_fflush_r>
 800b3e2:	68e1      	ldr	r1, [r4, #12]
 800b3e4:	4b06      	ldr	r3, [pc, #24]	@ (800b400 <cleanup_stdio+0x3c>)
 800b3e6:	4299      	cmp	r1, r3
 800b3e8:	d004      	beq.n	800b3f4 <cleanup_stdio+0x30>
 800b3ea:	4620      	mov	r0, r4
 800b3ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3f0:	f001 be1c 	b.w	800d02c <_fflush_r>
 800b3f4:	bd10      	pop	{r4, pc}
 800b3f6:	bf00      	nop
 800b3f8:	2000817c 	.word	0x2000817c
 800b3fc:	200081e4 	.word	0x200081e4
 800b400:	2000824c 	.word	0x2000824c

0800b404 <global_stdio_init.part.0>:
 800b404:	b510      	push	{r4, lr}
 800b406:	4b0b      	ldr	r3, [pc, #44]	@ (800b434 <global_stdio_init.part.0+0x30>)
 800b408:	4c0b      	ldr	r4, [pc, #44]	@ (800b438 <global_stdio_init.part.0+0x34>)
 800b40a:	4a0c      	ldr	r2, [pc, #48]	@ (800b43c <global_stdio_init.part.0+0x38>)
 800b40c:	601a      	str	r2, [r3, #0]
 800b40e:	4620      	mov	r0, r4
 800b410:	2200      	movs	r2, #0
 800b412:	2104      	movs	r1, #4
 800b414:	f7ff ff94 	bl	800b340 <std>
 800b418:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b41c:	2201      	movs	r2, #1
 800b41e:	2109      	movs	r1, #9
 800b420:	f7ff ff8e 	bl	800b340 <std>
 800b424:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b428:	2202      	movs	r2, #2
 800b42a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b42e:	2112      	movs	r1, #18
 800b430:	f7ff bf86 	b.w	800b340 <std>
 800b434:	200082b4 	.word	0x200082b4
 800b438:	2000817c 	.word	0x2000817c
 800b43c:	0800b3ad 	.word	0x0800b3ad

0800b440 <__sfp_lock_acquire>:
 800b440:	4801      	ldr	r0, [pc, #4]	@ (800b448 <__sfp_lock_acquire+0x8>)
 800b442:	f000 b932 	b.w	800b6aa <__retarget_lock_acquire_recursive>
 800b446:	bf00      	nop
 800b448:	200082bd 	.word	0x200082bd

0800b44c <__sfp_lock_release>:
 800b44c:	4801      	ldr	r0, [pc, #4]	@ (800b454 <__sfp_lock_release+0x8>)
 800b44e:	f000 b92d 	b.w	800b6ac <__retarget_lock_release_recursive>
 800b452:	bf00      	nop
 800b454:	200082bd 	.word	0x200082bd

0800b458 <__sinit>:
 800b458:	b510      	push	{r4, lr}
 800b45a:	4604      	mov	r4, r0
 800b45c:	f7ff fff0 	bl	800b440 <__sfp_lock_acquire>
 800b460:	6a23      	ldr	r3, [r4, #32]
 800b462:	b11b      	cbz	r3, 800b46c <__sinit+0x14>
 800b464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b468:	f7ff bff0 	b.w	800b44c <__sfp_lock_release>
 800b46c:	4b04      	ldr	r3, [pc, #16]	@ (800b480 <__sinit+0x28>)
 800b46e:	6223      	str	r3, [r4, #32]
 800b470:	4b04      	ldr	r3, [pc, #16]	@ (800b484 <__sinit+0x2c>)
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d1f5      	bne.n	800b464 <__sinit+0xc>
 800b478:	f7ff ffc4 	bl	800b404 <global_stdio_init.part.0>
 800b47c:	e7f2      	b.n	800b464 <__sinit+0xc>
 800b47e:	bf00      	nop
 800b480:	0800b3c5 	.word	0x0800b3c5
 800b484:	200082b4 	.word	0x200082b4

0800b488 <_fwalk_sglue>:
 800b488:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b48c:	4607      	mov	r7, r0
 800b48e:	4688      	mov	r8, r1
 800b490:	4614      	mov	r4, r2
 800b492:	2600      	movs	r6, #0
 800b494:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b498:	f1b9 0901 	subs.w	r9, r9, #1
 800b49c:	d505      	bpl.n	800b4aa <_fwalk_sglue+0x22>
 800b49e:	6824      	ldr	r4, [r4, #0]
 800b4a0:	2c00      	cmp	r4, #0
 800b4a2:	d1f7      	bne.n	800b494 <_fwalk_sglue+0xc>
 800b4a4:	4630      	mov	r0, r6
 800b4a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4aa:	89ab      	ldrh	r3, [r5, #12]
 800b4ac:	2b01      	cmp	r3, #1
 800b4ae:	d907      	bls.n	800b4c0 <_fwalk_sglue+0x38>
 800b4b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b4b4:	3301      	adds	r3, #1
 800b4b6:	d003      	beq.n	800b4c0 <_fwalk_sglue+0x38>
 800b4b8:	4629      	mov	r1, r5
 800b4ba:	4638      	mov	r0, r7
 800b4bc:	47c0      	blx	r8
 800b4be:	4306      	orrs	r6, r0
 800b4c0:	3568      	adds	r5, #104	@ 0x68
 800b4c2:	e7e9      	b.n	800b498 <_fwalk_sglue+0x10>

0800b4c4 <siprintf>:
 800b4c4:	b40e      	push	{r1, r2, r3}
 800b4c6:	b510      	push	{r4, lr}
 800b4c8:	b09d      	sub	sp, #116	@ 0x74
 800b4ca:	ab1f      	add	r3, sp, #124	@ 0x7c
 800b4cc:	9002      	str	r0, [sp, #8]
 800b4ce:	9006      	str	r0, [sp, #24]
 800b4d0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b4d4:	480a      	ldr	r0, [pc, #40]	@ (800b500 <siprintf+0x3c>)
 800b4d6:	9107      	str	r1, [sp, #28]
 800b4d8:	9104      	str	r1, [sp, #16]
 800b4da:	490a      	ldr	r1, [pc, #40]	@ (800b504 <siprintf+0x40>)
 800b4dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4e0:	9105      	str	r1, [sp, #20]
 800b4e2:	2400      	movs	r4, #0
 800b4e4:	a902      	add	r1, sp, #8
 800b4e6:	6800      	ldr	r0, [r0, #0]
 800b4e8:	9301      	str	r3, [sp, #4]
 800b4ea:	941b      	str	r4, [sp, #108]	@ 0x6c
 800b4ec:	f001 fc1e 	bl	800cd2c <_svfiprintf_r>
 800b4f0:	9b02      	ldr	r3, [sp, #8]
 800b4f2:	701c      	strb	r4, [r3, #0]
 800b4f4:	b01d      	add	sp, #116	@ 0x74
 800b4f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4fa:	b003      	add	sp, #12
 800b4fc:	4770      	bx	lr
 800b4fe:	bf00      	nop
 800b500:	2000001c 	.word	0x2000001c
 800b504:	ffff0208 	.word	0xffff0208

0800b508 <__sread>:
 800b508:	b510      	push	{r4, lr}
 800b50a:	460c      	mov	r4, r1
 800b50c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b510:	f000 f87c 	bl	800b60c <_read_r>
 800b514:	2800      	cmp	r0, #0
 800b516:	bfab      	itete	ge
 800b518:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b51a:	89a3      	ldrhlt	r3, [r4, #12]
 800b51c:	181b      	addge	r3, r3, r0
 800b51e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b522:	bfac      	ite	ge
 800b524:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b526:	81a3      	strhlt	r3, [r4, #12]
 800b528:	bd10      	pop	{r4, pc}

0800b52a <__swrite>:
 800b52a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b52e:	461f      	mov	r7, r3
 800b530:	898b      	ldrh	r3, [r1, #12]
 800b532:	05db      	lsls	r3, r3, #23
 800b534:	4605      	mov	r5, r0
 800b536:	460c      	mov	r4, r1
 800b538:	4616      	mov	r6, r2
 800b53a:	d505      	bpl.n	800b548 <__swrite+0x1e>
 800b53c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b540:	2302      	movs	r3, #2
 800b542:	2200      	movs	r2, #0
 800b544:	f000 f850 	bl	800b5e8 <_lseek_r>
 800b548:	89a3      	ldrh	r3, [r4, #12]
 800b54a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b54e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b552:	81a3      	strh	r3, [r4, #12]
 800b554:	4632      	mov	r2, r6
 800b556:	463b      	mov	r3, r7
 800b558:	4628      	mov	r0, r5
 800b55a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b55e:	f000 b867 	b.w	800b630 <_write_r>

0800b562 <__sseek>:
 800b562:	b510      	push	{r4, lr}
 800b564:	460c      	mov	r4, r1
 800b566:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b56a:	f000 f83d 	bl	800b5e8 <_lseek_r>
 800b56e:	1c43      	adds	r3, r0, #1
 800b570:	89a3      	ldrh	r3, [r4, #12]
 800b572:	bf15      	itete	ne
 800b574:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b576:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b57a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b57e:	81a3      	strheq	r3, [r4, #12]
 800b580:	bf18      	it	ne
 800b582:	81a3      	strhne	r3, [r4, #12]
 800b584:	bd10      	pop	{r4, pc}

0800b586 <__sclose>:
 800b586:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b58a:	f000 b81d 	b.w	800b5c8 <_close_r>

0800b58e <memcmp>:
 800b58e:	b510      	push	{r4, lr}
 800b590:	3901      	subs	r1, #1
 800b592:	4402      	add	r2, r0
 800b594:	4290      	cmp	r0, r2
 800b596:	d101      	bne.n	800b59c <memcmp+0xe>
 800b598:	2000      	movs	r0, #0
 800b59a:	e005      	b.n	800b5a8 <memcmp+0x1a>
 800b59c:	7803      	ldrb	r3, [r0, #0]
 800b59e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b5a2:	42a3      	cmp	r3, r4
 800b5a4:	d001      	beq.n	800b5aa <memcmp+0x1c>
 800b5a6:	1b18      	subs	r0, r3, r4
 800b5a8:	bd10      	pop	{r4, pc}
 800b5aa:	3001      	adds	r0, #1
 800b5ac:	e7f2      	b.n	800b594 <memcmp+0x6>

0800b5ae <memset>:
 800b5ae:	4402      	add	r2, r0
 800b5b0:	4603      	mov	r3, r0
 800b5b2:	4293      	cmp	r3, r2
 800b5b4:	d100      	bne.n	800b5b8 <memset+0xa>
 800b5b6:	4770      	bx	lr
 800b5b8:	f803 1b01 	strb.w	r1, [r3], #1
 800b5bc:	e7f9      	b.n	800b5b2 <memset+0x4>
	...

0800b5c0 <_localeconv_r>:
 800b5c0:	4800      	ldr	r0, [pc, #0]	@ (800b5c4 <_localeconv_r+0x4>)
 800b5c2:	4770      	bx	lr
 800b5c4:	2000015c 	.word	0x2000015c

0800b5c8 <_close_r>:
 800b5c8:	b538      	push	{r3, r4, r5, lr}
 800b5ca:	4d06      	ldr	r5, [pc, #24]	@ (800b5e4 <_close_r+0x1c>)
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	4604      	mov	r4, r0
 800b5d0:	4608      	mov	r0, r1
 800b5d2:	602b      	str	r3, [r5, #0]
 800b5d4:	f7fa fe5a 	bl	800628c <_close>
 800b5d8:	1c43      	adds	r3, r0, #1
 800b5da:	d102      	bne.n	800b5e2 <_close_r+0x1a>
 800b5dc:	682b      	ldr	r3, [r5, #0]
 800b5de:	b103      	cbz	r3, 800b5e2 <_close_r+0x1a>
 800b5e0:	6023      	str	r3, [r4, #0]
 800b5e2:	bd38      	pop	{r3, r4, r5, pc}
 800b5e4:	200082b8 	.word	0x200082b8

0800b5e8 <_lseek_r>:
 800b5e8:	b538      	push	{r3, r4, r5, lr}
 800b5ea:	4d07      	ldr	r5, [pc, #28]	@ (800b608 <_lseek_r+0x20>)
 800b5ec:	4604      	mov	r4, r0
 800b5ee:	4608      	mov	r0, r1
 800b5f0:	4611      	mov	r1, r2
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	602a      	str	r2, [r5, #0]
 800b5f6:	461a      	mov	r2, r3
 800b5f8:	f7fa fe6f 	bl	80062da <_lseek>
 800b5fc:	1c43      	adds	r3, r0, #1
 800b5fe:	d102      	bne.n	800b606 <_lseek_r+0x1e>
 800b600:	682b      	ldr	r3, [r5, #0]
 800b602:	b103      	cbz	r3, 800b606 <_lseek_r+0x1e>
 800b604:	6023      	str	r3, [r4, #0]
 800b606:	bd38      	pop	{r3, r4, r5, pc}
 800b608:	200082b8 	.word	0x200082b8

0800b60c <_read_r>:
 800b60c:	b538      	push	{r3, r4, r5, lr}
 800b60e:	4d07      	ldr	r5, [pc, #28]	@ (800b62c <_read_r+0x20>)
 800b610:	4604      	mov	r4, r0
 800b612:	4608      	mov	r0, r1
 800b614:	4611      	mov	r1, r2
 800b616:	2200      	movs	r2, #0
 800b618:	602a      	str	r2, [r5, #0]
 800b61a:	461a      	mov	r2, r3
 800b61c:	f7fa fdfd 	bl	800621a <_read>
 800b620:	1c43      	adds	r3, r0, #1
 800b622:	d102      	bne.n	800b62a <_read_r+0x1e>
 800b624:	682b      	ldr	r3, [r5, #0]
 800b626:	b103      	cbz	r3, 800b62a <_read_r+0x1e>
 800b628:	6023      	str	r3, [r4, #0]
 800b62a:	bd38      	pop	{r3, r4, r5, pc}
 800b62c:	200082b8 	.word	0x200082b8

0800b630 <_write_r>:
 800b630:	b538      	push	{r3, r4, r5, lr}
 800b632:	4d07      	ldr	r5, [pc, #28]	@ (800b650 <_write_r+0x20>)
 800b634:	4604      	mov	r4, r0
 800b636:	4608      	mov	r0, r1
 800b638:	4611      	mov	r1, r2
 800b63a:	2200      	movs	r2, #0
 800b63c:	602a      	str	r2, [r5, #0]
 800b63e:	461a      	mov	r2, r3
 800b640:	f7fa fe08 	bl	8006254 <_write>
 800b644:	1c43      	adds	r3, r0, #1
 800b646:	d102      	bne.n	800b64e <_write_r+0x1e>
 800b648:	682b      	ldr	r3, [r5, #0]
 800b64a:	b103      	cbz	r3, 800b64e <_write_r+0x1e>
 800b64c:	6023      	str	r3, [r4, #0]
 800b64e:	bd38      	pop	{r3, r4, r5, pc}
 800b650:	200082b8 	.word	0x200082b8

0800b654 <__errno>:
 800b654:	4b01      	ldr	r3, [pc, #4]	@ (800b65c <__errno+0x8>)
 800b656:	6818      	ldr	r0, [r3, #0]
 800b658:	4770      	bx	lr
 800b65a:	bf00      	nop
 800b65c:	2000001c 	.word	0x2000001c

0800b660 <__libc_init_array>:
 800b660:	b570      	push	{r4, r5, r6, lr}
 800b662:	4d0d      	ldr	r5, [pc, #52]	@ (800b698 <__libc_init_array+0x38>)
 800b664:	4c0d      	ldr	r4, [pc, #52]	@ (800b69c <__libc_init_array+0x3c>)
 800b666:	1b64      	subs	r4, r4, r5
 800b668:	10a4      	asrs	r4, r4, #2
 800b66a:	2600      	movs	r6, #0
 800b66c:	42a6      	cmp	r6, r4
 800b66e:	d109      	bne.n	800b684 <__libc_init_array+0x24>
 800b670:	4d0b      	ldr	r5, [pc, #44]	@ (800b6a0 <__libc_init_array+0x40>)
 800b672:	4c0c      	ldr	r4, [pc, #48]	@ (800b6a4 <__libc_init_array+0x44>)
 800b674:	f003 f924 	bl	800e8c0 <_init>
 800b678:	1b64      	subs	r4, r4, r5
 800b67a:	10a4      	asrs	r4, r4, #2
 800b67c:	2600      	movs	r6, #0
 800b67e:	42a6      	cmp	r6, r4
 800b680:	d105      	bne.n	800b68e <__libc_init_array+0x2e>
 800b682:	bd70      	pop	{r4, r5, r6, pc}
 800b684:	f855 3b04 	ldr.w	r3, [r5], #4
 800b688:	4798      	blx	r3
 800b68a:	3601      	adds	r6, #1
 800b68c:	e7ee      	b.n	800b66c <__libc_init_array+0xc>
 800b68e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b692:	4798      	blx	r3
 800b694:	3601      	adds	r6, #1
 800b696:	e7f2      	b.n	800b67e <__libc_init_array+0x1e>
 800b698:	08010d58 	.word	0x08010d58
 800b69c:	08010d58 	.word	0x08010d58
 800b6a0:	08010d58 	.word	0x08010d58
 800b6a4:	08010d5c 	.word	0x08010d5c

0800b6a8 <__retarget_lock_init_recursive>:
 800b6a8:	4770      	bx	lr

0800b6aa <__retarget_lock_acquire_recursive>:
 800b6aa:	4770      	bx	lr

0800b6ac <__retarget_lock_release_recursive>:
 800b6ac:	4770      	bx	lr

0800b6ae <memcpy>:
 800b6ae:	440a      	add	r2, r1
 800b6b0:	4291      	cmp	r1, r2
 800b6b2:	f100 33ff 	add.w	r3, r0, #4294967295
 800b6b6:	d100      	bne.n	800b6ba <memcpy+0xc>
 800b6b8:	4770      	bx	lr
 800b6ba:	b510      	push	{r4, lr}
 800b6bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b6c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b6c4:	4291      	cmp	r1, r2
 800b6c6:	d1f9      	bne.n	800b6bc <memcpy+0xe>
 800b6c8:	bd10      	pop	{r4, pc}

0800b6ca <quorem>:
 800b6ca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6ce:	6903      	ldr	r3, [r0, #16]
 800b6d0:	690c      	ldr	r4, [r1, #16]
 800b6d2:	42a3      	cmp	r3, r4
 800b6d4:	4607      	mov	r7, r0
 800b6d6:	db7e      	blt.n	800b7d6 <quorem+0x10c>
 800b6d8:	3c01      	subs	r4, #1
 800b6da:	f101 0814 	add.w	r8, r1, #20
 800b6de:	00a3      	lsls	r3, r4, #2
 800b6e0:	f100 0514 	add.w	r5, r0, #20
 800b6e4:	9300      	str	r3, [sp, #0]
 800b6e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b6ea:	9301      	str	r3, [sp, #4]
 800b6ec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b6f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b6f4:	3301      	adds	r3, #1
 800b6f6:	429a      	cmp	r2, r3
 800b6f8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b6fc:	fbb2 f6f3 	udiv	r6, r2, r3
 800b700:	d32e      	bcc.n	800b760 <quorem+0x96>
 800b702:	f04f 0a00 	mov.w	sl, #0
 800b706:	46c4      	mov	ip, r8
 800b708:	46ae      	mov	lr, r5
 800b70a:	46d3      	mov	fp, sl
 800b70c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b710:	b298      	uxth	r0, r3
 800b712:	fb06 a000 	mla	r0, r6, r0, sl
 800b716:	0c02      	lsrs	r2, r0, #16
 800b718:	0c1b      	lsrs	r3, r3, #16
 800b71a:	fb06 2303 	mla	r3, r6, r3, r2
 800b71e:	f8de 2000 	ldr.w	r2, [lr]
 800b722:	b280      	uxth	r0, r0
 800b724:	b292      	uxth	r2, r2
 800b726:	1a12      	subs	r2, r2, r0
 800b728:	445a      	add	r2, fp
 800b72a:	f8de 0000 	ldr.w	r0, [lr]
 800b72e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b732:	b29b      	uxth	r3, r3
 800b734:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b738:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b73c:	b292      	uxth	r2, r2
 800b73e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b742:	45e1      	cmp	r9, ip
 800b744:	f84e 2b04 	str.w	r2, [lr], #4
 800b748:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b74c:	d2de      	bcs.n	800b70c <quorem+0x42>
 800b74e:	9b00      	ldr	r3, [sp, #0]
 800b750:	58eb      	ldr	r3, [r5, r3]
 800b752:	b92b      	cbnz	r3, 800b760 <quorem+0x96>
 800b754:	9b01      	ldr	r3, [sp, #4]
 800b756:	3b04      	subs	r3, #4
 800b758:	429d      	cmp	r5, r3
 800b75a:	461a      	mov	r2, r3
 800b75c:	d32f      	bcc.n	800b7be <quorem+0xf4>
 800b75e:	613c      	str	r4, [r7, #16]
 800b760:	4638      	mov	r0, r7
 800b762:	f001 f97f 	bl	800ca64 <__mcmp>
 800b766:	2800      	cmp	r0, #0
 800b768:	db25      	blt.n	800b7b6 <quorem+0xec>
 800b76a:	4629      	mov	r1, r5
 800b76c:	2000      	movs	r0, #0
 800b76e:	f858 2b04 	ldr.w	r2, [r8], #4
 800b772:	f8d1 c000 	ldr.w	ip, [r1]
 800b776:	fa1f fe82 	uxth.w	lr, r2
 800b77a:	fa1f f38c 	uxth.w	r3, ip
 800b77e:	eba3 030e 	sub.w	r3, r3, lr
 800b782:	4403      	add	r3, r0
 800b784:	0c12      	lsrs	r2, r2, #16
 800b786:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b78a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b78e:	b29b      	uxth	r3, r3
 800b790:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b794:	45c1      	cmp	r9, r8
 800b796:	f841 3b04 	str.w	r3, [r1], #4
 800b79a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b79e:	d2e6      	bcs.n	800b76e <quorem+0xa4>
 800b7a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b7a4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b7a8:	b922      	cbnz	r2, 800b7b4 <quorem+0xea>
 800b7aa:	3b04      	subs	r3, #4
 800b7ac:	429d      	cmp	r5, r3
 800b7ae:	461a      	mov	r2, r3
 800b7b0:	d30b      	bcc.n	800b7ca <quorem+0x100>
 800b7b2:	613c      	str	r4, [r7, #16]
 800b7b4:	3601      	adds	r6, #1
 800b7b6:	4630      	mov	r0, r6
 800b7b8:	b003      	add	sp, #12
 800b7ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7be:	6812      	ldr	r2, [r2, #0]
 800b7c0:	3b04      	subs	r3, #4
 800b7c2:	2a00      	cmp	r2, #0
 800b7c4:	d1cb      	bne.n	800b75e <quorem+0x94>
 800b7c6:	3c01      	subs	r4, #1
 800b7c8:	e7c6      	b.n	800b758 <quorem+0x8e>
 800b7ca:	6812      	ldr	r2, [r2, #0]
 800b7cc:	3b04      	subs	r3, #4
 800b7ce:	2a00      	cmp	r2, #0
 800b7d0:	d1ef      	bne.n	800b7b2 <quorem+0xe8>
 800b7d2:	3c01      	subs	r4, #1
 800b7d4:	e7ea      	b.n	800b7ac <quorem+0xe2>
 800b7d6:	2000      	movs	r0, #0
 800b7d8:	e7ee      	b.n	800b7b8 <quorem+0xee>
 800b7da:	0000      	movs	r0, r0
 800b7dc:	0000      	movs	r0, r0
	...

0800b7e0 <_dtoa_r>:
 800b7e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7e4:	69c7      	ldr	r7, [r0, #28]
 800b7e6:	b097      	sub	sp, #92	@ 0x5c
 800b7e8:	ed8d 0b04 	vstr	d0, [sp, #16]
 800b7ec:	ec55 4b10 	vmov	r4, r5, d0
 800b7f0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800b7f2:	9107      	str	r1, [sp, #28]
 800b7f4:	4681      	mov	r9, r0
 800b7f6:	920c      	str	r2, [sp, #48]	@ 0x30
 800b7f8:	9311      	str	r3, [sp, #68]	@ 0x44
 800b7fa:	b97f      	cbnz	r7, 800b81c <_dtoa_r+0x3c>
 800b7fc:	2010      	movs	r0, #16
 800b7fe:	f000 fe09 	bl	800c414 <malloc>
 800b802:	4602      	mov	r2, r0
 800b804:	f8c9 001c 	str.w	r0, [r9, #28]
 800b808:	b920      	cbnz	r0, 800b814 <_dtoa_r+0x34>
 800b80a:	4ba9      	ldr	r3, [pc, #676]	@ (800bab0 <_dtoa_r+0x2d0>)
 800b80c:	21ef      	movs	r1, #239	@ 0xef
 800b80e:	48a9      	ldr	r0, [pc, #676]	@ (800bab4 <_dtoa_r+0x2d4>)
 800b810:	f001 fc5e 	bl	800d0d0 <__assert_func>
 800b814:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b818:	6007      	str	r7, [r0, #0]
 800b81a:	60c7      	str	r7, [r0, #12]
 800b81c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b820:	6819      	ldr	r1, [r3, #0]
 800b822:	b159      	cbz	r1, 800b83c <_dtoa_r+0x5c>
 800b824:	685a      	ldr	r2, [r3, #4]
 800b826:	604a      	str	r2, [r1, #4]
 800b828:	2301      	movs	r3, #1
 800b82a:	4093      	lsls	r3, r2
 800b82c:	608b      	str	r3, [r1, #8]
 800b82e:	4648      	mov	r0, r9
 800b830:	f000 fee6 	bl	800c600 <_Bfree>
 800b834:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b838:	2200      	movs	r2, #0
 800b83a:	601a      	str	r2, [r3, #0]
 800b83c:	1e2b      	subs	r3, r5, #0
 800b83e:	bfb9      	ittee	lt
 800b840:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b844:	9305      	strlt	r3, [sp, #20]
 800b846:	2300      	movge	r3, #0
 800b848:	6033      	strge	r3, [r6, #0]
 800b84a:	9f05      	ldr	r7, [sp, #20]
 800b84c:	4b9a      	ldr	r3, [pc, #616]	@ (800bab8 <_dtoa_r+0x2d8>)
 800b84e:	bfbc      	itt	lt
 800b850:	2201      	movlt	r2, #1
 800b852:	6032      	strlt	r2, [r6, #0]
 800b854:	43bb      	bics	r3, r7
 800b856:	d112      	bne.n	800b87e <_dtoa_r+0x9e>
 800b858:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b85a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b85e:	6013      	str	r3, [r2, #0]
 800b860:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b864:	4323      	orrs	r3, r4
 800b866:	f000 855a 	beq.w	800c31e <_dtoa_r+0xb3e>
 800b86a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b86c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800bacc <_dtoa_r+0x2ec>
 800b870:	2b00      	cmp	r3, #0
 800b872:	f000 855c 	beq.w	800c32e <_dtoa_r+0xb4e>
 800b876:	f10a 0303 	add.w	r3, sl, #3
 800b87a:	f000 bd56 	b.w	800c32a <_dtoa_r+0xb4a>
 800b87e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800b882:	2200      	movs	r2, #0
 800b884:	ec51 0b17 	vmov	r0, r1, d7
 800b888:	2300      	movs	r3, #0
 800b88a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800b88e:	f7f5 f923 	bl	8000ad8 <__aeabi_dcmpeq>
 800b892:	4680      	mov	r8, r0
 800b894:	b158      	cbz	r0, 800b8ae <_dtoa_r+0xce>
 800b896:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b898:	2301      	movs	r3, #1
 800b89a:	6013      	str	r3, [r2, #0]
 800b89c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b89e:	b113      	cbz	r3, 800b8a6 <_dtoa_r+0xc6>
 800b8a0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b8a2:	4b86      	ldr	r3, [pc, #536]	@ (800babc <_dtoa_r+0x2dc>)
 800b8a4:	6013      	str	r3, [r2, #0]
 800b8a6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800bad0 <_dtoa_r+0x2f0>
 800b8aa:	f000 bd40 	b.w	800c32e <_dtoa_r+0xb4e>
 800b8ae:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800b8b2:	aa14      	add	r2, sp, #80	@ 0x50
 800b8b4:	a915      	add	r1, sp, #84	@ 0x54
 800b8b6:	4648      	mov	r0, r9
 800b8b8:	f001 f984 	bl	800cbc4 <__d2b>
 800b8bc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b8c0:	9002      	str	r0, [sp, #8]
 800b8c2:	2e00      	cmp	r6, #0
 800b8c4:	d078      	beq.n	800b9b8 <_dtoa_r+0x1d8>
 800b8c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b8c8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800b8cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b8d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b8d4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b8d8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b8dc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b8e0:	4619      	mov	r1, r3
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	4b76      	ldr	r3, [pc, #472]	@ (800bac0 <_dtoa_r+0x2e0>)
 800b8e6:	f7f4 fcd7 	bl	8000298 <__aeabi_dsub>
 800b8ea:	a36b      	add	r3, pc, #428	@ (adr r3, 800ba98 <_dtoa_r+0x2b8>)
 800b8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8f0:	f7f4 fe8a 	bl	8000608 <__aeabi_dmul>
 800b8f4:	a36a      	add	r3, pc, #424	@ (adr r3, 800baa0 <_dtoa_r+0x2c0>)
 800b8f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8fa:	f7f4 fccf 	bl	800029c <__adddf3>
 800b8fe:	4604      	mov	r4, r0
 800b900:	4630      	mov	r0, r6
 800b902:	460d      	mov	r5, r1
 800b904:	f7f4 fe16 	bl	8000534 <__aeabi_i2d>
 800b908:	a367      	add	r3, pc, #412	@ (adr r3, 800baa8 <_dtoa_r+0x2c8>)
 800b90a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b90e:	f7f4 fe7b 	bl	8000608 <__aeabi_dmul>
 800b912:	4602      	mov	r2, r0
 800b914:	460b      	mov	r3, r1
 800b916:	4620      	mov	r0, r4
 800b918:	4629      	mov	r1, r5
 800b91a:	f7f4 fcbf 	bl	800029c <__adddf3>
 800b91e:	4604      	mov	r4, r0
 800b920:	460d      	mov	r5, r1
 800b922:	f7f5 f921 	bl	8000b68 <__aeabi_d2iz>
 800b926:	2200      	movs	r2, #0
 800b928:	4607      	mov	r7, r0
 800b92a:	2300      	movs	r3, #0
 800b92c:	4620      	mov	r0, r4
 800b92e:	4629      	mov	r1, r5
 800b930:	f7f5 f8dc 	bl	8000aec <__aeabi_dcmplt>
 800b934:	b140      	cbz	r0, 800b948 <_dtoa_r+0x168>
 800b936:	4638      	mov	r0, r7
 800b938:	f7f4 fdfc 	bl	8000534 <__aeabi_i2d>
 800b93c:	4622      	mov	r2, r4
 800b93e:	462b      	mov	r3, r5
 800b940:	f7f5 f8ca 	bl	8000ad8 <__aeabi_dcmpeq>
 800b944:	b900      	cbnz	r0, 800b948 <_dtoa_r+0x168>
 800b946:	3f01      	subs	r7, #1
 800b948:	2f16      	cmp	r7, #22
 800b94a:	d852      	bhi.n	800b9f2 <_dtoa_r+0x212>
 800b94c:	4b5d      	ldr	r3, [pc, #372]	@ (800bac4 <_dtoa_r+0x2e4>)
 800b94e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b952:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b956:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b95a:	f7f5 f8c7 	bl	8000aec <__aeabi_dcmplt>
 800b95e:	2800      	cmp	r0, #0
 800b960:	d049      	beq.n	800b9f6 <_dtoa_r+0x216>
 800b962:	3f01      	subs	r7, #1
 800b964:	2300      	movs	r3, #0
 800b966:	9310      	str	r3, [sp, #64]	@ 0x40
 800b968:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b96a:	1b9b      	subs	r3, r3, r6
 800b96c:	1e5a      	subs	r2, r3, #1
 800b96e:	bf45      	ittet	mi
 800b970:	f1c3 0301 	rsbmi	r3, r3, #1
 800b974:	9300      	strmi	r3, [sp, #0]
 800b976:	2300      	movpl	r3, #0
 800b978:	2300      	movmi	r3, #0
 800b97a:	9206      	str	r2, [sp, #24]
 800b97c:	bf54      	ite	pl
 800b97e:	9300      	strpl	r3, [sp, #0]
 800b980:	9306      	strmi	r3, [sp, #24]
 800b982:	2f00      	cmp	r7, #0
 800b984:	db39      	blt.n	800b9fa <_dtoa_r+0x21a>
 800b986:	9b06      	ldr	r3, [sp, #24]
 800b988:	970d      	str	r7, [sp, #52]	@ 0x34
 800b98a:	443b      	add	r3, r7
 800b98c:	9306      	str	r3, [sp, #24]
 800b98e:	2300      	movs	r3, #0
 800b990:	9308      	str	r3, [sp, #32]
 800b992:	9b07      	ldr	r3, [sp, #28]
 800b994:	2b09      	cmp	r3, #9
 800b996:	d863      	bhi.n	800ba60 <_dtoa_r+0x280>
 800b998:	2b05      	cmp	r3, #5
 800b99a:	bfc4      	itt	gt
 800b99c:	3b04      	subgt	r3, #4
 800b99e:	9307      	strgt	r3, [sp, #28]
 800b9a0:	9b07      	ldr	r3, [sp, #28]
 800b9a2:	f1a3 0302 	sub.w	r3, r3, #2
 800b9a6:	bfcc      	ite	gt
 800b9a8:	2400      	movgt	r4, #0
 800b9aa:	2401      	movle	r4, #1
 800b9ac:	2b03      	cmp	r3, #3
 800b9ae:	d863      	bhi.n	800ba78 <_dtoa_r+0x298>
 800b9b0:	e8df f003 	tbb	[pc, r3]
 800b9b4:	2b375452 	.word	0x2b375452
 800b9b8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800b9bc:	441e      	add	r6, r3
 800b9be:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b9c2:	2b20      	cmp	r3, #32
 800b9c4:	bfc1      	itttt	gt
 800b9c6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b9ca:	409f      	lslgt	r7, r3
 800b9cc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b9d0:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b9d4:	bfd6      	itet	le
 800b9d6:	f1c3 0320 	rsble	r3, r3, #32
 800b9da:	ea47 0003 	orrgt.w	r0, r7, r3
 800b9de:	fa04 f003 	lslle.w	r0, r4, r3
 800b9e2:	f7f4 fd97 	bl	8000514 <__aeabi_ui2d>
 800b9e6:	2201      	movs	r2, #1
 800b9e8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b9ec:	3e01      	subs	r6, #1
 800b9ee:	9212      	str	r2, [sp, #72]	@ 0x48
 800b9f0:	e776      	b.n	800b8e0 <_dtoa_r+0x100>
 800b9f2:	2301      	movs	r3, #1
 800b9f4:	e7b7      	b.n	800b966 <_dtoa_r+0x186>
 800b9f6:	9010      	str	r0, [sp, #64]	@ 0x40
 800b9f8:	e7b6      	b.n	800b968 <_dtoa_r+0x188>
 800b9fa:	9b00      	ldr	r3, [sp, #0]
 800b9fc:	1bdb      	subs	r3, r3, r7
 800b9fe:	9300      	str	r3, [sp, #0]
 800ba00:	427b      	negs	r3, r7
 800ba02:	9308      	str	r3, [sp, #32]
 800ba04:	2300      	movs	r3, #0
 800ba06:	930d      	str	r3, [sp, #52]	@ 0x34
 800ba08:	e7c3      	b.n	800b992 <_dtoa_r+0x1b2>
 800ba0a:	2301      	movs	r3, #1
 800ba0c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba0e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ba10:	eb07 0b03 	add.w	fp, r7, r3
 800ba14:	f10b 0301 	add.w	r3, fp, #1
 800ba18:	2b01      	cmp	r3, #1
 800ba1a:	9303      	str	r3, [sp, #12]
 800ba1c:	bfb8      	it	lt
 800ba1e:	2301      	movlt	r3, #1
 800ba20:	e006      	b.n	800ba30 <_dtoa_r+0x250>
 800ba22:	2301      	movs	r3, #1
 800ba24:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba26:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	dd28      	ble.n	800ba7e <_dtoa_r+0x29e>
 800ba2c:	469b      	mov	fp, r3
 800ba2e:	9303      	str	r3, [sp, #12]
 800ba30:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800ba34:	2100      	movs	r1, #0
 800ba36:	2204      	movs	r2, #4
 800ba38:	f102 0514 	add.w	r5, r2, #20
 800ba3c:	429d      	cmp	r5, r3
 800ba3e:	d926      	bls.n	800ba8e <_dtoa_r+0x2ae>
 800ba40:	6041      	str	r1, [r0, #4]
 800ba42:	4648      	mov	r0, r9
 800ba44:	f000 fd9c 	bl	800c580 <_Balloc>
 800ba48:	4682      	mov	sl, r0
 800ba4a:	2800      	cmp	r0, #0
 800ba4c:	d142      	bne.n	800bad4 <_dtoa_r+0x2f4>
 800ba4e:	4b1e      	ldr	r3, [pc, #120]	@ (800bac8 <_dtoa_r+0x2e8>)
 800ba50:	4602      	mov	r2, r0
 800ba52:	f240 11af 	movw	r1, #431	@ 0x1af
 800ba56:	e6da      	b.n	800b80e <_dtoa_r+0x2e>
 800ba58:	2300      	movs	r3, #0
 800ba5a:	e7e3      	b.n	800ba24 <_dtoa_r+0x244>
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	e7d5      	b.n	800ba0c <_dtoa_r+0x22c>
 800ba60:	2401      	movs	r4, #1
 800ba62:	2300      	movs	r3, #0
 800ba64:	9307      	str	r3, [sp, #28]
 800ba66:	9409      	str	r4, [sp, #36]	@ 0x24
 800ba68:	f04f 3bff 	mov.w	fp, #4294967295
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	f8cd b00c 	str.w	fp, [sp, #12]
 800ba72:	2312      	movs	r3, #18
 800ba74:	920c      	str	r2, [sp, #48]	@ 0x30
 800ba76:	e7db      	b.n	800ba30 <_dtoa_r+0x250>
 800ba78:	2301      	movs	r3, #1
 800ba7a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba7c:	e7f4      	b.n	800ba68 <_dtoa_r+0x288>
 800ba7e:	f04f 0b01 	mov.w	fp, #1
 800ba82:	f8cd b00c 	str.w	fp, [sp, #12]
 800ba86:	465b      	mov	r3, fp
 800ba88:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800ba8c:	e7d0      	b.n	800ba30 <_dtoa_r+0x250>
 800ba8e:	3101      	adds	r1, #1
 800ba90:	0052      	lsls	r2, r2, #1
 800ba92:	e7d1      	b.n	800ba38 <_dtoa_r+0x258>
 800ba94:	f3af 8000 	nop.w
 800ba98:	636f4361 	.word	0x636f4361
 800ba9c:	3fd287a7 	.word	0x3fd287a7
 800baa0:	8b60c8b3 	.word	0x8b60c8b3
 800baa4:	3fc68a28 	.word	0x3fc68a28
 800baa8:	509f79fb 	.word	0x509f79fb
 800baac:	3fd34413 	.word	0x3fd34413
 800bab0:	080109f5 	.word	0x080109f5
 800bab4:	08010a0c 	.word	0x08010a0c
 800bab8:	7ff00000 	.word	0x7ff00000
 800babc:	080109c5 	.word	0x080109c5
 800bac0:	3ff80000 	.word	0x3ff80000
 800bac4:	08010b60 	.word	0x08010b60
 800bac8:	08010a64 	.word	0x08010a64
 800bacc:	080109f1 	.word	0x080109f1
 800bad0:	080109c4 	.word	0x080109c4
 800bad4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800bad8:	6018      	str	r0, [r3, #0]
 800bada:	9b03      	ldr	r3, [sp, #12]
 800badc:	2b0e      	cmp	r3, #14
 800bade:	f200 80a1 	bhi.w	800bc24 <_dtoa_r+0x444>
 800bae2:	2c00      	cmp	r4, #0
 800bae4:	f000 809e 	beq.w	800bc24 <_dtoa_r+0x444>
 800bae8:	2f00      	cmp	r7, #0
 800baea:	dd33      	ble.n	800bb54 <_dtoa_r+0x374>
 800baec:	4b9c      	ldr	r3, [pc, #624]	@ (800bd60 <_dtoa_r+0x580>)
 800baee:	f007 020f 	and.w	r2, r7, #15
 800baf2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800baf6:	ed93 7b00 	vldr	d7, [r3]
 800bafa:	05f8      	lsls	r0, r7, #23
 800bafc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800bb00:	ea4f 1427 	mov.w	r4, r7, asr #4
 800bb04:	d516      	bpl.n	800bb34 <_dtoa_r+0x354>
 800bb06:	4b97      	ldr	r3, [pc, #604]	@ (800bd64 <_dtoa_r+0x584>)
 800bb08:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800bb0c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bb10:	f7f4 fea4 	bl	800085c <__aeabi_ddiv>
 800bb14:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bb18:	f004 040f 	and.w	r4, r4, #15
 800bb1c:	2603      	movs	r6, #3
 800bb1e:	4d91      	ldr	r5, [pc, #580]	@ (800bd64 <_dtoa_r+0x584>)
 800bb20:	b954      	cbnz	r4, 800bb38 <_dtoa_r+0x358>
 800bb22:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800bb26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bb2a:	f7f4 fe97 	bl	800085c <__aeabi_ddiv>
 800bb2e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bb32:	e028      	b.n	800bb86 <_dtoa_r+0x3a6>
 800bb34:	2602      	movs	r6, #2
 800bb36:	e7f2      	b.n	800bb1e <_dtoa_r+0x33e>
 800bb38:	07e1      	lsls	r1, r4, #31
 800bb3a:	d508      	bpl.n	800bb4e <_dtoa_r+0x36e>
 800bb3c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800bb40:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bb44:	f7f4 fd60 	bl	8000608 <__aeabi_dmul>
 800bb48:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800bb4c:	3601      	adds	r6, #1
 800bb4e:	1064      	asrs	r4, r4, #1
 800bb50:	3508      	adds	r5, #8
 800bb52:	e7e5      	b.n	800bb20 <_dtoa_r+0x340>
 800bb54:	f000 80af 	beq.w	800bcb6 <_dtoa_r+0x4d6>
 800bb58:	427c      	negs	r4, r7
 800bb5a:	4b81      	ldr	r3, [pc, #516]	@ (800bd60 <_dtoa_r+0x580>)
 800bb5c:	4d81      	ldr	r5, [pc, #516]	@ (800bd64 <_dtoa_r+0x584>)
 800bb5e:	f004 020f 	and.w	r2, r4, #15
 800bb62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bb66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb6a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800bb6e:	f7f4 fd4b 	bl	8000608 <__aeabi_dmul>
 800bb72:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bb76:	1124      	asrs	r4, r4, #4
 800bb78:	2300      	movs	r3, #0
 800bb7a:	2602      	movs	r6, #2
 800bb7c:	2c00      	cmp	r4, #0
 800bb7e:	f040 808f 	bne.w	800bca0 <_dtoa_r+0x4c0>
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d1d3      	bne.n	800bb2e <_dtoa_r+0x34e>
 800bb86:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bb88:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	f000 8094 	beq.w	800bcba <_dtoa_r+0x4da>
 800bb92:	4b75      	ldr	r3, [pc, #468]	@ (800bd68 <_dtoa_r+0x588>)
 800bb94:	2200      	movs	r2, #0
 800bb96:	4620      	mov	r0, r4
 800bb98:	4629      	mov	r1, r5
 800bb9a:	f7f4 ffa7 	bl	8000aec <__aeabi_dcmplt>
 800bb9e:	2800      	cmp	r0, #0
 800bba0:	f000 808b 	beq.w	800bcba <_dtoa_r+0x4da>
 800bba4:	9b03      	ldr	r3, [sp, #12]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	f000 8087 	beq.w	800bcba <_dtoa_r+0x4da>
 800bbac:	f1bb 0f00 	cmp.w	fp, #0
 800bbb0:	dd34      	ble.n	800bc1c <_dtoa_r+0x43c>
 800bbb2:	4620      	mov	r0, r4
 800bbb4:	4b6d      	ldr	r3, [pc, #436]	@ (800bd6c <_dtoa_r+0x58c>)
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	4629      	mov	r1, r5
 800bbba:	f7f4 fd25 	bl	8000608 <__aeabi_dmul>
 800bbbe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bbc2:	f107 38ff 	add.w	r8, r7, #4294967295
 800bbc6:	3601      	adds	r6, #1
 800bbc8:	465c      	mov	r4, fp
 800bbca:	4630      	mov	r0, r6
 800bbcc:	f7f4 fcb2 	bl	8000534 <__aeabi_i2d>
 800bbd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bbd4:	f7f4 fd18 	bl	8000608 <__aeabi_dmul>
 800bbd8:	4b65      	ldr	r3, [pc, #404]	@ (800bd70 <_dtoa_r+0x590>)
 800bbda:	2200      	movs	r2, #0
 800bbdc:	f7f4 fb5e 	bl	800029c <__adddf3>
 800bbe0:	4605      	mov	r5, r0
 800bbe2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800bbe6:	2c00      	cmp	r4, #0
 800bbe8:	d16a      	bne.n	800bcc0 <_dtoa_r+0x4e0>
 800bbea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bbee:	4b61      	ldr	r3, [pc, #388]	@ (800bd74 <_dtoa_r+0x594>)
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	f7f4 fb51 	bl	8000298 <__aeabi_dsub>
 800bbf6:	4602      	mov	r2, r0
 800bbf8:	460b      	mov	r3, r1
 800bbfa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bbfe:	462a      	mov	r2, r5
 800bc00:	4633      	mov	r3, r6
 800bc02:	f7f4 ff91 	bl	8000b28 <__aeabi_dcmpgt>
 800bc06:	2800      	cmp	r0, #0
 800bc08:	f040 8298 	bne.w	800c13c <_dtoa_r+0x95c>
 800bc0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bc10:	462a      	mov	r2, r5
 800bc12:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800bc16:	f7f4 ff69 	bl	8000aec <__aeabi_dcmplt>
 800bc1a:	bb38      	cbnz	r0, 800bc6c <_dtoa_r+0x48c>
 800bc1c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800bc20:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800bc24:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	f2c0 8157 	blt.w	800beda <_dtoa_r+0x6fa>
 800bc2c:	2f0e      	cmp	r7, #14
 800bc2e:	f300 8154 	bgt.w	800beda <_dtoa_r+0x6fa>
 800bc32:	4b4b      	ldr	r3, [pc, #300]	@ (800bd60 <_dtoa_r+0x580>)
 800bc34:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bc38:	ed93 7b00 	vldr	d7, [r3]
 800bc3c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	ed8d 7b00 	vstr	d7, [sp]
 800bc44:	f280 80e5 	bge.w	800be12 <_dtoa_r+0x632>
 800bc48:	9b03      	ldr	r3, [sp, #12]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	f300 80e1 	bgt.w	800be12 <_dtoa_r+0x632>
 800bc50:	d10c      	bne.n	800bc6c <_dtoa_r+0x48c>
 800bc52:	4b48      	ldr	r3, [pc, #288]	@ (800bd74 <_dtoa_r+0x594>)
 800bc54:	2200      	movs	r2, #0
 800bc56:	ec51 0b17 	vmov	r0, r1, d7
 800bc5a:	f7f4 fcd5 	bl	8000608 <__aeabi_dmul>
 800bc5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bc62:	f7f4 ff57 	bl	8000b14 <__aeabi_dcmpge>
 800bc66:	2800      	cmp	r0, #0
 800bc68:	f000 8266 	beq.w	800c138 <_dtoa_r+0x958>
 800bc6c:	2400      	movs	r4, #0
 800bc6e:	4625      	mov	r5, r4
 800bc70:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bc72:	4656      	mov	r6, sl
 800bc74:	ea6f 0803 	mvn.w	r8, r3
 800bc78:	2700      	movs	r7, #0
 800bc7a:	4621      	mov	r1, r4
 800bc7c:	4648      	mov	r0, r9
 800bc7e:	f000 fcbf 	bl	800c600 <_Bfree>
 800bc82:	2d00      	cmp	r5, #0
 800bc84:	f000 80bd 	beq.w	800be02 <_dtoa_r+0x622>
 800bc88:	b12f      	cbz	r7, 800bc96 <_dtoa_r+0x4b6>
 800bc8a:	42af      	cmp	r7, r5
 800bc8c:	d003      	beq.n	800bc96 <_dtoa_r+0x4b6>
 800bc8e:	4639      	mov	r1, r7
 800bc90:	4648      	mov	r0, r9
 800bc92:	f000 fcb5 	bl	800c600 <_Bfree>
 800bc96:	4629      	mov	r1, r5
 800bc98:	4648      	mov	r0, r9
 800bc9a:	f000 fcb1 	bl	800c600 <_Bfree>
 800bc9e:	e0b0      	b.n	800be02 <_dtoa_r+0x622>
 800bca0:	07e2      	lsls	r2, r4, #31
 800bca2:	d505      	bpl.n	800bcb0 <_dtoa_r+0x4d0>
 800bca4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bca8:	f7f4 fcae 	bl	8000608 <__aeabi_dmul>
 800bcac:	3601      	adds	r6, #1
 800bcae:	2301      	movs	r3, #1
 800bcb0:	1064      	asrs	r4, r4, #1
 800bcb2:	3508      	adds	r5, #8
 800bcb4:	e762      	b.n	800bb7c <_dtoa_r+0x39c>
 800bcb6:	2602      	movs	r6, #2
 800bcb8:	e765      	b.n	800bb86 <_dtoa_r+0x3a6>
 800bcba:	9c03      	ldr	r4, [sp, #12]
 800bcbc:	46b8      	mov	r8, r7
 800bcbe:	e784      	b.n	800bbca <_dtoa_r+0x3ea>
 800bcc0:	4b27      	ldr	r3, [pc, #156]	@ (800bd60 <_dtoa_r+0x580>)
 800bcc2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bcc4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bcc8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bccc:	4454      	add	r4, sl
 800bcce:	2900      	cmp	r1, #0
 800bcd0:	d054      	beq.n	800bd7c <_dtoa_r+0x59c>
 800bcd2:	4929      	ldr	r1, [pc, #164]	@ (800bd78 <_dtoa_r+0x598>)
 800bcd4:	2000      	movs	r0, #0
 800bcd6:	f7f4 fdc1 	bl	800085c <__aeabi_ddiv>
 800bcda:	4633      	mov	r3, r6
 800bcdc:	462a      	mov	r2, r5
 800bcde:	f7f4 fadb 	bl	8000298 <__aeabi_dsub>
 800bce2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800bce6:	4656      	mov	r6, sl
 800bce8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bcec:	f7f4 ff3c 	bl	8000b68 <__aeabi_d2iz>
 800bcf0:	4605      	mov	r5, r0
 800bcf2:	f7f4 fc1f 	bl	8000534 <__aeabi_i2d>
 800bcf6:	4602      	mov	r2, r0
 800bcf8:	460b      	mov	r3, r1
 800bcfa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bcfe:	f7f4 facb 	bl	8000298 <__aeabi_dsub>
 800bd02:	3530      	adds	r5, #48	@ 0x30
 800bd04:	4602      	mov	r2, r0
 800bd06:	460b      	mov	r3, r1
 800bd08:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bd0c:	f806 5b01 	strb.w	r5, [r6], #1
 800bd10:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800bd14:	f7f4 feea 	bl	8000aec <__aeabi_dcmplt>
 800bd18:	2800      	cmp	r0, #0
 800bd1a:	d172      	bne.n	800be02 <_dtoa_r+0x622>
 800bd1c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bd20:	4911      	ldr	r1, [pc, #68]	@ (800bd68 <_dtoa_r+0x588>)
 800bd22:	2000      	movs	r0, #0
 800bd24:	f7f4 fab8 	bl	8000298 <__aeabi_dsub>
 800bd28:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800bd2c:	f7f4 fede 	bl	8000aec <__aeabi_dcmplt>
 800bd30:	2800      	cmp	r0, #0
 800bd32:	f040 80b4 	bne.w	800be9e <_dtoa_r+0x6be>
 800bd36:	42a6      	cmp	r6, r4
 800bd38:	f43f af70 	beq.w	800bc1c <_dtoa_r+0x43c>
 800bd3c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800bd40:	4b0a      	ldr	r3, [pc, #40]	@ (800bd6c <_dtoa_r+0x58c>)
 800bd42:	2200      	movs	r2, #0
 800bd44:	f7f4 fc60 	bl	8000608 <__aeabi_dmul>
 800bd48:	4b08      	ldr	r3, [pc, #32]	@ (800bd6c <_dtoa_r+0x58c>)
 800bd4a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800bd4e:	2200      	movs	r2, #0
 800bd50:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bd54:	f7f4 fc58 	bl	8000608 <__aeabi_dmul>
 800bd58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bd5c:	e7c4      	b.n	800bce8 <_dtoa_r+0x508>
 800bd5e:	bf00      	nop
 800bd60:	08010b60 	.word	0x08010b60
 800bd64:	08010b38 	.word	0x08010b38
 800bd68:	3ff00000 	.word	0x3ff00000
 800bd6c:	40240000 	.word	0x40240000
 800bd70:	401c0000 	.word	0x401c0000
 800bd74:	40140000 	.word	0x40140000
 800bd78:	3fe00000 	.word	0x3fe00000
 800bd7c:	4631      	mov	r1, r6
 800bd7e:	4628      	mov	r0, r5
 800bd80:	f7f4 fc42 	bl	8000608 <__aeabi_dmul>
 800bd84:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800bd88:	9413      	str	r4, [sp, #76]	@ 0x4c
 800bd8a:	4656      	mov	r6, sl
 800bd8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bd90:	f7f4 feea 	bl	8000b68 <__aeabi_d2iz>
 800bd94:	4605      	mov	r5, r0
 800bd96:	f7f4 fbcd 	bl	8000534 <__aeabi_i2d>
 800bd9a:	4602      	mov	r2, r0
 800bd9c:	460b      	mov	r3, r1
 800bd9e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bda2:	f7f4 fa79 	bl	8000298 <__aeabi_dsub>
 800bda6:	3530      	adds	r5, #48	@ 0x30
 800bda8:	f806 5b01 	strb.w	r5, [r6], #1
 800bdac:	4602      	mov	r2, r0
 800bdae:	460b      	mov	r3, r1
 800bdb0:	42a6      	cmp	r6, r4
 800bdb2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bdb6:	f04f 0200 	mov.w	r2, #0
 800bdba:	d124      	bne.n	800be06 <_dtoa_r+0x626>
 800bdbc:	4baf      	ldr	r3, [pc, #700]	@ (800c07c <_dtoa_r+0x89c>)
 800bdbe:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800bdc2:	f7f4 fa6b 	bl	800029c <__adddf3>
 800bdc6:	4602      	mov	r2, r0
 800bdc8:	460b      	mov	r3, r1
 800bdca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bdce:	f7f4 feab 	bl	8000b28 <__aeabi_dcmpgt>
 800bdd2:	2800      	cmp	r0, #0
 800bdd4:	d163      	bne.n	800be9e <_dtoa_r+0x6be>
 800bdd6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800bdda:	49a8      	ldr	r1, [pc, #672]	@ (800c07c <_dtoa_r+0x89c>)
 800bddc:	2000      	movs	r0, #0
 800bdde:	f7f4 fa5b 	bl	8000298 <__aeabi_dsub>
 800bde2:	4602      	mov	r2, r0
 800bde4:	460b      	mov	r3, r1
 800bde6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bdea:	f7f4 fe7f 	bl	8000aec <__aeabi_dcmplt>
 800bdee:	2800      	cmp	r0, #0
 800bdf0:	f43f af14 	beq.w	800bc1c <_dtoa_r+0x43c>
 800bdf4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800bdf6:	1e73      	subs	r3, r6, #1
 800bdf8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bdfa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bdfe:	2b30      	cmp	r3, #48	@ 0x30
 800be00:	d0f8      	beq.n	800bdf4 <_dtoa_r+0x614>
 800be02:	4647      	mov	r7, r8
 800be04:	e03b      	b.n	800be7e <_dtoa_r+0x69e>
 800be06:	4b9e      	ldr	r3, [pc, #632]	@ (800c080 <_dtoa_r+0x8a0>)
 800be08:	f7f4 fbfe 	bl	8000608 <__aeabi_dmul>
 800be0c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800be10:	e7bc      	b.n	800bd8c <_dtoa_r+0x5ac>
 800be12:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800be16:	4656      	mov	r6, sl
 800be18:	e9dd 2300 	ldrd	r2, r3, [sp]
 800be1c:	4620      	mov	r0, r4
 800be1e:	4629      	mov	r1, r5
 800be20:	f7f4 fd1c 	bl	800085c <__aeabi_ddiv>
 800be24:	f7f4 fea0 	bl	8000b68 <__aeabi_d2iz>
 800be28:	4680      	mov	r8, r0
 800be2a:	f7f4 fb83 	bl	8000534 <__aeabi_i2d>
 800be2e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800be32:	f7f4 fbe9 	bl	8000608 <__aeabi_dmul>
 800be36:	4602      	mov	r2, r0
 800be38:	460b      	mov	r3, r1
 800be3a:	4620      	mov	r0, r4
 800be3c:	4629      	mov	r1, r5
 800be3e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800be42:	f7f4 fa29 	bl	8000298 <__aeabi_dsub>
 800be46:	f806 4b01 	strb.w	r4, [r6], #1
 800be4a:	9d03      	ldr	r5, [sp, #12]
 800be4c:	eba6 040a 	sub.w	r4, r6, sl
 800be50:	42a5      	cmp	r5, r4
 800be52:	4602      	mov	r2, r0
 800be54:	460b      	mov	r3, r1
 800be56:	d133      	bne.n	800bec0 <_dtoa_r+0x6e0>
 800be58:	f7f4 fa20 	bl	800029c <__adddf3>
 800be5c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800be60:	4604      	mov	r4, r0
 800be62:	460d      	mov	r5, r1
 800be64:	f7f4 fe60 	bl	8000b28 <__aeabi_dcmpgt>
 800be68:	b9c0      	cbnz	r0, 800be9c <_dtoa_r+0x6bc>
 800be6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800be6e:	4620      	mov	r0, r4
 800be70:	4629      	mov	r1, r5
 800be72:	f7f4 fe31 	bl	8000ad8 <__aeabi_dcmpeq>
 800be76:	b110      	cbz	r0, 800be7e <_dtoa_r+0x69e>
 800be78:	f018 0f01 	tst.w	r8, #1
 800be7c:	d10e      	bne.n	800be9c <_dtoa_r+0x6bc>
 800be7e:	9902      	ldr	r1, [sp, #8]
 800be80:	4648      	mov	r0, r9
 800be82:	f000 fbbd 	bl	800c600 <_Bfree>
 800be86:	2300      	movs	r3, #0
 800be88:	7033      	strb	r3, [r6, #0]
 800be8a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800be8c:	3701      	adds	r7, #1
 800be8e:	601f      	str	r7, [r3, #0]
 800be90:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800be92:	2b00      	cmp	r3, #0
 800be94:	f000 824b 	beq.w	800c32e <_dtoa_r+0xb4e>
 800be98:	601e      	str	r6, [r3, #0]
 800be9a:	e248      	b.n	800c32e <_dtoa_r+0xb4e>
 800be9c:	46b8      	mov	r8, r7
 800be9e:	4633      	mov	r3, r6
 800bea0:	461e      	mov	r6, r3
 800bea2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bea6:	2a39      	cmp	r2, #57	@ 0x39
 800bea8:	d106      	bne.n	800beb8 <_dtoa_r+0x6d8>
 800beaa:	459a      	cmp	sl, r3
 800beac:	d1f8      	bne.n	800bea0 <_dtoa_r+0x6c0>
 800beae:	2230      	movs	r2, #48	@ 0x30
 800beb0:	f108 0801 	add.w	r8, r8, #1
 800beb4:	f88a 2000 	strb.w	r2, [sl]
 800beb8:	781a      	ldrb	r2, [r3, #0]
 800beba:	3201      	adds	r2, #1
 800bebc:	701a      	strb	r2, [r3, #0]
 800bebe:	e7a0      	b.n	800be02 <_dtoa_r+0x622>
 800bec0:	4b6f      	ldr	r3, [pc, #444]	@ (800c080 <_dtoa_r+0x8a0>)
 800bec2:	2200      	movs	r2, #0
 800bec4:	f7f4 fba0 	bl	8000608 <__aeabi_dmul>
 800bec8:	2200      	movs	r2, #0
 800beca:	2300      	movs	r3, #0
 800becc:	4604      	mov	r4, r0
 800bece:	460d      	mov	r5, r1
 800bed0:	f7f4 fe02 	bl	8000ad8 <__aeabi_dcmpeq>
 800bed4:	2800      	cmp	r0, #0
 800bed6:	d09f      	beq.n	800be18 <_dtoa_r+0x638>
 800bed8:	e7d1      	b.n	800be7e <_dtoa_r+0x69e>
 800beda:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bedc:	2a00      	cmp	r2, #0
 800bede:	f000 80ea 	beq.w	800c0b6 <_dtoa_r+0x8d6>
 800bee2:	9a07      	ldr	r2, [sp, #28]
 800bee4:	2a01      	cmp	r2, #1
 800bee6:	f300 80cd 	bgt.w	800c084 <_dtoa_r+0x8a4>
 800beea:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800beec:	2a00      	cmp	r2, #0
 800beee:	f000 80c1 	beq.w	800c074 <_dtoa_r+0x894>
 800bef2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800bef6:	9c08      	ldr	r4, [sp, #32]
 800bef8:	9e00      	ldr	r6, [sp, #0]
 800befa:	9a00      	ldr	r2, [sp, #0]
 800befc:	441a      	add	r2, r3
 800befe:	9200      	str	r2, [sp, #0]
 800bf00:	9a06      	ldr	r2, [sp, #24]
 800bf02:	2101      	movs	r1, #1
 800bf04:	441a      	add	r2, r3
 800bf06:	4648      	mov	r0, r9
 800bf08:	9206      	str	r2, [sp, #24]
 800bf0a:	f000 fc2d 	bl	800c768 <__i2b>
 800bf0e:	4605      	mov	r5, r0
 800bf10:	b166      	cbz	r6, 800bf2c <_dtoa_r+0x74c>
 800bf12:	9b06      	ldr	r3, [sp, #24]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	dd09      	ble.n	800bf2c <_dtoa_r+0x74c>
 800bf18:	42b3      	cmp	r3, r6
 800bf1a:	9a00      	ldr	r2, [sp, #0]
 800bf1c:	bfa8      	it	ge
 800bf1e:	4633      	movge	r3, r6
 800bf20:	1ad2      	subs	r2, r2, r3
 800bf22:	9200      	str	r2, [sp, #0]
 800bf24:	9a06      	ldr	r2, [sp, #24]
 800bf26:	1af6      	subs	r6, r6, r3
 800bf28:	1ad3      	subs	r3, r2, r3
 800bf2a:	9306      	str	r3, [sp, #24]
 800bf2c:	9b08      	ldr	r3, [sp, #32]
 800bf2e:	b30b      	cbz	r3, 800bf74 <_dtoa_r+0x794>
 800bf30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	f000 80c6 	beq.w	800c0c4 <_dtoa_r+0x8e4>
 800bf38:	2c00      	cmp	r4, #0
 800bf3a:	f000 80c0 	beq.w	800c0be <_dtoa_r+0x8de>
 800bf3e:	4629      	mov	r1, r5
 800bf40:	4622      	mov	r2, r4
 800bf42:	4648      	mov	r0, r9
 800bf44:	f000 fcc8 	bl	800c8d8 <__pow5mult>
 800bf48:	9a02      	ldr	r2, [sp, #8]
 800bf4a:	4601      	mov	r1, r0
 800bf4c:	4605      	mov	r5, r0
 800bf4e:	4648      	mov	r0, r9
 800bf50:	f000 fc20 	bl	800c794 <__multiply>
 800bf54:	9902      	ldr	r1, [sp, #8]
 800bf56:	4680      	mov	r8, r0
 800bf58:	4648      	mov	r0, r9
 800bf5a:	f000 fb51 	bl	800c600 <_Bfree>
 800bf5e:	9b08      	ldr	r3, [sp, #32]
 800bf60:	1b1b      	subs	r3, r3, r4
 800bf62:	9308      	str	r3, [sp, #32]
 800bf64:	f000 80b1 	beq.w	800c0ca <_dtoa_r+0x8ea>
 800bf68:	9a08      	ldr	r2, [sp, #32]
 800bf6a:	4641      	mov	r1, r8
 800bf6c:	4648      	mov	r0, r9
 800bf6e:	f000 fcb3 	bl	800c8d8 <__pow5mult>
 800bf72:	9002      	str	r0, [sp, #8]
 800bf74:	2101      	movs	r1, #1
 800bf76:	4648      	mov	r0, r9
 800bf78:	f000 fbf6 	bl	800c768 <__i2b>
 800bf7c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bf7e:	4604      	mov	r4, r0
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	f000 81d8 	beq.w	800c336 <_dtoa_r+0xb56>
 800bf86:	461a      	mov	r2, r3
 800bf88:	4601      	mov	r1, r0
 800bf8a:	4648      	mov	r0, r9
 800bf8c:	f000 fca4 	bl	800c8d8 <__pow5mult>
 800bf90:	9b07      	ldr	r3, [sp, #28]
 800bf92:	2b01      	cmp	r3, #1
 800bf94:	4604      	mov	r4, r0
 800bf96:	f300 809f 	bgt.w	800c0d8 <_dtoa_r+0x8f8>
 800bf9a:	9b04      	ldr	r3, [sp, #16]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	f040 8097 	bne.w	800c0d0 <_dtoa_r+0x8f0>
 800bfa2:	9b05      	ldr	r3, [sp, #20]
 800bfa4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	f040 8093 	bne.w	800c0d4 <_dtoa_r+0x8f4>
 800bfae:	9b05      	ldr	r3, [sp, #20]
 800bfb0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bfb4:	0d1b      	lsrs	r3, r3, #20
 800bfb6:	051b      	lsls	r3, r3, #20
 800bfb8:	b133      	cbz	r3, 800bfc8 <_dtoa_r+0x7e8>
 800bfba:	9b00      	ldr	r3, [sp, #0]
 800bfbc:	3301      	adds	r3, #1
 800bfbe:	9300      	str	r3, [sp, #0]
 800bfc0:	9b06      	ldr	r3, [sp, #24]
 800bfc2:	3301      	adds	r3, #1
 800bfc4:	9306      	str	r3, [sp, #24]
 800bfc6:	2301      	movs	r3, #1
 800bfc8:	9308      	str	r3, [sp, #32]
 800bfca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	f000 81b8 	beq.w	800c342 <_dtoa_r+0xb62>
 800bfd2:	6923      	ldr	r3, [r4, #16]
 800bfd4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bfd8:	6918      	ldr	r0, [r3, #16]
 800bfda:	f000 fb79 	bl	800c6d0 <__hi0bits>
 800bfde:	f1c0 0020 	rsb	r0, r0, #32
 800bfe2:	9b06      	ldr	r3, [sp, #24]
 800bfe4:	4418      	add	r0, r3
 800bfe6:	f010 001f 	ands.w	r0, r0, #31
 800bfea:	f000 8082 	beq.w	800c0f2 <_dtoa_r+0x912>
 800bfee:	f1c0 0320 	rsb	r3, r0, #32
 800bff2:	2b04      	cmp	r3, #4
 800bff4:	dd73      	ble.n	800c0de <_dtoa_r+0x8fe>
 800bff6:	9b00      	ldr	r3, [sp, #0]
 800bff8:	f1c0 001c 	rsb	r0, r0, #28
 800bffc:	4403      	add	r3, r0
 800bffe:	9300      	str	r3, [sp, #0]
 800c000:	9b06      	ldr	r3, [sp, #24]
 800c002:	4403      	add	r3, r0
 800c004:	4406      	add	r6, r0
 800c006:	9306      	str	r3, [sp, #24]
 800c008:	9b00      	ldr	r3, [sp, #0]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	dd05      	ble.n	800c01a <_dtoa_r+0x83a>
 800c00e:	9902      	ldr	r1, [sp, #8]
 800c010:	461a      	mov	r2, r3
 800c012:	4648      	mov	r0, r9
 800c014:	f000 fcba 	bl	800c98c <__lshift>
 800c018:	9002      	str	r0, [sp, #8]
 800c01a:	9b06      	ldr	r3, [sp, #24]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	dd05      	ble.n	800c02c <_dtoa_r+0x84c>
 800c020:	4621      	mov	r1, r4
 800c022:	461a      	mov	r2, r3
 800c024:	4648      	mov	r0, r9
 800c026:	f000 fcb1 	bl	800c98c <__lshift>
 800c02a:	4604      	mov	r4, r0
 800c02c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d061      	beq.n	800c0f6 <_dtoa_r+0x916>
 800c032:	9802      	ldr	r0, [sp, #8]
 800c034:	4621      	mov	r1, r4
 800c036:	f000 fd15 	bl	800ca64 <__mcmp>
 800c03a:	2800      	cmp	r0, #0
 800c03c:	da5b      	bge.n	800c0f6 <_dtoa_r+0x916>
 800c03e:	2300      	movs	r3, #0
 800c040:	9902      	ldr	r1, [sp, #8]
 800c042:	220a      	movs	r2, #10
 800c044:	4648      	mov	r0, r9
 800c046:	f000 fafd 	bl	800c644 <__multadd>
 800c04a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c04c:	9002      	str	r0, [sp, #8]
 800c04e:	f107 38ff 	add.w	r8, r7, #4294967295
 800c052:	2b00      	cmp	r3, #0
 800c054:	f000 8177 	beq.w	800c346 <_dtoa_r+0xb66>
 800c058:	4629      	mov	r1, r5
 800c05a:	2300      	movs	r3, #0
 800c05c:	220a      	movs	r2, #10
 800c05e:	4648      	mov	r0, r9
 800c060:	f000 faf0 	bl	800c644 <__multadd>
 800c064:	f1bb 0f00 	cmp.w	fp, #0
 800c068:	4605      	mov	r5, r0
 800c06a:	dc6f      	bgt.n	800c14c <_dtoa_r+0x96c>
 800c06c:	9b07      	ldr	r3, [sp, #28]
 800c06e:	2b02      	cmp	r3, #2
 800c070:	dc49      	bgt.n	800c106 <_dtoa_r+0x926>
 800c072:	e06b      	b.n	800c14c <_dtoa_r+0x96c>
 800c074:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c076:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c07a:	e73c      	b.n	800bef6 <_dtoa_r+0x716>
 800c07c:	3fe00000 	.word	0x3fe00000
 800c080:	40240000 	.word	0x40240000
 800c084:	9b03      	ldr	r3, [sp, #12]
 800c086:	1e5c      	subs	r4, r3, #1
 800c088:	9b08      	ldr	r3, [sp, #32]
 800c08a:	42a3      	cmp	r3, r4
 800c08c:	db09      	blt.n	800c0a2 <_dtoa_r+0x8c2>
 800c08e:	1b1c      	subs	r4, r3, r4
 800c090:	9b03      	ldr	r3, [sp, #12]
 800c092:	2b00      	cmp	r3, #0
 800c094:	f6bf af30 	bge.w	800bef8 <_dtoa_r+0x718>
 800c098:	9b00      	ldr	r3, [sp, #0]
 800c09a:	9a03      	ldr	r2, [sp, #12]
 800c09c:	1a9e      	subs	r6, r3, r2
 800c09e:	2300      	movs	r3, #0
 800c0a0:	e72b      	b.n	800befa <_dtoa_r+0x71a>
 800c0a2:	9b08      	ldr	r3, [sp, #32]
 800c0a4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c0a6:	9408      	str	r4, [sp, #32]
 800c0a8:	1ae3      	subs	r3, r4, r3
 800c0aa:	441a      	add	r2, r3
 800c0ac:	9e00      	ldr	r6, [sp, #0]
 800c0ae:	9b03      	ldr	r3, [sp, #12]
 800c0b0:	920d      	str	r2, [sp, #52]	@ 0x34
 800c0b2:	2400      	movs	r4, #0
 800c0b4:	e721      	b.n	800befa <_dtoa_r+0x71a>
 800c0b6:	9c08      	ldr	r4, [sp, #32]
 800c0b8:	9e00      	ldr	r6, [sp, #0]
 800c0ba:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800c0bc:	e728      	b.n	800bf10 <_dtoa_r+0x730>
 800c0be:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800c0c2:	e751      	b.n	800bf68 <_dtoa_r+0x788>
 800c0c4:	9a08      	ldr	r2, [sp, #32]
 800c0c6:	9902      	ldr	r1, [sp, #8]
 800c0c8:	e750      	b.n	800bf6c <_dtoa_r+0x78c>
 800c0ca:	f8cd 8008 	str.w	r8, [sp, #8]
 800c0ce:	e751      	b.n	800bf74 <_dtoa_r+0x794>
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	e779      	b.n	800bfc8 <_dtoa_r+0x7e8>
 800c0d4:	9b04      	ldr	r3, [sp, #16]
 800c0d6:	e777      	b.n	800bfc8 <_dtoa_r+0x7e8>
 800c0d8:	2300      	movs	r3, #0
 800c0da:	9308      	str	r3, [sp, #32]
 800c0dc:	e779      	b.n	800bfd2 <_dtoa_r+0x7f2>
 800c0de:	d093      	beq.n	800c008 <_dtoa_r+0x828>
 800c0e0:	9a00      	ldr	r2, [sp, #0]
 800c0e2:	331c      	adds	r3, #28
 800c0e4:	441a      	add	r2, r3
 800c0e6:	9200      	str	r2, [sp, #0]
 800c0e8:	9a06      	ldr	r2, [sp, #24]
 800c0ea:	441a      	add	r2, r3
 800c0ec:	441e      	add	r6, r3
 800c0ee:	9206      	str	r2, [sp, #24]
 800c0f0:	e78a      	b.n	800c008 <_dtoa_r+0x828>
 800c0f2:	4603      	mov	r3, r0
 800c0f4:	e7f4      	b.n	800c0e0 <_dtoa_r+0x900>
 800c0f6:	9b03      	ldr	r3, [sp, #12]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	46b8      	mov	r8, r7
 800c0fc:	dc20      	bgt.n	800c140 <_dtoa_r+0x960>
 800c0fe:	469b      	mov	fp, r3
 800c100:	9b07      	ldr	r3, [sp, #28]
 800c102:	2b02      	cmp	r3, #2
 800c104:	dd1e      	ble.n	800c144 <_dtoa_r+0x964>
 800c106:	f1bb 0f00 	cmp.w	fp, #0
 800c10a:	f47f adb1 	bne.w	800bc70 <_dtoa_r+0x490>
 800c10e:	4621      	mov	r1, r4
 800c110:	465b      	mov	r3, fp
 800c112:	2205      	movs	r2, #5
 800c114:	4648      	mov	r0, r9
 800c116:	f000 fa95 	bl	800c644 <__multadd>
 800c11a:	4601      	mov	r1, r0
 800c11c:	4604      	mov	r4, r0
 800c11e:	9802      	ldr	r0, [sp, #8]
 800c120:	f000 fca0 	bl	800ca64 <__mcmp>
 800c124:	2800      	cmp	r0, #0
 800c126:	f77f ada3 	ble.w	800bc70 <_dtoa_r+0x490>
 800c12a:	4656      	mov	r6, sl
 800c12c:	2331      	movs	r3, #49	@ 0x31
 800c12e:	f806 3b01 	strb.w	r3, [r6], #1
 800c132:	f108 0801 	add.w	r8, r8, #1
 800c136:	e59f      	b.n	800bc78 <_dtoa_r+0x498>
 800c138:	9c03      	ldr	r4, [sp, #12]
 800c13a:	46b8      	mov	r8, r7
 800c13c:	4625      	mov	r5, r4
 800c13e:	e7f4      	b.n	800c12a <_dtoa_r+0x94a>
 800c140:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800c144:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c146:	2b00      	cmp	r3, #0
 800c148:	f000 8101 	beq.w	800c34e <_dtoa_r+0xb6e>
 800c14c:	2e00      	cmp	r6, #0
 800c14e:	dd05      	ble.n	800c15c <_dtoa_r+0x97c>
 800c150:	4629      	mov	r1, r5
 800c152:	4632      	mov	r2, r6
 800c154:	4648      	mov	r0, r9
 800c156:	f000 fc19 	bl	800c98c <__lshift>
 800c15a:	4605      	mov	r5, r0
 800c15c:	9b08      	ldr	r3, [sp, #32]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d05c      	beq.n	800c21c <_dtoa_r+0xa3c>
 800c162:	6869      	ldr	r1, [r5, #4]
 800c164:	4648      	mov	r0, r9
 800c166:	f000 fa0b 	bl	800c580 <_Balloc>
 800c16a:	4606      	mov	r6, r0
 800c16c:	b928      	cbnz	r0, 800c17a <_dtoa_r+0x99a>
 800c16e:	4b82      	ldr	r3, [pc, #520]	@ (800c378 <_dtoa_r+0xb98>)
 800c170:	4602      	mov	r2, r0
 800c172:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c176:	f7ff bb4a 	b.w	800b80e <_dtoa_r+0x2e>
 800c17a:	692a      	ldr	r2, [r5, #16]
 800c17c:	3202      	adds	r2, #2
 800c17e:	0092      	lsls	r2, r2, #2
 800c180:	f105 010c 	add.w	r1, r5, #12
 800c184:	300c      	adds	r0, #12
 800c186:	f7ff fa92 	bl	800b6ae <memcpy>
 800c18a:	2201      	movs	r2, #1
 800c18c:	4631      	mov	r1, r6
 800c18e:	4648      	mov	r0, r9
 800c190:	f000 fbfc 	bl	800c98c <__lshift>
 800c194:	f10a 0301 	add.w	r3, sl, #1
 800c198:	9300      	str	r3, [sp, #0]
 800c19a:	eb0a 030b 	add.w	r3, sl, fp
 800c19e:	9308      	str	r3, [sp, #32]
 800c1a0:	9b04      	ldr	r3, [sp, #16]
 800c1a2:	f003 0301 	and.w	r3, r3, #1
 800c1a6:	462f      	mov	r7, r5
 800c1a8:	9306      	str	r3, [sp, #24]
 800c1aa:	4605      	mov	r5, r0
 800c1ac:	9b00      	ldr	r3, [sp, #0]
 800c1ae:	9802      	ldr	r0, [sp, #8]
 800c1b0:	4621      	mov	r1, r4
 800c1b2:	f103 3bff 	add.w	fp, r3, #4294967295
 800c1b6:	f7ff fa88 	bl	800b6ca <quorem>
 800c1ba:	4603      	mov	r3, r0
 800c1bc:	3330      	adds	r3, #48	@ 0x30
 800c1be:	9003      	str	r0, [sp, #12]
 800c1c0:	4639      	mov	r1, r7
 800c1c2:	9802      	ldr	r0, [sp, #8]
 800c1c4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c1c6:	f000 fc4d 	bl	800ca64 <__mcmp>
 800c1ca:	462a      	mov	r2, r5
 800c1cc:	9004      	str	r0, [sp, #16]
 800c1ce:	4621      	mov	r1, r4
 800c1d0:	4648      	mov	r0, r9
 800c1d2:	f000 fc63 	bl	800ca9c <__mdiff>
 800c1d6:	68c2      	ldr	r2, [r0, #12]
 800c1d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c1da:	4606      	mov	r6, r0
 800c1dc:	bb02      	cbnz	r2, 800c220 <_dtoa_r+0xa40>
 800c1de:	4601      	mov	r1, r0
 800c1e0:	9802      	ldr	r0, [sp, #8]
 800c1e2:	f000 fc3f 	bl	800ca64 <__mcmp>
 800c1e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c1e8:	4602      	mov	r2, r0
 800c1ea:	4631      	mov	r1, r6
 800c1ec:	4648      	mov	r0, r9
 800c1ee:	920c      	str	r2, [sp, #48]	@ 0x30
 800c1f0:	9309      	str	r3, [sp, #36]	@ 0x24
 800c1f2:	f000 fa05 	bl	800c600 <_Bfree>
 800c1f6:	9b07      	ldr	r3, [sp, #28]
 800c1f8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c1fa:	9e00      	ldr	r6, [sp, #0]
 800c1fc:	ea42 0103 	orr.w	r1, r2, r3
 800c200:	9b06      	ldr	r3, [sp, #24]
 800c202:	4319      	orrs	r1, r3
 800c204:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c206:	d10d      	bne.n	800c224 <_dtoa_r+0xa44>
 800c208:	2b39      	cmp	r3, #57	@ 0x39
 800c20a:	d027      	beq.n	800c25c <_dtoa_r+0xa7c>
 800c20c:	9a04      	ldr	r2, [sp, #16]
 800c20e:	2a00      	cmp	r2, #0
 800c210:	dd01      	ble.n	800c216 <_dtoa_r+0xa36>
 800c212:	9b03      	ldr	r3, [sp, #12]
 800c214:	3331      	adds	r3, #49	@ 0x31
 800c216:	f88b 3000 	strb.w	r3, [fp]
 800c21a:	e52e      	b.n	800bc7a <_dtoa_r+0x49a>
 800c21c:	4628      	mov	r0, r5
 800c21e:	e7b9      	b.n	800c194 <_dtoa_r+0x9b4>
 800c220:	2201      	movs	r2, #1
 800c222:	e7e2      	b.n	800c1ea <_dtoa_r+0xa0a>
 800c224:	9904      	ldr	r1, [sp, #16]
 800c226:	2900      	cmp	r1, #0
 800c228:	db04      	blt.n	800c234 <_dtoa_r+0xa54>
 800c22a:	9807      	ldr	r0, [sp, #28]
 800c22c:	4301      	orrs	r1, r0
 800c22e:	9806      	ldr	r0, [sp, #24]
 800c230:	4301      	orrs	r1, r0
 800c232:	d120      	bne.n	800c276 <_dtoa_r+0xa96>
 800c234:	2a00      	cmp	r2, #0
 800c236:	ddee      	ble.n	800c216 <_dtoa_r+0xa36>
 800c238:	9902      	ldr	r1, [sp, #8]
 800c23a:	9300      	str	r3, [sp, #0]
 800c23c:	2201      	movs	r2, #1
 800c23e:	4648      	mov	r0, r9
 800c240:	f000 fba4 	bl	800c98c <__lshift>
 800c244:	4621      	mov	r1, r4
 800c246:	9002      	str	r0, [sp, #8]
 800c248:	f000 fc0c 	bl	800ca64 <__mcmp>
 800c24c:	2800      	cmp	r0, #0
 800c24e:	9b00      	ldr	r3, [sp, #0]
 800c250:	dc02      	bgt.n	800c258 <_dtoa_r+0xa78>
 800c252:	d1e0      	bne.n	800c216 <_dtoa_r+0xa36>
 800c254:	07da      	lsls	r2, r3, #31
 800c256:	d5de      	bpl.n	800c216 <_dtoa_r+0xa36>
 800c258:	2b39      	cmp	r3, #57	@ 0x39
 800c25a:	d1da      	bne.n	800c212 <_dtoa_r+0xa32>
 800c25c:	2339      	movs	r3, #57	@ 0x39
 800c25e:	f88b 3000 	strb.w	r3, [fp]
 800c262:	4633      	mov	r3, r6
 800c264:	461e      	mov	r6, r3
 800c266:	3b01      	subs	r3, #1
 800c268:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c26c:	2a39      	cmp	r2, #57	@ 0x39
 800c26e:	d04e      	beq.n	800c30e <_dtoa_r+0xb2e>
 800c270:	3201      	adds	r2, #1
 800c272:	701a      	strb	r2, [r3, #0]
 800c274:	e501      	b.n	800bc7a <_dtoa_r+0x49a>
 800c276:	2a00      	cmp	r2, #0
 800c278:	dd03      	ble.n	800c282 <_dtoa_r+0xaa2>
 800c27a:	2b39      	cmp	r3, #57	@ 0x39
 800c27c:	d0ee      	beq.n	800c25c <_dtoa_r+0xa7c>
 800c27e:	3301      	adds	r3, #1
 800c280:	e7c9      	b.n	800c216 <_dtoa_r+0xa36>
 800c282:	9a00      	ldr	r2, [sp, #0]
 800c284:	9908      	ldr	r1, [sp, #32]
 800c286:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c28a:	428a      	cmp	r2, r1
 800c28c:	d028      	beq.n	800c2e0 <_dtoa_r+0xb00>
 800c28e:	9902      	ldr	r1, [sp, #8]
 800c290:	2300      	movs	r3, #0
 800c292:	220a      	movs	r2, #10
 800c294:	4648      	mov	r0, r9
 800c296:	f000 f9d5 	bl	800c644 <__multadd>
 800c29a:	42af      	cmp	r7, r5
 800c29c:	9002      	str	r0, [sp, #8]
 800c29e:	f04f 0300 	mov.w	r3, #0
 800c2a2:	f04f 020a 	mov.w	r2, #10
 800c2a6:	4639      	mov	r1, r7
 800c2a8:	4648      	mov	r0, r9
 800c2aa:	d107      	bne.n	800c2bc <_dtoa_r+0xadc>
 800c2ac:	f000 f9ca 	bl	800c644 <__multadd>
 800c2b0:	4607      	mov	r7, r0
 800c2b2:	4605      	mov	r5, r0
 800c2b4:	9b00      	ldr	r3, [sp, #0]
 800c2b6:	3301      	adds	r3, #1
 800c2b8:	9300      	str	r3, [sp, #0]
 800c2ba:	e777      	b.n	800c1ac <_dtoa_r+0x9cc>
 800c2bc:	f000 f9c2 	bl	800c644 <__multadd>
 800c2c0:	4629      	mov	r1, r5
 800c2c2:	4607      	mov	r7, r0
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	220a      	movs	r2, #10
 800c2c8:	4648      	mov	r0, r9
 800c2ca:	f000 f9bb 	bl	800c644 <__multadd>
 800c2ce:	4605      	mov	r5, r0
 800c2d0:	e7f0      	b.n	800c2b4 <_dtoa_r+0xad4>
 800c2d2:	f1bb 0f00 	cmp.w	fp, #0
 800c2d6:	bfcc      	ite	gt
 800c2d8:	465e      	movgt	r6, fp
 800c2da:	2601      	movle	r6, #1
 800c2dc:	4456      	add	r6, sl
 800c2de:	2700      	movs	r7, #0
 800c2e0:	9902      	ldr	r1, [sp, #8]
 800c2e2:	9300      	str	r3, [sp, #0]
 800c2e4:	2201      	movs	r2, #1
 800c2e6:	4648      	mov	r0, r9
 800c2e8:	f000 fb50 	bl	800c98c <__lshift>
 800c2ec:	4621      	mov	r1, r4
 800c2ee:	9002      	str	r0, [sp, #8]
 800c2f0:	f000 fbb8 	bl	800ca64 <__mcmp>
 800c2f4:	2800      	cmp	r0, #0
 800c2f6:	dcb4      	bgt.n	800c262 <_dtoa_r+0xa82>
 800c2f8:	d102      	bne.n	800c300 <_dtoa_r+0xb20>
 800c2fa:	9b00      	ldr	r3, [sp, #0]
 800c2fc:	07db      	lsls	r3, r3, #31
 800c2fe:	d4b0      	bmi.n	800c262 <_dtoa_r+0xa82>
 800c300:	4633      	mov	r3, r6
 800c302:	461e      	mov	r6, r3
 800c304:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c308:	2a30      	cmp	r2, #48	@ 0x30
 800c30a:	d0fa      	beq.n	800c302 <_dtoa_r+0xb22>
 800c30c:	e4b5      	b.n	800bc7a <_dtoa_r+0x49a>
 800c30e:	459a      	cmp	sl, r3
 800c310:	d1a8      	bne.n	800c264 <_dtoa_r+0xa84>
 800c312:	2331      	movs	r3, #49	@ 0x31
 800c314:	f108 0801 	add.w	r8, r8, #1
 800c318:	f88a 3000 	strb.w	r3, [sl]
 800c31c:	e4ad      	b.n	800bc7a <_dtoa_r+0x49a>
 800c31e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c320:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800c37c <_dtoa_r+0xb9c>
 800c324:	b11b      	cbz	r3, 800c32e <_dtoa_r+0xb4e>
 800c326:	f10a 0308 	add.w	r3, sl, #8
 800c32a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800c32c:	6013      	str	r3, [r2, #0]
 800c32e:	4650      	mov	r0, sl
 800c330:	b017      	add	sp, #92	@ 0x5c
 800c332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c336:	9b07      	ldr	r3, [sp, #28]
 800c338:	2b01      	cmp	r3, #1
 800c33a:	f77f ae2e 	ble.w	800bf9a <_dtoa_r+0x7ba>
 800c33e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c340:	9308      	str	r3, [sp, #32]
 800c342:	2001      	movs	r0, #1
 800c344:	e64d      	b.n	800bfe2 <_dtoa_r+0x802>
 800c346:	f1bb 0f00 	cmp.w	fp, #0
 800c34a:	f77f aed9 	ble.w	800c100 <_dtoa_r+0x920>
 800c34e:	4656      	mov	r6, sl
 800c350:	9802      	ldr	r0, [sp, #8]
 800c352:	4621      	mov	r1, r4
 800c354:	f7ff f9b9 	bl	800b6ca <quorem>
 800c358:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800c35c:	f806 3b01 	strb.w	r3, [r6], #1
 800c360:	eba6 020a 	sub.w	r2, r6, sl
 800c364:	4593      	cmp	fp, r2
 800c366:	ddb4      	ble.n	800c2d2 <_dtoa_r+0xaf2>
 800c368:	9902      	ldr	r1, [sp, #8]
 800c36a:	2300      	movs	r3, #0
 800c36c:	220a      	movs	r2, #10
 800c36e:	4648      	mov	r0, r9
 800c370:	f000 f968 	bl	800c644 <__multadd>
 800c374:	9002      	str	r0, [sp, #8]
 800c376:	e7eb      	b.n	800c350 <_dtoa_r+0xb70>
 800c378:	08010a64 	.word	0x08010a64
 800c37c:	080109e8 	.word	0x080109e8

0800c380 <_free_r>:
 800c380:	b538      	push	{r3, r4, r5, lr}
 800c382:	4605      	mov	r5, r0
 800c384:	2900      	cmp	r1, #0
 800c386:	d041      	beq.n	800c40c <_free_r+0x8c>
 800c388:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c38c:	1f0c      	subs	r4, r1, #4
 800c38e:	2b00      	cmp	r3, #0
 800c390:	bfb8      	it	lt
 800c392:	18e4      	addlt	r4, r4, r3
 800c394:	f000 f8e8 	bl	800c568 <__malloc_lock>
 800c398:	4a1d      	ldr	r2, [pc, #116]	@ (800c410 <_free_r+0x90>)
 800c39a:	6813      	ldr	r3, [r2, #0]
 800c39c:	b933      	cbnz	r3, 800c3ac <_free_r+0x2c>
 800c39e:	6063      	str	r3, [r4, #4]
 800c3a0:	6014      	str	r4, [r2, #0]
 800c3a2:	4628      	mov	r0, r5
 800c3a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c3a8:	f000 b8e4 	b.w	800c574 <__malloc_unlock>
 800c3ac:	42a3      	cmp	r3, r4
 800c3ae:	d908      	bls.n	800c3c2 <_free_r+0x42>
 800c3b0:	6820      	ldr	r0, [r4, #0]
 800c3b2:	1821      	adds	r1, r4, r0
 800c3b4:	428b      	cmp	r3, r1
 800c3b6:	bf01      	itttt	eq
 800c3b8:	6819      	ldreq	r1, [r3, #0]
 800c3ba:	685b      	ldreq	r3, [r3, #4]
 800c3bc:	1809      	addeq	r1, r1, r0
 800c3be:	6021      	streq	r1, [r4, #0]
 800c3c0:	e7ed      	b.n	800c39e <_free_r+0x1e>
 800c3c2:	461a      	mov	r2, r3
 800c3c4:	685b      	ldr	r3, [r3, #4]
 800c3c6:	b10b      	cbz	r3, 800c3cc <_free_r+0x4c>
 800c3c8:	42a3      	cmp	r3, r4
 800c3ca:	d9fa      	bls.n	800c3c2 <_free_r+0x42>
 800c3cc:	6811      	ldr	r1, [r2, #0]
 800c3ce:	1850      	adds	r0, r2, r1
 800c3d0:	42a0      	cmp	r0, r4
 800c3d2:	d10b      	bne.n	800c3ec <_free_r+0x6c>
 800c3d4:	6820      	ldr	r0, [r4, #0]
 800c3d6:	4401      	add	r1, r0
 800c3d8:	1850      	adds	r0, r2, r1
 800c3da:	4283      	cmp	r3, r0
 800c3dc:	6011      	str	r1, [r2, #0]
 800c3de:	d1e0      	bne.n	800c3a2 <_free_r+0x22>
 800c3e0:	6818      	ldr	r0, [r3, #0]
 800c3e2:	685b      	ldr	r3, [r3, #4]
 800c3e4:	6053      	str	r3, [r2, #4]
 800c3e6:	4408      	add	r0, r1
 800c3e8:	6010      	str	r0, [r2, #0]
 800c3ea:	e7da      	b.n	800c3a2 <_free_r+0x22>
 800c3ec:	d902      	bls.n	800c3f4 <_free_r+0x74>
 800c3ee:	230c      	movs	r3, #12
 800c3f0:	602b      	str	r3, [r5, #0]
 800c3f2:	e7d6      	b.n	800c3a2 <_free_r+0x22>
 800c3f4:	6820      	ldr	r0, [r4, #0]
 800c3f6:	1821      	adds	r1, r4, r0
 800c3f8:	428b      	cmp	r3, r1
 800c3fa:	bf04      	itt	eq
 800c3fc:	6819      	ldreq	r1, [r3, #0]
 800c3fe:	685b      	ldreq	r3, [r3, #4]
 800c400:	6063      	str	r3, [r4, #4]
 800c402:	bf04      	itt	eq
 800c404:	1809      	addeq	r1, r1, r0
 800c406:	6021      	streq	r1, [r4, #0]
 800c408:	6054      	str	r4, [r2, #4]
 800c40a:	e7ca      	b.n	800c3a2 <_free_r+0x22>
 800c40c:	bd38      	pop	{r3, r4, r5, pc}
 800c40e:	bf00      	nop
 800c410:	200082c4 	.word	0x200082c4

0800c414 <malloc>:
 800c414:	4b02      	ldr	r3, [pc, #8]	@ (800c420 <malloc+0xc>)
 800c416:	4601      	mov	r1, r0
 800c418:	6818      	ldr	r0, [r3, #0]
 800c41a:	f000 b825 	b.w	800c468 <_malloc_r>
 800c41e:	bf00      	nop
 800c420:	2000001c 	.word	0x2000001c

0800c424 <sbrk_aligned>:
 800c424:	b570      	push	{r4, r5, r6, lr}
 800c426:	4e0f      	ldr	r6, [pc, #60]	@ (800c464 <sbrk_aligned+0x40>)
 800c428:	460c      	mov	r4, r1
 800c42a:	6831      	ldr	r1, [r6, #0]
 800c42c:	4605      	mov	r5, r0
 800c42e:	b911      	cbnz	r1, 800c436 <sbrk_aligned+0x12>
 800c430:	f000 fe3e 	bl	800d0b0 <_sbrk_r>
 800c434:	6030      	str	r0, [r6, #0]
 800c436:	4621      	mov	r1, r4
 800c438:	4628      	mov	r0, r5
 800c43a:	f000 fe39 	bl	800d0b0 <_sbrk_r>
 800c43e:	1c43      	adds	r3, r0, #1
 800c440:	d103      	bne.n	800c44a <sbrk_aligned+0x26>
 800c442:	f04f 34ff 	mov.w	r4, #4294967295
 800c446:	4620      	mov	r0, r4
 800c448:	bd70      	pop	{r4, r5, r6, pc}
 800c44a:	1cc4      	adds	r4, r0, #3
 800c44c:	f024 0403 	bic.w	r4, r4, #3
 800c450:	42a0      	cmp	r0, r4
 800c452:	d0f8      	beq.n	800c446 <sbrk_aligned+0x22>
 800c454:	1a21      	subs	r1, r4, r0
 800c456:	4628      	mov	r0, r5
 800c458:	f000 fe2a 	bl	800d0b0 <_sbrk_r>
 800c45c:	3001      	adds	r0, #1
 800c45e:	d1f2      	bne.n	800c446 <sbrk_aligned+0x22>
 800c460:	e7ef      	b.n	800c442 <sbrk_aligned+0x1e>
 800c462:	bf00      	nop
 800c464:	200082c0 	.word	0x200082c0

0800c468 <_malloc_r>:
 800c468:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c46c:	1ccd      	adds	r5, r1, #3
 800c46e:	f025 0503 	bic.w	r5, r5, #3
 800c472:	3508      	adds	r5, #8
 800c474:	2d0c      	cmp	r5, #12
 800c476:	bf38      	it	cc
 800c478:	250c      	movcc	r5, #12
 800c47a:	2d00      	cmp	r5, #0
 800c47c:	4606      	mov	r6, r0
 800c47e:	db01      	blt.n	800c484 <_malloc_r+0x1c>
 800c480:	42a9      	cmp	r1, r5
 800c482:	d904      	bls.n	800c48e <_malloc_r+0x26>
 800c484:	230c      	movs	r3, #12
 800c486:	6033      	str	r3, [r6, #0]
 800c488:	2000      	movs	r0, #0
 800c48a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c48e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c564 <_malloc_r+0xfc>
 800c492:	f000 f869 	bl	800c568 <__malloc_lock>
 800c496:	f8d8 3000 	ldr.w	r3, [r8]
 800c49a:	461c      	mov	r4, r3
 800c49c:	bb44      	cbnz	r4, 800c4f0 <_malloc_r+0x88>
 800c49e:	4629      	mov	r1, r5
 800c4a0:	4630      	mov	r0, r6
 800c4a2:	f7ff ffbf 	bl	800c424 <sbrk_aligned>
 800c4a6:	1c43      	adds	r3, r0, #1
 800c4a8:	4604      	mov	r4, r0
 800c4aa:	d158      	bne.n	800c55e <_malloc_r+0xf6>
 800c4ac:	f8d8 4000 	ldr.w	r4, [r8]
 800c4b0:	4627      	mov	r7, r4
 800c4b2:	2f00      	cmp	r7, #0
 800c4b4:	d143      	bne.n	800c53e <_malloc_r+0xd6>
 800c4b6:	2c00      	cmp	r4, #0
 800c4b8:	d04b      	beq.n	800c552 <_malloc_r+0xea>
 800c4ba:	6823      	ldr	r3, [r4, #0]
 800c4bc:	4639      	mov	r1, r7
 800c4be:	4630      	mov	r0, r6
 800c4c0:	eb04 0903 	add.w	r9, r4, r3
 800c4c4:	f000 fdf4 	bl	800d0b0 <_sbrk_r>
 800c4c8:	4581      	cmp	r9, r0
 800c4ca:	d142      	bne.n	800c552 <_malloc_r+0xea>
 800c4cc:	6821      	ldr	r1, [r4, #0]
 800c4ce:	1a6d      	subs	r5, r5, r1
 800c4d0:	4629      	mov	r1, r5
 800c4d2:	4630      	mov	r0, r6
 800c4d4:	f7ff ffa6 	bl	800c424 <sbrk_aligned>
 800c4d8:	3001      	adds	r0, #1
 800c4da:	d03a      	beq.n	800c552 <_malloc_r+0xea>
 800c4dc:	6823      	ldr	r3, [r4, #0]
 800c4de:	442b      	add	r3, r5
 800c4e0:	6023      	str	r3, [r4, #0]
 800c4e2:	f8d8 3000 	ldr.w	r3, [r8]
 800c4e6:	685a      	ldr	r2, [r3, #4]
 800c4e8:	bb62      	cbnz	r2, 800c544 <_malloc_r+0xdc>
 800c4ea:	f8c8 7000 	str.w	r7, [r8]
 800c4ee:	e00f      	b.n	800c510 <_malloc_r+0xa8>
 800c4f0:	6822      	ldr	r2, [r4, #0]
 800c4f2:	1b52      	subs	r2, r2, r5
 800c4f4:	d420      	bmi.n	800c538 <_malloc_r+0xd0>
 800c4f6:	2a0b      	cmp	r2, #11
 800c4f8:	d917      	bls.n	800c52a <_malloc_r+0xc2>
 800c4fa:	1961      	adds	r1, r4, r5
 800c4fc:	42a3      	cmp	r3, r4
 800c4fe:	6025      	str	r5, [r4, #0]
 800c500:	bf18      	it	ne
 800c502:	6059      	strne	r1, [r3, #4]
 800c504:	6863      	ldr	r3, [r4, #4]
 800c506:	bf08      	it	eq
 800c508:	f8c8 1000 	streq.w	r1, [r8]
 800c50c:	5162      	str	r2, [r4, r5]
 800c50e:	604b      	str	r3, [r1, #4]
 800c510:	4630      	mov	r0, r6
 800c512:	f000 f82f 	bl	800c574 <__malloc_unlock>
 800c516:	f104 000b 	add.w	r0, r4, #11
 800c51a:	1d23      	adds	r3, r4, #4
 800c51c:	f020 0007 	bic.w	r0, r0, #7
 800c520:	1ac2      	subs	r2, r0, r3
 800c522:	bf1c      	itt	ne
 800c524:	1a1b      	subne	r3, r3, r0
 800c526:	50a3      	strne	r3, [r4, r2]
 800c528:	e7af      	b.n	800c48a <_malloc_r+0x22>
 800c52a:	6862      	ldr	r2, [r4, #4]
 800c52c:	42a3      	cmp	r3, r4
 800c52e:	bf0c      	ite	eq
 800c530:	f8c8 2000 	streq.w	r2, [r8]
 800c534:	605a      	strne	r2, [r3, #4]
 800c536:	e7eb      	b.n	800c510 <_malloc_r+0xa8>
 800c538:	4623      	mov	r3, r4
 800c53a:	6864      	ldr	r4, [r4, #4]
 800c53c:	e7ae      	b.n	800c49c <_malloc_r+0x34>
 800c53e:	463c      	mov	r4, r7
 800c540:	687f      	ldr	r7, [r7, #4]
 800c542:	e7b6      	b.n	800c4b2 <_malloc_r+0x4a>
 800c544:	461a      	mov	r2, r3
 800c546:	685b      	ldr	r3, [r3, #4]
 800c548:	42a3      	cmp	r3, r4
 800c54a:	d1fb      	bne.n	800c544 <_malloc_r+0xdc>
 800c54c:	2300      	movs	r3, #0
 800c54e:	6053      	str	r3, [r2, #4]
 800c550:	e7de      	b.n	800c510 <_malloc_r+0xa8>
 800c552:	230c      	movs	r3, #12
 800c554:	6033      	str	r3, [r6, #0]
 800c556:	4630      	mov	r0, r6
 800c558:	f000 f80c 	bl	800c574 <__malloc_unlock>
 800c55c:	e794      	b.n	800c488 <_malloc_r+0x20>
 800c55e:	6005      	str	r5, [r0, #0]
 800c560:	e7d6      	b.n	800c510 <_malloc_r+0xa8>
 800c562:	bf00      	nop
 800c564:	200082c4 	.word	0x200082c4

0800c568 <__malloc_lock>:
 800c568:	4801      	ldr	r0, [pc, #4]	@ (800c570 <__malloc_lock+0x8>)
 800c56a:	f7ff b89e 	b.w	800b6aa <__retarget_lock_acquire_recursive>
 800c56e:	bf00      	nop
 800c570:	200082bc 	.word	0x200082bc

0800c574 <__malloc_unlock>:
 800c574:	4801      	ldr	r0, [pc, #4]	@ (800c57c <__malloc_unlock+0x8>)
 800c576:	f7ff b899 	b.w	800b6ac <__retarget_lock_release_recursive>
 800c57a:	bf00      	nop
 800c57c:	200082bc 	.word	0x200082bc

0800c580 <_Balloc>:
 800c580:	b570      	push	{r4, r5, r6, lr}
 800c582:	69c6      	ldr	r6, [r0, #28]
 800c584:	4604      	mov	r4, r0
 800c586:	460d      	mov	r5, r1
 800c588:	b976      	cbnz	r6, 800c5a8 <_Balloc+0x28>
 800c58a:	2010      	movs	r0, #16
 800c58c:	f7ff ff42 	bl	800c414 <malloc>
 800c590:	4602      	mov	r2, r0
 800c592:	61e0      	str	r0, [r4, #28]
 800c594:	b920      	cbnz	r0, 800c5a0 <_Balloc+0x20>
 800c596:	4b18      	ldr	r3, [pc, #96]	@ (800c5f8 <_Balloc+0x78>)
 800c598:	4818      	ldr	r0, [pc, #96]	@ (800c5fc <_Balloc+0x7c>)
 800c59a:	216b      	movs	r1, #107	@ 0x6b
 800c59c:	f000 fd98 	bl	800d0d0 <__assert_func>
 800c5a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c5a4:	6006      	str	r6, [r0, #0]
 800c5a6:	60c6      	str	r6, [r0, #12]
 800c5a8:	69e6      	ldr	r6, [r4, #28]
 800c5aa:	68f3      	ldr	r3, [r6, #12]
 800c5ac:	b183      	cbz	r3, 800c5d0 <_Balloc+0x50>
 800c5ae:	69e3      	ldr	r3, [r4, #28]
 800c5b0:	68db      	ldr	r3, [r3, #12]
 800c5b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c5b6:	b9b8      	cbnz	r0, 800c5e8 <_Balloc+0x68>
 800c5b8:	2101      	movs	r1, #1
 800c5ba:	fa01 f605 	lsl.w	r6, r1, r5
 800c5be:	1d72      	adds	r2, r6, #5
 800c5c0:	0092      	lsls	r2, r2, #2
 800c5c2:	4620      	mov	r0, r4
 800c5c4:	f000 fda2 	bl	800d10c <_calloc_r>
 800c5c8:	b160      	cbz	r0, 800c5e4 <_Balloc+0x64>
 800c5ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c5ce:	e00e      	b.n	800c5ee <_Balloc+0x6e>
 800c5d0:	2221      	movs	r2, #33	@ 0x21
 800c5d2:	2104      	movs	r1, #4
 800c5d4:	4620      	mov	r0, r4
 800c5d6:	f000 fd99 	bl	800d10c <_calloc_r>
 800c5da:	69e3      	ldr	r3, [r4, #28]
 800c5dc:	60f0      	str	r0, [r6, #12]
 800c5de:	68db      	ldr	r3, [r3, #12]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d1e4      	bne.n	800c5ae <_Balloc+0x2e>
 800c5e4:	2000      	movs	r0, #0
 800c5e6:	bd70      	pop	{r4, r5, r6, pc}
 800c5e8:	6802      	ldr	r2, [r0, #0]
 800c5ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c5f4:	e7f7      	b.n	800c5e6 <_Balloc+0x66>
 800c5f6:	bf00      	nop
 800c5f8:	080109f5 	.word	0x080109f5
 800c5fc:	08010a75 	.word	0x08010a75

0800c600 <_Bfree>:
 800c600:	b570      	push	{r4, r5, r6, lr}
 800c602:	69c6      	ldr	r6, [r0, #28]
 800c604:	4605      	mov	r5, r0
 800c606:	460c      	mov	r4, r1
 800c608:	b976      	cbnz	r6, 800c628 <_Bfree+0x28>
 800c60a:	2010      	movs	r0, #16
 800c60c:	f7ff ff02 	bl	800c414 <malloc>
 800c610:	4602      	mov	r2, r0
 800c612:	61e8      	str	r0, [r5, #28]
 800c614:	b920      	cbnz	r0, 800c620 <_Bfree+0x20>
 800c616:	4b09      	ldr	r3, [pc, #36]	@ (800c63c <_Bfree+0x3c>)
 800c618:	4809      	ldr	r0, [pc, #36]	@ (800c640 <_Bfree+0x40>)
 800c61a:	218f      	movs	r1, #143	@ 0x8f
 800c61c:	f000 fd58 	bl	800d0d0 <__assert_func>
 800c620:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c624:	6006      	str	r6, [r0, #0]
 800c626:	60c6      	str	r6, [r0, #12]
 800c628:	b13c      	cbz	r4, 800c63a <_Bfree+0x3a>
 800c62a:	69eb      	ldr	r3, [r5, #28]
 800c62c:	6862      	ldr	r2, [r4, #4]
 800c62e:	68db      	ldr	r3, [r3, #12]
 800c630:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c634:	6021      	str	r1, [r4, #0]
 800c636:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c63a:	bd70      	pop	{r4, r5, r6, pc}
 800c63c:	080109f5 	.word	0x080109f5
 800c640:	08010a75 	.word	0x08010a75

0800c644 <__multadd>:
 800c644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c648:	690d      	ldr	r5, [r1, #16]
 800c64a:	4607      	mov	r7, r0
 800c64c:	460c      	mov	r4, r1
 800c64e:	461e      	mov	r6, r3
 800c650:	f101 0c14 	add.w	ip, r1, #20
 800c654:	2000      	movs	r0, #0
 800c656:	f8dc 3000 	ldr.w	r3, [ip]
 800c65a:	b299      	uxth	r1, r3
 800c65c:	fb02 6101 	mla	r1, r2, r1, r6
 800c660:	0c1e      	lsrs	r6, r3, #16
 800c662:	0c0b      	lsrs	r3, r1, #16
 800c664:	fb02 3306 	mla	r3, r2, r6, r3
 800c668:	b289      	uxth	r1, r1
 800c66a:	3001      	adds	r0, #1
 800c66c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c670:	4285      	cmp	r5, r0
 800c672:	f84c 1b04 	str.w	r1, [ip], #4
 800c676:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c67a:	dcec      	bgt.n	800c656 <__multadd+0x12>
 800c67c:	b30e      	cbz	r6, 800c6c2 <__multadd+0x7e>
 800c67e:	68a3      	ldr	r3, [r4, #8]
 800c680:	42ab      	cmp	r3, r5
 800c682:	dc19      	bgt.n	800c6b8 <__multadd+0x74>
 800c684:	6861      	ldr	r1, [r4, #4]
 800c686:	4638      	mov	r0, r7
 800c688:	3101      	adds	r1, #1
 800c68a:	f7ff ff79 	bl	800c580 <_Balloc>
 800c68e:	4680      	mov	r8, r0
 800c690:	b928      	cbnz	r0, 800c69e <__multadd+0x5a>
 800c692:	4602      	mov	r2, r0
 800c694:	4b0c      	ldr	r3, [pc, #48]	@ (800c6c8 <__multadd+0x84>)
 800c696:	480d      	ldr	r0, [pc, #52]	@ (800c6cc <__multadd+0x88>)
 800c698:	21ba      	movs	r1, #186	@ 0xba
 800c69a:	f000 fd19 	bl	800d0d0 <__assert_func>
 800c69e:	6922      	ldr	r2, [r4, #16]
 800c6a0:	3202      	adds	r2, #2
 800c6a2:	f104 010c 	add.w	r1, r4, #12
 800c6a6:	0092      	lsls	r2, r2, #2
 800c6a8:	300c      	adds	r0, #12
 800c6aa:	f7ff f800 	bl	800b6ae <memcpy>
 800c6ae:	4621      	mov	r1, r4
 800c6b0:	4638      	mov	r0, r7
 800c6b2:	f7ff ffa5 	bl	800c600 <_Bfree>
 800c6b6:	4644      	mov	r4, r8
 800c6b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c6bc:	3501      	adds	r5, #1
 800c6be:	615e      	str	r6, [r3, #20]
 800c6c0:	6125      	str	r5, [r4, #16]
 800c6c2:	4620      	mov	r0, r4
 800c6c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6c8:	08010a64 	.word	0x08010a64
 800c6cc:	08010a75 	.word	0x08010a75

0800c6d0 <__hi0bits>:
 800c6d0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c6d4:	4603      	mov	r3, r0
 800c6d6:	bf36      	itet	cc
 800c6d8:	0403      	lslcc	r3, r0, #16
 800c6da:	2000      	movcs	r0, #0
 800c6dc:	2010      	movcc	r0, #16
 800c6de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c6e2:	bf3c      	itt	cc
 800c6e4:	021b      	lslcc	r3, r3, #8
 800c6e6:	3008      	addcc	r0, #8
 800c6e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c6ec:	bf3c      	itt	cc
 800c6ee:	011b      	lslcc	r3, r3, #4
 800c6f0:	3004      	addcc	r0, #4
 800c6f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c6f6:	bf3c      	itt	cc
 800c6f8:	009b      	lslcc	r3, r3, #2
 800c6fa:	3002      	addcc	r0, #2
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	db05      	blt.n	800c70c <__hi0bits+0x3c>
 800c700:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c704:	f100 0001 	add.w	r0, r0, #1
 800c708:	bf08      	it	eq
 800c70a:	2020      	moveq	r0, #32
 800c70c:	4770      	bx	lr

0800c70e <__lo0bits>:
 800c70e:	6803      	ldr	r3, [r0, #0]
 800c710:	4602      	mov	r2, r0
 800c712:	f013 0007 	ands.w	r0, r3, #7
 800c716:	d00b      	beq.n	800c730 <__lo0bits+0x22>
 800c718:	07d9      	lsls	r1, r3, #31
 800c71a:	d421      	bmi.n	800c760 <__lo0bits+0x52>
 800c71c:	0798      	lsls	r0, r3, #30
 800c71e:	bf49      	itett	mi
 800c720:	085b      	lsrmi	r3, r3, #1
 800c722:	089b      	lsrpl	r3, r3, #2
 800c724:	2001      	movmi	r0, #1
 800c726:	6013      	strmi	r3, [r2, #0]
 800c728:	bf5c      	itt	pl
 800c72a:	6013      	strpl	r3, [r2, #0]
 800c72c:	2002      	movpl	r0, #2
 800c72e:	4770      	bx	lr
 800c730:	b299      	uxth	r1, r3
 800c732:	b909      	cbnz	r1, 800c738 <__lo0bits+0x2a>
 800c734:	0c1b      	lsrs	r3, r3, #16
 800c736:	2010      	movs	r0, #16
 800c738:	b2d9      	uxtb	r1, r3
 800c73a:	b909      	cbnz	r1, 800c740 <__lo0bits+0x32>
 800c73c:	3008      	adds	r0, #8
 800c73e:	0a1b      	lsrs	r3, r3, #8
 800c740:	0719      	lsls	r1, r3, #28
 800c742:	bf04      	itt	eq
 800c744:	091b      	lsreq	r3, r3, #4
 800c746:	3004      	addeq	r0, #4
 800c748:	0799      	lsls	r1, r3, #30
 800c74a:	bf04      	itt	eq
 800c74c:	089b      	lsreq	r3, r3, #2
 800c74e:	3002      	addeq	r0, #2
 800c750:	07d9      	lsls	r1, r3, #31
 800c752:	d403      	bmi.n	800c75c <__lo0bits+0x4e>
 800c754:	085b      	lsrs	r3, r3, #1
 800c756:	f100 0001 	add.w	r0, r0, #1
 800c75a:	d003      	beq.n	800c764 <__lo0bits+0x56>
 800c75c:	6013      	str	r3, [r2, #0]
 800c75e:	4770      	bx	lr
 800c760:	2000      	movs	r0, #0
 800c762:	4770      	bx	lr
 800c764:	2020      	movs	r0, #32
 800c766:	4770      	bx	lr

0800c768 <__i2b>:
 800c768:	b510      	push	{r4, lr}
 800c76a:	460c      	mov	r4, r1
 800c76c:	2101      	movs	r1, #1
 800c76e:	f7ff ff07 	bl	800c580 <_Balloc>
 800c772:	4602      	mov	r2, r0
 800c774:	b928      	cbnz	r0, 800c782 <__i2b+0x1a>
 800c776:	4b05      	ldr	r3, [pc, #20]	@ (800c78c <__i2b+0x24>)
 800c778:	4805      	ldr	r0, [pc, #20]	@ (800c790 <__i2b+0x28>)
 800c77a:	f240 1145 	movw	r1, #325	@ 0x145
 800c77e:	f000 fca7 	bl	800d0d0 <__assert_func>
 800c782:	2301      	movs	r3, #1
 800c784:	6144      	str	r4, [r0, #20]
 800c786:	6103      	str	r3, [r0, #16]
 800c788:	bd10      	pop	{r4, pc}
 800c78a:	bf00      	nop
 800c78c:	08010a64 	.word	0x08010a64
 800c790:	08010a75 	.word	0x08010a75

0800c794 <__multiply>:
 800c794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c798:	4617      	mov	r7, r2
 800c79a:	690a      	ldr	r2, [r1, #16]
 800c79c:	693b      	ldr	r3, [r7, #16]
 800c79e:	429a      	cmp	r2, r3
 800c7a0:	bfa8      	it	ge
 800c7a2:	463b      	movge	r3, r7
 800c7a4:	4689      	mov	r9, r1
 800c7a6:	bfa4      	itt	ge
 800c7a8:	460f      	movge	r7, r1
 800c7aa:	4699      	movge	r9, r3
 800c7ac:	693d      	ldr	r5, [r7, #16]
 800c7ae:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c7b2:	68bb      	ldr	r3, [r7, #8]
 800c7b4:	6879      	ldr	r1, [r7, #4]
 800c7b6:	eb05 060a 	add.w	r6, r5, sl
 800c7ba:	42b3      	cmp	r3, r6
 800c7bc:	b085      	sub	sp, #20
 800c7be:	bfb8      	it	lt
 800c7c0:	3101      	addlt	r1, #1
 800c7c2:	f7ff fedd 	bl	800c580 <_Balloc>
 800c7c6:	b930      	cbnz	r0, 800c7d6 <__multiply+0x42>
 800c7c8:	4602      	mov	r2, r0
 800c7ca:	4b41      	ldr	r3, [pc, #260]	@ (800c8d0 <__multiply+0x13c>)
 800c7cc:	4841      	ldr	r0, [pc, #260]	@ (800c8d4 <__multiply+0x140>)
 800c7ce:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c7d2:	f000 fc7d 	bl	800d0d0 <__assert_func>
 800c7d6:	f100 0414 	add.w	r4, r0, #20
 800c7da:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800c7de:	4623      	mov	r3, r4
 800c7e0:	2200      	movs	r2, #0
 800c7e2:	4573      	cmp	r3, lr
 800c7e4:	d320      	bcc.n	800c828 <__multiply+0x94>
 800c7e6:	f107 0814 	add.w	r8, r7, #20
 800c7ea:	f109 0114 	add.w	r1, r9, #20
 800c7ee:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800c7f2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800c7f6:	9302      	str	r3, [sp, #8]
 800c7f8:	1beb      	subs	r3, r5, r7
 800c7fa:	3b15      	subs	r3, #21
 800c7fc:	f023 0303 	bic.w	r3, r3, #3
 800c800:	3304      	adds	r3, #4
 800c802:	3715      	adds	r7, #21
 800c804:	42bd      	cmp	r5, r7
 800c806:	bf38      	it	cc
 800c808:	2304      	movcc	r3, #4
 800c80a:	9301      	str	r3, [sp, #4]
 800c80c:	9b02      	ldr	r3, [sp, #8]
 800c80e:	9103      	str	r1, [sp, #12]
 800c810:	428b      	cmp	r3, r1
 800c812:	d80c      	bhi.n	800c82e <__multiply+0x9a>
 800c814:	2e00      	cmp	r6, #0
 800c816:	dd03      	ble.n	800c820 <__multiply+0x8c>
 800c818:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d055      	beq.n	800c8cc <__multiply+0x138>
 800c820:	6106      	str	r6, [r0, #16]
 800c822:	b005      	add	sp, #20
 800c824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c828:	f843 2b04 	str.w	r2, [r3], #4
 800c82c:	e7d9      	b.n	800c7e2 <__multiply+0x4e>
 800c82e:	f8b1 a000 	ldrh.w	sl, [r1]
 800c832:	f1ba 0f00 	cmp.w	sl, #0
 800c836:	d01f      	beq.n	800c878 <__multiply+0xe4>
 800c838:	46c4      	mov	ip, r8
 800c83a:	46a1      	mov	r9, r4
 800c83c:	2700      	movs	r7, #0
 800c83e:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c842:	f8d9 3000 	ldr.w	r3, [r9]
 800c846:	fa1f fb82 	uxth.w	fp, r2
 800c84a:	b29b      	uxth	r3, r3
 800c84c:	fb0a 330b 	mla	r3, sl, fp, r3
 800c850:	443b      	add	r3, r7
 800c852:	f8d9 7000 	ldr.w	r7, [r9]
 800c856:	0c12      	lsrs	r2, r2, #16
 800c858:	0c3f      	lsrs	r7, r7, #16
 800c85a:	fb0a 7202 	mla	r2, sl, r2, r7
 800c85e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800c862:	b29b      	uxth	r3, r3
 800c864:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c868:	4565      	cmp	r5, ip
 800c86a:	f849 3b04 	str.w	r3, [r9], #4
 800c86e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800c872:	d8e4      	bhi.n	800c83e <__multiply+0xaa>
 800c874:	9b01      	ldr	r3, [sp, #4]
 800c876:	50e7      	str	r7, [r4, r3]
 800c878:	9b03      	ldr	r3, [sp, #12]
 800c87a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c87e:	3104      	adds	r1, #4
 800c880:	f1b9 0f00 	cmp.w	r9, #0
 800c884:	d020      	beq.n	800c8c8 <__multiply+0x134>
 800c886:	6823      	ldr	r3, [r4, #0]
 800c888:	4647      	mov	r7, r8
 800c88a:	46a4      	mov	ip, r4
 800c88c:	f04f 0a00 	mov.w	sl, #0
 800c890:	f8b7 b000 	ldrh.w	fp, [r7]
 800c894:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800c898:	fb09 220b 	mla	r2, r9, fp, r2
 800c89c:	4452      	add	r2, sl
 800c89e:	b29b      	uxth	r3, r3
 800c8a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c8a4:	f84c 3b04 	str.w	r3, [ip], #4
 800c8a8:	f857 3b04 	ldr.w	r3, [r7], #4
 800c8ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c8b0:	f8bc 3000 	ldrh.w	r3, [ip]
 800c8b4:	fb09 330a 	mla	r3, r9, sl, r3
 800c8b8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800c8bc:	42bd      	cmp	r5, r7
 800c8be:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c8c2:	d8e5      	bhi.n	800c890 <__multiply+0xfc>
 800c8c4:	9a01      	ldr	r2, [sp, #4]
 800c8c6:	50a3      	str	r3, [r4, r2]
 800c8c8:	3404      	adds	r4, #4
 800c8ca:	e79f      	b.n	800c80c <__multiply+0x78>
 800c8cc:	3e01      	subs	r6, #1
 800c8ce:	e7a1      	b.n	800c814 <__multiply+0x80>
 800c8d0:	08010a64 	.word	0x08010a64
 800c8d4:	08010a75 	.word	0x08010a75

0800c8d8 <__pow5mult>:
 800c8d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c8dc:	4615      	mov	r5, r2
 800c8de:	f012 0203 	ands.w	r2, r2, #3
 800c8e2:	4607      	mov	r7, r0
 800c8e4:	460e      	mov	r6, r1
 800c8e6:	d007      	beq.n	800c8f8 <__pow5mult+0x20>
 800c8e8:	4c25      	ldr	r4, [pc, #148]	@ (800c980 <__pow5mult+0xa8>)
 800c8ea:	3a01      	subs	r2, #1
 800c8ec:	2300      	movs	r3, #0
 800c8ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c8f2:	f7ff fea7 	bl	800c644 <__multadd>
 800c8f6:	4606      	mov	r6, r0
 800c8f8:	10ad      	asrs	r5, r5, #2
 800c8fa:	d03d      	beq.n	800c978 <__pow5mult+0xa0>
 800c8fc:	69fc      	ldr	r4, [r7, #28]
 800c8fe:	b97c      	cbnz	r4, 800c920 <__pow5mult+0x48>
 800c900:	2010      	movs	r0, #16
 800c902:	f7ff fd87 	bl	800c414 <malloc>
 800c906:	4602      	mov	r2, r0
 800c908:	61f8      	str	r0, [r7, #28]
 800c90a:	b928      	cbnz	r0, 800c918 <__pow5mult+0x40>
 800c90c:	4b1d      	ldr	r3, [pc, #116]	@ (800c984 <__pow5mult+0xac>)
 800c90e:	481e      	ldr	r0, [pc, #120]	@ (800c988 <__pow5mult+0xb0>)
 800c910:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c914:	f000 fbdc 	bl	800d0d0 <__assert_func>
 800c918:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c91c:	6004      	str	r4, [r0, #0]
 800c91e:	60c4      	str	r4, [r0, #12]
 800c920:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c924:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c928:	b94c      	cbnz	r4, 800c93e <__pow5mult+0x66>
 800c92a:	f240 2171 	movw	r1, #625	@ 0x271
 800c92e:	4638      	mov	r0, r7
 800c930:	f7ff ff1a 	bl	800c768 <__i2b>
 800c934:	2300      	movs	r3, #0
 800c936:	f8c8 0008 	str.w	r0, [r8, #8]
 800c93a:	4604      	mov	r4, r0
 800c93c:	6003      	str	r3, [r0, #0]
 800c93e:	f04f 0900 	mov.w	r9, #0
 800c942:	07eb      	lsls	r3, r5, #31
 800c944:	d50a      	bpl.n	800c95c <__pow5mult+0x84>
 800c946:	4631      	mov	r1, r6
 800c948:	4622      	mov	r2, r4
 800c94a:	4638      	mov	r0, r7
 800c94c:	f7ff ff22 	bl	800c794 <__multiply>
 800c950:	4631      	mov	r1, r6
 800c952:	4680      	mov	r8, r0
 800c954:	4638      	mov	r0, r7
 800c956:	f7ff fe53 	bl	800c600 <_Bfree>
 800c95a:	4646      	mov	r6, r8
 800c95c:	106d      	asrs	r5, r5, #1
 800c95e:	d00b      	beq.n	800c978 <__pow5mult+0xa0>
 800c960:	6820      	ldr	r0, [r4, #0]
 800c962:	b938      	cbnz	r0, 800c974 <__pow5mult+0x9c>
 800c964:	4622      	mov	r2, r4
 800c966:	4621      	mov	r1, r4
 800c968:	4638      	mov	r0, r7
 800c96a:	f7ff ff13 	bl	800c794 <__multiply>
 800c96e:	6020      	str	r0, [r4, #0]
 800c970:	f8c0 9000 	str.w	r9, [r0]
 800c974:	4604      	mov	r4, r0
 800c976:	e7e4      	b.n	800c942 <__pow5mult+0x6a>
 800c978:	4630      	mov	r0, r6
 800c97a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c97e:	bf00      	nop
 800c980:	08010b28 	.word	0x08010b28
 800c984:	080109f5 	.word	0x080109f5
 800c988:	08010a75 	.word	0x08010a75

0800c98c <__lshift>:
 800c98c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c990:	460c      	mov	r4, r1
 800c992:	6849      	ldr	r1, [r1, #4]
 800c994:	6923      	ldr	r3, [r4, #16]
 800c996:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c99a:	68a3      	ldr	r3, [r4, #8]
 800c99c:	4607      	mov	r7, r0
 800c99e:	4691      	mov	r9, r2
 800c9a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c9a4:	f108 0601 	add.w	r6, r8, #1
 800c9a8:	42b3      	cmp	r3, r6
 800c9aa:	db0b      	blt.n	800c9c4 <__lshift+0x38>
 800c9ac:	4638      	mov	r0, r7
 800c9ae:	f7ff fde7 	bl	800c580 <_Balloc>
 800c9b2:	4605      	mov	r5, r0
 800c9b4:	b948      	cbnz	r0, 800c9ca <__lshift+0x3e>
 800c9b6:	4602      	mov	r2, r0
 800c9b8:	4b28      	ldr	r3, [pc, #160]	@ (800ca5c <__lshift+0xd0>)
 800c9ba:	4829      	ldr	r0, [pc, #164]	@ (800ca60 <__lshift+0xd4>)
 800c9bc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c9c0:	f000 fb86 	bl	800d0d0 <__assert_func>
 800c9c4:	3101      	adds	r1, #1
 800c9c6:	005b      	lsls	r3, r3, #1
 800c9c8:	e7ee      	b.n	800c9a8 <__lshift+0x1c>
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	f100 0114 	add.w	r1, r0, #20
 800c9d0:	f100 0210 	add.w	r2, r0, #16
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	4553      	cmp	r3, sl
 800c9d8:	db33      	blt.n	800ca42 <__lshift+0xb6>
 800c9da:	6920      	ldr	r0, [r4, #16]
 800c9dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c9e0:	f104 0314 	add.w	r3, r4, #20
 800c9e4:	f019 091f 	ands.w	r9, r9, #31
 800c9e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c9ec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c9f0:	d02b      	beq.n	800ca4a <__lshift+0xbe>
 800c9f2:	f1c9 0e20 	rsb	lr, r9, #32
 800c9f6:	468a      	mov	sl, r1
 800c9f8:	2200      	movs	r2, #0
 800c9fa:	6818      	ldr	r0, [r3, #0]
 800c9fc:	fa00 f009 	lsl.w	r0, r0, r9
 800ca00:	4310      	orrs	r0, r2
 800ca02:	f84a 0b04 	str.w	r0, [sl], #4
 800ca06:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca0a:	459c      	cmp	ip, r3
 800ca0c:	fa22 f20e 	lsr.w	r2, r2, lr
 800ca10:	d8f3      	bhi.n	800c9fa <__lshift+0x6e>
 800ca12:	ebac 0304 	sub.w	r3, ip, r4
 800ca16:	3b15      	subs	r3, #21
 800ca18:	f023 0303 	bic.w	r3, r3, #3
 800ca1c:	3304      	adds	r3, #4
 800ca1e:	f104 0015 	add.w	r0, r4, #21
 800ca22:	4560      	cmp	r0, ip
 800ca24:	bf88      	it	hi
 800ca26:	2304      	movhi	r3, #4
 800ca28:	50ca      	str	r2, [r1, r3]
 800ca2a:	b10a      	cbz	r2, 800ca30 <__lshift+0xa4>
 800ca2c:	f108 0602 	add.w	r6, r8, #2
 800ca30:	3e01      	subs	r6, #1
 800ca32:	4638      	mov	r0, r7
 800ca34:	612e      	str	r6, [r5, #16]
 800ca36:	4621      	mov	r1, r4
 800ca38:	f7ff fde2 	bl	800c600 <_Bfree>
 800ca3c:	4628      	mov	r0, r5
 800ca3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca42:	f842 0f04 	str.w	r0, [r2, #4]!
 800ca46:	3301      	adds	r3, #1
 800ca48:	e7c5      	b.n	800c9d6 <__lshift+0x4a>
 800ca4a:	3904      	subs	r1, #4
 800ca4c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca50:	f841 2f04 	str.w	r2, [r1, #4]!
 800ca54:	459c      	cmp	ip, r3
 800ca56:	d8f9      	bhi.n	800ca4c <__lshift+0xc0>
 800ca58:	e7ea      	b.n	800ca30 <__lshift+0xa4>
 800ca5a:	bf00      	nop
 800ca5c:	08010a64 	.word	0x08010a64
 800ca60:	08010a75 	.word	0x08010a75

0800ca64 <__mcmp>:
 800ca64:	690a      	ldr	r2, [r1, #16]
 800ca66:	4603      	mov	r3, r0
 800ca68:	6900      	ldr	r0, [r0, #16]
 800ca6a:	1a80      	subs	r0, r0, r2
 800ca6c:	b530      	push	{r4, r5, lr}
 800ca6e:	d10e      	bne.n	800ca8e <__mcmp+0x2a>
 800ca70:	3314      	adds	r3, #20
 800ca72:	3114      	adds	r1, #20
 800ca74:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ca78:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ca7c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ca80:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ca84:	4295      	cmp	r5, r2
 800ca86:	d003      	beq.n	800ca90 <__mcmp+0x2c>
 800ca88:	d205      	bcs.n	800ca96 <__mcmp+0x32>
 800ca8a:	f04f 30ff 	mov.w	r0, #4294967295
 800ca8e:	bd30      	pop	{r4, r5, pc}
 800ca90:	42a3      	cmp	r3, r4
 800ca92:	d3f3      	bcc.n	800ca7c <__mcmp+0x18>
 800ca94:	e7fb      	b.n	800ca8e <__mcmp+0x2a>
 800ca96:	2001      	movs	r0, #1
 800ca98:	e7f9      	b.n	800ca8e <__mcmp+0x2a>
	...

0800ca9c <__mdiff>:
 800ca9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caa0:	4689      	mov	r9, r1
 800caa2:	4606      	mov	r6, r0
 800caa4:	4611      	mov	r1, r2
 800caa6:	4648      	mov	r0, r9
 800caa8:	4614      	mov	r4, r2
 800caaa:	f7ff ffdb 	bl	800ca64 <__mcmp>
 800caae:	1e05      	subs	r5, r0, #0
 800cab0:	d112      	bne.n	800cad8 <__mdiff+0x3c>
 800cab2:	4629      	mov	r1, r5
 800cab4:	4630      	mov	r0, r6
 800cab6:	f7ff fd63 	bl	800c580 <_Balloc>
 800caba:	4602      	mov	r2, r0
 800cabc:	b928      	cbnz	r0, 800caca <__mdiff+0x2e>
 800cabe:	4b3f      	ldr	r3, [pc, #252]	@ (800cbbc <__mdiff+0x120>)
 800cac0:	f240 2137 	movw	r1, #567	@ 0x237
 800cac4:	483e      	ldr	r0, [pc, #248]	@ (800cbc0 <__mdiff+0x124>)
 800cac6:	f000 fb03 	bl	800d0d0 <__assert_func>
 800caca:	2301      	movs	r3, #1
 800cacc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cad0:	4610      	mov	r0, r2
 800cad2:	b003      	add	sp, #12
 800cad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cad8:	bfbc      	itt	lt
 800cada:	464b      	movlt	r3, r9
 800cadc:	46a1      	movlt	r9, r4
 800cade:	4630      	mov	r0, r6
 800cae0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800cae4:	bfba      	itte	lt
 800cae6:	461c      	movlt	r4, r3
 800cae8:	2501      	movlt	r5, #1
 800caea:	2500      	movge	r5, #0
 800caec:	f7ff fd48 	bl	800c580 <_Balloc>
 800caf0:	4602      	mov	r2, r0
 800caf2:	b918      	cbnz	r0, 800cafc <__mdiff+0x60>
 800caf4:	4b31      	ldr	r3, [pc, #196]	@ (800cbbc <__mdiff+0x120>)
 800caf6:	f240 2145 	movw	r1, #581	@ 0x245
 800cafa:	e7e3      	b.n	800cac4 <__mdiff+0x28>
 800cafc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800cb00:	6926      	ldr	r6, [r4, #16]
 800cb02:	60c5      	str	r5, [r0, #12]
 800cb04:	f109 0310 	add.w	r3, r9, #16
 800cb08:	f109 0514 	add.w	r5, r9, #20
 800cb0c:	f104 0e14 	add.w	lr, r4, #20
 800cb10:	f100 0b14 	add.w	fp, r0, #20
 800cb14:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800cb18:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800cb1c:	9301      	str	r3, [sp, #4]
 800cb1e:	46d9      	mov	r9, fp
 800cb20:	f04f 0c00 	mov.w	ip, #0
 800cb24:	9b01      	ldr	r3, [sp, #4]
 800cb26:	f85e 0b04 	ldr.w	r0, [lr], #4
 800cb2a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800cb2e:	9301      	str	r3, [sp, #4]
 800cb30:	fa1f f38a 	uxth.w	r3, sl
 800cb34:	4619      	mov	r1, r3
 800cb36:	b283      	uxth	r3, r0
 800cb38:	1acb      	subs	r3, r1, r3
 800cb3a:	0c00      	lsrs	r0, r0, #16
 800cb3c:	4463      	add	r3, ip
 800cb3e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800cb42:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800cb46:	b29b      	uxth	r3, r3
 800cb48:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800cb4c:	4576      	cmp	r6, lr
 800cb4e:	f849 3b04 	str.w	r3, [r9], #4
 800cb52:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cb56:	d8e5      	bhi.n	800cb24 <__mdiff+0x88>
 800cb58:	1b33      	subs	r3, r6, r4
 800cb5a:	3b15      	subs	r3, #21
 800cb5c:	f023 0303 	bic.w	r3, r3, #3
 800cb60:	3415      	adds	r4, #21
 800cb62:	3304      	adds	r3, #4
 800cb64:	42a6      	cmp	r6, r4
 800cb66:	bf38      	it	cc
 800cb68:	2304      	movcc	r3, #4
 800cb6a:	441d      	add	r5, r3
 800cb6c:	445b      	add	r3, fp
 800cb6e:	461e      	mov	r6, r3
 800cb70:	462c      	mov	r4, r5
 800cb72:	4544      	cmp	r4, r8
 800cb74:	d30e      	bcc.n	800cb94 <__mdiff+0xf8>
 800cb76:	f108 0103 	add.w	r1, r8, #3
 800cb7a:	1b49      	subs	r1, r1, r5
 800cb7c:	f021 0103 	bic.w	r1, r1, #3
 800cb80:	3d03      	subs	r5, #3
 800cb82:	45a8      	cmp	r8, r5
 800cb84:	bf38      	it	cc
 800cb86:	2100      	movcc	r1, #0
 800cb88:	440b      	add	r3, r1
 800cb8a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cb8e:	b191      	cbz	r1, 800cbb6 <__mdiff+0x11a>
 800cb90:	6117      	str	r7, [r2, #16]
 800cb92:	e79d      	b.n	800cad0 <__mdiff+0x34>
 800cb94:	f854 1b04 	ldr.w	r1, [r4], #4
 800cb98:	46e6      	mov	lr, ip
 800cb9a:	0c08      	lsrs	r0, r1, #16
 800cb9c:	fa1c fc81 	uxtah	ip, ip, r1
 800cba0:	4471      	add	r1, lr
 800cba2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800cba6:	b289      	uxth	r1, r1
 800cba8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800cbac:	f846 1b04 	str.w	r1, [r6], #4
 800cbb0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cbb4:	e7dd      	b.n	800cb72 <__mdiff+0xd6>
 800cbb6:	3f01      	subs	r7, #1
 800cbb8:	e7e7      	b.n	800cb8a <__mdiff+0xee>
 800cbba:	bf00      	nop
 800cbbc:	08010a64 	.word	0x08010a64
 800cbc0:	08010a75 	.word	0x08010a75

0800cbc4 <__d2b>:
 800cbc4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cbc8:	460f      	mov	r7, r1
 800cbca:	2101      	movs	r1, #1
 800cbcc:	ec59 8b10 	vmov	r8, r9, d0
 800cbd0:	4616      	mov	r6, r2
 800cbd2:	f7ff fcd5 	bl	800c580 <_Balloc>
 800cbd6:	4604      	mov	r4, r0
 800cbd8:	b930      	cbnz	r0, 800cbe8 <__d2b+0x24>
 800cbda:	4602      	mov	r2, r0
 800cbdc:	4b23      	ldr	r3, [pc, #140]	@ (800cc6c <__d2b+0xa8>)
 800cbde:	4824      	ldr	r0, [pc, #144]	@ (800cc70 <__d2b+0xac>)
 800cbe0:	f240 310f 	movw	r1, #783	@ 0x30f
 800cbe4:	f000 fa74 	bl	800d0d0 <__assert_func>
 800cbe8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cbec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cbf0:	b10d      	cbz	r5, 800cbf6 <__d2b+0x32>
 800cbf2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cbf6:	9301      	str	r3, [sp, #4]
 800cbf8:	f1b8 0300 	subs.w	r3, r8, #0
 800cbfc:	d023      	beq.n	800cc46 <__d2b+0x82>
 800cbfe:	4668      	mov	r0, sp
 800cc00:	9300      	str	r3, [sp, #0]
 800cc02:	f7ff fd84 	bl	800c70e <__lo0bits>
 800cc06:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cc0a:	b1d0      	cbz	r0, 800cc42 <__d2b+0x7e>
 800cc0c:	f1c0 0320 	rsb	r3, r0, #32
 800cc10:	fa02 f303 	lsl.w	r3, r2, r3
 800cc14:	430b      	orrs	r3, r1
 800cc16:	40c2      	lsrs	r2, r0
 800cc18:	6163      	str	r3, [r4, #20]
 800cc1a:	9201      	str	r2, [sp, #4]
 800cc1c:	9b01      	ldr	r3, [sp, #4]
 800cc1e:	61a3      	str	r3, [r4, #24]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	bf0c      	ite	eq
 800cc24:	2201      	moveq	r2, #1
 800cc26:	2202      	movne	r2, #2
 800cc28:	6122      	str	r2, [r4, #16]
 800cc2a:	b1a5      	cbz	r5, 800cc56 <__d2b+0x92>
 800cc2c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800cc30:	4405      	add	r5, r0
 800cc32:	603d      	str	r5, [r7, #0]
 800cc34:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800cc38:	6030      	str	r0, [r6, #0]
 800cc3a:	4620      	mov	r0, r4
 800cc3c:	b003      	add	sp, #12
 800cc3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cc42:	6161      	str	r1, [r4, #20]
 800cc44:	e7ea      	b.n	800cc1c <__d2b+0x58>
 800cc46:	a801      	add	r0, sp, #4
 800cc48:	f7ff fd61 	bl	800c70e <__lo0bits>
 800cc4c:	9b01      	ldr	r3, [sp, #4]
 800cc4e:	6163      	str	r3, [r4, #20]
 800cc50:	3020      	adds	r0, #32
 800cc52:	2201      	movs	r2, #1
 800cc54:	e7e8      	b.n	800cc28 <__d2b+0x64>
 800cc56:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cc5a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800cc5e:	6038      	str	r0, [r7, #0]
 800cc60:	6918      	ldr	r0, [r3, #16]
 800cc62:	f7ff fd35 	bl	800c6d0 <__hi0bits>
 800cc66:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cc6a:	e7e5      	b.n	800cc38 <__d2b+0x74>
 800cc6c:	08010a64 	.word	0x08010a64
 800cc70:	08010a75 	.word	0x08010a75

0800cc74 <__ssputs_r>:
 800cc74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc78:	688e      	ldr	r6, [r1, #8]
 800cc7a:	461f      	mov	r7, r3
 800cc7c:	42be      	cmp	r6, r7
 800cc7e:	680b      	ldr	r3, [r1, #0]
 800cc80:	4682      	mov	sl, r0
 800cc82:	460c      	mov	r4, r1
 800cc84:	4690      	mov	r8, r2
 800cc86:	d82d      	bhi.n	800cce4 <__ssputs_r+0x70>
 800cc88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cc8c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800cc90:	d026      	beq.n	800cce0 <__ssputs_r+0x6c>
 800cc92:	6965      	ldr	r5, [r4, #20]
 800cc94:	6909      	ldr	r1, [r1, #16]
 800cc96:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cc9a:	eba3 0901 	sub.w	r9, r3, r1
 800cc9e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cca2:	1c7b      	adds	r3, r7, #1
 800cca4:	444b      	add	r3, r9
 800cca6:	106d      	asrs	r5, r5, #1
 800cca8:	429d      	cmp	r5, r3
 800ccaa:	bf38      	it	cc
 800ccac:	461d      	movcc	r5, r3
 800ccae:	0553      	lsls	r3, r2, #21
 800ccb0:	d527      	bpl.n	800cd02 <__ssputs_r+0x8e>
 800ccb2:	4629      	mov	r1, r5
 800ccb4:	f7ff fbd8 	bl	800c468 <_malloc_r>
 800ccb8:	4606      	mov	r6, r0
 800ccba:	b360      	cbz	r0, 800cd16 <__ssputs_r+0xa2>
 800ccbc:	6921      	ldr	r1, [r4, #16]
 800ccbe:	464a      	mov	r2, r9
 800ccc0:	f7fe fcf5 	bl	800b6ae <memcpy>
 800ccc4:	89a3      	ldrh	r3, [r4, #12]
 800ccc6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ccca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ccce:	81a3      	strh	r3, [r4, #12]
 800ccd0:	6126      	str	r6, [r4, #16]
 800ccd2:	6165      	str	r5, [r4, #20]
 800ccd4:	444e      	add	r6, r9
 800ccd6:	eba5 0509 	sub.w	r5, r5, r9
 800ccda:	6026      	str	r6, [r4, #0]
 800ccdc:	60a5      	str	r5, [r4, #8]
 800ccde:	463e      	mov	r6, r7
 800cce0:	42be      	cmp	r6, r7
 800cce2:	d900      	bls.n	800cce6 <__ssputs_r+0x72>
 800cce4:	463e      	mov	r6, r7
 800cce6:	6820      	ldr	r0, [r4, #0]
 800cce8:	4632      	mov	r2, r6
 800ccea:	4641      	mov	r1, r8
 800ccec:	f000 f9c6 	bl	800d07c <memmove>
 800ccf0:	68a3      	ldr	r3, [r4, #8]
 800ccf2:	1b9b      	subs	r3, r3, r6
 800ccf4:	60a3      	str	r3, [r4, #8]
 800ccf6:	6823      	ldr	r3, [r4, #0]
 800ccf8:	4433      	add	r3, r6
 800ccfa:	6023      	str	r3, [r4, #0]
 800ccfc:	2000      	movs	r0, #0
 800ccfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd02:	462a      	mov	r2, r5
 800cd04:	f000 fa28 	bl	800d158 <_realloc_r>
 800cd08:	4606      	mov	r6, r0
 800cd0a:	2800      	cmp	r0, #0
 800cd0c:	d1e0      	bne.n	800ccd0 <__ssputs_r+0x5c>
 800cd0e:	6921      	ldr	r1, [r4, #16]
 800cd10:	4650      	mov	r0, sl
 800cd12:	f7ff fb35 	bl	800c380 <_free_r>
 800cd16:	230c      	movs	r3, #12
 800cd18:	f8ca 3000 	str.w	r3, [sl]
 800cd1c:	89a3      	ldrh	r3, [r4, #12]
 800cd1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cd22:	81a3      	strh	r3, [r4, #12]
 800cd24:	f04f 30ff 	mov.w	r0, #4294967295
 800cd28:	e7e9      	b.n	800ccfe <__ssputs_r+0x8a>
	...

0800cd2c <_svfiprintf_r>:
 800cd2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd30:	4698      	mov	r8, r3
 800cd32:	898b      	ldrh	r3, [r1, #12]
 800cd34:	061b      	lsls	r3, r3, #24
 800cd36:	b09d      	sub	sp, #116	@ 0x74
 800cd38:	4607      	mov	r7, r0
 800cd3a:	460d      	mov	r5, r1
 800cd3c:	4614      	mov	r4, r2
 800cd3e:	d510      	bpl.n	800cd62 <_svfiprintf_r+0x36>
 800cd40:	690b      	ldr	r3, [r1, #16]
 800cd42:	b973      	cbnz	r3, 800cd62 <_svfiprintf_r+0x36>
 800cd44:	2140      	movs	r1, #64	@ 0x40
 800cd46:	f7ff fb8f 	bl	800c468 <_malloc_r>
 800cd4a:	6028      	str	r0, [r5, #0]
 800cd4c:	6128      	str	r0, [r5, #16]
 800cd4e:	b930      	cbnz	r0, 800cd5e <_svfiprintf_r+0x32>
 800cd50:	230c      	movs	r3, #12
 800cd52:	603b      	str	r3, [r7, #0]
 800cd54:	f04f 30ff 	mov.w	r0, #4294967295
 800cd58:	b01d      	add	sp, #116	@ 0x74
 800cd5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd5e:	2340      	movs	r3, #64	@ 0x40
 800cd60:	616b      	str	r3, [r5, #20]
 800cd62:	2300      	movs	r3, #0
 800cd64:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd66:	2320      	movs	r3, #32
 800cd68:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cd6c:	f8cd 800c 	str.w	r8, [sp, #12]
 800cd70:	2330      	movs	r3, #48	@ 0x30
 800cd72:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800cf10 <_svfiprintf_r+0x1e4>
 800cd76:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cd7a:	f04f 0901 	mov.w	r9, #1
 800cd7e:	4623      	mov	r3, r4
 800cd80:	469a      	mov	sl, r3
 800cd82:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd86:	b10a      	cbz	r2, 800cd8c <_svfiprintf_r+0x60>
 800cd88:	2a25      	cmp	r2, #37	@ 0x25
 800cd8a:	d1f9      	bne.n	800cd80 <_svfiprintf_r+0x54>
 800cd8c:	ebba 0b04 	subs.w	fp, sl, r4
 800cd90:	d00b      	beq.n	800cdaa <_svfiprintf_r+0x7e>
 800cd92:	465b      	mov	r3, fp
 800cd94:	4622      	mov	r2, r4
 800cd96:	4629      	mov	r1, r5
 800cd98:	4638      	mov	r0, r7
 800cd9a:	f7ff ff6b 	bl	800cc74 <__ssputs_r>
 800cd9e:	3001      	adds	r0, #1
 800cda0:	f000 80a7 	beq.w	800cef2 <_svfiprintf_r+0x1c6>
 800cda4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cda6:	445a      	add	r2, fp
 800cda8:	9209      	str	r2, [sp, #36]	@ 0x24
 800cdaa:	f89a 3000 	ldrb.w	r3, [sl]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	f000 809f 	beq.w	800cef2 <_svfiprintf_r+0x1c6>
 800cdb4:	2300      	movs	r3, #0
 800cdb6:	f04f 32ff 	mov.w	r2, #4294967295
 800cdba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cdbe:	f10a 0a01 	add.w	sl, sl, #1
 800cdc2:	9304      	str	r3, [sp, #16]
 800cdc4:	9307      	str	r3, [sp, #28]
 800cdc6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cdca:	931a      	str	r3, [sp, #104]	@ 0x68
 800cdcc:	4654      	mov	r4, sl
 800cdce:	2205      	movs	r2, #5
 800cdd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdd4:	484e      	ldr	r0, [pc, #312]	@ (800cf10 <_svfiprintf_r+0x1e4>)
 800cdd6:	f7f3 fa03 	bl	80001e0 <memchr>
 800cdda:	9a04      	ldr	r2, [sp, #16]
 800cddc:	b9d8      	cbnz	r0, 800ce16 <_svfiprintf_r+0xea>
 800cdde:	06d0      	lsls	r0, r2, #27
 800cde0:	bf44      	itt	mi
 800cde2:	2320      	movmi	r3, #32
 800cde4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cde8:	0711      	lsls	r1, r2, #28
 800cdea:	bf44      	itt	mi
 800cdec:	232b      	movmi	r3, #43	@ 0x2b
 800cdee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cdf2:	f89a 3000 	ldrb.w	r3, [sl]
 800cdf6:	2b2a      	cmp	r3, #42	@ 0x2a
 800cdf8:	d015      	beq.n	800ce26 <_svfiprintf_r+0xfa>
 800cdfa:	9a07      	ldr	r2, [sp, #28]
 800cdfc:	4654      	mov	r4, sl
 800cdfe:	2000      	movs	r0, #0
 800ce00:	f04f 0c0a 	mov.w	ip, #10
 800ce04:	4621      	mov	r1, r4
 800ce06:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ce0a:	3b30      	subs	r3, #48	@ 0x30
 800ce0c:	2b09      	cmp	r3, #9
 800ce0e:	d94b      	bls.n	800cea8 <_svfiprintf_r+0x17c>
 800ce10:	b1b0      	cbz	r0, 800ce40 <_svfiprintf_r+0x114>
 800ce12:	9207      	str	r2, [sp, #28]
 800ce14:	e014      	b.n	800ce40 <_svfiprintf_r+0x114>
 800ce16:	eba0 0308 	sub.w	r3, r0, r8
 800ce1a:	fa09 f303 	lsl.w	r3, r9, r3
 800ce1e:	4313      	orrs	r3, r2
 800ce20:	9304      	str	r3, [sp, #16]
 800ce22:	46a2      	mov	sl, r4
 800ce24:	e7d2      	b.n	800cdcc <_svfiprintf_r+0xa0>
 800ce26:	9b03      	ldr	r3, [sp, #12]
 800ce28:	1d19      	adds	r1, r3, #4
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	9103      	str	r1, [sp, #12]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	bfbb      	ittet	lt
 800ce32:	425b      	neglt	r3, r3
 800ce34:	f042 0202 	orrlt.w	r2, r2, #2
 800ce38:	9307      	strge	r3, [sp, #28]
 800ce3a:	9307      	strlt	r3, [sp, #28]
 800ce3c:	bfb8      	it	lt
 800ce3e:	9204      	strlt	r2, [sp, #16]
 800ce40:	7823      	ldrb	r3, [r4, #0]
 800ce42:	2b2e      	cmp	r3, #46	@ 0x2e
 800ce44:	d10a      	bne.n	800ce5c <_svfiprintf_r+0x130>
 800ce46:	7863      	ldrb	r3, [r4, #1]
 800ce48:	2b2a      	cmp	r3, #42	@ 0x2a
 800ce4a:	d132      	bne.n	800ceb2 <_svfiprintf_r+0x186>
 800ce4c:	9b03      	ldr	r3, [sp, #12]
 800ce4e:	1d1a      	adds	r2, r3, #4
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	9203      	str	r2, [sp, #12]
 800ce54:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ce58:	3402      	adds	r4, #2
 800ce5a:	9305      	str	r3, [sp, #20]
 800ce5c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800cf20 <_svfiprintf_r+0x1f4>
 800ce60:	7821      	ldrb	r1, [r4, #0]
 800ce62:	2203      	movs	r2, #3
 800ce64:	4650      	mov	r0, sl
 800ce66:	f7f3 f9bb 	bl	80001e0 <memchr>
 800ce6a:	b138      	cbz	r0, 800ce7c <_svfiprintf_r+0x150>
 800ce6c:	9b04      	ldr	r3, [sp, #16]
 800ce6e:	eba0 000a 	sub.w	r0, r0, sl
 800ce72:	2240      	movs	r2, #64	@ 0x40
 800ce74:	4082      	lsls	r2, r0
 800ce76:	4313      	orrs	r3, r2
 800ce78:	3401      	adds	r4, #1
 800ce7a:	9304      	str	r3, [sp, #16]
 800ce7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce80:	4824      	ldr	r0, [pc, #144]	@ (800cf14 <_svfiprintf_r+0x1e8>)
 800ce82:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ce86:	2206      	movs	r2, #6
 800ce88:	f7f3 f9aa 	bl	80001e0 <memchr>
 800ce8c:	2800      	cmp	r0, #0
 800ce8e:	d036      	beq.n	800cefe <_svfiprintf_r+0x1d2>
 800ce90:	4b21      	ldr	r3, [pc, #132]	@ (800cf18 <_svfiprintf_r+0x1ec>)
 800ce92:	bb1b      	cbnz	r3, 800cedc <_svfiprintf_r+0x1b0>
 800ce94:	9b03      	ldr	r3, [sp, #12]
 800ce96:	3307      	adds	r3, #7
 800ce98:	f023 0307 	bic.w	r3, r3, #7
 800ce9c:	3308      	adds	r3, #8
 800ce9e:	9303      	str	r3, [sp, #12]
 800cea0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cea2:	4433      	add	r3, r6
 800cea4:	9309      	str	r3, [sp, #36]	@ 0x24
 800cea6:	e76a      	b.n	800cd7e <_svfiprintf_r+0x52>
 800cea8:	fb0c 3202 	mla	r2, ip, r2, r3
 800ceac:	460c      	mov	r4, r1
 800ceae:	2001      	movs	r0, #1
 800ceb0:	e7a8      	b.n	800ce04 <_svfiprintf_r+0xd8>
 800ceb2:	2300      	movs	r3, #0
 800ceb4:	3401      	adds	r4, #1
 800ceb6:	9305      	str	r3, [sp, #20]
 800ceb8:	4619      	mov	r1, r3
 800ceba:	f04f 0c0a 	mov.w	ip, #10
 800cebe:	4620      	mov	r0, r4
 800cec0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cec4:	3a30      	subs	r2, #48	@ 0x30
 800cec6:	2a09      	cmp	r2, #9
 800cec8:	d903      	bls.n	800ced2 <_svfiprintf_r+0x1a6>
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d0c6      	beq.n	800ce5c <_svfiprintf_r+0x130>
 800cece:	9105      	str	r1, [sp, #20]
 800ced0:	e7c4      	b.n	800ce5c <_svfiprintf_r+0x130>
 800ced2:	fb0c 2101 	mla	r1, ip, r1, r2
 800ced6:	4604      	mov	r4, r0
 800ced8:	2301      	movs	r3, #1
 800ceda:	e7f0      	b.n	800cebe <_svfiprintf_r+0x192>
 800cedc:	ab03      	add	r3, sp, #12
 800cede:	9300      	str	r3, [sp, #0]
 800cee0:	462a      	mov	r2, r5
 800cee2:	4b0e      	ldr	r3, [pc, #56]	@ (800cf1c <_svfiprintf_r+0x1f0>)
 800cee4:	a904      	add	r1, sp, #16
 800cee6:	4638      	mov	r0, r7
 800cee8:	f7fd fe74 	bl	800abd4 <_printf_float>
 800ceec:	1c42      	adds	r2, r0, #1
 800ceee:	4606      	mov	r6, r0
 800cef0:	d1d6      	bne.n	800cea0 <_svfiprintf_r+0x174>
 800cef2:	89ab      	ldrh	r3, [r5, #12]
 800cef4:	065b      	lsls	r3, r3, #25
 800cef6:	f53f af2d 	bmi.w	800cd54 <_svfiprintf_r+0x28>
 800cefa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cefc:	e72c      	b.n	800cd58 <_svfiprintf_r+0x2c>
 800cefe:	ab03      	add	r3, sp, #12
 800cf00:	9300      	str	r3, [sp, #0]
 800cf02:	462a      	mov	r2, r5
 800cf04:	4b05      	ldr	r3, [pc, #20]	@ (800cf1c <_svfiprintf_r+0x1f0>)
 800cf06:	a904      	add	r1, sp, #16
 800cf08:	4638      	mov	r0, r7
 800cf0a:	f7fe f8fb 	bl	800b104 <_printf_i>
 800cf0e:	e7ed      	b.n	800ceec <_svfiprintf_r+0x1c0>
 800cf10:	08010ace 	.word	0x08010ace
 800cf14:	08010ad8 	.word	0x08010ad8
 800cf18:	0800abd5 	.word	0x0800abd5
 800cf1c:	0800cc75 	.word	0x0800cc75
 800cf20:	08010ad4 	.word	0x08010ad4

0800cf24 <__sflush_r>:
 800cf24:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cf28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf2c:	0716      	lsls	r6, r2, #28
 800cf2e:	4605      	mov	r5, r0
 800cf30:	460c      	mov	r4, r1
 800cf32:	d454      	bmi.n	800cfde <__sflush_r+0xba>
 800cf34:	684b      	ldr	r3, [r1, #4]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	dc02      	bgt.n	800cf40 <__sflush_r+0x1c>
 800cf3a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	dd48      	ble.n	800cfd2 <__sflush_r+0xae>
 800cf40:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cf42:	2e00      	cmp	r6, #0
 800cf44:	d045      	beq.n	800cfd2 <__sflush_r+0xae>
 800cf46:	2300      	movs	r3, #0
 800cf48:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cf4c:	682f      	ldr	r7, [r5, #0]
 800cf4e:	6a21      	ldr	r1, [r4, #32]
 800cf50:	602b      	str	r3, [r5, #0]
 800cf52:	d030      	beq.n	800cfb6 <__sflush_r+0x92>
 800cf54:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cf56:	89a3      	ldrh	r3, [r4, #12]
 800cf58:	0759      	lsls	r1, r3, #29
 800cf5a:	d505      	bpl.n	800cf68 <__sflush_r+0x44>
 800cf5c:	6863      	ldr	r3, [r4, #4]
 800cf5e:	1ad2      	subs	r2, r2, r3
 800cf60:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cf62:	b10b      	cbz	r3, 800cf68 <__sflush_r+0x44>
 800cf64:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cf66:	1ad2      	subs	r2, r2, r3
 800cf68:	2300      	movs	r3, #0
 800cf6a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cf6c:	6a21      	ldr	r1, [r4, #32]
 800cf6e:	4628      	mov	r0, r5
 800cf70:	47b0      	blx	r6
 800cf72:	1c43      	adds	r3, r0, #1
 800cf74:	89a3      	ldrh	r3, [r4, #12]
 800cf76:	d106      	bne.n	800cf86 <__sflush_r+0x62>
 800cf78:	6829      	ldr	r1, [r5, #0]
 800cf7a:	291d      	cmp	r1, #29
 800cf7c:	d82b      	bhi.n	800cfd6 <__sflush_r+0xb2>
 800cf7e:	4a2a      	ldr	r2, [pc, #168]	@ (800d028 <__sflush_r+0x104>)
 800cf80:	40ca      	lsrs	r2, r1
 800cf82:	07d6      	lsls	r6, r2, #31
 800cf84:	d527      	bpl.n	800cfd6 <__sflush_r+0xb2>
 800cf86:	2200      	movs	r2, #0
 800cf88:	6062      	str	r2, [r4, #4]
 800cf8a:	04d9      	lsls	r1, r3, #19
 800cf8c:	6922      	ldr	r2, [r4, #16]
 800cf8e:	6022      	str	r2, [r4, #0]
 800cf90:	d504      	bpl.n	800cf9c <__sflush_r+0x78>
 800cf92:	1c42      	adds	r2, r0, #1
 800cf94:	d101      	bne.n	800cf9a <__sflush_r+0x76>
 800cf96:	682b      	ldr	r3, [r5, #0]
 800cf98:	b903      	cbnz	r3, 800cf9c <__sflush_r+0x78>
 800cf9a:	6560      	str	r0, [r4, #84]	@ 0x54
 800cf9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cf9e:	602f      	str	r7, [r5, #0]
 800cfa0:	b1b9      	cbz	r1, 800cfd2 <__sflush_r+0xae>
 800cfa2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cfa6:	4299      	cmp	r1, r3
 800cfa8:	d002      	beq.n	800cfb0 <__sflush_r+0x8c>
 800cfaa:	4628      	mov	r0, r5
 800cfac:	f7ff f9e8 	bl	800c380 <_free_r>
 800cfb0:	2300      	movs	r3, #0
 800cfb2:	6363      	str	r3, [r4, #52]	@ 0x34
 800cfb4:	e00d      	b.n	800cfd2 <__sflush_r+0xae>
 800cfb6:	2301      	movs	r3, #1
 800cfb8:	4628      	mov	r0, r5
 800cfba:	47b0      	blx	r6
 800cfbc:	4602      	mov	r2, r0
 800cfbe:	1c50      	adds	r0, r2, #1
 800cfc0:	d1c9      	bne.n	800cf56 <__sflush_r+0x32>
 800cfc2:	682b      	ldr	r3, [r5, #0]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d0c6      	beq.n	800cf56 <__sflush_r+0x32>
 800cfc8:	2b1d      	cmp	r3, #29
 800cfca:	d001      	beq.n	800cfd0 <__sflush_r+0xac>
 800cfcc:	2b16      	cmp	r3, #22
 800cfce:	d11e      	bne.n	800d00e <__sflush_r+0xea>
 800cfd0:	602f      	str	r7, [r5, #0]
 800cfd2:	2000      	movs	r0, #0
 800cfd4:	e022      	b.n	800d01c <__sflush_r+0xf8>
 800cfd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cfda:	b21b      	sxth	r3, r3
 800cfdc:	e01b      	b.n	800d016 <__sflush_r+0xf2>
 800cfde:	690f      	ldr	r7, [r1, #16]
 800cfe0:	2f00      	cmp	r7, #0
 800cfe2:	d0f6      	beq.n	800cfd2 <__sflush_r+0xae>
 800cfe4:	0793      	lsls	r3, r2, #30
 800cfe6:	680e      	ldr	r6, [r1, #0]
 800cfe8:	bf08      	it	eq
 800cfea:	694b      	ldreq	r3, [r1, #20]
 800cfec:	600f      	str	r7, [r1, #0]
 800cfee:	bf18      	it	ne
 800cff0:	2300      	movne	r3, #0
 800cff2:	eba6 0807 	sub.w	r8, r6, r7
 800cff6:	608b      	str	r3, [r1, #8]
 800cff8:	f1b8 0f00 	cmp.w	r8, #0
 800cffc:	dde9      	ble.n	800cfd2 <__sflush_r+0xae>
 800cffe:	6a21      	ldr	r1, [r4, #32]
 800d000:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d002:	4643      	mov	r3, r8
 800d004:	463a      	mov	r2, r7
 800d006:	4628      	mov	r0, r5
 800d008:	47b0      	blx	r6
 800d00a:	2800      	cmp	r0, #0
 800d00c:	dc08      	bgt.n	800d020 <__sflush_r+0xfc>
 800d00e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d012:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d016:	81a3      	strh	r3, [r4, #12]
 800d018:	f04f 30ff 	mov.w	r0, #4294967295
 800d01c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d020:	4407      	add	r7, r0
 800d022:	eba8 0800 	sub.w	r8, r8, r0
 800d026:	e7e7      	b.n	800cff8 <__sflush_r+0xd4>
 800d028:	20400001 	.word	0x20400001

0800d02c <_fflush_r>:
 800d02c:	b538      	push	{r3, r4, r5, lr}
 800d02e:	690b      	ldr	r3, [r1, #16]
 800d030:	4605      	mov	r5, r0
 800d032:	460c      	mov	r4, r1
 800d034:	b913      	cbnz	r3, 800d03c <_fflush_r+0x10>
 800d036:	2500      	movs	r5, #0
 800d038:	4628      	mov	r0, r5
 800d03a:	bd38      	pop	{r3, r4, r5, pc}
 800d03c:	b118      	cbz	r0, 800d046 <_fflush_r+0x1a>
 800d03e:	6a03      	ldr	r3, [r0, #32]
 800d040:	b90b      	cbnz	r3, 800d046 <_fflush_r+0x1a>
 800d042:	f7fe fa09 	bl	800b458 <__sinit>
 800d046:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d0f3      	beq.n	800d036 <_fflush_r+0xa>
 800d04e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d050:	07d0      	lsls	r0, r2, #31
 800d052:	d404      	bmi.n	800d05e <_fflush_r+0x32>
 800d054:	0599      	lsls	r1, r3, #22
 800d056:	d402      	bmi.n	800d05e <_fflush_r+0x32>
 800d058:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d05a:	f7fe fb26 	bl	800b6aa <__retarget_lock_acquire_recursive>
 800d05e:	4628      	mov	r0, r5
 800d060:	4621      	mov	r1, r4
 800d062:	f7ff ff5f 	bl	800cf24 <__sflush_r>
 800d066:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d068:	07da      	lsls	r2, r3, #31
 800d06a:	4605      	mov	r5, r0
 800d06c:	d4e4      	bmi.n	800d038 <_fflush_r+0xc>
 800d06e:	89a3      	ldrh	r3, [r4, #12]
 800d070:	059b      	lsls	r3, r3, #22
 800d072:	d4e1      	bmi.n	800d038 <_fflush_r+0xc>
 800d074:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d076:	f7fe fb19 	bl	800b6ac <__retarget_lock_release_recursive>
 800d07a:	e7dd      	b.n	800d038 <_fflush_r+0xc>

0800d07c <memmove>:
 800d07c:	4288      	cmp	r0, r1
 800d07e:	b510      	push	{r4, lr}
 800d080:	eb01 0402 	add.w	r4, r1, r2
 800d084:	d902      	bls.n	800d08c <memmove+0x10>
 800d086:	4284      	cmp	r4, r0
 800d088:	4623      	mov	r3, r4
 800d08a:	d807      	bhi.n	800d09c <memmove+0x20>
 800d08c:	1e43      	subs	r3, r0, #1
 800d08e:	42a1      	cmp	r1, r4
 800d090:	d008      	beq.n	800d0a4 <memmove+0x28>
 800d092:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d096:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d09a:	e7f8      	b.n	800d08e <memmove+0x12>
 800d09c:	4402      	add	r2, r0
 800d09e:	4601      	mov	r1, r0
 800d0a0:	428a      	cmp	r2, r1
 800d0a2:	d100      	bne.n	800d0a6 <memmove+0x2a>
 800d0a4:	bd10      	pop	{r4, pc}
 800d0a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d0aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d0ae:	e7f7      	b.n	800d0a0 <memmove+0x24>

0800d0b0 <_sbrk_r>:
 800d0b0:	b538      	push	{r3, r4, r5, lr}
 800d0b2:	4d06      	ldr	r5, [pc, #24]	@ (800d0cc <_sbrk_r+0x1c>)
 800d0b4:	2300      	movs	r3, #0
 800d0b6:	4604      	mov	r4, r0
 800d0b8:	4608      	mov	r0, r1
 800d0ba:	602b      	str	r3, [r5, #0]
 800d0bc:	f7f9 f91a 	bl	80062f4 <_sbrk>
 800d0c0:	1c43      	adds	r3, r0, #1
 800d0c2:	d102      	bne.n	800d0ca <_sbrk_r+0x1a>
 800d0c4:	682b      	ldr	r3, [r5, #0]
 800d0c6:	b103      	cbz	r3, 800d0ca <_sbrk_r+0x1a>
 800d0c8:	6023      	str	r3, [r4, #0]
 800d0ca:	bd38      	pop	{r3, r4, r5, pc}
 800d0cc:	200082b8 	.word	0x200082b8

0800d0d0 <__assert_func>:
 800d0d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d0d2:	4614      	mov	r4, r2
 800d0d4:	461a      	mov	r2, r3
 800d0d6:	4b09      	ldr	r3, [pc, #36]	@ (800d0fc <__assert_func+0x2c>)
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	4605      	mov	r5, r0
 800d0dc:	68d8      	ldr	r0, [r3, #12]
 800d0de:	b14c      	cbz	r4, 800d0f4 <__assert_func+0x24>
 800d0e0:	4b07      	ldr	r3, [pc, #28]	@ (800d100 <__assert_func+0x30>)
 800d0e2:	9100      	str	r1, [sp, #0]
 800d0e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d0e8:	4906      	ldr	r1, [pc, #24]	@ (800d104 <__assert_func+0x34>)
 800d0ea:	462b      	mov	r3, r5
 800d0ec:	f000 f870 	bl	800d1d0 <fiprintf>
 800d0f0:	f000 f880 	bl	800d1f4 <abort>
 800d0f4:	4b04      	ldr	r3, [pc, #16]	@ (800d108 <__assert_func+0x38>)
 800d0f6:	461c      	mov	r4, r3
 800d0f8:	e7f3      	b.n	800d0e2 <__assert_func+0x12>
 800d0fa:	bf00      	nop
 800d0fc:	2000001c 	.word	0x2000001c
 800d100:	08010ae9 	.word	0x08010ae9
 800d104:	08010af6 	.word	0x08010af6
 800d108:	08010b24 	.word	0x08010b24

0800d10c <_calloc_r>:
 800d10c:	b570      	push	{r4, r5, r6, lr}
 800d10e:	fba1 5402 	umull	r5, r4, r1, r2
 800d112:	b934      	cbnz	r4, 800d122 <_calloc_r+0x16>
 800d114:	4629      	mov	r1, r5
 800d116:	f7ff f9a7 	bl	800c468 <_malloc_r>
 800d11a:	4606      	mov	r6, r0
 800d11c:	b928      	cbnz	r0, 800d12a <_calloc_r+0x1e>
 800d11e:	4630      	mov	r0, r6
 800d120:	bd70      	pop	{r4, r5, r6, pc}
 800d122:	220c      	movs	r2, #12
 800d124:	6002      	str	r2, [r0, #0]
 800d126:	2600      	movs	r6, #0
 800d128:	e7f9      	b.n	800d11e <_calloc_r+0x12>
 800d12a:	462a      	mov	r2, r5
 800d12c:	4621      	mov	r1, r4
 800d12e:	f7fe fa3e 	bl	800b5ae <memset>
 800d132:	e7f4      	b.n	800d11e <_calloc_r+0x12>

0800d134 <__ascii_mbtowc>:
 800d134:	b082      	sub	sp, #8
 800d136:	b901      	cbnz	r1, 800d13a <__ascii_mbtowc+0x6>
 800d138:	a901      	add	r1, sp, #4
 800d13a:	b142      	cbz	r2, 800d14e <__ascii_mbtowc+0x1a>
 800d13c:	b14b      	cbz	r3, 800d152 <__ascii_mbtowc+0x1e>
 800d13e:	7813      	ldrb	r3, [r2, #0]
 800d140:	600b      	str	r3, [r1, #0]
 800d142:	7812      	ldrb	r2, [r2, #0]
 800d144:	1e10      	subs	r0, r2, #0
 800d146:	bf18      	it	ne
 800d148:	2001      	movne	r0, #1
 800d14a:	b002      	add	sp, #8
 800d14c:	4770      	bx	lr
 800d14e:	4610      	mov	r0, r2
 800d150:	e7fb      	b.n	800d14a <__ascii_mbtowc+0x16>
 800d152:	f06f 0001 	mvn.w	r0, #1
 800d156:	e7f8      	b.n	800d14a <__ascii_mbtowc+0x16>

0800d158 <_realloc_r>:
 800d158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d15c:	4607      	mov	r7, r0
 800d15e:	4614      	mov	r4, r2
 800d160:	460d      	mov	r5, r1
 800d162:	b921      	cbnz	r1, 800d16e <_realloc_r+0x16>
 800d164:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d168:	4611      	mov	r1, r2
 800d16a:	f7ff b97d 	b.w	800c468 <_malloc_r>
 800d16e:	b92a      	cbnz	r2, 800d17c <_realloc_r+0x24>
 800d170:	f7ff f906 	bl	800c380 <_free_r>
 800d174:	4625      	mov	r5, r4
 800d176:	4628      	mov	r0, r5
 800d178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d17c:	f000 f841 	bl	800d202 <_malloc_usable_size_r>
 800d180:	4284      	cmp	r4, r0
 800d182:	4606      	mov	r6, r0
 800d184:	d802      	bhi.n	800d18c <_realloc_r+0x34>
 800d186:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d18a:	d8f4      	bhi.n	800d176 <_realloc_r+0x1e>
 800d18c:	4621      	mov	r1, r4
 800d18e:	4638      	mov	r0, r7
 800d190:	f7ff f96a 	bl	800c468 <_malloc_r>
 800d194:	4680      	mov	r8, r0
 800d196:	b908      	cbnz	r0, 800d19c <_realloc_r+0x44>
 800d198:	4645      	mov	r5, r8
 800d19a:	e7ec      	b.n	800d176 <_realloc_r+0x1e>
 800d19c:	42b4      	cmp	r4, r6
 800d19e:	4622      	mov	r2, r4
 800d1a0:	4629      	mov	r1, r5
 800d1a2:	bf28      	it	cs
 800d1a4:	4632      	movcs	r2, r6
 800d1a6:	f7fe fa82 	bl	800b6ae <memcpy>
 800d1aa:	4629      	mov	r1, r5
 800d1ac:	4638      	mov	r0, r7
 800d1ae:	f7ff f8e7 	bl	800c380 <_free_r>
 800d1b2:	e7f1      	b.n	800d198 <_realloc_r+0x40>

0800d1b4 <__ascii_wctomb>:
 800d1b4:	4603      	mov	r3, r0
 800d1b6:	4608      	mov	r0, r1
 800d1b8:	b141      	cbz	r1, 800d1cc <__ascii_wctomb+0x18>
 800d1ba:	2aff      	cmp	r2, #255	@ 0xff
 800d1bc:	d904      	bls.n	800d1c8 <__ascii_wctomb+0x14>
 800d1be:	228a      	movs	r2, #138	@ 0x8a
 800d1c0:	601a      	str	r2, [r3, #0]
 800d1c2:	f04f 30ff 	mov.w	r0, #4294967295
 800d1c6:	4770      	bx	lr
 800d1c8:	700a      	strb	r2, [r1, #0]
 800d1ca:	2001      	movs	r0, #1
 800d1cc:	4770      	bx	lr
	...

0800d1d0 <fiprintf>:
 800d1d0:	b40e      	push	{r1, r2, r3}
 800d1d2:	b503      	push	{r0, r1, lr}
 800d1d4:	4601      	mov	r1, r0
 800d1d6:	ab03      	add	r3, sp, #12
 800d1d8:	4805      	ldr	r0, [pc, #20]	@ (800d1f0 <fiprintf+0x20>)
 800d1da:	f853 2b04 	ldr.w	r2, [r3], #4
 800d1de:	6800      	ldr	r0, [r0, #0]
 800d1e0:	9301      	str	r3, [sp, #4]
 800d1e2:	f000 f83f 	bl	800d264 <_vfiprintf_r>
 800d1e6:	b002      	add	sp, #8
 800d1e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d1ec:	b003      	add	sp, #12
 800d1ee:	4770      	bx	lr
 800d1f0:	2000001c 	.word	0x2000001c

0800d1f4 <abort>:
 800d1f4:	b508      	push	{r3, lr}
 800d1f6:	2006      	movs	r0, #6
 800d1f8:	f000 fa08 	bl	800d60c <raise>
 800d1fc:	2001      	movs	r0, #1
 800d1fe:	f7f9 f801 	bl	8006204 <_exit>

0800d202 <_malloc_usable_size_r>:
 800d202:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d206:	1f18      	subs	r0, r3, #4
 800d208:	2b00      	cmp	r3, #0
 800d20a:	bfbc      	itt	lt
 800d20c:	580b      	ldrlt	r3, [r1, r0]
 800d20e:	18c0      	addlt	r0, r0, r3
 800d210:	4770      	bx	lr

0800d212 <__sfputc_r>:
 800d212:	6893      	ldr	r3, [r2, #8]
 800d214:	3b01      	subs	r3, #1
 800d216:	2b00      	cmp	r3, #0
 800d218:	b410      	push	{r4}
 800d21a:	6093      	str	r3, [r2, #8]
 800d21c:	da08      	bge.n	800d230 <__sfputc_r+0x1e>
 800d21e:	6994      	ldr	r4, [r2, #24]
 800d220:	42a3      	cmp	r3, r4
 800d222:	db01      	blt.n	800d228 <__sfputc_r+0x16>
 800d224:	290a      	cmp	r1, #10
 800d226:	d103      	bne.n	800d230 <__sfputc_r+0x1e>
 800d228:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d22c:	f000 b932 	b.w	800d494 <__swbuf_r>
 800d230:	6813      	ldr	r3, [r2, #0]
 800d232:	1c58      	adds	r0, r3, #1
 800d234:	6010      	str	r0, [r2, #0]
 800d236:	7019      	strb	r1, [r3, #0]
 800d238:	4608      	mov	r0, r1
 800d23a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d23e:	4770      	bx	lr

0800d240 <__sfputs_r>:
 800d240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d242:	4606      	mov	r6, r0
 800d244:	460f      	mov	r7, r1
 800d246:	4614      	mov	r4, r2
 800d248:	18d5      	adds	r5, r2, r3
 800d24a:	42ac      	cmp	r4, r5
 800d24c:	d101      	bne.n	800d252 <__sfputs_r+0x12>
 800d24e:	2000      	movs	r0, #0
 800d250:	e007      	b.n	800d262 <__sfputs_r+0x22>
 800d252:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d256:	463a      	mov	r2, r7
 800d258:	4630      	mov	r0, r6
 800d25a:	f7ff ffda 	bl	800d212 <__sfputc_r>
 800d25e:	1c43      	adds	r3, r0, #1
 800d260:	d1f3      	bne.n	800d24a <__sfputs_r+0xa>
 800d262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d264 <_vfiprintf_r>:
 800d264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d268:	460d      	mov	r5, r1
 800d26a:	b09d      	sub	sp, #116	@ 0x74
 800d26c:	4614      	mov	r4, r2
 800d26e:	4698      	mov	r8, r3
 800d270:	4606      	mov	r6, r0
 800d272:	b118      	cbz	r0, 800d27c <_vfiprintf_r+0x18>
 800d274:	6a03      	ldr	r3, [r0, #32]
 800d276:	b90b      	cbnz	r3, 800d27c <_vfiprintf_r+0x18>
 800d278:	f7fe f8ee 	bl	800b458 <__sinit>
 800d27c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d27e:	07d9      	lsls	r1, r3, #31
 800d280:	d405      	bmi.n	800d28e <_vfiprintf_r+0x2a>
 800d282:	89ab      	ldrh	r3, [r5, #12]
 800d284:	059a      	lsls	r2, r3, #22
 800d286:	d402      	bmi.n	800d28e <_vfiprintf_r+0x2a>
 800d288:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d28a:	f7fe fa0e 	bl	800b6aa <__retarget_lock_acquire_recursive>
 800d28e:	89ab      	ldrh	r3, [r5, #12]
 800d290:	071b      	lsls	r3, r3, #28
 800d292:	d501      	bpl.n	800d298 <_vfiprintf_r+0x34>
 800d294:	692b      	ldr	r3, [r5, #16]
 800d296:	b99b      	cbnz	r3, 800d2c0 <_vfiprintf_r+0x5c>
 800d298:	4629      	mov	r1, r5
 800d29a:	4630      	mov	r0, r6
 800d29c:	f000 f938 	bl	800d510 <__swsetup_r>
 800d2a0:	b170      	cbz	r0, 800d2c0 <_vfiprintf_r+0x5c>
 800d2a2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d2a4:	07dc      	lsls	r4, r3, #31
 800d2a6:	d504      	bpl.n	800d2b2 <_vfiprintf_r+0x4e>
 800d2a8:	f04f 30ff 	mov.w	r0, #4294967295
 800d2ac:	b01d      	add	sp, #116	@ 0x74
 800d2ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2b2:	89ab      	ldrh	r3, [r5, #12]
 800d2b4:	0598      	lsls	r0, r3, #22
 800d2b6:	d4f7      	bmi.n	800d2a8 <_vfiprintf_r+0x44>
 800d2b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d2ba:	f7fe f9f7 	bl	800b6ac <__retarget_lock_release_recursive>
 800d2be:	e7f3      	b.n	800d2a8 <_vfiprintf_r+0x44>
 800d2c0:	2300      	movs	r3, #0
 800d2c2:	9309      	str	r3, [sp, #36]	@ 0x24
 800d2c4:	2320      	movs	r3, #32
 800d2c6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d2ca:	f8cd 800c 	str.w	r8, [sp, #12]
 800d2ce:	2330      	movs	r3, #48	@ 0x30
 800d2d0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d480 <_vfiprintf_r+0x21c>
 800d2d4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d2d8:	f04f 0901 	mov.w	r9, #1
 800d2dc:	4623      	mov	r3, r4
 800d2de:	469a      	mov	sl, r3
 800d2e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d2e4:	b10a      	cbz	r2, 800d2ea <_vfiprintf_r+0x86>
 800d2e6:	2a25      	cmp	r2, #37	@ 0x25
 800d2e8:	d1f9      	bne.n	800d2de <_vfiprintf_r+0x7a>
 800d2ea:	ebba 0b04 	subs.w	fp, sl, r4
 800d2ee:	d00b      	beq.n	800d308 <_vfiprintf_r+0xa4>
 800d2f0:	465b      	mov	r3, fp
 800d2f2:	4622      	mov	r2, r4
 800d2f4:	4629      	mov	r1, r5
 800d2f6:	4630      	mov	r0, r6
 800d2f8:	f7ff ffa2 	bl	800d240 <__sfputs_r>
 800d2fc:	3001      	adds	r0, #1
 800d2fe:	f000 80a7 	beq.w	800d450 <_vfiprintf_r+0x1ec>
 800d302:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d304:	445a      	add	r2, fp
 800d306:	9209      	str	r2, [sp, #36]	@ 0x24
 800d308:	f89a 3000 	ldrb.w	r3, [sl]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	f000 809f 	beq.w	800d450 <_vfiprintf_r+0x1ec>
 800d312:	2300      	movs	r3, #0
 800d314:	f04f 32ff 	mov.w	r2, #4294967295
 800d318:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d31c:	f10a 0a01 	add.w	sl, sl, #1
 800d320:	9304      	str	r3, [sp, #16]
 800d322:	9307      	str	r3, [sp, #28]
 800d324:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d328:	931a      	str	r3, [sp, #104]	@ 0x68
 800d32a:	4654      	mov	r4, sl
 800d32c:	2205      	movs	r2, #5
 800d32e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d332:	4853      	ldr	r0, [pc, #332]	@ (800d480 <_vfiprintf_r+0x21c>)
 800d334:	f7f2 ff54 	bl	80001e0 <memchr>
 800d338:	9a04      	ldr	r2, [sp, #16]
 800d33a:	b9d8      	cbnz	r0, 800d374 <_vfiprintf_r+0x110>
 800d33c:	06d1      	lsls	r1, r2, #27
 800d33e:	bf44      	itt	mi
 800d340:	2320      	movmi	r3, #32
 800d342:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d346:	0713      	lsls	r3, r2, #28
 800d348:	bf44      	itt	mi
 800d34a:	232b      	movmi	r3, #43	@ 0x2b
 800d34c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d350:	f89a 3000 	ldrb.w	r3, [sl]
 800d354:	2b2a      	cmp	r3, #42	@ 0x2a
 800d356:	d015      	beq.n	800d384 <_vfiprintf_r+0x120>
 800d358:	9a07      	ldr	r2, [sp, #28]
 800d35a:	4654      	mov	r4, sl
 800d35c:	2000      	movs	r0, #0
 800d35e:	f04f 0c0a 	mov.w	ip, #10
 800d362:	4621      	mov	r1, r4
 800d364:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d368:	3b30      	subs	r3, #48	@ 0x30
 800d36a:	2b09      	cmp	r3, #9
 800d36c:	d94b      	bls.n	800d406 <_vfiprintf_r+0x1a2>
 800d36e:	b1b0      	cbz	r0, 800d39e <_vfiprintf_r+0x13a>
 800d370:	9207      	str	r2, [sp, #28]
 800d372:	e014      	b.n	800d39e <_vfiprintf_r+0x13a>
 800d374:	eba0 0308 	sub.w	r3, r0, r8
 800d378:	fa09 f303 	lsl.w	r3, r9, r3
 800d37c:	4313      	orrs	r3, r2
 800d37e:	9304      	str	r3, [sp, #16]
 800d380:	46a2      	mov	sl, r4
 800d382:	e7d2      	b.n	800d32a <_vfiprintf_r+0xc6>
 800d384:	9b03      	ldr	r3, [sp, #12]
 800d386:	1d19      	adds	r1, r3, #4
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	9103      	str	r1, [sp, #12]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	bfbb      	ittet	lt
 800d390:	425b      	neglt	r3, r3
 800d392:	f042 0202 	orrlt.w	r2, r2, #2
 800d396:	9307      	strge	r3, [sp, #28]
 800d398:	9307      	strlt	r3, [sp, #28]
 800d39a:	bfb8      	it	lt
 800d39c:	9204      	strlt	r2, [sp, #16]
 800d39e:	7823      	ldrb	r3, [r4, #0]
 800d3a0:	2b2e      	cmp	r3, #46	@ 0x2e
 800d3a2:	d10a      	bne.n	800d3ba <_vfiprintf_r+0x156>
 800d3a4:	7863      	ldrb	r3, [r4, #1]
 800d3a6:	2b2a      	cmp	r3, #42	@ 0x2a
 800d3a8:	d132      	bne.n	800d410 <_vfiprintf_r+0x1ac>
 800d3aa:	9b03      	ldr	r3, [sp, #12]
 800d3ac:	1d1a      	adds	r2, r3, #4
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	9203      	str	r2, [sp, #12]
 800d3b2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d3b6:	3402      	adds	r4, #2
 800d3b8:	9305      	str	r3, [sp, #20]
 800d3ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d490 <_vfiprintf_r+0x22c>
 800d3be:	7821      	ldrb	r1, [r4, #0]
 800d3c0:	2203      	movs	r2, #3
 800d3c2:	4650      	mov	r0, sl
 800d3c4:	f7f2 ff0c 	bl	80001e0 <memchr>
 800d3c8:	b138      	cbz	r0, 800d3da <_vfiprintf_r+0x176>
 800d3ca:	9b04      	ldr	r3, [sp, #16]
 800d3cc:	eba0 000a 	sub.w	r0, r0, sl
 800d3d0:	2240      	movs	r2, #64	@ 0x40
 800d3d2:	4082      	lsls	r2, r0
 800d3d4:	4313      	orrs	r3, r2
 800d3d6:	3401      	adds	r4, #1
 800d3d8:	9304      	str	r3, [sp, #16]
 800d3da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3de:	4829      	ldr	r0, [pc, #164]	@ (800d484 <_vfiprintf_r+0x220>)
 800d3e0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d3e4:	2206      	movs	r2, #6
 800d3e6:	f7f2 fefb 	bl	80001e0 <memchr>
 800d3ea:	2800      	cmp	r0, #0
 800d3ec:	d03f      	beq.n	800d46e <_vfiprintf_r+0x20a>
 800d3ee:	4b26      	ldr	r3, [pc, #152]	@ (800d488 <_vfiprintf_r+0x224>)
 800d3f0:	bb1b      	cbnz	r3, 800d43a <_vfiprintf_r+0x1d6>
 800d3f2:	9b03      	ldr	r3, [sp, #12]
 800d3f4:	3307      	adds	r3, #7
 800d3f6:	f023 0307 	bic.w	r3, r3, #7
 800d3fa:	3308      	adds	r3, #8
 800d3fc:	9303      	str	r3, [sp, #12]
 800d3fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d400:	443b      	add	r3, r7
 800d402:	9309      	str	r3, [sp, #36]	@ 0x24
 800d404:	e76a      	b.n	800d2dc <_vfiprintf_r+0x78>
 800d406:	fb0c 3202 	mla	r2, ip, r2, r3
 800d40a:	460c      	mov	r4, r1
 800d40c:	2001      	movs	r0, #1
 800d40e:	e7a8      	b.n	800d362 <_vfiprintf_r+0xfe>
 800d410:	2300      	movs	r3, #0
 800d412:	3401      	adds	r4, #1
 800d414:	9305      	str	r3, [sp, #20]
 800d416:	4619      	mov	r1, r3
 800d418:	f04f 0c0a 	mov.w	ip, #10
 800d41c:	4620      	mov	r0, r4
 800d41e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d422:	3a30      	subs	r2, #48	@ 0x30
 800d424:	2a09      	cmp	r2, #9
 800d426:	d903      	bls.n	800d430 <_vfiprintf_r+0x1cc>
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d0c6      	beq.n	800d3ba <_vfiprintf_r+0x156>
 800d42c:	9105      	str	r1, [sp, #20]
 800d42e:	e7c4      	b.n	800d3ba <_vfiprintf_r+0x156>
 800d430:	fb0c 2101 	mla	r1, ip, r1, r2
 800d434:	4604      	mov	r4, r0
 800d436:	2301      	movs	r3, #1
 800d438:	e7f0      	b.n	800d41c <_vfiprintf_r+0x1b8>
 800d43a:	ab03      	add	r3, sp, #12
 800d43c:	9300      	str	r3, [sp, #0]
 800d43e:	462a      	mov	r2, r5
 800d440:	4b12      	ldr	r3, [pc, #72]	@ (800d48c <_vfiprintf_r+0x228>)
 800d442:	a904      	add	r1, sp, #16
 800d444:	4630      	mov	r0, r6
 800d446:	f7fd fbc5 	bl	800abd4 <_printf_float>
 800d44a:	4607      	mov	r7, r0
 800d44c:	1c78      	adds	r0, r7, #1
 800d44e:	d1d6      	bne.n	800d3fe <_vfiprintf_r+0x19a>
 800d450:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d452:	07d9      	lsls	r1, r3, #31
 800d454:	d405      	bmi.n	800d462 <_vfiprintf_r+0x1fe>
 800d456:	89ab      	ldrh	r3, [r5, #12]
 800d458:	059a      	lsls	r2, r3, #22
 800d45a:	d402      	bmi.n	800d462 <_vfiprintf_r+0x1fe>
 800d45c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d45e:	f7fe f925 	bl	800b6ac <__retarget_lock_release_recursive>
 800d462:	89ab      	ldrh	r3, [r5, #12]
 800d464:	065b      	lsls	r3, r3, #25
 800d466:	f53f af1f 	bmi.w	800d2a8 <_vfiprintf_r+0x44>
 800d46a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d46c:	e71e      	b.n	800d2ac <_vfiprintf_r+0x48>
 800d46e:	ab03      	add	r3, sp, #12
 800d470:	9300      	str	r3, [sp, #0]
 800d472:	462a      	mov	r2, r5
 800d474:	4b05      	ldr	r3, [pc, #20]	@ (800d48c <_vfiprintf_r+0x228>)
 800d476:	a904      	add	r1, sp, #16
 800d478:	4630      	mov	r0, r6
 800d47a:	f7fd fe43 	bl	800b104 <_printf_i>
 800d47e:	e7e4      	b.n	800d44a <_vfiprintf_r+0x1e6>
 800d480:	08010ace 	.word	0x08010ace
 800d484:	08010ad8 	.word	0x08010ad8
 800d488:	0800abd5 	.word	0x0800abd5
 800d48c:	0800d241 	.word	0x0800d241
 800d490:	08010ad4 	.word	0x08010ad4

0800d494 <__swbuf_r>:
 800d494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d496:	460e      	mov	r6, r1
 800d498:	4614      	mov	r4, r2
 800d49a:	4605      	mov	r5, r0
 800d49c:	b118      	cbz	r0, 800d4a6 <__swbuf_r+0x12>
 800d49e:	6a03      	ldr	r3, [r0, #32]
 800d4a0:	b90b      	cbnz	r3, 800d4a6 <__swbuf_r+0x12>
 800d4a2:	f7fd ffd9 	bl	800b458 <__sinit>
 800d4a6:	69a3      	ldr	r3, [r4, #24]
 800d4a8:	60a3      	str	r3, [r4, #8]
 800d4aa:	89a3      	ldrh	r3, [r4, #12]
 800d4ac:	071a      	lsls	r2, r3, #28
 800d4ae:	d501      	bpl.n	800d4b4 <__swbuf_r+0x20>
 800d4b0:	6923      	ldr	r3, [r4, #16]
 800d4b2:	b943      	cbnz	r3, 800d4c6 <__swbuf_r+0x32>
 800d4b4:	4621      	mov	r1, r4
 800d4b6:	4628      	mov	r0, r5
 800d4b8:	f000 f82a 	bl	800d510 <__swsetup_r>
 800d4bc:	b118      	cbz	r0, 800d4c6 <__swbuf_r+0x32>
 800d4be:	f04f 37ff 	mov.w	r7, #4294967295
 800d4c2:	4638      	mov	r0, r7
 800d4c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d4c6:	6823      	ldr	r3, [r4, #0]
 800d4c8:	6922      	ldr	r2, [r4, #16]
 800d4ca:	1a98      	subs	r0, r3, r2
 800d4cc:	6963      	ldr	r3, [r4, #20]
 800d4ce:	b2f6      	uxtb	r6, r6
 800d4d0:	4283      	cmp	r3, r0
 800d4d2:	4637      	mov	r7, r6
 800d4d4:	dc05      	bgt.n	800d4e2 <__swbuf_r+0x4e>
 800d4d6:	4621      	mov	r1, r4
 800d4d8:	4628      	mov	r0, r5
 800d4da:	f7ff fda7 	bl	800d02c <_fflush_r>
 800d4de:	2800      	cmp	r0, #0
 800d4e0:	d1ed      	bne.n	800d4be <__swbuf_r+0x2a>
 800d4e2:	68a3      	ldr	r3, [r4, #8]
 800d4e4:	3b01      	subs	r3, #1
 800d4e6:	60a3      	str	r3, [r4, #8]
 800d4e8:	6823      	ldr	r3, [r4, #0]
 800d4ea:	1c5a      	adds	r2, r3, #1
 800d4ec:	6022      	str	r2, [r4, #0]
 800d4ee:	701e      	strb	r6, [r3, #0]
 800d4f0:	6962      	ldr	r2, [r4, #20]
 800d4f2:	1c43      	adds	r3, r0, #1
 800d4f4:	429a      	cmp	r2, r3
 800d4f6:	d004      	beq.n	800d502 <__swbuf_r+0x6e>
 800d4f8:	89a3      	ldrh	r3, [r4, #12]
 800d4fa:	07db      	lsls	r3, r3, #31
 800d4fc:	d5e1      	bpl.n	800d4c2 <__swbuf_r+0x2e>
 800d4fe:	2e0a      	cmp	r6, #10
 800d500:	d1df      	bne.n	800d4c2 <__swbuf_r+0x2e>
 800d502:	4621      	mov	r1, r4
 800d504:	4628      	mov	r0, r5
 800d506:	f7ff fd91 	bl	800d02c <_fflush_r>
 800d50a:	2800      	cmp	r0, #0
 800d50c:	d0d9      	beq.n	800d4c2 <__swbuf_r+0x2e>
 800d50e:	e7d6      	b.n	800d4be <__swbuf_r+0x2a>

0800d510 <__swsetup_r>:
 800d510:	b538      	push	{r3, r4, r5, lr}
 800d512:	4b29      	ldr	r3, [pc, #164]	@ (800d5b8 <__swsetup_r+0xa8>)
 800d514:	4605      	mov	r5, r0
 800d516:	6818      	ldr	r0, [r3, #0]
 800d518:	460c      	mov	r4, r1
 800d51a:	b118      	cbz	r0, 800d524 <__swsetup_r+0x14>
 800d51c:	6a03      	ldr	r3, [r0, #32]
 800d51e:	b90b      	cbnz	r3, 800d524 <__swsetup_r+0x14>
 800d520:	f7fd ff9a 	bl	800b458 <__sinit>
 800d524:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d528:	0719      	lsls	r1, r3, #28
 800d52a:	d422      	bmi.n	800d572 <__swsetup_r+0x62>
 800d52c:	06da      	lsls	r2, r3, #27
 800d52e:	d407      	bmi.n	800d540 <__swsetup_r+0x30>
 800d530:	2209      	movs	r2, #9
 800d532:	602a      	str	r2, [r5, #0]
 800d534:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d538:	81a3      	strh	r3, [r4, #12]
 800d53a:	f04f 30ff 	mov.w	r0, #4294967295
 800d53e:	e033      	b.n	800d5a8 <__swsetup_r+0x98>
 800d540:	0758      	lsls	r0, r3, #29
 800d542:	d512      	bpl.n	800d56a <__swsetup_r+0x5a>
 800d544:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d546:	b141      	cbz	r1, 800d55a <__swsetup_r+0x4a>
 800d548:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d54c:	4299      	cmp	r1, r3
 800d54e:	d002      	beq.n	800d556 <__swsetup_r+0x46>
 800d550:	4628      	mov	r0, r5
 800d552:	f7fe ff15 	bl	800c380 <_free_r>
 800d556:	2300      	movs	r3, #0
 800d558:	6363      	str	r3, [r4, #52]	@ 0x34
 800d55a:	89a3      	ldrh	r3, [r4, #12]
 800d55c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d560:	81a3      	strh	r3, [r4, #12]
 800d562:	2300      	movs	r3, #0
 800d564:	6063      	str	r3, [r4, #4]
 800d566:	6923      	ldr	r3, [r4, #16]
 800d568:	6023      	str	r3, [r4, #0]
 800d56a:	89a3      	ldrh	r3, [r4, #12]
 800d56c:	f043 0308 	orr.w	r3, r3, #8
 800d570:	81a3      	strh	r3, [r4, #12]
 800d572:	6923      	ldr	r3, [r4, #16]
 800d574:	b94b      	cbnz	r3, 800d58a <__swsetup_r+0x7a>
 800d576:	89a3      	ldrh	r3, [r4, #12]
 800d578:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d57c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d580:	d003      	beq.n	800d58a <__swsetup_r+0x7a>
 800d582:	4621      	mov	r1, r4
 800d584:	4628      	mov	r0, r5
 800d586:	f000 f883 	bl	800d690 <__smakebuf_r>
 800d58a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d58e:	f013 0201 	ands.w	r2, r3, #1
 800d592:	d00a      	beq.n	800d5aa <__swsetup_r+0x9a>
 800d594:	2200      	movs	r2, #0
 800d596:	60a2      	str	r2, [r4, #8]
 800d598:	6962      	ldr	r2, [r4, #20]
 800d59a:	4252      	negs	r2, r2
 800d59c:	61a2      	str	r2, [r4, #24]
 800d59e:	6922      	ldr	r2, [r4, #16]
 800d5a0:	b942      	cbnz	r2, 800d5b4 <__swsetup_r+0xa4>
 800d5a2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d5a6:	d1c5      	bne.n	800d534 <__swsetup_r+0x24>
 800d5a8:	bd38      	pop	{r3, r4, r5, pc}
 800d5aa:	0799      	lsls	r1, r3, #30
 800d5ac:	bf58      	it	pl
 800d5ae:	6962      	ldrpl	r2, [r4, #20]
 800d5b0:	60a2      	str	r2, [r4, #8]
 800d5b2:	e7f4      	b.n	800d59e <__swsetup_r+0x8e>
 800d5b4:	2000      	movs	r0, #0
 800d5b6:	e7f7      	b.n	800d5a8 <__swsetup_r+0x98>
 800d5b8:	2000001c 	.word	0x2000001c

0800d5bc <_raise_r>:
 800d5bc:	291f      	cmp	r1, #31
 800d5be:	b538      	push	{r3, r4, r5, lr}
 800d5c0:	4605      	mov	r5, r0
 800d5c2:	460c      	mov	r4, r1
 800d5c4:	d904      	bls.n	800d5d0 <_raise_r+0x14>
 800d5c6:	2316      	movs	r3, #22
 800d5c8:	6003      	str	r3, [r0, #0]
 800d5ca:	f04f 30ff 	mov.w	r0, #4294967295
 800d5ce:	bd38      	pop	{r3, r4, r5, pc}
 800d5d0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d5d2:	b112      	cbz	r2, 800d5da <_raise_r+0x1e>
 800d5d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d5d8:	b94b      	cbnz	r3, 800d5ee <_raise_r+0x32>
 800d5da:	4628      	mov	r0, r5
 800d5dc:	f000 f830 	bl	800d640 <_getpid_r>
 800d5e0:	4622      	mov	r2, r4
 800d5e2:	4601      	mov	r1, r0
 800d5e4:	4628      	mov	r0, r5
 800d5e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d5ea:	f000 b817 	b.w	800d61c <_kill_r>
 800d5ee:	2b01      	cmp	r3, #1
 800d5f0:	d00a      	beq.n	800d608 <_raise_r+0x4c>
 800d5f2:	1c59      	adds	r1, r3, #1
 800d5f4:	d103      	bne.n	800d5fe <_raise_r+0x42>
 800d5f6:	2316      	movs	r3, #22
 800d5f8:	6003      	str	r3, [r0, #0]
 800d5fa:	2001      	movs	r0, #1
 800d5fc:	e7e7      	b.n	800d5ce <_raise_r+0x12>
 800d5fe:	2100      	movs	r1, #0
 800d600:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d604:	4620      	mov	r0, r4
 800d606:	4798      	blx	r3
 800d608:	2000      	movs	r0, #0
 800d60a:	e7e0      	b.n	800d5ce <_raise_r+0x12>

0800d60c <raise>:
 800d60c:	4b02      	ldr	r3, [pc, #8]	@ (800d618 <raise+0xc>)
 800d60e:	4601      	mov	r1, r0
 800d610:	6818      	ldr	r0, [r3, #0]
 800d612:	f7ff bfd3 	b.w	800d5bc <_raise_r>
 800d616:	bf00      	nop
 800d618:	2000001c 	.word	0x2000001c

0800d61c <_kill_r>:
 800d61c:	b538      	push	{r3, r4, r5, lr}
 800d61e:	4d07      	ldr	r5, [pc, #28]	@ (800d63c <_kill_r+0x20>)
 800d620:	2300      	movs	r3, #0
 800d622:	4604      	mov	r4, r0
 800d624:	4608      	mov	r0, r1
 800d626:	4611      	mov	r1, r2
 800d628:	602b      	str	r3, [r5, #0]
 800d62a:	f7f8 fddb 	bl	80061e4 <_kill>
 800d62e:	1c43      	adds	r3, r0, #1
 800d630:	d102      	bne.n	800d638 <_kill_r+0x1c>
 800d632:	682b      	ldr	r3, [r5, #0]
 800d634:	b103      	cbz	r3, 800d638 <_kill_r+0x1c>
 800d636:	6023      	str	r3, [r4, #0]
 800d638:	bd38      	pop	{r3, r4, r5, pc}
 800d63a:	bf00      	nop
 800d63c:	200082b8 	.word	0x200082b8

0800d640 <_getpid_r>:
 800d640:	f7f8 bdc8 	b.w	80061d4 <_getpid>

0800d644 <__swhatbuf_r>:
 800d644:	b570      	push	{r4, r5, r6, lr}
 800d646:	460c      	mov	r4, r1
 800d648:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d64c:	2900      	cmp	r1, #0
 800d64e:	b096      	sub	sp, #88	@ 0x58
 800d650:	4615      	mov	r5, r2
 800d652:	461e      	mov	r6, r3
 800d654:	da0d      	bge.n	800d672 <__swhatbuf_r+0x2e>
 800d656:	89a3      	ldrh	r3, [r4, #12]
 800d658:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d65c:	f04f 0100 	mov.w	r1, #0
 800d660:	bf14      	ite	ne
 800d662:	2340      	movne	r3, #64	@ 0x40
 800d664:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d668:	2000      	movs	r0, #0
 800d66a:	6031      	str	r1, [r6, #0]
 800d66c:	602b      	str	r3, [r5, #0]
 800d66e:	b016      	add	sp, #88	@ 0x58
 800d670:	bd70      	pop	{r4, r5, r6, pc}
 800d672:	466a      	mov	r2, sp
 800d674:	f000 f848 	bl	800d708 <_fstat_r>
 800d678:	2800      	cmp	r0, #0
 800d67a:	dbec      	blt.n	800d656 <__swhatbuf_r+0x12>
 800d67c:	9901      	ldr	r1, [sp, #4]
 800d67e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d682:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d686:	4259      	negs	r1, r3
 800d688:	4159      	adcs	r1, r3
 800d68a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d68e:	e7eb      	b.n	800d668 <__swhatbuf_r+0x24>

0800d690 <__smakebuf_r>:
 800d690:	898b      	ldrh	r3, [r1, #12]
 800d692:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d694:	079d      	lsls	r5, r3, #30
 800d696:	4606      	mov	r6, r0
 800d698:	460c      	mov	r4, r1
 800d69a:	d507      	bpl.n	800d6ac <__smakebuf_r+0x1c>
 800d69c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d6a0:	6023      	str	r3, [r4, #0]
 800d6a2:	6123      	str	r3, [r4, #16]
 800d6a4:	2301      	movs	r3, #1
 800d6a6:	6163      	str	r3, [r4, #20]
 800d6a8:	b003      	add	sp, #12
 800d6aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d6ac:	ab01      	add	r3, sp, #4
 800d6ae:	466a      	mov	r2, sp
 800d6b0:	f7ff ffc8 	bl	800d644 <__swhatbuf_r>
 800d6b4:	9f00      	ldr	r7, [sp, #0]
 800d6b6:	4605      	mov	r5, r0
 800d6b8:	4639      	mov	r1, r7
 800d6ba:	4630      	mov	r0, r6
 800d6bc:	f7fe fed4 	bl	800c468 <_malloc_r>
 800d6c0:	b948      	cbnz	r0, 800d6d6 <__smakebuf_r+0x46>
 800d6c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6c6:	059a      	lsls	r2, r3, #22
 800d6c8:	d4ee      	bmi.n	800d6a8 <__smakebuf_r+0x18>
 800d6ca:	f023 0303 	bic.w	r3, r3, #3
 800d6ce:	f043 0302 	orr.w	r3, r3, #2
 800d6d2:	81a3      	strh	r3, [r4, #12]
 800d6d4:	e7e2      	b.n	800d69c <__smakebuf_r+0xc>
 800d6d6:	89a3      	ldrh	r3, [r4, #12]
 800d6d8:	6020      	str	r0, [r4, #0]
 800d6da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d6de:	81a3      	strh	r3, [r4, #12]
 800d6e0:	9b01      	ldr	r3, [sp, #4]
 800d6e2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d6e6:	b15b      	cbz	r3, 800d700 <__smakebuf_r+0x70>
 800d6e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d6ec:	4630      	mov	r0, r6
 800d6ee:	f000 f81d 	bl	800d72c <_isatty_r>
 800d6f2:	b128      	cbz	r0, 800d700 <__smakebuf_r+0x70>
 800d6f4:	89a3      	ldrh	r3, [r4, #12]
 800d6f6:	f023 0303 	bic.w	r3, r3, #3
 800d6fa:	f043 0301 	orr.w	r3, r3, #1
 800d6fe:	81a3      	strh	r3, [r4, #12]
 800d700:	89a3      	ldrh	r3, [r4, #12]
 800d702:	431d      	orrs	r5, r3
 800d704:	81a5      	strh	r5, [r4, #12]
 800d706:	e7cf      	b.n	800d6a8 <__smakebuf_r+0x18>

0800d708 <_fstat_r>:
 800d708:	b538      	push	{r3, r4, r5, lr}
 800d70a:	4d07      	ldr	r5, [pc, #28]	@ (800d728 <_fstat_r+0x20>)
 800d70c:	2300      	movs	r3, #0
 800d70e:	4604      	mov	r4, r0
 800d710:	4608      	mov	r0, r1
 800d712:	4611      	mov	r1, r2
 800d714:	602b      	str	r3, [r5, #0]
 800d716:	f7f8 fdc5 	bl	80062a4 <_fstat>
 800d71a:	1c43      	adds	r3, r0, #1
 800d71c:	d102      	bne.n	800d724 <_fstat_r+0x1c>
 800d71e:	682b      	ldr	r3, [r5, #0]
 800d720:	b103      	cbz	r3, 800d724 <_fstat_r+0x1c>
 800d722:	6023      	str	r3, [r4, #0]
 800d724:	bd38      	pop	{r3, r4, r5, pc}
 800d726:	bf00      	nop
 800d728:	200082b8 	.word	0x200082b8

0800d72c <_isatty_r>:
 800d72c:	b538      	push	{r3, r4, r5, lr}
 800d72e:	4d06      	ldr	r5, [pc, #24]	@ (800d748 <_isatty_r+0x1c>)
 800d730:	2300      	movs	r3, #0
 800d732:	4604      	mov	r4, r0
 800d734:	4608      	mov	r0, r1
 800d736:	602b      	str	r3, [r5, #0]
 800d738:	f7f8 fdc4 	bl	80062c4 <_isatty>
 800d73c:	1c43      	adds	r3, r0, #1
 800d73e:	d102      	bne.n	800d746 <_isatty_r+0x1a>
 800d740:	682b      	ldr	r3, [r5, #0]
 800d742:	b103      	cbz	r3, 800d746 <_isatty_r+0x1a>
 800d744:	6023      	str	r3, [r4, #0]
 800d746:	bd38      	pop	{r3, r4, r5, pc}
 800d748:	200082b8 	.word	0x200082b8
 800d74c:	00000000 	.word	0x00000000

0800d750 <log>:
 800d750:	b538      	push	{r3, r4, r5, lr}
 800d752:	ed2d 8b02 	vpush	{d8}
 800d756:	ec55 4b10 	vmov	r4, r5, d0
 800d75a:	f000 fac9 	bl	800dcf0 <__ieee754_log>
 800d75e:	4622      	mov	r2, r4
 800d760:	462b      	mov	r3, r5
 800d762:	4620      	mov	r0, r4
 800d764:	4629      	mov	r1, r5
 800d766:	eeb0 8a40 	vmov.f32	s16, s0
 800d76a:	eef0 8a60 	vmov.f32	s17, s1
 800d76e:	f7f3 f9e5 	bl	8000b3c <__aeabi_dcmpun>
 800d772:	b998      	cbnz	r0, 800d79c <log+0x4c>
 800d774:	2200      	movs	r2, #0
 800d776:	2300      	movs	r3, #0
 800d778:	4620      	mov	r0, r4
 800d77a:	4629      	mov	r1, r5
 800d77c:	f7f3 f9d4 	bl	8000b28 <__aeabi_dcmpgt>
 800d780:	b960      	cbnz	r0, 800d79c <log+0x4c>
 800d782:	2200      	movs	r2, #0
 800d784:	2300      	movs	r3, #0
 800d786:	4620      	mov	r0, r4
 800d788:	4629      	mov	r1, r5
 800d78a:	f7f3 f9a5 	bl	8000ad8 <__aeabi_dcmpeq>
 800d78e:	b160      	cbz	r0, 800d7aa <log+0x5a>
 800d790:	f7fd ff60 	bl	800b654 <__errno>
 800d794:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 800d7c0 <log+0x70>
 800d798:	2322      	movs	r3, #34	@ 0x22
 800d79a:	6003      	str	r3, [r0, #0]
 800d79c:	eeb0 0a48 	vmov.f32	s0, s16
 800d7a0:	eef0 0a68 	vmov.f32	s1, s17
 800d7a4:	ecbd 8b02 	vpop	{d8}
 800d7a8:	bd38      	pop	{r3, r4, r5, pc}
 800d7aa:	f7fd ff53 	bl	800b654 <__errno>
 800d7ae:	ecbd 8b02 	vpop	{d8}
 800d7b2:	2321      	movs	r3, #33	@ 0x21
 800d7b4:	6003      	str	r3, [r0, #0]
 800d7b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d7ba:	4803      	ldr	r0, [pc, #12]	@ (800d7c8 <log+0x78>)
 800d7bc:	f000 b8f8 	b.w	800d9b0 <nan>
 800d7c0:	00000000 	.word	0x00000000
 800d7c4:	fff00000 	.word	0xfff00000
 800d7c8:	08010b24 	.word	0x08010b24

0800d7cc <logf>:
 800d7cc:	b508      	push	{r3, lr}
 800d7ce:	ed2d 8b02 	vpush	{d8}
 800d7d2:	eeb0 8a40 	vmov.f32	s16, s0
 800d7d6:	f000 fc41 	bl	800e05c <__ieee754_logf>
 800d7da:	eeb4 8a48 	vcmp.f32	s16, s16
 800d7de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7e2:	d60f      	bvs.n	800d804 <logf+0x38>
 800d7e4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800d7e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7ec:	dc0a      	bgt.n	800d804 <logf+0x38>
 800d7ee:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800d7f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7f6:	d108      	bne.n	800d80a <logf+0x3e>
 800d7f8:	f7fd ff2c 	bl	800b654 <__errno>
 800d7fc:	2322      	movs	r3, #34	@ 0x22
 800d7fe:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800d820 <logf+0x54>
 800d802:	6003      	str	r3, [r0, #0]
 800d804:	ecbd 8b02 	vpop	{d8}
 800d808:	bd08      	pop	{r3, pc}
 800d80a:	f7fd ff23 	bl	800b654 <__errno>
 800d80e:	ecbd 8b02 	vpop	{d8}
 800d812:	2321      	movs	r3, #33	@ 0x21
 800d814:	6003      	str	r3, [r0, #0]
 800d816:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800d81a:	4802      	ldr	r0, [pc, #8]	@ (800d824 <logf+0x58>)
 800d81c:	f000 ba02 	b.w	800dc24 <nanf>
 800d820:	ff800000 	.word	0xff800000
 800d824:	08010b24 	.word	0x08010b24

0800d828 <powf>:
 800d828:	b508      	push	{r3, lr}
 800d82a:	ed2d 8b04 	vpush	{d8-d9}
 800d82e:	eeb0 8a60 	vmov.f32	s16, s1
 800d832:	eeb0 9a40 	vmov.f32	s18, s0
 800d836:	f000 fd03 	bl	800e240 <__ieee754_powf>
 800d83a:	eeb4 8a48 	vcmp.f32	s16, s16
 800d83e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d842:	eef0 8a40 	vmov.f32	s17, s0
 800d846:	d63e      	bvs.n	800d8c6 <powf+0x9e>
 800d848:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800d84c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d850:	d112      	bne.n	800d878 <powf+0x50>
 800d852:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800d856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d85a:	d039      	beq.n	800d8d0 <powf+0xa8>
 800d85c:	eeb0 0a48 	vmov.f32	s0, s16
 800d860:	f000 f8ae 	bl	800d9c0 <finitef>
 800d864:	b378      	cbz	r0, 800d8c6 <powf+0x9e>
 800d866:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800d86a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d86e:	d52a      	bpl.n	800d8c6 <powf+0x9e>
 800d870:	f7fd fef0 	bl	800b654 <__errno>
 800d874:	2322      	movs	r3, #34	@ 0x22
 800d876:	e014      	b.n	800d8a2 <powf+0x7a>
 800d878:	f000 f8a2 	bl	800d9c0 <finitef>
 800d87c:	b998      	cbnz	r0, 800d8a6 <powf+0x7e>
 800d87e:	eeb0 0a49 	vmov.f32	s0, s18
 800d882:	f000 f89d 	bl	800d9c0 <finitef>
 800d886:	b170      	cbz	r0, 800d8a6 <powf+0x7e>
 800d888:	eeb0 0a48 	vmov.f32	s0, s16
 800d88c:	f000 f898 	bl	800d9c0 <finitef>
 800d890:	b148      	cbz	r0, 800d8a6 <powf+0x7e>
 800d892:	eef4 8a68 	vcmp.f32	s17, s17
 800d896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d89a:	d7e9      	bvc.n	800d870 <powf+0x48>
 800d89c:	f7fd feda 	bl	800b654 <__errno>
 800d8a0:	2321      	movs	r3, #33	@ 0x21
 800d8a2:	6003      	str	r3, [r0, #0]
 800d8a4:	e00f      	b.n	800d8c6 <powf+0x9e>
 800d8a6:	eef5 8a40 	vcmp.f32	s17, #0.0
 800d8aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8ae:	d10a      	bne.n	800d8c6 <powf+0x9e>
 800d8b0:	eeb0 0a49 	vmov.f32	s0, s18
 800d8b4:	f000 f884 	bl	800d9c0 <finitef>
 800d8b8:	b128      	cbz	r0, 800d8c6 <powf+0x9e>
 800d8ba:	eeb0 0a48 	vmov.f32	s0, s16
 800d8be:	f000 f87f 	bl	800d9c0 <finitef>
 800d8c2:	2800      	cmp	r0, #0
 800d8c4:	d1d4      	bne.n	800d870 <powf+0x48>
 800d8c6:	eeb0 0a68 	vmov.f32	s0, s17
 800d8ca:	ecbd 8b04 	vpop	{d8-d9}
 800d8ce:	bd08      	pop	{r3, pc}
 800d8d0:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800d8d4:	e7f7      	b.n	800d8c6 <powf+0x9e>
	...

0800d8d8 <tanhf>:
 800d8d8:	b538      	push	{r3, r4, r5, lr}
 800d8da:	ee10 5a10 	vmov	r5, s0
 800d8de:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800d8e2:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800d8e6:	ed2d 8b02 	vpush	{d8}
 800d8ea:	eef0 7a40 	vmov.f32	s15, s0
 800d8ee:	d30f      	bcc.n	800d910 <tanhf+0x38>
 800d8f0:	4b2a      	ldr	r3, [pc, #168]	@ (800d99c <tanhf+0xc4>)
 800d8f2:	edd3 6a00 	vldr	s13, [r3]
 800d8f6:	ed93 7a00 	vldr	s14, [r3]
 800d8fa:	ee86 0aa7 	vdiv.f32	s0, s13, s15
 800d8fe:	2d00      	cmp	r5, #0
 800d900:	bfac      	ite	ge
 800d902:	ee30 0a07 	vaddge.f32	s0, s0, s14
 800d906:	ee30 0a47 	vsublt.f32	s0, s0, s14
 800d90a:	ecbd 8b02 	vpop	{d8}
 800d90e:	bd38      	pop	{r3, r4, r5, pc}
 800d910:	4a23      	ldr	r2, [pc, #140]	@ (800d9a0 <tanhf+0xc8>)
 800d912:	4293      	cmp	r3, r2
 800d914:	d839      	bhi.n	800d98a <tanhf+0xb2>
 800d916:	f1b3 5f10 	cmp.w	r3, #603979776	@ 0x24000000
 800d91a:	d207      	bcs.n	800d92c <tanhf+0x54>
 800d91c:	4b1f      	ldr	r3, [pc, #124]	@ (800d99c <tanhf+0xc4>)
 800d91e:	ed93 0a00 	vldr	s0, [r3]
 800d922:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d926:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d92a:	e7ee      	b.n	800d90a <tanhf+0x32>
 800d92c:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800d930:	4c1c      	ldr	r4, [pc, #112]	@ (800d9a4 <tanhf+0xcc>)
 800d932:	d319      	bcc.n	800d968 <tanhf+0x90>
 800d934:	f000 ff52 	bl	800e7dc <fabsf>
 800d938:	edd4 7a00 	vldr	s15, [r4]
 800d93c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d940:	f000 f848 	bl	800d9d4 <expm1f>
 800d944:	4b15      	ldr	r3, [pc, #84]	@ (800d99c <tanhf+0xc4>)
 800d946:	edd3 7a00 	vldr	s15, [r3]
 800d94a:	ed94 6a00 	vldr	s12, [r4]
 800d94e:	ed94 7a00 	vldr	s14, [r4]
 800d952:	ee37 7a00 	vadd.f32	s14, s14, s0
 800d956:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800d95a:	ee37 0ae6 	vsub.f32	s0, s15, s13
 800d95e:	2d00      	cmp	r5, #0
 800d960:	bfb8      	it	lt
 800d962:	eeb1 0a40 	vneglt.f32	s0, s0
 800d966:	e7d0      	b.n	800d90a <tanhf+0x32>
 800d968:	ed94 8a00 	vldr	s16, [r4]
 800d96c:	f000 ff36 	bl	800e7dc <fabsf>
 800d970:	ee28 0a40 	vnmul.f32	s0, s16, s0
 800d974:	f000 f82e 	bl	800d9d4 <expm1f>
 800d978:	edd4 7a00 	vldr	s15, [r4]
 800d97c:	ee77 7a80 	vadd.f32	s15, s15, s0
 800d980:	eeb1 7a40 	vneg.f32	s14, s0
 800d984:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800d988:	e7e9      	b.n	800d95e <tanhf+0x86>
 800d98a:	4b04      	ldr	r3, [pc, #16]	@ (800d99c <tanhf+0xc4>)
 800d98c:	ed93 0a00 	vldr	s0, [r3]
 800d990:	4b05      	ldr	r3, [pc, #20]	@ (800d9a8 <tanhf+0xd0>)
 800d992:	edd3 7a00 	vldr	s15, [r3]
 800d996:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d99a:	e7e0      	b.n	800d95e <tanhf+0x86>
 800d99c:	08010d34 	.word	0x08010d34
 800d9a0:	41afffff 	.word	0x41afffff
 800d9a4:	08010d30 	.word	0x08010d30
 800d9a8:	08010d2c 	.word	0x08010d2c
 800d9ac:	00000000 	.word	0x00000000

0800d9b0 <nan>:
 800d9b0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d9b8 <nan+0x8>
 800d9b4:	4770      	bx	lr
 800d9b6:	bf00      	nop
 800d9b8:	00000000 	.word	0x00000000
 800d9bc:	7ff80000 	.word	0x7ff80000

0800d9c0 <finitef>:
 800d9c0:	ee10 3a10 	vmov	r3, s0
 800d9c4:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800d9c8:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800d9cc:	bfac      	ite	ge
 800d9ce:	2000      	movge	r0, #0
 800d9d0:	2001      	movlt	r0, #1
 800d9d2:	4770      	bx	lr

0800d9d4 <expm1f>:
 800d9d4:	ee10 3a10 	vmov	r3, s0
 800d9d8:	4a83      	ldr	r2, [pc, #524]	@ (800dbe8 <expm1f+0x214>)
 800d9da:	f003 4000 	and.w	r0, r3, #2147483648	@ 0x80000000
 800d9de:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d9e2:	4293      	cmp	r3, r2
 800d9e4:	d91f      	bls.n	800da26 <expm1f+0x52>
 800d9e6:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800d9ea:	d902      	bls.n	800d9f2 <expm1f+0x1e>
 800d9ec:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d9f0:	4770      	bx	lr
 800d9f2:	d106      	bne.n	800da02 <expm1f+0x2e>
 800d9f4:	2800      	cmp	r0, #0
 800d9f6:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 800d9fa:	bf18      	it	ne
 800d9fc:	eeb0 0a67 	vmovne.f32	s0, s15
 800da00:	4770      	bx	lr
 800da02:	b920      	cbnz	r0, 800da0e <expm1f+0x3a>
 800da04:	4a79      	ldr	r2, [pc, #484]	@ (800dbec <expm1f+0x218>)
 800da06:	4293      	cmp	r3, r2
 800da08:	d963      	bls.n	800dad2 <expm1f+0xfe>
 800da0a:	f000 b96b 	b.w	800dce4 <__math_oflowf>
 800da0e:	eddf 7a78 	vldr	s15, [pc, #480]	@ 800dbf0 <expm1f+0x21c>
 800da12:	ee70 7a27 	vadd.f32	s15, s0, s15
 800da16:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800da1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da1e:	d551      	bpl.n	800dac4 <expm1f+0xf0>
 800da20:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 800da24:	4770      	bx	lr
 800da26:	4a73      	ldr	r2, [pc, #460]	@ (800dbf4 <expm1f+0x220>)
 800da28:	4293      	cmp	r3, r2
 800da2a:	d972      	bls.n	800db12 <expm1f+0x13e>
 800da2c:	4a72      	ldr	r2, [pc, #456]	@ (800dbf8 <expm1f+0x224>)
 800da2e:	4293      	cmp	r3, r2
 800da30:	d868      	bhi.n	800db04 <expm1f+0x130>
 800da32:	ed9f 7a72 	vldr	s14, [pc, #456]	@ 800dbfc <expm1f+0x228>
 800da36:	2800      	cmp	r0, #0
 800da38:	d13d      	bne.n	800dab6 <expm1f+0xe2>
 800da3a:	ee30 7a47 	vsub.f32	s14, s0, s14
 800da3e:	eddf 6a70 	vldr	s13, [pc, #448]	@ 800dc00 <expm1f+0x22c>
 800da42:	2301      	movs	r3, #1
 800da44:	ee37 0a66 	vsub.f32	s0, s14, s13
 800da48:	ee77 7a40 	vsub.f32	s15, s14, s0
 800da4c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800da50:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 800da54:	ee20 4a25 	vmul.f32	s8, s0, s11
 800da58:	ed9f 6a6a 	vldr	s12, [pc, #424]	@ 800dc04 <expm1f+0x230>
 800da5c:	eddf 6a6a 	vldr	s13, [pc, #424]	@ 800dc08 <expm1f+0x234>
 800da60:	ed9f 5a6a 	vldr	s10, [pc, #424]	@ 800dc0c <expm1f+0x238>
 800da64:	ee20 7a04 	vmul.f32	s14, s0, s8
 800da68:	eef0 4a08 	vmov.f32	s9, #8	@ 0x40400000  3.0
 800da6c:	eee7 6a06 	vfma.f32	s13, s14, s12
 800da70:	ed9f 6a67 	vldr	s12, [pc, #412]	@ 800dc10 <expm1f+0x23c>
 800da74:	eea6 6a87 	vfma.f32	s12, s13, s14
 800da78:	eddf 6a66 	vldr	s13, [pc, #408]	@ 800dc14 <expm1f+0x240>
 800da7c:	eee6 6a07 	vfma.f32	s13, s12, s14
 800da80:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800da84:	eea6 5a87 	vfma.f32	s10, s13, s14
 800da88:	eef0 6a46 	vmov.f32	s13, s12
 800da8c:	eee5 6a07 	vfma.f32	s13, s10, s14
 800da90:	eee4 4a66 	vfms.f32	s9, s8, s13
 800da94:	eeb1 4a08 	vmov.f32	s8, #24	@ 0x40c00000  6.0
 800da98:	eea0 4a64 	vfms.f32	s8, s0, s9
 800da9c:	ee36 5ae4 	vsub.f32	s10, s13, s9
 800daa0:	eec5 6a04 	vdiv.f32	s13, s10, s8
 800daa4:	ee66 6a87 	vmul.f32	s13, s13, s14
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d140      	bne.n	800db2e <expm1f+0x15a>
 800daac:	ee90 7a26 	vfnms.f32	s14, s0, s13
 800dab0:	ee30 0a47 	vsub.f32	s0, s0, s14
 800dab4:	4770      	bx	lr
 800dab6:	ee30 7a07 	vadd.f32	s14, s0, s14
 800daba:	eddf 6a57 	vldr	s13, [pc, #348]	@ 800dc18 <expm1f+0x244>
 800dabe:	f04f 33ff 	mov.w	r3, #4294967295
 800dac2:	e7bf      	b.n	800da44 <expm1f+0x70>
 800dac4:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800dc1c <expm1f+0x248>
 800dac8:	ee20 7a07 	vmul.f32	s14, s0, s14
 800dacc:	eefe 7a00 	vmov.f32	s15, #224	@ 0xbf000000 -0.5
 800dad0:	e005      	b.n	800dade <expm1f+0x10a>
 800dad2:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 800dc1c <expm1f+0x248>
 800dad6:	ee20 7a07 	vmul.f32	s14, s0, s14
 800dada:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800dade:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dae2:	eeb0 7a40 	vmov.f32	s14, s0
 800dae6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800daea:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800daee:	ee17 3a90 	vmov	r3, s15
 800daf2:	eddf 7a42 	vldr	s15, [pc, #264]	@ 800dbfc <expm1f+0x228>
 800daf6:	eea6 7ae7 	vfms.f32	s14, s13, s15
 800dafa:	eddf 7a41 	vldr	s15, [pc, #260]	@ 800dc00 <expm1f+0x22c>
 800dafe:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800db02:	e79f      	b.n	800da44 <expm1f+0x70>
 800db04:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 800dc1c <expm1f+0x248>
 800db08:	ee20 7a07 	vmul.f32	s14, s0, s14
 800db0c:	2800      	cmp	r0, #0
 800db0e:	d0e4      	beq.n	800dada <expm1f+0x106>
 800db10:	e7dc      	b.n	800dacc <expm1f+0xf8>
 800db12:	f1b3 5f4c 	cmp.w	r3, #855638016	@ 0x33000000
 800db16:	d208      	bcs.n	800db2a <expm1f+0x156>
 800db18:	eddf 7a41 	vldr	s15, [pc, #260]	@ 800dc20 <expm1f+0x24c>
 800db1c:	ee70 7a27 	vadd.f32	s15, s0, s15
 800db20:	ee77 7ae7 	vsub.f32	s15, s15, s15
 800db24:	ee30 0a67 	vsub.f32	s0, s0, s15
 800db28:	4770      	bx	lr
 800db2a:	2300      	movs	r3, #0
 800db2c:	e790      	b.n	800da50 <expm1f+0x7c>
 800db2e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800db32:	1c5a      	adds	r2, r3, #1
 800db34:	eed6 7a80 	vfnms.f32	s15, s13, s0
 800db38:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800db3c:	d106      	bne.n	800db4c <expm1f+0x178>
 800db3e:	ee70 7a67 	vsub.f32	s15, s0, s15
 800db42:	eebe 0a00 	vmov.f32	s0, #224	@ 0xbf000000 -0.5
 800db46:	eea7 0aa5 	vfma.f32	s0, s15, s11
 800db4a:	4770      	bx	lr
 800db4c:	2b01      	cmp	r3, #1
 800db4e:	d118      	bne.n	800db82 <expm1f+0x1ae>
 800db50:	eebd 7a00 	vmov.f32	s14, #208	@ 0xbe800000 -0.250
 800db54:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800db58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db5c:	bf5b      	ittet	pl
 800db5e:	ee70 7a67 	vsubpl.f32	s15, s0, s15
 800db62:	eeb0 7a00 	vmovpl.f32	s14, #0	@ 0x40000000  2.0
 800db66:	ee70 5a25 	vaddmi.f32	s11, s0, s11
 800db6a:	eea7 6a87 	vfmapl.f32	s12, s15, s14
 800db6e:	bf43      	ittte	mi
 800db70:	ee77 7ae5 	vsubmi.f32	s15, s15, s11
 800db74:	eeb8 0a00 	vmovmi.f32	s0, #128	@ 0xc0000000 -2.0
 800db78:	ee27 0a80 	vmulmi.f32	s0, s15, s0
 800db7c:	eeb0 0a46 	vmovpl.f32	s0, s12
 800db80:	4770      	bx	lr
 800db82:	1c5a      	adds	r2, r3, #1
 800db84:	2a39      	cmp	r2, #57	@ 0x39
 800db86:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 800db8a:	d90b      	bls.n	800dba4 <expm1f+0x1d0>
 800db8c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800db90:	ee76 7a67 	vsub.f32	s15, s12, s15
 800db94:	ee17 3a90 	vmov	r3, s15
 800db98:	4419      	add	r1, r3
 800db9a:	ee07 1a90 	vmov	s15, r1
 800db9e:	ee37 0ac6 	vsub.f32	s0, s15, s12
 800dba2:	4770      	bx	lr
 800dba4:	2b16      	cmp	r3, #22
 800dba6:	dc11      	bgt.n	800dbcc <expm1f+0x1f8>
 800dba8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800dbac:	fa42 f303 	asr.w	r3, r2, r3
 800dbb0:	f1c3 537e 	rsb	r3, r3, #1065353216	@ 0x3f800000
 800dbb4:	ee07 3a10 	vmov	s14, r3
 800dbb8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800dbbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dbc0:	ee17 3a90 	vmov	r3, s15
 800dbc4:	440b      	add	r3, r1
 800dbc6:	ee00 3a10 	vmov	s0, r3
 800dbca:	4770      	bx	lr
 800dbcc:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 800dbd0:	05db      	lsls	r3, r3, #23
 800dbd2:	ee07 3a10 	vmov	s14, r3
 800dbd6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dbda:	ee70 7a67 	vsub.f32	s15, s0, s15
 800dbde:	ee77 7a86 	vadd.f32	s15, s15, s12
 800dbe2:	ee17 3a90 	vmov	r3, s15
 800dbe6:	e7ed      	b.n	800dbc4 <expm1f+0x1f0>
 800dbe8:	4195b843 	.word	0x4195b843
 800dbec:	42b17217 	.word	0x42b17217
 800dbf0:	0da24260 	.word	0x0da24260
 800dbf4:	3eb17218 	.word	0x3eb17218
 800dbf8:	3f851591 	.word	0x3f851591
 800dbfc:	3f317180 	.word	0x3f317180
 800dc00:	3717f7d1 	.word	0x3717f7d1
 800dc04:	b457edbb 	.word	0xb457edbb
 800dc08:	36867e54 	.word	0x36867e54
 800dc0c:	bd088889 	.word	0xbd088889
 800dc10:	b8a670cd 	.word	0xb8a670cd
 800dc14:	3ad00d01 	.word	0x3ad00d01
 800dc18:	b717f7d1 	.word	0xb717f7d1
 800dc1c:	3fb8aa3b 	.word	0x3fb8aa3b
 800dc20:	7149f2ca 	.word	0x7149f2ca

0800dc24 <nanf>:
 800dc24:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800dc2c <nanf+0x8>
 800dc28:	4770      	bx	lr
 800dc2a:	bf00      	nop
 800dc2c:	7fc00000 	.word	0x7fc00000

0800dc30 <fmaxf>:
 800dc30:	b508      	push	{r3, lr}
 800dc32:	ed2d 8b02 	vpush	{d8}
 800dc36:	eeb0 8a40 	vmov.f32	s16, s0
 800dc3a:	eef0 8a60 	vmov.f32	s17, s1
 800dc3e:	f000 f815 	bl	800dc6c <__fpclassifyf>
 800dc42:	b930      	cbnz	r0, 800dc52 <fmaxf+0x22>
 800dc44:	eeb0 8a68 	vmov.f32	s16, s17
 800dc48:	eeb0 0a48 	vmov.f32	s0, s16
 800dc4c:	ecbd 8b02 	vpop	{d8}
 800dc50:	bd08      	pop	{r3, pc}
 800dc52:	eeb0 0a68 	vmov.f32	s0, s17
 800dc56:	f000 f809 	bl	800dc6c <__fpclassifyf>
 800dc5a:	2800      	cmp	r0, #0
 800dc5c:	d0f4      	beq.n	800dc48 <fmaxf+0x18>
 800dc5e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800dc62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc66:	dded      	ble.n	800dc44 <fmaxf+0x14>
 800dc68:	e7ee      	b.n	800dc48 <fmaxf+0x18>
	...

0800dc6c <__fpclassifyf>:
 800dc6c:	ee10 3a10 	vmov	r3, s0
 800dc70:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 800dc74:	d00d      	beq.n	800dc92 <__fpclassifyf+0x26>
 800dc76:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800dc7a:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800dc7e:	d30a      	bcc.n	800dc96 <__fpclassifyf+0x2a>
 800dc80:	4b07      	ldr	r3, [pc, #28]	@ (800dca0 <__fpclassifyf+0x34>)
 800dc82:	1e42      	subs	r2, r0, #1
 800dc84:	429a      	cmp	r2, r3
 800dc86:	d908      	bls.n	800dc9a <__fpclassifyf+0x2e>
 800dc88:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800dc8c:	4258      	negs	r0, r3
 800dc8e:	4158      	adcs	r0, r3
 800dc90:	4770      	bx	lr
 800dc92:	2002      	movs	r0, #2
 800dc94:	4770      	bx	lr
 800dc96:	2004      	movs	r0, #4
 800dc98:	4770      	bx	lr
 800dc9a:	2003      	movs	r0, #3
 800dc9c:	4770      	bx	lr
 800dc9e:	bf00      	nop
 800dca0:	007ffffe 	.word	0x007ffffe

0800dca4 <with_errnof>:
 800dca4:	b510      	push	{r4, lr}
 800dca6:	ed2d 8b02 	vpush	{d8}
 800dcaa:	eeb0 8a40 	vmov.f32	s16, s0
 800dcae:	4604      	mov	r4, r0
 800dcb0:	f7fd fcd0 	bl	800b654 <__errno>
 800dcb4:	eeb0 0a48 	vmov.f32	s0, s16
 800dcb8:	ecbd 8b02 	vpop	{d8}
 800dcbc:	6004      	str	r4, [r0, #0]
 800dcbe:	bd10      	pop	{r4, pc}

0800dcc0 <xflowf>:
 800dcc0:	b130      	cbz	r0, 800dcd0 <xflowf+0x10>
 800dcc2:	eef1 7a40 	vneg.f32	s15, s0
 800dcc6:	ee27 0a80 	vmul.f32	s0, s15, s0
 800dcca:	2022      	movs	r0, #34	@ 0x22
 800dccc:	f7ff bfea 	b.w	800dca4 <with_errnof>
 800dcd0:	eef0 7a40 	vmov.f32	s15, s0
 800dcd4:	e7f7      	b.n	800dcc6 <xflowf+0x6>
	...

0800dcd8 <__math_uflowf>:
 800dcd8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800dce0 <__math_uflowf+0x8>
 800dcdc:	f7ff bff0 	b.w	800dcc0 <xflowf>
 800dce0:	10000000 	.word	0x10000000

0800dce4 <__math_oflowf>:
 800dce4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800dcec <__math_oflowf+0x8>
 800dce8:	f7ff bfea 	b.w	800dcc0 <xflowf>
 800dcec:	70000000 	.word	0x70000000

0800dcf0 <__ieee754_log>:
 800dcf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcf4:	ec51 0b10 	vmov	r0, r1, d0
 800dcf8:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800dcfc:	b087      	sub	sp, #28
 800dcfe:	460d      	mov	r5, r1
 800dd00:	da26      	bge.n	800dd50 <__ieee754_log+0x60>
 800dd02:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800dd06:	4303      	orrs	r3, r0
 800dd08:	4602      	mov	r2, r0
 800dd0a:	d10a      	bne.n	800dd22 <__ieee754_log+0x32>
 800dd0c:	49ce      	ldr	r1, [pc, #824]	@ (800e048 <__ieee754_log+0x358>)
 800dd0e:	2200      	movs	r2, #0
 800dd10:	2300      	movs	r3, #0
 800dd12:	2000      	movs	r0, #0
 800dd14:	f7f2 fda2 	bl	800085c <__aeabi_ddiv>
 800dd18:	ec41 0b10 	vmov	d0, r0, r1
 800dd1c:	b007      	add	sp, #28
 800dd1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd22:	2900      	cmp	r1, #0
 800dd24:	da05      	bge.n	800dd32 <__ieee754_log+0x42>
 800dd26:	460b      	mov	r3, r1
 800dd28:	f7f2 fab6 	bl	8000298 <__aeabi_dsub>
 800dd2c:	2200      	movs	r2, #0
 800dd2e:	2300      	movs	r3, #0
 800dd30:	e7f0      	b.n	800dd14 <__ieee754_log+0x24>
 800dd32:	4bc6      	ldr	r3, [pc, #792]	@ (800e04c <__ieee754_log+0x35c>)
 800dd34:	2200      	movs	r2, #0
 800dd36:	f7f2 fc67 	bl	8000608 <__aeabi_dmul>
 800dd3a:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 800dd3e:	460d      	mov	r5, r1
 800dd40:	4ac3      	ldr	r2, [pc, #780]	@ (800e050 <__ieee754_log+0x360>)
 800dd42:	4295      	cmp	r5, r2
 800dd44:	dd06      	ble.n	800dd54 <__ieee754_log+0x64>
 800dd46:	4602      	mov	r2, r0
 800dd48:	460b      	mov	r3, r1
 800dd4a:	f7f2 faa7 	bl	800029c <__adddf3>
 800dd4e:	e7e3      	b.n	800dd18 <__ieee754_log+0x28>
 800dd50:	2300      	movs	r3, #0
 800dd52:	e7f5      	b.n	800dd40 <__ieee754_log+0x50>
 800dd54:	152c      	asrs	r4, r5, #20
 800dd56:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 800dd5a:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800dd5e:	441c      	add	r4, r3
 800dd60:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 800dd64:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 800dd68:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800dd6c:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 800dd70:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 800dd74:	ea42 0105 	orr.w	r1, r2, r5
 800dd78:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800dd7c:	2200      	movs	r2, #0
 800dd7e:	4bb5      	ldr	r3, [pc, #724]	@ (800e054 <__ieee754_log+0x364>)
 800dd80:	f7f2 fa8a 	bl	8000298 <__aeabi_dsub>
 800dd84:	1cab      	adds	r3, r5, #2
 800dd86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dd8a:	2b02      	cmp	r3, #2
 800dd8c:	4682      	mov	sl, r0
 800dd8e:	468b      	mov	fp, r1
 800dd90:	f04f 0200 	mov.w	r2, #0
 800dd94:	dc53      	bgt.n	800de3e <__ieee754_log+0x14e>
 800dd96:	2300      	movs	r3, #0
 800dd98:	f7f2 fe9e 	bl	8000ad8 <__aeabi_dcmpeq>
 800dd9c:	b1d0      	cbz	r0, 800ddd4 <__ieee754_log+0xe4>
 800dd9e:	2c00      	cmp	r4, #0
 800dda0:	f000 8120 	beq.w	800dfe4 <__ieee754_log+0x2f4>
 800dda4:	4620      	mov	r0, r4
 800dda6:	f7f2 fbc5 	bl	8000534 <__aeabi_i2d>
 800ddaa:	a391      	add	r3, pc, #580	@ (adr r3, 800dff0 <__ieee754_log+0x300>)
 800ddac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddb0:	4606      	mov	r6, r0
 800ddb2:	460f      	mov	r7, r1
 800ddb4:	f7f2 fc28 	bl	8000608 <__aeabi_dmul>
 800ddb8:	a38f      	add	r3, pc, #572	@ (adr r3, 800dff8 <__ieee754_log+0x308>)
 800ddba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddbe:	4604      	mov	r4, r0
 800ddc0:	460d      	mov	r5, r1
 800ddc2:	4630      	mov	r0, r6
 800ddc4:	4639      	mov	r1, r7
 800ddc6:	f7f2 fc1f 	bl	8000608 <__aeabi_dmul>
 800ddca:	4602      	mov	r2, r0
 800ddcc:	460b      	mov	r3, r1
 800ddce:	4620      	mov	r0, r4
 800ddd0:	4629      	mov	r1, r5
 800ddd2:	e7ba      	b.n	800dd4a <__ieee754_log+0x5a>
 800ddd4:	a38a      	add	r3, pc, #552	@ (adr r3, 800e000 <__ieee754_log+0x310>)
 800ddd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddda:	4650      	mov	r0, sl
 800dddc:	4659      	mov	r1, fp
 800ddde:	f7f2 fc13 	bl	8000608 <__aeabi_dmul>
 800dde2:	4602      	mov	r2, r0
 800dde4:	460b      	mov	r3, r1
 800dde6:	2000      	movs	r0, #0
 800dde8:	499b      	ldr	r1, [pc, #620]	@ (800e058 <__ieee754_log+0x368>)
 800ddea:	f7f2 fa55 	bl	8000298 <__aeabi_dsub>
 800ddee:	4652      	mov	r2, sl
 800ddf0:	4606      	mov	r6, r0
 800ddf2:	460f      	mov	r7, r1
 800ddf4:	465b      	mov	r3, fp
 800ddf6:	4650      	mov	r0, sl
 800ddf8:	4659      	mov	r1, fp
 800ddfa:	f7f2 fc05 	bl	8000608 <__aeabi_dmul>
 800ddfe:	4602      	mov	r2, r0
 800de00:	460b      	mov	r3, r1
 800de02:	4630      	mov	r0, r6
 800de04:	4639      	mov	r1, r7
 800de06:	f7f2 fbff 	bl	8000608 <__aeabi_dmul>
 800de0a:	4606      	mov	r6, r0
 800de0c:	460f      	mov	r7, r1
 800de0e:	b914      	cbnz	r4, 800de16 <__ieee754_log+0x126>
 800de10:	4632      	mov	r2, r6
 800de12:	463b      	mov	r3, r7
 800de14:	e0a0      	b.n	800df58 <__ieee754_log+0x268>
 800de16:	4620      	mov	r0, r4
 800de18:	f7f2 fb8c 	bl	8000534 <__aeabi_i2d>
 800de1c:	a374      	add	r3, pc, #464	@ (adr r3, 800dff0 <__ieee754_log+0x300>)
 800de1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de22:	4680      	mov	r8, r0
 800de24:	4689      	mov	r9, r1
 800de26:	f7f2 fbef 	bl	8000608 <__aeabi_dmul>
 800de2a:	a373      	add	r3, pc, #460	@ (adr r3, 800dff8 <__ieee754_log+0x308>)
 800de2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de30:	4604      	mov	r4, r0
 800de32:	460d      	mov	r5, r1
 800de34:	4640      	mov	r0, r8
 800de36:	4649      	mov	r1, r9
 800de38:	f7f2 fbe6 	bl	8000608 <__aeabi_dmul>
 800de3c:	e0a5      	b.n	800df8a <__ieee754_log+0x29a>
 800de3e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800de42:	f7f2 fa2b 	bl	800029c <__adddf3>
 800de46:	4602      	mov	r2, r0
 800de48:	460b      	mov	r3, r1
 800de4a:	4650      	mov	r0, sl
 800de4c:	4659      	mov	r1, fp
 800de4e:	f7f2 fd05 	bl	800085c <__aeabi_ddiv>
 800de52:	e9cd 0100 	strd	r0, r1, [sp]
 800de56:	4620      	mov	r0, r4
 800de58:	f7f2 fb6c 	bl	8000534 <__aeabi_i2d>
 800de5c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800de60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800de64:	4610      	mov	r0, r2
 800de66:	4619      	mov	r1, r3
 800de68:	f7f2 fbce 	bl	8000608 <__aeabi_dmul>
 800de6c:	4602      	mov	r2, r0
 800de6e:	460b      	mov	r3, r1
 800de70:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800de74:	f7f2 fbc8 	bl	8000608 <__aeabi_dmul>
 800de78:	a363      	add	r3, pc, #396	@ (adr r3, 800e008 <__ieee754_log+0x318>)
 800de7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de7e:	4680      	mov	r8, r0
 800de80:	4689      	mov	r9, r1
 800de82:	f7f2 fbc1 	bl	8000608 <__aeabi_dmul>
 800de86:	a362      	add	r3, pc, #392	@ (adr r3, 800e010 <__ieee754_log+0x320>)
 800de88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de8c:	f7f2 fa06 	bl	800029c <__adddf3>
 800de90:	4642      	mov	r2, r8
 800de92:	464b      	mov	r3, r9
 800de94:	f7f2 fbb8 	bl	8000608 <__aeabi_dmul>
 800de98:	a35f      	add	r3, pc, #380	@ (adr r3, 800e018 <__ieee754_log+0x328>)
 800de9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de9e:	f7f2 f9fd 	bl	800029c <__adddf3>
 800dea2:	4642      	mov	r2, r8
 800dea4:	464b      	mov	r3, r9
 800dea6:	f7f2 fbaf 	bl	8000608 <__aeabi_dmul>
 800deaa:	a35d      	add	r3, pc, #372	@ (adr r3, 800e020 <__ieee754_log+0x330>)
 800deac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deb0:	f7f2 f9f4 	bl	800029c <__adddf3>
 800deb4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800deb8:	f7f2 fba6 	bl	8000608 <__aeabi_dmul>
 800debc:	a35a      	add	r3, pc, #360	@ (adr r3, 800e028 <__ieee754_log+0x338>)
 800debe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dec2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dec6:	4640      	mov	r0, r8
 800dec8:	4649      	mov	r1, r9
 800deca:	f7f2 fb9d 	bl	8000608 <__aeabi_dmul>
 800dece:	a358      	add	r3, pc, #352	@ (adr r3, 800e030 <__ieee754_log+0x340>)
 800ded0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ded4:	f7f2 f9e2 	bl	800029c <__adddf3>
 800ded8:	4642      	mov	r2, r8
 800deda:	464b      	mov	r3, r9
 800dedc:	f7f2 fb94 	bl	8000608 <__aeabi_dmul>
 800dee0:	a355      	add	r3, pc, #340	@ (adr r3, 800e038 <__ieee754_log+0x348>)
 800dee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dee6:	f7f2 f9d9 	bl	800029c <__adddf3>
 800deea:	4642      	mov	r2, r8
 800deec:	464b      	mov	r3, r9
 800deee:	f7f2 fb8b 	bl	8000608 <__aeabi_dmul>
 800def2:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 800def6:	4602      	mov	r2, r0
 800def8:	460b      	mov	r3, r1
 800defa:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 800defe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800df02:	f7f2 f9cb 	bl	800029c <__adddf3>
 800df06:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 800df0a:	3551      	adds	r5, #81	@ 0x51
 800df0c:	4335      	orrs	r5, r6
 800df0e:	2d00      	cmp	r5, #0
 800df10:	4680      	mov	r8, r0
 800df12:	4689      	mov	r9, r1
 800df14:	dd48      	ble.n	800dfa8 <__ieee754_log+0x2b8>
 800df16:	4b50      	ldr	r3, [pc, #320]	@ (800e058 <__ieee754_log+0x368>)
 800df18:	2200      	movs	r2, #0
 800df1a:	4650      	mov	r0, sl
 800df1c:	4659      	mov	r1, fp
 800df1e:	f7f2 fb73 	bl	8000608 <__aeabi_dmul>
 800df22:	4652      	mov	r2, sl
 800df24:	465b      	mov	r3, fp
 800df26:	f7f2 fb6f 	bl	8000608 <__aeabi_dmul>
 800df2a:	4602      	mov	r2, r0
 800df2c:	460b      	mov	r3, r1
 800df2e:	4606      	mov	r6, r0
 800df30:	460f      	mov	r7, r1
 800df32:	4640      	mov	r0, r8
 800df34:	4649      	mov	r1, r9
 800df36:	f7f2 f9b1 	bl	800029c <__adddf3>
 800df3a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800df3e:	f7f2 fb63 	bl	8000608 <__aeabi_dmul>
 800df42:	4680      	mov	r8, r0
 800df44:	4689      	mov	r9, r1
 800df46:	b964      	cbnz	r4, 800df62 <__ieee754_log+0x272>
 800df48:	4602      	mov	r2, r0
 800df4a:	460b      	mov	r3, r1
 800df4c:	4630      	mov	r0, r6
 800df4e:	4639      	mov	r1, r7
 800df50:	f7f2 f9a2 	bl	8000298 <__aeabi_dsub>
 800df54:	4602      	mov	r2, r0
 800df56:	460b      	mov	r3, r1
 800df58:	4650      	mov	r0, sl
 800df5a:	4659      	mov	r1, fp
 800df5c:	f7f2 f99c 	bl	8000298 <__aeabi_dsub>
 800df60:	e6da      	b.n	800dd18 <__ieee754_log+0x28>
 800df62:	a323      	add	r3, pc, #140	@ (adr r3, 800dff0 <__ieee754_log+0x300>)
 800df64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800df6c:	f7f2 fb4c 	bl	8000608 <__aeabi_dmul>
 800df70:	a321      	add	r3, pc, #132	@ (adr r3, 800dff8 <__ieee754_log+0x308>)
 800df72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df76:	4604      	mov	r4, r0
 800df78:	460d      	mov	r5, r1
 800df7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800df7e:	f7f2 fb43 	bl	8000608 <__aeabi_dmul>
 800df82:	4642      	mov	r2, r8
 800df84:	464b      	mov	r3, r9
 800df86:	f7f2 f989 	bl	800029c <__adddf3>
 800df8a:	4602      	mov	r2, r0
 800df8c:	460b      	mov	r3, r1
 800df8e:	4630      	mov	r0, r6
 800df90:	4639      	mov	r1, r7
 800df92:	f7f2 f981 	bl	8000298 <__aeabi_dsub>
 800df96:	4652      	mov	r2, sl
 800df98:	465b      	mov	r3, fp
 800df9a:	f7f2 f97d 	bl	8000298 <__aeabi_dsub>
 800df9e:	4602      	mov	r2, r0
 800dfa0:	460b      	mov	r3, r1
 800dfa2:	4620      	mov	r0, r4
 800dfa4:	4629      	mov	r1, r5
 800dfa6:	e7d9      	b.n	800df5c <__ieee754_log+0x26c>
 800dfa8:	4602      	mov	r2, r0
 800dfaa:	460b      	mov	r3, r1
 800dfac:	4650      	mov	r0, sl
 800dfae:	4659      	mov	r1, fp
 800dfb0:	f7f2 f972 	bl	8000298 <__aeabi_dsub>
 800dfb4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dfb8:	f7f2 fb26 	bl	8000608 <__aeabi_dmul>
 800dfbc:	4606      	mov	r6, r0
 800dfbe:	460f      	mov	r7, r1
 800dfc0:	2c00      	cmp	r4, #0
 800dfc2:	f43f af25 	beq.w	800de10 <__ieee754_log+0x120>
 800dfc6:	a30a      	add	r3, pc, #40	@ (adr r3, 800dff0 <__ieee754_log+0x300>)
 800dfc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfcc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dfd0:	f7f2 fb1a 	bl	8000608 <__aeabi_dmul>
 800dfd4:	a308      	add	r3, pc, #32	@ (adr r3, 800dff8 <__ieee754_log+0x308>)
 800dfd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfda:	4604      	mov	r4, r0
 800dfdc:	460d      	mov	r5, r1
 800dfde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dfe2:	e729      	b.n	800de38 <__ieee754_log+0x148>
 800dfe4:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 800e040 <__ieee754_log+0x350>
 800dfe8:	e698      	b.n	800dd1c <__ieee754_log+0x2c>
 800dfea:	bf00      	nop
 800dfec:	f3af 8000 	nop.w
 800dff0:	fee00000 	.word	0xfee00000
 800dff4:	3fe62e42 	.word	0x3fe62e42
 800dff8:	35793c76 	.word	0x35793c76
 800dffc:	3dea39ef 	.word	0x3dea39ef
 800e000:	55555555 	.word	0x55555555
 800e004:	3fd55555 	.word	0x3fd55555
 800e008:	df3e5244 	.word	0xdf3e5244
 800e00c:	3fc2f112 	.word	0x3fc2f112
 800e010:	96cb03de 	.word	0x96cb03de
 800e014:	3fc74664 	.word	0x3fc74664
 800e018:	94229359 	.word	0x94229359
 800e01c:	3fd24924 	.word	0x3fd24924
 800e020:	55555593 	.word	0x55555593
 800e024:	3fe55555 	.word	0x3fe55555
 800e028:	d078c69f 	.word	0xd078c69f
 800e02c:	3fc39a09 	.word	0x3fc39a09
 800e030:	1d8e78af 	.word	0x1d8e78af
 800e034:	3fcc71c5 	.word	0x3fcc71c5
 800e038:	9997fa04 	.word	0x9997fa04
 800e03c:	3fd99999 	.word	0x3fd99999
	...
 800e048:	c3500000 	.word	0xc3500000
 800e04c:	43500000 	.word	0x43500000
 800e050:	7fefffff 	.word	0x7fefffff
 800e054:	3ff00000 	.word	0x3ff00000
 800e058:	3fe00000 	.word	0x3fe00000

0800e05c <__ieee754_logf>:
 800e05c:	ee10 3a10 	vmov	r3, s0
 800e060:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800e064:	d106      	bne.n	800e074 <__ieee754_logf+0x18>
 800e066:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 800e200 <__ieee754_logf+0x1a4>
 800e06a:	eddf 7a66 	vldr	s15, [pc, #408]	@ 800e204 <__ieee754_logf+0x1a8>
 800e06e:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800e072:	4770      	bx	lr
 800e074:	2b00      	cmp	r3, #0
 800e076:	461a      	mov	r2, r3
 800e078:	da02      	bge.n	800e080 <__ieee754_logf+0x24>
 800e07a:	ee30 7a40 	vsub.f32	s14, s0, s0
 800e07e:	e7f4      	b.n	800e06a <__ieee754_logf+0xe>
 800e080:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800e084:	db02      	blt.n	800e08c <__ieee754_logf+0x30>
 800e086:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e08a:	4770      	bx	lr
 800e08c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800e090:	bfb8      	it	lt
 800e092:	eddf 7a5d 	vldrlt	s15, [pc, #372]	@ 800e208 <__ieee754_logf+0x1ac>
 800e096:	485d      	ldr	r0, [pc, #372]	@ (800e20c <__ieee754_logf+0x1b0>)
 800e098:	bfbe      	ittt	lt
 800e09a:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800e09e:	f06f 0118 	mvnlt.w	r1, #24
 800e0a2:	ee17 2a90 	vmovlt	r2, s15
 800e0a6:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800e0aa:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800e0ae:	4410      	add	r0, r2
 800e0b0:	bfa8      	it	ge
 800e0b2:	2100      	movge	r1, #0
 800e0b4:	3b7f      	subs	r3, #127	@ 0x7f
 800e0b6:	440b      	add	r3, r1
 800e0b8:	f400 0100 	and.w	r1, r0, #8388608	@ 0x800000
 800e0bc:	f081 517e 	eor.w	r1, r1, #1065353216	@ 0x3f800000
 800e0c0:	4311      	orrs	r1, r2
 800e0c2:	ee00 1a10 	vmov	s0, r1
 800e0c6:	4952      	ldr	r1, [pc, #328]	@ (800e210 <__ieee754_logf+0x1b4>)
 800e0c8:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
 800e0cc:	f102 000f 	add.w	r0, r2, #15
 800e0d0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800e0d4:	4001      	ands	r1, r0
 800e0d6:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e0da:	bb89      	cbnz	r1, 800e140 <__ieee754_logf+0xe4>
 800e0dc:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800e0e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0e4:	d10f      	bne.n	800e106 <__ieee754_logf+0xaa>
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	f000 8087 	beq.w	800e1fa <__ieee754_logf+0x19e>
 800e0ec:	ee07 3a90 	vmov	s15, r3
 800e0f0:	ed9f 0a48 	vldr	s0, [pc, #288]	@ 800e214 <__ieee754_logf+0x1b8>
 800e0f4:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 800e218 <__ieee754_logf+0x1bc>
 800e0f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e0fc:	ee27 0a80 	vmul.f32	s0, s15, s0
 800e100:	eea7 0a87 	vfma.f32	s0, s15, s14
 800e104:	4770      	bx	lr
 800e106:	eddf 6a45 	vldr	s13, [pc, #276]	@ 800e21c <__ieee754_logf+0x1c0>
 800e10a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800e10e:	eee0 7a66 	vfms.f32	s15, s0, s13
 800e112:	ee20 7a00 	vmul.f32	s14, s0, s0
 800e116:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e11a:	b913      	cbnz	r3, 800e122 <__ieee754_logf+0xc6>
 800e11c:	ee30 0a47 	vsub.f32	s0, s0, s14
 800e120:	4770      	bx	lr
 800e122:	ee07 3a90 	vmov	s15, r3
 800e126:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800e214 <__ieee754_logf+0x1b8>
 800e12a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e12e:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800e132:	ee37 0a40 	vsub.f32	s0, s14, s0
 800e136:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800e218 <__ieee754_logf+0x1bc>
 800e13a:	ee97 0a87 	vfnms.f32	s0, s15, s14
 800e13e:	4770      	bx	lr
 800e140:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800e144:	ee70 7a27 	vadd.f32	s15, s0, s15
 800e148:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800e220 <__ieee754_logf+0x1c4>
 800e14c:	eddf 4a35 	vldr	s9, [pc, #212]	@ 800e224 <__ieee754_logf+0x1c8>
 800e150:	4935      	ldr	r1, [pc, #212]	@ (800e228 <__ieee754_logf+0x1cc>)
 800e152:	ee80 6a27 	vdiv.f32	s12, s0, s15
 800e156:	4411      	add	r1, r2
 800e158:	f5c2 1257 	rsb	r2, r2, #3522560	@ 0x35c000
 800e15c:	f502 7222 	add.w	r2, r2, #648	@ 0x288
 800e160:	430a      	orrs	r2, r1
 800e162:	2a00      	cmp	r2, #0
 800e164:	ee07 3a90 	vmov	s15, r3
 800e168:	ee26 5a06 	vmul.f32	s10, s12, s12
 800e16c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800e170:	ee25 7a05 	vmul.f32	s14, s10, s10
 800e174:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 800e22c <__ieee754_logf+0x1d0>
 800e178:	eee7 7a25 	vfma.f32	s15, s14, s11
 800e17c:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 800e230 <__ieee754_logf+0x1d4>
 800e180:	eee7 5a87 	vfma.f32	s11, s15, s14
 800e184:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 800e234 <__ieee754_logf+0x1d8>
 800e188:	eee7 7a24 	vfma.f32	s15, s14, s9
 800e18c:	eddf 4a2a 	vldr	s9, [pc, #168]	@ 800e238 <__ieee754_logf+0x1dc>
 800e190:	eee7 4a87 	vfma.f32	s9, s15, s14
 800e194:	eddf 7a29 	vldr	s15, [pc, #164]	@ 800e23c <__ieee754_logf+0x1e0>
 800e198:	eee4 7a87 	vfma.f32	s15, s9, s14
 800e19c:	ee67 7a85 	vmul.f32	s15, s15, s10
 800e1a0:	eee5 7a87 	vfma.f32	s15, s11, s14
 800e1a4:	dd1a      	ble.n	800e1dc <__ieee754_logf+0x180>
 800e1a6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800e1aa:	ee20 7a07 	vmul.f32	s14, s0, s14
 800e1ae:	ee27 7a00 	vmul.f32	s14, s14, s0
 800e1b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e1b6:	ee67 7a86 	vmul.f32	s15, s15, s12
 800e1ba:	b913      	cbnz	r3, 800e1c2 <__ieee754_logf+0x166>
 800e1bc:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e1c0:	e7ac      	b.n	800e11c <__ieee754_logf+0xc0>
 800e1c2:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 800e214 <__ieee754_logf+0x1b8>
 800e1c6:	eee6 7a86 	vfma.f32	s15, s13, s12
 800e1ca:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e1ce:	ee37 0a40 	vsub.f32	s0, s14, s0
 800e1d2:	eddf 7a11 	vldr	s15, [pc, #68]	@ 800e218 <__ieee754_logf+0x1bc>
 800e1d6:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 800e1da:	4770      	bx	lr
 800e1dc:	ee70 7a67 	vsub.f32	s15, s0, s15
 800e1e0:	ee67 7a86 	vmul.f32	s15, s15, s12
 800e1e4:	b913      	cbnz	r3, 800e1ec <__ieee754_logf+0x190>
 800e1e6:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e1ea:	4770      	bx	lr
 800e1ec:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 800e214 <__ieee754_logf+0x1b8>
 800e1f0:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800e1f4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800e1f8:	e7eb      	b.n	800e1d2 <__ieee754_logf+0x176>
 800e1fa:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 800e204 <__ieee754_logf+0x1a8>
 800e1fe:	4770      	bx	lr
 800e200:	cc000000 	.word	0xcc000000
 800e204:	00000000 	.word	0x00000000
 800e208:	4c000000 	.word	0x4c000000
 800e20c:	004afb20 	.word	0x004afb20
 800e210:	007ffff0 	.word	0x007ffff0
 800e214:	3717f7d1 	.word	0x3717f7d1
 800e218:	3f317180 	.word	0x3f317180
 800e21c:	3eaaaaab 	.word	0x3eaaaaab
 800e220:	3e1cd04f 	.word	0x3e1cd04f
 800e224:	3e178897 	.word	0x3e178897
 800e228:	ffcf5c30 	.word	0xffcf5c30
 800e22c:	3e638e29 	.word	0x3e638e29
 800e230:	3ecccccd 	.word	0x3ecccccd
 800e234:	3e3a3325 	.word	0x3e3a3325
 800e238:	3e924925 	.word	0x3e924925
 800e23c:	3f2aaaab 	.word	0x3f2aaaab

0800e240 <__ieee754_powf>:
 800e240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e244:	ee10 4a90 	vmov	r4, s1
 800e248:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 800e24c:	ed2d 8b02 	vpush	{d8}
 800e250:	ee10 6a10 	vmov	r6, s0
 800e254:	eeb0 8a40 	vmov.f32	s16, s0
 800e258:	eef0 8a60 	vmov.f32	s17, s1
 800e25c:	d10c      	bne.n	800e278 <__ieee754_powf+0x38>
 800e25e:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 800e262:	0076      	lsls	r6, r6, #1
 800e264:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 800e268:	f240 8274 	bls.w	800e754 <__ieee754_powf+0x514>
 800e26c:	ee38 0a28 	vadd.f32	s0, s16, s17
 800e270:	ecbd 8b02 	vpop	{d8}
 800e274:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e278:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 800e27c:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800e280:	d802      	bhi.n	800e288 <__ieee754_powf+0x48>
 800e282:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800e286:	d908      	bls.n	800e29a <__ieee754_powf+0x5a>
 800e288:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800e28c:	d1ee      	bne.n	800e26c <__ieee754_powf+0x2c>
 800e28e:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800e292:	0064      	lsls	r4, r4, #1
 800e294:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800e298:	e7e6      	b.n	800e268 <__ieee754_powf+0x28>
 800e29a:	2e00      	cmp	r6, #0
 800e29c:	da1f      	bge.n	800e2de <__ieee754_powf+0x9e>
 800e29e:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 800e2a2:	f080 8260 	bcs.w	800e766 <__ieee754_powf+0x526>
 800e2a6:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800e2aa:	d32f      	bcc.n	800e30c <__ieee754_powf+0xcc>
 800e2ac:	ea4f 53e9 	mov.w	r3, r9, asr #23
 800e2b0:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800e2b4:	fa49 f503 	asr.w	r5, r9, r3
 800e2b8:	fa05 f303 	lsl.w	r3, r5, r3
 800e2bc:	454b      	cmp	r3, r9
 800e2be:	d123      	bne.n	800e308 <__ieee754_powf+0xc8>
 800e2c0:	f005 0501 	and.w	r5, r5, #1
 800e2c4:	f1c5 0502 	rsb	r5, r5, #2
 800e2c8:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800e2cc:	d11f      	bne.n	800e30e <__ieee754_powf+0xce>
 800e2ce:	2c00      	cmp	r4, #0
 800e2d0:	f280 8246 	bge.w	800e760 <__ieee754_powf+0x520>
 800e2d4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800e2d8:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800e2dc:	e7c8      	b.n	800e270 <__ieee754_powf+0x30>
 800e2de:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800e2e2:	d111      	bne.n	800e308 <__ieee754_powf+0xc8>
 800e2e4:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 800e2e8:	f000 8234 	beq.w	800e754 <__ieee754_powf+0x514>
 800e2ec:	d906      	bls.n	800e2fc <__ieee754_powf+0xbc>
 800e2ee:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 800e604 <__ieee754_powf+0x3c4>
 800e2f2:	2c00      	cmp	r4, #0
 800e2f4:	bfa8      	it	ge
 800e2f6:	eeb0 0a68 	vmovge.f32	s0, s17
 800e2fa:	e7b9      	b.n	800e270 <__ieee754_powf+0x30>
 800e2fc:	2c00      	cmp	r4, #0
 800e2fe:	f280 822c 	bge.w	800e75a <__ieee754_powf+0x51a>
 800e302:	eeb1 0a68 	vneg.f32	s0, s17
 800e306:	e7b3      	b.n	800e270 <__ieee754_powf+0x30>
 800e308:	2500      	movs	r5, #0
 800e30a:	e7dd      	b.n	800e2c8 <__ieee754_powf+0x88>
 800e30c:	2500      	movs	r5, #0
 800e30e:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800e312:	d102      	bne.n	800e31a <__ieee754_powf+0xda>
 800e314:	ee28 0a08 	vmul.f32	s0, s16, s16
 800e318:	e7aa      	b.n	800e270 <__ieee754_powf+0x30>
 800e31a:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800e31e:	f040 8227 	bne.w	800e770 <__ieee754_powf+0x530>
 800e322:	2e00      	cmp	r6, #0
 800e324:	f2c0 8224 	blt.w	800e770 <__ieee754_powf+0x530>
 800e328:	eeb0 0a48 	vmov.f32	s0, s16
 800e32c:	ecbd 8b02 	vpop	{d8}
 800e330:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e334:	f000 bac0 	b.w	800e8b8 <__ieee754_sqrtf>
 800e338:	2d01      	cmp	r5, #1
 800e33a:	d199      	bne.n	800e270 <__ieee754_powf+0x30>
 800e33c:	eeb1 0a40 	vneg.f32	s0, s0
 800e340:	e796      	b.n	800e270 <__ieee754_powf+0x30>
 800e342:	0ff0      	lsrs	r0, r6, #31
 800e344:	3801      	subs	r0, #1
 800e346:	ea55 0300 	orrs.w	r3, r5, r0
 800e34a:	d104      	bne.n	800e356 <__ieee754_powf+0x116>
 800e34c:	ee38 8a48 	vsub.f32	s16, s16, s16
 800e350:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800e354:	e78c      	b.n	800e270 <__ieee754_powf+0x30>
 800e356:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 800e35a:	d96d      	bls.n	800e438 <__ieee754_powf+0x1f8>
 800e35c:	4baa      	ldr	r3, [pc, #680]	@ (800e608 <__ieee754_powf+0x3c8>)
 800e35e:	4598      	cmp	r8, r3
 800e360:	d808      	bhi.n	800e374 <__ieee754_powf+0x134>
 800e362:	2c00      	cmp	r4, #0
 800e364:	da0b      	bge.n	800e37e <__ieee754_powf+0x13e>
 800e366:	2000      	movs	r0, #0
 800e368:	ecbd 8b02 	vpop	{d8}
 800e36c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e370:	f7ff bcb8 	b.w	800dce4 <__math_oflowf>
 800e374:	4ba5      	ldr	r3, [pc, #660]	@ (800e60c <__ieee754_powf+0x3cc>)
 800e376:	4598      	cmp	r8, r3
 800e378:	d908      	bls.n	800e38c <__ieee754_powf+0x14c>
 800e37a:	2c00      	cmp	r4, #0
 800e37c:	dcf3      	bgt.n	800e366 <__ieee754_powf+0x126>
 800e37e:	2000      	movs	r0, #0
 800e380:	ecbd 8b02 	vpop	{d8}
 800e384:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e388:	f7ff bca6 	b.w	800dcd8 <__math_uflowf>
 800e38c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800e390:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e394:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 800e610 <__ieee754_powf+0x3d0>
 800e398:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 800e39c:	eee0 6a67 	vfms.f32	s13, s0, s15
 800e3a0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800e3a4:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800e3a8:	ee20 7a00 	vmul.f32	s14, s0, s0
 800e3ac:	eddf 6a99 	vldr	s13, [pc, #612]	@ 800e614 <__ieee754_powf+0x3d4>
 800e3b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e3b4:	eddf 7a98 	vldr	s15, [pc, #608]	@ 800e618 <__ieee754_powf+0x3d8>
 800e3b8:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800e3bc:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 800e61c <__ieee754_powf+0x3dc>
 800e3c0:	eee0 7a07 	vfma.f32	s15, s0, s14
 800e3c4:	eeb0 7a67 	vmov.f32	s14, s15
 800e3c8:	eea0 7a26 	vfma.f32	s14, s0, s13
 800e3cc:	ee17 3a10 	vmov	r3, s14
 800e3d0:	f36f 030b 	bfc	r3, #0, #12
 800e3d4:	ee07 3a10 	vmov	s14, r3
 800e3d8:	eeb0 6a47 	vmov.f32	s12, s14
 800e3dc:	eea0 6a66 	vfms.f32	s12, s0, s13
 800e3e0:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800e3e4:	3d01      	subs	r5, #1
 800e3e6:	4305      	orrs	r5, r0
 800e3e8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e3ec:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 800e3f0:	f36f 040b 	bfc	r4, #0, #12
 800e3f4:	bf18      	it	ne
 800e3f6:	eeb0 8a66 	vmovne.f32	s16, s13
 800e3fa:	ee06 4a90 	vmov	s13, r4
 800e3fe:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800e402:	ee38 6ae6 	vsub.f32	s12, s17, s13
 800e406:	ee67 7a26 	vmul.f32	s15, s14, s13
 800e40a:	eee6 0a07 	vfma.f32	s1, s12, s14
 800e40e:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800e412:	ee17 1a10 	vmov	r1, s14
 800e416:	2900      	cmp	r1, #0
 800e418:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800e41c:	f340 80dd 	ble.w	800e5da <__ieee754_powf+0x39a>
 800e420:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 800e424:	f240 80ca 	bls.w	800e5bc <__ieee754_powf+0x37c>
 800e428:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800e42c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e430:	bf4c      	ite	mi
 800e432:	2001      	movmi	r0, #1
 800e434:	2000      	movpl	r0, #0
 800e436:	e797      	b.n	800e368 <__ieee754_powf+0x128>
 800e438:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800e43c:	bf01      	itttt	eq
 800e43e:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 800e620 <__ieee754_powf+0x3e0>
 800e442:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800e446:	f06f 0317 	mvneq.w	r3, #23
 800e44a:	ee17 7a90 	vmoveq	r7, s15
 800e44e:	ea4f 52e7 	mov.w	r2, r7, asr #23
 800e452:	bf18      	it	ne
 800e454:	2300      	movne	r3, #0
 800e456:	3a7f      	subs	r2, #127	@ 0x7f
 800e458:	441a      	add	r2, r3
 800e45a:	4b72      	ldr	r3, [pc, #456]	@ (800e624 <__ieee754_powf+0x3e4>)
 800e45c:	f3c7 0716 	ubfx	r7, r7, #0, #23
 800e460:	429f      	cmp	r7, r3
 800e462:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 800e466:	dd06      	ble.n	800e476 <__ieee754_powf+0x236>
 800e468:	4b6f      	ldr	r3, [pc, #444]	@ (800e628 <__ieee754_powf+0x3e8>)
 800e46a:	429f      	cmp	r7, r3
 800e46c:	f340 80a4 	ble.w	800e5b8 <__ieee754_powf+0x378>
 800e470:	3201      	adds	r2, #1
 800e472:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 800e476:	2600      	movs	r6, #0
 800e478:	4b6c      	ldr	r3, [pc, #432]	@ (800e62c <__ieee754_powf+0x3ec>)
 800e47a:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800e47e:	ee07 1a10 	vmov	s14, r1
 800e482:	edd3 5a00 	vldr	s11, [r3]
 800e486:	4b6a      	ldr	r3, [pc, #424]	@ (800e630 <__ieee754_powf+0x3f0>)
 800e488:	ee75 7a87 	vadd.f32	s15, s11, s14
 800e48c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e490:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800e494:	1049      	asrs	r1, r1, #1
 800e496:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 800e49a:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 800e49e:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 800e4a2:	ee37 6a65 	vsub.f32	s12, s14, s11
 800e4a6:	ee07 1a90 	vmov	s15, r1
 800e4aa:	ee26 5a24 	vmul.f32	s10, s12, s9
 800e4ae:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800e4b2:	ee15 7a10 	vmov	r7, s10
 800e4b6:	401f      	ands	r7, r3
 800e4b8:	ee06 7a90 	vmov	s13, r7
 800e4bc:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800e4c0:	ee37 7a65 	vsub.f32	s14, s14, s11
 800e4c4:	ee65 7a05 	vmul.f32	s15, s10, s10
 800e4c8:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800e4cc:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800e634 <__ieee754_powf+0x3f4>
 800e4d0:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800e638 <__ieee754_powf+0x3f8>
 800e4d4:	eee7 5a87 	vfma.f32	s11, s15, s14
 800e4d8:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800e63c <__ieee754_powf+0x3fc>
 800e4dc:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800e4e0:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 800e610 <__ieee754_powf+0x3d0>
 800e4e4:	eee7 5a27 	vfma.f32	s11, s14, s15
 800e4e8:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800e640 <__ieee754_powf+0x400>
 800e4ec:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800e4f0:	eddf 5a54 	vldr	s11, [pc, #336]	@ 800e644 <__ieee754_powf+0x404>
 800e4f4:	ee26 6a24 	vmul.f32	s12, s12, s9
 800e4f8:	eee7 5a27 	vfma.f32	s11, s14, s15
 800e4fc:	ee35 7a26 	vadd.f32	s14, s10, s13
 800e500:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800e504:	ee27 7a06 	vmul.f32	s14, s14, s12
 800e508:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 800e50c:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800e510:	eef0 5a67 	vmov.f32	s11, s15
 800e514:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800e518:	ee75 5a87 	vadd.f32	s11, s11, s14
 800e51c:	ee15 1a90 	vmov	r1, s11
 800e520:	4019      	ands	r1, r3
 800e522:	ee05 1a90 	vmov	s11, r1
 800e526:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800e52a:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800e52e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e532:	ee67 7a85 	vmul.f32	s15, s15, s10
 800e536:	eee6 7a25 	vfma.f32	s15, s12, s11
 800e53a:	eeb0 6a67 	vmov.f32	s12, s15
 800e53e:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800e542:	ee16 1a10 	vmov	r1, s12
 800e546:	4019      	ands	r1, r3
 800e548:	ee06 1a10 	vmov	s12, r1
 800e54c:	eeb0 7a46 	vmov.f32	s14, s12
 800e550:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800e554:	493c      	ldr	r1, [pc, #240]	@ (800e648 <__ieee754_powf+0x408>)
 800e556:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 800e55a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e55e:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800e64c <__ieee754_powf+0x40c>
 800e562:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 800e650 <__ieee754_powf+0x410>
 800e566:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e56a:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800e654 <__ieee754_powf+0x414>
 800e56e:	eee6 7a07 	vfma.f32	s15, s12, s14
 800e572:	ed91 7a00 	vldr	s14, [r1]
 800e576:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e57a:	ee07 2a10 	vmov	s14, r2
 800e57e:	4a36      	ldr	r2, [pc, #216]	@ (800e658 <__ieee754_powf+0x418>)
 800e580:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800e584:	eeb0 7a67 	vmov.f32	s14, s15
 800e588:	eea6 7a25 	vfma.f32	s14, s12, s11
 800e58c:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800e590:	ed92 5a00 	vldr	s10, [r2]
 800e594:	ee37 7a05 	vadd.f32	s14, s14, s10
 800e598:	ee37 7a26 	vadd.f32	s14, s14, s13
 800e59c:	ee17 2a10 	vmov	r2, s14
 800e5a0:	401a      	ands	r2, r3
 800e5a2:	ee07 2a10 	vmov	s14, r2
 800e5a6:	ee77 6a66 	vsub.f32	s13, s14, s13
 800e5aa:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800e5ae:	eee6 6a65 	vfms.f32	s13, s12, s11
 800e5b2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e5b6:	e715      	b.n	800e3e4 <__ieee754_powf+0x1a4>
 800e5b8:	2601      	movs	r6, #1
 800e5ba:	e75d      	b.n	800e478 <__ieee754_powf+0x238>
 800e5bc:	d152      	bne.n	800e664 <__ieee754_powf+0x424>
 800e5be:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800e65c <__ieee754_powf+0x41c>
 800e5c2:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e5c6:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800e5ca:	eef4 6ac7 	vcmpe.f32	s13, s14
 800e5ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5d2:	f73f af29 	bgt.w	800e428 <__ieee754_powf+0x1e8>
 800e5d6:	2386      	movs	r3, #134	@ 0x86
 800e5d8:	e048      	b.n	800e66c <__ieee754_powf+0x42c>
 800e5da:	4a21      	ldr	r2, [pc, #132]	@ (800e660 <__ieee754_powf+0x420>)
 800e5dc:	4293      	cmp	r3, r2
 800e5de:	d907      	bls.n	800e5f0 <__ieee754_powf+0x3b0>
 800e5e0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800e5e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5e8:	bf4c      	ite	mi
 800e5ea:	2001      	movmi	r0, #1
 800e5ec:	2000      	movpl	r0, #0
 800e5ee:	e6c7      	b.n	800e380 <__ieee754_powf+0x140>
 800e5f0:	d138      	bne.n	800e664 <__ieee754_powf+0x424>
 800e5f2:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e5f6:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800e5fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5fe:	dbea      	blt.n	800e5d6 <__ieee754_powf+0x396>
 800e600:	e7ee      	b.n	800e5e0 <__ieee754_powf+0x3a0>
 800e602:	bf00      	nop
 800e604:	00000000 	.word	0x00000000
 800e608:	3f7ffff3 	.word	0x3f7ffff3
 800e60c:	3f800007 	.word	0x3f800007
 800e610:	3eaaaaab 	.word	0x3eaaaaab
 800e614:	3fb8aa00 	.word	0x3fb8aa00
 800e618:	3fb8aa3b 	.word	0x3fb8aa3b
 800e61c:	36eca570 	.word	0x36eca570
 800e620:	4b800000 	.word	0x4b800000
 800e624:	001cc471 	.word	0x001cc471
 800e628:	005db3d6 	.word	0x005db3d6
 800e62c:	08010d48 	.word	0x08010d48
 800e630:	fffff000 	.word	0xfffff000
 800e634:	3e6c3255 	.word	0x3e6c3255
 800e638:	3e53f142 	.word	0x3e53f142
 800e63c:	3e8ba305 	.word	0x3e8ba305
 800e640:	3edb6db7 	.word	0x3edb6db7
 800e644:	3f19999a 	.word	0x3f19999a
 800e648:	08010d38 	.word	0x08010d38
 800e64c:	3f76384f 	.word	0x3f76384f
 800e650:	3f763800 	.word	0x3f763800
 800e654:	369dc3a0 	.word	0x369dc3a0
 800e658:	08010d40 	.word	0x08010d40
 800e65c:	3338aa3c 	.word	0x3338aa3c
 800e660:	43160000 	.word	0x43160000
 800e664:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 800e668:	d96f      	bls.n	800e74a <__ieee754_powf+0x50a>
 800e66a:	15db      	asrs	r3, r3, #23
 800e66c:	3b7e      	subs	r3, #126	@ 0x7e
 800e66e:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800e672:	4118      	asrs	r0, r3
 800e674:	4408      	add	r0, r1
 800e676:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800e67a:	4a4e      	ldr	r2, [pc, #312]	@ (800e7b4 <__ieee754_powf+0x574>)
 800e67c:	3b7f      	subs	r3, #127	@ 0x7f
 800e67e:	411a      	asrs	r2, r3
 800e680:	4002      	ands	r2, r0
 800e682:	ee07 2a10 	vmov	s14, r2
 800e686:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800e68a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800e68e:	f1c3 0317 	rsb	r3, r3, #23
 800e692:	4118      	asrs	r0, r3
 800e694:	2900      	cmp	r1, #0
 800e696:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e69a:	bfb8      	it	lt
 800e69c:	4240      	neglt	r0, r0
 800e69e:	ee77 6aa0 	vadd.f32	s13, s15, s1
 800e6a2:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 800e7b8 <__ieee754_powf+0x578>
 800e6a6:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 800e7bc <__ieee754_powf+0x57c>
 800e6aa:	ee16 3a90 	vmov	r3, s13
 800e6ae:	f36f 030b 	bfc	r3, #0, #12
 800e6b2:	ee06 3a90 	vmov	s13, r3
 800e6b6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800e6ba:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800e6be:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800e6c2:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 800e7c0 <__ieee754_powf+0x580>
 800e6c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e6ca:	eee0 7a87 	vfma.f32	s15, s1, s14
 800e6ce:	eeb0 7a67 	vmov.f32	s14, s15
 800e6d2:	eea6 7a86 	vfma.f32	s14, s13, s12
 800e6d6:	eef0 5a47 	vmov.f32	s11, s14
 800e6da:	eee6 5ac6 	vfms.f32	s11, s13, s12
 800e6de:	ee67 6a07 	vmul.f32	s13, s14, s14
 800e6e2:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800e6e6:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 800e7c4 <__ieee754_powf+0x584>
 800e6ea:	eddf 5a37 	vldr	s11, [pc, #220]	@ 800e7c8 <__ieee754_powf+0x588>
 800e6ee:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800e6f2:	eddf 5a36 	vldr	s11, [pc, #216]	@ 800e7cc <__ieee754_powf+0x58c>
 800e6f6:	eee6 5a26 	vfma.f32	s11, s12, s13
 800e6fa:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 800e7d0 <__ieee754_powf+0x590>
 800e6fe:	eea5 6aa6 	vfma.f32	s12, s11, s13
 800e702:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800e7d4 <__ieee754_powf+0x594>
 800e706:	eee6 5a26 	vfma.f32	s11, s12, s13
 800e70a:	eeb0 6a47 	vmov.f32	s12, s14
 800e70e:	eea5 6ae6 	vfms.f32	s12, s11, s13
 800e712:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800e716:	ee67 5a06 	vmul.f32	s11, s14, s12
 800e71a:	ee36 6a66 	vsub.f32	s12, s12, s13
 800e71e:	eee7 7a27 	vfma.f32	s15, s14, s15
 800e722:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800e726:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800e72a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e72e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e732:	ee10 3a10 	vmov	r3, s0
 800e736:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800e73a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800e73e:	da06      	bge.n	800e74e <__ieee754_powf+0x50e>
 800e740:	f000 f854 	bl	800e7ec <scalbnf>
 800e744:	ee20 0a08 	vmul.f32	s0, s0, s16
 800e748:	e592      	b.n	800e270 <__ieee754_powf+0x30>
 800e74a:	2000      	movs	r0, #0
 800e74c:	e7a7      	b.n	800e69e <__ieee754_powf+0x45e>
 800e74e:	ee00 3a10 	vmov	s0, r3
 800e752:	e7f7      	b.n	800e744 <__ieee754_powf+0x504>
 800e754:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800e758:	e58a      	b.n	800e270 <__ieee754_powf+0x30>
 800e75a:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 800e7d8 <__ieee754_powf+0x598>
 800e75e:	e587      	b.n	800e270 <__ieee754_powf+0x30>
 800e760:	eeb0 0a48 	vmov.f32	s0, s16
 800e764:	e584      	b.n	800e270 <__ieee754_powf+0x30>
 800e766:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800e76a:	f43f adbb 	beq.w	800e2e4 <__ieee754_powf+0xa4>
 800e76e:	2502      	movs	r5, #2
 800e770:	eeb0 0a48 	vmov.f32	s0, s16
 800e774:	f000 f832 	bl	800e7dc <fabsf>
 800e778:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 800e77c:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800e780:	4647      	mov	r7, r8
 800e782:	d003      	beq.n	800e78c <__ieee754_powf+0x54c>
 800e784:	f1b8 0f00 	cmp.w	r8, #0
 800e788:	f47f addb 	bne.w	800e342 <__ieee754_powf+0x102>
 800e78c:	2c00      	cmp	r4, #0
 800e78e:	bfbc      	itt	lt
 800e790:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 800e794:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800e798:	2e00      	cmp	r6, #0
 800e79a:	f6bf ad69 	bge.w	800e270 <__ieee754_powf+0x30>
 800e79e:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800e7a2:	ea58 0805 	orrs.w	r8, r8, r5
 800e7a6:	f47f adc7 	bne.w	800e338 <__ieee754_powf+0xf8>
 800e7aa:	ee70 7a40 	vsub.f32	s15, s0, s0
 800e7ae:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800e7b2:	e55d      	b.n	800e270 <__ieee754_powf+0x30>
 800e7b4:	ff800000 	.word	0xff800000
 800e7b8:	3f317218 	.word	0x3f317218
 800e7bc:	3f317200 	.word	0x3f317200
 800e7c0:	35bfbe8c 	.word	0x35bfbe8c
 800e7c4:	b5ddea0e 	.word	0xb5ddea0e
 800e7c8:	3331bb4c 	.word	0x3331bb4c
 800e7cc:	388ab355 	.word	0x388ab355
 800e7d0:	bb360b61 	.word	0xbb360b61
 800e7d4:	3e2aaaab 	.word	0x3e2aaaab
 800e7d8:	00000000 	.word	0x00000000

0800e7dc <fabsf>:
 800e7dc:	ee10 3a10 	vmov	r3, s0
 800e7e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e7e4:	ee00 3a10 	vmov	s0, r3
 800e7e8:	4770      	bx	lr
	...

0800e7ec <scalbnf>:
 800e7ec:	ee10 3a10 	vmov	r3, s0
 800e7f0:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800e7f4:	d02b      	beq.n	800e84e <scalbnf+0x62>
 800e7f6:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800e7fa:	d302      	bcc.n	800e802 <scalbnf+0x16>
 800e7fc:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e800:	4770      	bx	lr
 800e802:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800e806:	d123      	bne.n	800e850 <scalbnf+0x64>
 800e808:	4b24      	ldr	r3, [pc, #144]	@ (800e89c <scalbnf+0xb0>)
 800e80a:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800e8a0 <scalbnf+0xb4>
 800e80e:	4298      	cmp	r0, r3
 800e810:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e814:	db17      	blt.n	800e846 <scalbnf+0x5a>
 800e816:	ee10 3a10 	vmov	r3, s0
 800e81a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800e81e:	3a19      	subs	r2, #25
 800e820:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800e824:	4288      	cmp	r0, r1
 800e826:	dd15      	ble.n	800e854 <scalbnf+0x68>
 800e828:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800e8a4 <scalbnf+0xb8>
 800e82c:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800e8a8 <scalbnf+0xbc>
 800e830:	ee10 3a10 	vmov	r3, s0
 800e834:	eeb0 7a67 	vmov.f32	s14, s15
 800e838:	2b00      	cmp	r3, #0
 800e83a:	bfb8      	it	lt
 800e83c:	eef0 7a66 	vmovlt.f32	s15, s13
 800e840:	ee27 0a87 	vmul.f32	s0, s15, s14
 800e844:	4770      	bx	lr
 800e846:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800e8ac <scalbnf+0xc0>
 800e84a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800e84e:	4770      	bx	lr
 800e850:	0dd2      	lsrs	r2, r2, #23
 800e852:	e7e5      	b.n	800e820 <scalbnf+0x34>
 800e854:	4410      	add	r0, r2
 800e856:	28fe      	cmp	r0, #254	@ 0xfe
 800e858:	dce6      	bgt.n	800e828 <scalbnf+0x3c>
 800e85a:	2800      	cmp	r0, #0
 800e85c:	dd06      	ble.n	800e86c <scalbnf+0x80>
 800e85e:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800e862:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800e866:	ee00 3a10 	vmov	s0, r3
 800e86a:	4770      	bx	lr
 800e86c:	f110 0f16 	cmn.w	r0, #22
 800e870:	da09      	bge.n	800e886 <scalbnf+0x9a>
 800e872:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800e8ac <scalbnf+0xc0>
 800e876:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800e8b0 <scalbnf+0xc4>
 800e87a:	ee10 3a10 	vmov	r3, s0
 800e87e:	eeb0 7a67 	vmov.f32	s14, s15
 800e882:	2b00      	cmp	r3, #0
 800e884:	e7d9      	b.n	800e83a <scalbnf+0x4e>
 800e886:	3019      	adds	r0, #25
 800e888:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800e88c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800e890:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800e8b4 <scalbnf+0xc8>
 800e894:	ee07 3a90 	vmov	s15, r3
 800e898:	e7d7      	b.n	800e84a <scalbnf+0x5e>
 800e89a:	bf00      	nop
 800e89c:	ffff3cb0 	.word	0xffff3cb0
 800e8a0:	4c000000 	.word	0x4c000000
 800e8a4:	7149f2ca 	.word	0x7149f2ca
 800e8a8:	f149f2ca 	.word	0xf149f2ca
 800e8ac:	0da24260 	.word	0x0da24260
 800e8b0:	8da24260 	.word	0x8da24260
 800e8b4:	33000000 	.word	0x33000000

0800e8b8 <__ieee754_sqrtf>:
 800e8b8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800e8bc:	4770      	bx	lr
	...

0800e8c0 <_init>:
 800e8c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8c2:	bf00      	nop
 800e8c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e8c6:	bc08      	pop	{r3}
 800e8c8:	469e      	mov	lr, r3
 800e8ca:	4770      	bx	lr

0800e8cc <_fini>:
 800e8cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8ce:	bf00      	nop
 800e8d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e8d2:	bc08      	pop	{r3}
 800e8d4:	469e      	mov	lr, r3
 800e8d6:	4770      	bx	lr
