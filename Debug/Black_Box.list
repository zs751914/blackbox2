
Black_Box.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a22c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ae4  0800a3d0  0800a3d0  0000b3d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aeb4  0800aeb4  0000c1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800aeb4  0800aeb4  0000beb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aebc  0800aebc  0000c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aebc  0800aebc  0000bebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800aec0  0800aec0  0000bec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800aec4  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007018  200001d4  0800b098  0000c1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200071ec  0800b098  0000c1ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000167c2  00000000  00000000  0000c204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003330  00000000  00000000  000229c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013b8  00000000  00000000  00025cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fda  00000000  00000000  000270b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a2f1  00000000  00000000  0002808a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a06d  00000000  00000000  0004237b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009fceb  00000000  00000000  0005c3e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fc0d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006508  00000000  00000000  000fc118  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  00102620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a3b4 	.word	0x0800a3b4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	0800a3b4 	.word	0x0800a3b4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b988 	b.w	8000f80 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	468e      	mov	lr, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	4688      	mov	r8, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d962      	bls.n	8000d64 <__udivmoddi4+0xdc>
 8000c9e:	fab2 f682 	clz	r6, r2
 8000ca2:	b14e      	cbz	r6, 8000cb8 <__udivmoddi4+0x30>
 8000ca4:	f1c6 0320 	rsb	r3, r6, #32
 8000ca8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cac:	fa20 f303 	lsr.w	r3, r0, r3
 8000cb0:	40b7      	lsls	r7, r6
 8000cb2:	ea43 0808 	orr.w	r8, r3, r8
 8000cb6:	40b4      	lsls	r4, r6
 8000cb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cbc:	fa1f fc87 	uxth.w	ip, r7
 8000cc0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cc4:	0c23      	lsrs	r3, r4, #16
 8000cc6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cce:	fb01 f20c 	mul.w	r2, r1, ip
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd6:	18fb      	adds	r3, r7, r3
 8000cd8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cdc:	f080 80ea 	bcs.w	8000eb4 <__udivmoddi4+0x22c>
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	f240 80e7 	bls.w	8000eb4 <__udivmoddi4+0x22c>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	443b      	add	r3, r7
 8000cea:	1a9a      	subs	r2, r3, r2
 8000cec:	b2a3      	uxth	r3, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cfa:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cfe:	459c      	cmp	ip, r3
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x8e>
 8000d02:	18fb      	adds	r3, r7, r3
 8000d04:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d08:	f080 80d6 	bcs.w	8000eb8 <__udivmoddi4+0x230>
 8000d0c:	459c      	cmp	ip, r3
 8000d0e:	f240 80d3 	bls.w	8000eb8 <__udivmoddi4+0x230>
 8000d12:	443b      	add	r3, r7
 8000d14:	3802      	subs	r0, #2
 8000d16:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1a:	eba3 030c 	sub.w	r3, r3, ip
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11d      	cbz	r5, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40f3      	lsrs	r3, r6
 8000d24:	2200      	movs	r2, #0
 8000d26:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d905      	bls.n	8000d3e <__udivmoddi4+0xb6>
 8000d32:	b10d      	cbz	r5, 8000d38 <__udivmoddi4+0xb0>
 8000d34:	e9c5 0100 	strd	r0, r1, [r5]
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4608      	mov	r0, r1
 8000d3c:	e7f5      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d3e:	fab3 f183 	clz	r1, r3
 8000d42:	2900      	cmp	r1, #0
 8000d44:	d146      	bne.n	8000dd4 <__udivmoddi4+0x14c>
 8000d46:	4573      	cmp	r3, lr
 8000d48:	d302      	bcc.n	8000d50 <__udivmoddi4+0xc8>
 8000d4a:	4282      	cmp	r2, r0
 8000d4c:	f200 8105 	bhi.w	8000f5a <__udivmoddi4+0x2d2>
 8000d50:	1a84      	subs	r4, r0, r2
 8000d52:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d56:	2001      	movs	r0, #1
 8000d58:	4690      	mov	r8, r2
 8000d5a:	2d00      	cmp	r5, #0
 8000d5c:	d0e5      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d5e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d62:	e7e2      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f000 8090 	beq.w	8000e8a <__udivmoddi4+0x202>
 8000d6a:	fab2 f682 	clz	r6, r2
 8000d6e:	2e00      	cmp	r6, #0
 8000d70:	f040 80a4 	bne.w	8000ebc <__udivmoddi4+0x234>
 8000d74:	1a8a      	subs	r2, r1, r2
 8000d76:	0c03      	lsrs	r3, r0, #16
 8000d78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7c:	b280      	uxth	r0, r0
 8000d7e:	b2bc      	uxth	r4, r7
 8000d80:	2101      	movs	r1, #1
 8000d82:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d86:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d8e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d92:	429a      	cmp	r2, r3
 8000d94:	d907      	bls.n	8000da6 <__udivmoddi4+0x11e>
 8000d96:	18fb      	adds	r3, r7, r3
 8000d98:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d9c:	d202      	bcs.n	8000da4 <__udivmoddi4+0x11c>
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	f200 80e0 	bhi.w	8000f64 <__udivmoddi4+0x2dc>
 8000da4:	46c4      	mov	ip, r8
 8000da6:	1a9b      	subs	r3, r3, r2
 8000da8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dac:	fb0e 3312 	mls	r3, lr, r2, r3
 8000db0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000db4:	fb02 f404 	mul.w	r4, r2, r4
 8000db8:	429c      	cmp	r4, r3
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x144>
 8000dbc:	18fb      	adds	r3, r7, r3
 8000dbe:	f102 30ff 	add.w	r0, r2, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x142>
 8000dc4:	429c      	cmp	r4, r3
 8000dc6:	f200 80ca 	bhi.w	8000f5e <__udivmoddi4+0x2d6>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	1b1b      	subs	r3, r3, r4
 8000dce:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dd2:	e7a5      	b.n	8000d20 <__udivmoddi4+0x98>
 8000dd4:	f1c1 0620 	rsb	r6, r1, #32
 8000dd8:	408b      	lsls	r3, r1
 8000dda:	fa22 f706 	lsr.w	r7, r2, r6
 8000dde:	431f      	orrs	r7, r3
 8000de0:	fa0e f401 	lsl.w	r4, lr, r1
 8000de4:	fa20 f306 	lsr.w	r3, r0, r6
 8000de8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000dec:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000df0:	4323      	orrs	r3, r4
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	fa1f fc87 	uxth.w	ip, r7
 8000dfa:	fbbe f0f9 	udiv	r0, lr, r9
 8000dfe:	0c1c      	lsrs	r4, r3, #16
 8000e00:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e04:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e08:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e0c:	45a6      	cmp	lr, r4
 8000e0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e12:	d909      	bls.n	8000e28 <__udivmoddi4+0x1a0>
 8000e14:	193c      	adds	r4, r7, r4
 8000e16:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e1a:	f080 809c 	bcs.w	8000f56 <__udivmoddi4+0x2ce>
 8000e1e:	45a6      	cmp	lr, r4
 8000e20:	f240 8099 	bls.w	8000f56 <__udivmoddi4+0x2ce>
 8000e24:	3802      	subs	r0, #2
 8000e26:	443c      	add	r4, r7
 8000e28:	eba4 040e 	sub.w	r4, r4, lr
 8000e2c:	fa1f fe83 	uxth.w	lr, r3
 8000e30:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e34:	fb09 4413 	mls	r4, r9, r3, r4
 8000e38:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e3c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e40:	45a4      	cmp	ip, r4
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x1ce>
 8000e44:	193c      	adds	r4, r7, r4
 8000e46:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e4a:	f080 8082 	bcs.w	8000f52 <__udivmoddi4+0x2ca>
 8000e4e:	45a4      	cmp	ip, r4
 8000e50:	d97f      	bls.n	8000f52 <__udivmoddi4+0x2ca>
 8000e52:	3b02      	subs	r3, #2
 8000e54:	443c      	add	r4, r7
 8000e56:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e5a:	eba4 040c 	sub.w	r4, r4, ip
 8000e5e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e62:	4564      	cmp	r4, ip
 8000e64:	4673      	mov	r3, lr
 8000e66:	46e1      	mov	r9, ip
 8000e68:	d362      	bcc.n	8000f30 <__udivmoddi4+0x2a8>
 8000e6a:	d05f      	beq.n	8000f2c <__udivmoddi4+0x2a4>
 8000e6c:	b15d      	cbz	r5, 8000e86 <__udivmoddi4+0x1fe>
 8000e6e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e72:	eb64 0409 	sbc.w	r4, r4, r9
 8000e76:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e7e:	431e      	orrs	r6, r3
 8000e80:	40cc      	lsrs	r4, r1
 8000e82:	e9c5 6400 	strd	r6, r4, [r5]
 8000e86:	2100      	movs	r1, #0
 8000e88:	e74f      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000e8a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e8e:	0c01      	lsrs	r1, r0, #16
 8000e90:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e94:	b280      	uxth	r0, r0
 8000e96:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e9a:	463b      	mov	r3, r7
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	463c      	mov	r4, r7
 8000ea0:	46b8      	mov	r8, r7
 8000ea2:	46be      	mov	lr, r7
 8000ea4:	2620      	movs	r6, #32
 8000ea6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eaa:	eba2 0208 	sub.w	r2, r2, r8
 8000eae:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000eb2:	e766      	b.n	8000d82 <__udivmoddi4+0xfa>
 8000eb4:	4601      	mov	r1, r0
 8000eb6:	e718      	b.n	8000cea <__udivmoddi4+0x62>
 8000eb8:	4610      	mov	r0, r2
 8000eba:	e72c      	b.n	8000d16 <__udivmoddi4+0x8e>
 8000ebc:	f1c6 0220 	rsb	r2, r6, #32
 8000ec0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ec4:	40b7      	lsls	r7, r6
 8000ec6:	40b1      	lsls	r1, r6
 8000ec8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ecc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ed0:	430a      	orrs	r2, r1
 8000ed2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ed6:	b2bc      	uxth	r4, r7
 8000ed8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000edc:	0c11      	lsrs	r1, r2, #16
 8000ede:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee2:	fb08 f904 	mul.w	r9, r8, r4
 8000ee6:	40b0      	lsls	r0, r6
 8000ee8:	4589      	cmp	r9, r1
 8000eea:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000eee:	b280      	uxth	r0, r0
 8000ef0:	d93e      	bls.n	8000f70 <__udivmoddi4+0x2e8>
 8000ef2:	1879      	adds	r1, r7, r1
 8000ef4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ef8:	d201      	bcs.n	8000efe <__udivmoddi4+0x276>
 8000efa:	4589      	cmp	r9, r1
 8000efc:	d81f      	bhi.n	8000f3e <__udivmoddi4+0x2b6>
 8000efe:	eba1 0109 	sub.w	r1, r1, r9
 8000f02:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f06:	fb09 f804 	mul.w	r8, r9, r4
 8000f0a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f0e:	b292      	uxth	r2, r2
 8000f10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f14:	4542      	cmp	r2, r8
 8000f16:	d229      	bcs.n	8000f6c <__udivmoddi4+0x2e4>
 8000f18:	18ba      	adds	r2, r7, r2
 8000f1a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f1e:	d2c4      	bcs.n	8000eaa <__udivmoddi4+0x222>
 8000f20:	4542      	cmp	r2, r8
 8000f22:	d2c2      	bcs.n	8000eaa <__udivmoddi4+0x222>
 8000f24:	f1a9 0102 	sub.w	r1, r9, #2
 8000f28:	443a      	add	r2, r7
 8000f2a:	e7be      	b.n	8000eaa <__udivmoddi4+0x222>
 8000f2c:	45f0      	cmp	r8, lr
 8000f2e:	d29d      	bcs.n	8000e6c <__udivmoddi4+0x1e4>
 8000f30:	ebbe 0302 	subs.w	r3, lr, r2
 8000f34:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f38:	3801      	subs	r0, #1
 8000f3a:	46e1      	mov	r9, ip
 8000f3c:	e796      	b.n	8000e6c <__udivmoddi4+0x1e4>
 8000f3e:	eba7 0909 	sub.w	r9, r7, r9
 8000f42:	4449      	add	r1, r9
 8000f44:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f48:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f4c:	fb09 f804 	mul.w	r8, r9, r4
 8000f50:	e7db      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f52:	4673      	mov	r3, lr
 8000f54:	e77f      	b.n	8000e56 <__udivmoddi4+0x1ce>
 8000f56:	4650      	mov	r0, sl
 8000f58:	e766      	b.n	8000e28 <__udivmoddi4+0x1a0>
 8000f5a:	4608      	mov	r0, r1
 8000f5c:	e6fd      	b.n	8000d5a <__udivmoddi4+0xd2>
 8000f5e:	443b      	add	r3, r7
 8000f60:	3a02      	subs	r2, #2
 8000f62:	e733      	b.n	8000dcc <__udivmoddi4+0x144>
 8000f64:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f68:	443b      	add	r3, r7
 8000f6a:	e71c      	b.n	8000da6 <__udivmoddi4+0x11e>
 8000f6c:	4649      	mov	r1, r9
 8000f6e:	e79c      	b.n	8000eaa <__udivmoddi4+0x222>
 8000f70:	eba1 0109 	sub.w	r1, r1, r9
 8000f74:	46c4      	mov	ip, r8
 8000f76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f7a:	fb09 f804 	mul.w	r8, r9, r4
 8000f7e:	e7c4      	b.n	8000f0a <__udivmoddi4+0x282>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f8a:	463b      	mov	r3, r7
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f96:	4b22      	ldr	r3, [pc, #136]	@ (8001020 <MX_ADC1_Init+0x9c>)
 8000f98:	4a22      	ldr	r2, [pc, #136]	@ (8001024 <MX_ADC1_Init+0xa0>)
 8000f9a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f9c:	4b20      	ldr	r3, [pc, #128]	@ (8001020 <MX_ADC1_Init+0x9c>)
 8000f9e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000fa2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fa4:	4b1e      	ldr	r3, [pc, #120]	@ (8001020 <MX_ADC1_Init+0x9c>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000faa:	4b1d      	ldr	r3, [pc, #116]	@ (8001020 <MX_ADC1_Init+0x9c>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fb0:	4b1b      	ldr	r3, [pc, #108]	@ (8001020 <MX_ADC1_Init+0x9c>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fb6:	4b1a      	ldr	r3, [pc, #104]	@ (8001020 <MX_ADC1_Init+0x9c>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000fbe:	4b18      	ldr	r3, [pc, #96]	@ (8001020 <MX_ADC1_Init+0x9c>)
 8000fc0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000fc4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000fc6:	4b16      	ldr	r3, [pc, #88]	@ (8001020 <MX_ADC1_Init+0x9c>)
 8000fc8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000fcc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fce:	4b14      	ldr	r3, [pc, #80]	@ (8001020 <MX_ADC1_Init+0x9c>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000fd4:	4b12      	ldr	r3, [pc, #72]	@ (8001020 <MX_ADC1_Init+0x9c>)
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000fda:	4b11      	ldr	r3, [pc, #68]	@ (8001020 <MX_ADC1_Init+0x9c>)
 8000fdc:	2201      	movs	r2, #1
 8000fde:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fe2:	4b0f      	ldr	r3, [pc, #60]	@ (8001020 <MX_ADC1_Init+0x9c>)
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fe8:	480d      	ldr	r0, [pc, #52]	@ (8001020 <MX_ADC1_Init+0x9c>)
 8000fea:	f002 fecf 	bl	8003d8c <HAL_ADC_Init>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000ff4:	f002 f890 	bl	8003118 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001000:	2300      	movs	r3, #0
 8001002:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001004:	463b      	mov	r3, r7
 8001006:	4619      	mov	r1, r3
 8001008:	4805      	ldr	r0, [pc, #20]	@ (8001020 <MX_ADC1_Init+0x9c>)
 800100a:	f003 f975 	bl	80042f8 <HAL_ADC_ConfigChannel>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001014:	f002 f880 	bl	8003118 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001018:	bf00      	nop
 800101a:	3710      	adds	r7, #16
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	200001f0 	.word	0x200001f0
 8001024:	40012000 	.word	0x40012000

08001028 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b08a      	sub	sp, #40	@ 0x28
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001030:	f107 0314 	add.w	r3, r7, #20
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a32      	ldr	r2, [pc, #200]	@ (8001110 <HAL_ADC_MspInit+0xe8>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d15e      	bne.n	8001108 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	613b      	str	r3, [r7, #16]
 800104e:	4b31      	ldr	r3, [pc, #196]	@ (8001114 <HAL_ADC_MspInit+0xec>)
 8001050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001052:	4a30      	ldr	r2, [pc, #192]	@ (8001114 <HAL_ADC_MspInit+0xec>)
 8001054:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001058:	6453      	str	r3, [r2, #68]	@ 0x44
 800105a:	4b2e      	ldr	r3, [pc, #184]	@ (8001114 <HAL_ADC_MspInit+0xec>)
 800105c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800105e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001062:	613b      	str	r3, [r7, #16]
 8001064:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	60fb      	str	r3, [r7, #12]
 800106a:	4b2a      	ldr	r3, [pc, #168]	@ (8001114 <HAL_ADC_MspInit+0xec>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106e:	4a29      	ldr	r2, [pc, #164]	@ (8001114 <HAL_ADC_MspInit+0xec>)
 8001070:	f043 0301 	orr.w	r3, r3, #1
 8001074:	6313      	str	r3, [r2, #48]	@ 0x30
 8001076:	4b27      	ldr	r3, [pc, #156]	@ (8001114 <HAL_ADC_MspInit+0xec>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_6;
 8001082:	2362      	movs	r3, #98	@ 0x62
 8001084:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001086:	2303      	movs	r3, #3
 8001088:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	2300      	movs	r3, #0
 800108c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108e:	f107 0314 	add.w	r3, r7, #20
 8001092:	4619      	mov	r1, r3
 8001094:	4820      	ldr	r0, [pc, #128]	@ (8001118 <HAL_ADC_MspInit+0xf0>)
 8001096:	f004 f8db 	bl	8005250 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800109a:	4b20      	ldr	r3, [pc, #128]	@ (800111c <HAL_ADC_MspInit+0xf4>)
 800109c:	4a20      	ldr	r2, [pc, #128]	@ (8001120 <HAL_ADC_MspInit+0xf8>)
 800109e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80010a0:	4b1e      	ldr	r3, [pc, #120]	@ (800111c <HAL_ADC_MspInit+0xf4>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010a6:	4b1d      	ldr	r3, [pc, #116]	@ (800111c <HAL_ADC_MspInit+0xf4>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80010ac:	4b1b      	ldr	r3, [pc, #108]	@ (800111c <HAL_ADC_MspInit+0xf4>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80010b2:	4b1a      	ldr	r3, [pc, #104]	@ (800111c <HAL_ADC_MspInit+0xf4>)
 80010b4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010b8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010ba:	4b18      	ldr	r3, [pc, #96]	@ (800111c <HAL_ADC_MspInit+0xf4>)
 80010bc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80010c0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010c2:	4b16      	ldr	r3, [pc, #88]	@ (800111c <HAL_ADC_MspInit+0xf4>)
 80010c4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010c8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80010ca:	4b14      	ldr	r3, [pc, #80]	@ (800111c <HAL_ADC_MspInit+0xf4>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80010d0:	4b12      	ldr	r3, [pc, #72]	@ (800111c <HAL_ADC_MspInit+0xf4>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010d6:	4b11      	ldr	r3, [pc, #68]	@ (800111c <HAL_ADC_MspInit+0xf4>)
 80010d8:	2200      	movs	r2, #0
 80010da:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80010dc:	480f      	ldr	r0, [pc, #60]	@ (800111c <HAL_ADC_MspInit+0xf4>)
 80010de:	f003 fcd7 	bl	8004a90 <HAL_DMA_Init>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 80010e8:	f002 f816 	bl	8003118 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	4a0b      	ldr	r2, [pc, #44]	@ (800111c <HAL_ADC_MspInit+0xf4>)
 80010f0:	639a      	str	r2, [r3, #56]	@ 0x38
 80010f2:	4a0a      	ldr	r2, [pc, #40]	@ (800111c <HAL_ADC_MspInit+0xf4>)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80010f8:	2200      	movs	r2, #0
 80010fa:	2100      	movs	r1, #0
 80010fc:	2012      	movs	r0, #18
 80010fe:	f003 fc90 	bl	8004a22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001102:	2012      	movs	r0, #18
 8001104:	f003 fca9 	bl	8004a5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001108:	bf00      	nop
 800110a:	3728      	adds	r7, #40	@ 0x28
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	40012000 	.word	0x40012000
 8001114:	40023800 	.word	0x40023800
 8001118:	40020000 	.word	0x40020000
 800111c:	20000238 	.word	0x20000238
 8001120:	40026410 	.word	0x40026410

08001124 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	607b      	str	r3, [r7, #4]
 800112e:	4b0c      	ldr	r3, [pc, #48]	@ (8001160 <MX_DMA_Init+0x3c>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001132:	4a0b      	ldr	r2, [pc, #44]	@ (8001160 <MX_DMA_Init+0x3c>)
 8001134:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001138:	6313      	str	r3, [r2, #48]	@ 0x30
 800113a:	4b09      	ldr	r3, [pc, #36]	@ (8001160 <MX_DMA_Init+0x3c>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001142:	607b      	str	r3, [r7, #4]
 8001144:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001146:	2200      	movs	r2, #0
 8001148:	2100      	movs	r1, #0
 800114a:	2038      	movs	r0, #56	@ 0x38
 800114c:	f003 fc69 	bl	8004a22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001150:	2038      	movs	r0, #56	@ 0x38
 8001152:	f003 fc82 	bl	8004a5a <HAL_NVIC_EnableIRQ>

}
 8001156:	bf00      	nop
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40023800 	.word	0x40023800

08001164 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b088      	sub	sp, #32
 8001168:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116a:	f107 030c 	add.w	r3, r7, #12
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	609a      	str	r2, [r3, #8]
 8001176:	60da      	str	r2, [r3, #12]
 8001178:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	60bb      	str	r3, [r7, #8]
 800117e:	4b30      	ldr	r3, [pc, #192]	@ (8001240 <MX_GPIO_Init+0xdc>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001182:	4a2f      	ldr	r2, [pc, #188]	@ (8001240 <MX_GPIO_Init+0xdc>)
 8001184:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001188:	6313      	str	r3, [r2, #48]	@ 0x30
 800118a:	4b2d      	ldr	r3, [pc, #180]	@ (8001240 <MX_GPIO_Init+0xdc>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001192:	60bb      	str	r3, [r7, #8]
 8001194:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	607b      	str	r3, [r7, #4]
 800119a:	4b29      	ldr	r3, [pc, #164]	@ (8001240 <MX_GPIO_Init+0xdc>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119e:	4a28      	ldr	r2, [pc, #160]	@ (8001240 <MX_GPIO_Init+0xdc>)
 80011a0:	f043 0301 	orr.w	r3, r3, #1
 80011a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011a6:	4b26      	ldr	r3, [pc, #152]	@ (8001240 <MX_GPIO_Init+0xdc>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	607b      	str	r3, [r7, #4]
 80011b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	603b      	str	r3, [r7, #0]
 80011b6:	4b22      	ldr	r3, [pc, #136]	@ (8001240 <MX_GPIO_Init+0xdc>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ba:	4a21      	ldr	r2, [pc, #132]	@ (8001240 <MX_GPIO_Init+0xdc>)
 80011bc:	f043 0302 	orr.w	r3, r3, #2
 80011c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001240 <MX_GPIO_Init+0xdc>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c6:	f003 0302 	and.w	r3, r3, #2
 80011ca:	603b      	str	r3, [r7, #0]
 80011cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STEP_PIN_Pin|GPIO_PIN_4|STEP2_PIN_Pin, GPIO_PIN_RESET);
 80011ce:	2200      	movs	r2, #0
 80011d0:	2191      	movs	r1, #145	@ 0x91
 80011d2:	481c      	ldr	r0, [pc, #112]	@ (8001244 <MX_GPIO_Init+0xe0>)
 80011d4:	f004 f9c0 	bl	8005558 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80011d8:	2200      	movs	r2, #0
 80011da:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80011de:	481a      	ldr	r0, [pc, #104]	@ (8001248 <MX_GPIO_Init+0xe4>)
 80011e0:	f004 f9ba 	bl	8005558 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : STEP_PIN_Pin PA4 STEP2_PIN_Pin */
  GPIO_InitStruct.Pin = STEP_PIN_Pin|GPIO_PIN_4|STEP2_PIN_Pin;
 80011e4:	2391      	movs	r3, #145	@ 0x91
 80011e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e8:	2301      	movs	r3, #1
 80011ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f0:	2300      	movs	r3, #0
 80011f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f4:	f107 030c 	add.w	r3, r7, #12
 80011f8:	4619      	mov	r1, r3
 80011fa:	4812      	ldr	r0, [pc, #72]	@ (8001244 <MX_GPIO_Init+0xe0>)
 80011fc:	f004 f828 	bl	8005250 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_14;
 8001200:	f244 0302 	movw	r3, #16386	@ 0x4002
 8001204:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001206:	2300      	movs	r3, #0
 8001208:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800120e:	f107 030c 	add.w	r3, r7, #12
 8001212:	4619      	mov	r1, r3
 8001214:	480c      	ldr	r0, [pc, #48]	@ (8001248 <MX_GPIO_Init+0xe4>)
 8001216:	f004 f81b 	bl	8005250 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800121a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800121e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001220:	2301      	movs	r3, #1
 8001222:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001228:	2300      	movs	r3, #0
 800122a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800122c:	f107 030c 	add.w	r3, r7, #12
 8001230:	4619      	mov	r1, r3
 8001232:	4805      	ldr	r0, [pc, #20]	@ (8001248 <MX_GPIO_Init+0xe4>)
 8001234:	f004 f80c 	bl	8005250 <HAL_GPIO_Init>

}
 8001238:	bf00      	nop
 800123a:	3720      	adds	r7, #32
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40023800 	.word	0x40023800
 8001244:	40020000 	.word	0x40020000
 8001248:	40020400 	.word	0x40020400

0800124c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001250:	4b12      	ldr	r3, [pc, #72]	@ (800129c <MX_I2C1_Init+0x50>)
 8001252:	4a13      	ldr	r2, [pc, #76]	@ (80012a0 <MX_I2C1_Init+0x54>)
 8001254:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001256:	4b11      	ldr	r3, [pc, #68]	@ (800129c <MX_I2C1_Init+0x50>)
 8001258:	4a12      	ldr	r2, [pc, #72]	@ (80012a4 <MX_I2C1_Init+0x58>)
 800125a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800125c:	4b0f      	ldr	r3, [pc, #60]	@ (800129c <MX_I2C1_Init+0x50>)
 800125e:	2200      	movs	r2, #0
 8001260:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001262:	4b0e      	ldr	r3, [pc, #56]	@ (800129c <MX_I2C1_Init+0x50>)
 8001264:	2200      	movs	r2, #0
 8001266:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001268:	4b0c      	ldr	r3, [pc, #48]	@ (800129c <MX_I2C1_Init+0x50>)
 800126a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800126e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001270:	4b0a      	ldr	r3, [pc, #40]	@ (800129c <MX_I2C1_Init+0x50>)
 8001272:	2200      	movs	r2, #0
 8001274:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001276:	4b09      	ldr	r3, [pc, #36]	@ (800129c <MX_I2C1_Init+0x50>)
 8001278:	2200      	movs	r2, #0
 800127a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800127c:	4b07      	ldr	r3, [pc, #28]	@ (800129c <MX_I2C1_Init+0x50>)
 800127e:	2200      	movs	r2, #0
 8001280:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001282:	4b06      	ldr	r3, [pc, #24]	@ (800129c <MX_I2C1_Init+0x50>)
 8001284:	2200      	movs	r2, #0
 8001286:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001288:	4804      	ldr	r0, [pc, #16]	@ (800129c <MX_I2C1_Init+0x50>)
 800128a:	f004 f97f 	bl	800558c <HAL_I2C_Init>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001294:	f001 ff40 	bl	8003118 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001298:	bf00      	nop
 800129a:	bd80      	pop	{r7, pc}
 800129c:	20000298 	.word	0x20000298
 80012a0:	40005400 	.word	0x40005400
 80012a4:	000186a0 	.word	0x000186a0

080012a8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08a      	sub	sp, #40	@ 0x28
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b0:	f107 0314 	add.w	r3, r7, #20
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
 80012be:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a19      	ldr	r2, [pc, #100]	@ (800132c <HAL_I2C_MspInit+0x84>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d12b      	bne.n	8001322 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	613b      	str	r3, [r7, #16]
 80012ce:	4b18      	ldr	r3, [pc, #96]	@ (8001330 <HAL_I2C_MspInit+0x88>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d2:	4a17      	ldr	r2, [pc, #92]	@ (8001330 <HAL_I2C_MspInit+0x88>)
 80012d4:	f043 0302 	orr.w	r3, r3, #2
 80012d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012da:	4b15      	ldr	r3, [pc, #84]	@ (8001330 <HAL_I2C_MspInit+0x88>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	613b      	str	r3, [r7, #16]
 80012e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012e6:	23c0      	movs	r3, #192	@ 0xc0
 80012e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012ea:	2312      	movs	r3, #18
 80012ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f2:	2303      	movs	r3, #3
 80012f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012f6:	2304      	movs	r3, #4
 80012f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012fa:	f107 0314 	add.w	r3, r7, #20
 80012fe:	4619      	mov	r1, r3
 8001300:	480c      	ldr	r0, [pc, #48]	@ (8001334 <HAL_I2C_MspInit+0x8c>)
 8001302:	f003 ffa5 	bl	8005250 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	60fb      	str	r3, [r7, #12]
 800130a:	4b09      	ldr	r3, [pc, #36]	@ (8001330 <HAL_I2C_MspInit+0x88>)
 800130c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800130e:	4a08      	ldr	r2, [pc, #32]	@ (8001330 <HAL_I2C_MspInit+0x88>)
 8001310:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001314:	6413      	str	r3, [r2, #64]	@ 0x40
 8001316:	4b06      	ldr	r3, [pc, #24]	@ (8001330 <HAL_I2C_MspInit+0x88>)
 8001318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800131a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001322:	bf00      	nop
 8001324:	3728      	adds	r7, #40	@ 0x28
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40005400 	.word	0x40005400
 8001330:	40023800 	.word	0x40023800
 8001334:	40020400 	.word	0x40020400

08001338 <HAL_ADC_ConvCpltCallback>:
float VPA0F;
char message1[128];     //输出显示
char message2[128];
char msg[40];
// DMA完成回调函数
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
	measurement_done = 1;
 8001340:	4b04      	ldr	r3, [pc, #16]	@ (8001354 <HAL_ADC_ConvCpltCallback+0x1c>)
 8001342:	2201      	movs	r2, #1
 8001344:	701a      	strb	r2, [r3, #0]
//	GPIO_Set_Low(GPIOA, GPIO_PIN_0);
//	GPIO_Set_Low(GPIOA, GPIO_PIN_4);
//	GPIO_Set_Low(GPIOA, GPIO_PIN_7);
}
 8001346:	bf00      	nop
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	20006a30 	.word	0x20006a30

08001358 <HAL_ADC_ErrorCallback>:
//DMA错误处理
void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc) {
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
	if (hadc->ErrorCode & HAL_ADC_ERROR_DMA) {
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
	}
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <component_test>:
	}
	// 初始化测量次数为0
	black_box.measurement_count = 0;
}

void component_test() {
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
	GPIO_Set_HighZ(GPIOA, GPIO_PIN_4);
 8001374:	2110      	movs	r1, #16
 8001376:	482a      	ldr	r0, [pc, #168]	@ (8001420 <component_test+0xb0>)
 8001378:	f000 f872 	bl	8001460 <GPIO_Set_HighZ>
	GPIO_Set_HighZ(GPIOB, GPIO_PIN_15);
 800137c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001380:	4828      	ldr	r0, [pc, #160]	@ (8001424 <component_test+0xb4>)
 8001382:	f000 f86d 	bl	8001460 <GPIO_Set_HighZ>
	GPIO_Set_Low(GPIOA, GPIO_PIN_0);
 8001386:	2101      	movs	r1, #1
 8001388:	4825      	ldr	r0, [pc, #148]	@ (8001420 <component_test+0xb0>)
 800138a:	f000 f8b3 	bl	80014f4 <GPIO_Set_Low>
	GPIO_Set_Low(GPIOA, GPIO_PIN_7);
 800138e:	2180      	movs	r1, #128	@ 0x80
 8001390:	4823      	ldr	r0, [pc, #140]	@ (8001420 <component_test+0xb0>)
 8001392:	f000 f8af 	bl	80014f4 <GPIO_Set_Low>
	//memset(adc_buffer1_com, 0, sizeof(adc_buffer1_com));
	DMA_Measure_com(1, adc_buffer1_com);
 8001396:	4924      	ldr	r1, [pc, #144]	@ (8001428 <component_test+0xb8>)
 8001398:	2001      	movs	r0, #1
 800139a:	f001 fc1b 	bl	8002bd4 <DMA_Measure_com>
	VPA1Z = VPA1;
 800139e:	4b23      	ldr	r3, [pc, #140]	@ (800142c <component_test+0xbc>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a23      	ldr	r2, [pc, #140]	@ (8001430 <component_test+0xc0>)
 80013a4:	6013      	str	r3, [r2, #0]
	VPA0Z = VPA0;
 80013a6:	4b23      	ldr	r3, [pc, #140]	@ (8001434 <component_test+0xc4>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a23      	ldr	r2, [pc, #140]	@ (8001438 <component_test+0xc8>)
 80013ac:	6013      	str	r3, [r2, #0]
	VPA7Z = VPA7;
 80013ae:	4b23      	ldr	r3, [pc, #140]	@ (800143c <component_test+0xcc>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a23      	ldr	r2, [pc, #140]	@ (8001440 <component_test+0xd0>)
 80013b4:	6013      	str	r3, [r2, #0]
	GPIO_Set_HighZ(GPIOA, GPIO_PIN_4);
 80013b6:	2110      	movs	r1, #16
 80013b8:	4819      	ldr	r0, [pc, #100]	@ (8001420 <component_test+0xb0>)
 80013ba:	f000 f851 	bl	8001460 <GPIO_Set_HighZ>
	GPIO_Set_HighZ(GPIOB, GPIO_PIN_15);
 80013be:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80013c2:	4818      	ldr	r0, [pc, #96]	@ (8001424 <component_test+0xb4>)
 80013c4:	f000 f84c 	bl	8001460 <GPIO_Set_HighZ>
	//memset(adc_buffer2_com, 0, sizeof(adc_buffer2_com));
	DMA_Measure_com(2, adc_buffer2_com);
 80013c8:	491e      	ldr	r1, [pc, #120]	@ (8001444 <component_test+0xd4>)
 80013ca:	2002      	movs	r0, #2
 80013cc:	f001 fc02 	bl	8002bd4 <DMA_Measure_com>
	VPA1F = VPA1;
 80013d0:	4b16      	ldr	r3, [pc, #88]	@ (800142c <component_test+0xbc>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a1c      	ldr	r2, [pc, #112]	@ (8001448 <component_test+0xd8>)
 80013d6:	6013      	str	r3, [r2, #0]
	VPA0F = VPA0;
 80013d8:	4b16      	ldr	r3, [pc, #88]	@ (8001434 <component_test+0xc4>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a1b      	ldr	r2, [pc, #108]	@ (800144c <component_test+0xdc>)
 80013de:	6013      	str	r3, [r2, #0]
	VPA7F = VPA7;
 80013e0:	4b16      	ldr	r3, [pc, #88]	@ (800143c <component_test+0xcc>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a1a      	ldr	r2, [pc, #104]	@ (8001450 <component_test+0xe0>)
 80013e6:	6013      	str	r3, [r2, #0]
	if (adc_buffer1_com[20] >= 0.98 * VREF && adc_buffer2_com[20] <= 0.01f) {
 80013e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001428 <component_test+0xb8>)
 80013ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013ec:	2b03      	cmp	r3, #3
 80013ee:	d911      	bls.n	8001414 <component_test+0xa4>
 80013f0:	4b14      	ldr	r3, [pc, #80]	@ (8001444 <component_test+0xd4>)
 80013f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013f4:	ee07 3a90 	vmov	s15, r3
 80013f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013fc:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8001454 <component_test+0xe4>
 8001400:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001408:	d804      	bhi.n	8001414 <component_test+0xa4>
		sprintf(msg, "no load");
 800140a:	4913      	ldr	r1, [pc, #76]	@ (8001458 <component_test+0xe8>)
 800140c:	4813      	ldr	r0, [pc, #76]	@ (800145c <component_test+0xec>)
 800140e:	f006 fc8f 	bl	8007d30 <siprintf>
 8001412:	e002      	b.n	800141a <component_test+0xaa>
	} else {
		Determine_component();
 8001414:	f000 f8c0 	bl	8001598 <Determine_component>
	}
}
 8001418:	bf00      	nop
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	40020000 	.word	0x40020000
 8001424:	40020400 	.word	0x40020400
 8001428:	20000320 	.word	0x20000320
 800142c:	20006a34 	.word	0x20006a34
 8001430:	20006a38 	.word	0x20006a38
 8001434:	20006a4c 	.word	0x20006a4c
 8001438:	20006a50 	.word	0x20006a50
 800143c:	20006a40 	.word	0x20006a40
 8001440:	20006a44 	.word	0x20006a44
 8001444:	20001320 	.word	0x20001320
 8001448:	20006a3c 	.word	0x20006a3c
 800144c:	20006a54 	.word	0x20006a54
 8001450:	20006a48 	.word	0x20006a48
 8001454:	3c23d70a 	.word	0x3c23d70a
 8001458:	0800a3d0 	.word	0x0800a3d0
 800145c:	20006b58 	.word	0x20006b58

08001460 <GPIO_Set_HighZ>:

void GPIO_Set_HighZ(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8001460:	b580      	push	{r7, lr}
 8001462:	b08a      	sub	sp, #40	@ 0x28
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	460b      	mov	r3, r1
 800146a:	807b      	strh	r3, [r7, #2]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800146c:	2300      	movs	r3, #0
 800146e:	613b      	str	r3, [r7, #16]
 8001470:	4b1f      	ldr	r3, [pc, #124]	@ (80014f0 <GPIO_Set_HighZ+0x90>)
 8001472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001474:	4a1e      	ldr	r2, [pc, #120]	@ (80014f0 <GPIO_Set_HighZ+0x90>)
 8001476:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800147a:	6313      	str	r3, [r2, #48]	@ 0x30
 800147c:	4b1c      	ldr	r3, [pc, #112]	@ (80014f0 <GPIO_Set_HighZ+0x90>)
 800147e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001480:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001484:	613b      	str	r3, [r7, #16]
 8001486:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001488:	2300      	movs	r3, #0
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	4b18      	ldr	r3, [pc, #96]	@ (80014f0 <GPIO_Set_HighZ+0x90>)
 800148e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001490:	4a17      	ldr	r2, [pc, #92]	@ (80014f0 <GPIO_Set_HighZ+0x90>)
 8001492:	f043 0301 	orr.w	r3, r3, #1
 8001496:	6313      	str	r3, [r2, #48]	@ 0x30
 8001498:	4b15      	ldr	r3, [pc, #84]	@ (80014f0 <GPIO_Set_HighZ+0x90>)
 800149a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149c:	f003 0301 	and.w	r3, r3, #1
 80014a0:	60fb      	str	r3, [r7, #12]
 80014a2:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80014a4:	2300      	movs	r3, #0
 80014a6:	60bb      	str	r3, [r7, #8]
 80014a8:	4b11      	ldr	r3, [pc, #68]	@ (80014f0 <GPIO_Set_HighZ+0x90>)
 80014aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ac:	4a10      	ldr	r2, [pc, #64]	@ (80014f0 <GPIO_Set_HighZ+0x90>)
 80014ae:	f043 0302 	orr.w	r3, r3, #2
 80014b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80014b4:	4b0e      	ldr	r3, [pc, #56]	@ (80014f0 <GPIO_Set_HighZ+0x90>)
 80014b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b8:	f003 0302 	and.w	r3, r3, #2
 80014bc:	60bb      	str	r3, [r7, #8]
 80014be:	68bb      	ldr	r3, [r7, #8]

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80014c0:	f107 0314 	add.w	r3, r7, #20
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	60da      	str	r2, [r3, #12]
 80014ce:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80014d0:	887b      	ldrh	r3, [r7, #2]
 80014d2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;  // 输入模式
 80014d4:	2300      	movs	r3, #0
 80014d6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;      // 无上拉/下拉 → 高阻态
 80014d8:	2300      	movs	r3, #0
 80014da:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80014dc:	f107 0314 	add.w	r3, r7, #20
 80014e0:	4619      	mov	r1, r3
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f003 feb4 	bl	8005250 <HAL_GPIO_Init>
}
 80014e8:	bf00      	nop
 80014ea:	3728      	adds	r7, #40	@ 0x28
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	40023800 	.word	0x40023800

080014f4 <GPIO_Set_Low>:
 * @brief  设置GPIO为低电平输出
 * @param  GPIOx: GPIO端口
 * @param  GPIO_Pin: 引脚号
 * @retval 无
 */
void GPIO_Set_Low(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b08a      	sub	sp, #40	@ 0x28
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	460b      	mov	r3, r1
 80014fe:	807b      	strh	r3, [r7, #2]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001500:	2300      	movs	r3, #0
 8001502:	613b      	str	r3, [r7, #16]
 8001504:	4b22      	ldr	r3, [pc, #136]	@ (8001590 <GPIO_Set_Low+0x9c>)
 8001506:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001508:	4a21      	ldr	r2, [pc, #132]	@ (8001590 <GPIO_Set_Low+0x9c>)
 800150a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800150e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001510:	4b1f      	ldr	r3, [pc, #124]	@ (8001590 <GPIO_Set_Low+0x9c>)
 8001512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001514:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001518:	613b      	str	r3, [r7, #16]
 800151a:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800151c:	2300      	movs	r3, #0
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	4b1b      	ldr	r3, [pc, #108]	@ (8001590 <GPIO_Set_Low+0x9c>)
 8001522:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001524:	4a1a      	ldr	r2, [pc, #104]	@ (8001590 <GPIO_Set_Low+0x9c>)
 8001526:	f043 0301 	orr.w	r3, r3, #1
 800152a:	6313      	str	r3, [r2, #48]	@ 0x30
 800152c:	4b18      	ldr	r3, [pc, #96]	@ (8001590 <GPIO_Set_Low+0x9c>)
 800152e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001530:	f003 0301 	and.w	r3, r3, #1
 8001534:	60fb      	str	r3, [r7, #12]
 8001536:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001538:	2300      	movs	r3, #0
 800153a:	60bb      	str	r3, [r7, #8]
 800153c:	4b14      	ldr	r3, [pc, #80]	@ (8001590 <GPIO_Set_Low+0x9c>)
 800153e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001540:	4a13      	ldr	r2, [pc, #76]	@ (8001590 <GPIO_Set_Low+0x9c>)
 8001542:	f043 0302 	orr.w	r3, r3, #2
 8001546:	6313      	str	r3, [r2, #48]	@ 0x30
 8001548:	4b11      	ldr	r3, [pc, #68]	@ (8001590 <GPIO_Set_Low+0x9c>)
 800154a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154c:	f003 0302 	and.w	r3, r3, #2
 8001550:	60bb      	str	r3, [r7, #8]
 8001552:	68bb      	ldr	r3, [r7, #8]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001554:	f107 0314 	add.w	r3, r7, #20
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	605a      	str	r2, [r3, #4]
 800155e:	609a      	str	r2, [r3, #8]
 8001560:	60da      	str	r2, [r3, #12]
 8001562:	611a      	str	r2, [r3, #16]
	// 先配置为输出模式
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001564:	887b      	ldrh	r3, [r7, #2]
 8001566:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;   // 推挽输出
 8001568:	2301      	movs	r3, #1
 800156a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156c:	2300      	movs	r3, #0
 800156e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001570:	f107 0314 	add.w	r3, r7, #20
 8001574:	4619      	mov	r1, r3
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f003 fe6a 	bl	8005250 <HAL_GPIO_Init>

	// 再设置低电平
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 800157c:	887b      	ldrh	r3, [r7, #2]
 800157e:	2200      	movs	r2, #0
 8001580:	4619      	mov	r1, r3
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f003 ffe8 	bl	8005558 <HAL_GPIO_WritePin>
}
 8001588:	bf00      	nop
 800158a:	3728      	adds	r7, #40	@ 0x28
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	40023800 	.word	0x40023800
 8001594:	00000000 	.word	0x00000000

08001598 <Determine_component>:
//
void Determine_component() {
 8001598:	b5b0      	push	{r4, r5, r7, lr}
 800159a:	b0c4      	sub	sp, #272	@ 0x110
 800159c:	af00      	add	r7, sp, #0

	if (Analyze_trend(adc_buffer1_com, VPA1Z) == 1
 800159e:	4bcc      	ldr	r3, [pc, #816]	@ (80018d0 <Determine_component+0x338>)
 80015a0:	edd3 7a00 	vldr	s15, [r3]
 80015a4:	eeb0 0a67 	vmov.f32	s0, s15
 80015a8:	48ca      	ldr	r0, [pc, #808]	@ (80018d4 <Determine_component+0x33c>)
 80015aa:	f001 f8b1 	bl	8002710 <Analyze_trend>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	f040 845c 	bne.w	8001e6e <Determine_component+0x8d6>
			&& Analyze_trend(adc_buffer2_com, VPA1F) == -1) {
 80015b6:	4bc8      	ldr	r3, [pc, #800]	@ (80018d8 <Determine_component+0x340>)
 80015b8:	edd3 7a00 	vldr	s15, [r3]
 80015bc:	eeb0 0a67 	vmov.f32	s0, s15
 80015c0:	48c6      	ldr	r0, [pc, #792]	@ (80018dc <Determine_component+0x344>)
 80015c2:	f001 f8a5 	bl	8002710 <Analyze_trend>
 80015c6:	4603      	mov	r3, r0
 80015c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015cc:	f040 844f 	bne.w	8001e6e <Determine_component+0x8d6>
		component.type = COMPONENT_C;
 80015d0:	4bc3      	ldr	r3, [pc, #780]	@ (80018e0 <Determine_component+0x348>)
 80015d2:	2202      	movs	r2, #2
 80015d4:	701a      	strb	r2, [r3, #0]
		if (steady_test(adc_buffer1_com, VPA1Z)) {
 80015d6:	4bbe      	ldr	r3, [pc, #760]	@ (80018d0 <Determine_component+0x338>)
 80015d8:	edd3 7a00 	vldr	s15, [r3]
 80015dc:	eeb0 0a67 	vmov.f32	s0, s15
 80015e0:	48bc      	ldr	r0, [pc, #752]	@ (80018d4 <Determine_component+0x33c>)
 80015e2:	f000 ffe5 	bl	80025b0 <steady_test>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	f000 8213 	beq.w	8001a14 <Determine_component+0x47c>
			if (Find_tau_com(adc_buffer1_com)) {
 80015ee:	48b9      	ldr	r0, [pc, #740]	@ (80018d4 <Determine_component+0x33c>)
 80015f0:	f000 fe96 	bl	8002320 <Find_tau_com>
 80015f4:	eef0 7a40 	vmov.f32	s15, s0
 80015f8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80015fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001600:	d062      	beq.n	80016c8 <Determine_component+0x130>
				float tau = Find_tau_com(adc_buffer1_com);
 8001602:	48b4      	ldr	r0, [pc, #720]	@ (80018d4 <Determine_component+0x33c>)
 8001604:	f000 fe8c 	bl	8002320 <Find_tau_com>
 8001608:	ed87 0a0f 	vstr	s0, [r7, #60]	@ 0x3c
				float v_initial = 0.0f;
 800160c:	f04f 0300 	mov.w	r3, #0
 8001610:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
				//int initial_index;
				for (int i = 0; i < BUFFER_SIZE; i++) {
 8001614:	2300      	movs	r3, #0
 8001616:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800161a:	e024      	b.n	8001666 <Determine_component+0xce>
					float voltage = (adc_buffer1_com[i] * VREF) / 4095.0f;
 800161c:	4aad      	ldr	r2, [pc, #692]	@ (80018d4 <Determine_component+0x33c>)
 800161e:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001622:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001626:	ee07 3a90 	vmov	s15, r3
 800162a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800162e:	ed9f 7aad 	vldr	s14, [pc, #692]	@ 80018e4 <Determine_component+0x34c>
 8001632:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001636:	eddf 6aac 	vldr	s13, [pc, #688]	@ 80018e8 <Determine_component+0x350>
 800163a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800163e:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
					if (voltage > MIN_VOLTAGE) {
 8001642:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001646:	ed9f 7aa9 	vldr	s14, [pc, #676]	@ 80018ec <Determine_component+0x354>
 800164a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800164e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001652:	dd03      	ble.n	800165c <Determine_component+0xc4>
						v_initial = voltage;
 8001654:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001656:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
						//initial_index=i;
						break;
 800165a:	e009      	b.n	8001670 <Determine_component+0xd8>
				for (int i = 0; i < BUFFER_SIZE; i++) {
 800165c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001660:	3301      	adds	r3, #1
 8001662:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8001666:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800166a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800166e:	dbd5      	blt.n	800161c <Determine_component+0x84>
					}
				}
				float r_com = (v_initial * R_KNOWN) / (VREF - v_initial);
 8001670:	edd7 7a43 	vldr	s15, [r7, #268]	@ 0x10c
 8001674:	ed9f 7a9e 	vldr	s14, [pc, #632]	@ 80018f0 <Determine_component+0x358>
 8001678:	ee67 6a87 	vmul.f32	s13, s15, s14
 800167c:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 80018e4 <Determine_component+0x34c>
 8001680:	edd7 7a43 	vldr	s15, [r7, #268]	@ 0x10c
 8001684:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001688:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800168c:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
				float c_com = tau / r_com;
 8001690:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 8001694:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001698:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800169c:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
				sprintf(message1, "Rs=%.2fΩ", r_com);
 80016a0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80016a2:	f7fe ff59 	bl	8000558 <__aeabi_f2d>
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	4992      	ldr	r1, [pc, #584]	@ (80018f4 <Determine_component+0x35c>)
 80016ac:	4892      	ldr	r0, [pc, #584]	@ (80018f8 <Determine_component+0x360>)
 80016ae:	f006 fb3f 	bl	8007d30 <siprintf>
				sprintf(message2, "Cs=%.4fuF", c_com);
 80016b2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80016b4:	f7fe ff50 	bl	8000558 <__aeabi_f2d>
 80016b8:	4602      	mov	r2, r0
 80016ba:	460b      	mov	r3, r1
 80016bc:	498f      	ldr	r1, [pc, #572]	@ (80018fc <Determine_component+0x364>)
 80016be:	4890      	ldr	r0, [pc, #576]	@ (8001900 <Determine_component+0x368>)
 80016c0:	f006 fb36 	bl	8007d30 <siprintf>
		if (steady_test(adc_buffer1_com, VPA1Z)) {
 80016c4:	f000 bdf5 	b.w	80022b2 <Determine_component+0xd1a>
			} else {
				float v_initial = 0.0f;
 80016c8:	f04f 0300 	mov.w	r3, #0
 80016cc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
				//int initial_index;
				for (int i = 0; i < BUFFER_SIZE; i++) {
 80016d0:	2300      	movs	r3, #0
 80016d2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80016d6:	e024      	b.n	8001722 <Determine_component+0x18a>
					float voltage = (adc_buffer1_com[i] * VREF) / 4095.0f;
 80016d8:	4a7e      	ldr	r2, [pc, #504]	@ (80018d4 <Determine_component+0x33c>)
 80016da:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80016de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016e2:	ee07 3a90 	vmov	s15, r3
 80016e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016ea:	ed9f 7a7e 	vldr	s14, [pc, #504]	@ 80018e4 <Determine_component+0x34c>
 80016ee:	ee27 7a87 	vmul.f32	s14, s15, s14
 80016f2:	eddf 6a7d 	vldr	s13, [pc, #500]	@ 80018e8 <Determine_component+0x350>
 80016f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016fa:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
					if (voltage > MIN_VOLTAGE) {
 80016fe:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8001702:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 80018ec <Determine_component+0x354>
 8001706:	eef4 7ac7 	vcmpe.f32	s15, s14
 800170a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800170e:	dd03      	ble.n	8001718 <Determine_component+0x180>
						v_initial = voltage;
 8001710:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001712:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
						//initial_index=i;
						break;
 8001716:	e009      	b.n	800172c <Determine_component+0x194>
				for (int i = 0; i < BUFFER_SIZE; i++) {
 8001718:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800171c:	3301      	adds	r3, #1
 800171e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8001722:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8001726:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800172a:	dbd5      	blt.n	80016d8 <Determine_component+0x140>
					}
				}
				float r_com = (v_initial * R_KNOWN) / (VREF - v_initial);
 800172c:	edd7 7a41 	vldr	s15, [r7, #260]	@ 0x104
 8001730:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 80018f0 <Determine_component+0x358>
 8001734:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001738:	ed9f 7a6a 	vldr	s14, [pc, #424]	@ 80018e4 <Determine_component+0x34c>
 800173c:	edd7 7a41 	vldr	s15, [r7, #260]	@ 0x104
 8001740:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001744:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001748:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
				//确定是电容，换用5.1k
				GPIO_Set_HighZ(GPIOA, GPIO_PIN_0);
 800174c:	2101      	movs	r1, #1
 800174e:	486d      	ldr	r0, [pc, #436]	@ (8001904 <Determine_component+0x36c>)
 8001750:	f7ff fe86 	bl	8001460 <GPIO_Set_HighZ>
				GPIO_Set_Low(GPIOA, GPIO_PIN_4);
 8001754:	2110      	movs	r1, #16
 8001756:	486b      	ldr	r0, [pc, #428]	@ (8001904 <Determine_component+0x36c>)
 8001758:	f7ff fecc 	bl	80014f4 <GPIO_Set_Low>
				GPIO_Set_Low(GPIOA, GPIO_PIN_7);
 800175c:	2180      	movs	r1, #128	@ 0x80
 800175e:	4869      	ldr	r0, [pc, #420]	@ (8001904 <Determine_component+0x36c>)
 8001760:	f7ff fec8 	bl	80014f4 <GPIO_Set_Low>
				GPIO_Set_HighZ(GPIOB, GPIO_PIN_15);
 8001764:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001768:	4867      	ldr	r0, [pc, #412]	@ (8001908 <Determine_component+0x370>)
 800176a:	f7ff fe79 	bl	8001460 <GPIO_Set_HighZ>
				memset(adc_buffer1_com, 0, sizeof(adc_buffer1_com));
 800176e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001772:	2100      	movs	r1, #0
 8001774:	4857      	ldr	r0, [pc, #348]	@ (80018d4 <Determine_component+0x33c>)
 8001776:	f006 fb50 	bl	8007e1a <memset>
				DMA_Measure_com(3, adc_buffer1_com);
 800177a:	4956      	ldr	r1, [pc, #344]	@ (80018d4 <Determine_component+0x33c>)
 800177c:	2003      	movs	r0, #3
 800177e:	f001 fa29 	bl	8002bd4 <DMA_Measure_com>
				VPA1Z = VPA1;
 8001782:	4b62      	ldr	r3, [pc, #392]	@ (800190c <Determine_component+0x374>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a52      	ldr	r2, [pc, #328]	@ (80018d0 <Determine_component+0x338>)
 8001788:	6013      	str	r3, [r2, #0]
				if (steady_test(adc_buffer1_com, VPA1Z)) {
 800178a:	4b51      	ldr	r3, [pc, #324]	@ (80018d0 <Determine_component+0x338>)
 800178c:	edd3 7a00 	vldr	s15, [r3]
 8001790:	eeb0 0a67 	vmov.f32	s0, s15
 8001794:	484f      	ldr	r0, [pc, #316]	@ (80018d4 <Determine_component+0x33c>)
 8001796:	f000 ff0b 	bl	80025b0 <steady_test>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d059      	beq.n	8001854 <Determine_component+0x2bc>
					float tau = Find_tau_com(adc_buffer1_com);
 80017a0:	484c      	ldr	r0, [pc, #304]	@ (80018d4 <Determine_component+0x33c>)
 80017a2:	f000 fdbd 	bl	8002320 <Find_tau_com>
 80017a6:	ed87 0a13 	vstr	s0, [r7, #76]	@ 0x4c
					float v_initial = 0.0f;
 80017aa:	f04f 0300 	mov.w	r3, #0
 80017ae:	64bb      	str	r3, [r7, #72]	@ 0x48
					//int initial_index;
					for (int i = 0; i < BUFFER_SIZE; i++) {
 80017b0:	2300      	movs	r3, #0
 80017b2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80017b6:	e023      	b.n	8001800 <Determine_component+0x268>
						float voltage = (adc_buffer1_com[i] * VREF) / 4095.0f;
 80017b8:	4a46      	ldr	r2, [pc, #280]	@ (80018d4 <Determine_component+0x33c>)
 80017ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80017be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017c2:	ee07 3a90 	vmov	s15, r3
 80017c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017ca:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 80018e4 <Determine_component+0x34c>
 80017ce:	ee27 7a87 	vmul.f32	s14, s15, s14
 80017d2:	eddf 6a45 	vldr	s13, [pc, #276]	@ 80018e8 <Determine_component+0x350>
 80017d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017da:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
						if (voltage > MIN_VOLTAGE) {
 80017de:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80017e2:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 80018ec <Determine_component+0x354>
 80017e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ee:	dd02      	ble.n	80017f6 <Determine_component+0x25e>
							v_initial = voltage;
 80017f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80017f2:	64bb      	str	r3, [r7, #72]	@ 0x48
							//initial_index=i;
							break;
 80017f4:	e009      	b.n	800180a <Determine_component+0x272>
					for (int i = 0; i < BUFFER_SIZE; i++) {
 80017f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80017fa:	3301      	adds	r3, #1
 80017fc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001800:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001804:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001808:	dbd6      	blt.n	80017b8 <Determine_component+0x220>
						}
					}
					//float r_com = (v_initial * 5100) / (VREF - v_initial);
					float c_com = tau / (r_com + 5100);
 800180a:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 800180e:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8001910 <Determine_component+0x378>
 8001812:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001816:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 800181a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800181e:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
					sprintf(message1, "Rs=%.2fΩ", r_com);
 8001822:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8001824:	f7fe fe98 	bl	8000558 <__aeabi_f2d>
 8001828:	4602      	mov	r2, r0
 800182a:	460b      	mov	r3, r1
 800182c:	4931      	ldr	r1, [pc, #196]	@ (80018f4 <Determine_component+0x35c>)
 800182e:	4832      	ldr	r0, [pc, #200]	@ (80018f8 <Determine_component+0x360>)
 8001830:	f006 fa7e 	bl	8007d30 <siprintf>
					sprintf(message2, "Cs=%.4fuF", c_com * 1e6);
 8001834:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8001836:	f7fe fe8f 	bl	8000558 <__aeabi_f2d>
 800183a:	a323      	add	r3, pc, #140	@ (adr r3, 80018c8 <Determine_component+0x330>)
 800183c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001840:	f7fe fee2 	bl	8000608 <__aeabi_dmul>
 8001844:	4602      	mov	r2, r0
 8001846:	460b      	mov	r3, r1
 8001848:	492c      	ldr	r1, [pc, #176]	@ (80018fc <Determine_component+0x364>)
 800184a:	482d      	ldr	r0, [pc, #180]	@ (8001900 <Determine_component+0x368>)
 800184c:	f006 fa70 	bl	8007d30 <siprintf>
		if (steady_test(adc_buffer1_com, VPA1Z)) {
 8001850:	f000 bd2f 	b.w	80022b2 <Determine_component+0xd1a>
				} else {   //换电阻后未达稳态
					float v_target1 = (adc_buffer1_com[800] * VREF) / 4095.0f;
 8001854:	4b1f      	ldr	r3, [pc, #124]	@ (80018d4 <Determine_component+0x33c>)
 8001856:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	@ 0x640
 800185a:	ee07 3a90 	vmov	s15, r3
 800185e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001862:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 80018e4 <Determine_component+0x34c>
 8001866:	ee27 7a87 	vmul.f32	s14, s15, s14
 800186a:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 80018e8 <Determine_component+0x350>
 800186e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001872:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
					float v_initial = 0.0f;
 8001876:	f04f 0300 	mov.w	r3, #0
 800187a:	66fb      	str	r3, [r7, #108]	@ 0x6c
					//int initial_index;
					for (int i = 0; i < BUFFER_SIZE; i++) {
 800187c:	2300      	movs	r3, #0
 800187e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8001882:	e04c      	b.n	800191e <Determine_component+0x386>
						float voltage = (adc_buffer1_com[i] * VREF) / 4095.0f;
 8001884:	4a13      	ldr	r2, [pc, #76]	@ (80018d4 <Determine_component+0x33c>)
 8001886:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800188a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800188e:	ee07 3a90 	vmov	s15, r3
 8001892:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001896:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 80018e4 <Determine_component+0x34c>
 800189a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800189e:	eddf 6a12 	vldr	s13, [pc, #72]	@ 80018e8 <Determine_component+0x350>
 80018a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018a6:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
						if (voltage > MIN_VOLTAGE) {
 80018aa:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 80018ae:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80018ec <Determine_component+0x354>
 80018b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ba:	dd2b      	ble.n	8001914 <Determine_component+0x37c>
							v_initial = voltage;
 80018bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80018be:	66fb      	str	r3, [r7, #108]	@ 0x6c
							//initial_index=i;
							break;
 80018c0:	e032      	b.n	8001928 <Determine_component+0x390>
 80018c2:	bf00      	nop
 80018c4:	f3af 8000 	nop.w
 80018c8:	00000000 	.word	0x00000000
 80018cc:	412e8480 	.word	0x412e8480
 80018d0:	20006a38 	.word	0x20006a38
 80018d4:	20000320 	.word	0x20000320
 80018d8:	20006a3c 	.word	0x20006a3c
 80018dc:	20001320 	.word	0x20001320
 80018e0:	200002ec 	.word	0x200002ec
 80018e4:	40533333 	.word	0x40533333
 80018e8:	457ff000 	.word	0x457ff000
 80018ec:	3d4ccccd 	.word	0x3d4ccccd
 80018f0:	424c0000 	.word	0x424c0000
 80018f4:	0800a3d8 	.word	0x0800a3d8
 80018f8:	20006a58 	.word	0x20006a58
 80018fc:	0800a3e4 	.word	0x0800a3e4
 8001900:	20006ad8 	.word	0x20006ad8
 8001904:	40020000 	.word	0x40020000
 8001908:	40020400 	.word	0x40020400
 800190c:	20006a34 	.word	0x20006a34
 8001910:	459f6000 	.word	0x459f6000
					for (int i = 0; i < BUFFER_SIZE; i++) {
 8001914:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001918:	3301      	adds	r3, #1
 800191a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800191e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001922:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001926:	dbad      	blt.n	8001884 <Determine_component+0x2ec>
						}
					}
					int target1_index = 800;
 8001928:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800192c:	667b      	str	r3, [r7, #100]	@ 0x64
					float v_target2 = (adc_buffer1_com[1600] * VREF) / 4095.0f;
 800192e:	4bda      	ldr	r3, [pc, #872]	@ (8001c98 <Determine_component+0x700>)
 8001930:	f8b3 3c80 	ldrh.w	r3, [r3, #3200]	@ 0xc80
 8001934:	ee07 3a90 	vmov	s15, r3
 8001938:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800193c:	ed9f 7ad7 	vldr	s14, [pc, #860]	@ 8001c9c <Determine_component+0x704>
 8001940:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001944:	eddf 6ad6 	vldr	s13, [pc, #856]	@ 8001ca0 <Determine_component+0x708>
 8001948:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800194c:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
					;
					int target2_index = 1600;
 8001950:	f44f 63c8 	mov.w	r3, #1600	@ 0x640
 8001954:	65fb      	str	r3, [r7, #92]	@ 0x5c
					float delta_t = (target2_index - target1_index)
 8001956:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001958:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800195a:	1ad3      	subs	r3, r2, r3
							/ (float) SAMPLE_RATE;
 800195c:	ee07 3a90 	vmov	s15, r3
 8001960:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
					float delta_t = (target2_index - target1_index)
 8001964:	eddf 6acf 	vldr	s13, [pc, #828]	@ 8001ca4 <Determine_component+0x70c>
 8001968:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800196c:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
					// 计算时间常数τ = Δt / ln[(V_ss - v1)/(V_ss - v2)]
					float tau = delta_t
							/ log((VPA1Z - v_target1) / (VPA1Z - v_target2));
 8001970:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8001972:	f7fe fdf1 	bl	8000558 <__aeabi_f2d>
 8001976:	4604      	mov	r4, r0
 8001978:	460d      	mov	r5, r1
 800197a:	4bcb      	ldr	r3, [pc, #812]	@ (8001ca8 <Determine_component+0x710>)
 800197c:	ed93 7a00 	vldr	s14, [r3]
 8001980:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8001984:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001988:	4bc7      	ldr	r3, [pc, #796]	@ (8001ca8 <Determine_component+0x710>)
 800198a:	edd3 6a00 	vldr	s13, [r3]
 800198e:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8001992:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001996:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800199a:	ee16 0a90 	vmov	r0, s13
 800199e:	f7fe fddb 	bl	8000558 <__aeabi_f2d>
 80019a2:	4602      	mov	r2, r0
 80019a4:	460b      	mov	r3, r1
 80019a6:	ec43 2b10 	vmov	d0, r2, r3
 80019aa:	f008 fb05 	bl	8009fb8 <log>
 80019ae:	ec53 2b10 	vmov	r2, r3, d0
 80019b2:	4620      	mov	r0, r4
 80019b4:	4629      	mov	r1, r5
 80019b6:	f7fe ff51 	bl	800085c <__aeabi_ddiv>
 80019ba:	4602      	mov	r2, r0
 80019bc:	460b      	mov	r3, r1
					float tau = delta_t
 80019be:	4610      	mov	r0, r2
 80019c0:	4619      	mov	r1, r3
 80019c2:	f7ff f8f9 	bl	8000bb8 <__aeabi_d2f>
 80019c6:	4603      	mov	r3, r0
 80019c8:	657b      	str	r3, [r7, #84]	@ 0x54
					//float   r_com=(v_initial* 5100) / (VREF - v_initial);
					float c_com = tau / (r_com + 5100);
 80019ca:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80019ce:	ed9f 7ab7 	vldr	s14, [pc, #732]	@ 8001cac <Determine_component+0x714>
 80019d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80019d6:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 80019da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019de:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
					sprintf(message1, "Rs=%.2fΩ", r_com);
 80019e2:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 80019e4:	f7fe fdb8 	bl	8000558 <__aeabi_f2d>
 80019e8:	4602      	mov	r2, r0
 80019ea:	460b      	mov	r3, r1
 80019ec:	49b0      	ldr	r1, [pc, #704]	@ (8001cb0 <Determine_component+0x718>)
 80019ee:	48b1      	ldr	r0, [pc, #708]	@ (8001cb4 <Determine_component+0x71c>)
 80019f0:	f006 f99e 	bl	8007d30 <siprintf>
					sprintf(message2, "Cs=%.4fuF", c_com * 1e6);
 80019f4:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80019f6:	f7fe fdaf 	bl	8000558 <__aeabi_f2d>
 80019fa:	a3a3      	add	r3, pc, #652	@ (adr r3, 8001c88 <Determine_component+0x6f0>)
 80019fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a00:	f7fe fe02 	bl	8000608 <__aeabi_dmul>
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	49ab      	ldr	r1, [pc, #684]	@ (8001cb8 <Determine_component+0x720>)
 8001a0a:	48ac      	ldr	r0, [pc, #688]	@ (8001cbc <Determine_component+0x724>)
 8001a0c:	f006 f990 	bl	8007d30 <siprintf>
		if (steady_test(adc_buffer1_com, VPA1Z)) {
 8001a10:	f000 bc4f 	b.w	80022b2 <Determine_component+0xd1a>
			}

		} else {
			float v_initial;
			float index;
			int find = 0;
 8001a14:	2300      	movs	r3, #0
 8001a16:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
			float initial_index;
			for (int i = 0; i < BUFFER_SIZE; i++) {
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001a20:	e02d      	b.n	8001a7e <Determine_component+0x4e6>
				float voltage = (adc_buffer1_com[i] * VREF) / 4095.0f;
 8001a22:	4a9d      	ldr	r2, [pc, #628]	@ (8001c98 <Determine_component+0x700>)
 8001a24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001a28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a2c:	ee07 3a90 	vmov	s15, r3
 8001a30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a34:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 8001c9c <Determine_component+0x704>
 8001a38:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001a3c:	eddf 6a98 	vldr	s13, [pc, #608]	@ 8001ca0 <Determine_component+0x708>
 8001a40:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a44:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
				if (voltage > MIN_VOLTAGE) {
 8001a48:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 8001a4c:	ed9f 7a9c 	vldr	s14, [pc, #624]	@ 8001cc0 <Determine_component+0x728>
 8001a50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a58:	dd0c      	ble.n	8001a74 <Determine_component+0x4dc>
					v_initial = voltage;
 8001a5a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001a5e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
					initial_index = i;
 8001a62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001a66:	ee07 3a90 	vmov	s15, r3
 8001a6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a6e:	edc7 7a3a 	vstr	s15, [r7, #232]	@ 0xe8
					break;
 8001a72:	e009      	b.n	8001a88 <Determine_component+0x4f0>
			for (int i = 0; i < BUFFER_SIZE; i++) {
 8001a74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001a78:	3301      	adds	r3, #1
 8001a7a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001a7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001a82:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001a86:	dbcc      	blt.n	8001a22 <Determine_component+0x48a>
				}
			}
			//float r_com = (v_initial * R_KNOWN) / (VREF - v_initial);
			float v_target = 0.632 * VPA1Z;
 8001a88:	4b87      	ldr	r3, [pc, #540]	@ (8001ca8 <Determine_component+0x710>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7fe fd63 	bl	8000558 <__aeabi_f2d>
 8001a92:	a37f      	add	r3, pc, #508	@ (adr r3, 8001c90 <Determine_component+0x6f8>)
 8001a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a98:	f7fe fdb6 	bl	8000608 <__aeabi_dmul>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	4610      	mov	r0, r2
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	f7ff f888 	bl	8000bb8 <__aeabi_d2f>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
			for (int i = 0; i < BUFFER_SIZE; i++) {
 8001aae:	2300      	movs	r3, #0
 8001ab0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001ab4:	e038      	b.n	8001b28 <Determine_component+0x590>
				float voltage = (adc_buffer1_com[i] * VREF) / 4095.0f;
 8001ab6:	4a78      	ldr	r2, [pc, #480]	@ (8001c98 <Determine_component+0x700>)
 8001ab8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001abc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ac0:	ee07 3a90 	vmov	s15, r3
 8001ac4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ac8:	ed9f 7a74 	vldr	s14, [pc, #464]	@ 8001c9c <Determine_component+0x704>
 8001acc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ad0:	eddf 6a73 	vldr	s13, [pc, #460]	@ 8001ca0 <Determine_component+0x708>
 8001ad4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ad8:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
				if (voltage >= v_target) {
 8001adc:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 8001ae0:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8001ae4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aec:	db17      	blt.n	8001b1e <Determine_component+0x586>
					index = i;
 8001aee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001af2:	ee07 3a90 	vmov	s15, r3
 8001af6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001afa:	edc7 7a3c 	vstr	s15, [r7, #240]	@ 0xf0
					if (index < BUFFER_SIZE - 1) {
 8001afe:	edd7 7a3c 	vldr	s15, [r7, #240]	@ 0xf0
 8001b02:	ed9f 7a70 	vldr	s14, [pc, #448]	@ 8001cc4 <Determine_component+0x72c>
 8001b06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b0e:	d503      	bpl.n	8001b18 <Determine_component+0x580>
						find = 1;
 8001b10:	2301      	movs	r3, #1
 8001b12:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
						break;
 8001b16:	e00c      	b.n	8001b32 <Determine_component+0x59a>
					} else {
						find = 0;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
			for (int i = 0; i < BUFFER_SIZE; i++) {
 8001b1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001b22:	3301      	adds	r3, #1
 8001b24:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001b28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001b2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001b30:	dbc1      	blt.n	8001ab6 <Determine_component+0x51e>
					}
				}
			}
			if (find == 1) {
 8001b32:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d142      	bne.n	8001bc0 <Determine_component+0x628>
				float tau = (index - initial_index) * 2 / 1000000;
 8001b3a:	ed97 7a3c 	vldr	s14, [r7, #240]	@ 0xf0
 8001b3e:	edd7 7a3a 	vldr	s15, [r7, #232]	@ 0xe8
 8001b42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b46:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001b4a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8001cc8 <Determine_component+0x730>
 8001b4e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b52:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
				float r_com = (v_initial * R_KNOWN) / (VREF - v_initial);
 8001b56:	edd7 7a3d 	vldr	s15, [r7, #244]	@ 0xf4
 8001b5a:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 8001ccc <Determine_component+0x734>
 8001b5e:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001b62:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8001c9c <Determine_component+0x704>
 8001b66:	edd7 7a3d 	vldr	s15, [r7, #244]	@ 0xf4
 8001b6a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b72:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
				float c_com = tau / (r_com + R_KNOWN);
 8001b76:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8001b7a:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 8001ccc <Determine_component+0x734>
 8001b7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001b82:	edd7 6a21 	vldr	s13, [r7, #132]	@ 0x84
 8001b86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b8a:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
				sprintf(message1, "Rs=%.2fΩ", r_com);
 8001b8e:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8001b92:	f7fe fce1 	bl	8000558 <__aeabi_f2d>
 8001b96:	4602      	mov	r2, r0
 8001b98:	460b      	mov	r3, r1
 8001b9a:	4945      	ldr	r1, [pc, #276]	@ (8001cb0 <Determine_component+0x718>)
 8001b9c:	4845      	ldr	r0, [pc, #276]	@ (8001cb4 <Determine_component+0x71c>)
 8001b9e:	f006 f8c7 	bl	8007d30 <siprintf>
				sprintf(message2, "Cs=%.4fuF", c_com * 1e6);
 8001ba2:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8001ba4:	f7fe fcd8 	bl	8000558 <__aeabi_f2d>
 8001ba8:	a337      	add	r3, pc, #220	@ (adr r3, 8001c88 <Determine_component+0x6f0>)
 8001baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bae:	f7fe fd2b 	bl	8000608 <__aeabi_dmul>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	4940      	ldr	r1, [pc, #256]	@ (8001cb8 <Determine_component+0x720>)
 8001bb8:	4840      	ldr	r0, [pc, #256]	@ (8001cbc <Determine_component+0x724>)
 8001bba:	f006 f8b9 	bl	8007d30 <siprintf>
		if (steady_test(adc_buffer1_com, VPA1Z)) {
 8001bbe:	e378      	b.n	80022b2 <Determine_component+0xd1a>
			} else {
				HAL_Delay(50);  // 10ms放电
 8001bc0:	2032      	movs	r0, #50	@ 0x32
 8001bc2:	f002 f8bf 	bl	8003d44 <HAL_Delay>
				// 2. 启动DMA采样
				GPIO_Set_Low(GPIOA, GPIO_PIN_0);
 8001bc6:	2101      	movs	r1, #1
 8001bc8:	4841      	ldr	r0, [pc, #260]	@ (8001cd0 <Determine_component+0x738>)
 8001bca:	f7ff fc93 	bl	80014f4 <GPIO_Set_Low>
				GPIO_Set_HighZ(GPIOA, GPIO_PIN_4);
 8001bce:	2110      	movs	r1, #16
 8001bd0:	483f      	ldr	r0, [pc, #252]	@ (8001cd0 <Determine_component+0x738>)
 8001bd2:	f7ff fc45 	bl	8001460 <GPIO_Set_HighZ>
				GPIO_Set_Low(GPIOA, GPIO_PIN_7);
 8001bd6:	2180      	movs	r1, #128	@ 0x80
 8001bd8:	483d      	ldr	r0, [pc, #244]	@ (8001cd0 <Determine_component+0x738>)
 8001bda:	f7ff fc8b 	bl	80014f4 <GPIO_Set_Low>
				GPIO_Set_HighZ(GPIOB, GPIO_PIN_15);
 8001bde:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001be2:	483c      	ldr	r0, [pc, #240]	@ (8001cd4 <Determine_component+0x73c>)
 8001be4:	f7ff fc3c 	bl	8001460 <GPIO_Set_HighZ>
				uint32_t start_tick = HAL_GetTick();
 8001be8:	f002 f8a0 	bl	8003d2c <HAL_GetTick>
 8001bec:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
				HAL_ADC_Start_DMA(&hadc1, (uint32_t*) bigadc_buffer,
 8001bf0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bf4:	4938      	ldr	r1, [pc, #224]	@ (8001cd8 <Determine_component+0x740>)
 8001bf6:	4839      	ldr	r0, [pc, #228]	@ (8001cdc <Determine_component+0x744>)
 8001bf8:	f002 fa1c 	bl	8004034 <HAL_ADC_Start_DMA>
						BIGBUFFER_SIZE);
				measurement_done = 0;
 8001bfc:	4b38      	ldr	r3, [pc, #224]	@ (8001ce0 <Determine_component+0x748>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA, STEP_PIN, GPIO_PIN_SET);
 8001c02:	2201      	movs	r2, #1
 8001c04:	2101      	movs	r1, #1
 8001c06:	4832      	ldr	r0, [pc, #200]	@ (8001cd0 <Determine_component+0x738>)
 8001c08:	f003 fca6 	bl	8005558 <HAL_GPIO_WritePin>
				// 3. 短暂延时确保DMA已启动
				//HAL_Delay(1);
				while (!measurement_done)
 8001c0c:	bf00      	nop
 8001c0e:	4b34      	ldr	r3, [pc, #208]	@ (8001ce0 <Determine_component+0x748>)
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d0fa      	beq.n	8001c0e <Determine_component+0x676>
					;
				HAL_ADC_Stop_DMA(&hadc1);
 8001c18:	4830      	ldr	r0, [pc, #192]	@ (8001cdc <Determine_component+0x744>)
 8001c1a:	f002 faff 	bl	800421c <HAL_ADC_Stop_DMA>
				uint32_t end_tick = HAL_GetTick();
 8001c1e:	f002 f885 	bl	8003d2c <HAL_GetTick>
 8001c22:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
				HAL_Delay(50);
 8001c26:	2032      	movs	r0, #50	@ 0x32
 8001c28:	f002 f88c 	bl	8003d44 <HAL_Delay>
				VPA1 = Sample_PA1_Average();
 8001c2c:	f001 f962 	bl	8002ef4 <Sample_PA1_Average>
 8001c30:	eef0 7a40 	vmov.f32	s15, s0
 8001c34:	4b2b      	ldr	r3, [pc, #172]	@ (8001ce4 <Determine_component+0x74c>)
 8001c36:	edc3 7a00 	vstr	s15, [r3]
				VPA0 = Sample_PA0_Average();
 8001c3a:	f001 f90b 	bl	8002e54 <Sample_PA0_Average>
 8001c3e:	eef0 7a40 	vmov.f32	s15, s0
 8001c42:	4b29      	ldr	r3, [pc, #164]	@ (8001ce8 <Determine_component+0x750>)
 8001c44:	edc3 7a00 	vstr	s15, [r3]
				VPA7 = Sample_PA7_Average();
 8001c48:	f001 f8b4 	bl	8002db4 <Sample_PA7_Average>
 8001c4c:	eef0 7a40 	vmov.f32	s15, s0
 8001c50:	4b26      	ldr	r3, [pc, #152]	@ (8001cec <Determine_component+0x754>)
 8001c52:	edc3 7a00 	vstr	s15, [r3]
				GPIO_Set_Low(GPIOA, GPIO_PIN_0);
 8001c56:	2101      	movs	r1, #1
 8001c58:	481d      	ldr	r0, [pc, #116]	@ (8001cd0 <Determine_component+0x738>)
 8001c5a:	f7ff fc4b 	bl	80014f4 <GPIO_Set_Low>
				GPIO_Set_Low(GPIOA, GPIO_PIN_4);
 8001c5e:	2110      	movs	r1, #16
 8001c60:	481b      	ldr	r0, [pc, #108]	@ (8001cd0 <Determine_component+0x738>)
 8001c62:	f7ff fc47 	bl	80014f4 <GPIO_Set_Low>
				GPIO_Set_Low(GPIOA, GPIO_PIN_7);
 8001c66:	2180      	movs	r1, #128	@ 0x80
 8001c68:	4819      	ldr	r0, [pc, #100]	@ (8001cd0 <Determine_component+0x738>)
 8001c6a:	f7ff fc43 	bl	80014f4 <GPIO_Set_Low>
				GPIO_Set_Low(GPIOB, GPIO_PIN_15);
 8001c6e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001c72:	4818      	ldr	r0, [pc, #96]	@ (8001cd4 <Determine_component+0x73c>)
 8001c74:	f7ff fc3e 	bl	80014f4 <GPIO_Set_Low>
				float v_initial;
				float index;
				int find = 0;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
				float initial_index;
				for (int i = 0; i < BIGBUFFER_SIZE; i++) {
 8001c7e:	2300      	movs	r3, #0
 8001c80:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001c84:	e062      	b.n	8001d4c <Determine_component+0x7b4>
 8001c86:	bf00      	nop
 8001c88:	00000000 	.word	0x00000000
 8001c8c:	412e8480 	.word	0x412e8480
 8001c90:	10624dd3 	.word	0x10624dd3
 8001c94:	3fe43958 	.word	0x3fe43958
 8001c98:	20000320 	.word	0x20000320
 8001c9c:	40533333 	.word	0x40533333
 8001ca0:	457ff000 	.word	0x457ff000
 8001ca4:	48f42400 	.word	0x48f42400
 8001ca8:	20006a38 	.word	0x20006a38
 8001cac:	459f6000 	.word	0x459f6000
 8001cb0:	0800a3d8 	.word	0x0800a3d8
 8001cb4:	20006a58 	.word	0x20006a58
 8001cb8:	0800a3e4 	.word	0x0800a3e4
 8001cbc:	20006ad8 	.word	0x20006ad8
 8001cc0:	3d4ccccd 	.word	0x3d4ccccd
 8001cc4:	44ffe000 	.word	0x44ffe000
 8001cc8:	49742400 	.word	0x49742400
 8001ccc:	424c0000 	.word	0x424c0000
 8001cd0:	40020000 	.word	0x40020000
 8001cd4:	40020400 	.word	0x40020400
 8001cd8:	20004320 	.word	0x20004320
 8001cdc:	200001f0 	.word	0x200001f0
 8001ce0:	20006a30 	.word	0x20006a30
 8001ce4:	20006a34 	.word	0x20006a34
 8001ce8:	20006a4c 	.word	0x20006a4c
 8001cec:	20006a40 	.word	0x20006a40
					float voltage = (bigadc_buffer[i] * VREF) / 4095.0f;
 8001cf0:	4acb      	ldr	r2, [pc, #812]	@ (8002020 <Determine_component+0xa88>)
 8001cf2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001cf6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001cfa:	ee07 3a90 	vmov	s15, r3
 8001cfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d02:	ed9f 7ac8 	vldr	s14, [pc, #800]	@ 8002024 <Determine_component+0xa8c>
 8001d06:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001d0a:	eddf 6ac7 	vldr	s13, [pc, #796]	@ 8002028 <Determine_component+0xa90>
 8001d0e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d12:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
					if (voltage > MIN_VOLTAGE) {
 8001d16:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8001d1a:	ed9f 7ac4 	vldr	s14, [pc, #784]	@ 800202c <Determine_component+0xa94>
 8001d1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d26:	dd0c      	ble.n	8001d42 <Determine_component+0x7aa>
						v_initial = voltage;
 8001d28:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001d2c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
						initial_index = i;
 8001d30:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001d34:	ee07 3a90 	vmov	s15, r3
 8001d38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d3c:	edc7 7a35 	vstr	s15, [r7, #212]	@ 0xd4
						break;
 8001d40:	e00a      	b.n	8001d58 <Determine_component+0x7c0>
				for (int i = 0; i < BIGBUFFER_SIZE; i++) {
 8001d42:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001d46:	3301      	adds	r3, #1
 8001d48:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001d4c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001d50:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001d54:	4293      	cmp	r3, r2
 8001d56:	ddcb      	ble.n	8001cf0 <Determine_component+0x758>
					}
				}
				//float r_com = (v_initial * R_KNOWN) / (VREF - v_initial);
				float v_target = 0.632 * VPA1;
 8001d58:	4bb5      	ldr	r3, [pc, #724]	@ (8002030 <Determine_component+0xa98>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7fe fbfb 	bl	8000558 <__aeabi_f2d>
 8001d62:	a3ab      	add	r3, pc, #684	@ (adr r3, 8002010 <Determine_component+0xa78>)
 8001d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d68:	f7fe fc4e 	bl	8000608 <__aeabi_dmul>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	460b      	mov	r3, r1
 8001d70:	4610      	mov	r0, r2
 8001d72:	4619      	mov	r1, r3
 8001d74:	f7fe ff20 	bl	8000bb8 <__aeabi_d2f>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
				for (int i = 0; i < BIGBUFFER_SIZE; i++) {
 8001d7e:	2300      	movs	r3, #0
 8001d80:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001d84:	e029      	b.n	8001dda <Determine_component+0x842>
					float voltage = (bigadc_buffer[i] * VREF) / 4095.0f;
 8001d86:	4aa6      	ldr	r2, [pc, #664]	@ (8002020 <Determine_component+0xa88>)
 8001d88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001d8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d90:	ee07 3a90 	vmov	s15, r3
 8001d94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d98:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 8002024 <Determine_component+0xa8c>
 8001d9c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001da0:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 8002028 <Determine_component+0xa90>
 8001da4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001da8:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
					if (voltage >= v_target) {
 8001dac:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8001db0:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 8001db4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dbc:	db08      	blt.n	8001dd0 <Determine_component+0x838>
						index = i;
 8001dbe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001dc2:	ee07 3a90 	vmov	s15, r3
 8001dc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dca:	edc7 7a36 	vstr	s15, [r7, #216]	@ 0xd8
						break;
 8001dce:	e00a      	b.n	8001de6 <Determine_component+0x84e>
				for (int i = 0; i < BIGBUFFER_SIZE; i++) {
 8001dd0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001dda:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001dde:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001de2:	4293      	cmp	r3, r2
 8001de4:	ddcf      	ble.n	8001d86 <Determine_component+0x7ee>
					}
				}
				float tau = (index - initial_index) * 2 / 1000000;
 8001de6:	ed97 7a36 	vldr	s14, [r7, #216]	@ 0xd8
 8001dea:	edd7 7a35 	vldr	s15, [r7, #212]	@ 0xd4
 8001dee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001df2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001df6:	eddf 6a8f 	vldr	s13, [pc, #572]	@ 8002034 <Determine_component+0xa9c>
 8001dfa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dfe:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
				float r_com = (v_initial * R_KNOWN) / (VREF - v_initial);
 8001e02:	edd7 7a37 	vldr	s15, [r7, #220]	@ 0xdc
 8001e06:	ed9f 7a9b 	vldr	s14, [pc, #620]	@ 8002074 <Determine_component+0xadc>
 8001e0a:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001e0e:	ed9f 7a85 	vldr	s14, [pc, #532]	@ 8002024 <Determine_component+0xa8c>
 8001e12:	edd7 7a37 	vldr	s15, [r7, #220]	@ 0xdc
 8001e16:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e1e:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
				float c_com = tau / (r_com + R_KNOWN);
 8001e22:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8001e26:	ed9f 7a93 	vldr	s14, [pc, #588]	@ 8002074 <Determine_component+0xadc>
 8001e2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001e2e:	edd7 6a24 	vldr	s13, [r7, #144]	@ 0x90
 8001e32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e36:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
				sprintf(message1, "Rs=%.2fΩ", r_com);
 8001e3a:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8001e3e:	f7fe fb8b 	bl	8000558 <__aeabi_f2d>
 8001e42:	4602      	mov	r2, r0
 8001e44:	460b      	mov	r3, r1
 8001e46:	497c      	ldr	r1, [pc, #496]	@ (8002038 <Determine_component+0xaa0>)
 8001e48:	487c      	ldr	r0, [pc, #496]	@ (800203c <Determine_component+0xaa4>)
 8001e4a:	f005 ff71 	bl	8007d30 <siprintf>
				sprintf(message2, "Cs=%.4fuF", c_com * 1e6);
 8001e4e:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8001e52:	f7fe fb81 	bl	8000558 <__aeabi_f2d>
 8001e56:	a370      	add	r3, pc, #448	@ (adr r3, 8002018 <Determine_component+0xa80>)
 8001e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e5c:	f7fe fbd4 	bl	8000608 <__aeabi_dmul>
 8001e60:	4602      	mov	r2, r0
 8001e62:	460b      	mov	r3, r1
 8001e64:	4976      	ldr	r1, [pc, #472]	@ (8002040 <Determine_component+0xaa8>)
 8001e66:	4877      	ldr	r0, [pc, #476]	@ (8002044 <Determine_component+0xaac>)
 8001e68:	f005 ff62 	bl	8007d30 <siprintf>
		if (steady_test(adc_buffer1_com, VPA1Z)) {
 8001e6c:	e221      	b.n	80022b2 <Determine_component+0xd1a>
			}

		}
		//计算RC
	}   //初末比较CL
	else if (Analyze_trend(adc_buffer1_com, VPA1Z) == -1
 8001e6e:	4b76      	ldr	r3, [pc, #472]	@ (8002048 <Determine_component+0xab0>)
 8001e70:	edd3 7a00 	vldr	s15, [r3]
 8001e74:	eeb0 0a67 	vmov.f32	s0, s15
 8001e78:	4874      	ldr	r0, [pc, #464]	@ (800204c <Determine_component+0xab4>)
 8001e7a:	f000 fc49 	bl	8002710 <Analyze_trend>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e84:	d10e      	bne.n	8001ea4 <Determine_component+0x90c>
			&& Analyze_trend(adc_buffer2_com, VPA1F) == 1) {
 8001e86:	4b72      	ldr	r3, [pc, #456]	@ (8002050 <Determine_component+0xab8>)
 8001e88:	edd3 7a00 	vldr	s15, [r3]
 8001e8c:	eeb0 0a67 	vmov.f32	s0, s15
 8001e90:	4870      	ldr	r0, [pc, #448]	@ (8002054 <Determine_component+0xabc>)
 8001e92:	f000 fc3d 	bl	8002710 <Analyze_trend>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d103      	bne.n	8001ea4 <Determine_component+0x90c>
		component.type = COMPONENT_L;
 8001e9c:	4b6e      	ldr	r3, [pc, #440]	@ (8002058 <Determine_component+0xac0>)
 8001e9e:	2203      	movs	r2, #3
 8001ea0:	701a      	strb	r2, [r3, #0]
 8001ea2:	e206      	b.n	80022b2 <Determine_component+0xd1a>
		//计算RL
	} else {
		float a = Danalyze();
 8001ea4:	f000 fdcc 	bl	8002a40 <Danalyze>
 8001ea8:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
		if (a) {   //求平均有极值，差值小于2v
 8001eac:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001eb0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001eb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eb8:	d028      	beq.n	8001f0c <Determine_component+0x974>
			component.type = COMPONENT_D;
 8001eba:	4b67      	ldr	r3, [pc, #412]	@ (8002058 <Determine_component+0xac0>)
 8001ebc:	2204      	movs	r2, #4
 8001ebe:	701a      	strb	r2, [r3, #0]
			component.params.diode.forward_voltage = fabs(a);
 8001ec0:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001ec4:	eef0 7ae7 	vabs.f32	s15, s15
 8001ec8:	4b63      	ldr	r3, [pc, #396]	@ (8002058 <Determine_component+0xac0>)
 8001eca:	edc3 7a01 	vstr	s15, [r3, #4]
			if (a > 0) {
 8001ece:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001ed2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eda:	dd0b      	ble.n	8001ef4 <Determine_component+0x95c>
				component.params.diode.polarity == L_TO_R;   //>>
				sprintf(message1, " Z V=%.2fΩ",
						component.params.diode.forward_voltage);
 8001edc:	4b5e      	ldr	r3, [pc, #376]	@ (8002058 <Determine_component+0xac0>)
 8001ede:	685b      	ldr	r3, [r3, #4]
				sprintf(message1, " Z V=%.2fΩ",
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7fe fb39 	bl	8000558 <__aeabi_f2d>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	460b      	mov	r3, r1
 8001eea:	495c      	ldr	r1, [pc, #368]	@ (800205c <Determine_component+0xac4>)
 8001eec:	4853      	ldr	r0, [pc, #332]	@ (800203c <Determine_component+0xaa4>)
 8001eee:	f005 ff1f 	bl	8007d30 <siprintf>
			}

		}
	}

}
 8001ef2:	e1de      	b.n	80022b2 <Determine_component+0xd1a>
						component.params.diode.forward_voltage);
 8001ef4:	4b58      	ldr	r3, [pc, #352]	@ (8002058 <Determine_component+0xac0>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
				sprintf(message1, " F V=%.2fΩ",
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7fe fb2d 	bl	8000558 <__aeabi_f2d>
 8001efe:	4602      	mov	r2, r0
 8001f00:	460b      	mov	r3, r1
 8001f02:	4957      	ldr	r1, [pc, #348]	@ (8002060 <Determine_component+0xac8>)
 8001f04:	484d      	ldr	r0, [pc, #308]	@ (800203c <Determine_component+0xaa4>)
 8001f06:	f005 ff13 	bl	8007d30 <siprintf>
}
 8001f0a:	e1d2      	b.n	80022b2 <Determine_component+0xd1a>
			GPIO_Set_HighZ(GPIOA, GPIO_PIN_0);
 8001f0c:	2101      	movs	r1, #1
 8001f0e:	4855      	ldr	r0, [pc, #340]	@ (8002064 <Determine_component+0xacc>)
 8001f10:	f7ff faa6 	bl	8001460 <GPIO_Set_HighZ>
			GPIO_Set_HighZ(GPIOA, GPIO_PIN_4);
 8001f14:	2110      	movs	r1, #16
 8001f16:	4853      	ldr	r0, [pc, #332]	@ (8002064 <Determine_component+0xacc>)
 8001f18:	f7ff faa2 	bl	8001460 <GPIO_Set_HighZ>
			GPIO_Set_Low(GPIOA, GPIO_PIN_7);
 8001f1c:	2180      	movs	r1, #128	@ 0x80
 8001f1e:	4851      	ldr	r0, [pc, #324]	@ (8002064 <Determine_component+0xacc>)
 8001f20:	f7ff fae8 	bl	80014f4 <GPIO_Set_Low>
			GPIO_Set_Low(GPIOB, GPIO_PIN_15);
 8001f24:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001f28:	484f      	ldr	r0, [pc, #316]	@ (8002068 <Determine_component+0xad0>)
 8001f2a:	f7ff fae3 	bl	80014f4 <GPIO_Set_Low>
			memset(adc_buffer3_com, 0, sizeof(adc_buffer3_com));
 8001f2e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001f32:	2100      	movs	r1, #0
 8001f34:	484d      	ldr	r0, [pc, #308]	@ (800206c <Determine_component+0xad4>)
 8001f36:	f005 ff70 	bl	8007e1a <memset>
			DMA_Measure_com(4, adc_buffer3_com);
 8001f3a:	494c      	ldr	r1, [pc, #304]	@ (800206c <Determine_component+0xad4>)
 8001f3c:	2004      	movs	r0, #4
 8001f3e:	f000 fe49 	bl	8002bd4 <DMA_Measure_com>
			VPA1Z = VPA1;
 8001f42:	4b3b      	ldr	r3, [pc, #236]	@ (8002030 <Determine_component+0xa98>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a40      	ldr	r2, [pc, #256]	@ (8002048 <Determine_component+0xab0>)
 8001f48:	6013      	str	r3, [r2, #0]
			GPIO_Set_HighZ(GPIOA, GPIO_PIN_0);
 8001f4a:	2101      	movs	r1, #1
 8001f4c:	4845      	ldr	r0, [pc, #276]	@ (8002064 <Determine_component+0xacc>)
 8001f4e:	f7ff fa87 	bl	8001460 <GPIO_Set_HighZ>
			GPIO_Set_HighZ(GPIOA, GPIO_PIN_4);
 8001f52:	2110      	movs	r1, #16
 8001f54:	4843      	ldr	r0, [pc, #268]	@ (8002064 <Determine_component+0xacc>)
 8001f56:	f7ff fa83 	bl	8001460 <GPIO_Set_HighZ>
			memset(adc_buffer4_com, 0, sizeof(adc_buffer4_com));
 8001f5a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001f5e:	2100      	movs	r1, #0
 8001f60:	4843      	ldr	r0, [pc, #268]	@ (8002070 <Determine_component+0xad8>)
 8001f62:	f005 ff5a 	bl	8007e1a <memset>
			DMA_Measure_com(2, adc_buffer4_com);
 8001f66:	4942      	ldr	r1, [pc, #264]	@ (8002070 <Determine_component+0xad8>)
 8001f68:	2002      	movs	r0, #2
 8001f6a:	f000 fe33 	bl	8002bd4 <DMA_Measure_com>
			VPA1F = VPA1;
 8001f6e:	4b30      	ldr	r3, [pc, #192]	@ (8002030 <Determine_component+0xa98>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a37      	ldr	r2, [pc, #220]	@ (8002050 <Determine_component+0xab8>)
 8001f74:	6013      	str	r3, [r2, #0]
			int index=0;
 8001f76:	2300      	movs	r3, #0
 8001f78:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
			if (Analyze_trend(adc_buffer3_com, VPA1Z) == 1
 8001f7c:	4b32      	ldr	r3, [pc, #200]	@ (8002048 <Determine_component+0xab0>)
 8001f7e:	edd3 7a00 	vldr	s15, [r3]
 8001f82:	eeb0 0a67 	vmov.f32	s0, s15
 8001f86:	4839      	ldr	r0, [pc, #228]	@ (800206c <Determine_component+0xad4>)
 8001f88:	f000 fbc2 	bl	8002710 <Analyze_trend>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	f040 8100 	bne.w	8002194 <Determine_component+0xbfc>
					&& Analyze_trend(adc_buffer4_com, VPA1F) == -1) {
 8001f94:	4b2e      	ldr	r3, [pc, #184]	@ (8002050 <Determine_component+0xab8>)
 8001f96:	edd3 7a00 	vldr	s15, [r3]
 8001f9a:	eeb0 0a67 	vmov.f32	s0, s15
 8001f9e:	4834      	ldr	r0, [pc, #208]	@ (8002070 <Determine_component+0xad8>)
 8001fa0:	f000 fbb6 	bl	8002710 <Analyze_trend>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001faa:	f040 80f3 	bne.w	8002194 <Determine_component+0xbfc>
				component.type = COMPONENT_C;   //计算小c
 8001fae:	4b2a      	ldr	r3, [pc, #168]	@ (8002058 <Determine_component+0xac0>)
 8001fb0:	2202      	movs	r2, #2
 8001fb2:	701a      	strb	r2, [r3, #0]
				float v_initial = 0.0f;
 8001fb4:	f04f 0300 	mov.w	r3, #0
 8001fb8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
				for (int i = 0; i < BUFFER_SIZE; i++) {
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8001fc2:	e060      	b.n	8002086 <Determine_component+0xaee>
					float voltage = (adc_buffer3_com[i] * VREF) / 4095.0f;
 8001fc4:	4a29      	ldr	r2, [pc, #164]	@ (800206c <Determine_component+0xad4>)
 8001fc6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001fca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001fce:	ee07 3a90 	vmov	s15, r3
 8001fd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fd6:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8002024 <Determine_component+0xa8c>
 8001fda:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001fde:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8002028 <Determine_component+0xa90>
 8001fe2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fe6:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
					if (voltage > MIN_VOLTAGE) {
 8001fea:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001fee:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800202c <Determine_component+0xa94>
 8001ff2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ffa:	dd3f      	ble.n	800207c <Determine_component+0xae4>
						v_initial = voltage;
 8001ffc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ffe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
						initial_index=i;
 8002002:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002006:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
						break;
 800200a:	e041      	b.n	8002090 <Determine_component+0xaf8>
 800200c:	f3af 8000 	nop.w
 8002010:	10624dd3 	.word	0x10624dd3
 8002014:	3fe43958 	.word	0x3fe43958
 8002018:	00000000 	.word	0x00000000
 800201c:	412e8480 	.word	0x412e8480
 8002020:	20004320 	.word	0x20004320
 8002024:	40533333 	.word	0x40533333
 8002028:	457ff000 	.word	0x457ff000
 800202c:	3d4ccccd 	.word	0x3d4ccccd
 8002030:	20006a34 	.word	0x20006a34
 8002034:	49742400 	.word	0x49742400
 8002038:	0800a3d8 	.word	0x0800a3d8
 800203c:	20006a58 	.word	0x20006a58
 8002040:	0800a3e4 	.word	0x0800a3e4
 8002044:	20006ad8 	.word	0x20006ad8
 8002048:	20006a38 	.word	0x20006a38
 800204c:	20000320 	.word	0x20000320
 8002050:	20006a3c 	.word	0x20006a3c
 8002054:	20001320 	.word	0x20001320
 8002058:	200002ec 	.word	0x200002ec
 800205c:	0800a3f0 	.word	0x0800a3f0
 8002060:	0800a3fc 	.word	0x0800a3fc
 8002064:	40020000 	.word	0x40020000
 8002068:	40020400 	.word	0x40020400
 800206c:	20002320 	.word	0x20002320
 8002070:	20003320 	.word	0x20003320
 8002074:	424c0000 	.word	0x424c0000
 8002078:	40533333 	.word	0x40533333
				for (int i = 0; i < BUFFER_SIZE; i++) {
 800207c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002080:	3301      	adds	r3, #1
 8002082:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002086:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800208a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800208e:	db99      	blt.n	8001fc4 <Determine_component+0xa2c>
				float r_com = (v_initial * R_KNOWN) / (VREF - v_initial);
 8002090:	edd7 7a30 	vldr	s15, [r7, #192]	@ 0xc0
 8002094:	ed1f 7a09 	vldr	s14, [pc, #-36]	@ 8002074 <Determine_component+0xadc>
 8002098:	ee67 6a87 	vmul.f32	s13, s15, s14
 800209c:	ed1f 7a0a 	vldr	s14, [pc, #-40]	@ 8002078 <Determine_component+0xae0>
 80020a0:	edd7 7a30 	vldr	s15, [r7, #192]	@ 0xc0
 80020a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020ac:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
				sprintf(message1, "Rs=%.2fΩ", r_com);
 80020b0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80020b2:	f7fe fa51 	bl	8000558 <__aeabi_f2d>
 80020b6:	4602      	mov	r2, r0
 80020b8:	460b      	mov	r3, r1
 80020ba:	4985      	ldr	r1, [pc, #532]	@ (80022d0 <Determine_component+0xd38>)
 80020bc:	4885      	ldr	r0, [pc, #532]	@ (80022d4 <Determine_component+0xd3c>)
 80020be:	f005 fe37 	bl	8007d30 <siprintf>
				float v_target = 0.632 * VPA1Z;
 80020c2:	4b85      	ldr	r3, [pc, #532]	@ (80022d8 <Determine_component+0xd40>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7fe fa46 	bl	8000558 <__aeabi_f2d>
 80020cc:	a37c      	add	r3, pc, #496	@ (adr r3, 80022c0 <Determine_component+0xd28>)
 80020ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020d2:	f7fe fa99 	bl	8000608 <__aeabi_dmul>
 80020d6:	4602      	mov	r2, r0
 80020d8:	460b      	mov	r3, r1
 80020da:	4610      	mov	r0, r2
 80020dc:	4619      	mov	r1, r3
 80020de:	f7fe fd6b 	bl	8000bb8 <__aeabi_d2f>
 80020e2:	4603      	mov	r3, r0
 80020e4:	623b      	str	r3, [r7, #32]
				for (int i = 0; i < BUFFER_SIZE; i++) {
 80020e6:	2300      	movs	r3, #0
 80020e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80020ec:	e025      	b.n	800213a <Determine_component+0xba2>
					float voltage = (adc_buffer3_com[i] * VREF) / 4095.0f;
 80020ee:	4a7b      	ldr	r2, [pc, #492]	@ (80022dc <Determine_component+0xd44>)
 80020f0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80020f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80020f8:	ee07 3a90 	vmov	s15, r3
 80020fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002100:	ed9f 7a77 	vldr	s14, [pc, #476]	@ 80022e0 <Determine_component+0xd48>
 8002104:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002108:	eddf 6a76 	vldr	s13, [pc, #472]	@ 80022e4 <Determine_component+0xd4c>
 800210c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002110:	edc7 7a07 	vstr	s15, [r7, #28]
					if (voltage >= v_target) {
 8002114:	ed97 7a07 	vldr	s14, [r7, #28]
 8002118:	edd7 7a08 	vldr	s15, [r7, #32]
 800211c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002124:	db04      	blt.n	8002130 <Determine_component+0xb98>
						 index = i;
 8002126:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800212a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
						break;
 800212e:	e009      	b.n	8002144 <Determine_component+0xbac>
				for (int i = 0; i < BUFFER_SIZE; i++) {
 8002130:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002134:	3301      	adds	r3, #1
 8002136:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800213a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800213e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002142:	dbd4      	blt.n	80020ee <Determine_component+0xb56>
				float tau = (index - initial_index) * 2 / 1000000;
 8002144:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002148:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	4a66      	ldr	r2, [pc, #408]	@ (80022e8 <Determine_component+0xd50>)
 8002150:	fb82 1203 	smull	r1, r2, r2, r3
 8002154:	1452      	asrs	r2, r2, #17
 8002156:	17db      	asrs	r3, r3, #31
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	ee07 3a90 	vmov	s15, r3
 800215e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002162:	edc7 7a06 	vstr	s15, [r7, #24]
				float c_com = tau / r_com;
 8002166:	edd7 6a06 	vldr	s13, [r7, #24]
 800216a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800216e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002172:	edc7 7a05 	vstr	s15, [r7, #20]
				sprintf(message2, "Cs=%.2fΩ", c_com * 1e6);
 8002176:	6978      	ldr	r0, [r7, #20]
 8002178:	f7fe f9ee 	bl	8000558 <__aeabi_f2d>
 800217c:	a352      	add	r3, pc, #328	@ (adr r3, 80022c8 <Determine_component+0xd30>)
 800217e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002182:	f7fe fa41 	bl	8000608 <__aeabi_dmul>
 8002186:	4602      	mov	r2, r0
 8002188:	460b      	mov	r3, r1
 800218a:	4958      	ldr	r1, [pc, #352]	@ (80022ec <Determine_component+0xd54>)
 800218c:	4858      	ldr	r0, [pc, #352]	@ (80022f0 <Determine_component+0xd58>)
 800218e:	f005 fdcf 	bl	8007d30 <siprintf>
					&& Analyze_trend(adc_buffer4_com, VPA1F) == -1) {
 8002192:	e08e      	b.n	80022b2 <Determine_component+0xd1a>
			} else if (analyze_Vpicture(adc_buffer3_com, adc_buffer4_com)
 8002194:	4957      	ldr	r1, [pc, #348]	@ (80022f4 <Determine_component+0xd5c>)
 8002196:	4851      	ldr	r0, [pc, #324]	@ (80022dc <Determine_component+0xd44>)
 8002198:	f000 fa4a 	bl	8002630 <analyze_Vpicture>
 800219c:	4603      	mov	r3, r0
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d136      	bne.n	8002210 <Determine_component+0xc78>
				component.type = COMPONENT_R;   //
 80021a2:	4b55      	ldr	r3, [pc, #340]	@ (80022f8 <Determine_component+0xd60>)
 80021a4:	2201      	movs	r2, #1
 80021a6:	701a      	strb	r2, [r3, #0]
				float V = calculate_average(adc_buffer3_com);
 80021a8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80021ac:	f5a3 7484 	sub.w	r4, r3, #264	@ 0x108
 80021b0:	484a      	ldr	r0, [pc, #296]	@ (80022dc <Determine_component+0xd44>)
 80021b2:	f000 fcc3 	bl	8002b3c <calculate_average>
 80021b6:	ed84 0a00 	vstr	s0, [r4]
				R = 470000 / (VPA0Z - V) * V;
 80021ba:	4b50      	ldr	r3, [pc, #320]	@ (80022fc <Determine_component+0xd64>)
 80021bc:	ed93 7a00 	vldr	s14, [r3]
 80021c0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80021c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80021c8:	edd3 7a00 	vldr	s15, [r3]
 80021cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80021d0:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 8002300 <Determine_component+0xd68>
 80021d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021d8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80021dc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80021e0:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80021e4:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 80021e8:	ed92 7a00 	vldr	s14, [r2]
 80021ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021f0:	edc3 7a00 	vstr	s15, [r3]
				sprintf(message1, " R=%.2fΩ", R);
 80021f4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80021f8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80021fc:	6818      	ldr	r0, [r3, #0]
 80021fe:	f7fe f9ab 	bl	8000558 <__aeabi_f2d>
 8002202:	4602      	mov	r2, r0
 8002204:	460b      	mov	r3, r1
 8002206:	493f      	ldr	r1, [pc, #252]	@ (8002304 <Determine_component+0xd6c>)
 8002208:	4832      	ldr	r0, [pc, #200]	@ (80022d4 <Determine_component+0xd3c>)
 800220a:	f005 fd91 	bl	8007d30 <siprintf>
}
 800220e:	e050      	b.n	80022b2 <Determine_component+0xd1a>
			} else if (analyze_Vpicture(adc_buffer1_com, adc_buffer2_com)
 8002210:	493d      	ldr	r1, [pc, #244]	@ (8002308 <Determine_component+0xd70>)
 8002212:	483e      	ldr	r0, [pc, #248]	@ (800230c <Determine_component+0xd74>)
 8002214:	f000 fa0c 	bl	8002630 <analyze_Vpicture>
 8002218:	4603      	mov	r3, r0
 800221a:	2b02      	cmp	r3, #2
 800221c:	d149      	bne.n	80022b2 <Determine_component+0xd1a>
				component.type = COMPONENT_R;
 800221e:	4b36      	ldr	r3, [pc, #216]	@ (80022f8 <Determine_component+0xd60>)
 8002220:	2201      	movs	r2, #1
 8002222:	701a      	strb	r2, [r3, #0]
				GPIO_Set_HighZ(GPIOA, GPIO_PIN_0);
 8002224:	2101      	movs	r1, #1
 8002226:	483a      	ldr	r0, [pc, #232]	@ (8002310 <Determine_component+0xd78>)
 8002228:	f7ff f91a 	bl	8001460 <GPIO_Set_HighZ>
				GPIO_Set_HighZ(GPIOB, GPIO_PIN_15);
 800222c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002230:	4838      	ldr	r0, [pc, #224]	@ (8002314 <Determine_component+0xd7c>)
 8002232:	f7ff f915 	bl	8001460 <GPIO_Set_HighZ>
				memset(adc_buffer3_com, 0, sizeof(adc_buffer3_com));
 8002236:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800223a:	2100      	movs	r1, #0
 800223c:	4827      	ldr	r0, [pc, #156]	@ (80022dc <Determine_component+0xd44>)
 800223e:	f005 fdec 	bl	8007e1a <memset>
				DMA_Measure_com(3, adc_buffer3_com);
 8002242:	4926      	ldr	r1, [pc, #152]	@ (80022dc <Determine_component+0xd44>)
 8002244:	2003      	movs	r0, #3
 8002246:	f000 fcc5 	bl	8002bd4 <DMA_Measure_com>
				float V = calculate_average(adc_buffer3_com);
 800224a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800224e:	f5a3 7480 	sub.w	r4, r3, #256	@ 0x100
 8002252:	4822      	ldr	r0, [pc, #136]	@ (80022dc <Determine_component+0xd44>)
 8002254:	f000 fc72 	bl	8002b3c <calculate_average>
 8002258:	ed84 0a00 	vstr	s0, [r4]
				R = 5100 / (VPA0Z - V) * V;
 800225c:	4b27      	ldr	r3, [pc, #156]	@ (80022fc <Determine_component+0xd64>)
 800225e:	ed93 7a00 	vldr	s14, [r3]
 8002262:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002266:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800226a:	edd3 7a00 	vldr	s15, [r3]
 800226e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002272:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8002318 <Determine_component+0xd80>
 8002276:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800227a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800227e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002282:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002286:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 800228a:	ed92 7a00 	vldr	s14, [r2]
 800228e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002292:	edc3 7a00 	vstr	s15, [r3]
				sprintf(message1, " R=%.2fΩ", R);
 8002296:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800229a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800229e:	6818      	ldr	r0, [r3, #0]
 80022a0:	f7fe f95a 	bl	8000558 <__aeabi_f2d>
 80022a4:	4602      	mov	r2, r0
 80022a6:	460b      	mov	r3, r1
 80022a8:	4916      	ldr	r1, [pc, #88]	@ (8002304 <Determine_component+0xd6c>)
 80022aa:	480a      	ldr	r0, [pc, #40]	@ (80022d4 <Determine_component+0xd3c>)
 80022ac:	f005 fd40 	bl	8007d30 <siprintf>
}
 80022b0:	e7ff      	b.n	80022b2 <Determine_component+0xd1a>
 80022b2:	bf00      	nop
 80022b4:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bdb0      	pop	{r4, r5, r7, pc}
 80022bc:	f3af 8000 	nop.w
 80022c0:	10624dd3 	.word	0x10624dd3
 80022c4:	3fe43958 	.word	0x3fe43958
 80022c8:	00000000 	.word	0x00000000
 80022cc:	412e8480 	.word	0x412e8480
 80022d0:	0800a3d8 	.word	0x0800a3d8
 80022d4:	20006a58 	.word	0x20006a58
 80022d8:	20006a38 	.word	0x20006a38
 80022dc:	20002320 	.word	0x20002320
 80022e0:	40533333 	.word	0x40533333
 80022e4:	457ff000 	.word	0x457ff000
 80022e8:	431bde83 	.word	0x431bde83
 80022ec:	0800a408 	.word	0x0800a408
 80022f0:	20006ad8 	.word	0x20006ad8
 80022f4:	20003320 	.word	0x20003320
 80022f8:	200002ec 	.word	0x200002ec
 80022fc:	20006a50 	.word	0x20006a50
 8002300:	48e57e00 	.word	0x48e57e00
 8002304:	0800a414 	.word	0x0800a414
 8002308:	20001320 	.word	0x20001320
 800230c:	20000320 	.word	0x20000320
 8002310:	40020000 	.word	0x40020000
 8002314:	40020400 	.word	0x40020400
 8002318:	459f6000 	.word	0x459f6000
 800231c:	00000000 	.word	0x00000000

08002320 <Find_tau_com>:
float Find_tau_com(uint16_t *adc_buffer) {
 8002320:	b580      	push	{r7, lr}
 8002322:	b092      	sub	sp, #72	@ 0x48
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
	// 1. 寻找起始点
	float start_index = 0;
 8002328:	f04f 0300 	mov.w	r3, #0
 800232c:	647b      	str	r3, [r7, #68]	@ 0x44
	float v_start = 0;
 800232e:	f04f 0300 	mov.w	r3, #0
 8002332:	637b      	str	r3, [r7, #52]	@ 0x34

	for (int i = 0; i < BUFFER_SIZE; i++) {
 8002334:	2300      	movs	r3, #0
 8002336:	643b      	str	r3, [r7, #64]	@ 0x40
 8002338:	e028      	b.n	800238c <Find_tau_com+0x6c>
		float voltage = (adc_buffer[i] * VREF) / 4095.0f;
 800233a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	4413      	add	r3, r2
 8002342:	881b      	ldrh	r3, [r3, #0]
 8002344:	ee07 3a90 	vmov	s15, r3
 8002348:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800234c:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 80025a0 <Find_tau_com+0x280>
 8002350:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002354:	eddf 6a93 	vldr	s13, [pc, #588]	@ 80025a4 <Find_tau_com+0x284>
 8002358:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800235c:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		if (voltage > MIN_VOLTAGE) {
 8002360:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002364:	ed9f 7a90 	vldr	s14, [pc, #576]	@ 80025a8 <Find_tau_com+0x288>
 8002368:	eef4 7ac7 	vcmpe.f32	s15, s14
 800236c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002370:	dd09      	ble.n	8002386 <Find_tau_com+0x66>
			start_index = i;
 8002372:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002374:	ee07 3a90 	vmov	s15, r3
 8002378:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800237c:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
			v_start = voltage;
 8002380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002382:	637b      	str	r3, [r7, #52]	@ 0x34
			break;
 8002384:	e006      	b.n	8002394 <Find_tau_com+0x74>
	for (int i = 0; i < BUFFER_SIZE; i++) {
 8002386:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002388:	3301      	adds	r3, #1
 800238a:	643b      	str	r3, [r7, #64]	@ 0x40
 800238c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800238e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002392:	dbd2      	blt.n	800233a <Find_tau_com+0x1a>
		}
	}

	// 2. 更准确地检测稳态点和稳态电压
	float v_steady = (adc_buffer[BUFFER_SIZE - 1] * VREF) / 4095.0f;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f603 73fe 	addw	r3, r3, #4094	@ 0xffe
 800239a:	881b      	ldrh	r3, [r3, #0]
 800239c:	ee07 3a90 	vmov	s15, r3
 80023a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023a4:	ed9f 7a7e 	vldr	s14, [pc, #504]	@ 80025a0 <Find_tau_com+0x280>
 80023a8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80023ac:	eddf 6a7d 	vldr	s13, [pc, #500]	@ 80025a4 <Find_tau_com+0x284>
 80023b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023b4:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

	// 3. 寻找目标电压点（使用改进的算法）
	float v_target1 = v_steady * 0.632;  // 1个时间常数
 80023b8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80023ba:	f7fe f8cd 	bl	8000558 <__aeabi_f2d>
 80023be:	a374      	add	r3, pc, #464	@ (adr r3, 8002590 <Find_tau_com+0x270>)
 80023c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c4:	f7fe f920 	bl	8000608 <__aeabi_dmul>
 80023c8:	4602      	mov	r2, r0
 80023ca:	460b      	mov	r3, r1
 80023cc:	4610      	mov	r0, r2
 80023ce:	4619      	mov	r1, r3
 80023d0:	f7fe fbf2 	bl	8000bb8 <__aeabi_d2f>
 80023d4:	4603      	mov	r3, r0
 80023d6:	62bb      	str	r3, [r7, #40]	@ 0x28
	float v_target2 = v_steady * 0.865;  // 2个时间常数
 80023d8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80023da:	f7fe f8bd 	bl	8000558 <__aeabi_f2d>
 80023de:	a36e      	add	r3, pc, #440	@ (adr r3, 8002598 <Find_tau_com+0x278>)
 80023e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023e4:	f7fe f910 	bl	8000608 <__aeabi_dmul>
 80023e8:	4602      	mov	r2, r0
 80023ea:	460b      	mov	r3, r1
 80023ec:	4610      	mov	r0, r2
 80023ee:	4619      	mov	r1, r3
 80023f0:	f7fe fbe2 	bl	8000bb8 <__aeabi_d2f>
 80023f4:	4603      	mov	r3, r0
 80023f6:	627b      	str	r3, [r7, #36]	@ 0x24

	uint16_t index1 = 0, index2 = 0;
 80023f8:	2300      	movs	r3, #0
 80023fa:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80023fc:	2300      	movs	r3, #0
 80023fe:	87bb      	strh	r3, [r7, #60]	@ 0x3c

	// 使用线性插值提高时间点精度
	for (int i = start_index; i < BUFFER_SIZE - 1; i++) {
 8002400:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002404:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002408:	ee17 3a90 	vmov	r3, s15
 800240c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800240e:	e090      	b.n	8002532 <Find_tau_com+0x212>
		float voltage = (adc_buffer[i] * VREF) / 4095.0f;
 8002410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002412:	005b      	lsls	r3, r3, #1
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	4413      	add	r3, r2
 8002418:	881b      	ldrh	r3, [r3, #0]
 800241a:	ee07 3a90 	vmov	s15, r3
 800241e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002422:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 80025a0 <Find_tau_com+0x280>
 8002426:	ee27 7a87 	vmul.f32	s14, s15, s14
 800242a:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80025a4 <Find_tau_com+0x284>
 800242e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002432:	edc7 7a08 	vstr	s15, [r7, #32]
		float next_voltage = (adc_buffer[i + 1] * VREF) / 4095.0f;
 8002436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002438:	3301      	adds	r3, #1
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	4413      	add	r3, r2
 8002440:	881b      	ldrh	r3, [r3, #0]
 8002442:	ee07 3a90 	vmov	s15, r3
 8002446:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800244a:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 80025a0 <Find_tau_com+0x280>
 800244e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002452:	eddf 6a54 	vldr	s13, [pc, #336]	@ 80025a4 <Find_tau_com+0x284>
 8002456:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800245a:	edc7 7a07 	vstr	s15, [r7, #28]

		// 插值寻找更准确的交叉点
		if (index1 == 0 && voltage <= v_target1 && next_voltage >= v_target1) {
 800245e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002460:	2b00      	cmp	r3, #0
 8002462:	d12f      	bne.n	80024c4 <Find_tau_com+0x1a4>
 8002464:	ed97 7a08 	vldr	s14, [r7, #32]
 8002468:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800246c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002474:	d826      	bhi.n	80024c4 <Find_tau_com+0x1a4>
 8002476:	ed97 7a07 	vldr	s14, [r7, #28]
 800247a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800247e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002486:	db1d      	blt.n	80024c4 <Find_tau_com+0x1a4>
			float fraction = (v_target1 - voltage) / (next_voltage - voltage);
 8002488:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800248c:	edd7 7a08 	vldr	s15, [r7, #32]
 8002490:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002494:	ed97 7a07 	vldr	s14, [r7, #28]
 8002498:	edd7 7a08 	vldr	s15, [r7, #32]
 800249c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80024a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024a4:	edc7 7a06 	vstr	s15, [r7, #24]
			index1 = i + fraction;  // 线性插值计算更精确的位置
 80024a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024aa:	ee07 3a90 	vmov	s15, r3
 80024ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024b2:	edd7 7a06 	vldr	s15, [r7, #24]
 80024b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024be:	ee17 3a90 	vmov	r3, s15
 80024c2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
		}

		if (index2 == 0 && voltage <= v_target2 && next_voltage >= v_target2) {
 80024c4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d130      	bne.n	800252c <Find_tau_com+0x20c>
 80024ca:	ed97 7a08 	vldr	s14, [r7, #32]
 80024ce:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80024d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024da:	d827      	bhi.n	800252c <Find_tau_com+0x20c>
 80024dc:	ed97 7a07 	vldr	s14, [r7, #28]
 80024e0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80024e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ec:	db1e      	blt.n	800252c <Find_tau_com+0x20c>
			float fraction = (v_target2 - voltage) / (next_voltage - voltage);
 80024ee:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80024f2:	edd7 7a08 	vldr	s15, [r7, #32]
 80024f6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80024fa:	ed97 7a07 	vldr	s14, [r7, #28]
 80024fe:	edd7 7a08 	vldr	s15, [r7, #32]
 8002502:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002506:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800250a:	edc7 7a05 	vstr	s15, [r7, #20]
			index2 = i + fraction;  // 线性插值计算更精确的位置
 800250e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002510:	ee07 3a90 	vmov	s15, r3
 8002514:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002518:	edd7 7a05 	vldr	s15, [r7, #20]
 800251c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002520:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002524:	ee17 3a90 	vmov	r3, s15
 8002528:	87bb      	strh	r3, [r7, #60]	@ 0x3c
			break;
 800252a:	e008      	b.n	800253e <Find_tau_com+0x21e>
	for (int i = start_index; i < BUFFER_SIZE - 1; i++) {
 800252c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800252e:	3301      	adds	r3, #1
 8002530:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002534:	f240 72fe 	movw	r2, #2046	@ 0x7fe
 8002538:	4293      	cmp	r3, r2
 800253a:	f77f af69 	ble.w	8002410 <Find_tau_com+0xf0>
		}
	}

	// 4. 计算时间常数（改进计算方法）
	if (index1 > 0 && index2 > 0 && index2 - index1 > 50) {
 800253e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002540:	2b00      	cmp	r3, #0
 8002542:	d01a      	beq.n	800257a <Find_tau_com+0x25a>
 8002544:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8002546:	2b00      	cmp	r3, #0
 8002548:	d017      	beq.n	800257a <Find_tau_com+0x25a>
 800254a:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 800254c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	2b32      	cmp	r3, #50	@ 0x32
 8002552:	dd12      	ble.n	800257a <Find_tau_com+0x25a>
		// 使用两个时间点计算时间常数，提高准确性
		float delta_index = index2 - index1;
 8002554:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8002556:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	ee07 3a90 	vmov	s15, r3
 800255e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002562:	edc7 7a04 	vstr	s15, [r7, #16]
		float tau = delta_index * (1.0f / SAMPLE_RATE);
 8002566:	edd7 7a04 	vldr	s15, [r7, #16]
 800256a:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80025ac <Find_tau_com+0x28c>
 800256e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002572:	edc7 7a03 	vstr	s15, [r7, #12]
		return tau;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	e001      	b.n	800257e <Find_tau_com+0x25e>
	} else {
		return 0;  // 无法计算有效时间常数
 800257a:	f04f 0300 	mov.w	r3, #0
	}
}
 800257e:	ee07 3a90 	vmov	s15, r3
 8002582:	eeb0 0a67 	vmov.f32	s0, s15
 8002586:	3748      	adds	r7, #72	@ 0x48
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	f3af 8000 	nop.w
 8002590:	10624dd3 	.word	0x10624dd3
 8002594:	3fe43958 	.word	0x3fe43958
 8002598:	7ae147ae 	.word	0x7ae147ae
 800259c:	3febae14 	.word	0x3febae14
 80025a0:	40533333 	.word	0x40533333
 80025a4:	457ff000 	.word	0x457ff000
 80025a8:	3d4ccccd 	.word	0x3d4ccccd
 80025ac:	360637bd 	.word	0x360637bd

080025b0 <steady_test>:
int steady_test(uint16_t *adc_buffer, float V) {
 80025b0:	b5b0      	push	{r4, r5, r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	ed87 0a00 	vstr	s0, [r7]
	float v_end = (adc_buffer[BUFFER_SIZE - 1] * VREF) / 4095.0f;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f603 73fe 	addw	r3, r3, #4094	@ 0xffe
 80025c2:	881b      	ldrh	r3, [r3, #0]
 80025c4:	ee07 3a90 	vmov	s15, r3
 80025c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025cc:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8002628 <steady_test+0x78>
 80025d0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80025d4:	eddf 6a15 	vldr	s13, [pc, #84]	@ 800262c <steady_test+0x7c>
 80025d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025dc:	edc7 7a03 	vstr	s15, [r7, #12]
	if (v_end > 0.98 * V) {
 80025e0:	68f8      	ldr	r0, [r7, #12]
 80025e2:	f7fd ffb9 	bl	8000558 <__aeabi_f2d>
 80025e6:	4604      	mov	r4, r0
 80025e8:	460d      	mov	r5, r1
 80025ea:	6838      	ldr	r0, [r7, #0]
 80025ec:	f7fd ffb4 	bl	8000558 <__aeabi_f2d>
 80025f0:	a30b      	add	r3, pc, #44	@ (adr r3, 8002620 <steady_test+0x70>)
 80025f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f6:	f7fe f807 	bl	8000608 <__aeabi_dmul>
 80025fa:	4602      	mov	r2, r0
 80025fc:	460b      	mov	r3, r1
 80025fe:	4620      	mov	r0, r4
 8002600:	4629      	mov	r1, r5
 8002602:	f7fe fa91 	bl	8000b28 <__aeabi_dcmpgt>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d001      	beq.n	8002610 <steady_test+0x60>
		return 1;
 800260c:	2301      	movs	r3, #1
 800260e:	e000      	b.n	8002612 <steady_test+0x62>
	} else {
		return 0;
 8002610:	2300      	movs	r3, #0
	}
}
 8002612:	4618      	mov	r0, r3
 8002614:	3710      	adds	r7, #16
 8002616:	46bd      	mov	sp, r7
 8002618:	bdb0      	pop	{r4, r5, r7, pc}
 800261a:	bf00      	nop
 800261c:	f3af 8000 	nop.w
 8002620:	f5c28f5c 	.word	0xf5c28f5c
 8002624:	3fef5c28 	.word	0x3fef5c28
 8002628:	40533333 	.word	0x40533333
 800262c:	457ff000 	.word	0x457ff000

08002630 <analyze_Vpicture>:
int analyze_Vpicture(uint16_t *adc_buffer, uint16_t *adc_buffer2) {
 8002630:	b580      	push	{r7, lr}
 8002632:	b088      	sub	sp, #32
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
	float v1 = calculate_average(adc_buffer);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f000 fa7e 	bl	8002b3c <calculate_average>
 8002640:	ed87 0a07 	vstr	s0, [r7, #28]
	float v2 = calculate_average(adc_buffer2);
 8002644:	6838      	ldr	r0, [r7, #0]
 8002646:	f000 fa79 	bl	8002b3c <calculate_average>
 800264a:	ed87 0a06 	vstr	s0, [r7, #24]
	float v_lowZ = 3.3 * 1 / 11;
 800264e:	4b2d      	ldr	r3, [pc, #180]	@ (8002704 <analyze_Vpicture+0xd4>)
 8002650:	617b      	str	r3, [r7, #20]
	float v_highZ = 3.3 * 10 / 11;
 8002652:	4b2d      	ldr	r3, [pc, #180]	@ (8002708 <analyze_Vpicture+0xd8>)
 8002654:	613b      	str	r3, [r7, #16]
	float v_lowF = 3.3 * 1 / 11;
 8002656:	4b2b      	ldr	r3, [pc, #172]	@ (8002704 <analyze_Vpicture+0xd4>)
 8002658:	60fb      	str	r3, [r7, #12]
	float v_highF = 3.3 * 10 / 11;
 800265a:	4b2b      	ldr	r3, [pc, #172]	@ (8002708 <analyze_Vpicture+0xd8>)
 800265c:	60bb      	str	r3, [r7, #8]
	if ((v_lowZ <= v1 && v1 <= v_highZ) && (v_lowF <= v2 && v2 <= v_highF)) {
 800265e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002662:	edd7 7a07 	vldr	s15, [r7, #28]
 8002666:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800266a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800266e:	d81c      	bhi.n	80026aa <analyze_Vpicture+0x7a>
 8002670:	ed97 7a07 	vldr	s14, [r7, #28]
 8002674:	edd7 7a04 	vldr	s15, [r7, #16]
 8002678:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800267c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002680:	d813      	bhi.n	80026aa <analyze_Vpicture+0x7a>
 8002682:	ed97 7a03 	vldr	s14, [r7, #12]
 8002686:	edd7 7a06 	vldr	s15, [r7, #24]
 800268a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800268e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002692:	d80a      	bhi.n	80026aa <analyze_Vpicture+0x7a>
 8002694:	ed97 7a06 	vldr	s14, [r7, #24]
 8002698:	edd7 7a02 	vldr	s15, [r7, #8]
 800269c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026a4:	d801      	bhi.n	80026aa <analyze_Vpicture+0x7a>
		return 1;  //符合
 80026a6:	2301      	movs	r3, #1
 80026a8:	e027      	b.n	80026fa <analyze_Vpicture+0xca>
	} else if (v1 > v_highZ && v2 < v_lowF) {
 80026aa:	ed97 7a07 	vldr	s14, [r7, #28]
 80026ae:	edd7 7a04 	vldr	s15, [r7, #16]
 80026b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026ba:	dd0a      	ble.n	80026d2 <analyze_Vpicture+0xa2>
 80026bc:	ed97 7a06 	vldr	s14, [r7, #24]
 80026c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80026c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026cc:	d501      	bpl.n	80026d2 <analyze_Vpicture+0xa2>
		return 2;  //大
 80026ce:	2302      	movs	r3, #2
 80026d0:	e013      	b.n	80026fa <analyze_Vpicture+0xca>
	} else if (v1 < v_lowZ && v2 > v_highF) {
 80026d2:	ed97 7a07 	vldr	s14, [r7, #28]
 80026d6:	edd7 7a05 	vldr	s15, [r7, #20]
 80026da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026e2:	d50a      	bpl.n	80026fa <analyze_Vpicture+0xca>
 80026e4:	ed97 7a06 	vldr	s14, [r7, #24]
 80026e8:	edd7 7a02 	vldr	s15, [r7, #8]
 80026ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026f4:	dd01      	ble.n	80026fa <analyze_Vpicture+0xca>
		return 3;  //小
 80026f6:	2303      	movs	r3, #3
 80026f8:	e7ff      	b.n	80026fa <analyze_Vpicture+0xca>
	}
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3720      	adds	r7, #32
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	3e99999a 	.word	0x3e99999a
 8002708:	40400000 	.word	0x40400000
 800270c:	00000000 	.word	0x00000000

08002710 <Analyze_trend>:

int Analyze_trend(uint16_t *adc_buffer, float V_steady) {
 8002710:	b580      	push	{r7, lr}
 8002712:	b098      	sub	sp, #96	@ 0x60
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	ed87 0a00 	vstr	s0, [r7]
	// 寻找起始有效电压点
	int start_index = -1;
 800271c:	f04f 33ff 	mov.w	r3, #4294967295
 8002720:	65fb      	str	r3, [r7, #92]	@ 0x5c
	float start_voltage = 0.0f;
 8002722:	f04f 0300 	mov.w	r3, #0
 8002726:	65bb      	str	r3, [r7, #88]	@ 0x58
	for (int i = 0; i < BUFFER_SIZE; i++) {
 8002728:	2300      	movs	r3, #0
 800272a:	657b      	str	r3, [r7, #84]	@ 0x54
 800272c:	e023      	b.n	8002776 <Analyze_trend+0x66>
		float voltage = (adc_buffer[i] * VREF) / 4095.0f;
 800272e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	4413      	add	r3, r2
 8002736:	881b      	ldrh	r3, [r3, #0]
 8002738:	ee07 3a90 	vmov	s15, r3
 800273c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002740:	ed9f 7abb 	vldr	s14, [pc, #748]	@ 8002a30 <Analyze_trend+0x320>
 8002744:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002748:	eddf 6aba 	vldr	s13, [pc, #744]	@ 8002a34 <Analyze_trend+0x324>
 800274c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002750:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		if (voltage > MIN_VOLTAGE) {
 8002754:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002758:	ed9f 7ab7 	vldr	s14, [pc, #732]	@ 8002a38 <Analyze_trend+0x328>
 800275c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002764:	dd04      	ble.n	8002770 <Analyze_trend+0x60>
			start_index = i;
 8002766:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002768:	65fb      	str	r3, [r7, #92]	@ 0x5c
			start_voltage = voltage;
 800276a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800276c:	65bb      	str	r3, [r7, #88]	@ 0x58
			break;
 800276e:	e006      	b.n	800277e <Analyze_trend+0x6e>
	for (int i = 0; i < BUFFER_SIZE; i++) {
 8002770:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002772:	3301      	adds	r3, #1
 8002774:	657b      	str	r3, [r7, #84]	@ 0x54
 8002776:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002778:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800277c:	dbd7      	blt.n	800272e <Analyze_trend+0x1e>
		}
	}

	if (start_index == -1)
 800277e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002784:	d101      	bne.n	800278a <Analyze_trend+0x7a>
		return 0; // 无有效数据
 8002786:	2300      	movs	r3, #0
 8002788:	e146      	b.n	8002a18 <Analyze_trend+0x308>

	// 计算结束电压（取最后10%数据的平均值）
	float end_voltage = 0.0f;
 800278a:	f04f 0300 	mov.w	r3, #0
 800278e:	653b      	str	r3, [r7, #80]	@ 0x50
	int count = 0;
 8002790:	2300      	movs	r3, #0
 8002792:	64fb      	str	r3, [r7, #76]	@ 0x4c
	for (int i = BUFFER_SIZE * 0.9; i < BUFFER_SIZE; i++) {
 8002794:	f240 7333 	movw	r3, #1843	@ 0x733
 8002798:	64bb      	str	r3, [r7, #72]	@ 0x48
 800279a:	e020      	b.n	80027de <Analyze_trend+0xce>
		if (i >= start_index) {
 800279c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800279e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027a0:	429a      	cmp	r2, r3
 80027a2:	db19      	blt.n	80027d8 <Analyze_trend+0xc8>
			end_voltage += (adc_buffer[i] * VREF) / 4095.0f;
 80027a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	4413      	add	r3, r2
 80027ac:	881b      	ldrh	r3, [r3, #0]
 80027ae:	ee07 3a90 	vmov	s15, r3
 80027b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027b6:	ed9f 7a9e 	vldr	s14, [pc, #632]	@ 8002a30 <Analyze_trend+0x320>
 80027ba:	ee27 7a87 	vmul.f32	s14, s15, s14
 80027be:	eddf 6a9d 	vldr	s13, [pc, #628]	@ 8002a34 <Analyze_trend+0x324>
 80027c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027c6:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80027ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027ce:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
			count++;
 80027d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80027d4:	3301      	adds	r3, #1
 80027d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
	for (int i = BUFFER_SIZE * 0.9; i < BUFFER_SIZE; i++) {
 80027d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80027da:	3301      	adds	r3, #1
 80027dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80027de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80027e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80027e4:	dbda      	blt.n	800279c <Analyze_trend+0x8c>
		}
	}

	if (count == 0)
 80027e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d101      	bne.n	80027f0 <Analyze_trend+0xe0>
		return 0;
 80027ec:	2300      	movs	r3, #0
 80027ee:	e113      	b.n	8002a18 <Analyze_trend+0x308>
	end_voltage /= count;
 80027f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80027f2:	ee07 3a90 	vmov	s15, r3
 80027f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027fa:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 80027fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002802:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50

	// 计算电压变化量
	float delta_voltage = end_voltage - start_voltage;
 8002806:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800280a:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800280e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002812:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

	// 判断基本趋势
	if (fabsf(delta_voltage) < 0.1)
 8002816:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800281a:	eef0 7ae7 	vabs.f32	s15, s15
 800281e:	ee17 0a90 	vmov	r0, s15
 8002822:	f7fd fe99 	bl	8000558 <__aeabi_f2d>
 8002826:	a37e      	add	r3, pc, #504	@ (adr r3, 8002a20 <Analyze_trend+0x310>)
 8002828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800282c:	f7fe f95e 	bl	8000aec <__aeabi_dcmplt>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <Analyze_trend+0x12a>
		return 0; // 无明显趋势
 8002836:	2300      	movs	r3, #0
 8002838:	e0ee      	b.n	8002a18 <Analyze_trend+0x308>

	// 计算前20%数据的平均上升速率（用于区分电阻和电容）
	float fast_rising_threshold = 0.03f; // 快速上升阈值（V/采样点）
 800283a:	4b80      	ldr	r3, [pc, #512]	@ (8002a3c <Analyze_trend+0x32c>)
 800283c:	627b      	str	r3, [r7, #36]	@ 0x24
	float avg_initial_slope = 0.0f;
 800283e:	f04f 0300 	mov.w	r3, #0
 8002842:	647b      	str	r3, [r7, #68]	@ 0x44
	int initial_points = BUFFER_SIZE * 0.2;
 8002844:	f240 1399 	movw	r3, #409	@ 0x199
 8002848:	623b      	str	r3, [r7, #32]
	int valid_initial_points = 0;
 800284a:	2300      	movs	r3, #0
 800284c:	643b      	str	r3, [r7, #64]	@ 0x40

	for (int i = start_index;
 800284e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002850:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002852:	e028      	b.n	80028a6 <Analyze_trend+0x196>
			i < start_index + initial_points && i < BUFFER_SIZE - 1; i++) {
		float slope = ((adc_buffer[i + 1] - adc_buffer[i]) * VREF) / 4095.0f;
 8002854:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002856:	3301      	adds	r3, #1
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	4413      	add	r3, r2
 800285e:	881b      	ldrh	r3, [r3, #0]
 8002860:	4619      	mov	r1, r3
 8002862:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	4413      	add	r3, r2
 800286a:	881b      	ldrh	r3, [r3, #0]
 800286c:	1acb      	subs	r3, r1, r3
 800286e:	ee07 3a90 	vmov	s15, r3
 8002872:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002876:	ed9f 7a6e 	vldr	s14, [pc, #440]	@ 8002a30 <Analyze_trend+0x320>
 800287a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800287e:	eddf 6a6d 	vldr	s13, [pc, #436]	@ 8002a34 <Analyze_trend+0x324>
 8002882:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002886:	edc7 7a07 	vstr	s15, [r7, #28]
		avg_initial_slope += slope;
 800288a:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 800288e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002892:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002896:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
		valid_initial_points++;
 800289a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800289c:	3301      	adds	r3, #1
 800289e:	643b      	str	r3, [r7, #64]	@ 0x40
			i < start_index + initial_points && i < BUFFER_SIZE - 1; i++) {
 80028a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028a2:	3301      	adds	r3, #1
 80028a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80028a6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80028a8:	6a3b      	ldr	r3, [r7, #32]
 80028aa:	4413      	add	r3, r2
 80028ac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80028ae:	429a      	cmp	r2, r3
 80028b0:	da04      	bge.n	80028bc <Analyze_trend+0x1ac>
 80028b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028b4:	f240 72fe 	movw	r2, #2046	@ 0x7fe
 80028b8:	4293      	cmp	r3, r2
 80028ba:	ddcb      	ble.n	8002854 <Analyze_trend+0x144>
	}

	if (valid_initial_points > 0) {
 80028bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028be:	2b00      	cmp	r3, #0
 80028c0:	dd0a      	ble.n	80028d8 <Analyze_trend+0x1c8>
		avg_initial_slope /= valid_initial_points;
 80028c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028c4:	ee07 3a90 	vmov	s15, r3
 80028c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028cc:	edd7 6a11 	vldr	s13, [r7, #68]	@ 0x44
 80028d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028d4:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
	}

	// 计算曲线非线性度（电容充电为指数曲线，电阻为线性）
	float nonlinearity = 0.0f;
 80028d8:	f04f 0300 	mov.w	r3, #0
 80028dc:	63bb      	str	r3, [r7, #56]	@ 0x38
	int curve_points = BUFFER_SIZE * 0.5;
 80028de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80028e2:	61bb      	str	r3, [r7, #24]
	int valid_curve_points = 0;
 80028e4:	2300      	movs	r3, #0
 80028e6:	637b      	str	r3, [r7, #52]	@ 0x34

	for (int i = start_index;
 80028e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80028ea:	633b      	str	r3, [r7, #48]	@ 0x30
 80028ec:	e05a      	b.n	80029a4 <Analyze_trend+0x294>
			i < start_index + curve_points && i < BUFFER_SIZE - 2; i++) {
		float v1 = (adc_buffer[i] * VREF) / 4095.0f;
 80028ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028f0:	005b      	lsls	r3, r3, #1
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	4413      	add	r3, r2
 80028f6:	881b      	ldrh	r3, [r3, #0]
 80028f8:	ee07 3a90 	vmov	s15, r3
 80028fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002900:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8002a30 <Analyze_trend+0x320>
 8002904:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002908:	eddf 6a4a 	vldr	s13, [pc, #296]	@ 8002a34 <Analyze_trend+0x324>
 800290c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002910:	edc7 7a05 	vstr	s15, [r7, #20]
		float v2 = (adc_buffer[i + 1] * VREF) / 4095.0f;
 8002914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002916:	3301      	adds	r3, #1
 8002918:	005b      	lsls	r3, r3, #1
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	4413      	add	r3, r2
 800291e:	881b      	ldrh	r3, [r3, #0]
 8002920:	ee07 3a90 	vmov	s15, r3
 8002924:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002928:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 8002a30 <Analyze_trend+0x320>
 800292c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002930:	eddf 6a40 	vldr	s13, [pc, #256]	@ 8002a34 <Analyze_trend+0x324>
 8002934:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002938:	edc7 7a04 	vstr	s15, [r7, #16]
		float v3 = (adc_buffer[i + 2] * VREF) / 4095.0f;
 800293c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800293e:	3302      	adds	r3, #2
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	4413      	add	r3, r2
 8002946:	881b      	ldrh	r3, [r3, #0]
 8002948:	ee07 3a90 	vmov	s15, r3
 800294c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002950:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8002a30 <Analyze_trend+0x320>
 8002954:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002958:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8002a34 <Analyze_trend+0x324>
 800295c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002960:	edc7 7a03 	vstr	s15, [r7, #12]

		// 线性度指标：(v3-v2)与(v2-v1)的差异
		float linear_diff = fabsf((v3 - v2) - (v2 - v1));
 8002964:	ed97 7a03 	vldr	s14, [r7, #12]
 8002968:	edd7 7a04 	vldr	s15, [r7, #16]
 800296c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002970:	edd7 6a04 	vldr	s13, [r7, #16]
 8002974:	edd7 7a05 	vldr	s15, [r7, #20]
 8002978:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800297c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002980:	eef0 7ae7 	vabs.f32	s15, s15
 8002984:	edc7 7a02 	vstr	s15, [r7, #8]
		nonlinearity += linear_diff;
 8002988:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 800298c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002990:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002994:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		valid_curve_points++;
 8002998:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800299a:	3301      	adds	r3, #1
 800299c:	637b      	str	r3, [r7, #52]	@ 0x34
			i < start_index + curve_points && i < BUFFER_SIZE - 2; i++) {
 800299e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029a0:	3301      	adds	r3, #1
 80029a2:	633b      	str	r3, [r7, #48]	@ 0x30
 80029a4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	4413      	add	r3, r2
 80029aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80029ac:	429a      	cmp	r2, r3
 80029ae:	da04      	bge.n	80029ba <Analyze_trend+0x2aa>
 80029b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029b2:	f240 72fd 	movw	r2, #2045	@ 0x7fd
 80029b6:	4293      	cmp	r3, r2
 80029b8:	dd99      	ble.n	80028ee <Analyze_trend+0x1de>
	}

	if (valid_curve_points > 0) {
 80029ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029bc:	2b00      	cmp	r3, #0
 80029be:	dd0a      	ble.n	80029d6 <Analyze_trend+0x2c6>
		nonlinearity /= valid_curve_points;
 80029c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029c2:	ee07 3a90 	vmov	s15, r3
 80029c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029ca:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 80029ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029d2:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
	}

	// 关键判断逻辑：
	// 1. 若初始上升速率快且非线性度低，认为是电阻（返回0）
	// 2. 若初始上升速率慢且非线性度高，认为是电容（返回1）
	if (delta_voltage > 0) {
 80029d6:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80029da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80029de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029e2:	dd17      	ble.n	8002a14 <Analyze_trend+0x304>
		if (avg_initial_slope > fast_rising_threshold && nonlinearity < 0.005) {
 80029e4:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 80029e8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80029ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029f4:	dd0c      	ble.n	8002a10 <Analyze_trend+0x300>
 80029f6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80029f8:	f7fd fdae 	bl	8000558 <__aeabi_f2d>
 80029fc:	a30a      	add	r3, pc, #40	@ (adr r3, 8002a28 <Analyze_trend+0x318>)
 80029fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a02:	f7fe f873 	bl	8000aec <__aeabi_dcmplt>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d001      	beq.n	8002a10 <Analyze_trend+0x300>
			return 0; // 大电阻特性（快速上升且接近线性）
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	e003      	b.n	8002a18 <Analyze_trend+0x308>
		} else {
			return 1; // 电容特性（缓慢上升且非线性）
 8002a10:	2301      	movs	r3, #1
 8002a12:	e001      	b.n	8002a18 <Analyze_trend+0x308>
		}
	} else {
		return -1; // 下降趋势
 8002a14:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3760      	adds	r7, #96	@ 0x60
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	9999999a 	.word	0x9999999a
 8002a24:	3fb99999 	.word	0x3fb99999
 8002a28:	47ae147b 	.word	0x47ae147b
 8002a2c:	3f747ae1 	.word	0x3f747ae1
 8002a30:	40533333 	.word	0x40533333
 8002a34:	457ff000 	.word	0x457ff000
 8002a38:	3d4ccccd 	.word	0x3d4ccccd
 8002a3c:	3cf5c28f 	.word	0x3cf5c28f

08002a40 <Danalyze>:

//
float Danalyze() {
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b088      	sub	sp, #32
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002a4a:	603b      	str	r3, [r7, #0]
	}
	int is_near_2v6(float voltage) {
		return voltage >= 2.5f && voltage <= 2.8f;
	}

	float v1 = calculate_average(adc_buffer1_com);
 8002a4c:	4835      	ldr	r0, [pc, #212]	@ (8002b24 <Danalyze+0xe4>)
 8002a4e:	f000 f875 	bl	8002b3c <calculate_average>
 8002a52:	ed87 0a07 	vstr	s0, [r7, #28]
	float IZ = fabs(VPA0Z - v1) / 51;
 8002a56:	4b34      	ldr	r3, [pc, #208]	@ (8002b28 <Danalyze+0xe8>)
 8002a58:	ed93 7a00 	vldr	s14, [r3]
 8002a5c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002a60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a64:	eeb0 7ae7 	vabs.f32	s14, s15
 8002a68:	eddf 6a30 	vldr	s13, [pc, #192]	@ 8002b2c <Danalyze+0xec>
 8002a6c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a70:	edc7 7a06 	vstr	s15, [r7, #24]
	float v2 = calculate_average(adc_buffer2_com);
 8002a74:	482e      	ldr	r0, [pc, #184]	@ (8002b30 <Danalyze+0xf0>)
 8002a76:	f000 f861 	bl	8002b3c <calculate_average>
 8002a7a:	ed87 0a05 	vstr	s0, [r7, #20]
	float IF = fabs(v2 - VPA0F) / 51;
 8002a7e:	4b2d      	ldr	r3, [pc, #180]	@ (8002b34 <Danalyze+0xf4>)
 8002a80:	edd3 7a00 	vldr	s15, [r3]
 8002a84:	ed97 7a05 	vldr	s14, [r7, #20]
 8002a88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a8c:	eeb0 7ae7 	vabs.f32	s14, s15
 8002a90:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002b2c <Danalyze+0xec>
 8002a94:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a98:	edc7 7a04 	vstr	s15, [r7, #16]
	float a = IZ / IF;
 8002a9c:	edd7 6a06 	vldr	s13, [r7, #24]
 8002aa0:	ed97 7a04 	vldr	s14, [r7, #16]
 8002aa4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002aa8:	edc7 7a03 	vstr	s15, [r7, #12]
	float b = IF / IZ;
 8002aac:	edd7 6a04 	vldr	s13, [r7, #16]
 8002ab0:	ed97 7a06 	vldr	s14, [r7, #24]
 8002ab4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ab8:	edc7 7a02 	vstr	s15, [r7, #8]
	float delta = fabs(v1 - v2);
 8002abc:	ed97 7a07 	vldr	s14, [r7, #28]
 8002ac0:	edd7 7a05 	vldr	s15, [r7, #20]
 8002ac4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ac8:	eef0 7ae7 	vabs.f32	s15, s15
 8002acc:	edc7 7a01 	vstr	s15, [r7, #4]
	if (a > 5 || b >= 5) {
 8002ad0:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ad4:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8002ad8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ae0:	dc08      	bgt.n	8002af4 <Danalyze+0xb4>
 8002ae2:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ae6:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8002aea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002af2:	db10      	blt.n	8002b16 <Danalyze+0xd6>
		if (a > 5) {
 8002af4:	edd7 7a03 	vldr	s15, [r7, #12]
 8002af8:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8002afc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b04:	dd02      	ble.n	8002b0c <Danalyze+0xcc>
			//sprintf(message1, " Z V=%.2fΩ", delta);
			return delta;
 8002b06:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b0a:	e006      	b.n	8002b1a <Danalyze+0xda>
		} else {
			//sprintf(message1, " F V=%.2fΩ", delta);
			return -delta;
 8002b0c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b10:	eef1 7a67 	vneg.f32	s15, s15
 8002b14:	e001      	b.n	8002b1a <Danalyze+0xda>
		}
	} else {
		return 0;
 8002b16:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8002b38 <Danalyze+0xf8>
	}
}
 8002b1a:	eeb0 0a67 	vmov.f32	s0, s15
 8002b1e:	3720      	adds	r7, #32
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	20000320 	.word	0x20000320
 8002b28:	20006a50 	.word	0x20006a50
 8002b2c:	424c0000 	.word	0x424c0000
 8002b30:	20001320 	.word	0x20001320
 8002b34:	20006a54 	.word	0x20006a54
 8002b38:	00000000 	.word	0x00000000

08002b3c <calculate_average>:
//
float calculate_average(uint16_t *buffer) {
 8002b3c:	b480      	push	{r7}
 8002b3e:	b087      	sub	sp, #28
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
	float sum = 0.0f;
 8002b44:	f04f 0300 	mov.w	r3, #0
 8002b48:	617b      	str	r3, [r7, #20]
	int count = 0;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	613b      	str	r3, [r7, #16]
	for (int i = 100; i < BUFFER_SIZE; i += SAMPLE_STEP) {
 8002b4e:	2364      	movs	r3, #100	@ 0x64
 8002b50:	60fb      	str	r3, [r7, #12]
 8002b52:	e014      	b.n	8002b7e <calculate_average+0x42>
		sum += buffer[i];
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	4413      	add	r3, r2
 8002b5c:	881b      	ldrh	r3, [r3, #0]
 8002b5e:	ee07 3a90 	vmov	s15, r3
 8002b62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b66:	ed97 7a05 	vldr	s14, [r7, #20]
 8002b6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b6e:	edc7 7a05 	vstr	s15, [r7, #20]
		count++;
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	3301      	adds	r3, #1
 8002b76:	613b      	str	r3, [r7, #16]
	for (int i = 100; i < BUFFER_SIZE; i += SAMPLE_STEP) {
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	3314      	adds	r3, #20
 8002b7c:	60fb      	str	r3, [r7, #12]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b84:	dbe6      	blt.n	8002b54 <calculate_average+0x18>
	}
	return (count > 0) ? (sum / count) * VREF / 4095.0f : 0.0f;
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	dd11      	ble.n	8002bb0 <calculate_average+0x74>
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	ee07 3a90 	vmov	s15, r3
 8002b92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b96:	edd7 6a05 	vldr	s13, [r7, #20]
 8002b9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b9e:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8002bc8 <calculate_average+0x8c>
 8002ba2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ba6:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8002bcc <calculate_average+0x90>
 8002baa:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002bae:	e001      	b.n	8002bb4 <calculate_average+0x78>
 8002bb0:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8002bd0 <calculate_average+0x94>
 8002bb4:	eef0 7a47 	vmov.f32	s15, s14
}
 8002bb8:	eeb0 0a67 	vmov.f32	s0, s15
 8002bbc:	371c      	adds	r7, #28
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	40533333 	.word	0x40533333
 8002bcc:	457ff000 	.word	0x457ff000
 8002bd0:	00000000 	.word	0x00000000

08002bd4 <DMA_Measure_com>:
//
void DMA_Measure_com(int sign, uint16_t *adc_buffer) {
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]
	// 1. 电容放电
	//memset(adc_buffer, 0, BUFFER_SIZE);
	HAL_Delay(50);  // 10ms放电
 8002bde:	2032      	movs	r0, #50	@ 0x32
 8002be0:	f001 f8b0 	bl	8003d44 <HAL_Delay>

	// 2. 启动DMA采样
	uint32_t start_tick = HAL_GetTick();
 8002be4:	f001 f8a2 	bl	8003d2c <HAL_GetTick>
 8002be8:	60f8      	str	r0, [r7, #12]
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_buffer, BUFFER_SIZE);
 8002bea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002bee:	6839      	ldr	r1, [r7, #0]
 8002bf0:	4831      	ldr	r0, [pc, #196]	@ (8002cb8 <DMA_Measure_com+0xe4>)
 8002bf2:	f001 fa1f 	bl	8004034 <HAL_ADC_Start_DMA>
	measurement_done = 0;
 8002bf6:	4b31      	ldr	r3, [pc, #196]	@ (8002cbc <DMA_Measure_com+0xe8>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	701a      	strb	r2, [r3, #0]

	// 3. 短暂延时确保DMA已启动
	//HAL_Delay(1);

	if (sign == 1) {
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d105      	bne.n	8002c0e <DMA_Measure_com+0x3a>
		// STEP_PIN: 高电平
		HAL_GPIO_WritePin(GPIOA, STEP_PIN, GPIO_PIN_SET);
 8002c02:	2201      	movs	r2, #1
 8002c04:	2101      	movs	r1, #1
 8002c06:	482e      	ldr	r0, [pc, #184]	@ (8002cc0 <DMA_Measure_com+0xec>)
 8002c08:	f002 fca6 	bl	8005558 <HAL_GPIO_WritePin>
 8002c0c:	e01a      	b.n	8002c44 <DMA_Measure_com+0x70>
	} else if (sign == 2) {
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d105      	bne.n	8002c20 <DMA_Measure_com+0x4c>
		// STEP3_PIN: 高电平
		HAL_GPIO_WritePin(GPIOA, STEP2_PIN, GPIO_PIN_SET);
 8002c14:	2201      	movs	r2, #1
 8002c16:	2180      	movs	r1, #128	@ 0x80
 8002c18:	4829      	ldr	r0, [pc, #164]	@ (8002cc0 <DMA_Measure_com+0xec>)
 8002c1a:	f002 fc9d 	bl	8005558 <HAL_GPIO_WritePin>
 8002c1e:	e011      	b.n	8002c44 <DMA_Measure_com+0x70>
	} else if (sign == 3) {
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2b03      	cmp	r3, #3
 8002c24:	d105      	bne.n	8002c32 <DMA_Measure_com+0x5e>
		// STEP2_PIN: 高电平
		HAL_GPIO_WritePin(GPIOA, STEP3_PIN, GPIO_PIN_SET);
 8002c26:	2201      	movs	r2, #1
 8002c28:	2110      	movs	r1, #16
 8002c2a:	4825      	ldr	r0, [pc, #148]	@ (8002cc0 <DMA_Measure_com+0xec>)
 8002c2c:	f002 fc94 	bl	8005558 <HAL_GPIO_WritePin>
 8002c30:	e008      	b.n	8002c44 <DMA_Measure_com+0x70>
	} else if (sign == 4) {
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2b04      	cmp	r3, #4
 8002c36:	d105      	bne.n	8002c44 <DMA_Measure_com+0x70>
		HAL_GPIO_WritePin(GPIOB, STEP4_PIN, GPIO_PIN_SET);
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002c3e:	4821      	ldr	r0, [pc, #132]	@ (8002cc4 <DMA_Measure_com+0xf0>)
 8002c40:	f002 fc8a 	bl	8005558 <HAL_GPIO_WritePin>
	}

	// 5. 等待测量完成
	while (!measurement_done)
 8002c44:	bf00      	nop
 8002c46:	4b1d      	ldr	r3, [pc, #116]	@ (8002cbc <DMA_Measure_com+0xe8>)
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d0fa      	beq.n	8002c46 <DMA_Measure_com+0x72>
		;
	HAL_ADC_Stop_DMA(&hadc1);
 8002c50:	4819      	ldr	r0, [pc, #100]	@ (8002cb8 <DMA_Measure_com+0xe4>)
 8002c52:	f001 fae3 	bl	800421c <HAL_ADC_Stop_DMA>
	uint32_t end_tick = HAL_GetTick();
 8002c56:	f001 f869 	bl	8003d2c <HAL_GetTick>
 8002c5a:	60b8      	str	r0, [r7, #8]
	HAL_Delay(50);
 8002c5c:	2032      	movs	r0, #50	@ 0x32
 8002c5e:	f001 f871 	bl	8003d44 <HAL_Delay>
	VPA1 = Sample_PA1_Average();
 8002c62:	f000 f947 	bl	8002ef4 <Sample_PA1_Average>
 8002c66:	eef0 7a40 	vmov.f32	s15, s0
 8002c6a:	4b17      	ldr	r3, [pc, #92]	@ (8002cc8 <DMA_Measure_com+0xf4>)
 8002c6c:	edc3 7a00 	vstr	s15, [r3]
	VPA0 = Sample_PA0_Average();
 8002c70:	f000 f8f0 	bl	8002e54 <Sample_PA0_Average>
 8002c74:	eef0 7a40 	vmov.f32	s15, s0
 8002c78:	4b14      	ldr	r3, [pc, #80]	@ (8002ccc <DMA_Measure_com+0xf8>)
 8002c7a:	edc3 7a00 	vstr	s15, [r3]
	VPA7 = Sample_PA7_Average();
 8002c7e:	f000 f899 	bl	8002db4 <Sample_PA7_Average>
 8002c82:	eef0 7a40 	vmov.f32	s15, s0
 8002c86:	4b12      	ldr	r3, [pc, #72]	@ (8002cd0 <DMA_Measure_com+0xfc>)
 8002c88:	edc3 7a00 	vstr	s15, [r3]
	GPIO_Set_Low(GPIOA, GPIO_PIN_0);
 8002c8c:	2101      	movs	r1, #1
 8002c8e:	480c      	ldr	r0, [pc, #48]	@ (8002cc0 <DMA_Measure_com+0xec>)
 8002c90:	f7fe fc30 	bl	80014f4 <GPIO_Set_Low>
	GPIO_Set_Low(GPIOA, GPIO_PIN_4);
 8002c94:	2110      	movs	r1, #16
 8002c96:	480a      	ldr	r0, [pc, #40]	@ (8002cc0 <DMA_Measure_com+0xec>)
 8002c98:	f7fe fc2c 	bl	80014f4 <GPIO_Set_Low>
	GPIO_Set_Low(GPIOA, GPIO_PIN_7);
 8002c9c:	2180      	movs	r1, #128	@ 0x80
 8002c9e:	4808      	ldr	r0, [pc, #32]	@ (8002cc0 <DMA_Measure_com+0xec>)
 8002ca0:	f7fe fc28 	bl	80014f4 <GPIO_Set_Low>
	GPIO_Set_Low(GPIOB, GPIO_PIN_15);
 8002ca4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002ca8:	4806      	ldr	r0, [pc, #24]	@ (8002cc4 <DMA_Measure_com+0xf0>)
 8002caa:	f7fe fc23 	bl	80014f4 <GPIO_Set_Low>
	// 6. 分析数据
	// Analyze_ADC_Data();
}
 8002cae:	bf00      	nop
 8002cb0:	3710      	adds	r7, #16
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	200001f0 	.word	0x200001f0
 8002cbc:	20006a30 	.word	0x20006a30
 8002cc0:	40020000 	.word	0x40020000
 8002cc4:	40020400 	.word	0x40020400
 8002cc8:	20006a34 	.word	0x20006a34
 8002ccc:	20006a4c 	.word	0x20006a4c
 8002cd0:	20006a40 	.word	0x20006a40

08002cd4 <ADC_SampleWithTemporaryChannel>:
	// Analyze_ADC_Data();
}
//
// 简化的通道切换函数
int ADC_SampleWithTemporaryChannel(ADC_HandleTypeDef *hadc,
		uint32_t temp_channel, uint16_t *buffer, int size) {
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b08a      	sub	sp, #40	@ 0x28
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	607a      	str	r2, [r7, #4]
 8002ce0:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status;

	// 1. 停止当前ADC DMA
	status = HAL_ADC_Stop_DMA(hadc);
 8002ce2:	68f8      	ldr	r0, [r7, #12]
 8002ce4:	f001 fa9a 	bl	800421c <HAL_ADC_Stop_DMA>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (status != HAL_OK)
 8002cee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d002      	beq.n	8002cfc <ADC_SampleWithTemporaryChannel+0x28>
		return -1;
 8002cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8002cfa:	e055      	b.n	8002da8 <ADC_SampleWithTemporaryChannel+0xd4>

	// 2. 配置为临时通道
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8002cfc:	f107 0314 	add.w	r3, r7, #20
 8002d00:	2200      	movs	r2, #0
 8002d02:	601a      	str	r2, [r3, #0]
 8002d04:	605a      	str	r2, [r3, #4]
 8002d06:	609a      	str	r2, [r3, #8]
 8002d08:	60da      	str	r2, [r3, #12]
	sConfig.Channel = temp_channel;
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	617b      	str	r3, [r7, #20]
	sConfig.Rank = 1;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	61bb      	str	r3, [r7, #24]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES; // 根据您的需求设置
 8002d12:	2300      	movs	r3, #0
 8002d14:	61fb      	str	r3, [r7, #28]

	status = HAL_ADC_ConfigChannel(hadc, &sConfig);
 8002d16:	f107 0314 	add.w	r3, r7, #20
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	68f8      	ldr	r0, [r7, #12]
 8002d1e:	f001 faeb 	bl	80042f8 <HAL_ADC_ConfigChannel>
 8002d22:	4603      	mov	r3, r0
 8002d24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (status != HAL_OK)
 8002d28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d002      	beq.n	8002d36 <ADC_SampleWithTemporaryChannel+0x62>
		return -2;
 8002d30:	f06f 0301 	mvn.w	r3, #1
 8002d34:	e038      	b.n	8002da8 <ADC_SampleWithTemporaryChannel+0xd4>

	// 3. 启动临时通道采样
	measurement_done = 0; // 重置完成标志
 8002d36:	4b1e      	ldr	r3, [pc, #120]	@ (8002db0 <ADC_SampleWithTemporaryChannel+0xdc>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	701a      	strb	r2, [r3, #0]
	status = HAL_ADC_Start_DMA(hadc, (uint32_t*) buffer, size);
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	461a      	mov	r2, r3
 8002d40:	6879      	ldr	r1, [r7, #4]
 8002d42:	68f8      	ldr	r0, [r7, #12]
 8002d44:	f001 f976 	bl	8004034 <HAL_ADC_Start_DMA>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (status != HAL_OK)
 8002d4e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d002      	beq.n	8002d5c <ADC_SampleWithTemporaryChannel+0x88>
		return -3;
 8002d56:	f06f 0302 	mvn.w	r3, #2
 8002d5a:	e025      	b.n	8002da8 <ADC_SampleWithTemporaryChannel+0xd4>

	// 4. 等待采样完成
	while (!measurement_done)
 8002d5c:	bf00      	nop
 8002d5e:	4b14      	ldr	r3, [pc, #80]	@ (8002db0 <ADC_SampleWithTemporaryChannel+0xdc>)
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d0fa      	beq.n	8002d5e <ADC_SampleWithTemporaryChannel+0x8a>
		; // 由DMA中断回调设置

	// 5. 停止DMA
	status = HAL_ADC_Stop_DMA(hadc);
 8002d68:	68f8      	ldr	r0, [r7, #12]
 8002d6a:	f001 fa57 	bl	800421c <HAL_ADC_Stop_DMA>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (status != HAL_OK)
 8002d74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d002      	beq.n	8002d82 <ADC_SampleWithTemporaryChannel+0xae>
		return -4;
 8002d7c:	f06f 0303 	mvn.w	r3, #3
 8002d80:	e012      	b.n	8002da8 <ADC_SampleWithTemporaryChannel+0xd4>

	// 6. 恢复为默认通道1
	sConfig.Channel = ADC_CHANNEL_1;
 8002d82:	2301      	movs	r3, #1
 8002d84:	617b      	str	r3, [r7, #20]
	status = HAL_ADC_ConfigChannel(hadc, &sConfig);
 8002d86:	f107 0314 	add.w	r3, r7, #20
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	68f8      	ldr	r0, [r7, #12]
 8002d8e:	f001 fab3 	bl	80042f8 <HAL_ADC_ConfigChannel>
 8002d92:	4603      	mov	r3, r0
 8002d94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (status != HAL_OK)
 8002d98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d002      	beq.n	8002da6 <ADC_SampleWithTemporaryChannel+0xd2>
		return -5;
 8002da0:	f06f 0304 	mvn.w	r3, #4
 8002da4:	e000      	b.n	8002da8 <ADC_SampleWithTemporaryChannel+0xd4>

	return 0;
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3728      	adds	r7, #40	@ 0x28
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	20006a30 	.word	0x20006a30

08002db4 <Sample_PA7_Average>:
//
// 简化的采样函数
float Sample_PA7_Average(void) {
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
	memset(adc_buffer2, 0, sizeof(adc_buffer2));
 8002dba:	2228      	movs	r2, #40	@ 0x28
 8002dbc:	2100      	movs	r1, #0
 8002dbe:	4821      	ldr	r0, [pc, #132]	@ (8002e44 <Sample_PA7_Average+0x90>)
 8002dc0:	f005 f82b 	bl	8007e1a <memset>

	int result = ADC_SampleWithTemporaryChannel(&hadc1, ADC_CHANNEL_5,
 8002dc4:	2314      	movs	r3, #20
 8002dc6:	4a1f      	ldr	r2, [pc, #124]	@ (8002e44 <Sample_PA7_Average+0x90>)
 8002dc8:	2105      	movs	r1, #5
 8002dca:	481f      	ldr	r0, [pc, #124]	@ (8002e48 <Sample_PA7_Average+0x94>)
 8002dcc:	f7ff ff82 	bl	8002cd4 <ADC_SampleWithTemporaryChannel>
 8002dd0:	6078      	str	r0, [r7, #4]
			adc_buffer2, BUFFER2_SIZE);

	if (result == 0) {
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d12c      	bne.n	8002e32 <Sample_PA7_Average+0x7e>
		float sum = 0.0f;
 8002dd8:	f04f 0300 	mov.w	r3, #0
 8002ddc:	60fb      	str	r3, [r7, #12]
		for (int i = 0; i < BUFFER2_SIZE; i++) {
 8002dde:	2300      	movs	r3, #0
 8002de0:	60bb      	str	r3, [r7, #8]
 8002de2:	e01c      	b.n	8002e1e <Sample_PA7_Average+0x6a>
			float voltage = (adc_buffer2[i] * VREF) / 4095.0f;
 8002de4:	4a17      	ldr	r2, [pc, #92]	@ (8002e44 <Sample_PA7_Average+0x90>)
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002dec:	ee07 3a90 	vmov	s15, r3
 8002df0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002df4:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8002e4c <Sample_PA7_Average+0x98>
 8002df8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002dfc:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8002e50 <Sample_PA7_Average+0x9c>
 8002e00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e04:	edc7 7a00 	vstr	s15, [r7]
			sum += voltage;
 8002e08:	ed97 7a03 	vldr	s14, [r7, #12]
 8002e0c:	edd7 7a00 	vldr	s15, [r7]
 8002e10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e14:	edc7 7a03 	vstr	s15, [r7, #12]
		for (int i = 0; i < BUFFER2_SIZE; i++) {
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	60bb      	str	r3, [r7, #8]
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	2b13      	cmp	r3, #19
 8002e22:	dddf      	ble.n	8002de4 <Sample_PA7_Average+0x30>
		}
		return sum / BUFFER2_SIZE;
 8002e24:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e28:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 8002e2c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002e30:	e001      	b.n	8002e36 <Sample_PA7_Average+0x82>
	}
	return -1.0f; // 错误返回值
 8002e32:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
}
 8002e36:	eef0 7a47 	vmov.f32	s15, s14
 8002e3a:	eeb0 0a67 	vmov.f32	s0, s15
 8002e3e:	3710      	adds	r7, #16
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	200002f8 	.word	0x200002f8
 8002e48:	200001f0 	.word	0x200001f0
 8002e4c:	40533333 	.word	0x40533333
 8002e50:	457ff000 	.word	0x457ff000

08002e54 <Sample_PA0_Average>:
float Sample_PA0_Average(void) {
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
	memset(adc_buffer2, 0, sizeof(adc_buffer2));
 8002e5a:	2228      	movs	r2, #40	@ 0x28
 8002e5c:	2100      	movs	r1, #0
 8002e5e:	4821      	ldr	r0, [pc, #132]	@ (8002ee4 <Sample_PA0_Average+0x90>)
 8002e60:	f004 ffdb 	bl	8007e1a <memset>

	int result = ADC_SampleWithTemporaryChannel(&hadc1, ADC_CHANNEL_6,
 8002e64:	2314      	movs	r3, #20
 8002e66:	4a1f      	ldr	r2, [pc, #124]	@ (8002ee4 <Sample_PA0_Average+0x90>)
 8002e68:	2106      	movs	r1, #6
 8002e6a:	481f      	ldr	r0, [pc, #124]	@ (8002ee8 <Sample_PA0_Average+0x94>)
 8002e6c:	f7ff ff32 	bl	8002cd4 <ADC_SampleWithTemporaryChannel>
 8002e70:	6078      	str	r0, [r7, #4]
			adc_buffer2, BUFFER2_SIZE);

	if (result == 0) {
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d12c      	bne.n	8002ed2 <Sample_PA0_Average+0x7e>
		float sum = 0.0f;
 8002e78:	f04f 0300 	mov.w	r3, #0
 8002e7c:	60fb      	str	r3, [r7, #12]
		for (int i = 0; i < BUFFER2_SIZE; i++) {
 8002e7e:	2300      	movs	r3, #0
 8002e80:	60bb      	str	r3, [r7, #8]
 8002e82:	e01c      	b.n	8002ebe <Sample_PA0_Average+0x6a>
			float voltage = (adc_buffer2[i] * VREF) / 4095.0f;
 8002e84:	4a17      	ldr	r2, [pc, #92]	@ (8002ee4 <Sample_PA0_Average+0x90>)
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002e8c:	ee07 3a90 	vmov	s15, r3
 8002e90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e94:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8002eec <Sample_PA0_Average+0x98>
 8002e98:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002e9c:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8002ef0 <Sample_PA0_Average+0x9c>
 8002ea0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ea4:	edc7 7a00 	vstr	s15, [r7]
			sum += voltage;
 8002ea8:	ed97 7a03 	vldr	s14, [r7, #12]
 8002eac:	edd7 7a00 	vldr	s15, [r7]
 8002eb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eb4:	edc7 7a03 	vstr	s15, [r7, #12]
		for (int i = 0; i < BUFFER2_SIZE; i++) {
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	3301      	adds	r3, #1
 8002ebc:	60bb      	str	r3, [r7, #8]
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	2b13      	cmp	r3, #19
 8002ec2:	dddf      	ble.n	8002e84 <Sample_PA0_Average+0x30>
		}
		return sum / BUFFER2_SIZE;
 8002ec4:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ec8:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 8002ecc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002ed0:	e001      	b.n	8002ed6 <Sample_PA0_Average+0x82>
	}
	return -1.0f; // 错误返回值
 8002ed2:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
}
 8002ed6:	eef0 7a47 	vmov.f32	s15, s14
 8002eda:	eeb0 0a67 	vmov.f32	s0, s15
 8002ede:	3710      	adds	r7, #16
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	200002f8 	.word	0x200002f8
 8002ee8:	200001f0 	.word	0x200001f0
 8002eec:	40533333 	.word	0x40533333
 8002ef0:	457ff000 	.word	0x457ff000

08002ef4 <Sample_PA1_Average>:
		Analyze_ADC_RL_TEST();
	}
}
// 分析ADC数据
//
float Sample_PA1_Average(void) {
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0

	memset(adc_buffer2, 0, sizeof(adc_buffer2));
 8002efa:	2228      	movs	r2, #40	@ 0x28
 8002efc:	2100      	movs	r1, #0
 8002efe:	4823      	ldr	r0, [pc, #140]	@ (8002f8c <Sample_PA1_Average+0x98>)
 8002f00:	f004 ff8b 	bl	8007e1a <memset>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_buffer2, BUFFER2_SIZE);
 8002f04:	2214      	movs	r2, #20
 8002f06:	4921      	ldr	r1, [pc, #132]	@ (8002f8c <Sample_PA1_Average+0x98>)
 8002f08:	4821      	ldr	r0, [pc, #132]	@ (8002f90 <Sample_PA1_Average+0x9c>)
 8002f0a:	f001 f893 	bl	8004034 <HAL_ADC_Start_DMA>
	measurement_done = 0;
 8002f0e:	4b21      	ldr	r3, [pc, #132]	@ (8002f94 <Sample_PA1_Average+0xa0>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	701a      	strb	r2, [r3, #0]
	while (!measurement_done)
 8002f14:	bf00      	nop
 8002f16:	4b1f      	ldr	r3, [pc, #124]	@ (8002f94 <Sample_PA1_Average+0xa0>)
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d0fa      	beq.n	8002f16 <Sample_PA1_Average+0x22>
		;
	HAL_ADC_Stop_DMA(&hadc1);
 8002f20:	481b      	ldr	r0, [pc, #108]	@ (8002f90 <Sample_PA1_Average+0x9c>)
 8002f22:	f001 f97b 	bl	800421c <HAL_ADC_Stop_DMA>
	// 3. 采样 20 次并计算平均值
	float sum = 0.0f;
 8002f26:	f04f 0300 	mov.w	r3, #0
 8002f2a:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < BUFFER2_SIZE; i++) {
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	60bb      	str	r3, [r7, #8]
 8002f30:	e01c      	b.n	8002f6c <Sample_PA1_Average+0x78>
		float voltage = (adc_buffer2[i] * VREF) / 4095.0f;
 8002f32:	4a16      	ldr	r2, [pc, #88]	@ (8002f8c <Sample_PA1_Average+0x98>)
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002f3a:	ee07 3a90 	vmov	s15, r3
 8002f3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f42:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8002f98 <Sample_PA1_Average+0xa4>
 8002f46:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002f4a:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8002f9c <Sample_PA1_Average+0xa8>
 8002f4e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f52:	edc7 7a01 	vstr	s15, [r7, #4]
		sum = sum + voltage;
 8002f56:	ed97 7a03 	vldr	s14, [r7, #12]
 8002f5a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f62:	edc7 7a03 	vstr	s15, [r7, #12]
	for (int i = 0; i < BUFFER2_SIZE; i++) {
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	3301      	adds	r3, #1
 8002f6a:	60bb      	str	r3, [r7, #8]
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	2b13      	cmp	r3, #19
 8002f70:	dddf      	ble.n	8002f32 <Sample_PA1_Average+0x3e>
	}
	// 5. 返回平均值
	return sum / BUFFER2_SIZE;
 8002f72:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f76:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8002f7a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002f7e:	eef0 7a66 	vmov.f32	s15, s13
}
 8002f82:	eeb0 0a67 	vmov.f32	s0, s15
 8002f86:	3710      	adds	r7, #16
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	200002f8 	.word	0x200002f8
 8002f90:	200001f0 	.word	0x200001f0
 8002f94:	20006a30 	.word	0x20006a30
 8002f98:	40533333 	.word	0x40533333
 8002f9c:	457ff000 	.word	0x457ff000

08002fa0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002fa6:	f000 fe5b 	bl	8003c60 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002faa:	f000 f84d 	bl	8003048 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002fae:	f7fe f8d9 	bl	8001164 <MX_GPIO_Init>
	MX_DMA_Init();
 8002fb2:	f7fe f8b7 	bl	8001124 <MX_DMA_Init>
	MX_ADC1_Init();
 8002fb6:	f7fd ffe5 	bl	8000f84 <MX_ADC1_Init>
	MX_TIM3_Init();
 8002fba:	f000 fd47 	bl	8003a4c <MX_TIM3_Init>
	MX_USART1_UART_Init();
 8002fbe:	f000 fdb3 	bl	8003b28 <MX_USART1_UART_Init>
	MX_I2C1_Init();
 8002fc2:	f7fe f943 	bl	800124c <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	HAL_Delay(30); // 单片机启动比OLED上电快,需要延迟等待一下
 8002fc6:	201e      	movs	r0, #30
 8002fc8:	f000 febc 	bl	8003d44 <HAL_Delay>
	OLED_Init();
 8002fcc:	f000 f8d2 	bl	8003174 <OLED_Init>

	//启用TIM3触发ADC
	TIM_HandleTypeDef *adc_timer = &htim3;
 8002fd0:	4b18      	ldr	r3, [pc, #96]	@ (8003034 <main+0x94>)
 8002fd2:	607b      	str	r3, [r7, #4]
	// 设置采样率 (500kHz)
	adc_timer->Instance->PSC = 100 - 1;   // 99 (CubeMX配置)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2263      	movs	r2, #99	@ 0x63
 8002fda:	629a      	str	r2, [r3, #40]	@ 0x28
	adc_timer->Instance->ARR = 2 - 1;   // 9 (CubeMX配置);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	62da      	str	r2, [r3, #44]	@ 0x2c
	//adc_timer->Instance->ARR = 2 - 1;   // 9 (CubeMX配置)
	HAL_TIM_Base_Start(adc_timer);
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f003 fc17 	bl	8006818 <HAL_TIM_Base_Start>
//	  if(pinState==GPIO_PIN_SET){
//		  GPIO_PinState pinState = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
		//	  if(pinState==GPIO_PIN_SET){
		//		  black_box_test();
		//		  }else{
		component_test();
 8002fea:	f7fe f9c1 	bl	8001370 <component_test>

//	  else{
//		  //HAL_DeInit(3000);
//	  }
		//black_box_test();
		OLED_NewFrame();
 8002fee:	f000 f91d 	bl	800322c <OLED_NewFrame>
		OLED_PrintString(0, 0, message1, &font16x16, OLED_COLOR_NORMAL);
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	9300      	str	r3, [sp, #0]
 8002ff6:	4b10      	ldr	r3, [pc, #64]	@ (8003038 <main+0x98>)
 8002ff8:	4a10      	ldr	r2, [pc, #64]	@ (800303c <main+0x9c>)
 8002ffa:	2100      	movs	r1, #0
 8002ffc:	2000      	movs	r0, #0
 8002ffe:	f000 fb3b 	bl	8003678 <OLED_PrintString>
		OLED_PrintString(0, 20, message2, &font16x16, OLED_COLOR_NORMAL);
 8003002:	2300      	movs	r3, #0
 8003004:	9300      	str	r3, [sp, #0]
 8003006:	4b0c      	ldr	r3, [pc, #48]	@ (8003038 <main+0x98>)
 8003008:	4a0d      	ldr	r2, [pc, #52]	@ (8003040 <main+0xa0>)
 800300a:	2114      	movs	r1, #20
 800300c:	2000      	movs	r0, #0
 800300e:	f000 fb33 	bl	8003678 <OLED_PrintString>
		OLED_PrintString(0, 40, msg, &font16x16, OLED_COLOR_NORMAL);
 8003012:	2300      	movs	r3, #0
 8003014:	9300      	str	r3, [sp, #0]
 8003016:	4b08      	ldr	r3, [pc, #32]	@ (8003038 <main+0x98>)
 8003018:	4a0a      	ldr	r2, [pc, #40]	@ (8003044 <main+0xa4>)
 800301a:	2128      	movs	r1, #40	@ 0x28
 800301c:	2000      	movs	r0, #0
 800301e:	f000 fb2b 	bl	8003678 <OLED_PrintString>
		OLED_ShowFrame();
 8003022:	f000 f90f 	bl	8003244 <OLED_ShowFrame>
		HAL_Delay(1500);  // 每2秒测量一次
 8003026:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800302a:	f000 fe8b 	bl	8003d44 <HAL_Delay>
		component_test();
 800302e:	bf00      	nop
 8003030:	e7db      	b.n	8002fea <main+0x4a>
 8003032:	bf00      	nop
 8003034:	2000700c 	.word	0x2000700c
 8003038:	0800ab0c 	.word	0x0800ab0c
 800303c:	20006a58 	.word	0x20006a58
 8003040:	20006ad8 	.word	0x20006ad8
 8003044:	20006b58 	.word	0x20006b58

08003048 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8003048:	b580      	push	{r7, lr}
 800304a:	b094      	sub	sp, #80	@ 0x50
 800304c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800304e:	f107 0320 	add.w	r3, r7, #32
 8003052:	2230      	movs	r2, #48	@ 0x30
 8003054:	2100      	movs	r1, #0
 8003056:	4618      	mov	r0, r3
 8003058:	f004 fedf 	bl	8007e1a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800305c:	f107 030c 	add.w	r3, r7, #12
 8003060:	2200      	movs	r2, #0
 8003062:	601a      	str	r2, [r3, #0]
 8003064:	605a      	str	r2, [r3, #4]
 8003066:	609a      	str	r2, [r3, #8]
 8003068:	60da      	str	r2, [r3, #12]
 800306a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800306c:	2300      	movs	r3, #0
 800306e:	60bb      	str	r3, [r7, #8]
 8003070:	4b27      	ldr	r3, [pc, #156]	@ (8003110 <SystemClock_Config+0xc8>)
 8003072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003074:	4a26      	ldr	r2, [pc, #152]	@ (8003110 <SystemClock_Config+0xc8>)
 8003076:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800307a:	6413      	str	r3, [r2, #64]	@ 0x40
 800307c:	4b24      	ldr	r3, [pc, #144]	@ (8003110 <SystemClock_Config+0xc8>)
 800307e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003080:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003084:	60bb      	str	r3, [r7, #8]
 8003086:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003088:	2300      	movs	r3, #0
 800308a:	607b      	str	r3, [r7, #4]
 800308c:	4b21      	ldr	r3, [pc, #132]	@ (8003114 <SystemClock_Config+0xcc>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a20      	ldr	r2, [pc, #128]	@ (8003114 <SystemClock_Config+0xcc>)
 8003092:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003096:	6013      	str	r3, [r2, #0]
 8003098:	4b1e      	ldr	r3, [pc, #120]	@ (8003114 <SystemClock_Config+0xcc>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80030a0:	607b      	str	r3, [r7, #4]
 80030a2:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80030a4:	2302      	movs	r3, #2
 80030a6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80030a8:	2301      	movs	r3, #1
 80030aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80030ac:	2310      	movs	r3, #16
 80030ae:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80030b0:	2302      	movs	r3, #2
 80030b2:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80030b4:	2300      	movs	r3, #0
 80030b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80030b8:	2308      	movs	r3, #8
 80030ba:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 100;
 80030bc:	2364      	movs	r3, #100	@ 0x64
 80030be:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80030c0:	2302      	movs	r3, #2
 80030c2:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80030c4:	2304      	movs	r3, #4
 80030c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80030c8:	f107 0320 	add.w	r3, r7, #32
 80030cc:	4618      	mov	r0, r3
 80030ce:	f002 fefb 	bl	8005ec8 <HAL_RCC_OscConfig>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d001      	beq.n	80030dc <SystemClock_Config+0x94>
		Error_Handler();
 80030d8:	f000 f81e 	bl	8003118 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80030dc:	230f      	movs	r3, #15
 80030de:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80030e0:	2302      	movs	r3, #2
 80030e2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80030e4:	2300      	movs	r3, #0
 80030e6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80030e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80030ec:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80030ee:	2300      	movs	r3, #0
 80030f0:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 80030f2:	f107 030c 	add.w	r3, r7, #12
 80030f6:	2103      	movs	r1, #3
 80030f8:	4618      	mov	r0, r3
 80030fa:	f003 f95d 	bl	80063b8 <HAL_RCC_ClockConfig>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d001      	beq.n	8003108 <SystemClock_Config+0xc0>
		Error_Handler();
 8003104:	f000 f808 	bl	8003118 <Error_Handler>
	}
}
 8003108:	bf00      	nop
 800310a:	3750      	adds	r7, #80	@ 0x50
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	40023800 	.word	0x40023800
 8003114:	40007000 	.word	0x40007000

08003118 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8003118:	b480      	push	{r7}
 800311a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800311c:	b672      	cpsid	i
}
 800311e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003120:	bf00      	nop
 8003122:	e7fd      	b.n	8003120 <Error_Handler+0x8>

08003124 <OLED_Send>:
 * @param len 要发送的数据长度
 * @return None
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他平台时应根据实际情况修改此函数
 */
void OLED_Send(uint8_t *data, uint8_t len)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af02      	add	r7, sp, #8
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	460b      	mov	r3, r1
 800312e:	70fb      	strb	r3, [r7, #3]
  HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, data, len, HAL_MAX_DELAY);
 8003130:	78fb      	ldrb	r3, [r7, #3]
 8003132:	b29b      	uxth	r3, r3
 8003134:	f04f 32ff 	mov.w	r2, #4294967295
 8003138:	9200      	str	r2, [sp, #0]
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	2178      	movs	r1, #120	@ 0x78
 800313e:	4803      	ldr	r0, [pc, #12]	@ (800314c <OLED_Send+0x28>)
 8003140:	f002 fb68 	bl	8005814 <HAL_I2C_Master_Transmit>
}
 8003144:	bf00      	nop
 8003146:	3708      	adds	r7, #8
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}
 800314c:	20000298 	.word	0x20000298

08003150 <OLED_SendCmd>:

/**
 * @brief 向OLED发送指令
 */
void OLED_SendCmd(uint8_t cmd)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	4603      	mov	r3, r0
 8003158:	71fb      	strb	r3, [r7, #7]
  static uint8_t sendBuffer[2] = {0};
  sendBuffer[1] = cmd;
 800315a:	4a05      	ldr	r2, [pc, #20]	@ (8003170 <OLED_SendCmd+0x20>)
 800315c:	79fb      	ldrb	r3, [r7, #7]
 800315e:	7053      	strb	r3, [r2, #1]
  OLED_Send(sendBuffer, 2);
 8003160:	2102      	movs	r1, #2
 8003162:	4803      	ldr	r0, [pc, #12]	@ (8003170 <OLED_SendCmd+0x20>)
 8003164:	f7ff ffde 	bl	8003124 <OLED_Send>
}
 8003168:	bf00      	nop
 800316a:	3708      	adds	r7, #8
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	20006f80 	.word	0x20006f80

08003174 <OLED_Init>:
/**
 * @brief 初始化OLED (SSD1306)
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_Init()
{
 8003174:	b580      	push	{r7, lr}
 8003176:	af00      	add	r7, sp, #0
  OLED_SendCmd(0xAE); /*关闭显示 display off*/
 8003178:	20ae      	movs	r0, #174	@ 0xae
 800317a:	f7ff ffe9 	bl	8003150 <OLED_SendCmd>

  OLED_SendCmd(0x20);
 800317e:	2020      	movs	r0, #32
 8003180:	f7ff ffe6 	bl	8003150 <OLED_SendCmd>
  OLED_SendCmd(0x10);
 8003184:	2010      	movs	r0, #16
 8003186:	f7ff ffe3 	bl	8003150 <OLED_SendCmd>

  OLED_SendCmd(0xB0);
 800318a:	20b0      	movs	r0, #176	@ 0xb0
 800318c:	f7ff ffe0 	bl	8003150 <OLED_SendCmd>

  OLED_SendCmd(0xC8);
 8003190:	20c8      	movs	r0, #200	@ 0xc8
 8003192:	f7ff ffdd 	bl	8003150 <OLED_SendCmd>

  OLED_SendCmd(0x00);
 8003196:	2000      	movs	r0, #0
 8003198:	f7ff ffda 	bl	8003150 <OLED_SendCmd>
  OLED_SendCmd(0x10);
 800319c:	2010      	movs	r0, #16
 800319e:	f7ff ffd7 	bl	8003150 <OLED_SendCmd>

  OLED_SendCmd(0x40);
 80031a2:	2040      	movs	r0, #64	@ 0x40
 80031a4:	f7ff ffd4 	bl	8003150 <OLED_SendCmd>

  OLED_SendCmd(0x81);
 80031a8:	2081      	movs	r0, #129	@ 0x81
 80031aa:	f7ff ffd1 	bl	8003150 <OLED_SendCmd>

  OLED_SendCmd(0xDF);
 80031ae:	20df      	movs	r0, #223	@ 0xdf
 80031b0:	f7ff ffce 	bl	8003150 <OLED_SendCmd>
  OLED_SendCmd(0xA1);
 80031b4:	20a1      	movs	r0, #161	@ 0xa1
 80031b6:	f7ff ffcb 	bl	8003150 <OLED_SendCmd>

  OLED_SendCmd(0xA6);
 80031ba:	20a6      	movs	r0, #166	@ 0xa6
 80031bc:	f7ff ffc8 	bl	8003150 <OLED_SendCmd>
  OLED_SendCmd(0xA8);
 80031c0:	20a8      	movs	r0, #168	@ 0xa8
 80031c2:	f7ff ffc5 	bl	8003150 <OLED_SendCmd>

  OLED_SendCmd(0x3F);
 80031c6:	203f      	movs	r0, #63	@ 0x3f
 80031c8:	f7ff ffc2 	bl	8003150 <OLED_SendCmd>

  OLED_SendCmd(0xA4);
 80031cc:	20a4      	movs	r0, #164	@ 0xa4
 80031ce:	f7ff ffbf 	bl	8003150 <OLED_SendCmd>

  OLED_SendCmd(0xD3);
 80031d2:	20d3      	movs	r0, #211	@ 0xd3
 80031d4:	f7ff ffbc 	bl	8003150 <OLED_SendCmd>
  OLED_SendCmd(0x00);
 80031d8:	2000      	movs	r0, #0
 80031da:	f7ff ffb9 	bl	8003150 <OLED_SendCmd>

  OLED_SendCmd(0xD5);
 80031de:	20d5      	movs	r0, #213	@ 0xd5
 80031e0:	f7ff ffb6 	bl	8003150 <OLED_SendCmd>
  OLED_SendCmd(0xF0);
 80031e4:	20f0      	movs	r0, #240	@ 0xf0
 80031e6:	f7ff ffb3 	bl	8003150 <OLED_SendCmd>

  OLED_SendCmd(0xD9);
 80031ea:	20d9      	movs	r0, #217	@ 0xd9
 80031ec:	f7ff ffb0 	bl	8003150 <OLED_SendCmd>
  OLED_SendCmd(0x22);
 80031f0:	2022      	movs	r0, #34	@ 0x22
 80031f2:	f7ff ffad 	bl	8003150 <OLED_SendCmd>

  OLED_SendCmd(0xDA);
 80031f6:	20da      	movs	r0, #218	@ 0xda
 80031f8:	f7ff ffaa 	bl	8003150 <OLED_SendCmd>
  OLED_SendCmd(0x12);
 80031fc:	2012      	movs	r0, #18
 80031fe:	f7ff ffa7 	bl	8003150 <OLED_SendCmd>

  OLED_SendCmd(0xDB);
 8003202:	20db      	movs	r0, #219	@ 0xdb
 8003204:	f7ff ffa4 	bl	8003150 <OLED_SendCmd>
  OLED_SendCmd(0x20);
 8003208:	2020      	movs	r0, #32
 800320a:	f7ff ffa1 	bl	8003150 <OLED_SendCmd>

  OLED_SendCmd(0x8D);
 800320e:	208d      	movs	r0, #141	@ 0x8d
 8003210:	f7ff ff9e 	bl	8003150 <OLED_SendCmd>
  OLED_SendCmd(0x14);
 8003214:	2014      	movs	r0, #20
 8003216:	f7ff ff9b 	bl	8003150 <OLED_SendCmd>

  OLED_NewFrame();
 800321a:	f000 f807 	bl	800322c <OLED_NewFrame>
  OLED_ShowFrame();
 800321e:	f000 f811 	bl	8003244 <OLED_ShowFrame>

  OLED_SendCmd(0xAF); /*开启显示 display ON*/
 8003222:	20af      	movs	r0, #175	@ 0xaf
 8003224:	f7ff ff94 	bl	8003150 <OLED_SendCmd>
}
 8003228:	bf00      	nop
 800322a:	bd80      	pop	{r7, pc}

0800322c <OLED_NewFrame>:

/**
 * @brief 清空显存 绘制新的一帧
 */
void OLED_NewFrame()
{
 800322c:	b580      	push	{r7, lr}
 800322e:	af00      	add	r7, sp, #0
  memset(OLED_GRAM, 0, sizeof(OLED_GRAM));
 8003230:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003234:	2100      	movs	r1, #0
 8003236:	4802      	ldr	r0, [pc, #8]	@ (8003240 <OLED_NewFrame+0x14>)
 8003238:	f004 fdef 	bl	8007e1a <memset>
}
 800323c:	bf00      	nop
 800323e:	bd80      	pop	{r7, pc}
 8003240:	20006b80 	.word	0x20006b80

08003244 <OLED_ShowFrame>:
/**
 * @brief 将当前显存显示到屏幕上
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_ShowFrame()
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
  static uint8_t sendBuffer[OLED_COLUMN + 1];
  sendBuffer[0] = 0x40;
 800324a:	4b15      	ldr	r3, [pc, #84]	@ (80032a0 <OLED_ShowFrame+0x5c>)
 800324c:	2240      	movs	r2, #64	@ 0x40
 800324e:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < OLED_PAGE; i++)
 8003250:	2300      	movs	r3, #0
 8003252:	71fb      	strb	r3, [r7, #7]
 8003254:	e01b      	b.n	800328e <OLED_ShowFrame+0x4a>
  {
    OLED_SendCmd(0xB0 + i); // 设置页地址
 8003256:	79fb      	ldrb	r3, [r7, #7]
 8003258:	3b50      	subs	r3, #80	@ 0x50
 800325a:	b2db      	uxtb	r3, r3
 800325c:	4618      	mov	r0, r3
 800325e:	f7ff ff77 	bl	8003150 <OLED_SendCmd>
    OLED_SendCmd(0x00);     // 设置列地址低4位
 8003262:	2000      	movs	r0, #0
 8003264:	f7ff ff74 	bl	8003150 <OLED_SendCmd>
    OLED_SendCmd(0x10);     // 设置列地址高4位
 8003268:	2010      	movs	r0, #16
 800326a:	f7ff ff71 	bl	8003150 <OLED_SendCmd>
    memcpy(sendBuffer + 1, OLED_GRAM[i], OLED_COLUMN);
 800326e:	480d      	ldr	r0, [pc, #52]	@ (80032a4 <OLED_ShowFrame+0x60>)
 8003270:	79fb      	ldrb	r3, [r7, #7]
 8003272:	01db      	lsls	r3, r3, #7
 8003274:	4a0c      	ldr	r2, [pc, #48]	@ (80032a8 <OLED_ShowFrame+0x64>)
 8003276:	4413      	add	r3, r2
 8003278:	2280      	movs	r2, #128	@ 0x80
 800327a:	4619      	mov	r1, r3
 800327c:	f004 fe4d 	bl	8007f1a <memcpy>
    OLED_Send(sendBuffer, OLED_COLUMN + 1);
 8003280:	2181      	movs	r1, #129	@ 0x81
 8003282:	4807      	ldr	r0, [pc, #28]	@ (80032a0 <OLED_ShowFrame+0x5c>)
 8003284:	f7ff ff4e 	bl	8003124 <OLED_Send>
  for (uint8_t i = 0; i < OLED_PAGE; i++)
 8003288:	79fb      	ldrb	r3, [r7, #7]
 800328a:	3301      	adds	r3, #1
 800328c:	71fb      	strb	r3, [r7, #7]
 800328e:	79fb      	ldrb	r3, [r7, #7]
 8003290:	2b07      	cmp	r3, #7
 8003292:	d9e0      	bls.n	8003256 <OLED_ShowFrame+0x12>
  }
}
 8003294:	bf00      	nop
 8003296:	bf00      	nop
 8003298:	3708      	adds	r7, #8
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	20006f84 	.word	0x20006f84
 80032a4:	20006f85 	.word	0x20006f85
 80032a8:	20006b80 	.word	0x20006b80

080032ac <OLED_SetByte_Fine>:
 * @note 此函数将显存中的某一字节的第start位到第end位设置为与data相同
 * @note start和end的范围为0-7, start必须小于等于end
 * @note 此函数与OLED_SetByte_Fine的区别在于此函数只能设置显存中的某一真实字节
 */
void OLED_SetByte_Fine(uint8_t page, uint8_t column, uint8_t data, uint8_t start, uint8_t end, OLED_ColorMode color)
{
 80032ac:	b490      	push	{r4, r7}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	4604      	mov	r4, r0
 80032b4:	4608      	mov	r0, r1
 80032b6:	4611      	mov	r1, r2
 80032b8:	461a      	mov	r2, r3
 80032ba:	4623      	mov	r3, r4
 80032bc:	71fb      	strb	r3, [r7, #7]
 80032be:	4603      	mov	r3, r0
 80032c0:	71bb      	strb	r3, [r7, #6]
 80032c2:	460b      	mov	r3, r1
 80032c4:	717b      	strb	r3, [r7, #5]
 80032c6:	4613      	mov	r3, r2
 80032c8:	713b      	strb	r3, [r7, #4]
  static uint8_t temp;
  if (page >= OLED_PAGE || column >= OLED_COLUMN)
 80032ca:	79fb      	ldrb	r3, [r7, #7]
 80032cc:	2b07      	cmp	r3, #7
 80032ce:	d85f      	bhi.n	8003390 <OLED_SetByte_Fine+0xe4>
 80032d0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	db5b      	blt.n	8003390 <OLED_SetByte_Fine+0xe4>
    return;
  if (color)
 80032d8:	7d3b      	ldrb	r3, [r7, #20]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d002      	beq.n	80032e4 <OLED_SetByte_Fine+0x38>
    data = ~data;
 80032de:	797b      	ldrb	r3, [r7, #5]
 80032e0:	43db      	mvns	r3, r3
 80032e2:	717b      	strb	r3, [r7, #5]

  temp = data | (0xff << (end + 1)) | (0xff >> (8 - start));
 80032e4:	7c3b      	ldrb	r3, [r7, #16]
 80032e6:	3301      	adds	r3, #1
 80032e8:	22ff      	movs	r2, #255	@ 0xff
 80032ea:	fa02 f303 	lsl.w	r3, r2, r3
 80032ee:	b25a      	sxtb	r2, r3
 80032f0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	b25a      	sxtb	r2, r3
 80032f8:	793b      	ldrb	r3, [r7, #4]
 80032fa:	f1c3 0308 	rsb	r3, r3, #8
 80032fe:	21ff      	movs	r1, #255	@ 0xff
 8003300:	fa41 f303 	asr.w	r3, r1, r3
 8003304:	b25b      	sxtb	r3, r3
 8003306:	4313      	orrs	r3, r2
 8003308:	b25b      	sxtb	r3, r3
 800330a:	b2da      	uxtb	r2, r3
 800330c:	4b23      	ldr	r3, [pc, #140]	@ (800339c <OLED_SetByte_Fine+0xf0>)
 800330e:	701a      	strb	r2, [r3, #0]
  OLED_GRAM[page][column] &= temp;
 8003310:	79fa      	ldrb	r2, [r7, #7]
 8003312:	79bb      	ldrb	r3, [r7, #6]
 8003314:	4922      	ldr	r1, [pc, #136]	@ (80033a0 <OLED_SetByte_Fine+0xf4>)
 8003316:	01d2      	lsls	r2, r2, #7
 8003318:	440a      	add	r2, r1
 800331a:	4413      	add	r3, r2
 800331c:	7818      	ldrb	r0, [r3, #0]
 800331e:	4b1f      	ldr	r3, [pc, #124]	@ (800339c <OLED_SetByte_Fine+0xf0>)
 8003320:	7819      	ldrb	r1, [r3, #0]
 8003322:	79fa      	ldrb	r2, [r7, #7]
 8003324:	79bb      	ldrb	r3, [r7, #6]
 8003326:	4001      	ands	r1, r0
 8003328:	b2c8      	uxtb	r0, r1
 800332a:	491d      	ldr	r1, [pc, #116]	@ (80033a0 <OLED_SetByte_Fine+0xf4>)
 800332c:	01d2      	lsls	r2, r2, #7
 800332e:	440a      	add	r2, r1
 8003330:	4413      	add	r3, r2
 8003332:	4602      	mov	r2, r0
 8003334:	701a      	strb	r2, [r3, #0]
  temp = data & ~(0xff << (end + 1)) & ~(0xff >> (8 - start));
 8003336:	7c3b      	ldrb	r3, [r7, #16]
 8003338:	3301      	adds	r3, #1
 800333a:	22ff      	movs	r2, #255	@ 0xff
 800333c:	fa02 f303 	lsl.w	r3, r2, r3
 8003340:	b25b      	sxtb	r3, r3
 8003342:	43db      	mvns	r3, r3
 8003344:	b25a      	sxtb	r2, r3
 8003346:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800334a:	4013      	ands	r3, r2
 800334c:	b25a      	sxtb	r2, r3
 800334e:	793b      	ldrb	r3, [r7, #4]
 8003350:	f1c3 0308 	rsb	r3, r3, #8
 8003354:	f06f 01ff 	mvn.w	r1, #255	@ 0xff
 8003358:	fa41 f303 	asr.w	r3, r1, r3
 800335c:	b25b      	sxtb	r3, r3
 800335e:	4013      	ands	r3, r2
 8003360:	b25b      	sxtb	r3, r3
 8003362:	b2da      	uxtb	r2, r3
 8003364:	4b0d      	ldr	r3, [pc, #52]	@ (800339c <OLED_SetByte_Fine+0xf0>)
 8003366:	701a      	strb	r2, [r3, #0]
  OLED_GRAM[page][column] |= temp;
 8003368:	79fa      	ldrb	r2, [r7, #7]
 800336a:	79bb      	ldrb	r3, [r7, #6]
 800336c:	490c      	ldr	r1, [pc, #48]	@ (80033a0 <OLED_SetByte_Fine+0xf4>)
 800336e:	01d2      	lsls	r2, r2, #7
 8003370:	440a      	add	r2, r1
 8003372:	4413      	add	r3, r2
 8003374:	7818      	ldrb	r0, [r3, #0]
 8003376:	4b09      	ldr	r3, [pc, #36]	@ (800339c <OLED_SetByte_Fine+0xf0>)
 8003378:	7819      	ldrb	r1, [r3, #0]
 800337a:	79fa      	ldrb	r2, [r7, #7]
 800337c:	79bb      	ldrb	r3, [r7, #6]
 800337e:	4301      	orrs	r1, r0
 8003380:	b2c8      	uxtb	r0, r1
 8003382:	4907      	ldr	r1, [pc, #28]	@ (80033a0 <OLED_SetByte_Fine+0xf4>)
 8003384:	01d2      	lsls	r2, r2, #7
 8003386:	440a      	add	r2, r1
 8003388:	4413      	add	r3, r2
 800338a:	4602      	mov	r2, r0
 800338c:	701a      	strb	r2, [r3, #0]
 800338e:	e000      	b.n	8003392 <OLED_SetByte_Fine+0xe6>
    return;
 8003390:	bf00      	nop
  // 使用OLED_SetPixel实现
  // for (uint8_t i = start; i <= end; i++) {
  //   OLED_SetPixel(column, page * 8 + i, !((data >> i) & 0x01));
  // }
}
 8003392:	3708      	adds	r7, #8
 8003394:	46bd      	mov	sp, r7
 8003396:	bc90      	pop	{r4, r7}
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	20007005 	.word	0x20007005
 80033a0:	20006b80 	.word	0x20006b80

080033a4 <OLED_SetBits_Fine>:
 * @note 此函数将显存中从(x,y)开始向下数len位设置为与data相同
 * @note len的范围为1-8
 * @note 此函数与OLED_SetByte_Fine的区别在于此函数的横坐标和纵坐标是以像素为单位的, 可能出现跨两个真实字节的情况(跨页)
 */
void OLED_SetBits_Fine(uint8_t x, uint8_t y, uint8_t data, uint8_t len, OLED_ColorMode color)
{
 80033a4:	b5b0      	push	{r4, r5, r7, lr}
 80033a6:	b086      	sub	sp, #24
 80033a8:	af02      	add	r7, sp, #8
 80033aa:	4604      	mov	r4, r0
 80033ac:	4608      	mov	r0, r1
 80033ae:	4611      	mov	r1, r2
 80033b0:	461a      	mov	r2, r3
 80033b2:	4623      	mov	r3, r4
 80033b4:	71fb      	strb	r3, [r7, #7]
 80033b6:	4603      	mov	r3, r0
 80033b8:	71bb      	strb	r3, [r7, #6]
 80033ba:	460b      	mov	r3, r1
 80033bc:	717b      	strb	r3, [r7, #5]
 80033be:	4613      	mov	r3, r2
 80033c0:	713b      	strb	r3, [r7, #4]
  uint8_t page = y / 8;
 80033c2:	79bb      	ldrb	r3, [r7, #6]
 80033c4:	08db      	lsrs	r3, r3, #3
 80033c6:	73fb      	strb	r3, [r7, #15]
  uint8_t bit = y % 8;
 80033c8:	79bb      	ldrb	r3, [r7, #6]
 80033ca:	f003 0307 	and.w	r3, r3, #7
 80033ce:	73bb      	strb	r3, [r7, #14]
  if (bit + len > 8)
 80033d0:	7bba      	ldrb	r2, [r7, #14]
 80033d2:	793b      	ldrb	r3, [r7, #4]
 80033d4:	4413      	add	r3, r2
 80033d6:	2b08      	cmp	r3, #8
 80033d8:	dd29      	ble.n	800342e <OLED_SetBits_Fine+0x8a>
  {
    OLED_SetByte_Fine(page, x, data << bit, bit, 7, color);
 80033da:	797a      	ldrb	r2, [r7, #5]
 80033dc:	7bbb      	ldrb	r3, [r7, #14]
 80033de:	fa02 f303 	lsl.w	r3, r2, r3
 80033e2:	b2da      	uxtb	r2, r3
 80033e4:	7bbc      	ldrb	r4, [r7, #14]
 80033e6:	79f9      	ldrb	r1, [r7, #7]
 80033e8:	7bf8      	ldrb	r0, [r7, #15]
 80033ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 80033ee:	9301      	str	r3, [sp, #4]
 80033f0:	2307      	movs	r3, #7
 80033f2:	9300      	str	r3, [sp, #0]
 80033f4:	4623      	mov	r3, r4
 80033f6:	f7ff ff59 	bl	80032ac <OLED_SetByte_Fine>
    OLED_SetByte_Fine(page + 1, x, data >> (8 - bit), 0, len + bit - 1 - 8, color);
 80033fa:	7bfb      	ldrb	r3, [r7, #15]
 80033fc:	3301      	adds	r3, #1
 80033fe:	b2d8      	uxtb	r0, r3
 8003400:	797a      	ldrb	r2, [r7, #5]
 8003402:	7bbb      	ldrb	r3, [r7, #14]
 8003404:	f1c3 0308 	rsb	r3, r3, #8
 8003408:	fa42 f303 	asr.w	r3, r2, r3
 800340c:	b2dc      	uxtb	r4, r3
 800340e:	793a      	ldrb	r2, [r7, #4]
 8003410:	7bbb      	ldrb	r3, [r7, #14]
 8003412:	4413      	add	r3, r2
 8003414:	b2db      	uxtb	r3, r3
 8003416:	3b09      	subs	r3, #9
 8003418:	b2db      	uxtb	r3, r3
 800341a:	79f9      	ldrb	r1, [r7, #7]
 800341c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003420:	9201      	str	r2, [sp, #4]
 8003422:	9300      	str	r3, [sp, #0]
 8003424:	2300      	movs	r3, #0
 8003426:	4622      	mov	r2, r4
 8003428:	f7ff ff40 	bl	80032ac <OLED_SetByte_Fine>
  }
  // 使用OLED_SetPixel实现
  // for (uint8_t i = 0; i < len; i++) {
  //   OLED_SetPixel(x, y + i, !((data >> i) & 0x01));
  // }
}
 800342c:	e015      	b.n	800345a <OLED_SetBits_Fine+0xb6>
    OLED_SetByte_Fine(page, x, data << bit, bit, bit + len - 1, color);
 800342e:	797a      	ldrb	r2, [r7, #5]
 8003430:	7bbb      	ldrb	r3, [r7, #14]
 8003432:	fa02 f303 	lsl.w	r3, r2, r3
 8003436:	b2dc      	uxtb	r4, r3
 8003438:	7bba      	ldrb	r2, [r7, #14]
 800343a:	793b      	ldrb	r3, [r7, #4]
 800343c:	4413      	add	r3, r2
 800343e:	b2db      	uxtb	r3, r3
 8003440:	3b01      	subs	r3, #1
 8003442:	b2db      	uxtb	r3, r3
 8003444:	7bbd      	ldrb	r5, [r7, #14]
 8003446:	79f9      	ldrb	r1, [r7, #7]
 8003448:	7bf8      	ldrb	r0, [r7, #15]
 800344a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800344e:	9201      	str	r2, [sp, #4]
 8003450:	9300      	str	r3, [sp, #0]
 8003452:	462b      	mov	r3, r5
 8003454:	4622      	mov	r2, r4
 8003456:	f7ff ff29 	bl	80032ac <OLED_SetByte_Fine>
}
 800345a:	bf00      	nop
 800345c:	3710      	adds	r7, #16
 800345e:	46bd      	mov	sp, r7
 8003460:	bdb0      	pop	{r4, r5, r7, pc}

08003462 <OLED_SetBits>:
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始向下数8位设置为与data相同
 * @note 此函数与OLED_SetByte的区别在于此函数的横坐标和纵坐标是以像素为单位的, 可能出现跨两个真实字节的情况(跨页)
 */
void OLED_SetBits(uint8_t x, uint8_t y, uint8_t data, OLED_ColorMode color)
{
 8003462:	b590      	push	{r4, r7, lr}
 8003464:	b087      	sub	sp, #28
 8003466:	af02      	add	r7, sp, #8
 8003468:	4604      	mov	r4, r0
 800346a:	4608      	mov	r0, r1
 800346c:	4611      	mov	r1, r2
 800346e:	461a      	mov	r2, r3
 8003470:	4623      	mov	r3, r4
 8003472:	71fb      	strb	r3, [r7, #7]
 8003474:	4603      	mov	r3, r0
 8003476:	71bb      	strb	r3, [r7, #6]
 8003478:	460b      	mov	r3, r1
 800347a:	717b      	strb	r3, [r7, #5]
 800347c:	4613      	mov	r3, r2
 800347e:	713b      	strb	r3, [r7, #4]
  uint8_t page = y / 8;
 8003480:	79bb      	ldrb	r3, [r7, #6]
 8003482:	08db      	lsrs	r3, r3, #3
 8003484:	73fb      	strb	r3, [r7, #15]
  uint8_t bit = y % 8;
 8003486:	79bb      	ldrb	r3, [r7, #6]
 8003488:	f003 0307 	and.w	r3, r3, #7
 800348c:	73bb      	strb	r3, [r7, #14]
  OLED_SetByte_Fine(page, x, data << bit, bit, 7, color);
 800348e:	797a      	ldrb	r2, [r7, #5]
 8003490:	7bbb      	ldrb	r3, [r7, #14]
 8003492:	fa02 f303 	lsl.w	r3, r2, r3
 8003496:	b2da      	uxtb	r2, r3
 8003498:	7bbc      	ldrb	r4, [r7, #14]
 800349a:	79f9      	ldrb	r1, [r7, #7]
 800349c:	7bf8      	ldrb	r0, [r7, #15]
 800349e:	793b      	ldrb	r3, [r7, #4]
 80034a0:	9301      	str	r3, [sp, #4]
 80034a2:	2307      	movs	r3, #7
 80034a4:	9300      	str	r3, [sp, #0]
 80034a6:	4623      	mov	r3, r4
 80034a8:	f7ff ff00 	bl	80032ac <OLED_SetByte_Fine>
  if (bit)
 80034ac:	7bbb      	ldrb	r3, [r7, #14]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d014      	beq.n	80034dc <OLED_SetBits+0x7a>
  {
    OLED_SetByte_Fine(page + 1, x, data >> (8 - bit), 0, bit - 1, color);
 80034b2:	7bfb      	ldrb	r3, [r7, #15]
 80034b4:	3301      	adds	r3, #1
 80034b6:	b2d8      	uxtb	r0, r3
 80034b8:	797a      	ldrb	r2, [r7, #5]
 80034ba:	7bbb      	ldrb	r3, [r7, #14]
 80034bc:	f1c3 0308 	rsb	r3, r3, #8
 80034c0:	fa42 f303 	asr.w	r3, r2, r3
 80034c4:	b2dc      	uxtb	r4, r3
 80034c6:	7bbb      	ldrb	r3, [r7, #14]
 80034c8:	3b01      	subs	r3, #1
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	79f9      	ldrb	r1, [r7, #7]
 80034ce:	793a      	ldrb	r2, [r7, #4]
 80034d0:	9201      	str	r2, [sp, #4]
 80034d2:	9300      	str	r3, [sp, #0]
 80034d4:	2300      	movs	r3, #0
 80034d6:	4622      	mov	r2, r4
 80034d8:	f7ff fee8 	bl	80032ac <OLED_SetByte_Fine>
  }
}
 80034dc:	bf00      	nop
 80034de:	3714      	adds	r7, #20
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd90      	pop	{r4, r7, pc}

080034e4 <OLED_SetBlock>:
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始的w*h个像素设置为data中的数据
 * @note data的数据应该采用列行式排列
 */
void OLED_SetBlock(uint8_t x, uint8_t y, const uint8_t *data, uint8_t w, uint8_t h, OLED_ColorMode color)
{
 80034e4:	b590      	push	{r4, r7, lr}
 80034e6:	b087      	sub	sp, #28
 80034e8:	af02      	add	r7, sp, #8
 80034ea:	603a      	str	r2, [r7, #0]
 80034ec:	461a      	mov	r2, r3
 80034ee:	4603      	mov	r3, r0
 80034f0:	71fb      	strb	r3, [r7, #7]
 80034f2:	460b      	mov	r3, r1
 80034f4:	71bb      	strb	r3, [r7, #6]
 80034f6:	4613      	mov	r3, r2
 80034f8:	717b      	strb	r3, [r7, #5]
  uint8_t fullRow = h / 8; // 完整的行数
 80034fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80034fe:	08db      	lsrs	r3, r3, #3
 8003500:	733b      	strb	r3, [r7, #12]
  uint8_t partBit = h % 8; // 不完整的字节中的有效位数
 8003502:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003506:	f003 0307 	and.w	r3, r3, #7
 800350a:	72fb      	strb	r3, [r7, #11]
  for (uint8_t i = 0; i < w; i++)
 800350c:	2300      	movs	r3, #0
 800350e:	73fb      	strb	r3, [r7, #15]
 8003510:	e025      	b.n	800355e <OLED_SetBlock+0x7a>
  {
    for (uint8_t j = 0; j < fullRow; j++)
 8003512:	2300      	movs	r3, #0
 8003514:	73bb      	strb	r3, [r7, #14]
 8003516:	e01b      	b.n	8003550 <OLED_SetBlock+0x6c>
    {
      OLED_SetBits(x + i, y + j * 8, data[i + j * w], color);
 8003518:	79fa      	ldrb	r2, [r7, #7]
 800351a:	7bfb      	ldrb	r3, [r7, #15]
 800351c:	4413      	add	r3, r2
 800351e:	b2d8      	uxtb	r0, r3
 8003520:	7bbb      	ldrb	r3, [r7, #14]
 8003522:	00db      	lsls	r3, r3, #3
 8003524:	b2da      	uxtb	r2, r3
 8003526:	79bb      	ldrb	r3, [r7, #6]
 8003528:	4413      	add	r3, r2
 800352a:	b2dc      	uxtb	r4, r3
 800352c:	7bfa      	ldrb	r2, [r7, #15]
 800352e:	7bbb      	ldrb	r3, [r7, #14]
 8003530:	7979      	ldrb	r1, [r7, #5]
 8003532:	fb01 f303 	mul.w	r3, r1, r3
 8003536:	4413      	add	r3, r2
 8003538:	461a      	mov	r2, r3
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	4413      	add	r3, r2
 800353e:	781a      	ldrb	r2, [r3, #0]
 8003540:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003544:	4621      	mov	r1, r4
 8003546:	f7ff ff8c 	bl	8003462 <OLED_SetBits>
    for (uint8_t j = 0; j < fullRow; j++)
 800354a:	7bbb      	ldrb	r3, [r7, #14]
 800354c:	3301      	adds	r3, #1
 800354e:	73bb      	strb	r3, [r7, #14]
 8003550:	7bba      	ldrb	r2, [r7, #14]
 8003552:	7b3b      	ldrb	r3, [r7, #12]
 8003554:	429a      	cmp	r2, r3
 8003556:	d3df      	bcc.n	8003518 <OLED_SetBlock+0x34>
  for (uint8_t i = 0; i < w; i++)
 8003558:	7bfb      	ldrb	r3, [r7, #15]
 800355a:	3301      	adds	r3, #1
 800355c:	73fb      	strb	r3, [r7, #15]
 800355e:	7bfa      	ldrb	r2, [r7, #15]
 8003560:	797b      	ldrb	r3, [r7, #5]
 8003562:	429a      	cmp	r2, r3
 8003564:	d3d5      	bcc.n	8003512 <OLED_SetBlock+0x2e>
    }
  }
  if (partBit)
 8003566:	7afb      	ldrb	r3, [r7, #11]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d028      	beq.n	80035be <OLED_SetBlock+0xda>
  {
    uint16_t fullNum = w * fullRow; // 完整的字节数
 800356c:	797b      	ldrb	r3, [r7, #5]
 800356e:	b29a      	uxth	r2, r3
 8003570:	7b3b      	ldrb	r3, [r7, #12]
 8003572:	b29b      	uxth	r3, r3
 8003574:	fb12 f303 	smulbb	r3, r2, r3
 8003578:	813b      	strh	r3, [r7, #8]
    for (uint8_t i = 0; i < w; i++)
 800357a:	2300      	movs	r3, #0
 800357c:	737b      	strb	r3, [r7, #13]
 800357e:	e01a      	b.n	80035b6 <OLED_SetBlock+0xd2>
    {
      OLED_SetBits_Fine(x + i, y + (fullRow * 8), data[fullNum + i], partBit, color);
 8003580:	79fa      	ldrb	r2, [r7, #7]
 8003582:	7b7b      	ldrb	r3, [r7, #13]
 8003584:	4413      	add	r3, r2
 8003586:	b2d8      	uxtb	r0, r3
 8003588:	7b3b      	ldrb	r3, [r7, #12]
 800358a:	00db      	lsls	r3, r3, #3
 800358c:	b2da      	uxtb	r2, r3
 800358e:	79bb      	ldrb	r3, [r7, #6]
 8003590:	4413      	add	r3, r2
 8003592:	b2d9      	uxtb	r1, r3
 8003594:	893a      	ldrh	r2, [r7, #8]
 8003596:	7b7b      	ldrb	r3, [r7, #13]
 8003598:	4413      	add	r3, r2
 800359a:	461a      	mov	r2, r3
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	4413      	add	r3, r2
 80035a0:	781a      	ldrb	r2, [r3, #0]
 80035a2:	7afc      	ldrb	r4, [r7, #11]
 80035a4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80035a8:	9300      	str	r3, [sp, #0]
 80035aa:	4623      	mov	r3, r4
 80035ac:	f7ff fefa 	bl	80033a4 <OLED_SetBits_Fine>
    for (uint8_t i = 0; i < w; i++)
 80035b0:	7b7b      	ldrb	r3, [r7, #13]
 80035b2:	3301      	adds	r3, #1
 80035b4:	737b      	strb	r3, [r7, #13]
 80035b6:	7b7a      	ldrb	r2, [r7, #13]
 80035b8:	797b      	ldrb	r3, [r7, #5]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d3e0      	bcc.n	8003580 <OLED_SetBlock+0x9c>
  //       if (j * 8 + k >= h) break; // 防止越界(不完整的字节
  //       OLED_SetPixel(x + i, y + j * 8 + k, !((data[i + j * w] >> k) & 0x01));
  //     }
  //   }
  // }
}
 80035be:	bf00      	nop
 80035c0:	3714      	adds	r7, #20
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd90      	pop	{r4, r7, pc}

080035c6 <OLED_PrintASCIIChar>:
 * @param ch 字符
 * @param font 字体
 * @param color 颜色
 */
void OLED_PrintASCIIChar(uint8_t x, uint8_t y, char ch, const ASCIIFont *font, OLED_ColorMode color)
{
 80035c6:	b5b0      	push	{r4, r5, r7, lr}
 80035c8:	b084      	sub	sp, #16
 80035ca:	af02      	add	r7, sp, #8
 80035cc:	603b      	str	r3, [r7, #0]
 80035ce:	4603      	mov	r3, r0
 80035d0:	71fb      	strb	r3, [r7, #7]
 80035d2:	460b      	mov	r3, r1
 80035d4:	71bb      	strb	r3, [r7, #6]
 80035d6:	4613      	mov	r3, r2
 80035d8:	717b      	strb	r3, [r7, #5]
  OLED_SetBlock(x, y, font->chars + (ch - ' ') * (((font->h + 7) / 8) * font->w), font->w, font->h, color);
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	685a      	ldr	r2, [r3, #4]
 80035de:	797b      	ldrb	r3, [r7, #5]
 80035e0:	f1a3 0120 	sub.w	r1, r3, #32
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	3307      	adds	r3, #7
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	da00      	bge.n	80035f0 <OLED_PrintASCIIChar+0x2a>
 80035ee:	3307      	adds	r3, #7
 80035f0:	10db      	asrs	r3, r3, #3
 80035f2:	4618      	mov	r0, r3
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	785b      	ldrb	r3, [r3, #1]
 80035f8:	fb00 f303 	mul.w	r3, r0, r3
 80035fc:	fb01 f303 	mul.w	r3, r1, r3
 8003600:	18d4      	adds	r4, r2, r3
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	785d      	ldrb	r5, [r3, #1]
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	79b9      	ldrb	r1, [r7, #6]
 800360c:	79f8      	ldrb	r0, [r7, #7]
 800360e:	7e3a      	ldrb	r2, [r7, #24]
 8003610:	9201      	str	r2, [sp, #4]
 8003612:	9300      	str	r3, [sp, #0]
 8003614:	462b      	mov	r3, r5
 8003616:	4622      	mov	r2, r4
 8003618:	f7ff ff64 	bl	80034e4 <OLED_SetBlock>
}
 800361c:	bf00      	nop
 800361e:	3708      	adds	r7, #8
 8003620:	46bd      	mov	sp, r7
 8003622:	bdb0      	pop	{r4, r5, r7, pc}

08003624 <_OLED_GetUTF8Len>:

/**
 * @brief 获取UTF-8编码的字符长度
 */
uint8_t _OLED_GetUTF8Len(char *string)
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  if ((string[0] & 0x80) == 0x00)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	b25b      	sxtb	r3, r3
 8003632:	2b00      	cmp	r3, #0
 8003634:	db01      	blt.n	800363a <_OLED_GetUTF8Len+0x16>
  {
    return 1;
 8003636:	2301      	movs	r3, #1
 8003638:	e018      	b.n	800366c <_OLED_GetUTF8Len+0x48>
  }
  else if ((string[0] & 0xE0) == 0xC0)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8003642:	2bc0      	cmp	r3, #192	@ 0xc0
 8003644:	d101      	bne.n	800364a <_OLED_GetUTF8Len+0x26>
  {
    return 2;
 8003646:	2302      	movs	r3, #2
 8003648:	e010      	b.n	800366c <_OLED_GetUTF8Len+0x48>
  }
  else if ((string[0] & 0xF0) == 0xE0)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003652:	2be0      	cmp	r3, #224	@ 0xe0
 8003654:	d101      	bne.n	800365a <_OLED_GetUTF8Len+0x36>
  {
    return 3;
 8003656:	2303      	movs	r3, #3
 8003658:	e008      	b.n	800366c <_OLED_GetUTF8Len+0x48>
  }
  else if ((string[0] & 0xF8) == 0xF0)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8003662:	2bf0      	cmp	r3, #240	@ 0xf0
 8003664:	d101      	bne.n	800366a <_OLED_GetUTF8Len+0x46>
  {
    return 4;
 8003666:	2304      	movs	r3, #4
 8003668:	e000      	b.n	800366c <_OLED_GetUTF8Len+0x48>
  }
  return 0;
 800366a:	2300      	movs	r3, #0
}
 800366c:	4618      	mov	r0, r3
 800366e:	370c      	adds	r7, #12
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <OLED_PrintString>:
 * @note 为保证字符串中的中文会被自动识别并绘制, 需:
 * 1. 编译器字符集设置为UTF-8
 * 2. 使用波特律动LED取模工具生成字模(https://led.baud-dance.com)
 */
void OLED_PrintString(uint8_t x, uint8_t y, char *str, const Font *font, OLED_ColorMode color)
{
 8003678:	b5b0      	push	{r4, r5, r7, lr}
 800367a:	b08a      	sub	sp, #40	@ 0x28
 800367c:	af02      	add	r7, sp, #8
 800367e:	60ba      	str	r2, [r7, #8]
 8003680:	607b      	str	r3, [r7, #4]
 8003682:	4603      	mov	r3, r0
 8003684:	73fb      	strb	r3, [r7, #15]
 8003686:	460b      	mov	r3, r1
 8003688:	73bb      	strb	r3, [r7, #14]
  uint16_t i = 0;                                       // 字符串索引
 800368a:	2300      	movs	r3, #0
 800368c:	83fb      	strh	r3, [r7, #30]
  uint8_t oneLen = (((font->h + 7) / 8) * font->w) + 4; // 一个字模占多少字节
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	3307      	adds	r3, #7
 8003694:	2b00      	cmp	r3, #0
 8003696:	da00      	bge.n	800369a <OLED_PrintString+0x22>
 8003698:	3307      	adds	r3, #7
 800369a:	10db      	asrs	r3, r3, #3
 800369c:	b2da      	uxtb	r2, r3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	785b      	ldrb	r3, [r3, #1]
 80036a2:	fb12 f303 	smulbb	r3, r2, r3
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	3304      	adds	r3, #4
 80036aa:	76fb      	strb	r3, [r7, #27]
  uint8_t found;                                        // 是否找到字模
  uint8_t utf8Len;                                      // UTF-8编码长度
  uint8_t *head;                                        // 字模头指针
  while (str[i])
 80036ac:	e07d      	b.n	80037aa <OLED_PrintString+0x132>
  {
    found = 0;
 80036ae:	2300      	movs	r3, #0
 80036b0:	777b      	strb	r3, [r7, #29]
    utf8Len = _OLED_GetUTF8Len(str + i);
 80036b2:	8bfb      	ldrh	r3, [r7, #30]
 80036b4:	68ba      	ldr	r2, [r7, #8]
 80036b6:	4413      	add	r3, r2
 80036b8:	4618      	mov	r0, r3
 80036ba:	f7ff ffb3 	bl	8003624 <_OLED_GetUTF8Len>
 80036be:	4603      	mov	r3, r0
 80036c0:	76bb      	strb	r3, [r7, #26]
    if (utf8Len == 0)
 80036c2:	7ebb      	ldrb	r3, [r7, #26]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d078      	beq.n	80037ba <OLED_PrintString+0x142>
      break; // 有问题的UTF-8编码

    // 寻找字符  TODO 优化查找算法, 二分查找或者hash
    for (uint8_t j = 0; j < font->len; j++)
 80036c8:	2300      	movs	r3, #0
 80036ca:	773b      	strb	r3, [r7, #28]
 80036cc:	e032      	b.n	8003734 <OLED_PrintString+0xbc>
    {
      head = (uint8_t *)(font->chars) + (j * oneLen);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	7f3a      	ldrb	r2, [r7, #28]
 80036d4:	7ef9      	ldrb	r1, [r7, #27]
 80036d6:	fb01 f202 	mul.w	r2, r1, r2
 80036da:	4413      	add	r3, r2
 80036dc:	617b      	str	r3, [r7, #20]
      if (memcmp(str + i, head, utf8Len) == 0)
 80036de:	8bfb      	ldrh	r3, [r7, #30]
 80036e0:	68ba      	ldr	r2, [r7, #8]
 80036e2:	4413      	add	r3, r2
 80036e4:	7eba      	ldrb	r2, [r7, #26]
 80036e6:	6979      	ldr	r1, [r7, #20]
 80036e8:	4618      	mov	r0, r3
 80036ea:	f004 fb86 	bl	8007dfa <memcmp>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d11c      	bne.n	800372e <OLED_PrintString+0xb6>
      {
        OLED_SetBlock(x, y, head + 4, font->w, font->h, color);
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	1d1c      	adds	r4, r3, #4
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	785d      	ldrb	r5, [r3, #1]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	7bb9      	ldrb	r1, [r7, #14]
 8003702:	7bf8      	ldrb	r0, [r7, #15]
 8003704:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8003708:	9201      	str	r2, [sp, #4]
 800370a:	9300      	str	r3, [sp, #0]
 800370c:	462b      	mov	r3, r5
 800370e:	4622      	mov	r2, r4
 8003710:	f7ff fee8 	bl	80034e4 <OLED_SetBlock>
        // 移动光标
        x += font->w;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	785a      	ldrb	r2, [r3, #1]
 8003718:	7bfb      	ldrb	r3, [r7, #15]
 800371a:	4413      	add	r3, r2
 800371c:	73fb      	strb	r3, [r7, #15]
        i += utf8Len;
 800371e:	7ebb      	ldrb	r3, [r7, #26]
 8003720:	b29a      	uxth	r2, r3
 8003722:	8bfb      	ldrh	r3, [r7, #30]
 8003724:	4413      	add	r3, r2
 8003726:	83fb      	strh	r3, [r7, #30]
        found = 1;
 8003728:	2301      	movs	r3, #1
 800372a:	777b      	strb	r3, [r7, #29]
        break;
 800372c:	e007      	b.n	800373e <OLED_PrintString+0xc6>
    for (uint8_t j = 0; j < font->len; j++)
 800372e:	7f3b      	ldrb	r3, [r7, #28]
 8003730:	3301      	adds	r3, #1
 8003732:	773b      	strb	r3, [r7, #28]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	7a1b      	ldrb	r3, [r3, #8]
 8003738:	7f3a      	ldrb	r2, [r7, #28]
 800373a:	429a      	cmp	r2, r3
 800373c:	d3c7      	bcc.n	80036ce <OLED_PrintString+0x56>
      }
    }

    // 若未找到字模,且为ASCII字符, 则缺省显示ASCII字符
    if (found == 0)
 800373e:	7f7b      	ldrb	r3, [r7, #29]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d132      	bne.n	80037aa <OLED_PrintString+0x132>
    {
      if (utf8Len == 1)
 8003744:	7ebb      	ldrb	r3, [r7, #26]
 8003746:	2b01      	cmp	r3, #1
 8003748:	d119      	bne.n	800377e <OLED_PrintString+0x106>
      {
        OLED_PrintASCIIChar(x, y, str[i], font->ascii, color);
 800374a:	8bfb      	ldrh	r3, [r7, #30]
 800374c:	68ba      	ldr	r2, [r7, #8]
 800374e:	4413      	add	r3, r2
 8003750:	781a      	ldrb	r2, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	68dc      	ldr	r4, [r3, #12]
 8003756:	7bb9      	ldrb	r1, [r7, #14]
 8003758:	7bf8      	ldrb	r0, [r7, #15]
 800375a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800375e:	9300      	str	r3, [sp, #0]
 8003760:	4623      	mov	r3, r4
 8003762:	f7ff ff30 	bl	80035c6 <OLED_PrintASCIIChar>
        // 移动光标
        x += font->ascii->w;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	785a      	ldrb	r2, [r3, #1]
 800376c:	7bfb      	ldrb	r3, [r7, #15]
 800376e:	4413      	add	r3, r2
 8003770:	73fb      	strb	r3, [r7, #15]
        i += utf8Len;
 8003772:	7ebb      	ldrb	r3, [r7, #26]
 8003774:	b29a      	uxth	r2, r3
 8003776:	8bfb      	ldrh	r3, [r7, #30]
 8003778:	4413      	add	r3, r2
 800377a:	83fb      	strh	r3, [r7, #30]
 800377c:	e015      	b.n	80037aa <OLED_PrintString+0x132>
      }
      else
      {
        OLED_PrintASCIIChar(x, y, ' ', font->ascii, color);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	68da      	ldr	r2, [r3, #12]
 8003782:	7bb9      	ldrb	r1, [r7, #14]
 8003784:	7bf8      	ldrb	r0, [r7, #15]
 8003786:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800378a:	9300      	str	r3, [sp, #0]
 800378c:	4613      	mov	r3, r2
 800378e:	2220      	movs	r2, #32
 8003790:	f7ff ff19 	bl	80035c6 <OLED_PrintASCIIChar>
        x += font->ascii->w;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	785a      	ldrb	r2, [r3, #1]
 800379a:	7bfb      	ldrb	r3, [r7, #15]
 800379c:	4413      	add	r3, r2
 800379e:	73fb      	strb	r3, [r7, #15]
        i += utf8Len;
 80037a0:	7ebb      	ldrb	r3, [r7, #26]
 80037a2:	b29a      	uxth	r2, r3
 80037a4:	8bfb      	ldrh	r3, [r7, #30]
 80037a6:	4413      	add	r3, r2
 80037a8:	83fb      	strh	r3, [r7, #30]
  while (str[i])
 80037aa:	8bfb      	ldrh	r3, [r7, #30]
 80037ac:	68ba      	ldr	r2, [r7, #8]
 80037ae:	4413      	add	r3, r2
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	f47f af7b 	bne.w	80036ae <OLED_PrintString+0x36>
      }
    }
  }
}
 80037b8:	e000      	b.n	80037bc <OLED_PrintString+0x144>
      break; // 有问题的UTF-8编码
 80037ba:	bf00      	nop
}
 80037bc:	bf00      	nop
 80037be:	3720      	adds	r7, #32
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bdb0      	pop	{r4, r5, r7, pc}

080037c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037ca:	2300      	movs	r3, #0
 80037cc:	607b      	str	r3, [r7, #4]
 80037ce:	4b10      	ldr	r3, [pc, #64]	@ (8003810 <HAL_MspInit+0x4c>)
 80037d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037d2:	4a0f      	ldr	r2, [pc, #60]	@ (8003810 <HAL_MspInit+0x4c>)
 80037d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80037d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80037da:	4b0d      	ldr	r3, [pc, #52]	@ (8003810 <HAL_MspInit+0x4c>)
 80037dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037e2:	607b      	str	r3, [r7, #4]
 80037e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80037e6:	2300      	movs	r3, #0
 80037e8:	603b      	str	r3, [r7, #0]
 80037ea:	4b09      	ldr	r3, [pc, #36]	@ (8003810 <HAL_MspInit+0x4c>)
 80037ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ee:	4a08      	ldr	r2, [pc, #32]	@ (8003810 <HAL_MspInit+0x4c>)
 80037f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80037f6:	4b06      	ldr	r3, [pc, #24]	@ (8003810 <HAL_MspInit+0x4c>)
 80037f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037fe:	603b      	str	r3, [r7, #0]
 8003800:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003802:	bf00      	nop
 8003804:	370c      	adds	r7, #12
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	40023800 	.word	0x40023800

08003814 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003814:	b480      	push	{r7}
 8003816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003818:	bf00      	nop
 800381a:	e7fd      	b.n	8003818 <NMI_Handler+0x4>

0800381c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800381c:	b480      	push	{r7}
 800381e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003820:	bf00      	nop
 8003822:	e7fd      	b.n	8003820 <HardFault_Handler+0x4>

08003824 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003824:	b480      	push	{r7}
 8003826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003828:	bf00      	nop
 800382a:	e7fd      	b.n	8003828 <MemManage_Handler+0x4>

0800382c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800382c:	b480      	push	{r7}
 800382e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003830:	bf00      	nop
 8003832:	e7fd      	b.n	8003830 <BusFault_Handler+0x4>

08003834 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003834:	b480      	push	{r7}
 8003836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003838:	bf00      	nop
 800383a:	e7fd      	b.n	8003838 <UsageFault_Handler+0x4>

0800383c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800383c:	b480      	push	{r7}
 800383e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003840:	bf00      	nop
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr

0800384a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800384a:	b480      	push	{r7}
 800384c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800384e:	bf00      	nop
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr

08003858 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003858:	b480      	push	{r7}
 800385a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800385c:	bf00      	nop
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr

08003866 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003866:	b580      	push	{r7, lr}
 8003868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800386a:	f000 fa4b 	bl	8003d04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800386e:	bf00      	nop
 8003870:	bd80      	pop	{r7, pc}
	...

08003874 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003878:	4802      	ldr	r0, [pc, #8]	@ (8003884 <ADC_IRQHandler+0x10>)
 800387a:	f000 faca 	bl	8003e12 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800387e:	bf00      	nop
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	200001f0 	.word	0x200001f0

08003888 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800388c:	4802      	ldr	r0, [pc, #8]	@ (8003898 <DMA2_Stream0_IRQHandler+0x10>)
 800388e:	f001 fa75 	bl	8004d7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003892:	bf00      	nop
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	20000238 	.word	0x20000238

0800389c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800389c:	b480      	push	{r7}
 800389e:	af00      	add	r7, sp, #0
  return 1;
 80038a0:	2301      	movs	r3, #1
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr

080038ac <_kill>:

int _kill(int pid, int sig)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b082      	sub	sp, #8
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80038b6:	f004 fb03 	bl	8007ec0 <__errno>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2216      	movs	r2, #22
 80038be:	601a      	str	r2, [r3, #0]
  return -1;
 80038c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3708      	adds	r7, #8
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <_exit>:

void _exit (int status)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80038d4:	f04f 31ff 	mov.w	r1, #4294967295
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f7ff ffe7 	bl	80038ac <_kill>
  while (1) {}    /* Make sure we hang here */
 80038de:	bf00      	nop
 80038e0:	e7fd      	b.n	80038de <_exit+0x12>

080038e2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80038e2:	b580      	push	{r7, lr}
 80038e4:	b086      	sub	sp, #24
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	60f8      	str	r0, [r7, #12]
 80038ea:	60b9      	str	r1, [r7, #8]
 80038ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038ee:	2300      	movs	r3, #0
 80038f0:	617b      	str	r3, [r7, #20]
 80038f2:	e00a      	b.n	800390a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80038f4:	f3af 8000 	nop.w
 80038f8:	4601      	mov	r1, r0
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	1c5a      	adds	r2, r3, #1
 80038fe:	60ba      	str	r2, [r7, #8]
 8003900:	b2ca      	uxtb	r2, r1
 8003902:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	3301      	adds	r3, #1
 8003908:	617b      	str	r3, [r7, #20]
 800390a:	697a      	ldr	r2, [r7, #20]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	429a      	cmp	r2, r3
 8003910:	dbf0      	blt.n	80038f4 <_read+0x12>
  }

  return len;
 8003912:	687b      	ldr	r3, [r7, #4]
}
 8003914:	4618      	mov	r0, r3
 8003916:	3718      	adds	r7, #24
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b086      	sub	sp, #24
 8003920:	af00      	add	r7, sp, #0
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	60b9      	str	r1, [r7, #8]
 8003926:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003928:	2300      	movs	r3, #0
 800392a:	617b      	str	r3, [r7, #20]
 800392c:	e009      	b.n	8003942 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	1c5a      	adds	r2, r3, #1
 8003932:	60ba      	str	r2, [r7, #8]
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	4618      	mov	r0, r3
 8003938:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	3301      	adds	r3, #1
 8003940:	617b      	str	r3, [r7, #20]
 8003942:	697a      	ldr	r2, [r7, #20]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	429a      	cmp	r2, r3
 8003948:	dbf1      	blt.n	800392e <_write+0x12>
  }
  return len;
 800394a:	687b      	ldr	r3, [r7, #4]
}
 800394c:	4618      	mov	r0, r3
 800394e:	3718      	adds	r7, #24
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <_close>:

int _close(int file)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800395c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003960:	4618      	mov	r0, r3
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800397c:	605a      	str	r2, [r3, #4]
  return 0;
 800397e:	2300      	movs	r3, #0
}
 8003980:	4618      	mov	r0, r3
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <_isatty>:

int _isatty(int file)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003994:	2301      	movs	r3, #1
}
 8003996:	4618      	mov	r0, r3
 8003998:	370c      	adds	r7, #12
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr

080039a2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80039a2:	b480      	push	{r7}
 80039a4:	b085      	sub	sp, #20
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	60f8      	str	r0, [r7, #12]
 80039aa:	60b9      	str	r1, [r7, #8]
 80039ac:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80039ae:	2300      	movs	r3, #0
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3714      	adds	r7, #20
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b086      	sub	sp, #24
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80039c4:	4a14      	ldr	r2, [pc, #80]	@ (8003a18 <_sbrk+0x5c>)
 80039c6:	4b15      	ldr	r3, [pc, #84]	@ (8003a1c <_sbrk+0x60>)
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80039d0:	4b13      	ldr	r3, [pc, #76]	@ (8003a20 <_sbrk+0x64>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d102      	bne.n	80039de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80039d8:	4b11      	ldr	r3, [pc, #68]	@ (8003a20 <_sbrk+0x64>)
 80039da:	4a12      	ldr	r2, [pc, #72]	@ (8003a24 <_sbrk+0x68>)
 80039dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80039de:	4b10      	ldr	r3, [pc, #64]	@ (8003a20 <_sbrk+0x64>)
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4413      	add	r3, r2
 80039e6:	693a      	ldr	r2, [r7, #16]
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d207      	bcs.n	80039fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80039ec:	f004 fa68 	bl	8007ec0 <__errno>
 80039f0:	4603      	mov	r3, r0
 80039f2:	220c      	movs	r2, #12
 80039f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80039f6:	f04f 33ff 	mov.w	r3, #4294967295
 80039fa:	e009      	b.n	8003a10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80039fc:	4b08      	ldr	r3, [pc, #32]	@ (8003a20 <_sbrk+0x64>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a02:	4b07      	ldr	r3, [pc, #28]	@ (8003a20 <_sbrk+0x64>)
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4413      	add	r3, r2
 8003a0a:	4a05      	ldr	r2, [pc, #20]	@ (8003a20 <_sbrk+0x64>)
 8003a0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3718      	adds	r7, #24
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	20020000 	.word	0x20020000
 8003a1c:	00000400 	.word	0x00000400
 8003a20:	20007008 	.word	0x20007008
 8003a24:	200071f0 	.word	0x200071f0

08003a28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a2c:	4b06      	ldr	r3, [pc, #24]	@ (8003a48 <SystemInit+0x20>)
 8003a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a32:	4a05      	ldr	r2, [pc, #20]	@ (8003a48 <SystemInit+0x20>)
 8003a34:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003a38:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003a3c:	bf00      	nop
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	e000ed00 	.word	0xe000ed00

08003a4c <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b086      	sub	sp, #24
 8003a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a52:	f107 0308 	add.w	r3, r7, #8
 8003a56:	2200      	movs	r2, #0
 8003a58:	601a      	str	r2, [r3, #0]
 8003a5a:	605a      	str	r2, [r3, #4]
 8003a5c:	609a      	str	r2, [r3, #8]
 8003a5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a60:	463b      	mov	r3, r7
 8003a62:	2200      	movs	r2, #0
 8003a64:	601a      	str	r2, [r3, #0]
 8003a66:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003a68:	4b1c      	ldr	r3, [pc, #112]	@ (8003adc <MX_TIM3_Init+0x90>)
 8003a6a:	4a1d      	ldr	r2, [pc, #116]	@ (8003ae0 <MX_TIM3_Init+0x94>)
 8003a6c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8003a6e:	4b1b      	ldr	r3, [pc, #108]	@ (8003adc <MX_TIM3_Init+0x90>)
 8003a70:	2263      	movs	r2, #99	@ 0x63
 8003a72:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a74:	4b19      	ldr	r3, [pc, #100]	@ (8003adc <MX_TIM3_Init+0x90>)
 8003a76:	2200      	movs	r2, #0
 8003a78:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10-1;
 8003a7a:	4b18      	ldr	r3, [pc, #96]	@ (8003adc <MX_TIM3_Init+0x90>)
 8003a7c:	2209      	movs	r2, #9
 8003a7e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a80:	4b16      	ldr	r3, [pc, #88]	@ (8003adc <MX_TIM3_Init+0x90>)
 8003a82:	2200      	movs	r2, #0
 8003a84:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a86:	4b15      	ldr	r3, [pc, #84]	@ (8003adc <MX_TIM3_Init+0x90>)
 8003a88:	2200      	movs	r2, #0
 8003a8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003a8c:	4813      	ldr	r0, [pc, #76]	@ (8003adc <MX_TIM3_Init+0x90>)
 8003a8e:	f002 fe73 	bl	8006778 <HAL_TIM_Base_Init>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d001      	beq.n	8003a9c <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8003a98:	f7ff fb3e 	bl	8003118 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a9c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003aa0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003aa2:	f107 0308 	add.w	r3, r7, #8
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	480c      	ldr	r0, [pc, #48]	@ (8003adc <MX_TIM3_Init+0x90>)
 8003aaa:	f002 ff0f 	bl	80068cc <HAL_TIM_ConfigClockSource>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d001      	beq.n	8003ab8 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8003ab4:	f7ff fb30 	bl	8003118 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003ab8:	2320      	movs	r3, #32
 8003aba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003abc:	2300      	movs	r3, #0
 8003abe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003ac0:	463b      	mov	r3, r7
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	4805      	ldr	r0, [pc, #20]	@ (8003adc <MX_TIM3_Init+0x90>)
 8003ac6:	f003 f8e9 	bl	8006c9c <HAL_TIMEx_MasterConfigSynchronization>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d001      	beq.n	8003ad4 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8003ad0:	f7ff fb22 	bl	8003118 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003ad4:	bf00      	nop
 8003ad6:	3718      	adds	r7, #24
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	2000700c 	.word	0x2000700c
 8003ae0:	40000400 	.word	0x40000400

08003ae4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b085      	sub	sp, #20
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a0b      	ldr	r2, [pc, #44]	@ (8003b20 <HAL_TIM_Base_MspInit+0x3c>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d10d      	bne.n	8003b12 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003af6:	2300      	movs	r3, #0
 8003af8:	60fb      	str	r3, [r7, #12]
 8003afa:	4b0a      	ldr	r3, [pc, #40]	@ (8003b24 <HAL_TIM_Base_MspInit+0x40>)
 8003afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003afe:	4a09      	ldr	r2, [pc, #36]	@ (8003b24 <HAL_TIM_Base_MspInit+0x40>)
 8003b00:	f043 0302 	orr.w	r3, r3, #2
 8003b04:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b06:	4b07      	ldr	r3, [pc, #28]	@ (8003b24 <HAL_TIM_Base_MspInit+0x40>)
 8003b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b0a:	f003 0302 	and.w	r3, r3, #2
 8003b0e:	60fb      	str	r3, [r7, #12]
 8003b10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003b12:	bf00      	nop
 8003b14:	3714      	adds	r7, #20
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
 8003b1e:	bf00      	nop
 8003b20:	40000400 	.word	0x40000400
 8003b24:	40023800 	.word	0x40023800

08003b28 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003b2c:	4b11      	ldr	r3, [pc, #68]	@ (8003b74 <MX_USART1_UART_Init+0x4c>)
 8003b2e:	4a12      	ldr	r2, [pc, #72]	@ (8003b78 <MX_USART1_UART_Init+0x50>)
 8003b30:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003b32:	4b10      	ldr	r3, [pc, #64]	@ (8003b74 <MX_USART1_UART_Init+0x4c>)
 8003b34:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003b38:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003b3a:	4b0e      	ldr	r3, [pc, #56]	@ (8003b74 <MX_USART1_UART_Init+0x4c>)
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003b40:	4b0c      	ldr	r3, [pc, #48]	@ (8003b74 <MX_USART1_UART_Init+0x4c>)
 8003b42:	2200      	movs	r2, #0
 8003b44:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003b46:	4b0b      	ldr	r3, [pc, #44]	@ (8003b74 <MX_USART1_UART_Init+0x4c>)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003b4c:	4b09      	ldr	r3, [pc, #36]	@ (8003b74 <MX_USART1_UART_Init+0x4c>)
 8003b4e:	220c      	movs	r2, #12
 8003b50:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b52:	4b08      	ldr	r3, [pc, #32]	@ (8003b74 <MX_USART1_UART_Init+0x4c>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b58:	4b06      	ldr	r3, [pc, #24]	@ (8003b74 <MX_USART1_UART_Init+0x4c>)
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003b5e:	4805      	ldr	r0, [pc, #20]	@ (8003b74 <MX_USART1_UART_Init+0x4c>)
 8003b60:	f003 f90a 	bl	8006d78 <HAL_UART_Init>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d001      	beq.n	8003b6e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003b6a:	f7ff fad5 	bl	8003118 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003b6e:	bf00      	nop
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	20007054 	.word	0x20007054
 8003b78:	40011000 	.word	0x40011000

08003b7c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b08a      	sub	sp, #40	@ 0x28
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b84:	f107 0314 	add.w	r3, r7, #20
 8003b88:	2200      	movs	r2, #0
 8003b8a:	601a      	str	r2, [r3, #0]
 8003b8c:	605a      	str	r2, [r3, #4]
 8003b8e:	609a      	str	r2, [r3, #8]
 8003b90:	60da      	str	r2, [r3, #12]
 8003b92:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a19      	ldr	r2, [pc, #100]	@ (8003c00 <HAL_UART_MspInit+0x84>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d12c      	bne.n	8003bf8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	613b      	str	r3, [r7, #16]
 8003ba2:	4b18      	ldr	r3, [pc, #96]	@ (8003c04 <HAL_UART_MspInit+0x88>)
 8003ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ba6:	4a17      	ldr	r2, [pc, #92]	@ (8003c04 <HAL_UART_MspInit+0x88>)
 8003ba8:	f043 0310 	orr.w	r3, r3, #16
 8003bac:	6453      	str	r3, [r2, #68]	@ 0x44
 8003bae:	4b15      	ldr	r3, [pc, #84]	@ (8003c04 <HAL_UART_MspInit+0x88>)
 8003bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bb2:	f003 0310 	and.w	r3, r3, #16
 8003bb6:	613b      	str	r3, [r7, #16]
 8003bb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bba:	2300      	movs	r3, #0
 8003bbc:	60fb      	str	r3, [r7, #12]
 8003bbe:	4b11      	ldr	r3, [pc, #68]	@ (8003c04 <HAL_UART_MspInit+0x88>)
 8003bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bc2:	4a10      	ldr	r2, [pc, #64]	@ (8003c04 <HAL_UART_MspInit+0x88>)
 8003bc4:	f043 0301 	orr.w	r3, r3, #1
 8003bc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bca:	4b0e      	ldr	r3, [pc, #56]	@ (8003c04 <HAL_UART_MspInit+0x88>)
 8003bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bce:	f003 0301 	and.w	r3, r3, #1
 8003bd2:	60fb      	str	r3, [r7, #12]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003bd6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003bda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bdc:	2302      	movs	r3, #2
 8003bde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003be0:	2300      	movs	r3, #0
 8003be2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003be4:	2303      	movs	r3, #3
 8003be6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003be8:	2307      	movs	r3, #7
 8003bea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bec:	f107 0314 	add.w	r3, r7, #20
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	4805      	ldr	r0, [pc, #20]	@ (8003c08 <HAL_UART_MspInit+0x8c>)
 8003bf4:	f001 fb2c 	bl	8005250 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003bf8:	bf00      	nop
 8003bfa:	3728      	adds	r7, #40	@ 0x28
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	40011000 	.word	0x40011000
 8003c04:	40023800 	.word	0x40023800
 8003c08:	40020000 	.word	0x40020000

08003c0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
 ldr   sp, =_estack    		 /* set stack pointer */
 8003c0c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003c44 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003c10:	f7ff ff0a 	bl	8003a28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003c14:	480c      	ldr	r0, [pc, #48]	@ (8003c48 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003c16:	490d      	ldr	r1, [pc, #52]	@ (8003c4c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003c18:	4a0d      	ldr	r2, [pc, #52]	@ (8003c50 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003c1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c1c:	e002      	b.n	8003c24 <LoopCopyDataInit>

08003c1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c22:	3304      	adds	r3, #4

08003c24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c28:	d3f9      	bcc.n	8003c1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c2a:	4a0a      	ldr	r2, [pc, #40]	@ (8003c54 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003c2c:	4c0a      	ldr	r4, [pc, #40]	@ (8003c58 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003c2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c30:	e001      	b.n	8003c36 <LoopFillZerobss>

08003c32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c34:	3204      	adds	r2, #4

08003c36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c38:	d3fb      	bcc.n	8003c32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003c3a:	f004 f947 	bl	8007ecc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c3e:	f7ff f9af 	bl	8002fa0 <main>
  bx  lr    
 8003c42:	4770      	bx	lr
 ldr   sp, =_estack    		 /* set stack pointer */
 8003c44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003c48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c4c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8003c50:	0800aec4 	.word	0x0800aec4
  ldr r2, =_sbss
 8003c54:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8003c58:	200071ec 	.word	0x200071ec

08003c5c <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c5c:	e7fe      	b.n	8003c5c <DMA1_Stream0_IRQHandler>
	...

08003c60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003c64:	4b0e      	ldr	r3, [pc, #56]	@ (8003ca0 <HAL_Init+0x40>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a0d      	ldr	r2, [pc, #52]	@ (8003ca0 <HAL_Init+0x40>)
 8003c6a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003c6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003c70:	4b0b      	ldr	r3, [pc, #44]	@ (8003ca0 <HAL_Init+0x40>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a0a      	ldr	r2, [pc, #40]	@ (8003ca0 <HAL_Init+0x40>)
 8003c76:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003c7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c7c:	4b08      	ldr	r3, [pc, #32]	@ (8003ca0 <HAL_Init+0x40>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a07      	ldr	r2, [pc, #28]	@ (8003ca0 <HAL_Init+0x40>)
 8003c82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c88:	2003      	movs	r0, #3
 8003c8a:	f000 febf 	bl	8004a0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c8e:	200f      	movs	r0, #15
 8003c90:	f000 f808 	bl	8003ca4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c94:	f7ff fd96 	bl	80037c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	40023c00 	.word	0x40023c00

08003ca4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003cac:	4b12      	ldr	r3, [pc, #72]	@ (8003cf8 <HAL_InitTick+0x54>)
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	4b12      	ldr	r3, [pc, #72]	@ (8003cfc <HAL_InitTick+0x58>)
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003cba:	fbb3 f3f1 	udiv	r3, r3, r1
 8003cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f000 fed7 	bl	8004a76 <HAL_SYSTICK_Config>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d001      	beq.n	8003cd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e00e      	b.n	8003cf0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2b0f      	cmp	r3, #15
 8003cd6:	d80a      	bhi.n	8003cee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003cd8:	2200      	movs	r2, #0
 8003cda:	6879      	ldr	r1, [r7, #4]
 8003cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ce0:	f000 fe9f 	bl	8004a22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ce4:	4a06      	ldr	r2, [pc, #24]	@ (8003d00 <HAL_InitTick+0x5c>)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003cea:	2300      	movs	r3, #0
 8003cec:	e000      	b.n	8003cf0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3708      	adds	r7, #8
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	20000000 	.word	0x20000000
 8003cfc:	20000008 	.word	0x20000008
 8003d00:	20000004 	.word	0x20000004

08003d04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d04:	b480      	push	{r7}
 8003d06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d08:	4b06      	ldr	r3, [pc, #24]	@ (8003d24 <HAL_IncTick+0x20>)
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	4b06      	ldr	r3, [pc, #24]	@ (8003d28 <HAL_IncTick+0x24>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4413      	add	r3, r2
 8003d14:	4a04      	ldr	r2, [pc, #16]	@ (8003d28 <HAL_IncTick+0x24>)
 8003d16:	6013      	str	r3, [r2, #0]
}
 8003d18:	bf00      	nop
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	20000008 	.word	0x20000008
 8003d28:	2000709c 	.word	0x2000709c

08003d2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	af00      	add	r7, sp, #0
  return uwTick;
 8003d30:	4b03      	ldr	r3, [pc, #12]	@ (8003d40 <HAL_GetTick+0x14>)
 8003d32:	681b      	ldr	r3, [r3, #0]
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop
 8003d40:	2000709c 	.word	0x2000709c

08003d44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d4c:	f7ff ffee 	bl	8003d2c <HAL_GetTick>
 8003d50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d5c:	d005      	beq.n	8003d6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d5e:	4b0a      	ldr	r3, [pc, #40]	@ (8003d88 <HAL_Delay+0x44>)
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	461a      	mov	r2, r3
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	4413      	add	r3, r2
 8003d68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003d6a:	bf00      	nop
 8003d6c:	f7ff ffde 	bl	8003d2c <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	68fa      	ldr	r2, [r7, #12]
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d8f7      	bhi.n	8003d6c <HAL_Delay+0x28>
  {
  }
}
 8003d7c:	bf00      	nop
 8003d7e:	bf00      	nop
 8003d80:	3710      	adds	r7, #16
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	20000008 	.word	0x20000008

08003d8c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d94:	2300      	movs	r3, #0
 8003d96:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d101      	bne.n	8003da2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e033      	b.n	8003e0a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d109      	bne.n	8003dbe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f7fd f93c 	bl	8001028 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc2:	f003 0310 	and.w	r3, r3, #16
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d118      	bne.n	8003dfc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dce:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003dd2:	f023 0302 	bic.w	r3, r3, #2
 8003dd6:	f043 0202 	orr.w	r2, r3, #2
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 fbbc 	bl	800455c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dee:	f023 0303 	bic.w	r3, r3, #3
 8003df2:	f043 0201 	orr.w	r2, r3, #1
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	641a      	str	r2, [r3, #64]	@ 0x40
 8003dfa:	e001      	b.n	8003e00 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3710      	adds	r7, #16
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}

08003e12 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003e12:	b580      	push	{r7, lr}
 8003e14:	b086      	sub	sp, #24
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	617b      	str	r3, [r7, #20]
 8003e1e:	2300      	movs	r3, #0
 8003e20:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	f003 0302 	and.w	r3, r3, #2
 8003e38:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	f003 0320 	and.w	r3, r3, #32
 8003e40:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d049      	beq.n	8003edc <HAL_ADC_IRQHandler+0xca>
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d046      	beq.n	8003edc <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e52:	f003 0310 	and.w	r3, r3, #16
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d105      	bne.n	8003e66 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e5e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d12b      	bne.n	8003ecc <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d127      	bne.n	8003ecc <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e82:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d006      	beq.n	8003e98 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d119      	bne.n	8003ecc <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	685a      	ldr	r2, [r3, #4]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f022 0220 	bic.w	r2, r2, #32
 8003ea6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eb8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d105      	bne.n	8003ecc <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ec4:	f043 0201 	orr.w	r2, r3, #1
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f7fd fa33 	bl	8001338 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f06f 0212 	mvn.w	r2, #18
 8003eda:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f003 0304 	and.w	r3, r3, #4
 8003ee2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003eea:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d057      	beq.n	8003fa2 <HAL_ADC_IRQHandler+0x190>
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d054      	beq.n	8003fa2 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003efc:	f003 0310 	and.w	r3, r3, #16
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d105      	bne.n	8003f10 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f08:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d139      	bne.n	8003f92 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f24:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d006      	beq.n	8003f3a <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d12b      	bne.n	8003f92 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d124      	bne.n	8003f92 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d11d      	bne.n	8003f92 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d119      	bne.n	8003f92 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	685a      	ldr	r2, [r3, #4]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003f6c:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f72:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d105      	bne.n	8003f92 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f8a:	f043 0201 	orr.w	r2, r3, #1
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f000 fc60 	bl	8004858 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f06f 020c 	mvn.w	r2, #12
 8003fa0:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f003 0301 	and.w	r3, r3, #1
 8003fa8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fb0:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d017      	beq.n	8003fe8 <HAL_ADC_IRQHandler+0x1d6>
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d014      	beq.n	8003fe8 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0301 	and.w	r3, r3, #1
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d10d      	bne.n	8003fe8 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f000 f983 	bl	80042e4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f06f 0201 	mvn.w	r2, #1
 8003fe6:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f003 0320 	and.w	r3, r3, #32
 8003fee:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003ff6:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d015      	beq.n	800402a <HAL_ADC_IRQHandler+0x218>
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d012      	beq.n	800402a <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004008:	f043 0202 	orr.w	r2, r3, #2
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f06f 0220 	mvn.w	r2, #32
 8004018:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f7fd f99c 	bl	8001358 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f06f 0220 	mvn.w	r2, #32
 8004028:	601a      	str	r2, [r3, #0]
  }
}
 800402a:	bf00      	nop
 800402c:	3718      	adds	r7, #24
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
	...

08004034 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b088      	sub	sp, #32
 8004038:	af00      	add	r7, sp, #0
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004040:	2300      	movs	r3, #0
 8004042:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004044:	2300      	movs	r3, #0
 8004046:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800404e:	2b01      	cmp	r3, #1
 8004050:	d101      	bne.n	8004056 <HAL_ADC_Start_DMA+0x22>
 8004052:	2302      	movs	r3, #2
 8004054:	e0d0      	b.n	80041f8 <HAL_ADC_Start_DMA+0x1c4>
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2201      	movs	r2, #1
 800405a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	f003 0301 	and.w	r3, r3, #1
 8004068:	2b01      	cmp	r3, #1
 800406a:	d018      	beq.n	800409e <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	689a      	ldr	r2, [r3, #8]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f042 0201 	orr.w	r2, r2, #1
 800407a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800407c:	4b60      	ldr	r3, [pc, #384]	@ (8004200 <HAL_ADC_Start_DMA+0x1cc>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a60      	ldr	r2, [pc, #384]	@ (8004204 <HAL_ADC_Start_DMA+0x1d0>)
 8004082:	fba2 2303 	umull	r2, r3, r2, r3
 8004086:	0c9a      	lsrs	r2, r3, #18
 8004088:	4613      	mov	r3, r2
 800408a:	005b      	lsls	r3, r3, #1
 800408c:	4413      	add	r3, r2
 800408e:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8004090:	e002      	b.n	8004098 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	3b01      	subs	r3, #1
 8004096:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d1f9      	bne.n	8004092 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040ac:	d107      	bne.n	80040be <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	689a      	ldr	r2, [r3, #8]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80040bc:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	f003 0301 	and.w	r3, r3, #1
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	f040 8088 	bne.w	80041de <HAL_ADC_Start_DMA+0x1aa>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040d2:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80040d6:	f023 0301 	bic.w	r3, r3, #1
 80040da:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d007      	beq.n	8004100 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040f4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80040f8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004104:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004108:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800410c:	d106      	bne.n	800411c <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004112:	f023 0206 	bic.w	r2, r3, #6
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	645a      	str	r2, [r3, #68]	@ 0x44
 800411a:	e002      	b.n	8004122 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2200      	movs	r2, #0
 8004120:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2200      	movs	r2, #0
 8004126:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800412a:	4b37      	ldr	r3, [pc, #220]	@ (8004208 <HAL_ADC_Start_DMA+0x1d4>)
 800412c:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004132:	4a36      	ldr	r2, [pc, #216]	@ (800420c <HAL_ADC_Start_DMA+0x1d8>)
 8004134:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800413a:	4a35      	ldr	r2, [pc, #212]	@ (8004210 <HAL_ADC_Start_DMA+0x1dc>)
 800413c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004142:	4a34      	ldr	r2, [pc, #208]	@ (8004214 <HAL_ADC_Start_DMA+0x1e0>)
 8004144:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800414e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	685a      	ldr	r2, [r3, #4]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800415e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	689a      	ldr	r2, [r3, #8]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800416e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	334c      	adds	r3, #76	@ 0x4c
 800417a:	4619      	mov	r1, r3
 800417c:	68ba      	ldr	r2, [r7, #8]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f000 fd34 	bl	8004bec <HAL_DMA_Start_IT>
 8004184:	4603      	mov	r3, r0
 8004186:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004188:	69bb      	ldr	r3, [r7, #24]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	f003 031f 	and.w	r3, r3, #31
 8004190:	2b00      	cmp	r3, #0
 8004192:	d10f      	bne.n	80041b4 <HAL_ADC_Start_DMA+0x180>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d129      	bne.n	80041f6 <HAL_ADC_Start_DMA+0x1c2>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	689a      	ldr	r2, [r3, #8]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80041b0:	609a      	str	r2, [r3, #8]
 80041b2:	e020      	b.n	80041f6 <HAL_ADC_Start_DMA+0x1c2>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a17      	ldr	r2, [pc, #92]	@ (8004218 <HAL_ADC_Start_DMA+0x1e4>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d11b      	bne.n	80041f6 <HAL_ADC_Start_DMA+0x1c2>
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d114      	bne.n	80041f6 <HAL_ADC_Start_DMA+0x1c2>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	689a      	ldr	r2, [r3, #8]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80041da:	609a      	str	r2, [r3, #8]
 80041dc:	e00b      	b.n	80041f6 <HAL_ADC_Start_DMA+0x1c2>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041e2:	f043 0210 	orr.w	r2, r3, #16
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041ee:	f043 0201 	orr.w	r2, r3, #1
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 80041f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3720      	adds	r7, #32
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	20000000 	.word	0x20000000
 8004204:	431bde83 	.word	0x431bde83
 8004208:	40012300 	.word	0x40012300
 800420c:	08004755 	.word	0x08004755
 8004210:	0800480f 	.word	0x0800480f
 8004214:	0800482b 	.word	0x0800482b
 8004218:	40012000 	.word	0x40012000

0800421c <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004224:	2300      	movs	r3, #0
 8004226:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800422e:	2b01      	cmp	r3, #1
 8004230:	d101      	bne.n	8004236 <HAL_ADC_Stop_DMA+0x1a>
 8004232:	2302      	movs	r3, #2
 8004234:	e048      	b.n	80042c8 <HAL_ADC_Stop_DMA+0xac>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2201      	movs	r2, #1
 800423a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	689a      	ldr	r2, [r3, #8]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f022 0201 	bic.w	r2, r2, #1
 800424c:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	f003 0301 	and.w	r3, r3, #1
 8004258:	2b00      	cmp	r3, #0
 800425a:	d130      	bne.n	80042be <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	689a      	ldr	r2, [r3, #8]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800426a:	609a      	str	r2, [r3, #8]

    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004270:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004274:	b2db      	uxtb	r3, r3
 8004276:	2b02      	cmp	r3, #2
 8004278:	d10f      	bne.n	800429a <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800427e:	4618      	mov	r0, r3
 8004280:	f000 fd0c 	bl	8004c9c <HAL_DMA_Abort>
 8004284:	4603      	mov	r3, r0
 8004286:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8004288:	7bfb      	ldrb	r3, [r7, #15]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d005      	beq.n	800429a <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004292:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	685a      	ldr	r2, [r3, #4]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 80042a8:	605a      	str	r2, [r3, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ae:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80042b2:	f023 0301 	bic.w	r3, r3, #1
 80042b6:	f043 0201 	orr.w	r2, r3, #1
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80042c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3710      	adds	r7, #16
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80042d8:	bf00      	nop
 80042da:	370c      	adds	r7, #12
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr

080042e4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80042ec:	bf00      	nop
 80042ee:	370c      	adds	r7, #12
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b085      	sub	sp, #20
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004302:	2300      	movs	r3, #0
 8004304:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800430c:	2b01      	cmp	r3, #1
 800430e:	d101      	bne.n	8004314 <HAL_ADC_ConfigChannel+0x1c>
 8004310:	2302      	movs	r3, #2
 8004312:	e113      	b.n	800453c <HAL_ADC_ConfigChannel+0x244>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	2b09      	cmp	r3, #9
 8004322:	d925      	bls.n	8004370 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68d9      	ldr	r1, [r3, #12]
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	b29b      	uxth	r3, r3
 8004330:	461a      	mov	r2, r3
 8004332:	4613      	mov	r3, r2
 8004334:	005b      	lsls	r3, r3, #1
 8004336:	4413      	add	r3, r2
 8004338:	3b1e      	subs	r3, #30
 800433a:	2207      	movs	r2, #7
 800433c:	fa02 f303 	lsl.w	r3, r2, r3
 8004340:	43da      	mvns	r2, r3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	400a      	ands	r2, r1
 8004348:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	68d9      	ldr	r1, [r3, #12]
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	689a      	ldr	r2, [r3, #8]
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	b29b      	uxth	r3, r3
 800435a:	4618      	mov	r0, r3
 800435c:	4603      	mov	r3, r0
 800435e:	005b      	lsls	r3, r3, #1
 8004360:	4403      	add	r3, r0
 8004362:	3b1e      	subs	r3, #30
 8004364:	409a      	lsls	r2, r3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	430a      	orrs	r2, r1
 800436c:	60da      	str	r2, [r3, #12]
 800436e:	e022      	b.n	80043b6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	6919      	ldr	r1, [r3, #16]
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	b29b      	uxth	r3, r3
 800437c:	461a      	mov	r2, r3
 800437e:	4613      	mov	r3, r2
 8004380:	005b      	lsls	r3, r3, #1
 8004382:	4413      	add	r3, r2
 8004384:	2207      	movs	r2, #7
 8004386:	fa02 f303 	lsl.w	r3, r2, r3
 800438a:	43da      	mvns	r2, r3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	400a      	ands	r2, r1
 8004392:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	6919      	ldr	r1, [r3, #16]
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	689a      	ldr	r2, [r3, #8]
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	4618      	mov	r0, r3
 80043a6:	4603      	mov	r3, r0
 80043a8:	005b      	lsls	r3, r3, #1
 80043aa:	4403      	add	r3, r0
 80043ac:	409a      	lsls	r2, r3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	430a      	orrs	r2, r1
 80043b4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	2b06      	cmp	r3, #6
 80043bc:	d824      	bhi.n	8004408 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	685a      	ldr	r2, [r3, #4]
 80043c8:	4613      	mov	r3, r2
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	4413      	add	r3, r2
 80043ce:	3b05      	subs	r3, #5
 80043d0:	221f      	movs	r2, #31
 80043d2:	fa02 f303 	lsl.w	r3, r2, r3
 80043d6:	43da      	mvns	r2, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	400a      	ands	r2, r1
 80043de:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	4618      	mov	r0, r3
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	685a      	ldr	r2, [r3, #4]
 80043f2:	4613      	mov	r3, r2
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	4413      	add	r3, r2
 80043f8:	3b05      	subs	r3, #5
 80043fa:	fa00 f203 	lsl.w	r2, r0, r3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	430a      	orrs	r2, r1
 8004404:	635a      	str	r2, [r3, #52]	@ 0x34
 8004406:	e04c      	b.n	80044a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	2b0c      	cmp	r3, #12
 800440e:	d824      	bhi.n	800445a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	685a      	ldr	r2, [r3, #4]
 800441a:	4613      	mov	r3, r2
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	4413      	add	r3, r2
 8004420:	3b23      	subs	r3, #35	@ 0x23
 8004422:	221f      	movs	r2, #31
 8004424:	fa02 f303 	lsl.w	r3, r2, r3
 8004428:	43da      	mvns	r2, r3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	400a      	ands	r2, r1
 8004430:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	b29b      	uxth	r3, r3
 800443e:	4618      	mov	r0, r3
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	685a      	ldr	r2, [r3, #4]
 8004444:	4613      	mov	r3, r2
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	4413      	add	r3, r2
 800444a:	3b23      	subs	r3, #35	@ 0x23
 800444c:	fa00 f203 	lsl.w	r2, r0, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	430a      	orrs	r2, r1
 8004456:	631a      	str	r2, [r3, #48]	@ 0x30
 8004458:	e023      	b.n	80044a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	685a      	ldr	r2, [r3, #4]
 8004464:	4613      	mov	r3, r2
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	4413      	add	r3, r2
 800446a:	3b41      	subs	r3, #65	@ 0x41
 800446c:	221f      	movs	r2, #31
 800446e:	fa02 f303 	lsl.w	r3, r2, r3
 8004472:	43da      	mvns	r2, r3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	400a      	ands	r2, r1
 800447a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	b29b      	uxth	r3, r3
 8004488:	4618      	mov	r0, r3
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	685a      	ldr	r2, [r3, #4]
 800448e:	4613      	mov	r3, r2
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	4413      	add	r3, r2
 8004494:	3b41      	subs	r3, #65	@ 0x41
 8004496:	fa00 f203 	lsl.w	r2, r0, r3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	430a      	orrs	r2, r1
 80044a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80044a2:	4b29      	ldr	r3, [pc, #164]	@ (8004548 <HAL_ADC_ConfigChannel+0x250>)
 80044a4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a28      	ldr	r2, [pc, #160]	@ (800454c <HAL_ADC_ConfigChannel+0x254>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d10f      	bne.n	80044d0 <HAL_ADC_ConfigChannel+0x1d8>
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	2b12      	cmp	r3, #18
 80044b6:	d10b      	bne.n	80044d0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a1d      	ldr	r2, [pc, #116]	@ (800454c <HAL_ADC_ConfigChannel+0x254>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d12b      	bne.n	8004532 <HAL_ADC_ConfigChannel+0x23a>
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a1c      	ldr	r2, [pc, #112]	@ (8004550 <HAL_ADC_ConfigChannel+0x258>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d003      	beq.n	80044ec <HAL_ADC_ConfigChannel+0x1f4>
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2b11      	cmp	r3, #17
 80044ea:	d122      	bne.n	8004532 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a11      	ldr	r2, [pc, #68]	@ (8004550 <HAL_ADC_ConfigChannel+0x258>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d111      	bne.n	8004532 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800450e:	4b11      	ldr	r3, [pc, #68]	@ (8004554 <HAL_ADC_ConfigChannel+0x25c>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a11      	ldr	r2, [pc, #68]	@ (8004558 <HAL_ADC_ConfigChannel+0x260>)
 8004514:	fba2 2303 	umull	r2, r3, r2, r3
 8004518:	0c9a      	lsrs	r2, r3, #18
 800451a:	4613      	mov	r3, r2
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	4413      	add	r3, r2
 8004520:	005b      	lsls	r3, r3, #1
 8004522:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004524:	e002      	b.n	800452c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	3b01      	subs	r3, #1
 800452a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1f9      	bne.n	8004526 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800453a:	2300      	movs	r3, #0
}
 800453c:	4618      	mov	r0, r3
 800453e:	3714      	adds	r7, #20
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr
 8004548:	40012300 	.word	0x40012300
 800454c:	40012000 	.word	0x40012000
 8004550:	10000012 	.word	0x10000012
 8004554:	20000000 	.word	0x20000000
 8004558:	431bde83 	.word	0x431bde83

0800455c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800455c:	b480      	push	{r7}
 800455e:	b085      	sub	sp, #20
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004564:	4b79      	ldr	r3, [pc, #484]	@ (800474c <ADC_Init+0x1f0>)
 8004566:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	685a      	ldr	r2, [r3, #4]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	431a      	orrs	r2, r3
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	685a      	ldr	r2, [r3, #4]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004590:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	6859      	ldr	r1, [r3, #4]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	691b      	ldr	r3, [r3, #16]
 800459c:	021a      	lsls	r2, r3, #8
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	430a      	orrs	r2, r1
 80045a4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	685a      	ldr	r2, [r3, #4]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80045b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	6859      	ldr	r1, [r3, #4]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	689a      	ldr	r2, [r3, #8]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	430a      	orrs	r2, r1
 80045c6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	689a      	ldr	r2, [r3, #8]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80045d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	6899      	ldr	r1, [r3, #8]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	68da      	ldr	r2, [r3, #12]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	430a      	orrs	r2, r1
 80045e8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045ee:	4a58      	ldr	r2, [pc, #352]	@ (8004750 <ADC_Init+0x1f4>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d022      	beq.n	800463a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	689a      	ldr	r2, [r3, #8]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004602:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	6899      	ldr	r1, [r3, #8]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	430a      	orrs	r2, r1
 8004614:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	689a      	ldr	r2, [r3, #8]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004624:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	6899      	ldr	r1, [r3, #8]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	430a      	orrs	r2, r1
 8004636:	609a      	str	r2, [r3, #8]
 8004638:	e00f      	b.n	800465a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	689a      	ldr	r2, [r3, #8]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004648:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	689a      	ldr	r2, [r3, #8]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004658:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	689a      	ldr	r2, [r3, #8]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f022 0202 	bic.w	r2, r2, #2
 8004668:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	6899      	ldr	r1, [r3, #8]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	7e1b      	ldrb	r3, [r3, #24]
 8004674:	005a      	lsls	r2, r3, #1
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	430a      	orrs	r2, r1
 800467c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d01b      	beq.n	80046c0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	685a      	ldr	r2, [r3, #4]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004696:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	685a      	ldr	r2, [r3, #4]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80046a6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	6859      	ldr	r1, [r3, #4]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b2:	3b01      	subs	r3, #1
 80046b4:	035a      	lsls	r2, r3, #13
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	430a      	orrs	r2, r1
 80046bc:	605a      	str	r2, [r3, #4]
 80046be:	e007      	b.n	80046d0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	685a      	ldr	r2, [r3, #4]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80046ce:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80046de:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	69db      	ldr	r3, [r3, #28]
 80046ea:	3b01      	subs	r3, #1
 80046ec:	051a      	lsls	r2, r3, #20
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	430a      	orrs	r2, r1
 80046f4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	689a      	ldr	r2, [r3, #8]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004704:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	6899      	ldr	r1, [r3, #8]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004712:	025a      	lsls	r2, r3, #9
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	430a      	orrs	r2, r1
 800471a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	689a      	ldr	r2, [r3, #8]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800472a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	6899      	ldr	r1, [r3, #8]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	695b      	ldr	r3, [r3, #20]
 8004736:	029a      	lsls	r2, r3, #10
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	430a      	orrs	r2, r1
 800473e:	609a      	str	r2, [r3, #8]
}
 8004740:	bf00      	nop
 8004742:	3714      	adds	r7, #20
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr
 800474c:	40012300 	.word	0x40012300
 8004750:	0f000001 	.word	0x0f000001

08004754 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004760:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004766:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800476a:	2b00      	cmp	r3, #0
 800476c:	d13c      	bne.n	80047e8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004772:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004784:	2b00      	cmp	r3, #0
 8004786:	d12b      	bne.n	80047e0 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800478c:	2b00      	cmp	r3, #0
 800478e:	d127      	bne.n	80047e0 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004796:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800479a:	2b00      	cmp	r3, #0
 800479c:	d006      	beq.n	80047ac <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d119      	bne.n	80047e0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	685a      	ldr	r2, [r3, #4]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f022 0220 	bic.w	r2, r2, #32
 80047ba:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d105      	bne.n	80047e0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047d8:	f043 0201 	orr.w	r2, r3, #1
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80047e0:	68f8      	ldr	r0, [r7, #12]
 80047e2:	f7fc fda9 	bl	8001338 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80047e6:	e00e      	b.n	8004806 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ec:	f003 0310 	and.w	r3, r3, #16
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d003      	beq.n	80047fc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80047f4:	68f8      	ldr	r0, [r7, #12]
 80047f6:	f7fc fdaf 	bl	8001358 <HAL_ADC_ErrorCallback>
}
 80047fa:	e004      	b.n	8004806 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	4798      	blx	r3
}
 8004806:	bf00      	nop
 8004808:	3710      	adds	r7, #16
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}

0800480e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800480e:	b580      	push	{r7, lr}
 8004810:	b084      	sub	sp, #16
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800481a:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800481c:	68f8      	ldr	r0, [r7, #12]
 800481e:	f7ff fd57 	bl	80042d0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004822:	bf00      	nop
 8004824:	3710      	adds	r7, #16
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}

0800482a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800482a:	b580      	push	{r7, lr}
 800482c:	b084      	sub	sp, #16
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004836:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2240      	movs	r2, #64	@ 0x40
 800483c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004842:	f043 0204 	orr.w	r2, r3, #4
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800484a:	68f8      	ldr	r0, [r7, #12]
 800484c:	f7fc fd84 	bl	8001358 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004850:	bf00      	nop
 8004852:	3710      	adds	r7, #16
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}

08004858 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004858:	b480      	push	{r7}
 800485a:	b083      	sub	sp, #12
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8004860:	bf00      	nop
 8004862:	370c      	adds	r7, #12
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr

0800486c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800486c:	b480      	push	{r7}
 800486e:	b085      	sub	sp, #20
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f003 0307 	and.w	r3, r3, #7
 800487a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800487c:	4b0c      	ldr	r3, [pc, #48]	@ (80048b0 <__NVIC_SetPriorityGrouping+0x44>)
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004882:	68ba      	ldr	r2, [r7, #8]
 8004884:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004888:	4013      	ands	r3, r2
 800488a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004894:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004898:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800489c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800489e:	4a04      	ldr	r2, [pc, #16]	@ (80048b0 <__NVIC_SetPriorityGrouping+0x44>)
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	60d3      	str	r3, [r2, #12]
}
 80048a4:	bf00      	nop
 80048a6:	3714      	adds	r7, #20
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr
 80048b0:	e000ed00 	.word	0xe000ed00

080048b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80048b4:	b480      	push	{r7}
 80048b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80048b8:	4b04      	ldr	r3, [pc, #16]	@ (80048cc <__NVIC_GetPriorityGrouping+0x18>)
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	0a1b      	lsrs	r3, r3, #8
 80048be:	f003 0307 	and.w	r3, r3, #7
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr
 80048cc:	e000ed00 	.word	0xe000ed00

080048d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	4603      	mov	r3, r0
 80048d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	db0b      	blt.n	80048fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80048e2:	79fb      	ldrb	r3, [r7, #7]
 80048e4:	f003 021f 	and.w	r2, r3, #31
 80048e8:	4907      	ldr	r1, [pc, #28]	@ (8004908 <__NVIC_EnableIRQ+0x38>)
 80048ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048ee:	095b      	lsrs	r3, r3, #5
 80048f0:	2001      	movs	r0, #1
 80048f2:	fa00 f202 	lsl.w	r2, r0, r2
 80048f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80048fa:	bf00      	nop
 80048fc:	370c      	adds	r7, #12
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr
 8004906:	bf00      	nop
 8004908:	e000e100 	.word	0xe000e100

0800490c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
 8004912:	4603      	mov	r3, r0
 8004914:	6039      	str	r1, [r7, #0]
 8004916:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800491c:	2b00      	cmp	r3, #0
 800491e:	db0a      	blt.n	8004936 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	b2da      	uxtb	r2, r3
 8004924:	490c      	ldr	r1, [pc, #48]	@ (8004958 <__NVIC_SetPriority+0x4c>)
 8004926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800492a:	0112      	lsls	r2, r2, #4
 800492c:	b2d2      	uxtb	r2, r2
 800492e:	440b      	add	r3, r1
 8004930:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004934:	e00a      	b.n	800494c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	b2da      	uxtb	r2, r3
 800493a:	4908      	ldr	r1, [pc, #32]	@ (800495c <__NVIC_SetPriority+0x50>)
 800493c:	79fb      	ldrb	r3, [r7, #7]
 800493e:	f003 030f 	and.w	r3, r3, #15
 8004942:	3b04      	subs	r3, #4
 8004944:	0112      	lsls	r2, r2, #4
 8004946:	b2d2      	uxtb	r2, r2
 8004948:	440b      	add	r3, r1
 800494a:	761a      	strb	r2, [r3, #24]
}
 800494c:	bf00      	nop
 800494e:	370c      	adds	r7, #12
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr
 8004958:	e000e100 	.word	0xe000e100
 800495c:	e000ed00 	.word	0xe000ed00

08004960 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004960:	b480      	push	{r7}
 8004962:	b089      	sub	sp, #36	@ 0x24
 8004964:	af00      	add	r7, sp, #0
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f003 0307 	and.w	r3, r3, #7
 8004972:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	f1c3 0307 	rsb	r3, r3, #7
 800497a:	2b04      	cmp	r3, #4
 800497c:	bf28      	it	cs
 800497e:	2304      	movcs	r3, #4
 8004980:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	3304      	adds	r3, #4
 8004986:	2b06      	cmp	r3, #6
 8004988:	d902      	bls.n	8004990 <NVIC_EncodePriority+0x30>
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	3b03      	subs	r3, #3
 800498e:	e000      	b.n	8004992 <NVIC_EncodePriority+0x32>
 8004990:	2300      	movs	r3, #0
 8004992:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004994:	f04f 32ff 	mov.w	r2, #4294967295
 8004998:	69bb      	ldr	r3, [r7, #24]
 800499a:	fa02 f303 	lsl.w	r3, r2, r3
 800499e:	43da      	mvns	r2, r3
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	401a      	ands	r2, r3
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80049a8:	f04f 31ff 	mov.w	r1, #4294967295
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	fa01 f303 	lsl.w	r3, r1, r3
 80049b2:	43d9      	mvns	r1, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049b8:	4313      	orrs	r3, r2
         );
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3724      	adds	r7, #36	@ 0x24
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr
	...

080049c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	3b01      	subs	r3, #1
 80049d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80049d8:	d301      	bcc.n	80049de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80049da:	2301      	movs	r3, #1
 80049dc:	e00f      	b.n	80049fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80049de:	4a0a      	ldr	r2, [pc, #40]	@ (8004a08 <SysTick_Config+0x40>)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	3b01      	subs	r3, #1
 80049e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80049e6:	210f      	movs	r1, #15
 80049e8:	f04f 30ff 	mov.w	r0, #4294967295
 80049ec:	f7ff ff8e 	bl	800490c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80049f0:	4b05      	ldr	r3, [pc, #20]	@ (8004a08 <SysTick_Config+0x40>)
 80049f2:	2200      	movs	r2, #0
 80049f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80049f6:	4b04      	ldr	r3, [pc, #16]	@ (8004a08 <SysTick_Config+0x40>)
 80049f8:	2207      	movs	r2, #7
 80049fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80049fc:	2300      	movs	r3, #0
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3708      	adds	r7, #8
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	e000e010 	.word	0xe000e010

08004a0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b082      	sub	sp, #8
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f7ff ff29 	bl	800486c <__NVIC_SetPriorityGrouping>
}
 8004a1a:	bf00      	nop
 8004a1c:	3708      	adds	r7, #8
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}

08004a22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004a22:	b580      	push	{r7, lr}
 8004a24:	b086      	sub	sp, #24
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	4603      	mov	r3, r0
 8004a2a:	60b9      	str	r1, [r7, #8]
 8004a2c:	607a      	str	r2, [r7, #4]
 8004a2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004a30:	2300      	movs	r3, #0
 8004a32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004a34:	f7ff ff3e 	bl	80048b4 <__NVIC_GetPriorityGrouping>
 8004a38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	68b9      	ldr	r1, [r7, #8]
 8004a3e:	6978      	ldr	r0, [r7, #20]
 8004a40:	f7ff ff8e 	bl	8004960 <NVIC_EncodePriority>
 8004a44:	4602      	mov	r2, r0
 8004a46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a4a:	4611      	mov	r1, r2
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f7ff ff5d 	bl	800490c <__NVIC_SetPriority>
}
 8004a52:	bf00      	nop
 8004a54:	3718      	adds	r7, #24
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}

08004a5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a5a:	b580      	push	{r7, lr}
 8004a5c:	b082      	sub	sp, #8
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	4603      	mov	r3, r0
 8004a62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f7ff ff31 	bl	80048d0 <__NVIC_EnableIRQ>
}
 8004a6e:	bf00      	nop
 8004a70:	3708      	adds	r7, #8
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}

08004a76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004a76:	b580      	push	{r7, lr}
 8004a78:	b082      	sub	sp, #8
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f7ff ffa2 	bl	80049c8 <SysTick_Config>
 8004a84:	4603      	mov	r3, r0
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3708      	adds	r7, #8
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
	...

08004a90 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b086      	sub	sp, #24
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004a9c:	f7ff f946 	bl	8003d2c <HAL_GetTick>
 8004aa0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d101      	bne.n	8004aac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e099      	b.n	8004be0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2202      	movs	r2, #2
 8004ab0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f022 0201 	bic.w	r2, r2, #1
 8004aca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004acc:	e00f      	b.n	8004aee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004ace:	f7ff f92d 	bl	8003d2c <HAL_GetTick>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	2b05      	cmp	r3, #5
 8004ada:	d908      	bls.n	8004aee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2220      	movs	r2, #32
 8004ae0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2203      	movs	r2, #3
 8004ae6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e078      	b.n	8004be0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 0301 	and.w	r3, r3, #1
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d1e8      	bne.n	8004ace <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004b04:	697a      	ldr	r2, [r7, #20]
 8004b06:	4b38      	ldr	r3, [pc, #224]	@ (8004be8 <HAL_DMA_Init+0x158>)
 8004b08:	4013      	ands	r3, r2
 8004b0a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	685a      	ldr	r2, [r3, #4]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	691b      	ldr	r3, [r3, #16]
 8004b20:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b26:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	699b      	ldr	r3, [r3, #24]
 8004b2c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b32:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6a1b      	ldr	r3, [r3, #32]
 8004b38:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b3a:	697a      	ldr	r2, [r7, #20]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b44:	2b04      	cmp	r3, #4
 8004b46:	d107      	bne.n	8004b58 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b50:	4313      	orrs	r3, r2
 8004b52:	697a      	ldr	r2, [r7, #20]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	697a      	ldr	r2, [r7, #20]
 8004b5e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	695b      	ldr	r3, [r3, #20]
 8004b66:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	f023 0307 	bic.w	r3, r3, #7
 8004b6e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b74:	697a      	ldr	r2, [r7, #20]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b7e:	2b04      	cmp	r3, #4
 8004b80:	d117      	bne.n	8004bb2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b86:	697a      	ldr	r2, [r7, #20]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d00e      	beq.n	8004bb2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f000 fadf 	bl	8005158 <DMA_CheckFifoParam>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d008      	beq.n	8004bb2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2240      	movs	r2, #64	@ 0x40
 8004ba4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2201      	movs	r2, #1
 8004baa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e016      	b.n	8004be0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	697a      	ldr	r2, [r7, #20]
 8004bb8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 fa96 	bl	80050ec <DMA_CalcBaseAndBitshift>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bc8:	223f      	movs	r2, #63	@ 0x3f
 8004bca:	409a      	lsls	r2, r3
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2201      	movs	r2, #1
 8004bda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004bde:	2300      	movs	r3, #0
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3718      	adds	r7, #24
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	f010803f 	.word	0xf010803f

08004bec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b086      	sub	sp, #24
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	60b9      	str	r1, [r7, #8]
 8004bf6:	607a      	str	r2, [r7, #4]
 8004bf8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c02:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d101      	bne.n	8004c12 <HAL_DMA_Start_IT+0x26>
 8004c0e:	2302      	movs	r3, #2
 8004c10:	e040      	b.n	8004c94 <HAL_DMA_Start_IT+0xa8>
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2201      	movs	r2, #1
 8004c16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d12f      	bne.n	8004c86 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2202      	movs	r2, #2
 8004c2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2200      	movs	r2, #0
 8004c32:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	68b9      	ldr	r1, [r7, #8]
 8004c3a:	68f8      	ldr	r0, [r7, #12]
 8004c3c:	f000 fa28 	bl	8005090 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c44:	223f      	movs	r2, #63	@ 0x3f
 8004c46:	409a      	lsls	r2, r3
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f042 0216 	orr.w	r2, r2, #22
 8004c5a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d007      	beq.n	8004c74 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f042 0208 	orr.w	r2, r2, #8
 8004c72:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f042 0201 	orr.w	r2, r2, #1
 8004c82:	601a      	str	r2, [r3, #0]
 8004c84:	e005      	b.n	8004c92 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004c8e:	2302      	movs	r3, #2
 8004c90:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004c92:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3718      	adds	r7, #24
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ca8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004caa:	f7ff f83f 	bl	8003d2c <HAL_GetTick>
 8004cae:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	2b02      	cmp	r3, #2
 8004cba:	d008      	beq.n	8004cce <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2280      	movs	r2, #128	@ 0x80
 8004cc0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e052      	b.n	8004d74 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f022 0216 	bic.w	r2, r2, #22
 8004cdc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	695a      	ldr	r2, [r3, #20]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004cec:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d103      	bne.n	8004cfe <HAL_DMA_Abort+0x62>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d007      	beq.n	8004d0e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f022 0208 	bic.w	r2, r2, #8
 8004d0c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f022 0201 	bic.w	r2, r2, #1
 8004d1c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d1e:	e013      	b.n	8004d48 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004d20:	f7ff f804 	bl	8003d2c <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	2b05      	cmp	r3, #5
 8004d2c:	d90c      	bls.n	8004d48 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2220      	movs	r2, #32
 8004d32:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2203      	movs	r2, #3
 8004d38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004d44:	2303      	movs	r3, #3
 8004d46:	e015      	b.n	8004d74 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 0301 	and.w	r3, r3, #1
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d1e4      	bne.n	8004d20 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d5a:	223f      	movs	r2, #63	@ 0x3f
 8004d5c:	409a      	lsls	r2, r3
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2201      	movs	r2, #1
 8004d66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004d72:	2300      	movs	r3, #0
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3710      	adds	r7, #16
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b086      	sub	sp, #24
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004d84:	2300      	movs	r3, #0
 8004d86:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004d88:	4b8e      	ldr	r3, [pc, #568]	@ (8004fc4 <HAL_DMA_IRQHandler+0x248>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a8e      	ldr	r2, [pc, #568]	@ (8004fc8 <HAL_DMA_IRQHandler+0x24c>)
 8004d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d92:	0a9b      	lsrs	r3, r3, #10
 8004d94:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d9a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004da6:	2208      	movs	r2, #8
 8004da8:	409a      	lsls	r2, r3
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	4013      	ands	r3, r2
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d01a      	beq.n	8004de8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 0304 	and.w	r3, r3, #4
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d013      	beq.n	8004de8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f022 0204 	bic.w	r2, r2, #4
 8004dce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dd4:	2208      	movs	r2, #8
 8004dd6:	409a      	lsls	r2, r3
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004de0:	f043 0201 	orr.w	r2, r3, #1
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dec:	2201      	movs	r2, #1
 8004dee:	409a      	lsls	r2, r3
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	4013      	ands	r3, r2
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d012      	beq.n	8004e1e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	695b      	ldr	r3, [r3, #20]
 8004dfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d00b      	beq.n	8004e1e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	409a      	lsls	r2, r3
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e16:	f043 0202 	orr.w	r2, r3, #2
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e22:	2204      	movs	r2, #4
 8004e24:	409a      	lsls	r2, r3
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	4013      	ands	r3, r2
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d012      	beq.n	8004e54 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 0302 	and.w	r3, r3, #2
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d00b      	beq.n	8004e54 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e40:	2204      	movs	r2, #4
 8004e42:	409a      	lsls	r2, r3
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e4c:	f043 0204 	orr.w	r2, r3, #4
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e58:	2210      	movs	r2, #16
 8004e5a:	409a      	lsls	r2, r3
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	4013      	ands	r3, r2
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d043      	beq.n	8004eec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0308 	and.w	r3, r3, #8
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d03c      	beq.n	8004eec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e76:	2210      	movs	r2, #16
 8004e78:	409a      	lsls	r2, r3
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d018      	beq.n	8004ebe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d108      	bne.n	8004eac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d024      	beq.n	8004eec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	4798      	blx	r3
 8004eaa:	e01f      	b.n	8004eec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d01b      	beq.n	8004eec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	4798      	blx	r3
 8004ebc:	e016      	b.n	8004eec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d107      	bne.n	8004edc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f022 0208 	bic.w	r2, r2, #8
 8004eda:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d003      	beq.n	8004eec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ef0:	2220      	movs	r2, #32
 8004ef2:	409a      	lsls	r2, r3
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	f000 808f 	beq.w	800501c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 0310 	and.w	r3, r3, #16
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	f000 8087 	beq.w	800501c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f12:	2220      	movs	r2, #32
 8004f14:	409a      	lsls	r2, r3
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	2b05      	cmp	r3, #5
 8004f24:	d136      	bne.n	8004f94 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f022 0216 	bic.w	r2, r2, #22
 8004f34:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	695a      	ldr	r2, [r3, #20]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004f44:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d103      	bne.n	8004f56 <HAL_DMA_IRQHandler+0x1da>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d007      	beq.n	8004f66 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f022 0208 	bic.w	r2, r2, #8
 8004f64:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f6a:	223f      	movs	r2, #63	@ 0x3f
 8004f6c:	409a      	lsls	r2, r3
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2201      	movs	r2, #1
 8004f76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d07e      	beq.n	8005088 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	4798      	blx	r3
        }
        return;
 8004f92:	e079      	b.n	8005088 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d01d      	beq.n	8004fde <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d10d      	bne.n	8004fcc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d031      	beq.n	800501c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	4798      	blx	r3
 8004fc0:	e02c      	b.n	800501c <HAL_DMA_IRQHandler+0x2a0>
 8004fc2:	bf00      	nop
 8004fc4:	20000000 	.word	0x20000000
 8004fc8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d023      	beq.n	800501c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	4798      	blx	r3
 8004fdc:	e01e      	b.n	800501c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d10f      	bne.n	800500c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f022 0210 	bic.w	r2, r2, #16
 8004ffa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005010:	2b00      	cmp	r3, #0
 8005012:	d003      	beq.n	800501c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005020:	2b00      	cmp	r3, #0
 8005022:	d032      	beq.n	800508a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005028:	f003 0301 	and.w	r3, r3, #1
 800502c:	2b00      	cmp	r3, #0
 800502e:	d022      	beq.n	8005076 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2205      	movs	r2, #5
 8005034:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f022 0201 	bic.w	r2, r2, #1
 8005046:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	3301      	adds	r3, #1
 800504c:	60bb      	str	r3, [r7, #8]
 800504e:	697a      	ldr	r2, [r7, #20]
 8005050:	429a      	cmp	r2, r3
 8005052:	d307      	bcc.n	8005064 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 0301 	and.w	r3, r3, #1
 800505e:	2b00      	cmp	r3, #0
 8005060:	d1f2      	bne.n	8005048 <HAL_DMA_IRQHandler+0x2cc>
 8005062:	e000      	b.n	8005066 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005064:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2201      	movs	r2, #1
 800506a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2200      	movs	r2, #0
 8005072:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800507a:	2b00      	cmp	r3, #0
 800507c:	d005      	beq.n	800508a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	4798      	blx	r3
 8005086:	e000      	b.n	800508a <HAL_DMA_IRQHandler+0x30e>
        return;
 8005088:	bf00      	nop
    }
  }
}
 800508a:	3718      	adds	r7, #24
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}

08005090 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005090:	b480      	push	{r7}
 8005092:	b085      	sub	sp, #20
 8005094:	af00      	add	r7, sp, #0
 8005096:	60f8      	str	r0, [r7, #12]
 8005098:	60b9      	str	r1, [r7, #8]
 800509a:	607a      	str	r2, [r7, #4]
 800509c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80050ac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	683a      	ldr	r2, [r7, #0]
 80050b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	2b40      	cmp	r3, #64	@ 0x40
 80050bc:	d108      	bne.n	80050d0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68ba      	ldr	r2, [r7, #8]
 80050cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80050ce:	e007      	b.n	80050e0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68ba      	ldr	r2, [r7, #8]
 80050d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	60da      	str	r2, [r3, #12]
}
 80050e0:	bf00      	nop
 80050e2:	3714      	adds	r7, #20
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr

080050ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b085      	sub	sp, #20
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	3b10      	subs	r3, #16
 80050fc:	4a14      	ldr	r2, [pc, #80]	@ (8005150 <DMA_CalcBaseAndBitshift+0x64>)
 80050fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005102:	091b      	lsrs	r3, r3, #4
 8005104:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005106:	4a13      	ldr	r2, [pc, #76]	@ (8005154 <DMA_CalcBaseAndBitshift+0x68>)
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	4413      	add	r3, r2
 800510c:	781b      	ldrb	r3, [r3, #0]
 800510e:	461a      	mov	r2, r3
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2b03      	cmp	r3, #3
 8005118:	d909      	bls.n	800512e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005122:	f023 0303 	bic.w	r3, r3, #3
 8005126:	1d1a      	adds	r2, r3, #4
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	659a      	str	r2, [r3, #88]	@ 0x58
 800512c:	e007      	b.n	800513e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005136:	f023 0303 	bic.w	r3, r3, #3
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005142:	4618      	mov	r0, r3
 8005144:	3714      	adds	r7, #20
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr
 800514e:	bf00      	nop
 8005150:	aaaaaaab 	.word	0xaaaaaaab
 8005154:	0800ab34 	.word	0x0800ab34

08005158 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005158:	b480      	push	{r7}
 800515a:	b085      	sub	sp, #20
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005160:	2300      	movs	r3, #0
 8005162:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005168:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	699b      	ldr	r3, [r3, #24]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d11f      	bne.n	80051b2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	2b03      	cmp	r3, #3
 8005176:	d856      	bhi.n	8005226 <DMA_CheckFifoParam+0xce>
 8005178:	a201      	add	r2, pc, #4	@ (adr r2, 8005180 <DMA_CheckFifoParam+0x28>)
 800517a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800517e:	bf00      	nop
 8005180:	08005191 	.word	0x08005191
 8005184:	080051a3 	.word	0x080051a3
 8005188:	08005191 	.word	0x08005191
 800518c:	08005227 	.word	0x08005227
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005194:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005198:	2b00      	cmp	r3, #0
 800519a:	d046      	beq.n	800522a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051a0:	e043      	b.n	800522a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051a6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80051aa:	d140      	bne.n	800522e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051b0:	e03d      	b.n	800522e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	699b      	ldr	r3, [r3, #24]
 80051b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051ba:	d121      	bne.n	8005200 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	2b03      	cmp	r3, #3
 80051c0:	d837      	bhi.n	8005232 <DMA_CheckFifoParam+0xda>
 80051c2:	a201      	add	r2, pc, #4	@ (adr r2, 80051c8 <DMA_CheckFifoParam+0x70>)
 80051c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051c8:	080051d9 	.word	0x080051d9
 80051cc:	080051df 	.word	0x080051df
 80051d0:	080051d9 	.word	0x080051d9
 80051d4:	080051f1 	.word	0x080051f1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	73fb      	strb	r3, [r7, #15]
      break;
 80051dc:	e030      	b.n	8005240 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051e2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d025      	beq.n	8005236 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051ee:	e022      	b.n	8005236 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051f4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80051f8:	d11f      	bne.n	800523a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80051fe:	e01c      	b.n	800523a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	2b02      	cmp	r3, #2
 8005204:	d903      	bls.n	800520e <DMA_CheckFifoParam+0xb6>
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	2b03      	cmp	r3, #3
 800520a:	d003      	beq.n	8005214 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800520c:	e018      	b.n	8005240 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	73fb      	strb	r3, [r7, #15]
      break;
 8005212:	e015      	b.n	8005240 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005218:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800521c:	2b00      	cmp	r3, #0
 800521e:	d00e      	beq.n	800523e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	73fb      	strb	r3, [r7, #15]
      break;
 8005224:	e00b      	b.n	800523e <DMA_CheckFifoParam+0xe6>
      break;
 8005226:	bf00      	nop
 8005228:	e00a      	b.n	8005240 <DMA_CheckFifoParam+0xe8>
      break;
 800522a:	bf00      	nop
 800522c:	e008      	b.n	8005240 <DMA_CheckFifoParam+0xe8>
      break;
 800522e:	bf00      	nop
 8005230:	e006      	b.n	8005240 <DMA_CheckFifoParam+0xe8>
      break;
 8005232:	bf00      	nop
 8005234:	e004      	b.n	8005240 <DMA_CheckFifoParam+0xe8>
      break;
 8005236:	bf00      	nop
 8005238:	e002      	b.n	8005240 <DMA_CheckFifoParam+0xe8>
      break;   
 800523a:	bf00      	nop
 800523c:	e000      	b.n	8005240 <DMA_CheckFifoParam+0xe8>
      break;
 800523e:	bf00      	nop
    }
  } 
  
  return status; 
 8005240:	7bfb      	ldrb	r3, [r7, #15]
}
 8005242:	4618      	mov	r0, r3
 8005244:	3714      	adds	r7, #20
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr
 800524e:	bf00      	nop

08005250 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005250:	b480      	push	{r7}
 8005252:	b089      	sub	sp, #36	@ 0x24
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800525a:	2300      	movs	r3, #0
 800525c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800525e:	2300      	movs	r3, #0
 8005260:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005262:	2300      	movs	r3, #0
 8005264:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005266:	2300      	movs	r3, #0
 8005268:	61fb      	str	r3, [r7, #28]
 800526a:	e159      	b.n	8005520 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800526c:	2201      	movs	r2, #1
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	fa02 f303 	lsl.w	r3, r2, r3
 8005274:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	697a      	ldr	r2, [r7, #20]
 800527c:	4013      	ands	r3, r2
 800527e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005280:	693a      	ldr	r2, [r7, #16]
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	429a      	cmp	r2, r3
 8005286:	f040 8148 	bne.w	800551a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	f003 0303 	and.w	r3, r3, #3
 8005292:	2b01      	cmp	r3, #1
 8005294:	d005      	beq.n	80052a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800529e:	2b02      	cmp	r3, #2
 80052a0:	d130      	bne.n	8005304 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80052a8:	69fb      	ldr	r3, [r7, #28]
 80052aa:	005b      	lsls	r3, r3, #1
 80052ac:	2203      	movs	r2, #3
 80052ae:	fa02 f303 	lsl.w	r3, r2, r3
 80052b2:	43db      	mvns	r3, r3
 80052b4:	69ba      	ldr	r2, [r7, #24]
 80052b6:	4013      	ands	r3, r2
 80052b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	68da      	ldr	r2, [r3, #12]
 80052be:	69fb      	ldr	r3, [r7, #28]
 80052c0:	005b      	lsls	r3, r3, #1
 80052c2:	fa02 f303 	lsl.w	r3, r2, r3
 80052c6:	69ba      	ldr	r2, [r7, #24]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	69ba      	ldr	r2, [r7, #24]
 80052d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80052d8:	2201      	movs	r2, #1
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	fa02 f303 	lsl.w	r3, r2, r3
 80052e0:	43db      	mvns	r3, r3
 80052e2:	69ba      	ldr	r2, [r7, #24]
 80052e4:	4013      	ands	r3, r2
 80052e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	091b      	lsrs	r3, r3, #4
 80052ee:	f003 0201 	and.w	r2, r3, #1
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	fa02 f303 	lsl.w	r3, r2, r3
 80052f8:	69ba      	ldr	r2, [r7, #24]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	69ba      	ldr	r2, [r7, #24]
 8005302:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	f003 0303 	and.w	r3, r3, #3
 800530c:	2b03      	cmp	r3, #3
 800530e:	d017      	beq.n	8005340 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005316:	69fb      	ldr	r3, [r7, #28]
 8005318:	005b      	lsls	r3, r3, #1
 800531a:	2203      	movs	r2, #3
 800531c:	fa02 f303 	lsl.w	r3, r2, r3
 8005320:	43db      	mvns	r3, r3
 8005322:	69ba      	ldr	r2, [r7, #24]
 8005324:	4013      	ands	r3, r2
 8005326:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	689a      	ldr	r2, [r3, #8]
 800532c:	69fb      	ldr	r3, [r7, #28]
 800532e:	005b      	lsls	r3, r3, #1
 8005330:	fa02 f303 	lsl.w	r3, r2, r3
 8005334:	69ba      	ldr	r2, [r7, #24]
 8005336:	4313      	orrs	r3, r2
 8005338:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	69ba      	ldr	r2, [r7, #24]
 800533e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	f003 0303 	and.w	r3, r3, #3
 8005348:	2b02      	cmp	r3, #2
 800534a:	d123      	bne.n	8005394 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800534c:	69fb      	ldr	r3, [r7, #28]
 800534e:	08da      	lsrs	r2, r3, #3
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	3208      	adds	r2, #8
 8005354:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005358:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800535a:	69fb      	ldr	r3, [r7, #28]
 800535c:	f003 0307 	and.w	r3, r3, #7
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	220f      	movs	r2, #15
 8005364:	fa02 f303 	lsl.w	r3, r2, r3
 8005368:	43db      	mvns	r3, r3
 800536a:	69ba      	ldr	r2, [r7, #24]
 800536c:	4013      	ands	r3, r2
 800536e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	691a      	ldr	r2, [r3, #16]
 8005374:	69fb      	ldr	r3, [r7, #28]
 8005376:	f003 0307 	and.w	r3, r3, #7
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	fa02 f303 	lsl.w	r3, r2, r3
 8005380:	69ba      	ldr	r2, [r7, #24]
 8005382:	4313      	orrs	r3, r2
 8005384:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	08da      	lsrs	r2, r3, #3
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	3208      	adds	r2, #8
 800538e:	69b9      	ldr	r1, [r7, #24]
 8005390:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800539a:	69fb      	ldr	r3, [r7, #28]
 800539c:	005b      	lsls	r3, r3, #1
 800539e:	2203      	movs	r2, #3
 80053a0:	fa02 f303 	lsl.w	r3, r2, r3
 80053a4:	43db      	mvns	r3, r3
 80053a6:	69ba      	ldr	r2, [r7, #24]
 80053a8:	4013      	ands	r3, r2
 80053aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	f003 0203 	and.w	r2, r3, #3
 80053b4:	69fb      	ldr	r3, [r7, #28]
 80053b6:	005b      	lsls	r3, r3, #1
 80053b8:	fa02 f303 	lsl.w	r3, r2, r3
 80053bc:	69ba      	ldr	r2, [r7, #24]
 80053be:	4313      	orrs	r3, r2
 80053c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	69ba      	ldr	r2, [r7, #24]
 80053c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	f000 80a2 	beq.w	800551a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80053d6:	2300      	movs	r3, #0
 80053d8:	60fb      	str	r3, [r7, #12]
 80053da:	4b57      	ldr	r3, [pc, #348]	@ (8005538 <HAL_GPIO_Init+0x2e8>)
 80053dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053de:	4a56      	ldr	r2, [pc, #344]	@ (8005538 <HAL_GPIO_Init+0x2e8>)
 80053e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80053e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80053e6:	4b54      	ldr	r3, [pc, #336]	@ (8005538 <HAL_GPIO_Init+0x2e8>)
 80053e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80053ee:	60fb      	str	r3, [r7, #12]
 80053f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80053f2:	4a52      	ldr	r2, [pc, #328]	@ (800553c <HAL_GPIO_Init+0x2ec>)
 80053f4:	69fb      	ldr	r3, [r7, #28]
 80053f6:	089b      	lsrs	r3, r3, #2
 80053f8:	3302      	adds	r3, #2
 80053fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005400:	69fb      	ldr	r3, [r7, #28]
 8005402:	f003 0303 	and.w	r3, r3, #3
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	220f      	movs	r2, #15
 800540a:	fa02 f303 	lsl.w	r3, r2, r3
 800540e:	43db      	mvns	r3, r3
 8005410:	69ba      	ldr	r2, [r7, #24]
 8005412:	4013      	ands	r3, r2
 8005414:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4a49      	ldr	r2, [pc, #292]	@ (8005540 <HAL_GPIO_Init+0x2f0>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d019      	beq.n	8005452 <HAL_GPIO_Init+0x202>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4a48      	ldr	r2, [pc, #288]	@ (8005544 <HAL_GPIO_Init+0x2f4>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d013      	beq.n	800544e <HAL_GPIO_Init+0x1fe>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4a47      	ldr	r2, [pc, #284]	@ (8005548 <HAL_GPIO_Init+0x2f8>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d00d      	beq.n	800544a <HAL_GPIO_Init+0x1fa>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4a46      	ldr	r2, [pc, #280]	@ (800554c <HAL_GPIO_Init+0x2fc>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d007      	beq.n	8005446 <HAL_GPIO_Init+0x1f6>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	4a45      	ldr	r2, [pc, #276]	@ (8005550 <HAL_GPIO_Init+0x300>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d101      	bne.n	8005442 <HAL_GPIO_Init+0x1f2>
 800543e:	2304      	movs	r3, #4
 8005440:	e008      	b.n	8005454 <HAL_GPIO_Init+0x204>
 8005442:	2307      	movs	r3, #7
 8005444:	e006      	b.n	8005454 <HAL_GPIO_Init+0x204>
 8005446:	2303      	movs	r3, #3
 8005448:	e004      	b.n	8005454 <HAL_GPIO_Init+0x204>
 800544a:	2302      	movs	r3, #2
 800544c:	e002      	b.n	8005454 <HAL_GPIO_Init+0x204>
 800544e:	2301      	movs	r3, #1
 8005450:	e000      	b.n	8005454 <HAL_GPIO_Init+0x204>
 8005452:	2300      	movs	r3, #0
 8005454:	69fa      	ldr	r2, [r7, #28]
 8005456:	f002 0203 	and.w	r2, r2, #3
 800545a:	0092      	lsls	r2, r2, #2
 800545c:	4093      	lsls	r3, r2
 800545e:	69ba      	ldr	r2, [r7, #24]
 8005460:	4313      	orrs	r3, r2
 8005462:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005464:	4935      	ldr	r1, [pc, #212]	@ (800553c <HAL_GPIO_Init+0x2ec>)
 8005466:	69fb      	ldr	r3, [r7, #28]
 8005468:	089b      	lsrs	r3, r3, #2
 800546a:	3302      	adds	r3, #2
 800546c:	69ba      	ldr	r2, [r7, #24]
 800546e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005472:	4b38      	ldr	r3, [pc, #224]	@ (8005554 <HAL_GPIO_Init+0x304>)
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	43db      	mvns	r3, r3
 800547c:	69ba      	ldr	r2, [r7, #24]
 800547e:	4013      	ands	r3, r2
 8005480:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800548a:	2b00      	cmp	r3, #0
 800548c:	d003      	beq.n	8005496 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800548e:	69ba      	ldr	r2, [r7, #24]
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	4313      	orrs	r3, r2
 8005494:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005496:	4a2f      	ldr	r2, [pc, #188]	@ (8005554 <HAL_GPIO_Init+0x304>)
 8005498:	69bb      	ldr	r3, [r7, #24]
 800549a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800549c:	4b2d      	ldr	r3, [pc, #180]	@ (8005554 <HAL_GPIO_Init+0x304>)
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	43db      	mvns	r3, r3
 80054a6:	69ba      	ldr	r2, [r7, #24]
 80054a8:	4013      	ands	r3, r2
 80054aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d003      	beq.n	80054c0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80054b8:	69ba      	ldr	r2, [r7, #24]
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	4313      	orrs	r3, r2
 80054be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80054c0:	4a24      	ldr	r2, [pc, #144]	@ (8005554 <HAL_GPIO_Init+0x304>)
 80054c2:	69bb      	ldr	r3, [r7, #24]
 80054c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80054c6:	4b23      	ldr	r3, [pc, #140]	@ (8005554 <HAL_GPIO_Init+0x304>)
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	43db      	mvns	r3, r3
 80054d0:	69ba      	ldr	r2, [r7, #24]
 80054d2:	4013      	ands	r3, r2
 80054d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d003      	beq.n	80054ea <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80054e2:	69ba      	ldr	r2, [r7, #24]
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	4313      	orrs	r3, r2
 80054e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80054ea:	4a1a      	ldr	r2, [pc, #104]	@ (8005554 <HAL_GPIO_Init+0x304>)
 80054ec:	69bb      	ldr	r3, [r7, #24]
 80054ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80054f0:	4b18      	ldr	r3, [pc, #96]	@ (8005554 <HAL_GPIO_Init+0x304>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	43db      	mvns	r3, r3
 80054fa:	69ba      	ldr	r2, [r7, #24]
 80054fc:	4013      	ands	r3, r2
 80054fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005508:	2b00      	cmp	r3, #0
 800550a:	d003      	beq.n	8005514 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800550c:	69ba      	ldr	r2, [r7, #24]
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	4313      	orrs	r3, r2
 8005512:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005514:	4a0f      	ldr	r2, [pc, #60]	@ (8005554 <HAL_GPIO_Init+0x304>)
 8005516:	69bb      	ldr	r3, [r7, #24]
 8005518:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800551a:	69fb      	ldr	r3, [r7, #28]
 800551c:	3301      	adds	r3, #1
 800551e:	61fb      	str	r3, [r7, #28]
 8005520:	69fb      	ldr	r3, [r7, #28]
 8005522:	2b0f      	cmp	r3, #15
 8005524:	f67f aea2 	bls.w	800526c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005528:	bf00      	nop
 800552a:	bf00      	nop
 800552c:	3724      	adds	r7, #36	@ 0x24
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr
 8005536:	bf00      	nop
 8005538:	40023800 	.word	0x40023800
 800553c:	40013800 	.word	0x40013800
 8005540:	40020000 	.word	0x40020000
 8005544:	40020400 	.word	0x40020400
 8005548:	40020800 	.word	0x40020800
 800554c:	40020c00 	.word	0x40020c00
 8005550:	40021000 	.word	0x40021000
 8005554:	40013c00 	.word	0x40013c00

08005558 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	460b      	mov	r3, r1
 8005562:	807b      	strh	r3, [r7, #2]
 8005564:	4613      	mov	r3, r2
 8005566:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005568:	787b      	ldrb	r3, [r7, #1]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d003      	beq.n	8005576 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800556e:	887a      	ldrh	r2, [r7, #2]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005574:	e003      	b.n	800557e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005576:	887b      	ldrh	r3, [r7, #2]
 8005578:	041a      	lsls	r2, r3, #16
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	619a      	str	r2, [r3, #24]
}
 800557e:	bf00      	nop
 8005580:	370c      	adds	r7, #12
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr
	...

0800558c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d101      	bne.n	800559e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e12b      	b.n	80057f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d106      	bne.n	80055b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f7fb fe78 	bl	80012a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2224      	movs	r2, #36	@ 0x24
 80055bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f022 0201 	bic.w	r2, r2, #1
 80055ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80055de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80055ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80055f0:	f001 f89a 	bl	8006728 <HAL_RCC_GetPCLK1Freq>
 80055f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	4a81      	ldr	r2, [pc, #516]	@ (8005800 <HAL_I2C_Init+0x274>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d807      	bhi.n	8005610 <HAL_I2C_Init+0x84>
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	4a80      	ldr	r2, [pc, #512]	@ (8005804 <HAL_I2C_Init+0x278>)
 8005604:	4293      	cmp	r3, r2
 8005606:	bf94      	ite	ls
 8005608:	2301      	movls	r3, #1
 800560a:	2300      	movhi	r3, #0
 800560c:	b2db      	uxtb	r3, r3
 800560e:	e006      	b.n	800561e <HAL_I2C_Init+0x92>
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	4a7d      	ldr	r2, [pc, #500]	@ (8005808 <HAL_I2C_Init+0x27c>)
 8005614:	4293      	cmp	r3, r2
 8005616:	bf94      	ite	ls
 8005618:	2301      	movls	r3, #1
 800561a:	2300      	movhi	r3, #0
 800561c:	b2db      	uxtb	r3, r3
 800561e:	2b00      	cmp	r3, #0
 8005620:	d001      	beq.n	8005626 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e0e7      	b.n	80057f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	4a78      	ldr	r2, [pc, #480]	@ (800580c <HAL_I2C_Init+0x280>)
 800562a:	fba2 2303 	umull	r2, r3, r2, r3
 800562e:	0c9b      	lsrs	r3, r3, #18
 8005630:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	68ba      	ldr	r2, [r7, #8]
 8005642:	430a      	orrs	r2, r1
 8005644:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	6a1b      	ldr	r3, [r3, #32]
 800564c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	4a6a      	ldr	r2, [pc, #424]	@ (8005800 <HAL_I2C_Init+0x274>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d802      	bhi.n	8005660 <HAL_I2C_Init+0xd4>
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	3301      	adds	r3, #1
 800565e:	e009      	b.n	8005674 <HAL_I2C_Init+0xe8>
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005666:	fb02 f303 	mul.w	r3, r2, r3
 800566a:	4a69      	ldr	r2, [pc, #420]	@ (8005810 <HAL_I2C_Init+0x284>)
 800566c:	fba2 2303 	umull	r2, r3, r2, r3
 8005670:	099b      	lsrs	r3, r3, #6
 8005672:	3301      	adds	r3, #1
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	6812      	ldr	r2, [r2, #0]
 8005678:	430b      	orrs	r3, r1
 800567a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	69db      	ldr	r3, [r3, #28]
 8005682:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005686:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	495c      	ldr	r1, [pc, #368]	@ (8005800 <HAL_I2C_Init+0x274>)
 8005690:	428b      	cmp	r3, r1
 8005692:	d819      	bhi.n	80056c8 <HAL_I2C_Init+0x13c>
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	1e59      	subs	r1, r3, #1
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	005b      	lsls	r3, r3, #1
 800569e:	fbb1 f3f3 	udiv	r3, r1, r3
 80056a2:	1c59      	adds	r1, r3, #1
 80056a4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80056a8:	400b      	ands	r3, r1
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d00a      	beq.n	80056c4 <HAL_I2C_Init+0x138>
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	1e59      	subs	r1, r3, #1
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	005b      	lsls	r3, r3, #1
 80056b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80056bc:	3301      	adds	r3, #1
 80056be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056c2:	e051      	b.n	8005768 <HAL_I2C_Init+0x1dc>
 80056c4:	2304      	movs	r3, #4
 80056c6:	e04f      	b.n	8005768 <HAL_I2C_Init+0x1dc>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d111      	bne.n	80056f4 <HAL_I2C_Init+0x168>
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	1e58      	subs	r0, r3, #1
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6859      	ldr	r1, [r3, #4]
 80056d8:	460b      	mov	r3, r1
 80056da:	005b      	lsls	r3, r3, #1
 80056dc:	440b      	add	r3, r1
 80056de:	fbb0 f3f3 	udiv	r3, r0, r3
 80056e2:	3301      	adds	r3, #1
 80056e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	bf0c      	ite	eq
 80056ec:	2301      	moveq	r3, #1
 80056ee:	2300      	movne	r3, #0
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	e012      	b.n	800571a <HAL_I2C_Init+0x18e>
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	1e58      	subs	r0, r3, #1
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6859      	ldr	r1, [r3, #4]
 80056fc:	460b      	mov	r3, r1
 80056fe:	009b      	lsls	r3, r3, #2
 8005700:	440b      	add	r3, r1
 8005702:	0099      	lsls	r1, r3, #2
 8005704:	440b      	add	r3, r1
 8005706:	fbb0 f3f3 	udiv	r3, r0, r3
 800570a:	3301      	adds	r3, #1
 800570c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005710:	2b00      	cmp	r3, #0
 8005712:	bf0c      	ite	eq
 8005714:	2301      	moveq	r3, #1
 8005716:	2300      	movne	r3, #0
 8005718:	b2db      	uxtb	r3, r3
 800571a:	2b00      	cmp	r3, #0
 800571c:	d001      	beq.n	8005722 <HAL_I2C_Init+0x196>
 800571e:	2301      	movs	r3, #1
 8005720:	e022      	b.n	8005768 <HAL_I2C_Init+0x1dc>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d10e      	bne.n	8005748 <HAL_I2C_Init+0x1bc>
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	1e58      	subs	r0, r3, #1
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6859      	ldr	r1, [r3, #4]
 8005732:	460b      	mov	r3, r1
 8005734:	005b      	lsls	r3, r3, #1
 8005736:	440b      	add	r3, r1
 8005738:	fbb0 f3f3 	udiv	r3, r0, r3
 800573c:	3301      	adds	r3, #1
 800573e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005742:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005746:	e00f      	b.n	8005768 <HAL_I2C_Init+0x1dc>
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	1e58      	subs	r0, r3, #1
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6859      	ldr	r1, [r3, #4]
 8005750:	460b      	mov	r3, r1
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	440b      	add	r3, r1
 8005756:	0099      	lsls	r1, r3, #2
 8005758:	440b      	add	r3, r1
 800575a:	fbb0 f3f3 	udiv	r3, r0, r3
 800575e:	3301      	adds	r3, #1
 8005760:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005764:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005768:	6879      	ldr	r1, [r7, #4]
 800576a:	6809      	ldr	r1, [r1, #0]
 800576c:	4313      	orrs	r3, r2
 800576e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	69da      	ldr	r2, [r3, #28]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a1b      	ldr	r3, [r3, #32]
 8005782:	431a      	orrs	r2, r3
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	430a      	orrs	r2, r1
 800578a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005796:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	6911      	ldr	r1, [r2, #16]
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	68d2      	ldr	r2, [r2, #12]
 80057a2:	4311      	orrs	r1, r2
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	6812      	ldr	r2, [r2, #0]
 80057a8:	430b      	orrs	r3, r1
 80057aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	695a      	ldr	r2, [r3, #20]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	699b      	ldr	r3, [r3, #24]
 80057be:	431a      	orrs	r2, r3
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	430a      	orrs	r2, r1
 80057c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f042 0201 	orr.w	r2, r2, #1
 80057d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2220      	movs	r2, #32
 80057e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2200      	movs	r2, #0
 80057f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80057f4:	2300      	movs	r3, #0
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3710      	adds	r7, #16
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
 80057fe:	bf00      	nop
 8005800:	000186a0 	.word	0x000186a0
 8005804:	001e847f 	.word	0x001e847f
 8005808:	003d08ff 	.word	0x003d08ff
 800580c:	431bde83 	.word	0x431bde83
 8005810:	10624dd3 	.word	0x10624dd3

08005814 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b088      	sub	sp, #32
 8005818:	af02      	add	r7, sp, #8
 800581a:	60f8      	str	r0, [r7, #12]
 800581c:	607a      	str	r2, [r7, #4]
 800581e:	461a      	mov	r2, r3
 8005820:	460b      	mov	r3, r1
 8005822:	817b      	strh	r3, [r7, #10]
 8005824:	4613      	mov	r3, r2
 8005826:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005828:	f7fe fa80 	bl	8003d2c <HAL_GetTick>
 800582c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005834:	b2db      	uxtb	r3, r3
 8005836:	2b20      	cmp	r3, #32
 8005838:	f040 80e0 	bne.w	80059fc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	9300      	str	r3, [sp, #0]
 8005840:	2319      	movs	r3, #25
 8005842:	2201      	movs	r2, #1
 8005844:	4970      	ldr	r1, [pc, #448]	@ (8005a08 <HAL_I2C_Master_Transmit+0x1f4>)
 8005846:	68f8      	ldr	r0, [r7, #12]
 8005848:	f000 f964 	bl	8005b14 <I2C_WaitOnFlagUntilTimeout>
 800584c:	4603      	mov	r3, r0
 800584e:	2b00      	cmp	r3, #0
 8005850:	d001      	beq.n	8005856 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005852:	2302      	movs	r3, #2
 8005854:	e0d3      	b.n	80059fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800585c:	2b01      	cmp	r3, #1
 800585e:	d101      	bne.n	8005864 <HAL_I2C_Master_Transmit+0x50>
 8005860:	2302      	movs	r3, #2
 8005862:	e0cc      	b.n	80059fe <HAL_I2C_Master_Transmit+0x1ea>
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2201      	movs	r2, #1
 8005868:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 0301 	and.w	r3, r3, #1
 8005876:	2b01      	cmp	r3, #1
 8005878:	d007      	beq.n	800588a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f042 0201 	orr.w	r2, r2, #1
 8005888:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005898:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2221      	movs	r2, #33	@ 0x21
 800589e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2210      	movs	r2, #16
 80058a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2200      	movs	r2, #0
 80058ae:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	893a      	ldrh	r2, [r7, #8]
 80058ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058c0:	b29a      	uxth	r2, r3
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	4a50      	ldr	r2, [pc, #320]	@ (8005a0c <HAL_I2C_Master_Transmit+0x1f8>)
 80058ca:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80058cc:	8979      	ldrh	r1, [r7, #10]
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	6a3a      	ldr	r2, [r7, #32]
 80058d2:	68f8      	ldr	r0, [r7, #12]
 80058d4:	f000 f89c 	bl	8005a10 <I2C_MasterRequestWrite>
 80058d8:	4603      	mov	r3, r0
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d001      	beq.n	80058e2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	e08d      	b.n	80059fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058e2:	2300      	movs	r3, #0
 80058e4:	613b      	str	r3, [r7, #16]
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	695b      	ldr	r3, [r3, #20]
 80058ec:	613b      	str	r3, [r7, #16]
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	699b      	ldr	r3, [r3, #24]
 80058f4:	613b      	str	r3, [r7, #16]
 80058f6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80058f8:	e066      	b.n	80059c8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058fa:	697a      	ldr	r2, [r7, #20]
 80058fc:	6a39      	ldr	r1, [r7, #32]
 80058fe:	68f8      	ldr	r0, [r7, #12]
 8005900:	f000 fa22 	bl	8005d48 <I2C_WaitOnTXEFlagUntilTimeout>
 8005904:	4603      	mov	r3, r0
 8005906:	2b00      	cmp	r3, #0
 8005908:	d00d      	beq.n	8005926 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800590e:	2b04      	cmp	r3, #4
 8005910:	d107      	bne.n	8005922 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005920:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e06b      	b.n	80059fe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800592a:	781a      	ldrb	r2, [r3, #0]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005936:	1c5a      	adds	r2, r3, #1
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005940:	b29b      	uxth	r3, r3
 8005942:	3b01      	subs	r3, #1
 8005944:	b29a      	uxth	r2, r3
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800594e:	3b01      	subs	r3, #1
 8005950:	b29a      	uxth	r2, r3
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	695b      	ldr	r3, [r3, #20]
 800595c:	f003 0304 	and.w	r3, r3, #4
 8005960:	2b04      	cmp	r3, #4
 8005962:	d11b      	bne.n	800599c <HAL_I2C_Master_Transmit+0x188>
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005968:	2b00      	cmp	r3, #0
 800596a:	d017      	beq.n	800599c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005970:	781a      	ldrb	r2, [r3, #0]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800597c:	1c5a      	adds	r2, r3, #1
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005986:	b29b      	uxth	r3, r3
 8005988:	3b01      	subs	r3, #1
 800598a:	b29a      	uxth	r2, r3
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005994:	3b01      	subs	r3, #1
 8005996:	b29a      	uxth	r2, r3
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800599c:	697a      	ldr	r2, [r7, #20]
 800599e:	6a39      	ldr	r1, [r7, #32]
 80059a0:	68f8      	ldr	r0, [r7, #12]
 80059a2:	f000 fa19 	bl	8005dd8 <I2C_WaitOnBTFFlagUntilTimeout>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d00d      	beq.n	80059c8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059b0:	2b04      	cmp	r3, #4
 80059b2:	d107      	bne.n	80059c4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80059c2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	e01a      	b.n	80059fe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d194      	bne.n	80058fa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80059de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2220      	movs	r2, #32
 80059e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2200      	movs	r2, #0
 80059ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80059f8:	2300      	movs	r3, #0
 80059fa:	e000      	b.n	80059fe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80059fc:	2302      	movs	r3, #2
  }
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3718      	adds	r7, #24
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	bf00      	nop
 8005a08:	00100002 	.word	0x00100002
 8005a0c:	ffff0000 	.word	0xffff0000

08005a10 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b088      	sub	sp, #32
 8005a14:	af02      	add	r7, sp, #8
 8005a16:	60f8      	str	r0, [r7, #12]
 8005a18:	607a      	str	r2, [r7, #4]
 8005a1a:	603b      	str	r3, [r7, #0]
 8005a1c:	460b      	mov	r3, r1
 8005a1e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a24:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	2b08      	cmp	r3, #8
 8005a2a:	d006      	beq.n	8005a3a <I2C_MasterRequestWrite+0x2a>
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d003      	beq.n	8005a3a <I2C_MasterRequestWrite+0x2a>
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005a38:	d108      	bne.n	8005a4c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005a48:	601a      	str	r2, [r3, #0]
 8005a4a:	e00b      	b.n	8005a64 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a50:	2b12      	cmp	r3, #18
 8005a52:	d107      	bne.n	8005a64 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005a62:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	9300      	str	r3, [sp, #0]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005a70:	68f8      	ldr	r0, [r7, #12]
 8005a72:	f000 f84f 	bl	8005b14 <I2C_WaitOnFlagUntilTimeout>
 8005a76:	4603      	mov	r3, r0
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d00d      	beq.n	8005a98 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a8a:	d103      	bne.n	8005a94 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a92:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005a94:	2303      	movs	r3, #3
 8005a96:	e035      	b.n	8005b04 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	691b      	ldr	r3, [r3, #16]
 8005a9c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005aa0:	d108      	bne.n	8005ab4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005aa2:	897b      	ldrh	r3, [r7, #10]
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005ab0:	611a      	str	r2, [r3, #16]
 8005ab2:	e01b      	b.n	8005aec <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005ab4:	897b      	ldrh	r3, [r7, #10]
 8005ab6:	11db      	asrs	r3, r3, #7
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	f003 0306 	and.w	r3, r3, #6
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	f063 030f 	orn	r3, r3, #15
 8005ac4:	b2da      	uxtb	r2, r3
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	490e      	ldr	r1, [pc, #56]	@ (8005b0c <I2C_MasterRequestWrite+0xfc>)
 8005ad2:	68f8      	ldr	r0, [r7, #12]
 8005ad4:	f000 f898 	bl	8005c08 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d001      	beq.n	8005ae2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e010      	b.n	8005b04 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005ae2:	897b      	ldrh	r3, [r7, #10]
 8005ae4:	b2da      	uxtb	r2, r3
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	4907      	ldr	r1, [pc, #28]	@ (8005b10 <I2C_MasterRequestWrite+0x100>)
 8005af2:	68f8      	ldr	r0, [r7, #12]
 8005af4:	f000 f888 	bl	8005c08 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005af8:	4603      	mov	r3, r0
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d001      	beq.n	8005b02 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e000      	b.n	8005b04 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005b02:	2300      	movs	r3, #0
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3718      	adds	r7, #24
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}
 8005b0c:	00010008 	.word	0x00010008
 8005b10:	00010002 	.word	0x00010002

08005b14 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b084      	sub	sp, #16
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	60f8      	str	r0, [r7, #12]
 8005b1c:	60b9      	str	r1, [r7, #8]
 8005b1e:	603b      	str	r3, [r7, #0]
 8005b20:	4613      	mov	r3, r2
 8005b22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b24:	e048      	b.n	8005bb8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b2c:	d044      	beq.n	8005bb8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b2e:	f7fe f8fd 	bl	8003d2c <HAL_GetTick>
 8005b32:	4602      	mov	r2, r0
 8005b34:	69bb      	ldr	r3, [r7, #24]
 8005b36:	1ad3      	subs	r3, r2, r3
 8005b38:	683a      	ldr	r2, [r7, #0]
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d302      	bcc.n	8005b44 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d139      	bne.n	8005bb8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	0c1b      	lsrs	r3, r3, #16
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d10d      	bne.n	8005b6a <I2C_WaitOnFlagUntilTimeout+0x56>
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	695b      	ldr	r3, [r3, #20]
 8005b54:	43da      	mvns	r2, r3
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	4013      	ands	r3, r2
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	bf0c      	ite	eq
 8005b60:	2301      	moveq	r3, #1
 8005b62:	2300      	movne	r3, #0
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	461a      	mov	r2, r3
 8005b68:	e00c      	b.n	8005b84 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	699b      	ldr	r3, [r3, #24]
 8005b70:	43da      	mvns	r2, r3
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	4013      	ands	r3, r2
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	bf0c      	ite	eq
 8005b7c:	2301      	moveq	r3, #1
 8005b7e:	2300      	movne	r3, #0
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	461a      	mov	r2, r3
 8005b84:	79fb      	ldrb	r3, [r7, #7]
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d116      	bne.n	8005bb8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2220      	movs	r2, #32
 8005b94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ba4:	f043 0220 	orr.w	r2, r3, #32
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e023      	b.n	8005c00 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	0c1b      	lsrs	r3, r3, #16
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d10d      	bne.n	8005bde <I2C_WaitOnFlagUntilTimeout+0xca>
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	695b      	ldr	r3, [r3, #20]
 8005bc8:	43da      	mvns	r2, r3
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	4013      	ands	r3, r2
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	bf0c      	ite	eq
 8005bd4:	2301      	moveq	r3, #1
 8005bd6:	2300      	movne	r3, #0
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	461a      	mov	r2, r3
 8005bdc:	e00c      	b.n	8005bf8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	699b      	ldr	r3, [r3, #24]
 8005be4:	43da      	mvns	r2, r3
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	4013      	ands	r3, r2
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	bf0c      	ite	eq
 8005bf0:	2301      	moveq	r3, #1
 8005bf2:	2300      	movne	r3, #0
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	79fb      	ldrb	r3, [r7, #7]
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d093      	beq.n	8005b26 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005bfe:	2300      	movs	r3, #0
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3710      	adds	r7, #16
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}

08005c08 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b084      	sub	sp, #16
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	60f8      	str	r0, [r7, #12]
 8005c10:	60b9      	str	r1, [r7, #8]
 8005c12:	607a      	str	r2, [r7, #4]
 8005c14:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005c16:	e071      	b.n	8005cfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	695b      	ldr	r3, [r3, #20]
 8005c1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c26:	d123      	bne.n	8005c70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c36:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005c40:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2200      	movs	r2, #0
 8005c46:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2220      	movs	r2, #32
 8005c4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2200      	movs	r2, #0
 8005c54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c5c:	f043 0204 	orr.w	r2, r3, #4
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2200      	movs	r2, #0
 8005c68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	e067      	b.n	8005d40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c76:	d041      	beq.n	8005cfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c78:	f7fe f858 	bl	8003d2c <HAL_GetTick>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	1ad3      	subs	r3, r2, r3
 8005c82:	687a      	ldr	r2, [r7, #4]
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d302      	bcc.n	8005c8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d136      	bne.n	8005cfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	0c1b      	lsrs	r3, r3, #16
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d10c      	bne.n	8005cb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	695b      	ldr	r3, [r3, #20]
 8005c9e:	43da      	mvns	r2, r3
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	bf14      	ite	ne
 8005caa:	2301      	movne	r3, #1
 8005cac:	2300      	moveq	r3, #0
 8005cae:	b2db      	uxtb	r3, r3
 8005cb0:	e00b      	b.n	8005cca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	699b      	ldr	r3, [r3, #24]
 8005cb8:	43da      	mvns	r2, r3
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	4013      	ands	r3, r2
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	bf14      	ite	ne
 8005cc4:	2301      	movne	r3, #1
 8005cc6:	2300      	moveq	r3, #0
 8005cc8:	b2db      	uxtb	r3, r3
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d016      	beq.n	8005cfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2220      	movs	r2, #32
 8005cd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ce8:	f043 0220 	orr.w	r2, r3, #32
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	e021      	b.n	8005d40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	0c1b      	lsrs	r3, r3, #16
 8005d00:	b2db      	uxtb	r3, r3
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d10c      	bne.n	8005d20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	695b      	ldr	r3, [r3, #20]
 8005d0c:	43da      	mvns	r2, r3
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	4013      	ands	r3, r2
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	bf14      	ite	ne
 8005d18:	2301      	movne	r3, #1
 8005d1a:	2300      	moveq	r3, #0
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	e00b      	b.n	8005d38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	699b      	ldr	r3, [r3, #24]
 8005d26:	43da      	mvns	r2, r3
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	bf14      	ite	ne
 8005d32:	2301      	movne	r3, #1
 8005d34:	2300      	moveq	r3, #0
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	f47f af6d 	bne.w	8005c18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005d3e:	2300      	movs	r3, #0
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3710      	adds	r7, #16
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}

08005d48 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b084      	sub	sp, #16
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	60f8      	str	r0, [r7, #12]
 8005d50:	60b9      	str	r1, [r7, #8]
 8005d52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d54:	e034      	b.n	8005dc0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005d56:	68f8      	ldr	r0, [r7, #12]
 8005d58:	f000 f886 	bl	8005e68 <I2C_IsAcknowledgeFailed>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d001      	beq.n	8005d66 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	e034      	b.n	8005dd0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d6c:	d028      	beq.n	8005dc0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d6e:	f7fd ffdd 	bl	8003d2c <HAL_GetTick>
 8005d72:	4602      	mov	r2, r0
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	1ad3      	subs	r3, r2, r3
 8005d78:	68ba      	ldr	r2, [r7, #8]
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d302      	bcc.n	8005d84 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d11d      	bne.n	8005dc0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	695b      	ldr	r3, [r3, #20]
 8005d8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d8e:	2b80      	cmp	r3, #128	@ 0x80
 8005d90:	d016      	beq.n	8005dc0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2200      	movs	r2, #0
 8005d96:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2220      	movs	r2, #32
 8005d9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2200      	movs	r2, #0
 8005da4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dac:	f043 0220 	orr.w	r2, r3, #32
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2200      	movs	r2, #0
 8005db8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	e007      	b.n	8005dd0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	695b      	ldr	r3, [r3, #20]
 8005dc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dca:	2b80      	cmp	r3, #128	@ 0x80
 8005dcc:	d1c3      	bne.n	8005d56 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005dce:	2300      	movs	r3, #0
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3710      	adds	r7, #16
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}

08005dd8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b084      	sub	sp, #16
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	60f8      	str	r0, [r7, #12]
 8005de0:	60b9      	str	r1, [r7, #8]
 8005de2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005de4:	e034      	b.n	8005e50 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005de6:	68f8      	ldr	r0, [r7, #12]
 8005de8:	f000 f83e 	bl	8005e68 <I2C_IsAcknowledgeFailed>
 8005dec:	4603      	mov	r3, r0
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d001      	beq.n	8005df6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	e034      	b.n	8005e60 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dfc:	d028      	beq.n	8005e50 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dfe:	f7fd ff95 	bl	8003d2c <HAL_GetTick>
 8005e02:	4602      	mov	r2, r0
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	1ad3      	subs	r3, r2, r3
 8005e08:	68ba      	ldr	r2, [r7, #8]
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d302      	bcc.n	8005e14 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d11d      	bne.n	8005e50 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	695b      	ldr	r3, [r3, #20]
 8005e1a:	f003 0304 	and.w	r3, r3, #4
 8005e1e:	2b04      	cmp	r3, #4
 8005e20:	d016      	beq.n	8005e50 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2200      	movs	r2, #0
 8005e26:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2220      	movs	r2, #32
 8005e2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2200      	movs	r2, #0
 8005e34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e3c:	f043 0220 	orr.w	r2, r3, #32
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2200      	movs	r2, #0
 8005e48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	e007      	b.n	8005e60 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	695b      	ldr	r3, [r3, #20]
 8005e56:	f003 0304 	and.w	r3, r3, #4
 8005e5a:	2b04      	cmp	r3, #4
 8005e5c:	d1c3      	bne.n	8005de6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005e5e:	2300      	movs	r3, #0
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3710      	adds	r7, #16
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}

08005e68 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	695b      	ldr	r3, [r3, #20]
 8005e76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e7e:	d11b      	bne.n	8005eb8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005e88:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2220      	movs	r2, #32
 8005e94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ea4:	f043 0204 	orr.w	r2, r3, #4
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	e000      	b.n	8005eba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005eb8:	2300      	movs	r3, #0
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	370c      	adds	r7, #12
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr
	...

08005ec8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b086      	sub	sp, #24
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d101      	bne.n	8005eda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e267      	b.n	80063aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f003 0301 	and.w	r3, r3, #1
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d075      	beq.n	8005fd2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005ee6:	4b88      	ldr	r3, [pc, #544]	@ (8006108 <HAL_RCC_OscConfig+0x240>)
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	f003 030c 	and.w	r3, r3, #12
 8005eee:	2b04      	cmp	r3, #4
 8005ef0:	d00c      	beq.n	8005f0c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ef2:	4b85      	ldr	r3, [pc, #532]	@ (8006108 <HAL_RCC_OscConfig+0x240>)
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005efa:	2b08      	cmp	r3, #8
 8005efc:	d112      	bne.n	8005f24 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005efe:	4b82      	ldr	r3, [pc, #520]	@ (8006108 <HAL_RCC_OscConfig+0x240>)
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f06:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f0a:	d10b      	bne.n	8005f24 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f0c:	4b7e      	ldr	r3, [pc, #504]	@ (8006108 <HAL_RCC_OscConfig+0x240>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d05b      	beq.n	8005fd0 <HAL_RCC_OscConfig+0x108>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d157      	bne.n	8005fd0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	e242      	b.n	80063aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f2c:	d106      	bne.n	8005f3c <HAL_RCC_OscConfig+0x74>
 8005f2e:	4b76      	ldr	r3, [pc, #472]	@ (8006108 <HAL_RCC_OscConfig+0x240>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a75      	ldr	r2, [pc, #468]	@ (8006108 <HAL_RCC_OscConfig+0x240>)
 8005f34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f38:	6013      	str	r3, [r2, #0]
 8005f3a:	e01d      	b.n	8005f78 <HAL_RCC_OscConfig+0xb0>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f44:	d10c      	bne.n	8005f60 <HAL_RCC_OscConfig+0x98>
 8005f46:	4b70      	ldr	r3, [pc, #448]	@ (8006108 <HAL_RCC_OscConfig+0x240>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a6f      	ldr	r2, [pc, #444]	@ (8006108 <HAL_RCC_OscConfig+0x240>)
 8005f4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005f50:	6013      	str	r3, [r2, #0]
 8005f52:	4b6d      	ldr	r3, [pc, #436]	@ (8006108 <HAL_RCC_OscConfig+0x240>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a6c      	ldr	r2, [pc, #432]	@ (8006108 <HAL_RCC_OscConfig+0x240>)
 8005f58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f5c:	6013      	str	r3, [r2, #0]
 8005f5e:	e00b      	b.n	8005f78 <HAL_RCC_OscConfig+0xb0>
 8005f60:	4b69      	ldr	r3, [pc, #420]	@ (8006108 <HAL_RCC_OscConfig+0x240>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a68      	ldr	r2, [pc, #416]	@ (8006108 <HAL_RCC_OscConfig+0x240>)
 8005f66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f6a:	6013      	str	r3, [r2, #0]
 8005f6c:	4b66      	ldr	r3, [pc, #408]	@ (8006108 <HAL_RCC_OscConfig+0x240>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a65      	ldr	r2, [pc, #404]	@ (8006108 <HAL_RCC_OscConfig+0x240>)
 8005f72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005f76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d013      	beq.n	8005fa8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f80:	f7fd fed4 	bl	8003d2c <HAL_GetTick>
 8005f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f86:	e008      	b.n	8005f9a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f88:	f7fd fed0 	bl	8003d2c <HAL_GetTick>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	1ad3      	subs	r3, r2, r3
 8005f92:	2b64      	cmp	r3, #100	@ 0x64
 8005f94:	d901      	bls.n	8005f9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005f96:	2303      	movs	r3, #3
 8005f98:	e207      	b.n	80063aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f9a:	4b5b      	ldr	r3, [pc, #364]	@ (8006108 <HAL_RCC_OscConfig+0x240>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d0f0      	beq.n	8005f88 <HAL_RCC_OscConfig+0xc0>
 8005fa6:	e014      	b.n	8005fd2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fa8:	f7fd fec0 	bl	8003d2c <HAL_GetTick>
 8005fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005fae:	e008      	b.n	8005fc2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005fb0:	f7fd febc 	bl	8003d2c <HAL_GetTick>
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	1ad3      	subs	r3, r2, r3
 8005fba:	2b64      	cmp	r3, #100	@ 0x64
 8005fbc:	d901      	bls.n	8005fc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005fbe:	2303      	movs	r3, #3
 8005fc0:	e1f3      	b.n	80063aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005fc2:	4b51      	ldr	r3, [pc, #324]	@ (8006108 <HAL_RCC_OscConfig+0x240>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d1f0      	bne.n	8005fb0 <HAL_RCC_OscConfig+0xe8>
 8005fce:	e000      	b.n	8005fd2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f003 0302 	and.w	r3, r3, #2
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d063      	beq.n	80060a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005fde:	4b4a      	ldr	r3, [pc, #296]	@ (8006108 <HAL_RCC_OscConfig+0x240>)
 8005fe0:	689b      	ldr	r3, [r3, #8]
 8005fe2:	f003 030c 	and.w	r3, r3, #12
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d00b      	beq.n	8006002 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005fea:	4b47      	ldr	r3, [pc, #284]	@ (8006108 <HAL_RCC_OscConfig+0x240>)
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005ff2:	2b08      	cmp	r3, #8
 8005ff4:	d11c      	bne.n	8006030 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ff6:	4b44      	ldr	r3, [pc, #272]	@ (8006108 <HAL_RCC_OscConfig+0x240>)
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d116      	bne.n	8006030 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006002:	4b41      	ldr	r3, [pc, #260]	@ (8006108 <HAL_RCC_OscConfig+0x240>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f003 0302 	and.w	r3, r3, #2
 800600a:	2b00      	cmp	r3, #0
 800600c:	d005      	beq.n	800601a <HAL_RCC_OscConfig+0x152>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	68db      	ldr	r3, [r3, #12]
 8006012:	2b01      	cmp	r3, #1
 8006014:	d001      	beq.n	800601a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	e1c7      	b.n	80063aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800601a:	4b3b      	ldr	r3, [pc, #236]	@ (8006108 <HAL_RCC_OscConfig+0x240>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	691b      	ldr	r3, [r3, #16]
 8006026:	00db      	lsls	r3, r3, #3
 8006028:	4937      	ldr	r1, [pc, #220]	@ (8006108 <HAL_RCC_OscConfig+0x240>)
 800602a:	4313      	orrs	r3, r2
 800602c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800602e:	e03a      	b.n	80060a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	68db      	ldr	r3, [r3, #12]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d020      	beq.n	800607a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006038:	4b34      	ldr	r3, [pc, #208]	@ (800610c <HAL_RCC_OscConfig+0x244>)
 800603a:	2201      	movs	r2, #1
 800603c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800603e:	f7fd fe75 	bl	8003d2c <HAL_GetTick>
 8006042:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006044:	e008      	b.n	8006058 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006046:	f7fd fe71 	bl	8003d2c <HAL_GetTick>
 800604a:	4602      	mov	r2, r0
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	1ad3      	subs	r3, r2, r3
 8006050:	2b02      	cmp	r3, #2
 8006052:	d901      	bls.n	8006058 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006054:	2303      	movs	r3, #3
 8006056:	e1a8      	b.n	80063aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006058:	4b2b      	ldr	r3, [pc, #172]	@ (8006108 <HAL_RCC_OscConfig+0x240>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f003 0302 	and.w	r3, r3, #2
 8006060:	2b00      	cmp	r3, #0
 8006062:	d0f0      	beq.n	8006046 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006064:	4b28      	ldr	r3, [pc, #160]	@ (8006108 <HAL_RCC_OscConfig+0x240>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	691b      	ldr	r3, [r3, #16]
 8006070:	00db      	lsls	r3, r3, #3
 8006072:	4925      	ldr	r1, [pc, #148]	@ (8006108 <HAL_RCC_OscConfig+0x240>)
 8006074:	4313      	orrs	r3, r2
 8006076:	600b      	str	r3, [r1, #0]
 8006078:	e015      	b.n	80060a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800607a:	4b24      	ldr	r3, [pc, #144]	@ (800610c <HAL_RCC_OscConfig+0x244>)
 800607c:	2200      	movs	r2, #0
 800607e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006080:	f7fd fe54 	bl	8003d2c <HAL_GetTick>
 8006084:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006086:	e008      	b.n	800609a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006088:	f7fd fe50 	bl	8003d2c <HAL_GetTick>
 800608c:	4602      	mov	r2, r0
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	1ad3      	subs	r3, r2, r3
 8006092:	2b02      	cmp	r3, #2
 8006094:	d901      	bls.n	800609a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006096:	2303      	movs	r3, #3
 8006098:	e187      	b.n	80063aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800609a:	4b1b      	ldr	r3, [pc, #108]	@ (8006108 <HAL_RCC_OscConfig+0x240>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f003 0302 	and.w	r3, r3, #2
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d1f0      	bne.n	8006088 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f003 0308 	and.w	r3, r3, #8
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d036      	beq.n	8006120 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	695b      	ldr	r3, [r3, #20]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d016      	beq.n	80060e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80060ba:	4b15      	ldr	r3, [pc, #84]	@ (8006110 <HAL_RCC_OscConfig+0x248>)
 80060bc:	2201      	movs	r2, #1
 80060be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060c0:	f7fd fe34 	bl	8003d2c <HAL_GetTick>
 80060c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060c6:	e008      	b.n	80060da <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060c8:	f7fd fe30 	bl	8003d2c <HAL_GetTick>
 80060cc:	4602      	mov	r2, r0
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	1ad3      	subs	r3, r2, r3
 80060d2:	2b02      	cmp	r3, #2
 80060d4:	d901      	bls.n	80060da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80060d6:	2303      	movs	r3, #3
 80060d8:	e167      	b.n	80063aa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060da:	4b0b      	ldr	r3, [pc, #44]	@ (8006108 <HAL_RCC_OscConfig+0x240>)
 80060dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060de:	f003 0302 	and.w	r3, r3, #2
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d0f0      	beq.n	80060c8 <HAL_RCC_OscConfig+0x200>
 80060e6:	e01b      	b.n	8006120 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80060e8:	4b09      	ldr	r3, [pc, #36]	@ (8006110 <HAL_RCC_OscConfig+0x248>)
 80060ea:	2200      	movs	r2, #0
 80060ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060ee:	f7fd fe1d 	bl	8003d2c <HAL_GetTick>
 80060f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80060f4:	e00e      	b.n	8006114 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060f6:	f7fd fe19 	bl	8003d2c <HAL_GetTick>
 80060fa:	4602      	mov	r2, r0
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	1ad3      	subs	r3, r2, r3
 8006100:	2b02      	cmp	r3, #2
 8006102:	d907      	bls.n	8006114 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006104:	2303      	movs	r3, #3
 8006106:	e150      	b.n	80063aa <HAL_RCC_OscConfig+0x4e2>
 8006108:	40023800 	.word	0x40023800
 800610c:	42470000 	.word	0x42470000
 8006110:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006114:	4b88      	ldr	r3, [pc, #544]	@ (8006338 <HAL_RCC_OscConfig+0x470>)
 8006116:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006118:	f003 0302 	and.w	r3, r3, #2
 800611c:	2b00      	cmp	r3, #0
 800611e:	d1ea      	bne.n	80060f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f003 0304 	and.w	r3, r3, #4
 8006128:	2b00      	cmp	r3, #0
 800612a:	f000 8097 	beq.w	800625c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800612e:	2300      	movs	r3, #0
 8006130:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006132:	4b81      	ldr	r3, [pc, #516]	@ (8006338 <HAL_RCC_OscConfig+0x470>)
 8006134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006136:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800613a:	2b00      	cmp	r3, #0
 800613c:	d10f      	bne.n	800615e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800613e:	2300      	movs	r3, #0
 8006140:	60bb      	str	r3, [r7, #8]
 8006142:	4b7d      	ldr	r3, [pc, #500]	@ (8006338 <HAL_RCC_OscConfig+0x470>)
 8006144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006146:	4a7c      	ldr	r2, [pc, #496]	@ (8006338 <HAL_RCC_OscConfig+0x470>)
 8006148:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800614c:	6413      	str	r3, [r2, #64]	@ 0x40
 800614e:	4b7a      	ldr	r3, [pc, #488]	@ (8006338 <HAL_RCC_OscConfig+0x470>)
 8006150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006152:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006156:	60bb      	str	r3, [r7, #8]
 8006158:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800615a:	2301      	movs	r3, #1
 800615c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800615e:	4b77      	ldr	r3, [pc, #476]	@ (800633c <HAL_RCC_OscConfig+0x474>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006166:	2b00      	cmp	r3, #0
 8006168:	d118      	bne.n	800619c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800616a:	4b74      	ldr	r3, [pc, #464]	@ (800633c <HAL_RCC_OscConfig+0x474>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a73      	ldr	r2, [pc, #460]	@ (800633c <HAL_RCC_OscConfig+0x474>)
 8006170:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006174:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006176:	f7fd fdd9 	bl	8003d2c <HAL_GetTick>
 800617a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800617c:	e008      	b.n	8006190 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800617e:	f7fd fdd5 	bl	8003d2c <HAL_GetTick>
 8006182:	4602      	mov	r2, r0
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	1ad3      	subs	r3, r2, r3
 8006188:	2b02      	cmp	r3, #2
 800618a:	d901      	bls.n	8006190 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800618c:	2303      	movs	r3, #3
 800618e:	e10c      	b.n	80063aa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006190:	4b6a      	ldr	r3, [pc, #424]	@ (800633c <HAL_RCC_OscConfig+0x474>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006198:	2b00      	cmp	r3, #0
 800619a:	d0f0      	beq.n	800617e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	689b      	ldr	r3, [r3, #8]
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d106      	bne.n	80061b2 <HAL_RCC_OscConfig+0x2ea>
 80061a4:	4b64      	ldr	r3, [pc, #400]	@ (8006338 <HAL_RCC_OscConfig+0x470>)
 80061a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061a8:	4a63      	ldr	r2, [pc, #396]	@ (8006338 <HAL_RCC_OscConfig+0x470>)
 80061aa:	f043 0301 	orr.w	r3, r3, #1
 80061ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80061b0:	e01c      	b.n	80061ec <HAL_RCC_OscConfig+0x324>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	2b05      	cmp	r3, #5
 80061b8:	d10c      	bne.n	80061d4 <HAL_RCC_OscConfig+0x30c>
 80061ba:	4b5f      	ldr	r3, [pc, #380]	@ (8006338 <HAL_RCC_OscConfig+0x470>)
 80061bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061be:	4a5e      	ldr	r2, [pc, #376]	@ (8006338 <HAL_RCC_OscConfig+0x470>)
 80061c0:	f043 0304 	orr.w	r3, r3, #4
 80061c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80061c6:	4b5c      	ldr	r3, [pc, #368]	@ (8006338 <HAL_RCC_OscConfig+0x470>)
 80061c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061ca:	4a5b      	ldr	r2, [pc, #364]	@ (8006338 <HAL_RCC_OscConfig+0x470>)
 80061cc:	f043 0301 	orr.w	r3, r3, #1
 80061d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80061d2:	e00b      	b.n	80061ec <HAL_RCC_OscConfig+0x324>
 80061d4:	4b58      	ldr	r3, [pc, #352]	@ (8006338 <HAL_RCC_OscConfig+0x470>)
 80061d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061d8:	4a57      	ldr	r2, [pc, #348]	@ (8006338 <HAL_RCC_OscConfig+0x470>)
 80061da:	f023 0301 	bic.w	r3, r3, #1
 80061de:	6713      	str	r3, [r2, #112]	@ 0x70
 80061e0:	4b55      	ldr	r3, [pc, #340]	@ (8006338 <HAL_RCC_OscConfig+0x470>)
 80061e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061e4:	4a54      	ldr	r2, [pc, #336]	@ (8006338 <HAL_RCC_OscConfig+0x470>)
 80061e6:	f023 0304 	bic.w	r3, r3, #4
 80061ea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d015      	beq.n	8006220 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061f4:	f7fd fd9a 	bl	8003d2c <HAL_GetTick>
 80061f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061fa:	e00a      	b.n	8006212 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061fc:	f7fd fd96 	bl	8003d2c <HAL_GetTick>
 8006200:	4602      	mov	r2, r0
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	1ad3      	subs	r3, r2, r3
 8006206:	f241 3288 	movw	r2, #5000	@ 0x1388
 800620a:	4293      	cmp	r3, r2
 800620c:	d901      	bls.n	8006212 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800620e:	2303      	movs	r3, #3
 8006210:	e0cb      	b.n	80063aa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006212:	4b49      	ldr	r3, [pc, #292]	@ (8006338 <HAL_RCC_OscConfig+0x470>)
 8006214:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006216:	f003 0302 	and.w	r3, r3, #2
 800621a:	2b00      	cmp	r3, #0
 800621c:	d0ee      	beq.n	80061fc <HAL_RCC_OscConfig+0x334>
 800621e:	e014      	b.n	800624a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006220:	f7fd fd84 	bl	8003d2c <HAL_GetTick>
 8006224:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006226:	e00a      	b.n	800623e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006228:	f7fd fd80 	bl	8003d2c <HAL_GetTick>
 800622c:	4602      	mov	r2, r0
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	1ad3      	subs	r3, r2, r3
 8006232:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006236:	4293      	cmp	r3, r2
 8006238:	d901      	bls.n	800623e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800623a:	2303      	movs	r3, #3
 800623c:	e0b5      	b.n	80063aa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800623e:	4b3e      	ldr	r3, [pc, #248]	@ (8006338 <HAL_RCC_OscConfig+0x470>)
 8006240:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006242:	f003 0302 	and.w	r3, r3, #2
 8006246:	2b00      	cmp	r3, #0
 8006248:	d1ee      	bne.n	8006228 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800624a:	7dfb      	ldrb	r3, [r7, #23]
 800624c:	2b01      	cmp	r3, #1
 800624e:	d105      	bne.n	800625c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006250:	4b39      	ldr	r3, [pc, #228]	@ (8006338 <HAL_RCC_OscConfig+0x470>)
 8006252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006254:	4a38      	ldr	r2, [pc, #224]	@ (8006338 <HAL_RCC_OscConfig+0x470>)
 8006256:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800625a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	699b      	ldr	r3, [r3, #24]
 8006260:	2b00      	cmp	r3, #0
 8006262:	f000 80a1 	beq.w	80063a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006266:	4b34      	ldr	r3, [pc, #208]	@ (8006338 <HAL_RCC_OscConfig+0x470>)
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	f003 030c 	and.w	r3, r3, #12
 800626e:	2b08      	cmp	r3, #8
 8006270:	d05c      	beq.n	800632c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	699b      	ldr	r3, [r3, #24]
 8006276:	2b02      	cmp	r3, #2
 8006278:	d141      	bne.n	80062fe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800627a:	4b31      	ldr	r3, [pc, #196]	@ (8006340 <HAL_RCC_OscConfig+0x478>)
 800627c:	2200      	movs	r2, #0
 800627e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006280:	f7fd fd54 	bl	8003d2c <HAL_GetTick>
 8006284:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006286:	e008      	b.n	800629a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006288:	f7fd fd50 	bl	8003d2c <HAL_GetTick>
 800628c:	4602      	mov	r2, r0
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	1ad3      	subs	r3, r2, r3
 8006292:	2b02      	cmp	r3, #2
 8006294:	d901      	bls.n	800629a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006296:	2303      	movs	r3, #3
 8006298:	e087      	b.n	80063aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800629a:	4b27      	ldr	r3, [pc, #156]	@ (8006338 <HAL_RCC_OscConfig+0x470>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d1f0      	bne.n	8006288 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	69da      	ldr	r2, [r3, #28]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6a1b      	ldr	r3, [r3, #32]
 80062ae:	431a      	orrs	r2, r3
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062b4:	019b      	lsls	r3, r3, #6
 80062b6:	431a      	orrs	r2, r3
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062bc:	085b      	lsrs	r3, r3, #1
 80062be:	3b01      	subs	r3, #1
 80062c0:	041b      	lsls	r3, r3, #16
 80062c2:	431a      	orrs	r2, r3
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062c8:	061b      	lsls	r3, r3, #24
 80062ca:	491b      	ldr	r1, [pc, #108]	@ (8006338 <HAL_RCC_OscConfig+0x470>)
 80062cc:	4313      	orrs	r3, r2
 80062ce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80062d0:	4b1b      	ldr	r3, [pc, #108]	@ (8006340 <HAL_RCC_OscConfig+0x478>)
 80062d2:	2201      	movs	r2, #1
 80062d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062d6:	f7fd fd29 	bl	8003d2c <HAL_GetTick>
 80062da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062dc:	e008      	b.n	80062f0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062de:	f7fd fd25 	bl	8003d2c <HAL_GetTick>
 80062e2:	4602      	mov	r2, r0
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	1ad3      	subs	r3, r2, r3
 80062e8:	2b02      	cmp	r3, #2
 80062ea:	d901      	bls.n	80062f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80062ec:	2303      	movs	r3, #3
 80062ee:	e05c      	b.n	80063aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062f0:	4b11      	ldr	r3, [pc, #68]	@ (8006338 <HAL_RCC_OscConfig+0x470>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d0f0      	beq.n	80062de <HAL_RCC_OscConfig+0x416>
 80062fc:	e054      	b.n	80063a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062fe:	4b10      	ldr	r3, [pc, #64]	@ (8006340 <HAL_RCC_OscConfig+0x478>)
 8006300:	2200      	movs	r2, #0
 8006302:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006304:	f7fd fd12 	bl	8003d2c <HAL_GetTick>
 8006308:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800630a:	e008      	b.n	800631e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800630c:	f7fd fd0e 	bl	8003d2c <HAL_GetTick>
 8006310:	4602      	mov	r2, r0
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	1ad3      	subs	r3, r2, r3
 8006316:	2b02      	cmp	r3, #2
 8006318:	d901      	bls.n	800631e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800631a:	2303      	movs	r3, #3
 800631c:	e045      	b.n	80063aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800631e:	4b06      	ldr	r3, [pc, #24]	@ (8006338 <HAL_RCC_OscConfig+0x470>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006326:	2b00      	cmp	r3, #0
 8006328:	d1f0      	bne.n	800630c <HAL_RCC_OscConfig+0x444>
 800632a:	e03d      	b.n	80063a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	699b      	ldr	r3, [r3, #24]
 8006330:	2b01      	cmp	r3, #1
 8006332:	d107      	bne.n	8006344 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	e038      	b.n	80063aa <HAL_RCC_OscConfig+0x4e2>
 8006338:	40023800 	.word	0x40023800
 800633c:	40007000 	.word	0x40007000
 8006340:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006344:	4b1b      	ldr	r3, [pc, #108]	@ (80063b4 <HAL_RCC_OscConfig+0x4ec>)
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	699b      	ldr	r3, [r3, #24]
 800634e:	2b01      	cmp	r3, #1
 8006350:	d028      	beq.n	80063a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800635c:	429a      	cmp	r2, r3
 800635e:	d121      	bne.n	80063a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800636a:	429a      	cmp	r2, r3
 800636c:	d11a      	bne.n	80063a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800636e:	68fa      	ldr	r2, [r7, #12]
 8006370:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006374:	4013      	ands	r3, r2
 8006376:	687a      	ldr	r2, [r7, #4]
 8006378:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800637a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800637c:	4293      	cmp	r3, r2
 800637e:	d111      	bne.n	80063a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800638a:	085b      	lsrs	r3, r3, #1
 800638c:	3b01      	subs	r3, #1
 800638e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006390:	429a      	cmp	r2, r3
 8006392:	d107      	bne.n	80063a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800639e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d001      	beq.n	80063a8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	e000      	b.n	80063aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80063a8:	2300      	movs	r3, #0
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3718      	adds	r7, #24
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}
 80063b2:	bf00      	nop
 80063b4:	40023800 	.word	0x40023800

080063b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b084      	sub	sp, #16
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d101      	bne.n	80063cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80063c8:	2301      	movs	r3, #1
 80063ca:	e0cc      	b.n	8006566 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80063cc:	4b68      	ldr	r3, [pc, #416]	@ (8006570 <HAL_RCC_ClockConfig+0x1b8>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f003 0307 	and.w	r3, r3, #7
 80063d4:	683a      	ldr	r2, [r7, #0]
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d90c      	bls.n	80063f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063da:	4b65      	ldr	r3, [pc, #404]	@ (8006570 <HAL_RCC_ClockConfig+0x1b8>)
 80063dc:	683a      	ldr	r2, [r7, #0]
 80063de:	b2d2      	uxtb	r2, r2
 80063e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063e2:	4b63      	ldr	r3, [pc, #396]	@ (8006570 <HAL_RCC_ClockConfig+0x1b8>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f003 0307 	and.w	r3, r3, #7
 80063ea:	683a      	ldr	r2, [r7, #0]
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d001      	beq.n	80063f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	e0b8      	b.n	8006566 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f003 0302 	and.w	r3, r3, #2
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d020      	beq.n	8006442 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f003 0304 	and.w	r3, r3, #4
 8006408:	2b00      	cmp	r3, #0
 800640a:	d005      	beq.n	8006418 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800640c:	4b59      	ldr	r3, [pc, #356]	@ (8006574 <HAL_RCC_ClockConfig+0x1bc>)
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	4a58      	ldr	r2, [pc, #352]	@ (8006574 <HAL_RCC_ClockConfig+0x1bc>)
 8006412:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006416:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f003 0308 	and.w	r3, r3, #8
 8006420:	2b00      	cmp	r3, #0
 8006422:	d005      	beq.n	8006430 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006424:	4b53      	ldr	r3, [pc, #332]	@ (8006574 <HAL_RCC_ClockConfig+0x1bc>)
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	4a52      	ldr	r2, [pc, #328]	@ (8006574 <HAL_RCC_ClockConfig+0x1bc>)
 800642a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800642e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006430:	4b50      	ldr	r3, [pc, #320]	@ (8006574 <HAL_RCC_ClockConfig+0x1bc>)
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	494d      	ldr	r1, [pc, #308]	@ (8006574 <HAL_RCC_ClockConfig+0x1bc>)
 800643e:	4313      	orrs	r3, r2
 8006440:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f003 0301 	and.w	r3, r3, #1
 800644a:	2b00      	cmp	r3, #0
 800644c:	d044      	beq.n	80064d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	2b01      	cmp	r3, #1
 8006454:	d107      	bne.n	8006466 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006456:	4b47      	ldr	r3, [pc, #284]	@ (8006574 <HAL_RCC_ClockConfig+0x1bc>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800645e:	2b00      	cmp	r3, #0
 8006460:	d119      	bne.n	8006496 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	e07f      	b.n	8006566 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	2b02      	cmp	r3, #2
 800646c:	d003      	beq.n	8006476 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006472:	2b03      	cmp	r3, #3
 8006474:	d107      	bne.n	8006486 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006476:	4b3f      	ldr	r3, [pc, #252]	@ (8006574 <HAL_RCC_ClockConfig+0x1bc>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800647e:	2b00      	cmp	r3, #0
 8006480:	d109      	bne.n	8006496 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	e06f      	b.n	8006566 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006486:	4b3b      	ldr	r3, [pc, #236]	@ (8006574 <HAL_RCC_ClockConfig+0x1bc>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f003 0302 	and.w	r3, r3, #2
 800648e:	2b00      	cmp	r3, #0
 8006490:	d101      	bne.n	8006496 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	e067      	b.n	8006566 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006496:	4b37      	ldr	r3, [pc, #220]	@ (8006574 <HAL_RCC_ClockConfig+0x1bc>)
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	f023 0203 	bic.w	r2, r3, #3
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	4934      	ldr	r1, [pc, #208]	@ (8006574 <HAL_RCC_ClockConfig+0x1bc>)
 80064a4:	4313      	orrs	r3, r2
 80064a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80064a8:	f7fd fc40 	bl	8003d2c <HAL_GetTick>
 80064ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064ae:	e00a      	b.n	80064c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064b0:	f7fd fc3c 	bl	8003d2c <HAL_GetTick>
 80064b4:	4602      	mov	r2, r0
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	1ad3      	subs	r3, r2, r3
 80064ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064be:	4293      	cmp	r3, r2
 80064c0:	d901      	bls.n	80064c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80064c2:	2303      	movs	r3, #3
 80064c4:	e04f      	b.n	8006566 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064c6:	4b2b      	ldr	r3, [pc, #172]	@ (8006574 <HAL_RCC_ClockConfig+0x1bc>)
 80064c8:	689b      	ldr	r3, [r3, #8]
 80064ca:	f003 020c 	and.w	r2, r3, #12
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d1eb      	bne.n	80064b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80064d8:	4b25      	ldr	r3, [pc, #148]	@ (8006570 <HAL_RCC_ClockConfig+0x1b8>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f003 0307 	and.w	r3, r3, #7
 80064e0:	683a      	ldr	r2, [r7, #0]
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d20c      	bcs.n	8006500 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064e6:	4b22      	ldr	r3, [pc, #136]	@ (8006570 <HAL_RCC_ClockConfig+0x1b8>)
 80064e8:	683a      	ldr	r2, [r7, #0]
 80064ea:	b2d2      	uxtb	r2, r2
 80064ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064ee:	4b20      	ldr	r3, [pc, #128]	@ (8006570 <HAL_RCC_ClockConfig+0x1b8>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f003 0307 	and.w	r3, r3, #7
 80064f6:	683a      	ldr	r2, [r7, #0]
 80064f8:	429a      	cmp	r2, r3
 80064fa:	d001      	beq.n	8006500 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80064fc:	2301      	movs	r3, #1
 80064fe:	e032      	b.n	8006566 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f003 0304 	and.w	r3, r3, #4
 8006508:	2b00      	cmp	r3, #0
 800650a:	d008      	beq.n	800651e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800650c:	4b19      	ldr	r3, [pc, #100]	@ (8006574 <HAL_RCC_ClockConfig+0x1bc>)
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	68db      	ldr	r3, [r3, #12]
 8006518:	4916      	ldr	r1, [pc, #88]	@ (8006574 <HAL_RCC_ClockConfig+0x1bc>)
 800651a:	4313      	orrs	r3, r2
 800651c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f003 0308 	and.w	r3, r3, #8
 8006526:	2b00      	cmp	r3, #0
 8006528:	d009      	beq.n	800653e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800652a:	4b12      	ldr	r3, [pc, #72]	@ (8006574 <HAL_RCC_ClockConfig+0x1bc>)
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	00db      	lsls	r3, r3, #3
 8006538:	490e      	ldr	r1, [pc, #56]	@ (8006574 <HAL_RCC_ClockConfig+0x1bc>)
 800653a:	4313      	orrs	r3, r2
 800653c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800653e:	f000 f821 	bl	8006584 <HAL_RCC_GetSysClockFreq>
 8006542:	4602      	mov	r2, r0
 8006544:	4b0b      	ldr	r3, [pc, #44]	@ (8006574 <HAL_RCC_ClockConfig+0x1bc>)
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	091b      	lsrs	r3, r3, #4
 800654a:	f003 030f 	and.w	r3, r3, #15
 800654e:	490a      	ldr	r1, [pc, #40]	@ (8006578 <HAL_RCC_ClockConfig+0x1c0>)
 8006550:	5ccb      	ldrb	r3, [r1, r3]
 8006552:	fa22 f303 	lsr.w	r3, r2, r3
 8006556:	4a09      	ldr	r2, [pc, #36]	@ (800657c <HAL_RCC_ClockConfig+0x1c4>)
 8006558:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800655a:	4b09      	ldr	r3, [pc, #36]	@ (8006580 <HAL_RCC_ClockConfig+0x1c8>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4618      	mov	r0, r3
 8006560:	f7fd fba0 	bl	8003ca4 <HAL_InitTick>

  return HAL_OK;
 8006564:	2300      	movs	r3, #0
}
 8006566:	4618      	mov	r0, r3
 8006568:	3710      	adds	r7, #16
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}
 800656e:	bf00      	nop
 8006570:	40023c00 	.word	0x40023c00
 8006574:	40023800 	.word	0x40023800
 8006578:	0800ab1c 	.word	0x0800ab1c
 800657c:	20000000 	.word	0x20000000
 8006580:	20000004 	.word	0x20000004

08006584 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006584:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006588:	b090      	sub	sp, #64	@ 0x40
 800658a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800658c:	2300      	movs	r3, #0
 800658e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8006590:	2300      	movs	r3, #0
 8006592:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8006594:	2300      	movs	r3, #0
 8006596:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8006598:	2300      	movs	r3, #0
 800659a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800659c:	4b59      	ldr	r3, [pc, #356]	@ (8006704 <HAL_RCC_GetSysClockFreq+0x180>)
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	f003 030c 	and.w	r3, r3, #12
 80065a4:	2b08      	cmp	r3, #8
 80065a6:	d00d      	beq.n	80065c4 <HAL_RCC_GetSysClockFreq+0x40>
 80065a8:	2b08      	cmp	r3, #8
 80065aa:	f200 80a1 	bhi.w	80066f0 <HAL_RCC_GetSysClockFreq+0x16c>
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d002      	beq.n	80065b8 <HAL_RCC_GetSysClockFreq+0x34>
 80065b2:	2b04      	cmp	r3, #4
 80065b4:	d003      	beq.n	80065be <HAL_RCC_GetSysClockFreq+0x3a>
 80065b6:	e09b      	b.n	80066f0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80065b8:	4b53      	ldr	r3, [pc, #332]	@ (8006708 <HAL_RCC_GetSysClockFreq+0x184>)
 80065ba:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80065bc:	e09b      	b.n	80066f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80065be:	4b53      	ldr	r3, [pc, #332]	@ (800670c <HAL_RCC_GetSysClockFreq+0x188>)
 80065c0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80065c2:	e098      	b.n	80066f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80065c4:	4b4f      	ldr	r3, [pc, #316]	@ (8006704 <HAL_RCC_GetSysClockFreq+0x180>)
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80065cc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80065ce:	4b4d      	ldr	r3, [pc, #308]	@ (8006704 <HAL_RCC_GetSysClockFreq+0x180>)
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d028      	beq.n	800662c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80065da:	4b4a      	ldr	r3, [pc, #296]	@ (8006704 <HAL_RCC_GetSysClockFreq+0x180>)
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	099b      	lsrs	r3, r3, #6
 80065e0:	2200      	movs	r2, #0
 80065e2:	623b      	str	r3, [r7, #32]
 80065e4:	627a      	str	r2, [r7, #36]	@ 0x24
 80065e6:	6a3b      	ldr	r3, [r7, #32]
 80065e8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80065ec:	2100      	movs	r1, #0
 80065ee:	4b47      	ldr	r3, [pc, #284]	@ (800670c <HAL_RCC_GetSysClockFreq+0x188>)
 80065f0:	fb03 f201 	mul.w	r2, r3, r1
 80065f4:	2300      	movs	r3, #0
 80065f6:	fb00 f303 	mul.w	r3, r0, r3
 80065fa:	4413      	add	r3, r2
 80065fc:	4a43      	ldr	r2, [pc, #268]	@ (800670c <HAL_RCC_GetSysClockFreq+0x188>)
 80065fe:	fba0 1202 	umull	r1, r2, r0, r2
 8006602:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006604:	460a      	mov	r2, r1
 8006606:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006608:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800660a:	4413      	add	r3, r2
 800660c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800660e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006610:	2200      	movs	r2, #0
 8006612:	61bb      	str	r3, [r7, #24]
 8006614:	61fa      	str	r2, [r7, #28]
 8006616:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800661a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800661e:	f7fa fb1b 	bl	8000c58 <__aeabi_uldivmod>
 8006622:	4602      	mov	r2, r0
 8006624:	460b      	mov	r3, r1
 8006626:	4613      	mov	r3, r2
 8006628:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800662a:	e053      	b.n	80066d4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800662c:	4b35      	ldr	r3, [pc, #212]	@ (8006704 <HAL_RCC_GetSysClockFreq+0x180>)
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	099b      	lsrs	r3, r3, #6
 8006632:	2200      	movs	r2, #0
 8006634:	613b      	str	r3, [r7, #16]
 8006636:	617a      	str	r2, [r7, #20]
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800663e:	f04f 0b00 	mov.w	fp, #0
 8006642:	4652      	mov	r2, sl
 8006644:	465b      	mov	r3, fp
 8006646:	f04f 0000 	mov.w	r0, #0
 800664a:	f04f 0100 	mov.w	r1, #0
 800664e:	0159      	lsls	r1, r3, #5
 8006650:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006654:	0150      	lsls	r0, r2, #5
 8006656:	4602      	mov	r2, r0
 8006658:	460b      	mov	r3, r1
 800665a:	ebb2 080a 	subs.w	r8, r2, sl
 800665e:	eb63 090b 	sbc.w	r9, r3, fp
 8006662:	f04f 0200 	mov.w	r2, #0
 8006666:	f04f 0300 	mov.w	r3, #0
 800666a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800666e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006672:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006676:	ebb2 0408 	subs.w	r4, r2, r8
 800667a:	eb63 0509 	sbc.w	r5, r3, r9
 800667e:	f04f 0200 	mov.w	r2, #0
 8006682:	f04f 0300 	mov.w	r3, #0
 8006686:	00eb      	lsls	r3, r5, #3
 8006688:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800668c:	00e2      	lsls	r2, r4, #3
 800668e:	4614      	mov	r4, r2
 8006690:	461d      	mov	r5, r3
 8006692:	eb14 030a 	adds.w	r3, r4, sl
 8006696:	603b      	str	r3, [r7, #0]
 8006698:	eb45 030b 	adc.w	r3, r5, fp
 800669c:	607b      	str	r3, [r7, #4]
 800669e:	f04f 0200 	mov.w	r2, #0
 80066a2:	f04f 0300 	mov.w	r3, #0
 80066a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80066aa:	4629      	mov	r1, r5
 80066ac:	028b      	lsls	r3, r1, #10
 80066ae:	4621      	mov	r1, r4
 80066b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80066b4:	4621      	mov	r1, r4
 80066b6:	028a      	lsls	r2, r1, #10
 80066b8:	4610      	mov	r0, r2
 80066ba:	4619      	mov	r1, r3
 80066bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066be:	2200      	movs	r2, #0
 80066c0:	60bb      	str	r3, [r7, #8]
 80066c2:	60fa      	str	r2, [r7, #12]
 80066c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80066c8:	f7fa fac6 	bl	8000c58 <__aeabi_uldivmod>
 80066cc:	4602      	mov	r2, r0
 80066ce:	460b      	mov	r3, r1
 80066d0:	4613      	mov	r3, r2
 80066d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80066d4:	4b0b      	ldr	r3, [pc, #44]	@ (8006704 <HAL_RCC_GetSysClockFreq+0x180>)
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	0c1b      	lsrs	r3, r3, #16
 80066da:	f003 0303 	and.w	r3, r3, #3
 80066de:	3301      	adds	r3, #1
 80066e0:	005b      	lsls	r3, r3, #1
 80066e2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80066e4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80066e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80066ec:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80066ee:	e002      	b.n	80066f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80066f0:	4b05      	ldr	r3, [pc, #20]	@ (8006708 <HAL_RCC_GetSysClockFreq+0x184>)
 80066f2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80066f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80066f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3740      	adds	r7, #64	@ 0x40
 80066fc:	46bd      	mov	sp, r7
 80066fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006702:	bf00      	nop
 8006704:	40023800 	.word	0x40023800
 8006708:	00f42400 	.word	0x00f42400
 800670c:	017d7840 	.word	0x017d7840

08006710 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006710:	b480      	push	{r7}
 8006712:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006714:	4b03      	ldr	r3, [pc, #12]	@ (8006724 <HAL_RCC_GetHCLKFreq+0x14>)
 8006716:	681b      	ldr	r3, [r3, #0]
}
 8006718:	4618      	mov	r0, r3
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr
 8006722:	bf00      	nop
 8006724:	20000000 	.word	0x20000000

08006728 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800672c:	f7ff fff0 	bl	8006710 <HAL_RCC_GetHCLKFreq>
 8006730:	4602      	mov	r2, r0
 8006732:	4b05      	ldr	r3, [pc, #20]	@ (8006748 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006734:	689b      	ldr	r3, [r3, #8]
 8006736:	0a9b      	lsrs	r3, r3, #10
 8006738:	f003 0307 	and.w	r3, r3, #7
 800673c:	4903      	ldr	r1, [pc, #12]	@ (800674c <HAL_RCC_GetPCLK1Freq+0x24>)
 800673e:	5ccb      	ldrb	r3, [r1, r3]
 8006740:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006744:	4618      	mov	r0, r3
 8006746:	bd80      	pop	{r7, pc}
 8006748:	40023800 	.word	0x40023800
 800674c:	0800ab2c 	.word	0x0800ab2c

08006750 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006754:	f7ff ffdc 	bl	8006710 <HAL_RCC_GetHCLKFreq>
 8006758:	4602      	mov	r2, r0
 800675a:	4b05      	ldr	r3, [pc, #20]	@ (8006770 <HAL_RCC_GetPCLK2Freq+0x20>)
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	0b5b      	lsrs	r3, r3, #13
 8006760:	f003 0307 	and.w	r3, r3, #7
 8006764:	4903      	ldr	r1, [pc, #12]	@ (8006774 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006766:	5ccb      	ldrb	r3, [r1, r3]
 8006768:	fa22 f303 	lsr.w	r3, r2, r3
}
 800676c:	4618      	mov	r0, r3
 800676e:	bd80      	pop	{r7, pc}
 8006770:	40023800 	.word	0x40023800
 8006774:	0800ab2c 	.word	0x0800ab2c

08006778 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b082      	sub	sp, #8
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d101      	bne.n	800678a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006786:	2301      	movs	r3, #1
 8006788:	e041      	b.n	800680e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006790:	b2db      	uxtb	r3, r3
 8006792:	2b00      	cmp	r3, #0
 8006794:	d106      	bne.n	80067a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2200      	movs	r2, #0
 800679a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f7fd f9a0 	bl	8003ae4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2202      	movs	r2, #2
 80067a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	3304      	adds	r3, #4
 80067b4:	4619      	mov	r1, r3
 80067b6:	4610      	mov	r0, r2
 80067b8:	f000 f950 	bl	8006a5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2201      	movs	r2, #1
 80067c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2201      	movs	r2, #1
 80067c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2201      	movs	r2, #1
 80067d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2201      	movs	r2, #1
 80067d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2201      	movs	r2, #1
 80067e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2201      	movs	r2, #1
 80067e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2201      	movs	r2, #1
 80067f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2201      	movs	r2, #1
 80067f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2201      	movs	r2, #1
 8006800:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2201      	movs	r2, #1
 8006808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800680c:	2300      	movs	r3, #0
}
 800680e:	4618      	mov	r0, r3
 8006810:	3708      	adds	r7, #8
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}
	...

08006818 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006818:	b480      	push	{r7}
 800681a:	b085      	sub	sp, #20
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006826:	b2db      	uxtb	r3, r3
 8006828:	2b01      	cmp	r3, #1
 800682a:	d001      	beq.n	8006830 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800682c:	2301      	movs	r3, #1
 800682e:	e03c      	b.n	80068aa <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2202      	movs	r2, #2
 8006834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a1e      	ldr	r2, [pc, #120]	@ (80068b8 <HAL_TIM_Base_Start+0xa0>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d018      	beq.n	8006874 <HAL_TIM_Base_Start+0x5c>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800684a:	d013      	beq.n	8006874 <HAL_TIM_Base_Start+0x5c>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a1a      	ldr	r2, [pc, #104]	@ (80068bc <HAL_TIM_Base_Start+0xa4>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d00e      	beq.n	8006874 <HAL_TIM_Base_Start+0x5c>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a19      	ldr	r2, [pc, #100]	@ (80068c0 <HAL_TIM_Base_Start+0xa8>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d009      	beq.n	8006874 <HAL_TIM_Base_Start+0x5c>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a17      	ldr	r2, [pc, #92]	@ (80068c4 <HAL_TIM_Base_Start+0xac>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d004      	beq.n	8006874 <HAL_TIM_Base_Start+0x5c>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a16      	ldr	r2, [pc, #88]	@ (80068c8 <HAL_TIM_Base_Start+0xb0>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d111      	bne.n	8006898 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	f003 0307 	and.w	r3, r3, #7
 800687e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2b06      	cmp	r3, #6
 8006884:	d010      	beq.n	80068a8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	681a      	ldr	r2, [r3, #0]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f042 0201 	orr.w	r2, r2, #1
 8006894:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006896:	e007      	b.n	80068a8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	681a      	ldr	r2, [r3, #0]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f042 0201 	orr.w	r2, r2, #1
 80068a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80068a8:	2300      	movs	r3, #0
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3714      	adds	r7, #20
 80068ae:	46bd      	mov	sp, r7
 80068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b4:	4770      	bx	lr
 80068b6:	bf00      	nop
 80068b8:	40010000 	.word	0x40010000
 80068bc:	40000400 	.word	0x40000400
 80068c0:	40000800 	.word	0x40000800
 80068c4:	40000c00 	.word	0x40000c00
 80068c8:	40014000 	.word	0x40014000

080068cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b084      	sub	sp, #16
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80068d6:	2300      	movs	r3, #0
 80068d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d101      	bne.n	80068e8 <HAL_TIM_ConfigClockSource+0x1c>
 80068e4:	2302      	movs	r3, #2
 80068e6:	e0b4      	b.n	8006a52 <HAL_TIM_ConfigClockSource+0x186>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2201      	movs	r2, #1
 80068ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2202      	movs	r2, #2
 80068f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006906:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800690e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	68ba      	ldr	r2, [r7, #8]
 8006916:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006920:	d03e      	beq.n	80069a0 <HAL_TIM_ConfigClockSource+0xd4>
 8006922:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006926:	f200 8087 	bhi.w	8006a38 <HAL_TIM_ConfigClockSource+0x16c>
 800692a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800692e:	f000 8086 	beq.w	8006a3e <HAL_TIM_ConfigClockSource+0x172>
 8006932:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006936:	d87f      	bhi.n	8006a38 <HAL_TIM_ConfigClockSource+0x16c>
 8006938:	2b70      	cmp	r3, #112	@ 0x70
 800693a:	d01a      	beq.n	8006972 <HAL_TIM_ConfigClockSource+0xa6>
 800693c:	2b70      	cmp	r3, #112	@ 0x70
 800693e:	d87b      	bhi.n	8006a38 <HAL_TIM_ConfigClockSource+0x16c>
 8006940:	2b60      	cmp	r3, #96	@ 0x60
 8006942:	d050      	beq.n	80069e6 <HAL_TIM_ConfigClockSource+0x11a>
 8006944:	2b60      	cmp	r3, #96	@ 0x60
 8006946:	d877      	bhi.n	8006a38 <HAL_TIM_ConfigClockSource+0x16c>
 8006948:	2b50      	cmp	r3, #80	@ 0x50
 800694a:	d03c      	beq.n	80069c6 <HAL_TIM_ConfigClockSource+0xfa>
 800694c:	2b50      	cmp	r3, #80	@ 0x50
 800694e:	d873      	bhi.n	8006a38 <HAL_TIM_ConfigClockSource+0x16c>
 8006950:	2b40      	cmp	r3, #64	@ 0x40
 8006952:	d058      	beq.n	8006a06 <HAL_TIM_ConfigClockSource+0x13a>
 8006954:	2b40      	cmp	r3, #64	@ 0x40
 8006956:	d86f      	bhi.n	8006a38 <HAL_TIM_ConfigClockSource+0x16c>
 8006958:	2b30      	cmp	r3, #48	@ 0x30
 800695a:	d064      	beq.n	8006a26 <HAL_TIM_ConfigClockSource+0x15a>
 800695c:	2b30      	cmp	r3, #48	@ 0x30
 800695e:	d86b      	bhi.n	8006a38 <HAL_TIM_ConfigClockSource+0x16c>
 8006960:	2b20      	cmp	r3, #32
 8006962:	d060      	beq.n	8006a26 <HAL_TIM_ConfigClockSource+0x15a>
 8006964:	2b20      	cmp	r3, #32
 8006966:	d867      	bhi.n	8006a38 <HAL_TIM_ConfigClockSource+0x16c>
 8006968:	2b00      	cmp	r3, #0
 800696a:	d05c      	beq.n	8006a26 <HAL_TIM_ConfigClockSource+0x15a>
 800696c:	2b10      	cmp	r3, #16
 800696e:	d05a      	beq.n	8006a26 <HAL_TIM_ConfigClockSource+0x15a>
 8006970:	e062      	b.n	8006a38 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006982:	f000 f96b 	bl	8006c5c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006994:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	68ba      	ldr	r2, [r7, #8]
 800699c:	609a      	str	r2, [r3, #8]
      break;
 800699e:	e04f      	b.n	8006a40 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80069b0:	f000 f954 	bl	8006c5c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	689a      	ldr	r2, [r3, #8]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80069c2:	609a      	str	r2, [r3, #8]
      break;
 80069c4:	e03c      	b.n	8006a40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80069d2:	461a      	mov	r2, r3
 80069d4:	f000 f8c8 	bl	8006b68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	2150      	movs	r1, #80	@ 0x50
 80069de:	4618      	mov	r0, r3
 80069e0:	f000 f921 	bl	8006c26 <TIM_ITRx_SetConfig>
      break;
 80069e4:	e02c      	b.n	8006a40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80069f2:	461a      	mov	r2, r3
 80069f4:	f000 f8e7 	bl	8006bc6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	2160      	movs	r1, #96	@ 0x60
 80069fe:	4618      	mov	r0, r3
 8006a00:	f000 f911 	bl	8006c26 <TIM_ITRx_SetConfig>
      break;
 8006a04:	e01c      	b.n	8006a40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a12:	461a      	mov	r2, r3
 8006a14:	f000 f8a8 	bl	8006b68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	2140      	movs	r1, #64	@ 0x40
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f000 f901 	bl	8006c26 <TIM_ITRx_SetConfig>
      break;
 8006a24:	e00c      	b.n	8006a40 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4619      	mov	r1, r3
 8006a30:	4610      	mov	r0, r2
 8006a32:	f000 f8f8 	bl	8006c26 <TIM_ITRx_SetConfig>
      break;
 8006a36:	e003      	b.n	8006a40 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	73fb      	strb	r3, [r7, #15]
      break;
 8006a3c:	e000      	b.n	8006a40 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006a3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2201      	movs	r2, #1
 8006a44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3710      	adds	r7, #16
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}
	...

08006a5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b085      	sub	sp, #20
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	4a37      	ldr	r2, [pc, #220]	@ (8006b4c <TIM_Base_SetConfig+0xf0>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d00f      	beq.n	8006a94 <TIM_Base_SetConfig+0x38>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a7a:	d00b      	beq.n	8006a94 <TIM_Base_SetConfig+0x38>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	4a34      	ldr	r2, [pc, #208]	@ (8006b50 <TIM_Base_SetConfig+0xf4>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d007      	beq.n	8006a94 <TIM_Base_SetConfig+0x38>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	4a33      	ldr	r2, [pc, #204]	@ (8006b54 <TIM_Base_SetConfig+0xf8>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d003      	beq.n	8006a94 <TIM_Base_SetConfig+0x38>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	4a32      	ldr	r2, [pc, #200]	@ (8006b58 <TIM_Base_SetConfig+0xfc>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d108      	bne.n	8006aa6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	68fa      	ldr	r2, [r7, #12]
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	4a28      	ldr	r2, [pc, #160]	@ (8006b4c <TIM_Base_SetConfig+0xf0>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d01b      	beq.n	8006ae6 <TIM_Base_SetConfig+0x8a>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ab4:	d017      	beq.n	8006ae6 <TIM_Base_SetConfig+0x8a>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	4a25      	ldr	r2, [pc, #148]	@ (8006b50 <TIM_Base_SetConfig+0xf4>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d013      	beq.n	8006ae6 <TIM_Base_SetConfig+0x8a>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	4a24      	ldr	r2, [pc, #144]	@ (8006b54 <TIM_Base_SetConfig+0xf8>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d00f      	beq.n	8006ae6 <TIM_Base_SetConfig+0x8a>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	4a23      	ldr	r2, [pc, #140]	@ (8006b58 <TIM_Base_SetConfig+0xfc>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d00b      	beq.n	8006ae6 <TIM_Base_SetConfig+0x8a>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	4a22      	ldr	r2, [pc, #136]	@ (8006b5c <TIM_Base_SetConfig+0x100>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d007      	beq.n	8006ae6 <TIM_Base_SetConfig+0x8a>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	4a21      	ldr	r2, [pc, #132]	@ (8006b60 <TIM_Base_SetConfig+0x104>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d003      	beq.n	8006ae6 <TIM_Base_SetConfig+0x8a>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	4a20      	ldr	r2, [pc, #128]	@ (8006b64 <TIM_Base_SetConfig+0x108>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d108      	bne.n	8006af8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006aec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	68db      	ldr	r3, [r3, #12]
 8006af2:	68fa      	ldr	r2, [r7, #12]
 8006af4:	4313      	orrs	r3, r2
 8006af6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	695b      	ldr	r3, [r3, #20]
 8006b02:	4313      	orrs	r3, r2
 8006b04:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	689a      	ldr	r2, [r3, #8]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	4a0c      	ldr	r2, [pc, #48]	@ (8006b4c <TIM_Base_SetConfig+0xf0>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d103      	bne.n	8006b26 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	691a      	ldr	r2, [r3, #16]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f043 0204 	orr.w	r2, r3, #4
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2201      	movs	r2, #1
 8006b36:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	68fa      	ldr	r2, [r7, #12]
 8006b3c:	601a      	str	r2, [r3, #0]
}
 8006b3e:	bf00      	nop
 8006b40:	3714      	adds	r7, #20
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr
 8006b4a:	bf00      	nop
 8006b4c:	40010000 	.word	0x40010000
 8006b50:	40000400 	.word	0x40000400
 8006b54:	40000800 	.word	0x40000800
 8006b58:	40000c00 	.word	0x40000c00
 8006b5c:	40014000 	.word	0x40014000
 8006b60:	40014400 	.word	0x40014400
 8006b64:	40014800 	.word	0x40014800

08006b68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b087      	sub	sp, #28
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	60f8      	str	r0, [r7, #12]
 8006b70:	60b9      	str	r1, [r7, #8]
 8006b72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	6a1b      	ldr	r3, [r3, #32]
 8006b78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	6a1b      	ldr	r3, [r3, #32]
 8006b7e:	f023 0201 	bic.w	r2, r3, #1
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	699b      	ldr	r3, [r3, #24]
 8006b8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006b92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	011b      	lsls	r3, r3, #4
 8006b98:	693a      	ldr	r2, [r7, #16]
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	f023 030a 	bic.w	r3, r3, #10
 8006ba4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006ba6:	697a      	ldr	r2, [r7, #20]
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	693a      	ldr	r2, [r7, #16]
 8006bb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	697a      	ldr	r2, [r7, #20]
 8006bb8:	621a      	str	r2, [r3, #32]
}
 8006bba:	bf00      	nop
 8006bbc:	371c      	adds	r7, #28
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc4:	4770      	bx	lr

08006bc6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bc6:	b480      	push	{r7}
 8006bc8:	b087      	sub	sp, #28
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	60f8      	str	r0, [r7, #12]
 8006bce:	60b9      	str	r1, [r7, #8]
 8006bd0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	6a1b      	ldr	r3, [r3, #32]
 8006bd6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	6a1b      	ldr	r3, [r3, #32]
 8006bdc:	f023 0210 	bic.w	r2, r3, #16
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	699b      	ldr	r3, [r3, #24]
 8006be8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006bf0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	031b      	lsls	r3, r3, #12
 8006bf6:	693a      	ldr	r2, [r7, #16]
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006c02:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	011b      	lsls	r3, r3, #4
 8006c08:	697a      	ldr	r2, [r7, #20]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	693a      	ldr	r2, [r7, #16]
 8006c12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	697a      	ldr	r2, [r7, #20]
 8006c18:	621a      	str	r2, [r3, #32]
}
 8006c1a:	bf00      	nop
 8006c1c:	371c      	adds	r7, #28
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c24:	4770      	bx	lr

08006c26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c26:	b480      	push	{r7}
 8006c28:	b085      	sub	sp, #20
 8006c2a:	af00      	add	r7, sp, #0
 8006c2c:	6078      	str	r0, [r7, #4]
 8006c2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c3e:	683a      	ldr	r2, [r7, #0]
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	4313      	orrs	r3, r2
 8006c44:	f043 0307 	orr.w	r3, r3, #7
 8006c48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	68fa      	ldr	r2, [r7, #12]
 8006c4e:	609a      	str	r2, [r3, #8]
}
 8006c50:	bf00      	nop
 8006c52:	3714      	adds	r7, #20
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr

08006c5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b087      	sub	sp, #28
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	60f8      	str	r0, [r7, #12]
 8006c64:	60b9      	str	r1, [r7, #8]
 8006c66:	607a      	str	r2, [r7, #4]
 8006c68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006c76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	021a      	lsls	r2, r3, #8
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	431a      	orrs	r2, r3
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	4313      	orrs	r3, r2
 8006c84:	697a      	ldr	r2, [r7, #20]
 8006c86:	4313      	orrs	r3, r2
 8006c88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	697a      	ldr	r2, [r7, #20]
 8006c8e:	609a      	str	r2, [r3, #8]
}
 8006c90:	bf00      	nop
 8006c92:	371c      	adds	r7, #28
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr

08006c9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b085      	sub	sp, #20
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	d101      	bne.n	8006cb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006cb0:	2302      	movs	r3, #2
 8006cb2:	e050      	b.n	8006d56 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2202      	movs	r2, #2
 8006cc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	689b      	ldr	r3, [r3, #8]
 8006cd2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	68fa      	ldr	r2, [r7, #12]
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	68fa      	ldr	r2, [r7, #12]
 8006cec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a1c      	ldr	r2, [pc, #112]	@ (8006d64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d018      	beq.n	8006d2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d00:	d013      	beq.n	8006d2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a18      	ldr	r2, [pc, #96]	@ (8006d68 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d00e      	beq.n	8006d2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a16      	ldr	r2, [pc, #88]	@ (8006d6c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d009      	beq.n	8006d2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a15      	ldr	r2, [pc, #84]	@ (8006d70 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d004      	beq.n	8006d2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a13      	ldr	r2, [pc, #76]	@ (8006d74 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d10c      	bne.n	8006d44 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	68ba      	ldr	r2, [r7, #8]
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	68ba      	ldr	r2, [r7, #8]
 8006d42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2201      	movs	r2, #1
 8006d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006d54:	2300      	movs	r3, #0
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3714      	adds	r7, #20
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr
 8006d62:	bf00      	nop
 8006d64:	40010000 	.word	0x40010000
 8006d68:	40000400 	.word	0x40000400
 8006d6c:	40000800 	.word	0x40000800
 8006d70:	40000c00 	.word	0x40000c00
 8006d74:	40014000 	.word	0x40014000

08006d78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b082      	sub	sp, #8
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d101      	bne.n	8006d8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d86:	2301      	movs	r3, #1
 8006d88:	e042      	b.n	8006e10 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d90:	b2db      	uxtb	r3, r3
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d106      	bne.n	8006da4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f7fc feec 	bl	8003b7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2224      	movs	r2, #36	@ 0x24
 8006da8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	68da      	ldr	r2, [r3, #12]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006dba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f000 f82b 	bl	8006e18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	691a      	ldr	r2, [r3, #16]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006dd0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	695a      	ldr	r2, [r3, #20]
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006de0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	68da      	ldr	r2, [r3, #12]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006df0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2200      	movs	r2, #0
 8006df6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2220      	movs	r2, #32
 8006dfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2220      	movs	r2, #32
 8006e04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006e0e:	2300      	movs	r3, #0
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3708      	adds	r7, #8
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e1c:	b0c0      	sub	sp, #256	@ 0x100
 8006e1e:	af00      	add	r7, sp, #0
 8006e20:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	691b      	ldr	r3, [r3, #16]
 8006e2c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e34:	68d9      	ldr	r1, [r3, #12]
 8006e36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e3a:	681a      	ldr	r2, [r3, #0]
 8006e3c:	ea40 0301 	orr.w	r3, r0, r1
 8006e40:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e46:	689a      	ldr	r2, [r3, #8]
 8006e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e4c:	691b      	ldr	r3, [r3, #16]
 8006e4e:	431a      	orrs	r2, r3
 8006e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e54:	695b      	ldr	r3, [r3, #20]
 8006e56:	431a      	orrs	r2, r3
 8006e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e5c:	69db      	ldr	r3, [r3, #28]
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	68db      	ldr	r3, [r3, #12]
 8006e6c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006e70:	f021 010c 	bic.w	r1, r1, #12
 8006e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e78:	681a      	ldr	r2, [r3, #0]
 8006e7a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006e7e:	430b      	orrs	r3, r1
 8006e80:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006e82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	695b      	ldr	r3, [r3, #20]
 8006e8a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006e8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e92:	6999      	ldr	r1, [r3, #24]
 8006e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	ea40 0301 	orr.w	r3, r0, r1
 8006e9e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ea4:	681a      	ldr	r2, [r3, #0]
 8006ea6:	4b8f      	ldr	r3, [pc, #572]	@ (80070e4 <UART_SetConfig+0x2cc>)
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	d005      	beq.n	8006eb8 <UART_SetConfig+0xa0>
 8006eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006eb0:	681a      	ldr	r2, [r3, #0]
 8006eb2:	4b8d      	ldr	r3, [pc, #564]	@ (80070e8 <UART_SetConfig+0x2d0>)
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d104      	bne.n	8006ec2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006eb8:	f7ff fc4a 	bl	8006750 <HAL_RCC_GetPCLK2Freq>
 8006ebc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006ec0:	e003      	b.n	8006eca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006ec2:	f7ff fc31 	bl	8006728 <HAL_RCC_GetPCLK1Freq>
 8006ec6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006eca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ece:	69db      	ldr	r3, [r3, #28]
 8006ed0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ed4:	f040 810c 	bne.w	80070f0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006ed8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006edc:	2200      	movs	r2, #0
 8006ede:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006ee2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006ee6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006eea:	4622      	mov	r2, r4
 8006eec:	462b      	mov	r3, r5
 8006eee:	1891      	adds	r1, r2, r2
 8006ef0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006ef2:	415b      	adcs	r3, r3
 8006ef4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006ef6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006efa:	4621      	mov	r1, r4
 8006efc:	eb12 0801 	adds.w	r8, r2, r1
 8006f00:	4629      	mov	r1, r5
 8006f02:	eb43 0901 	adc.w	r9, r3, r1
 8006f06:	f04f 0200 	mov.w	r2, #0
 8006f0a:	f04f 0300 	mov.w	r3, #0
 8006f0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006f12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006f16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006f1a:	4690      	mov	r8, r2
 8006f1c:	4699      	mov	r9, r3
 8006f1e:	4623      	mov	r3, r4
 8006f20:	eb18 0303 	adds.w	r3, r8, r3
 8006f24:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006f28:	462b      	mov	r3, r5
 8006f2a:	eb49 0303 	adc.w	r3, r9, r3
 8006f2e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006f32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006f3e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006f42:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006f46:	460b      	mov	r3, r1
 8006f48:	18db      	adds	r3, r3, r3
 8006f4a:	653b      	str	r3, [r7, #80]	@ 0x50
 8006f4c:	4613      	mov	r3, r2
 8006f4e:	eb42 0303 	adc.w	r3, r2, r3
 8006f52:	657b      	str	r3, [r7, #84]	@ 0x54
 8006f54:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006f58:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006f5c:	f7f9 fe7c 	bl	8000c58 <__aeabi_uldivmod>
 8006f60:	4602      	mov	r2, r0
 8006f62:	460b      	mov	r3, r1
 8006f64:	4b61      	ldr	r3, [pc, #388]	@ (80070ec <UART_SetConfig+0x2d4>)
 8006f66:	fba3 2302 	umull	r2, r3, r3, r2
 8006f6a:	095b      	lsrs	r3, r3, #5
 8006f6c:	011c      	lsls	r4, r3, #4
 8006f6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f72:	2200      	movs	r2, #0
 8006f74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006f78:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006f7c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006f80:	4642      	mov	r2, r8
 8006f82:	464b      	mov	r3, r9
 8006f84:	1891      	adds	r1, r2, r2
 8006f86:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006f88:	415b      	adcs	r3, r3
 8006f8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f8c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006f90:	4641      	mov	r1, r8
 8006f92:	eb12 0a01 	adds.w	sl, r2, r1
 8006f96:	4649      	mov	r1, r9
 8006f98:	eb43 0b01 	adc.w	fp, r3, r1
 8006f9c:	f04f 0200 	mov.w	r2, #0
 8006fa0:	f04f 0300 	mov.w	r3, #0
 8006fa4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006fa8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006fac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006fb0:	4692      	mov	sl, r2
 8006fb2:	469b      	mov	fp, r3
 8006fb4:	4643      	mov	r3, r8
 8006fb6:	eb1a 0303 	adds.w	r3, sl, r3
 8006fba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006fbe:	464b      	mov	r3, r9
 8006fc0:	eb4b 0303 	adc.w	r3, fp, r3
 8006fc4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006fd4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006fd8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006fdc:	460b      	mov	r3, r1
 8006fde:	18db      	adds	r3, r3, r3
 8006fe0:	643b      	str	r3, [r7, #64]	@ 0x40
 8006fe2:	4613      	mov	r3, r2
 8006fe4:	eb42 0303 	adc.w	r3, r2, r3
 8006fe8:	647b      	str	r3, [r7, #68]	@ 0x44
 8006fea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006fee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006ff2:	f7f9 fe31 	bl	8000c58 <__aeabi_uldivmod>
 8006ff6:	4602      	mov	r2, r0
 8006ff8:	460b      	mov	r3, r1
 8006ffa:	4611      	mov	r1, r2
 8006ffc:	4b3b      	ldr	r3, [pc, #236]	@ (80070ec <UART_SetConfig+0x2d4>)
 8006ffe:	fba3 2301 	umull	r2, r3, r3, r1
 8007002:	095b      	lsrs	r3, r3, #5
 8007004:	2264      	movs	r2, #100	@ 0x64
 8007006:	fb02 f303 	mul.w	r3, r2, r3
 800700a:	1acb      	subs	r3, r1, r3
 800700c:	00db      	lsls	r3, r3, #3
 800700e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007012:	4b36      	ldr	r3, [pc, #216]	@ (80070ec <UART_SetConfig+0x2d4>)
 8007014:	fba3 2302 	umull	r2, r3, r3, r2
 8007018:	095b      	lsrs	r3, r3, #5
 800701a:	005b      	lsls	r3, r3, #1
 800701c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007020:	441c      	add	r4, r3
 8007022:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007026:	2200      	movs	r2, #0
 8007028:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800702c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007030:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007034:	4642      	mov	r2, r8
 8007036:	464b      	mov	r3, r9
 8007038:	1891      	adds	r1, r2, r2
 800703a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800703c:	415b      	adcs	r3, r3
 800703e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007040:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007044:	4641      	mov	r1, r8
 8007046:	1851      	adds	r1, r2, r1
 8007048:	6339      	str	r1, [r7, #48]	@ 0x30
 800704a:	4649      	mov	r1, r9
 800704c:	414b      	adcs	r3, r1
 800704e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007050:	f04f 0200 	mov.w	r2, #0
 8007054:	f04f 0300 	mov.w	r3, #0
 8007058:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800705c:	4659      	mov	r1, fp
 800705e:	00cb      	lsls	r3, r1, #3
 8007060:	4651      	mov	r1, sl
 8007062:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007066:	4651      	mov	r1, sl
 8007068:	00ca      	lsls	r2, r1, #3
 800706a:	4610      	mov	r0, r2
 800706c:	4619      	mov	r1, r3
 800706e:	4603      	mov	r3, r0
 8007070:	4642      	mov	r2, r8
 8007072:	189b      	adds	r3, r3, r2
 8007074:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007078:	464b      	mov	r3, r9
 800707a:	460a      	mov	r2, r1
 800707c:	eb42 0303 	adc.w	r3, r2, r3
 8007080:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	2200      	movs	r2, #0
 800708c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007090:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007094:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007098:	460b      	mov	r3, r1
 800709a:	18db      	adds	r3, r3, r3
 800709c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800709e:	4613      	mov	r3, r2
 80070a0:	eb42 0303 	adc.w	r3, r2, r3
 80070a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80070a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80070aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80070ae:	f7f9 fdd3 	bl	8000c58 <__aeabi_uldivmod>
 80070b2:	4602      	mov	r2, r0
 80070b4:	460b      	mov	r3, r1
 80070b6:	4b0d      	ldr	r3, [pc, #52]	@ (80070ec <UART_SetConfig+0x2d4>)
 80070b8:	fba3 1302 	umull	r1, r3, r3, r2
 80070bc:	095b      	lsrs	r3, r3, #5
 80070be:	2164      	movs	r1, #100	@ 0x64
 80070c0:	fb01 f303 	mul.w	r3, r1, r3
 80070c4:	1ad3      	subs	r3, r2, r3
 80070c6:	00db      	lsls	r3, r3, #3
 80070c8:	3332      	adds	r3, #50	@ 0x32
 80070ca:	4a08      	ldr	r2, [pc, #32]	@ (80070ec <UART_SetConfig+0x2d4>)
 80070cc:	fba2 2303 	umull	r2, r3, r2, r3
 80070d0:	095b      	lsrs	r3, r3, #5
 80070d2:	f003 0207 	and.w	r2, r3, #7
 80070d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4422      	add	r2, r4
 80070de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80070e0:	e106      	b.n	80072f0 <UART_SetConfig+0x4d8>
 80070e2:	bf00      	nop
 80070e4:	40011000 	.word	0x40011000
 80070e8:	40011400 	.word	0x40011400
 80070ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80070f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80070f4:	2200      	movs	r2, #0
 80070f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80070fa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80070fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007102:	4642      	mov	r2, r8
 8007104:	464b      	mov	r3, r9
 8007106:	1891      	adds	r1, r2, r2
 8007108:	6239      	str	r1, [r7, #32]
 800710a:	415b      	adcs	r3, r3
 800710c:	627b      	str	r3, [r7, #36]	@ 0x24
 800710e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007112:	4641      	mov	r1, r8
 8007114:	1854      	adds	r4, r2, r1
 8007116:	4649      	mov	r1, r9
 8007118:	eb43 0501 	adc.w	r5, r3, r1
 800711c:	f04f 0200 	mov.w	r2, #0
 8007120:	f04f 0300 	mov.w	r3, #0
 8007124:	00eb      	lsls	r3, r5, #3
 8007126:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800712a:	00e2      	lsls	r2, r4, #3
 800712c:	4614      	mov	r4, r2
 800712e:	461d      	mov	r5, r3
 8007130:	4643      	mov	r3, r8
 8007132:	18e3      	adds	r3, r4, r3
 8007134:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007138:	464b      	mov	r3, r9
 800713a:	eb45 0303 	adc.w	r3, r5, r3
 800713e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	2200      	movs	r2, #0
 800714a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800714e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007152:	f04f 0200 	mov.w	r2, #0
 8007156:	f04f 0300 	mov.w	r3, #0
 800715a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800715e:	4629      	mov	r1, r5
 8007160:	008b      	lsls	r3, r1, #2
 8007162:	4621      	mov	r1, r4
 8007164:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007168:	4621      	mov	r1, r4
 800716a:	008a      	lsls	r2, r1, #2
 800716c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007170:	f7f9 fd72 	bl	8000c58 <__aeabi_uldivmod>
 8007174:	4602      	mov	r2, r0
 8007176:	460b      	mov	r3, r1
 8007178:	4b60      	ldr	r3, [pc, #384]	@ (80072fc <UART_SetConfig+0x4e4>)
 800717a:	fba3 2302 	umull	r2, r3, r3, r2
 800717e:	095b      	lsrs	r3, r3, #5
 8007180:	011c      	lsls	r4, r3, #4
 8007182:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007186:	2200      	movs	r2, #0
 8007188:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800718c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007190:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007194:	4642      	mov	r2, r8
 8007196:	464b      	mov	r3, r9
 8007198:	1891      	adds	r1, r2, r2
 800719a:	61b9      	str	r1, [r7, #24]
 800719c:	415b      	adcs	r3, r3
 800719e:	61fb      	str	r3, [r7, #28]
 80071a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80071a4:	4641      	mov	r1, r8
 80071a6:	1851      	adds	r1, r2, r1
 80071a8:	6139      	str	r1, [r7, #16]
 80071aa:	4649      	mov	r1, r9
 80071ac:	414b      	adcs	r3, r1
 80071ae:	617b      	str	r3, [r7, #20]
 80071b0:	f04f 0200 	mov.w	r2, #0
 80071b4:	f04f 0300 	mov.w	r3, #0
 80071b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80071bc:	4659      	mov	r1, fp
 80071be:	00cb      	lsls	r3, r1, #3
 80071c0:	4651      	mov	r1, sl
 80071c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80071c6:	4651      	mov	r1, sl
 80071c8:	00ca      	lsls	r2, r1, #3
 80071ca:	4610      	mov	r0, r2
 80071cc:	4619      	mov	r1, r3
 80071ce:	4603      	mov	r3, r0
 80071d0:	4642      	mov	r2, r8
 80071d2:	189b      	adds	r3, r3, r2
 80071d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80071d8:	464b      	mov	r3, r9
 80071da:	460a      	mov	r2, r1
 80071dc:	eb42 0303 	adc.w	r3, r2, r3
 80071e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80071e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	2200      	movs	r2, #0
 80071ec:	67bb      	str	r3, [r7, #120]	@ 0x78
 80071ee:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80071f0:	f04f 0200 	mov.w	r2, #0
 80071f4:	f04f 0300 	mov.w	r3, #0
 80071f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80071fc:	4649      	mov	r1, r9
 80071fe:	008b      	lsls	r3, r1, #2
 8007200:	4641      	mov	r1, r8
 8007202:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007206:	4641      	mov	r1, r8
 8007208:	008a      	lsls	r2, r1, #2
 800720a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800720e:	f7f9 fd23 	bl	8000c58 <__aeabi_uldivmod>
 8007212:	4602      	mov	r2, r0
 8007214:	460b      	mov	r3, r1
 8007216:	4611      	mov	r1, r2
 8007218:	4b38      	ldr	r3, [pc, #224]	@ (80072fc <UART_SetConfig+0x4e4>)
 800721a:	fba3 2301 	umull	r2, r3, r3, r1
 800721e:	095b      	lsrs	r3, r3, #5
 8007220:	2264      	movs	r2, #100	@ 0x64
 8007222:	fb02 f303 	mul.w	r3, r2, r3
 8007226:	1acb      	subs	r3, r1, r3
 8007228:	011b      	lsls	r3, r3, #4
 800722a:	3332      	adds	r3, #50	@ 0x32
 800722c:	4a33      	ldr	r2, [pc, #204]	@ (80072fc <UART_SetConfig+0x4e4>)
 800722e:	fba2 2303 	umull	r2, r3, r2, r3
 8007232:	095b      	lsrs	r3, r3, #5
 8007234:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007238:	441c      	add	r4, r3
 800723a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800723e:	2200      	movs	r2, #0
 8007240:	673b      	str	r3, [r7, #112]	@ 0x70
 8007242:	677a      	str	r2, [r7, #116]	@ 0x74
 8007244:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007248:	4642      	mov	r2, r8
 800724a:	464b      	mov	r3, r9
 800724c:	1891      	adds	r1, r2, r2
 800724e:	60b9      	str	r1, [r7, #8]
 8007250:	415b      	adcs	r3, r3
 8007252:	60fb      	str	r3, [r7, #12]
 8007254:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007258:	4641      	mov	r1, r8
 800725a:	1851      	adds	r1, r2, r1
 800725c:	6039      	str	r1, [r7, #0]
 800725e:	4649      	mov	r1, r9
 8007260:	414b      	adcs	r3, r1
 8007262:	607b      	str	r3, [r7, #4]
 8007264:	f04f 0200 	mov.w	r2, #0
 8007268:	f04f 0300 	mov.w	r3, #0
 800726c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007270:	4659      	mov	r1, fp
 8007272:	00cb      	lsls	r3, r1, #3
 8007274:	4651      	mov	r1, sl
 8007276:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800727a:	4651      	mov	r1, sl
 800727c:	00ca      	lsls	r2, r1, #3
 800727e:	4610      	mov	r0, r2
 8007280:	4619      	mov	r1, r3
 8007282:	4603      	mov	r3, r0
 8007284:	4642      	mov	r2, r8
 8007286:	189b      	adds	r3, r3, r2
 8007288:	66bb      	str	r3, [r7, #104]	@ 0x68
 800728a:	464b      	mov	r3, r9
 800728c:	460a      	mov	r2, r1
 800728e:	eb42 0303 	adc.w	r3, r2, r3
 8007292:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	2200      	movs	r2, #0
 800729c:	663b      	str	r3, [r7, #96]	@ 0x60
 800729e:	667a      	str	r2, [r7, #100]	@ 0x64
 80072a0:	f04f 0200 	mov.w	r2, #0
 80072a4:	f04f 0300 	mov.w	r3, #0
 80072a8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80072ac:	4649      	mov	r1, r9
 80072ae:	008b      	lsls	r3, r1, #2
 80072b0:	4641      	mov	r1, r8
 80072b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80072b6:	4641      	mov	r1, r8
 80072b8:	008a      	lsls	r2, r1, #2
 80072ba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80072be:	f7f9 fccb 	bl	8000c58 <__aeabi_uldivmod>
 80072c2:	4602      	mov	r2, r0
 80072c4:	460b      	mov	r3, r1
 80072c6:	4b0d      	ldr	r3, [pc, #52]	@ (80072fc <UART_SetConfig+0x4e4>)
 80072c8:	fba3 1302 	umull	r1, r3, r3, r2
 80072cc:	095b      	lsrs	r3, r3, #5
 80072ce:	2164      	movs	r1, #100	@ 0x64
 80072d0:	fb01 f303 	mul.w	r3, r1, r3
 80072d4:	1ad3      	subs	r3, r2, r3
 80072d6:	011b      	lsls	r3, r3, #4
 80072d8:	3332      	adds	r3, #50	@ 0x32
 80072da:	4a08      	ldr	r2, [pc, #32]	@ (80072fc <UART_SetConfig+0x4e4>)
 80072dc:	fba2 2303 	umull	r2, r3, r2, r3
 80072e0:	095b      	lsrs	r3, r3, #5
 80072e2:	f003 020f 	and.w	r2, r3, #15
 80072e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4422      	add	r2, r4
 80072ee:	609a      	str	r2, [r3, #8]
}
 80072f0:	bf00      	nop
 80072f2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80072f6:	46bd      	mov	sp, r7
 80072f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80072fc:	51eb851f 	.word	0x51eb851f

08007300 <__cvt>:
 8007300:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007304:	ec57 6b10 	vmov	r6, r7, d0
 8007308:	2f00      	cmp	r7, #0
 800730a:	460c      	mov	r4, r1
 800730c:	4619      	mov	r1, r3
 800730e:	463b      	mov	r3, r7
 8007310:	bfbb      	ittet	lt
 8007312:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007316:	461f      	movlt	r7, r3
 8007318:	2300      	movge	r3, #0
 800731a:	232d      	movlt	r3, #45	@ 0x2d
 800731c:	700b      	strb	r3, [r1, #0]
 800731e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007320:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007324:	4691      	mov	r9, r2
 8007326:	f023 0820 	bic.w	r8, r3, #32
 800732a:	bfbc      	itt	lt
 800732c:	4632      	movlt	r2, r6
 800732e:	4616      	movlt	r6, r2
 8007330:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007334:	d005      	beq.n	8007342 <__cvt+0x42>
 8007336:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800733a:	d100      	bne.n	800733e <__cvt+0x3e>
 800733c:	3401      	adds	r4, #1
 800733e:	2102      	movs	r1, #2
 8007340:	e000      	b.n	8007344 <__cvt+0x44>
 8007342:	2103      	movs	r1, #3
 8007344:	ab03      	add	r3, sp, #12
 8007346:	9301      	str	r3, [sp, #4]
 8007348:	ab02      	add	r3, sp, #8
 800734a:	9300      	str	r3, [sp, #0]
 800734c:	ec47 6b10 	vmov	d0, r6, r7
 8007350:	4653      	mov	r3, sl
 8007352:	4622      	mov	r2, r4
 8007354:	f000 fe78 	bl	8008048 <_dtoa_r>
 8007358:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800735c:	4605      	mov	r5, r0
 800735e:	d119      	bne.n	8007394 <__cvt+0x94>
 8007360:	f019 0f01 	tst.w	r9, #1
 8007364:	d00e      	beq.n	8007384 <__cvt+0x84>
 8007366:	eb00 0904 	add.w	r9, r0, r4
 800736a:	2200      	movs	r2, #0
 800736c:	2300      	movs	r3, #0
 800736e:	4630      	mov	r0, r6
 8007370:	4639      	mov	r1, r7
 8007372:	f7f9 fbb1 	bl	8000ad8 <__aeabi_dcmpeq>
 8007376:	b108      	cbz	r0, 800737c <__cvt+0x7c>
 8007378:	f8cd 900c 	str.w	r9, [sp, #12]
 800737c:	2230      	movs	r2, #48	@ 0x30
 800737e:	9b03      	ldr	r3, [sp, #12]
 8007380:	454b      	cmp	r3, r9
 8007382:	d31e      	bcc.n	80073c2 <__cvt+0xc2>
 8007384:	9b03      	ldr	r3, [sp, #12]
 8007386:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007388:	1b5b      	subs	r3, r3, r5
 800738a:	4628      	mov	r0, r5
 800738c:	6013      	str	r3, [r2, #0]
 800738e:	b004      	add	sp, #16
 8007390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007394:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007398:	eb00 0904 	add.w	r9, r0, r4
 800739c:	d1e5      	bne.n	800736a <__cvt+0x6a>
 800739e:	7803      	ldrb	r3, [r0, #0]
 80073a0:	2b30      	cmp	r3, #48	@ 0x30
 80073a2:	d10a      	bne.n	80073ba <__cvt+0xba>
 80073a4:	2200      	movs	r2, #0
 80073a6:	2300      	movs	r3, #0
 80073a8:	4630      	mov	r0, r6
 80073aa:	4639      	mov	r1, r7
 80073ac:	f7f9 fb94 	bl	8000ad8 <__aeabi_dcmpeq>
 80073b0:	b918      	cbnz	r0, 80073ba <__cvt+0xba>
 80073b2:	f1c4 0401 	rsb	r4, r4, #1
 80073b6:	f8ca 4000 	str.w	r4, [sl]
 80073ba:	f8da 3000 	ldr.w	r3, [sl]
 80073be:	4499      	add	r9, r3
 80073c0:	e7d3      	b.n	800736a <__cvt+0x6a>
 80073c2:	1c59      	adds	r1, r3, #1
 80073c4:	9103      	str	r1, [sp, #12]
 80073c6:	701a      	strb	r2, [r3, #0]
 80073c8:	e7d9      	b.n	800737e <__cvt+0x7e>

080073ca <__exponent>:
 80073ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80073cc:	2900      	cmp	r1, #0
 80073ce:	bfba      	itte	lt
 80073d0:	4249      	neglt	r1, r1
 80073d2:	232d      	movlt	r3, #45	@ 0x2d
 80073d4:	232b      	movge	r3, #43	@ 0x2b
 80073d6:	2909      	cmp	r1, #9
 80073d8:	7002      	strb	r2, [r0, #0]
 80073da:	7043      	strb	r3, [r0, #1]
 80073dc:	dd29      	ble.n	8007432 <__exponent+0x68>
 80073de:	f10d 0307 	add.w	r3, sp, #7
 80073e2:	461d      	mov	r5, r3
 80073e4:	270a      	movs	r7, #10
 80073e6:	461a      	mov	r2, r3
 80073e8:	fbb1 f6f7 	udiv	r6, r1, r7
 80073ec:	fb07 1416 	mls	r4, r7, r6, r1
 80073f0:	3430      	adds	r4, #48	@ 0x30
 80073f2:	f802 4c01 	strb.w	r4, [r2, #-1]
 80073f6:	460c      	mov	r4, r1
 80073f8:	2c63      	cmp	r4, #99	@ 0x63
 80073fa:	f103 33ff 	add.w	r3, r3, #4294967295
 80073fe:	4631      	mov	r1, r6
 8007400:	dcf1      	bgt.n	80073e6 <__exponent+0x1c>
 8007402:	3130      	adds	r1, #48	@ 0x30
 8007404:	1e94      	subs	r4, r2, #2
 8007406:	f803 1c01 	strb.w	r1, [r3, #-1]
 800740a:	1c41      	adds	r1, r0, #1
 800740c:	4623      	mov	r3, r4
 800740e:	42ab      	cmp	r3, r5
 8007410:	d30a      	bcc.n	8007428 <__exponent+0x5e>
 8007412:	f10d 0309 	add.w	r3, sp, #9
 8007416:	1a9b      	subs	r3, r3, r2
 8007418:	42ac      	cmp	r4, r5
 800741a:	bf88      	it	hi
 800741c:	2300      	movhi	r3, #0
 800741e:	3302      	adds	r3, #2
 8007420:	4403      	add	r3, r0
 8007422:	1a18      	subs	r0, r3, r0
 8007424:	b003      	add	sp, #12
 8007426:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007428:	f813 6b01 	ldrb.w	r6, [r3], #1
 800742c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007430:	e7ed      	b.n	800740e <__exponent+0x44>
 8007432:	2330      	movs	r3, #48	@ 0x30
 8007434:	3130      	adds	r1, #48	@ 0x30
 8007436:	7083      	strb	r3, [r0, #2]
 8007438:	70c1      	strb	r1, [r0, #3]
 800743a:	1d03      	adds	r3, r0, #4
 800743c:	e7f1      	b.n	8007422 <__exponent+0x58>
	...

08007440 <_printf_float>:
 8007440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007444:	b08d      	sub	sp, #52	@ 0x34
 8007446:	460c      	mov	r4, r1
 8007448:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800744c:	4616      	mov	r6, r2
 800744e:	461f      	mov	r7, r3
 8007450:	4605      	mov	r5, r0
 8007452:	f000 fceb 	bl	8007e2c <_localeconv_r>
 8007456:	6803      	ldr	r3, [r0, #0]
 8007458:	9304      	str	r3, [sp, #16]
 800745a:	4618      	mov	r0, r3
 800745c:	f7f8 ff10 	bl	8000280 <strlen>
 8007460:	2300      	movs	r3, #0
 8007462:	930a      	str	r3, [sp, #40]	@ 0x28
 8007464:	f8d8 3000 	ldr.w	r3, [r8]
 8007468:	9005      	str	r0, [sp, #20]
 800746a:	3307      	adds	r3, #7
 800746c:	f023 0307 	bic.w	r3, r3, #7
 8007470:	f103 0208 	add.w	r2, r3, #8
 8007474:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007478:	f8d4 b000 	ldr.w	fp, [r4]
 800747c:	f8c8 2000 	str.w	r2, [r8]
 8007480:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007484:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007488:	9307      	str	r3, [sp, #28]
 800748a:	f8cd 8018 	str.w	r8, [sp, #24]
 800748e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007492:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007496:	4b9c      	ldr	r3, [pc, #624]	@ (8007708 <_printf_float+0x2c8>)
 8007498:	f04f 32ff 	mov.w	r2, #4294967295
 800749c:	f7f9 fb4e 	bl	8000b3c <__aeabi_dcmpun>
 80074a0:	bb70      	cbnz	r0, 8007500 <_printf_float+0xc0>
 80074a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80074a6:	4b98      	ldr	r3, [pc, #608]	@ (8007708 <_printf_float+0x2c8>)
 80074a8:	f04f 32ff 	mov.w	r2, #4294967295
 80074ac:	f7f9 fb28 	bl	8000b00 <__aeabi_dcmple>
 80074b0:	bb30      	cbnz	r0, 8007500 <_printf_float+0xc0>
 80074b2:	2200      	movs	r2, #0
 80074b4:	2300      	movs	r3, #0
 80074b6:	4640      	mov	r0, r8
 80074b8:	4649      	mov	r1, r9
 80074ba:	f7f9 fb17 	bl	8000aec <__aeabi_dcmplt>
 80074be:	b110      	cbz	r0, 80074c6 <_printf_float+0x86>
 80074c0:	232d      	movs	r3, #45	@ 0x2d
 80074c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80074c6:	4a91      	ldr	r2, [pc, #580]	@ (800770c <_printf_float+0x2cc>)
 80074c8:	4b91      	ldr	r3, [pc, #580]	@ (8007710 <_printf_float+0x2d0>)
 80074ca:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80074ce:	bf8c      	ite	hi
 80074d0:	4690      	movhi	r8, r2
 80074d2:	4698      	movls	r8, r3
 80074d4:	2303      	movs	r3, #3
 80074d6:	6123      	str	r3, [r4, #16]
 80074d8:	f02b 0304 	bic.w	r3, fp, #4
 80074dc:	6023      	str	r3, [r4, #0]
 80074de:	f04f 0900 	mov.w	r9, #0
 80074e2:	9700      	str	r7, [sp, #0]
 80074e4:	4633      	mov	r3, r6
 80074e6:	aa0b      	add	r2, sp, #44	@ 0x2c
 80074e8:	4621      	mov	r1, r4
 80074ea:	4628      	mov	r0, r5
 80074ec:	f000 f9d2 	bl	8007894 <_printf_common>
 80074f0:	3001      	adds	r0, #1
 80074f2:	f040 808d 	bne.w	8007610 <_printf_float+0x1d0>
 80074f6:	f04f 30ff 	mov.w	r0, #4294967295
 80074fa:	b00d      	add	sp, #52	@ 0x34
 80074fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007500:	4642      	mov	r2, r8
 8007502:	464b      	mov	r3, r9
 8007504:	4640      	mov	r0, r8
 8007506:	4649      	mov	r1, r9
 8007508:	f7f9 fb18 	bl	8000b3c <__aeabi_dcmpun>
 800750c:	b140      	cbz	r0, 8007520 <_printf_float+0xe0>
 800750e:	464b      	mov	r3, r9
 8007510:	2b00      	cmp	r3, #0
 8007512:	bfbc      	itt	lt
 8007514:	232d      	movlt	r3, #45	@ 0x2d
 8007516:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800751a:	4a7e      	ldr	r2, [pc, #504]	@ (8007714 <_printf_float+0x2d4>)
 800751c:	4b7e      	ldr	r3, [pc, #504]	@ (8007718 <_printf_float+0x2d8>)
 800751e:	e7d4      	b.n	80074ca <_printf_float+0x8a>
 8007520:	6863      	ldr	r3, [r4, #4]
 8007522:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007526:	9206      	str	r2, [sp, #24]
 8007528:	1c5a      	adds	r2, r3, #1
 800752a:	d13b      	bne.n	80075a4 <_printf_float+0x164>
 800752c:	2306      	movs	r3, #6
 800752e:	6063      	str	r3, [r4, #4]
 8007530:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007534:	2300      	movs	r3, #0
 8007536:	6022      	str	r2, [r4, #0]
 8007538:	9303      	str	r3, [sp, #12]
 800753a:	ab0a      	add	r3, sp, #40	@ 0x28
 800753c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007540:	ab09      	add	r3, sp, #36	@ 0x24
 8007542:	9300      	str	r3, [sp, #0]
 8007544:	6861      	ldr	r1, [r4, #4]
 8007546:	ec49 8b10 	vmov	d0, r8, r9
 800754a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800754e:	4628      	mov	r0, r5
 8007550:	f7ff fed6 	bl	8007300 <__cvt>
 8007554:	9b06      	ldr	r3, [sp, #24]
 8007556:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007558:	2b47      	cmp	r3, #71	@ 0x47
 800755a:	4680      	mov	r8, r0
 800755c:	d129      	bne.n	80075b2 <_printf_float+0x172>
 800755e:	1cc8      	adds	r0, r1, #3
 8007560:	db02      	blt.n	8007568 <_printf_float+0x128>
 8007562:	6863      	ldr	r3, [r4, #4]
 8007564:	4299      	cmp	r1, r3
 8007566:	dd41      	ble.n	80075ec <_printf_float+0x1ac>
 8007568:	f1aa 0a02 	sub.w	sl, sl, #2
 800756c:	fa5f fa8a 	uxtb.w	sl, sl
 8007570:	3901      	subs	r1, #1
 8007572:	4652      	mov	r2, sl
 8007574:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007578:	9109      	str	r1, [sp, #36]	@ 0x24
 800757a:	f7ff ff26 	bl	80073ca <__exponent>
 800757e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007580:	1813      	adds	r3, r2, r0
 8007582:	2a01      	cmp	r2, #1
 8007584:	4681      	mov	r9, r0
 8007586:	6123      	str	r3, [r4, #16]
 8007588:	dc02      	bgt.n	8007590 <_printf_float+0x150>
 800758a:	6822      	ldr	r2, [r4, #0]
 800758c:	07d2      	lsls	r2, r2, #31
 800758e:	d501      	bpl.n	8007594 <_printf_float+0x154>
 8007590:	3301      	adds	r3, #1
 8007592:	6123      	str	r3, [r4, #16]
 8007594:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007598:	2b00      	cmp	r3, #0
 800759a:	d0a2      	beq.n	80074e2 <_printf_float+0xa2>
 800759c:	232d      	movs	r3, #45	@ 0x2d
 800759e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80075a2:	e79e      	b.n	80074e2 <_printf_float+0xa2>
 80075a4:	9a06      	ldr	r2, [sp, #24]
 80075a6:	2a47      	cmp	r2, #71	@ 0x47
 80075a8:	d1c2      	bne.n	8007530 <_printf_float+0xf0>
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d1c0      	bne.n	8007530 <_printf_float+0xf0>
 80075ae:	2301      	movs	r3, #1
 80075b0:	e7bd      	b.n	800752e <_printf_float+0xee>
 80075b2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80075b6:	d9db      	bls.n	8007570 <_printf_float+0x130>
 80075b8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80075bc:	d118      	bne.n	80075f0 <_printf_float+0x1b0>
 80075be:	2900      	cmp	r1, #0
 80075c0:	6863      	ldr	r3, [r4, #4]
 80075c2:	dd0b      	ble.n	80075dc <_printf_float+0x19c>
 80075c4:	6121      	str	r1, [r4, #16]
 80075c6:	b913      	cbnz	r3, 80075ce <_printf_float+0x18e>
 80075c8:	6822      	ldr	r2, [r4, #0]
 80075ca:	07d0      	lsls	r0, r2, #31
 80075cc:	d502      	bpl.n	80075d4 <_printf_float+0x194>
 80075ce:	3301      	adds	r3, #1
 80075d0:	440b      	add	r3, r1
 80075d2:	6123      	str	r3, [r4, #16]
 80075d4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80075d6:	f04f 0900 	mov.w	r9, #0
 80075da:	e7db      	b.n	8007594 <_printf_float+0x154>
 80075dc:	b913      	cbnz	r3, 80075e4 <_printf_float+0x1a4>
 80075de:	6822      	ldr	r2, [r4, #0]
 80075e0:	07d2      	lsls	r2, r2, #31
 80075e2:	d501      	bpl.n	80075e8 <_printf_float+0x1a8>
 80075e4:	3302      	adds	r3, #2
 80075e6:	e7f4      	b.n	80075d2 <_printf_float+0x192>
 80075e8:	2301      	movs	r3, #1
 80075ea:	e7f2      	b.n	80075d2 <_printf_float+0x192>
 80075ec:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80075f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80075f2:	4299      	cmp	r1, r3
 80075f4:	db05      	blt.n	8007602 <_printf_float+0x1c2>
 80075f6:	6823      	ldr	r3, [r4, #0]
 80075f8:	6121      	str	r1, [r4, #16]
 80075fa:	07d8      	lsls	r0, r3, #31
 80075fc:	d5ea      	bpl.n	80075d4 <_printf_float+0x194>
 80075fe:	1c4b      	adds	r3, r1, #1
 8007600:	e7e7      	b.n	80075d2 <_printf_float+0x192>
 8007602:	2900      	cmp	r1, #0
 8007604:	bfd4      	ite	le
 8007606:	f1c1 0202 	rsble	r2, r1, #2
 800760a:	2201      	movgt	r2, #1
 800760c:	4413      	add	r3, r2
 800760e:	e7e0      	b.n	80075d2 <_printf_float+0x192>
 8007610:	6823      	ldr	r3, [r4, #0]
 8007612:	055a      	lsls	r2, r3, #21
 8007614:	d407      	bmi.n	8007626 <_printf_float+0x1e6>
 8007616:	6923      	ldr	r3, [r4, #16]
 8007618:	4642      	mov	r2, r8
 800761a:	4631      	mov	r1, r6
 800761c:	4628      	mov	r0, r5
 800761e:	47b8      	blx	r7
 8007620:	3001      	adds	r0, #1
 8007622:	d12b      	bne.n	800767c <_printf_float+0x23c>
 8007624:	e767      	b.n	80074f6 <_printf_float+0xb6>
 8007626:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800762a:	f240 80dd 	bls.w	80077e8 <_printf_float+0x3a8>
 800762e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007632:	2200      	movs	r2, #0
 8007634:	2300      	movs	r3, #0
 8007636:	f7f9 fa4f 	bl	8000ad8 <__aeabi_dcmpeq>
 800763a:	2800      	cmp	r0, #0
 800763c:	d033      	beq.n	80076a6 <_printf_float+0x266>
 800763e:	4a37      	ldr	r2, [pc, #220]	@ (800771c <_printf_float+0x2dc>)
 8007640:	2301      	movs	r3, #1
 8007642:	4631      	mov	r1, r6
 8007644:	4628      	mov	r0, r5
 8007646:	47b8      	blx	r7
 8007648:	3001      	adds	r0, #1
 800764a:	f43f af54 	beq.w	80074f6 <_printf_float+0xb6>
 800764e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007652:	4543      	cmp	r3, r8
 8007654:	db02      	blt.n	800765c <_printf_float+0x21c>
 8007656:	6823      	ldr	r3, [r4, #0]
 8007658:	07d8      	lsls	r0, r3, #31
 800765a:	d50f      	bpl.n	800767c <_printf_float+0x23c>
 800765c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007660:	4631      	mov	r1, r6
 8007662:	4628      	mov	r0, r5
 8007664:	47b8      	blx	r7
 8007666:	3001      	adds	r0, #1
 8007668:	f43f af45 	beq.w	80074f6 <_printf_float+0xb6>
 800766c:	f04f 0900 	mov.w	r9, #0
 8007670:	f108 38ff 	add.w	r8, r8, #4294967295
 8007674:	f104 0a1a 	add.w	sl, r4, #26
 8007678:	45c8      	cmp	r8, r9
 800767a:	dc09      	bgt.n	8007690 <_printf_float+0x250>
 800767c:	6823      	ldr	r3, [r4, #0]
 800767e:	079b      	lsls	r3, r3, #30
 8007680:	f100 8103 	bmi.w	800788a <_printf_float+0x44a>
 8007684:	68e0      	ldr	r0, [r4, #12]
 8007686:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007688:	4298      	cmp	r0, r3
 800768a:	bfb8      	it	lt
 800768c:	4618      	movlt	r0, r3
 800768e:	e734      	b.n	80074fa <_printf_float+0xba>
 8007690:	2301      	movs	r3, #1
 8007692:	4652      	mov	r2, sl
 8007694:	4631      	mov	r1, r6
 8007696:	4628      	mov	r0, r5
 8007698:	47b8      	blx	r7
 800769a:	3001      	adds	r0, #1
 800769c:	f43f af2b 	beq.w	80074f6 <_printf_float+0xb6>
 80076a0:	f109 0901 	add.w	r9, r9, #1
 80076a4:	e7e8      	b.n	8007678 <_printf_float+0x238>
 80076a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	dc39      	bgt.n	8007720 <_printf_float+0x2e0>
 80076ac:	4a1b      	ldr	r2, [pc, #108]	@ (800771c <_printf_float+0x2dc>)
 80076ae:	2301      	movs	r3, #1
 80076b0:	4631      	mov	r1, r6
 80076b2:	4628      	mov	r0, r5
 80076b4:	47b8      	blx	r7
 80076b6:	3001      	adds	r0, #1
 80076b8:	f43f af1d 	beq.w	80074f6 <_printf_float+0xb6>
 80076bc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80076c0:	ea59 0303 	orrs.w	r3, r9, r3
 80076c4:	d102      	bne.n	80076cc <_printf_float+0x28c>
 80076c6:	6823      	ldr	r3, [r4, #0]
 80076c8:	07d9      	lsls	r1, r3, #31
 80076ca:	d5d7      	bpl.n	800767c <_printf_float+0x23c>
 80076cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076d0:	4631      	mov	r1, r6
 80076d2:	4628      	mov	r0, r5
 80076d4:	47b8      	blx	r7
 80076d6:	3001      	adds	r0, #1
 80076d8:	f43f af0d 	beq.w	80074f6 <_printf_float+0xb6>
 80076dc:	f04f 0a00 	mov.w	sl, #0
 80076e0:	f104 0b1a 	add.w	fp, r4, #26
 80076e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076e6:	425b      	negs	r3, r3
 80076e8:	4553      	cmp	r3, sl
 80076ea:	dc01      	bgt.n	80076f0 <_printf_float+0x2b0>
 80076ec:	464b      	mov	r3, r9
 80076ee:	e793      	b.n	8007618 <_printf_float+0x1d8>
 80076f0:	2301      	movs	r3, #1
 80076f2:	465a      	mov	r2, fp
 80076f4:	4631      	mov	r1, r6
 80076f6:	4628      	mov	r0, r5
 80076f8:	47b8      	blx	r7
 80076fa:	3001      	adds	r0, #1
 80076fc:	f43f aefb 	beq.w	80074f6 <_printf_float+0xb6>
 8007700:	f10a 0a01 	add.w	sl, sl, #1
 8007704:	e7ee      	b.n	80076e4 <_printf_float+0x2a4>
 8007706:	bf00      	nop
 8007708:	7fefffff 	.word	0x7fefffff
 800770c:	0800ab40 	.word	0x0800ab40
 8007710:	0800ab3c 	.word	0x0800ab3c
 8007714:	0800ab48 	.word	0x0800ab48
 8007718:	0800ab44 	.word	0x0800ab44
 800771c:	0800ab4c 	.word	0x0800ab4c
 8007720:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007722:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007726:	4553      	cmp	r3, sl
 8007728:	bfa8      	it	ge
 800772a:	4653      	movge	r3, sl
 800772c:	2b00      	cmp	r3, #0
 800772e:	4699      	mov	r9, r3
 8007730:	dc36      	bgt.n	80077a0 <_printf_float+0x360>
 8007732:	f04f 0b00 	mov.w	fp, #0
 8007736:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800773a:	f104 021a 	add.w	r2, r4, #26
 800773e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007740:	9306      	str	r3, [sp, #24]
 8007742:	eba3 0309 	sub.w	r3, r3, r9
 8007746:	455b      	cmp	r3, fp
 8007748:	dc31      	bgt.n	80077ae <_printf_float+0x36e>
 800774a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800774c:	459a      	cmp	sl, r3
 800774e:	dc3a      	bgt.n	80077c6 <_printf_float+0x386>
 8007750:	6823      	ldr	r3, [r4, #0]
 8007752:	07da      	lsls	r2, r3, #31
 8007754:	d437      	bmi.n	80077c6 <_printf_float+0x386>
 8007756:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007758:	ebaa 0903 	sub.w	r9, sl, r3
 800775c:	9b06      	ldr	r3, [sp, #24]
 800775e:	ebaa 0303 	sub.w	r3, sl, r3
 8007762:	4599      	cmp	r9, r3
 8007764:	bfa8      	it	ge
 8007766:	4699      	movge	r9, r3
 8007768:	f1b9 0f00 	cmp.w	r9, #0
 800776c:	dc33      	bgt.n	80077d6 <_printf_float+0x396>
 800776e:	f04f 0800 	mov.w	r8, #0
 8007772:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007776:	f104 0b1a 	add.w	fp, r4, #26
 800777a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800777c:	ebaa 0303 	sub.w	r3, sl, r3
 8007780:	eba3 0309 	sub.w	r3, r3, r9
 8007784:	4543      	cmp	r3, r8
 8007786:	f77f af79 	ble.w	800767c <_printf_float+0x23c>
 800778a:	2301      	movs	r3, #1
 800778c:	465a      	mov	r2, fp
 800778e:	4631      	mov	r1, r6
 8007790:	4628      	mov	r0, r5
 8007792:	47b8      	blx	r7
 8007794:	3001      	adds	r0, #1
 8007796:	f43f aeae 	beq.w	80074f6 <_printf_float+0xb6>
 800779a:	f108 0801 	add.w	r8, r8, #1
 800779e:	e7ec      	b.n	800777a <_printf_float+0x33a>
 80077a0:	4642      	mov	r2, r8
 80077a2:	4631      	mov	r1, r6
 80077a4:	4628      	mov	r0, r5
 80077a6:	47b8      	blx	r7
 80077a8:	3001      	adds	r0, #1
 80077aa:	d1c2      	bne.n	8007732 <_printf_float+0x2f2>
 80077ac:	e6a3      	b.n	80074f6 <_printf_float+0xb6>
 80077ae:	2301      	movs	r3, #1
 80077b0:	4631      	mov	r1, r6
 80077b2:	4628      	mov	r0, r5
 80077b4:	9206      	str	r2, [sp, #24]
 80077b6:	47b8      	blx	r7
 80077b8:	3001      	adds	r0, #1
 80077ba:	f43f ae9c 	beq.w	80074f6 <_printf_float+0xb6>
 80077be:	9a06      	ldr	r2, [sp, #24]
 80077c0:	f10b 0b01 	add.w	fp, fp, #1
 80077c4:	e7bb      	b.n	800773e <_printf_float+0x2fe>
 80077c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80077ca:	4631      	mov	r1, r6
 80077cc:	4628      	mov	r0, r5
 80077ce:	47b8      	blx	r7
 80077d0:	3001      	adds	r0, #1
 80077d2:	d1c0      	bne.n	8007756 <_printf_float+0x316>
 80077d4:	e68f      	b.n	80074f6 <_printf_float+0xb6>
 80077d6:	9a06      	ldr	r2, [sp, #24]
 80077d8:	464b      	mov	r3, r9
 80077da:	4442      	add	r2, r8
 80077dc:	4631      	mov	r1, r6
 80077de:	4628      	mov	r0, r5
 80077e0:	47b8      	blx	r7
 80077e2:	3001      	adds	r0, #1
 80077e4:	d1c3      	bne.n	800776e <_printf_float+0x32e>
 80077e6:	e686      	b.n	80074f6 <_printf_float+0xb6>
 80077e8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80077ec:	f1ba 0f01 	cmp.w	sl, #1
 80077f0:	dc01      	bgt.n	80077f6 <_printf_float+0x3b6>
 80077f2:	07db      	lsls	r3, r3, #31
 80077f4:	d536      	bpl.n	8007864 <_printf_float+0x424>
 80077f6:	2301      	movs	r3, #1
 80077f8:	4642      	mov	r2, r8
 80077fa:	4631      	mov	r1, r6
 80077fc:	4628      	mov	r0, r5
 80077fe:	47b8      	blx	r7
 8007800:	3001      	adds	r0, #1
 8007802:	f43f ae78 	beq.w	80074f6 <_printf_float+0xb6>
 8007806:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800780a:	4631      	mov	r1, r6
 800780c:	4628      	mov	r0, r5
 800780e:	47b8      	blx	r7
 8007810:	3001      	adds	r0, #1
 8007812:	f43f ae70 	beq.w	80074f6 <_printf_float+0xb6>
 8007816:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800781a:	2200      	movs	r2, #0
 800781c:	2300      	movs	r3, #0
 800781e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007822:	f7f9 f959 	bl	8000ad8 <__aeabi_dcmpeq>
 8007826:	b9c0      	cbnz	r0, 800785a <_printf_float+0x41a>
 8007828:	4653      	mov	r3, sl
 800782a:	f108 0201 	add.w	r2, r8, #1
 800782e:	4631      	mov	r1, r6
 8007830:	4628      	mov	r0, r5
 8007832:	47b8      	blx	r7
 8007834:	3001      	adds	r0, #1
 8007836:	d10c      	bne.n	8007852 <_printf_float+0x412>
 8007838:	e65d      	b.n	80074f6 <_printf_float+0xb6>
 800783a:	2301      	movs	r3, #1
 800783c:	465a      	mov	r2, fp
 800783e:	4631      	mov	r1, r6
 8007840:	4628      	mov	r0, r5
 8007842:	47b8      	blx	r7
 8007844:	3001      	adds	r0, #1
 8007846:	f43f ae56 	beq.w	80074f6 <_printf_float+0xb6>
 800784a:	f108 0801 	add.w	r8, r8, #1
 800784e:	45d0      	cmp	r8, sl
 8007850:	dbf3      	blt.n	800783a <_printf_float+0x3fa>
 8007852:	464b      	mov	r3, r9
 8007854:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007858:	e6df      	b.n	800761a <_printf_float+0x1da>
 800785a:	f04f 0800 	mov.w	r8, #0
 800785e:	f104 0b1a 	add.w	fp, r4, #26
 8007862:	e7f4      	b.n	800784e <_printf_float+0x40e>
 8007864:	2301      	movs	r3, #1
 8007866:	4642      	mov	r2, r8
 8007868:	e7e1      	b.n	800782e <_printf_float+0x3ee>
 800786a:	2301      	movs	r3, #1
 800786c:	464a      	mov	r2, r9
 800786e:	4631      	mov	r1, r6
 8007870:	4628      	mov	r0, r5
 8007872:	47b8      	blx	r7
 8007874:	3001      	adds	r0, #1
 8007876:	f43f ae3e 	beq.w	80074f6 <_printf_float+0xb6>
 800787a:	f108 0801 	add.w	r8, r8, #1
 800787e:	68e3      	ldr	r3, [r4, #12]
 8007880:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007882:	1a5b      	subs	r3, r3, r1
 8007884:	4543      	cmp	r3, r8
 8007886:	dcf0      	bgt.n	800786a <_printf_float+0x42a>
 8007888:	e6fc      	b.n	8007684 <_printf_float+0x244>
 800788a:	f04f 0800 	mov.w	r8, #0
 800788e:	f104 0919 	add.w	r9, r4, #25
 8007892:	e7f4      	b.n	800787e <_printf_float+0x43e>

08007894 <_printf_common>:
 8007894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007898:	4616      	mov	r6, r2
 800789a:	4698      	mov	r8, r3
 800789c:	688a      	ldr	r2, [r1, #8]
 800789e:	690b      	ldr	r3, [r1, #16]
 80078a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80078a4:	4293      	cmp	r3, r2
 80078a6:	bfb8      	it	lt
 80078a8:	4613      	movlt	r3, r2
 80078aa:	6033      	str	r3, [r6, #0]
 80078ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80078b0:	4607      	mov	r7, r0
 80078b2:	460c      	mov	r4, r1
 80078b4:	b10a      	cbz	r2, 80078ba <_printf_common+0x26>
 80078b6:	3301      	adds	r3, #1
 80078b8:	6033      	str	r3, [r6, #0]
 80078ba:	6823      	ldr	r3, [r4, #0]
 80078bc:	0699      	lsls	r1, r3, #26
 80078be:	bf42      	ittt	mi
 80078c0:	6833      	ldrmi	r3, [r6, #0]
 80078c2:	3302      	addmi	r3, #2
 80078c4:	6033      	strmi	r3, [r6, #0]
 80078c6:	6825      	ldr	r5, [r4, #0]
 80078c8:	f015 0506 	ands.w	r5, r5, #6
 80078cc:	d106      	bne.n	80078dc <_printf_common+0x48>
 80078ce:	f104 0a19 	add.w	sl, r4, #25
 80078d2:	68e3      	ldr	r3, [r4, #12]
 80078d4:	6832      	ldr	r2, [r6, #0]
 80078d6:	1a9b      	subs	r3, r3, r2
 80078d8:	42ab      	cmp	r3, r5
 80078da:	dc26      	bgt.n	800792a <_printf_common+0x96>
 80078dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80078e0:	6822      	ldr	r2, [r4, #0]
 80078e2:	3b00      	subs	r3, #0
 80078e4:	bf18      	it	ne
 80078e6:	2301      	movne	r3, #1
 80078e8:	0692      	lsls	r2, r2, #26
 80078ea:	d42b      	bmi.n	8007944 <_printf_common+0xb0>
 80078ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80078f0:	4641      	mov	r1, r8
 80078f2:	4638      	mov	r0, r7
 80078f4:	47c8      	blx	r9
 80078f6:	3001      	adds	r0, #1
 80078f8:	d01e      	beq.n	8007938 <_printf_common+0xa4>
 80078fa:	6823      	ldr	r3, [r4, #0]
 80078fc:	6922      	ldr	r2, [r4, #16]
 80078fe:	f003 0306 	and.w	r3, r3, #6
 8007902:	2b04      	cmp	r3, #4
 8007904:	bf02      	ittt	eq
 8007906:	68e5      	ldreq	r5, [r4, #12]
 8007908:	6833      	ldreq	r3, [r6, #0]
 800790a:	1aed      	subeq	r5, r5, r3
 800790c:	68a3      	ldr	r3, [r4, #8]
 800790e:	bf0c      	ite	eq
 8007910:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007914:	2500      	movne	r5, #0
 8007916:	4293      	cmp	r3, r2
 8007918:	bfc4      	itt	gt
 800791a:	1a9b      	subgt	r3, r3, r2
 800791c:	18ed      	addgt	r5, r5, r3
 800791e:	2600      	movs	r6, #0
 8007920:	341a      	adds	r4, #26
 8007922:	42b5      	cmp	r5, r6
 8007924:	d11a      	bne.n	800795c <_printf_common+0xc8>
 8007926:	2000      	movs	r0, #0
 8007928:	e008      	b.n	800793c <_printf_common+0xa8>
 800792a:	2301      	movs	r3, #1
 800792c:	4652      	mov	r2, sl
 800792e:	4641      	mov	r1, r8
 8007930:	4638      	mov	r0, r7
 8007932:	47c8      	blx	r9
 8007934:	3001      	adds	r0, #1
 8007936:	d103      	bne.n	8007940 <_printf_common+0xac>
 8007938:	f04f 30ff 	mov.w	r0, #4294967295
 800793c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007940:	3501      	adds	r5, #1
 8007942:	e7c6      	b.n	80078d2 <_printf_common+0x3e>
 8007944:	18e1      	adds	r1, r4, r3
 8007946:	1c5a      	adds	r2, r3, #1
 8007948:	2030      	movs	r0, #48	@ 0x30
 800794a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800794e:	4422      	add	r2, r4
 8007950:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007954:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007958:	3302      	adds	r3, #2
 800795a:	e7c7      	b.n	80078ec <_printf_common+0x58>
 800795c:	2301      	movs	r3, #1
 800795e:	4622      	mov	r2, r4
 8007960:	4641      	mov	r1, r8
 8007962:	4638      	mov	r0, r7
 8007964:	47c8      	blx	r9
 8007966:	3001      	adds	r0, #1
 8007968:	d0e6      	beq.n	8007938 <_printf_common+0xa4>
 800796a:	3601      	adds	r6, #1
 800796c:	e7d9      	b.n	8007922 <_printf_common+0x8e>
	...

08007970 <_printf_i>:
 8007970:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007974:	7e0f      	ldrb	r7, [r1, #24]
 8007976:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007978:	2f78      	cmp	r7, #120	@ 0x78
 800797a:	4691      	mov	r9, r2
 800797c:	4680      	mov	r8, r0
 800797e:	460c      	mov	r4, r1
 8007980:	469a      	mov	sl, r3
 8007982:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007986:	d807      	bhi.n	8007998 <_printf_i+0x28>
 8007988:	2f62      	cmp	r7, #98	@ 0x62
 800798a:	d80a      	bhi.n	80079a2 <_printf_i+0x32>
 800798c:	2f00      	cmp	r7, #0
 800798e:	f000 80d1 	beq.w	8007b34 <_printf_i+0x1c4>
 8007992:	2f58      	cmp	r7, #88	@ 0x58
 8007994:	f000 80b8 	beq.w	8007b08 <_printf_i+0x198>
 8007998:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800799c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80079a0:	e03a      	b.n	8007a18 <_printf_i+0xa8>
 80079a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80079a6:	2b15      	cmp	r3, #21
 80079a8:	d8f6      	bhi.n	8007998 <_printf_i+0x28>
 80079aa:	a101      	add	r1, pc, #4	@ (adr r1, 80079b0 <_printf_i+0x40>)
 80079ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80079b0:	08007a09 	.word	0x08007a09
 80079b4:	08007a1d 	.word	0x08007a1d
 80079b8:	08007999 	.word	0x08007999
 80079bc:	08007999 	.word	0x08007999
 80079c0:	08007999 	.word	0x08007999
 80079c4:	08007999 	.word	0x08007999
 80079c8:	08007a1d 	.word	0x08007a1d
 80079cc:	08007999 	.word	0x08007999
 80079d0:	08007999 	.word	0x08007999
 80079d4:	08007999 	.word	0x08007999
 80079d8:	08007999 	.word	0x08007999
 80079dc:	08007b1b 	.word	0x08007b1b
 80079e0:	08007a47 	.word	0x08007a47
 80079e4:	08007ad5 	.word	0x08007ad5
 80079e8:	08007999 	.word	0x08007999
 80079ec:	08007999 	.word	0x08007999
 80079f0:	08007b3d 	.word	0x08007b3d
 80079f4:	08007999 	.word	0x08007999
 80079f8:	08007a47 	.word	0x08007a47
 80079fc:	08007999 	.word	0x08007999
 8007a00:	08007999 	.word	0x08007999
 8007a04:	08007add 	.word	0x08007add
 8007a08:	6833      	ldr	r3, [r6, #0]
 8007a0a:	1d1a      	adds	r2, r3, #4
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	6032      	str	r2, [r6, #0]
 8007a10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007a14:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007a18:	2301      	movs	r3, #1
 8007a1a:	e09c      	b.n	8007b56 <_printf_i+0x1e6>
 8007a1c:	6833      	ldr	r3, [r6, #0]
 8007a1e:	6820      	ldr	r0, [r4, #0]
 8007a20:	1d19      	adds	r1, r3, #4
 8007a22:	6031      	str	r1, [r6, #0]
 8007a24:	0606      	lsls	r6, r0, #24
 8007a26:	d501      	bpl.n	8007a2c <_printf_i+0xbc>
 8007a28:	681d      	ldr	r5, [r3, #0]
 8007a2a:	e003      	b.n	8007a34 <_printf_i+0xc4>
 8007a2c:	0645      	lsls	r5, r0, #25
 8007a2e:	d5fb      	bpl.n	8007a28 <_printf_i+0xb8>
 8007a30:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007a34:	2d00      	cmp	r5, #0
 8007a36:	da03      	bge.n	8007a40 <_printf_i+0xd0>
 8007a38:	232d      	movs	r3, #45	@ 0x2d
 8007a3a:	426d      	negs	r5, r5
 8007a3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a40:	4858      	ldr	r0, [pc, #352]	@ (8007ba4 <_printf_i+0x234>)
 8007a42:	230a      	movs	r3, #10
 8007a44:	e011      	b.n	8007a6a <_printf_i+0xfa>
 8007a46:	6821      	ldr	r1, [r4, #0]
 8007a48:	6833      	ldr	r3, [r6, #0]
 8007a4a:	0608      	lsls	r0, r1, #24
 8007a4c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007a50:	d402      	bmi.n	8007a58 <_printf_i+0xe8>
 8007a52:	0649      	lsls	r1, r1, #25
 8007a54:	bf48      	it	mi
 8007a56:	b2ad      	uxthmi	r5, r5
 8007a58:	2f6f      	cmp	r7, #111	@ 0x6f
 8007a5a:	4852      	ldr	r0, [pc, #328]	@ (8007ba4 <_printf_i+0x234>)
 8007a5c:	6033      	str	r3, [r6, #0]
 8007a5e:	bf14      	ite	ne
 8007a60:	230a      	movne	r3, #10
 8007a62:	2308      	moveq	r3, #8
 8007a64:	2100      	movs	r1, #0
 8007a66:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007a6a:	6866      	ldr	r6, [r4, #4]
 8007a6c:	60a6      	str	r6, [r4, #8]
 8007a6e:	2e00      	cmp	r6, #0
 8007a70:	db05      	blt.n	8007a7e <_printf_i+0x10e>
 8007a72:	6821      	ldr	r1, [r4, #0]
 8007a74:	432e      	orrs	r6, r5
 8007a76:	f021 0104 	bic.w	r1, r1, #4
 8007a7a:	6021      	str	r1, [r4, #0]
 8007a7c:	d04b      	beq.n	8007b16 <_printf_i+0x1a6>
 8007a7e:	4616      	mov	r6, r2
 8007a80:	fbb5 f1f3 	udiv	r1, r5, r3
 8007a84:	fb03 5711 	mls	r7, r3, r1, r5
 8007a88:	5dc7      	ldrb	r7, [r0, r7]
 8007a8a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007a8e:	462f      	mov	r7, r5
 8007a90:	42bb      	cmp	r3, r7
 8007a92:	460d      	mov	r5, r1
 8007a94:	d9f4      	bls.n	8007a80 <_printf_i+0x110>
 8007a96:	2b08      	cmp	r3, #8
 8007a98:	d10b      	bne.n	8007ab2 <_printf_i+0x142>
 8007a9a:	6823      	ldr	r3, [r4, #0]
 8007a9c:	07df      	lsls	r7, r3, #31
 8007a9e:	d508      	bpl.n	8007ab2 <_printf_i+0x142>
 8007aa0:	6923      	ldr	r3, [r4, #16]
 8007aa2:	6861      	ldr	r1, [r4, #4]
 8007aa4:	4299      	cmp	r1, r3
 8007aa6:	bfde      	ittt	le
 8007aa8:	2330      	movle	r3, #48	@ 0x30
 8007aaa:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007aae:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007ab2:	1b92      	subs	r2, r2, r6
 8007ab4:	6122      	str	r2, [r4, #16]
 8007ab6:	f8cd a000 	str.w	sl, [sp]
 8007aba:	464b      	mov	r3, r9
 8007abc:	aa03      	add	r2, sp, #12
 8007abe:	4621      	mov	r1, r4
 8007ac0:	4640      	mov	r0, r8
 8007ac2:	f7ff fee7 	bl	8007894 <_printf_common>
 8007ac6:	3001      	adds	r0, #1
 8007ac8:	d14a      	bne.n	8007b60 <_printf_i+0x1f0>
 8007aca:	f04f 30ff 	mov.w	r0, #4294967295
 8007ace:	b004      	add	sp, #16
 8007ad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ad4:	6823      	ldr	r3, [r4, #0]
 8007ad6:	f043 0320 	orr.w	r3, r3, #32
 8007ada:	6023      	str	r3, [r4, #0]
 8007adc:	4832      	ldr	r0, [pc, #200]	@ (8007ba8 <_printf_i+0x238>)
 8007ade:	2778      	movs	r7, #120	@ 0x78
 8007ae0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007ae4:	6823      	ldr	r3, [r4, #0]
 8007ae6:	6831      	ldr	r1, [r6, #0]
 8007ae8:	061f      	lsls	r7, r3, #24
 8007aea:	f851 5b04 	ldr.w	r5, [r1], #4
 8007aee:	d402      	bmi.n	8007af6 <_printf_i+0x186>
 8007af0:	065f      	lsls	r7, r3, #25
 8007af2:	bf48      	it	mi
 8007af4:	b2ad      	uxthmi	r5, r5
 8007af6:	6031      	str	r1, [r6, #0]
 8007af8:	07d9      	lsls	r1, r3, #31
 8007afa:	bf44      	itt	mi
 8007afc:	f043 0320 	orrmi.w	r3, r3, #32
 8007b00:	6023      	strmi	r3, [r4, #0]
 8007b02:	b11d      	cbz	r5, 8007b0c <_printf_i+0x19c>
 8007b04:	2310      	movs	r3, #16
 8007b06:	e7ad      	b.n	8007a64 <_printf_i+0xf4>
 8007b08:	4826      	ldr	r0, [pc, #152]	@ (8007ba4 <_printf_i+0x234>)
 8007b0a:	e7e9      	b.n	8007ae0 <_printf_i+0x170>
 8007b0c:	6823      	ldr	r3, [r4, #0]
 8007b0e:	f023 0320 	bic.w	r3, r3, #32
 8007b12:	6023      	str	r3, [r4, #0]
 8007b14:	e7f6      	b.n	8007b04 <_printf_i+0x194>
 8007b16:	4616      	mov	r6, r2
 8007b18:	e7bd      	b.n	8007a96 <_printf_i+0x126>
 8007b1a:	6833      	ldr	r3, [r6, #0]
 8007b1c:	6825      	ldr	r5, [r4, #0]
 8007b1e:	6961      	ldr	r1, [r4, #20]
 8007b20:	1d18      	adds	r0, r3, #4
 8007b22:	6030      	str	r0, [r6, #0]
 8007b24:	062e      	lsls	r6, r5, #24
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	d501      	bpl.n	8007b2e <_printf_i+0x1be>
 8007b2a:	6019      	str	r1, [r3, #0]
 8007b2c:	e002      	b.n	8007b34 <_printf_i+0x1c4>
 8007b2e:	0668      	lsls	r0, r5, #25
 8007b30:	d5fb      	bpl.n	8007b2a <_printf_i+0x1ba>
 8007b32:	8019      	strh	r1, [r3, #0]
 8007b34:	2300      	movs	r3, #0
 8007b36:	6123      	str	r3, [r4, #16]
 8007b38:	4616      	mov	r6, r2
 8007b3a:	e7bc      	b.n	8007ab6 <_printf_i+0x146>
 8007b3c:	6833      	ldr	r3, [r6, #0]
 8007b3e:	1d1a      	adds	r2, r3, #4
 8007b40:	6032      	str	r2, [r6, #0]
 8007b42:	681e      	ldr	r6, [r3, #0]
 8007b44:	6862      	ldr	r2, [r4, #4]
 8007b46:	2100      	movs	r1, #0
 8007b48:	4630      	mov	r0, r6
 8007b4a:	f7f8 fb49 	bl	80001e0 <memchr>
 8007b4e:	b108      	cbz	r0, 8007b54 <_printf_i+0x1e4>
 8007b50:	1b80      	subs	r0, r0, r6
 8007b52:	6060      	str	r0, [r4, #4]
 8007b54:	6863      	ldr	r3, [r4, #4]
 8007b56:	6123      	str	r3, [r4, #16]
 8007b58:	2300      	movs	r3, #0
 8007b5a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007b5e:	e7aa      	b.n	8007ab6 <_printf_i+0x146>
 8007b60:	6923      	ldr	r3, [r4, #16]
 8007b62:	4632      	mov	r2, r6
 8007b64:	4649      	mov	r1, r9
 8007b66:	4640      	mov	r0, r8
 8007b68:	47d0      	blx	sl
 8007b6a:	3001      	adds	r0, #1
 8007b6c:	d0ad      	beq.n	8007aca <_printf_i+0x15a>
 8007b6e:	6823      	ldr	r3, [r4, #0]
 8007b70:	079b      	lsls	r3, r3, #30
 8007b72:	d413      	bmi.n	8007b9c <_printf_i+0x22c>
 8007b74:	68e0      	ldr	r0, [r4, #12]
 8007b76:	9b03      	ldr	r3, [sp, #12]
 8007b78:	4298      	cmp	r0, r3
 8007b7a:	bfb8      	it	lt
 8007b7c:	4618      	movlt	r0, r3
 8007b7e:	e7a6      	b.n	8007ace <_printf_i+0x15e>
 8007b80:	2301      	movs	r3, #1
 8007b82:	4632      	mov	r2, r6
 8007b84:	4649      	mov	r1, r9
 8007b86:	4640      	mov	r0, r8
 8007b88:	47d0      	blx	sl
 8007b8a:	3001      	adds	r0, #1
 8007b8c:	d09d      	beq.n	8007aca <_printf_i+0x15a>
 8007b8e:	3501      	adds	r5, #1
 8007b90:	68e3      	ldr	r3, [r4, #12]
 8007b92:	9903      	ldr	r1, [sp, #12]
 8007b94:	1a5b      	subs	r3, r3, r1
 8007b96:	42ab      	cmp	r3, r5
 8007b98:	dcf2      	bgt.n	8007b80 <_printf_i+0x210>
 8007b9a:	e7eb      	b.n	8007b74 <_printf_i+0x204>
 8007b9c:	2500      	movs	r5, #0
 8007b9e:	f104 0619 	add.w	r6, r4, #25
 8007ba2:	e7f5      	b.n	8007b90 <_printf_i+0x220>
 8007ba4:	0800ab4e 	.word	0x0800ab4e
 8007ba8:	0800ab5f 	.word	0x0800ab5f

08007bac <std>:
 8007bac:	2300      	movs	r3, #0
 8007bae:	b510      	push	{r4, lr}
 8007bb0:	4604      	mov	r4, r0
 8007bb2:	e9c0 3300 	strd	r3, r3, [r0]
 8007bb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007bba:	6083      	str	r3, [r0, #8]
 8007bbc:	8181      	strh	r1, [r0, #12]
 8007bbe:	6643      	str	r3, [r0, #100]	@ 0x64
 8007bc0:	81c2      	strh	r2, [r0, #14]
 8007bc2:	6183      	str	r3, [r0, #24]
 8007bc4:	4619      	mov	r1, r3
 8007bc6:	2208      	movs	r2, #8
 8007bc8:	305c      	adds	r0, #92	@ 0x5c
 8007bca:	f000 f926 	bl	8007e1a <memset>
 8007bce:	4b0d      	ldr	r3, [pc, #52]	@ (8007c04 <std+0x58>)
 8007bd0:	6263      	str	r3, [r4, #36]	@ 0x24
 8007bd2:	4b0d      	ldr	r3, [pc, #52]	@ (8007c08 <std+0x5c>)
 8007bd4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007bd6:	4b0d      	ldr	r3, [pc, #52]	@ (8007c0c <std+0x60>)
 8007bd8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007bda:	4b0d      	ldr	r3, [pc, #52]	@ (8007c10 <std+0x64>)
 8007bdc:	6323      	str	r3, [r4, #48]	@ 0x30
 8007bde:	4b0d      	ldr	r3, [pc, #52]	@ (8007c14 <std+0x68>)
 8007be0:	6224      	str	r4, [r4, #32]
 8007be2:	429c      	cmp	r4, r3
 8007be4:	d006      	beq.n	8007bf4 <std+0x48>
 8007be6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007bea:	4294      	cmp	r4, r2
 8007bec:	d002      	beq.n	8007bf4 <std+0x48>
 8007bee:	33d0      	adds	r3, #208	@ 0xd0
 8007bf0:	429c      	cmp	r4, r3
 8007bf2:	d105      	bne.n	8007c00 <std+0x54>
 8007bf4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007bf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bfc:	f000 b98a 	b.w	8007f14 <__retarget_lock_init_recursive>
 8007c00:	bd10      	pop	{r4, pc}
 8007c02:	bf00      	nop
 8007c04:	08007d75 	.word	0x08007d75
 8007c08:	08007d97 	.word	0x08007d97
 8007c0c:	08007dcf 	.word	0x08007dcf
 8007c10:	08007df3 	.word	0x08007df3
 8007c14:	200070a0 	.word	0x200070a0

08007c18 <stdio_exit_handler>:
 8007c18:	4a02      	ldr	r2, [pc, #8]	@ (8007c24 <stdio_exit_handler+0xc>)
 8007c1a:	4903      	ldr	r1, [pc, #12]	@ (8007c28 <stdio_exit_handler+0x10>)
 8007c1c:	4803      	ldr	r0, [pc, #12]	@ (8007c2c <stdio_exit_handler+0x14>)
 8007c1e:	f000 b869 	b.w	8007cf4 <_fwalk_sglue>
 8007c22:	bf00      	nop
 8007c24:	2000000c 	.word	0x2000000c
 8007c28:	08009895 	.word	0x08009895
 8007c2c:	2000001c 	.word	0x2000001c

08007c30 <cleanup_stdio>:
 8007c30:	6841      	ldr	r1, [r0, #4]
 8007c32:	4b0c      	ldr	r3, [pc, #48]	@ (8007c64 <cleanup_stdio+0x34>)
 8007c34:	4299      	cmp	r1, r3
 8007c36:	b510      	push	{r4, lr}
 8007c38:	4604      	mov	r4, r0
 8007c3a:	d001      	beq.n	8007c40 <cleanup_stdio+0x10>
 8007c3c:	f001 fe2a 	bl	8009894 <_fflush_r>
 8007c40:	68a1      	ldr	r1, [r4, #8]
 8007c42:	4b09      	ldr	r3, [pc, #36]	@ (8007c68 <cleanup_stdio+0x38>)
 8007c44:	4299      	cmp	r1, r3
 8007c46:	d002      	beq.n	8007c4e <cleanup_stdio+0x1e>
 8007c48:	4620      	mov	r0, r4
 8007c4a:	f001 fe23 	bl	8009894 <_fflush_r>
 8007c4e:	68e1      	ldr	r1, [r4, #12]
 8007c50:	4b06      	ldr	r3, [pc, #24]	@ (8007c6c <cleanup_stdio+0x3c>)
 8007c52:	4299      	cmp	r1, r3
 8007c54:	d004      	beq.n	8007c60 <cleanup_stdio+0x30>
 8007c56:	4620      	mov	r0, r4
 8007c58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c5c:	f001 be1a 	b.w	8009894 <_fflush_r>
 8007c60:	bd10      	pop	{r4, pc}
 8007c62:	bf00      	nop
 8007c64:	200070a0 	.word	0x200070a0
 8007c68:	20007108 	.word	0x20007108
 8007c6c:	20007170 	.word	0x20007170

08007c70 <global_stdio_init.part.0>:
 8007c70:	b510      	push	{r4, lr}
 8007c72:	4b0b      	ldr	r3, [pc, #44]	@ (8007ca0 <global_stdio_init.part.0+0x30>)
 8007c74:	4c0b      	ldr	r4, [pc, #44]	@ (8007ca4 <global_stdio_init.part.0+0x34>)
 8007c76:	4a0c      	ldr	r2, [pc, #48]	@ (8007ca8 <global_stdio_init.part.0+0x38>)
 8007c78:	601a      	str	r2, [r3, #0]
 8007c7a:	4620      	mov	r0, r4
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	2104      	movs	r1, #4
 8007c80:	f7ff ff94 	bl	8007bac <std>
 8007c84:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007c88:	2201      	movs	r2, #1
 8007c8a:	2109      	movs	r1, #9
 8007c8c:	f7ff ff8e 	bl	8007bac <std>
 8007c90:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007c94:	2202      	movs	r2, #2
 8007c96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c9a:	2112      	movs	r1, #18
 8007c9c:	f7ff bf86 	b.w	8007bac <std>
 8007ca0:	200071d8 	.word	0x200071d8
 8007ca4:	200070a0 	.word	0x200070a0
 8007ca8:	08007c19 	.word	0x08007c19

08007cac <__sfp_lock_acquire>:
 8007cac:	4801      	ldr	r0, [pc, #4]	@ (8007cb4 <__sfp_lock_acquire+0x8>)
 8007cae:	f000 b932 	b.w	8007f16 <__retarget_lock_acquire_recursive>
 8007cb2:	bf00      	nop
 8007cb4:	200071e1 	.word	0x200071e1

08007cb8 <__sfp_lock_release>:
 8007cb8:	4801      	ldr	r0, [pc, #4]	@ (8007cc0 <__sfp_lock_release+0x8>)
 8007cba:	f000 b92d 	b.w	8007f18 <__retarget_lock_release_recursive>
 8007cbe:	bf00      	nop
 8007cc0:	200071e1 	.word	0x200071e1

08007cc4 <__sinit>:
 8007cc4:	b510      	push	{r4, lr}
 8007cc6:	4604      	mov	r4, r0
 8007cc8:	f7ff fff0 	bl	8007cac <__sfp_lock_acquire>
 8007ccc:	6a23      	ldr	r3, [r4, #32]
 8007cce:	b11b      	cbz	r3, 8007cd8 <__sinit+0x14>
 8007cd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007cd4:	f7ff bff0 	b.w	8007cb8 <__sfp_lock_release>
 8007cd8:	4b04      	ldr	r3, [pc, #16]	@ (8007cec <__sinit+0x28>)
 8007cda:	6223      	str	r3, [r4, #32]
 8007cdc:	4b04      	ldr	r3, [pc, #16]	@ (8007cf0 <__sinit+0x2c>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d1f5      	bne.n	8007cd0 <__sinit+0xc>
 8007ce4:	f7ff ffc4 	bl	8007c70 <global_stdio_init.part.0>
 8007ce8:	e7f2      	b.n	8007cd0 <__sinit+0xc>
 8007cea:	bf00      	nop
 8007cec:	08007c31 	.word	0x08007c31
 8007cf0:	200071d8 	.word	0x200071d8

08007cf4 <_fwalk_sglue>:
 8007cf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cf8:	4607      	mov	r7, r0
 8007cfa:	4688      	mov	r8, r1
 8007cfc:	4614      	mov	r4, r2
 8007cfe:	2600      	movs	r6, #0
 8007d00:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007d04:	f1b9 0901 	subs.w	r9, r9, #1
 8007d08:	d505      	bpl.n	8007d16 <_fwalk_sglue+0x22>
 8007d0a:	6824      	ldr	r4, [r4, #0]
 8007d0c:	2c00      	cmp	r4, #0
 8007d0e:	d1f7      	bne.n	8007d00 <_fwalk_sglue+0xc>
 8007d10:	4630      	mov	r0, r6
 8007d12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d16:	89ab      	ldrh	r3, [r5, #12]
 8007d18:	2b01      	cmp	r3, #1
 8007d1a:	d907      	bls.n	8007d2c <_fwalk_sglue+0x38>
 8007d1c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007d20:	3301      	adds	r3, #1
 8007d22:	d003      	beq.n	8007d2c <_fwalk_sglue+0x38>
 8007d24:	4629      	mov	r1, r5
 8007d26:	4638      	mov	r0, r7
 8007d28:	47c0      	blx	r8
 8007d2a:	4306      	orrs	r6, r0
 8007d2c:	3568      	adds	r5, #104	@ 0x68
 8007d2e:	e7e9      	b.n	8007d04 <_fwalk_sglue+0x10>

08007d30 <siprintf>:
 8007d30:	b40e      	push	{r1, r2, r3}
 8007d32:	b510      	push	{r4, lr}
 8007d34:	b09d      	sub	sp, #116	@ 0x74
 8007d36:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007d38:	9002      	str	r0, [sp, #8]
 8007d3a:	9006      	str	r0, [sp, #24]
 8007d3c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007d40:	480a      	ldr	r0, [pc, #40]	@ (8007d6c <siprintf+0x3c>)
 8007d42:	9107      	str	r1, [sp, #28]
 8007d44:	9104      	str	r1, [sp, #16]
 8007d46:	490a      	ldr	r1, [pc, #40]	@ (8007d70 <siprintf+0x40>)
 8007d48:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d4c:	9105      	str	r1, [sp, #20]
 8007d4e:	2400      	movs	r4, #0
 8007d50:	a902      	add	r1, sp, #8
 8007d52:	6800      	ldr	r0, [r0, #0]
 8007d54:	9301      	str	r3, [sp, #4]
 8007d56:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007d58:	f001 fc1c 	bl	8009594 <_svfiprintf_r>
 8007d5c:	9b02      	ldr	r3, [sp, #8]
 8007d5e:	701c      	strb	r4, [r3, #0]
 8007d60:	b01d      	add	sp, #116	@ 0x74
 8007d62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d66:	b003      	add	sp, #12
 8007d68:	4770      	bx	lr
 8007d6a:	bf00      	nop
 8007d6c:	20000018 	.word	0x20000018
 8007d70:	ffff0208 	.word	0xffff0208

08007d74 <__sread>:
 8007d74:	b510      	push	{r4, lr}
 8007d76:	460c      	mov	r4, r1
 8007d78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d7c:	f000 f87c 	bl	8007e78 <_read_r>
 8007d80:	2800      	cmp	r0, #0
 8007d82:	bfab      	itete	ge
 8007d84:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007d86:	89a3      	ldrhlt	r3, [r4, #12]
 8007d88:	181b      	addge	r3, r3, r0
 8007d8a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007d8e:	bfac      	ite	ge
 8007d90:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007d92:	81a3      	strhlt	r3, [r4, #12]
 8007d94:	bd10      	pop	{r4, pc}

08007d96 <__swrite>:
 8007d96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d9a:	461f      	mov	r7, r3
 8007d9c:	898b      	ldrh	r3, [r1, #12]
 8007d9e:	05db      	lsls	r3, r3, #23
 8007da0:	4605      	mov	r5, r0
 8007da2:	460c      	mov	r4, r1
 8007da4:	4616      	mov	r6, r2
 8007da6:	d505      	bpl.n	8007db4 <__swrite+0x1e>
 8007da8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dac:	2302      	movs	r3, #2
 8007dae:	2200      	movs	r2, #0
 8007db0:	f000 f850 	bl	8007e54 <_lseek_r>
 8007db4:	89a3      	ldrh	r3, [r4, #12]
 8007db6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007dba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007dbe:	81a3      	strh	r3, [r4, #12]
 8007dc0:	4632      	mov	r2, r6
 8007dc2:	463b      	mov	r3, r7
 8007dc4:	4628      	mov	r0, r5
 8007dc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007dca:	f000 b867 	b.w	8007e9c <_write_r>

08007dce <__sseek>:
 8007dce:	b510      	push	{r4, lr}
 8007dd0:	460c      	mov	r4, r1
 8007dd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dd6:	f000 f83d 	bl	8007e54 <_lseek_r>
 8007dda:	1c43      	adds	r3, r0, #1
 8007ddc:	89a3      	ldrh	r3, [r4, #12]
 8007dde:	bf15      	itete	ne
 8007de0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007de2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007de6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007dea:	81a3      	strheq	r3, [r4, #12]
 8007dec:	bf18      	it	ne
 8007dee:	81a3      	strhne	r3, [r4, #12]
 8007df0:	bd10      	pop	{r4, pc}

08007df2 <__sclose>:
 8007df2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007df6:	f000 b81d 	b.w	8007e34 <_close_r>

08007dfa <memcmp>:
 8007dfa:	b510      	push	{r4, lr}
 8007dfc:	3901      	subs	r1, #1
 8007dfe:	4402      	add	r2, r0
 8007e00:	4290      	cmp	r0, r2
 8007e02:	d101      	bne.n	8007e08 <memcmp+0xe>
 8007e04:	2000      	movs	r0, #0
 8007e06:	e005      	b.n	8007e14 <memcmp+0x1a>
 8007e08:	7803      	ldrb	r3, [r0, #0]
 8007e0a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007e0e:	42a3      	cmp	r3, r4
 8007e10:	d001      	beq.n	8007e16 <memcmp+0x1c>
 8007e12:	1b18      	subs	r0, r3, r4
 8007e14:	bd10      	pop	{r4, pc}
 8007e16:	3001      	adds	r0, #1
 8007e18:	e7f2      	b.n	8007e00 <memcmp+0x6>

08007e1a <memset>:
 8007e1a:	4402      	add	r2, r0
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d100      	bne.n	8007e24 <memset+0xa>
 8007e22:	4770      	bx	lr
 8007e24:	f803 1b01 	strb.w	r1, [r3], #1
 8007e28:	e7f9      	b.n	8007e1e <memset+0x4>
	...

08007e2c <_localeconv_r>:
 8007e2c:	4800      	ldr	r0, [pc, #0]	@ (8007e30 <_localeconv_r+0x4>)
 8007e2e:	4770      	bx	lr
 8007e30:	20000158 	.word	0x20000158

08007e34 <_close_r>:
 8007e34:	b538      	push	{r3, r4, r5, lr}
 8007e36:	4d06      	ldr	r5, [pc, #24]	@ (8007e50 <_close_r+0x1c>)
 8007e38:	2300      	movs	r3, #0
 8007e3a:	4604      	mov	r4, r0
 8007e3c:	4608      	mov	r0, r1
 8007e3e:	602b      	str	r3, [r5, #0]
 8007e40:	f7fb fd88 	bl	8003954 <_close>
 8007e44:	1c43      	adds	r3, r0, #1
 8007e46:	d102      	bne.n	8007e4e <_close_r+0x1a>
 8007e48:	682b      	ldr	r3, [r5, #0]
 8007e4a:	b103      	cbz	r3, 8007e4e <_close_r+0x1a>
 8007e4c:	6023      	str	r3, [r4, #0]
 8007e4e:	bd38      	pop	{r3, r4, r5, pc}
 8007e50:	200071dc 	.word	0x200071dc

08007e54 <_lseek_r>:
 8007e54:	b538      	push	{r3, r4, r5, lr}
 8007e56:	4d07      	ldr	r5, [pc, #28]	@ (8007e74 <_lseek_r+0x20>)
 8007e58:	4604      	mov	r4, r0
 8007e5a:	4608      	mov	r0, r1
 8007e5c:	4611      	mov	r1, r2
 8007e5e:	2200      	movs	r2, #0
 8007e60:	602a      	str	r2, [r5, #0]
 8007e62:	461a      	mov	r2, r3
 8007e64:	f7fb fd9d 	bl	80039a2 <_lseek>
 8007e68:	1c43      	adds	r3, r0, #1
 8007e6a:	d102      	bne.n	8007e72 <_lseek_r+0x1e>
 8007e6c:	682b      	ldr	r3, [r5, #0]
 8007e6e:	b103      	cbz	r3, 8007e72 <_lseek_r+0x1e>
 8007e70:	6023      	str	r3, [r4, #0]
 8007e72:	bd38      	pop	{r3, r4, r5, pc}
 8007e74:	200071dc 	.word	0x200071dc

08007e78 <_read_r>:
 8007e78:	b538      	push	{r3, r4, r5, lr}
 8007e7a:	4d07      	ldr	r5, [pc, #28]	@ (8007e98 <_read_r+0x20>)
 8007e7c:	4604      	mov	r4, r0
 8007e7e:	4608      	mov	r0, r1
 8007e80:	4611      	mov	r1, r2
 8007e82:	2200      	movs	r2, #0
 8007e84:	602a      	str	r2, [r5, #0]
 8007e86:	461a      	mov	r2, r3
 8007e88:	f7fb fd2b 	bl	80038e2 <_read>
 8007e8c:	1c43      	adds	r3, r0, #1
 8007e8e:	d102      	bne.n	8007e96 <_read_r+0x1e>
 8007e90:	682b      	ldr	r3, [r5, #0]
 8007e92:	b103      	cbz	r3, 8007e96 <_read_r+0x1e>
 8007e94:	6023      	str	r3, [r4, #0]
 8007e96:	bd38      	pop	{r3, r4, r5, pc}
 8007e98:	200071dc 	.word	0x200071dc

08007e9c <_write_r>:
 8007e9c:	b538      	push	{r3, r4, r5, lr}
 8007e9e:	4d07      	ldr	r5, [pc, #28]	@ (8007ebc <_write_r+0x20>)
 8007ea0:	4604      	mov	r4, r0
 8007ea2:	4608      	mov	r0, r1
 8007ea4:	4611      	mov	r1, r2
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	602a      	str	r2, [r5, #0]
 8007eaa:	461a      	mov	r2, r3
 8007eac:	f7fb fd36 	bl	800391c <_write>
 8007eb0:	1c43      	adds	r3, r0, #1
 8007eb2:	d102      	bne.n	8007eba <_write_r+0x1e>
 8007eb4:	682b      	ldr	r3, [r5, #0]
 8007eb6:	b103      	cbz	r3, 8007eba <_write_r+0x1e>
 8007eb8:	6023      	str	r3, [r4, #0]
 8007eba:	bd38      	pop	{r3, r4, r5, pc}
 8007ebc:	200071dc 	.word	0x200071dc

08007ec0 <__errno>:
 8007ec0:	4b01      	ldr	r3, [pc, #4]	@ (8007ec8 <__errno+0x8>)
 8007ec2:	6818      	ldr	r0, [r3, #0]
 8007ec4:	4770      	bx	lr
 8007ec6:	bf00      	nop
 8007ec8:	20000018 	.word	0x20000018

08007ecc <__libc_init_array>:
 8007ecc:	b570      	push	{r4, r5, r6, lr}
 8007ece:	4d0d      	ldr	r5, [pc, #52]	@ (8007f04 <__libc_init_array+0x38>)
 8007ed0:	4c0d      	ldr	r4, [pc, #52]	@ (8007f08 <__libc_init_array+0x3c>)
 8007ed2:	1b64      	subs	r4, r4, r5
 8007ed4:	10a4      	asrs	r4, r4, #2
 8007ed6:	2600      	movs	r6, #0
 8007ed8:	42a6      	cmp	r6, r4
 8007eda:	d109      	bne.n	8007ef0 <__libc_init_array+0x24>
 8007edc:	4d0b      	ldr	r5, [pc, #44]	@ (8007f0c <__libc_init_array+0x40>)
 8007ede:	4c0c      	ldr	r4, [pc, #48]	@ (8007f10 <__libc_init_array+0x44>)
 8007ee0:	f002 fa68 	bl	800a3b4 <_init>
 8007ee4:	1b64      	subs	r4, r4, r5
 8007ee6:	10a4      	asrs	r4, r4, #2
 8007ee8:	2600      	movs	r6, #0
 8007eea:	42a6      	cmp	r6, r4
 8007eec:	d105      	bne.n	8007efa <__libc_init_array+0x2e>
 8007eee:	bd70      	pop	{r4, r5, r6, pc}
 8007ef0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ef4:	4798      	blx	r3
 8007ef6:	3601      	adds	r6, #1
 8007ef8:	e7ee      	b.n	8007ed8 <__libc_init_array+0xc>
 8007efa:	f855 3b04 	ldr.w	r3, [r5], #4
 8007efe:	4798      	blx	r3
 8007f00:	3601      	adds	r6, #1
 8007f02:	e7f2      	b.n	8007eea <__libc_init_array+0x1e>
 8007f04:	0800aebc 	.word	0x0800aebc
 8007f08:	0800aebc 	.word	0x0800aebc
 8007f0c:	0800aebc 	.word	0x0800aebc
 8007f10:	0800aec0 	.word	0x0800aec0

08007f14 <__retarget_lock_init_recursive>:
 8007f14:	4770      	bx	lr

08007f16 <__retarget_lock_acquire_recursive>:
 8007f16:	4770      	bx	lr

08007f18 <__retarget_lock_release_recursive>:
 8007f18:	4770      	bx	lr

08007f1a <memcpy>:
 8007f1a:	440a      	add	r2, r1
 8007f1c:	4291      	cmp	r1, r2
 8007f1e:	f100 33ff 	add.w	r3, r0, #4294967295
 8007f22:	d100      	bne.n	8007f26 <memcpy+0xc>
 8007f24:	4770      	bx	lr
 8007f26:	b510      	push	{r4, lr}
 8007f28:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f2c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f30:	4291      	cmp	r1, r2
 8007f32:	d1f9      	bne.n	8007f28 <memcpy+0xe>
 8007f34:	bd10      	pop	{r4, pc}

08007f36 <quorem>:
 8007f36:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f3a:	6903      	ldr	r3, [r0, #16]
 8007f3c:	690c      	ldr	r4, [r1, #16]
 8007f3e:	42a3      	cmp	r3, r4
 8007f40:	4607      	mov	r7, r0
 8007f42:	db7e      	blt.n	8008042 <quorem+0x10c>
 8007f44:	3c01      	subs	r4, #1
 8007f46:	f101 0814 	add.w	r8, r1, #20
 8007f4a:	00a3      	lsls	r3, r4, #2
 8007f4c:	f100 0514 	add.w	r5, r0, #20
 8007f50:	9300      	str	r3, [sp, #0]
 8007f52:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007f56:	9301      	str	r3, [sp, #4]
 8007f58:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007f5c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007f60:	3301      	adds	r3, #1
 8007f62:	429a      	cmp	r2, r3
 8007f64:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007f68:	fbb2 f6f3 	udiv	r6, r2, r3
 8007f6c:	d32e      	bcc.n	8007fcc <quorem+0x96>
 8007f6e:	f04f 0a00 	mov.w	sl, #0
 8007f72:	46c4      	mov	ip, r8
 8007f74:	46ae      	mov	lr, r5
 8007f76:	46d3      	mov	fp, sl
 8007f78:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007f7c:	b298      	uxth	r0, r3
 8007f7e:	fb06 a000 	mla	r0, r6, r0, sl
 8007f82:	0c02      	lsrs	r2, r0, #16
 8007f84:	0c1b      	lsrs	r3, r3, #16
 8007f86:	fb06 2303 	mla	r3, r6, r3, r2
 8007f8a:	f8de 2000 	ldr.w	r2, [lr]
 8007f8e:	b280      	uxth	r0, r0
 8007f90:	b292      	uxth	r2, r2
 8007f92:	1a12      	subs	r2, r2, r0
 8007f94:	445a      	add	r2, fp
 8007f96:	f8de 0000 	ldr.w	r0, [lr]
 8007f9a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007f9e:	b29b      	uxth	r3, r3
 8007fa0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007fa4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007fa8:	b292      	uxth	r2, r2
 8007faa:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007fae:	45e1      	cmp	r9, ip
 8007fb0:	f84e 2b04 	str.w	r2, [lr], #4
 8007fb4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007fb8:	d2de      	bcs.n	8007f78 <quorem+0x42>
 8007fba:	9b00      	ldr	r3, [sp, #0]
 8007fbc:	58eb      	ldr	r3, [r5, r3]
 8007fbe:	b92b      	cbnz	r3, 8007fcc <quorem+0x96>
 8007fc0:	9b01      	ldr	r3, [sp, #4]
 8007fc2:	3b04      	subs	r3, #4
 8007fc4:	429d      	cmp	r5, r3
 8007fc6:	461a      	mov	r2, r3
 8007fc8:	d32f      	bcc.n	800802a <quorem+0xf4>
 8007fca:	613c      	str	r4, [r7, #16]
 8007fcc:	4638      	mov	r0, r7
 8007fce:	f001 f97d 	bl	80092cc <__mcmp>
 8007fd2:	2800      	cmp	r0, #0
 8007fd4:	db25      	blt.n	8008022 <quorem+0xec>
 8007fd6:	4629      	mov	r1, r5
 8007fd8:	2000      	movs	r0, #0
 8007fda:	f858 2b04 	ldr.w	r2, [r8], #4
 8007fde:	f8d1 c000 	ldr.w	ip, [r1]
 8007fe2:	fa1f fe82 	uxth.w	lr, r2
 8007fe6:	fa1f f38c 	uxth.w	r3, ip
 8007fea:	eba3 030e 	sub.w	r3, r3, lr
 8007fee:	4403      	add	r3, r0
 8007ff0:	0c12      	lsrs	r2, r2, #16
 8007ff2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007ff6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007ffa:	b29b      	uxth	r3, r3
 8007ffc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008000:	45c1      	cmp	r9, r8
 8008002:	f841 3b04 	str.w	r3, [r1], #4
 8008006:	ea4f 4022 	mov.w	r0, r2, asr #16
 800800a:	d2e6      	bcs.n	8007fda <quorem+0xa4>
 800800c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008010:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008014:	b922      	cbnz	r2, 8008020 <quorem+0xea>
 8008016:	3b04      	subs	r3, #4
 8008018:	429d      	cmp	r5, r3
 800801a:	461a      	mov	r2, r3
 800801c:	d30b      	bcc.n	8008036 <quorem+0x100>
 800801e:	613c      	str	r4, [r7, #16]
 8008020:	3601      	adds	r6, #1
 8008022:	4630      	mov	r0, r6
 8008024:	b003      	add	sp, #12
 8008026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800802a:	6812      	ldr	r2, [r2, #0]
 800802c:	3b04      	subs	r3, #4
 800802e:	2a00      	cmp	r2, #0
 8008030:	d1cb      	bne.n	8007fca <quorem+0x94>
 8008032:	3c01      	subs	r4, #1
 8008034:	e7c6      	b.n	8007fc4 <quorem+0x8e>
 8008036:	6812      	ldr	r2, [r2, #0]
 8008038:	3b04      	subs	r3, #4
 800803a:	2a00      	cmp	r2, #0
 800803c:	d1ef      	bne.n	800801e <quorem+0xe8>
 800803e:	3c01      	subs	r4, #1
 8008040:	e7ea      	b.n	8008018 <quorem+0xe2>
 8008042:	2000      	movs	r0, #0
 8008044:	e7ee      	b.n	8008024 <quorem+0xee>
	...

08008048 <_dtoa_r>:
 8008048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800804c:	69c7      	ldr	r7, [r0, #28]
 800804e:	b097      	sub	sp, #92	@ 0x5c
 8008050:	ed8d 0b04 	vstr	d0, [sp, #16]
 8008054:	ec55 4b10 	vmov	r4, r5, d0
 8008058:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800805a:	9107      	str	r1, [sp, #28]
 800805c:	4681      	mov	r9, r0
 800805e:	920c      	str	r2, [sp, #48]	@ 0x30
 8008060:	9311      	str	r3, [sp, #68]	@ 0x44
 8008062:	b97f      	cbnz	r7, 8008084 <_dtoa_r+0x3c>
 8008064:	2010      	movs	r0, #16
 8008066:	f000 fe09 	bl	8008c7c <malloc>
 800806a:	4602      	mov	r2, r0
 800806c:	f8c9 001c 	str.w	r0, [r9, #28]
 8008070:	b920      	cbnz	r0, 800807c <_dtoa_r+0x34>
 8008072:	4ba9      	ldr	r3, [pc, #676]	@ (8008318 <_dtoa_r+0x2d0>)
 8008074:	21ef      	movs	r1, #239	@ 0xef
 8008076:	48a9      	ldr	r0, [pc, #676]	@ (800831c <_dtoa_r+0x2d4>)
 8008078:	f001 fc5e 	bl	8009938 <__assert_func>
 800807c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008080:	6007      	str	r7, [r0, #0]
 8008082:	60c7      	str	r7, [r0, #12]
 8008084:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008088:	6819      	ldr	r1, [r3, #0]
 800808a:	b159      	cbz	r1, 80080a4 <_dtoa_r+0x5c>
 800808c:	685a      	ldr	r2, [r3, #4]
 800808e:	604a      	str	r2, [r1, #4]
 8008090:	2301      	movs	r3, #1
 8008092:	4093      	lsls	r3, r2
 8008094:	608b      	str	r3, [r1, #8]
 8008096:	4648      	mov	r0, r9
 8008098:	f000 fee6 	bl	8008e68 <_Bfree>
 800809c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80080a0:	2200      	movs	r2, #0
 80080a2:	601a      	str	r2, [r3, #0]
 80080a4:	1e2b      	subs	r3, r5, #0
 80080a6:	bfb9      	ittee	lt
 80080a8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80080ac:	9305      	strlt	r3, [sp, #20]
 80080ae:	2300      	movge	r3, #0
 80080b0:	6033      	strge	r3, [r6, #0]
 80080b2:	9f05      	ldr	r7, [sp, #20]
 80080b4:	4b9a      	ldr	r3, [pc, #616]	@ (8008320 <_dtoa_r+0x2d8>)
 80080b6:	bfbc      	itt	lt
 80080b8:	2201      	movlt	r2, #1
 80080ba:	6032      	strlt	r2, [r6, #0]
 80080bc:	43bb      	bics	r3, r7
 80080be:	d112      	bne.n	80080e6 <_dtoa_r+0x9e>
 80080c0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80080c2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80080c6:	6013      	str	r3, [r2, #0]
 80080c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80080cc:	4323      	orrs	r3, r4
 80080ce:	f000 855a 	beq.w	8008b86 <_dtoa_r+0xb3e>
 80080d2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80080d4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8008334 <_dtoa_r+0x2ec>
 80080d8:	2b00      	cmp	r3, #0
 80080da:	f000 855c 	beq.w	8008b96 <_dtoa_r+0xb4e>
 80080de:	f10a 0303 	add.w	r3, sl, #3
 80080e2:	f000 bd56 	b.w	8008b92 <_dtoa_r+0xb4a>
 80080e6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80080ea:	2200      	movs	r2, #0
 80080ec:	ec51 0b17 	vmov	r0, r1, d7
 80080f0:	2300      	movs	r3, #0
 80080f2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80080f6:	f7f8 fcef 	bl	8000ad8 <__aeabi_dcmpeq>
 80080fa:	4680      	mov	r8, r0
 80080fc:	b158      	cbz	r0, 8008116 <_dtoa_r+0xce>
 80080fe:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008100:	2301      	movs	r3, #1
 8008102:	6013      	str	r3, [r2, #0]
 8008104:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008106:	b113      	cbz	r3, 800810e <_dtoa_r+0xc6>
 8008108:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800810a:	4b86      	ldr	r3, [pc, #536]	@ (8008324 <_dtoa_r+0x2dc>)
 800810c:	6013      	str	r3, [r2, #0]
 800810e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8008338 <_dtoa_r+0x2f0>
 8008112:	f000 bd40 	b.w	8008b96 <_dtoa_r+0xb4e>
 8008116:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800811a:	aa14      	add	r2, sp, #80	@ 0x50
 800811c:	a915      	add	r1, sp, #84	@ 0x54
 800811e:	4648      	mov	r0, r9
 8008120:	f001 f984 	bl	800942c <__d2b>
 8008124:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008128:	9002      	str	r0, [sp, #8]
 800812a:	2e00      	cmp	r6, #0
 800812c:	d078      	beq.n	8008220 <_dtoa_r+0x1d8>
 800812e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008130:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8008134:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008138:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800813c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008140:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008144:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008148:	4619      	mov	r1, r3
 800814a:	2200      	movs	r2, #0
 800814c:	4b76      	ldr	r3, [pc, #472]	@ (8008328 <_dtoa_r+0x2e0>)
 800814e:	f7f8 f8a3 	bl	8000298 <__aeabi_dsub>
 8008152:	a36b      	add	r3, pc, #428	@ (adr r3, 8008300 <_dtoa_r+0x2b8>)
 8008154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008158:	f7f8 fa56 	bl	8000608 <__aeabi_dmul>
 800815c:	a36a      	add	r3, pc, #424	@ (adr r3, 8008308 <_dtoa_r+0x2c0>)
 800815e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008162:	f7f8 f89b 	bl	800029c <__adddf3>
 8008166:	4604      	mov	r4, r0
 8008168:	4630      	mov	r0, r6
 800816a:	460d      	mov	r5, r1
 800816c:	f7f8 f9e2 	bl	8000534 <__aeabi_i2d>
 8008170:	a367      	add	r3, pc, #412	@ (adr r3, 8008310 <_dtoa_r+0x2c8>)
 8008172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008176:	f7f8 fa47 	bl	8000608 <__aeabi_dmul>
 800817a:	4602      	mov	r2, r0
 800817c:	460b      	mov	r3, r1
 800817e:	4620      	mov	r0, r4
 8008180:	4629      	mov	r1, r5
 8008182:	f7f8 f88b 	bl	800029c <__adddf3>
 8008186:	4604      	mov	r4, r0
 8008188:	460d      	mov	r5, r1
 800818a:	f7f8 fced 	bl	8000b68 <__aeabi_d2iz>
 800818e:	2200      	movs	r2, #0
 8008190:	4607      	mov	r7, r0
 8008192:	2300      	movs	r3, #0
 8008194:	4620      	mov	r0, r4
 8008196:	4629      	mov	r1, r5
 8008198:	f7f8 fca8 	bl	8000aec <__aeabi_dcmplt>
 800819c:	b140      	cbz	r0, 80081b0 <_dtoa_r+0x168>
 800819e:	4638      	mov	r0, r7
 80081a0:	f7f8 f9c8 	bl	8000534 <__aeabi_i2d>
 80081a4:	4622      	mov	r2, r4
 80081a6:	462b      	mov	r3, r5
 80081a8:	f7f8 fc96 	bl	8000ad8 <__aeabi_dcmpeq>
 80081ac:	b900      	cbnz	r0, 80081b0 <_dtoa_r+0x168>
 80081ae:	3f01      	subs	r7, #1
 80081b0:	2f16      	cmp	r7, #22
 80081b2:	d852      	bhi.n	800825a <_dtoa_r+0x212>
 80081b4:	4b5d      	ldr	r3, [pc, #372]	@ (800832c <_dtoa_r+0x2e4>)
 80081b6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80081ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80081c2:	f7f8 fc93 	bl	8000aec <__aeabi_dcmplt>
 80081c6:	2800      	cmp	r0, #0
 80081c8:	d049      	beq.n	800825e <_dtoa_r+0x216>
 80081ca:	3f01      	subs	r7, #1
 80081cc:	2300      	movs	r3, #0
 80081ce:	9310      	str	r3, [sp, #64]	@ 0x40
 80081d0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80081d2:	1b9b      	subs	r3, r3, r6
 80081d4:	1e5a      	subs	r2, r3, #1
 80081d6:	bf45      	ittet	mi
 80081d8:	f1c3 0301 	rsbmi	r3, r3, #1
 80081dc:	9300      	strmi	r3, [sp, #0]
 80081de:	2300      	movpl	r3, #0
 80081e0:	2300      	movmi	r3, #0
 80081e2:	9206      	str	r2, [sp, #24]
 80081e4:	bf54      	ite	pl
 80081e6:	9300      	strpl	r3, [sp, #0]
 80081e8:	9306      	strmi	r3, [sp, #24]
 80081ea:	2f00      	cmp	r7, #0
 80081ec:	db39      	blt.n	8008262 <_dtoa_r+0x21a>
 80081ee:	9b06      	ldr	r3, [sp, #24]
 80081f0:	970d      	str	r7, [sp, #52]	@ 0x34
 80081f2:	443b      	add	r3, r7
 80081f4:	9306      	str	r3, [sp, #24]
 80081f6:	2300      	movs	r3, #0
 80081f8:	9308      	str	r3, [sp, #32]
 80081fa:	9b07      	ldr	r3, [sp, #28]
 80081fc:	2b09      	cmp	r3, #9
 80081fe:	d863      	bhi.n	80082c8 <_dtoa_r+0x280>
 8008200:	2b05      	cmp	r3, #5
 8008202:	bfc4      	itt	gt
 8008204:	3b04      	subgt	r3, #4
 8008206:	9307      	strgt	r3, [sp, #28]
 8008208:	9b07      	ldr	r3, [sp, #28]
 800820a:	f1a3 0302 	sub.w	r3, r3, #2
 800820e:	bfcc      	ite	gt
 8008210:	2400      	movgt	r4, #0
 8008212:	2401      	movle	r4, #1
 8008214:	2b03      	cmp	r3, #3
 8008216:	d863      	bhi.n	80082e0 <_dtoa_r+0x298>
 8008218:	e8df f003 	tbb	[pc, r3]
 800821c:	2b375452 	.word	0x2b375452
 8008220:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8008224:	441e      	add	r6, r3
 8008226:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800822a:	2b20      	cmp	r3, #32
 800822c:	bfc1      	itttt	gt
 800822e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008232:	409f      	lslgt	r7, r3
 8008234:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008238:	fa24 f303 	lsrgt.w	r3, r4, r3
 800823c:	bfd6      	itet	le
 800823e:	f1c3 0320 	rsble	r3, r3, #32
 8008242:	ea47 0003 	orrgt.w	r0, r7, r3
 8008246:	fa04 f003 	lslle.w	r0, r4, r3
 800824a:	f7f8 f963 	bl	8000514 <__aeabi_ui2d>
 800824e:	2201      	movs	r2, #1
 8008250:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008254:	3e01      	subs	r6, #1
 8008256:	9212      	str	r2, [sp, #72]	@ 0x48
 8008258:	e776      	b.n	8008148 <_dtoa_r+0x100>
 800825a:	2301      	movs	r3, #1
 800825c:	e7b7      	b.n	80081ce <_dtoa_r+0x186>
 800825e:	9010      	str	r0, [sp, #64]	@ 0x40
 8008260:	e7b6      	b.n	80081d0 <_dtoa_r+0x188>
 8008262:	9b00      	ldr	r3, [sp, #0]
 8008264:	1bdb      	subs	r3, r3, r7
 8008266:	9300      	str	r3, [sp, #0]
 8008268:	427b      	negs	r3, r7
 800826a:	9308      	str	r3, [sp, #32]
 800826c:	2300      	movs	r3, #0
 800826e:	930d      	str	r3, [sp, #52]	@ 0x34
 8008270:	e7c3      	b.n	80081fa <_dtoa_r+0x1b2>
 8008272:	2301      	movs	r3, #1
 8008274:	9309      	str	r3, [sp, #36]	@ 0x24
 8008276:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008278:	eb07 0b03 	add.w	fp, r7, r3
 800827c:	f10b 0301 	add.w	r3, fp, #1
 8008280:	2b01      	cmp	r3, #1
 8008282:	9303      	str	r3, [sp, #12]
 8008284:	bfb8      	it	lt
 8008286:	2301      	movlt	r3, #1
 8008288:	e006      	b.n	8008298 <_dtoa_r+0x250>
 800828a:	2301      	movs	r3, #1
 800828c:	9309      	str	r3, [sp, #36]	@ 0x24
 800828e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008290:	2b00      	cmp	r3, #0
 8008292:	dd28      	ble.n	80082e6 <_dtoa_r+0x29e>
 8008294:	469b      	mov	fp, r3
 8008296:	9303      	str	r3, [sp, #12]
 8008298:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800829c:	2100      	movs	r1, #0
 800829e:	2204      	movs	r2, #4
 80082a0:	f102 0514 	add.w	r5, r2, #20
 80082a4:	429d      	cmp	r5, r3
 80082a6:	d926      	bls.n	80082f6 <_dtoa_r+0x2ae>
 80082a8:	6041      	str	r1, [r0, #4]
 80082aa:	4648      	mov	r0, r9
 80082ac:	f000 fd9c 	bl	8008de8 <_Balloc>
 80082b0:	4682      	mov	sl, r0
 80082b2:	2800      	cmp	r0, #0
 80082b4:	d142      	bne.n	800833c <_dtoa_r+0x2f4>
 80082b6:	4b1e      	ldr	r3, [pc, #120]	@ (8008330 <_dtoa_r+0x2e8>)
 80082b8:	4602      	mov	r2, r0
 80082ba:	f240 11af 	movw	r1, #431	@ 0x1af
 80082be:	e6da      	b.n	8008076 <_dtoa_r+0x2e>
 80082c0:	2300      	movs	r3, #0
 80082c2:	e7e3      	b.n	800828c <_dtoa_r+0x244>
 80082c4:	2300      	movs	r3, #0
 80082c6:	e7d5      	b.n	8008274 <_dtoa_r+0x22c>
 80082c8:	2401      	movs	r4, #1
 80082ca:	2300      	movs	r3, #0
 80082cc:	9307      	str	r3, [sp, #28]
 80082ce:	9409      	str	r4, [sp, #36]	@ 0x24
 80082d0:	f04f 3bff 	mov.w	fp, #4294967295
 80082d4:	2200      	movs	r2, #0
 80082d6:	f8cd b00c 	str.w	fp, [sp, #12]
 80082da:	2312      	movs	r3, #18
 80082dc:	920c      	str	r2, [sp, #48]	@ 0x30
 80082de:	e7db      	b.n	8008298 <_dtoa_r+0x250>
 80082e0:	2301      	movs	r3, #1
 80082e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80082e4:	e7f4      	b.n	80082d0 <_dtoa_r+0x288>
 80082e6:	f04f 0b01 	mov.w	fp, #1
 80082ea:	f8cd b00c 	str.w	fp, [sp, #12]
 80082ee:	465b      	mov	r3, fp
 80082f0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80082f4:	e7d0      	b.n	8008298 <_dtoa_r+0x250>
 80082f6:	3101      	adds	r1, #1
 80082f8:	0052      	lsls	r2, r2, #1
 80082fa:	e7d1      	b.n	80082a0 <_dtoa_r+0x258>
 80082fc:	f3af 8000 	nop.w
 8008300:	636f4361 	.word	0x636f4361
 8008304:	3fd287a7 	.word	0x3fd287a7
 8008308:	8b60c8b3 	.word	0x8b60c8b3
 800830c:	3fc68a28 	.word	0x3fc68a28
 8008310:	509f79fb 	.word	0x509f79fb
 8008314:	3fd34413 	.word	0x3fd34413
 8008318:	0800ab7d 	.word	0x0800ab7d
 800831c:	0800ab94 	.word	0x0800ab94
 8008320:	7ff00000 	.word	0x7ff00000
 8008324:	0800ab4d 	.word	0x0800ab4d
 8008328:	3ff80000 	.word	0x3ff80000
 800832c:	0800ace8 	.word	0x0800ace8
 8008330:	0800abec 	.word	0x0800abec
 8008334:	0800ab79 	.word	0x0800ab79
 8008338:	0800ab4c 	.word	0x0800ab4c
 800833c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008340:	6018      	str	r0, [r3, #0]
 8008342:	9b03      	ldr	r3, [sp, #12]
 8008344:	2b0e      	cmp	r3, #14
 8008346:	f200 80a1 	bhi.w	800848c <_dtoa_r+0x444>
 800834a:	2c00      	cmp	r4, #0
 800834c:	f000 809e 	beq.w	800848c <_dtoa_r+0x444>
 8008350:	2f00      	cmp	r7, #0
 8008352:	dd33      	ble.n	80083bc <_dtoa_r+0x374>
 8008354:	4b9c      	ldr	r3, [pc, #624]	@ (80085c8 <_dtoa_r+0x580>)
 8008356:	f007 020f 	and.w	r2, r7, #15
 800835a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800835e:	ed93 7b00 	vldr	d7, [r3]
 8008362:	05f8      	lsls	r0, r7, #23
 8008364:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8008368:	ea4f 1427 	mov.w	r4, r7, asr #4
 800836c:	d516      	bpl.n	800839c <_dtoa_r+0x354>
 800836e:	4b97      	ldr	r3, [pc, #604]	@ (80085cc <_dtoa_r+0x584>)
 8008370:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008374:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008378:	f7f8 fa70 	bl	800085c <__aeabi_ddiv>
 800837c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008380:	f004 040f 	and.w	r4, r4, #15
 8008384:	2603      	movs	r6, #3
 8008386:	4d91      	ldr	r5, [pc, #580]	@ (80085cc <_dtoa_r+0x584>)
 8008388:	b954      	cbnz	r4, 80083a0 <_dtoa_r+0x358>
 800838a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800838e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008392:	f7f8 fa63 	bl	800085c <__aeabi_ddiv>
 8008396:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800839a:	e028      	b.n	80083ee <_dtoa_r+0x3a6>
 800839c:	2602      	movs	r6, #2
 800839e:	e7f2      	b.n	8008386 <_dtoa_r+0x33e>
 80083a0:	07e1      	lsls	r1, r4, #31
 80083a2:	d508      	bpl.n	80083b6 <_dtoa_r+0x36e>
 80083a4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80083a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80083ac:	f7f8 f92c 	bl	8000608 <__aeabi_dmul>
 80083b0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80083b4:	3601      	adds	r6, #1
 80083b6:	1064      	asrs	r4, r4, #1
 80083b8:	3508      	adds	r5, #8
 80083ba:	e7e5      	b.n	8008388 <_dtoa_r+0x340>
 80083bc:	f000 80af 	beq.w	800851e <_dtoa_r+0x4d6>
 80083c0:	427c      	negs	r4, r7
 80083c2:	4b81      	ldr	r3, [pc, #516]	@ (80085c8 <_dtoa_r+0x580>)
 80083c4:	4d81      	ldr	r5, [pc, #516]	@ (80085cc <_dtoa_r+0x584>)
 80083c6:	f004 020f 	and.w	r2, r4, #15
 80083ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80083ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80083d6:	f7f8 f917 	bl	8000608 <__aeabi_dmul>
 80083da:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80083de:	1124      	asrs	r4, r4, #4
 80083e0:	2300      	movs	r3, #0
 80083e2:	2602      	movs	r6, #2
 80083e4:	2c00      	cmp	r4, #0
 80083e6:	f040 808f 	bne.w	8008508 <_dtoa_r+0x4c0>
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d1d3      	bne.n	8008396 <_dtoa_r+0x34e>
 80083ee:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80083f0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	f000 8094 	beq.w	8008522 <_dtoa_r+0x4da>
 80083fa:	4b75      	ldr	r3, [pc, #468]	@ (80085d0 <_dtoa_r+0x588>)
 80083fc:	2200      	movs	r2, #0
 80083fe:	4620      	mov	r0, r4
 8008400:	4629      	mov	r1, r5
 8008402:	f7f8 fb73 	bl	8000aec <__aeabi_dcmplt>
 8008406:	2800      	cmp	r0, #0
 8008408:	f000 808b 	beq.w	8008522 <_dtoa_r+0x4da>
 800840c:	9b03      	ldr	r3, [sp, #12]
 800840e:	2b00      	cmp	r3, #0
 8008410:	f000 8087 	beq.w	8008522 <_dtoa_r+0x4da>
 8008414:	f1bb 0f00 	cmp.w	fp, #0
 8008418:	dd34      	ble.n	8008484 <_dtoa_r+0x43c>
 800841a:	4620      	mov	r0, r4
 800841c:	4b6d      	ldr	r3, [pc, #436]	@ (80085d4 <_dtoa_r+0x58c>)
 800841e:	2200      	movs	r2, #0
 8008420:	4629      	mov	r1, r5
 8008422:	f7f8 f8f1 	bl	8000608 <__aeabi_dmul>
 8008426:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800842a:	f107 38ff 	add.w	r8, r7, #4294967295
 800842e:	3601      	adds	r6, #1
 8008430:	465c      	mov	r4, fp
 8008432:	4630      	mov	r0, r6
 8008434:	f7f8 f87e 	bl	8000534 <__aeabi_i2d>
 8008438:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800843c:	f7f8 f8e4 	bl	8000608 <__aeabi_dmul>
 8008440:	4b65      	ldr	r3, [pc, #404]	@ (80085d8 <_dtoa_r+0x590>)
 8008442:	2200      	movs	r2, #0
 8008444:	f7f7 ff2a 	bl	800029c <__adddf3>
 8008448:	4605      	mov	r5, r0
 800844a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800844e:	2c00      	cmp	r4, #0
 8008450:	d16a      	bne.n	8008528 <_dtoa_r+0x4e0>
 8008452:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008456:	4b61      	ldr	r3, [pc, #388]	@ (80085dc <_dtoa_r+0x594>)
 8008458:	2200      	movs	r2, #0
 800845a:	f7f7 ff1d 	bl	8000298 <__aeabi_dsub>
 800845e:	4602      	mov	r2, r0
 8008460:	460b      	mov	r3, r1
 8008462:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008466:	462a      	mov	r2, r5
 8008468:	4633      	mov	r3, r6
 800846a:	f7f8 fb5d 	bl	8000b28 <__aeabi_dcmpgt>
 800846e:	2800      	cmp	r0, #0
 8008470:	f040 8298 	bne.w	80089a4 <_dtoa_r+0x95c>
 8008474:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008478:	462a      	mov	r2, r5
 800847a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800847e:	f7f8 fb35 	bl	8000aec <__aeabi_dcmplt>
 8008482:	bb38      	cbnz	r0, 80084d4 <_dtoa_r+0x48c>
 8008484:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8008488:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800848c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800848e:	2b00      	cmp	r3, #0
 8008490:	f2c0 8157 	blt.w	8008742 <_dtoa_r+0x6fa>
 8008494:	2f0e      	cmp	r7, #14
 8008496:	f300 8154 	bgt.w	8008742 <_dtoa_r+0x6fa>
 800849a:	4b4b      	ldr	r3, [pc, #300]	@ (80085c8 <_dtoa_r+0x580>)
 800849c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80084a0:	ed93 7b00 	vldr	d7, [r3]
 80084a4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	ed8d 7b00 	vstr	d7, [sp]
 80084ac:	f280 80e5 	bge.w	800867a <_dtoa_r+0x632>
 80084b0:	9b03      	ldr	r3, [sp, #12]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	f300 80e1 	bgt.w	800867a <_dtoa_r+0x632>
 80084b8:	d10c      	bne.n	80084d4 <_dtoa_r+0x48c>
 80084ba:	4b48      	ldr	r3, [pc, #288]	@ (80085dc <_dtoa_r+0x594>)
 80084bc:	2200      	movs	r2, #0
 80084be:	ec51 0b17 	vmov	r0, r1, d7
 80084c2:	f7f8 f8a1 	bl	8000608 <__aeabi_dmul>
 80084c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80084ca:	f7f8 fb23 	bl	8000b14 <__aeabi_dcmpge>
 80084ce:	2800      	cmp	r0, #0
 80084d0:	f000 8266 	beq.w	80089a0 <_dtoa_r+0x958>
 80084d4:	2400      	movs	r4, #0
 80084d6:	4625      	mov	r5, r4
 80084d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80084da:	4656      	mov	r6, sl
 80084dc:	ea6f 0803 	mvn.w	r8, r3
 80084e0:	2700      	movs	r7, #0
 80084e2:	4621      	mov	r1, r4
 80084e4:	4648      	mov	r0, r9
 80084e6:	f000 fcbf 	bl	8008e68 <_Bfree>
 80084ea:	2d00      	cmp	r5, #0
 80084ec:	f000 80bd 	beq.w	800866a <_dtoa_r+0x622>
 80084f0:	b12f      	cbz	r7, 80084fe <_dtoa_r+0x4b6>
 80084f2:	42af      	cmp	r7, r5
 80084f4:	d003      	beq.n	80084fe <_dtoa_r+0x4b6>
 80084f6:	4639      	mov	r1, r7
 80084f8:	4648      	mov	r0, r9
 80084fa:	f000 fcb5 	bl	8008e68 <_Bfree>
 80084fe:	4629      	mov	r1, r5
 8008500:	4648      	mov	r0, r9
 8008502:	f000 fcb1 	bl	8008e68 <_Bfree>
 8008506:	e0b0      	b.n	800866a <_dtoa_r+0x622>
 8008508:	07e2      	lsls	r2, r4, #31
 800850a:	d505      	bpl.n	8008518 <_dtoa_r+0x4d0>
 800850c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008510:	f7f8 f87a 	bl	8000608 <__aeabi_dmul>
 8008514:	3601      	adds	r6, #1
 8008516:	2301      	movs	r3, #1
 8008518:	1064      	asrs	r4, r4, #1
 800851a:	3508      	adds	r5, #8
 800851c:	e762      	b.n	80083e4 <_dtoa_r+0x39c>
 800851e:	2602      	movs	r6, #2
 8008520:	e765      	b.n	80083ee <_dtoa_r+0x3a6>
 8008522:	9c03      	ldr	r4, [sp, #12]
 8008524:	46b8      	mov	r8, r7
 8008526:	e784      	b.n	8008432 <_dtoa_r+0x3ea>
 8008528:	4b27      	ldr	r3, [pc, #156]	@ (80085c8 <_dtoa_r+0x580>)
 800852a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800852c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008530:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008534:	4454      	add	r4, sl
 8008536:	2900      	cmp	r1, #0
 8008538:	d054      	beq.n	80085e4 <_dtoa_r+0x59c>
 800853a:	4929      	ldr	r1, [pc, #164]	@ (80085e0 <_dtoa_r+0x598>)
 800853c:	2000      	movs	r0, #0
 800853e:	f7f8 f98d 	bl	800085c <__aeabi_ddiv>
 8008542:	4633      	mov	r3, r6
 8008544:	462a      	mov	r2, r5
 8008546:	f7f7 fea7 	bl	8000298 <__aeabi_dsub>
 800854a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800854e:	4656      	mov	r6, sl
 8008550:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008554:	f7f8 fb08 	bl	8000b68 <__aeabi_d2iz>
 8008558:	4605      	mov	r5, r0
 800855a:	f7f7 ffeb 	bl	8000534 <__aeabi_i2d>
 800855e:	4602      	mov	r2, r0
 8008560:	460b      	mov	r3, r1
 8008562:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008566:	f7f7 fe97 	bl	8000298 <__aeabi_dsub>
 800856a:	3530      	adds	r5, #48	@ 0x30
 800856c:	4602      	mov	r2, r0
 800856e:	460b      	mov	r3, r1
 8008570:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008574:	f806 5b01 	strb.w	r5, [r6], #1
 8008578:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800857c:	f7f8 fab6 	bl	8000aec <__aeabi_dcmplt>
 8008580:	2800      	cmp	r0, #0
 8008582:	d172      	bne.n	800866a <_dtoa_r+0x622>
 8008584:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008588:	4911      	ldr	r1, [pc, #68]	@ (80085d0 <_dtoa_r+0x588>)
 800858a:	2000      	movs	r0, #0
 800858c:	f7f7 fe84 	bl	8000298 <__aeabi_dsub>
 8008590:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008594:	f7f8 faaa 	bl	8000aec <__aeabi_dcmplt>
 8008598:	2800      	cmp	r0, #0
 800859a:	f040 80b4 	bne.w	8008706 <_dtoa_r+0x6be>
 800859e:	42a6      	cmp	r6, r4
 80085a0:	f43f af70 	beq.w	8008484 <_dtoa_r+0x43c>
 80085a4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80085a8:	4b0a      	ldr	r3, [pc, #40]	@ (80085d4 <_dtoa_r+0x58c>)
 80085aa:	2200      	movs	r2, #0
 80085ac:	f7f8 f82c 	bl	8000608 <__aeabi_dmul>
 80085b0:	4b08      	ldr	r3, [pc, #32]	@ (80085d4 <_dtoa_r+0x58c>)
 80085b2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80085b6:	2200      	movs	r2, #0
 80085b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80085bc:	f7f8 f824 	bl	8000608 <__aeabi_dmul>
 80085c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80085c4:	e7c4      	b.n	8008550 <_dtoa_r+0x508>
 80085c6:	bf00      	nop
 80085c8:	0800ace8 	.word	0x0800ace8
 80085cc:	0800acc0 	.word	0x0800acc0
 80085d0:	3ff00000 	.word	0x3ff00000
 80085d4:	40240000 	.word	0x40240000
 80085d8:	401c0000 	.word	0x401c0000
 80085dc:	40140000 	.word	0x40140000
 80085e0:	3fe00000 	.word	0x3fe00000
 80085e4:	4631      	mov	r1, r6
 80085e6:	4628      	mov	r0, r5
 80085e8:	f7f8 f80e 	bl	8000608 <__aeabi_dmul>
 80085ec:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80085f0:	9413      	str	r4, [sp, #76]	@ 0x4c
 80085f2:	4656      	mov	r6, sl
 80085f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80085f8:	f7f8 fab6 	bl	8000b68 <__aeabi_d2iz>
 80085fc:	4605      	mov	r5, r0
 80085fe:	f7f7 ff99 	bl	8000534 <__aeabi_i2d>
 8008602:	4602      	mov	r2, r0
 8008604:	460b      	mov	r3, r1
 8008606:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800860a:	f7f7 fe45 	bl	8000298 <__aeabi_dsub>
 800860e:	3530      	adds	r5, #48	@ 0x30
 8008610:	f806 5b01 	strb.w	r5, [r6], #1
 8008614:	4602      	mov	r2, r0
 8008616:	460b      	mov	r3, r1
 8008618:	42a6      	cmp	r6, r4
 800861a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800861e:	f04f 0200 	mov.w	r2, #0
 8008622:	d124      	bne.n	800866e <_dtoa_r+0x626>
 8008624:	4baf      	ldr	r3, [pc, #700]	@ (80088e4 <_dtoa_r+0x89c>)
 8008626:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800862a:	f7f7 fe37 	bl	800029c <__adddf3>
 800862e:	4602      	mov	r2, r0
 8008630:	460b      	mov	r3, r1
 8008632:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008636:	f7f8 fa77 	bl	8000b28 <__aeabi_dcmpgt>
 800863a:	2800      	cmp	r0, #0
 800863c:	d163      	bne.n	8008706 <_dtoa_r+0x6be>
 800863e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008642:	49a8      	ldr	r1, [pc, #672]	@ (80088e4 <_dtoa_r+0x89c>)
 8008644:	2000      	movs	r0, #0
 8008646:	f7f7 fe27 	bl	8000298 <__aeabi_dsub>
 800864a:	4602      	mov	r2, r0
 800864c:	460b      	mov	r3, r1
 800864e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008652:	f7f8 fa4b 	bl	8000aec <__aeabi_dcmplt>
 8008656:	2800      	cmp	r0, #0
 8008658:	f43f af14 	beq.w	8008484 <_dtoa_r+0x43c>
 800865c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800865e:	1e73      	subs	r3, r6, #1
 8008660:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008662:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008666:	2b30      	cmp	r3, #48	@ 0x30
 8008668:	d0f8      	beq.n	800865c <_dtoa_r+0x614>
 800866a:	4647      	mov	r7, r8
 800866c:	e03b      	b.n	80086e6 <_dtoa_r+0x69e>
 800866e:	4b9e      	ldr	r3, [pc, #632]	@ (80088e8 <_dtoa_r+0x8a0>)
 8008670:	f7f7 ffca 	bl	8000608 <__aeabi_dmul>
 8008674:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008678:	e7bc      	b.n	80085f4 <_dtoa_r+0x5ac>
 800867a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800867e:	4656      	mov	r6, sl
 8008680:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008684:	4620      	mov	r0, r4
 8008686:	4629      	mov	r1, r5
 8008688:	f7f8 f8e8 	bl	800085c <__aeabi_ddiv>
 800868c:	f7f8 fa6c 	bl	8000b68 <__aeabi_d2iz>
 8008690:	4680      	mov	r8, r0
 8008692:	f7f7 ff4f 	bl	8000534 <__aeabi_i2d>
 8008696:	e9dd 2300 	ldrd	r2, r3, [sp]
 800869a:	f7f7 ffb5 	bl	8000608 <__aeabi_dmul>
 800869e:	4602      	mov	r2, r0
 80086a0:	460b      	mov	r3, r1
 80086a2:	4620      	mov	r0, r4
 80086a4:	4629      	mov	r1, r5
 80086a6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80086aa:	f7f7 fdf5 	bl	8000298 <__aeabi_dsub>
 80086ae:	f806 4b01 	strb.w	r4, [r6], #1
 80086b2:	9d03      	ldr	r5, [sp, #12]
 80086b4:	eba6 040a 	sub.w	r4, r6, sl
 80086b8:	42a5      	cmp	r5, r4
 80086ba:	4602      	mov	r2, r0
 80086bc:	460b      	mov	r3, r1
 80086be:	d133      	bne.n	8008728 <_dtoa_r+0x6e0>
 80086c0:	f7f7 fdec 	bl	800029c <__adddf3>
 80086c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80086c8:	4604      	mov	r4, r0
 80086ca:	460d      	mov	r5, r1
 80086cc:	f7f8 fa2c 	bl	8000b28 <__aeabi_dcmpgt>
 80086d0:	b9c0      	cbnz	r0, 8008704 <_dtoa_r+0x6bc>
 80086d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80086d6:	4620      	mov	r0, r4
 80086d8:	4629      	mov	r1, r5
 80086da:	f7f8 f9fd 	bl	8000ad8 <__aeabi_dcmpeq>
 80086de:	b110      	cbz	r0, 80086e6 <_dtoa_r+0x69e>
 80086e0:	f018 0f01 	tst.w	r8, #1
 80086e4:	d10e      	bne.n	8008704 <_dtoa_r+0x6bc>
 80086e6:	9902      	ldr	r1, [sp, #8]
 80086e8:	4648      	mov	r0, r9
 80086ea:	f000 fbbd 	bl	8008e68 <_Bfree>
 80086ee:	2300      	movs	r3, #0
 80086f0:	7033      	strb	r3, [r6, #0]
 80086f2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80086f4:	3701      	adds	r7, #1
 80086f6:	601f      	str	r7, [r3, #0]
 80086f8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	f000 824b 	beq.w	8008b96 <_dtoa_r+0xb4e>
 8008700:	601e      	str	r6, [r3, #0]
 8008702:	e248      	b.n	8008b96 <_dtoa_r+0xb4e>
 8008704:	46b8      	mov	r8, r7
 8008706:	4633      	mov	r3, r6
 8008708:	461e      	mov	r6, r3
 800870a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800870e:	2a39      	cmp	r2, #57	@ 0x39
 8008710:	d106      	bne.n	8008720 <_dtoa_r+0x6d8>
 8008712:	459a      	cmp	sl, r3
 8008714:	d1f8      	bne.n	8008708 <_dtoa_r+0x6c0>
 8008716:	2230      	movs	r2, #48	@ 0x30
 8008718:	f108 0801 	add.w	r8, r8, #1
 800871c:	f88a 2000 	strb.w	r2, [sl]
 8008720:	781a      	ldrb	r2, [r3, #0]
 8008722:	3201      	adds	r2, #1
 8008724:	701a      	strb	r2, [r3, #0]
 8008726:	e7a0      	b.n	800866a <_dtoa_r+0x622>
 8008728:	4b6f      	ldr	r3, [pc, #444]	@ (80088e8 <_dtoa_r+0x8a0>)
 800872a:	2200      	movs	r2, #0
 800872c:	f7f7 ff6c 	bl	8000608 <__aeabi_dmul>
 8008730:	2200      	movs	r2, #0
 8008732:	2300      	movs	r3, #0
 8008734:	4604      	mov	r4, r0
 8008736:	460d      	mov	r5, r1
 8008738:	f7f8 f9ce 	bl	8000ad8 <__aeabi_dcmpeq>
 800873c:	2800      	cmp	r0, #0
 800873e:	d09f      	beq.n	8008680 <_dtoa_r+0x638>
 8008740:	e7d1      	b.n	80086e6 <_dtoa_r+0x69e>
 8008742:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008744:	2a00      	cmp	r2, #0
 8008746:	f000 80ea 	beq.w	800891e <_dtoa_r+0x8d6>
 800874a:	9a07      	ldr	r2, [sp, #28]
 800874c:	2a01      	cmp	r2, #1
 800874e:	f300 80cd 	bgt.w	80088ec <_dtoa_r+0x8a4>
 8008752:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008754:	2a00      	cmp	r2, #0
 8008756:	f000 80c1 	beq.w	80088dc <_dtoa_r+0x894>
 800875a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800875e:	9c08      	ldr	r4, [sp, #32]
 8008760:	9e00      	ldr	r6, [sp, #0]
 8008762:	9a00      	ldr	r2, [sp, #0]
 8008764:	441a      	add	r2, r3
 8008766:	9200      	str	r2, [sp, #0]
 8008768:	9a06      	ldr	r2, [sp, #24]
 800876a:	2101      	movs	r1, #1
 800876c:	441a      	add	r2, r3
 800876e:	4648      	mov	r0, r9
 8008770:	9206      	str	r2, [sp, #24]
 8008772:	f000 fc2d 	bl	8008fd0 <__i2b>
 8008776:	4605      	mov	r5, r0
 8008778:	b166      	cbz	r6, 8008794 <_dtoa_r+0x74c>
 800877a:	9b06      	ldr	r3, [sp, #24]
 800877c:	2b00      	cmp	r3, #0
 800877e:	dd09      	ble.n	8008794 <_dtoa_r+0x74c>
 8008780:	42b3      	cmp	r3, r6
 8008782:	9a00      	ldr	r2, [sp, #0]
 8008784:	bfa8      	it	ge
 8008786:	4633      	movge	r3, r6
 8008788:	1ad2      	subs	r2, r2, r3
 800878a:	9200      	str	r2, [sp, #0]
 800878c:	9a06      	ldr	r2, [sp, #24]
 800878e:	1af6      	subs	r6, r6, r3
 8008790:	1ad3      	subs	r3, r2, r3
 8008792:	9306      	str	r3, [sp, #24]
 8008794:	9b08      	ldr	r3, [sp, #32]
 8008796:	b30b      	cbz	r3, 80087dc <_dtoa_r+0x794>
 8008798:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800879a:	2b00      	cmp	r3, #0
 800879c:	f000 80c6 	beq.w	800892c <_dtoa_r+0x8e4>
 80087a0:	2c00      	cmp	r4, #0
 80087a2:	f000 80c0 	beq.w	8008926 <_dtoa_r+0x8de>
 80087a6:	4629      	mov	r1, r5
 80087a8:	4622      	mov	r2, r4
 80087aa:	4648      	mov	r0, r9
 80087ac:	f000 fcc8 	bl	8009140 <__pow5mult>
 80087b0:	9a02      	ldr	r2, [sp, #8]
 80087b2:	4601      	mov	r1, r0
 80087b4:	4605      	mov	r5, r0
 80087b6:	4648      	mov	r0, r9
 80087b8:	f000 fc20 	bl	8008ffc <__multiply>
 80087bc:	9902      	ldr	r1, [sp, #8]
 80087be:	4680      	mov	r8, r0
 80087c0:	4648      	mov	r0, r9
 80087c2:	f000 fb51 	bl	8008e68 <_Bfree>
 80087c6:	9b08      	ldr	r3, [sp, #32]
 80087c8:	1b1b      	subs	r3, r3, r4
 80087ca:	9308      	str	r3, [sp, #32]
 80087cc:	f000 80b1 	beq.w	8008932 <_dtoa_r+0x8ea>
 80087d0:	9a08      	ldr	r2, [sp, #32]
 80087d2:	4641      	mov	r1, r8
 80087d4:	4648      	mov	r0, r9
 80087d6:	f000 fcb3 	bl	8009140 <__pow5mult>
 80087da:	9002      	str	r0, [sp, #8]
 80087dc:	2101      	movs	r1, #1
 80087de:	4648      	mov	r0, r9
 80087e0:	f000 fbf6 	bl	8008fd0 <__i2b>
 80087e4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80087e6:	4604      	mov	r4, r0
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	f000 81d8 	beq.w	8008b9e <_dtoa_r+0xb56>
 80087ee:	461a      	mov	r2, r3
 80087f0:	4601      	mov	r1, r0
 80087f2:	4648      	mov	r0, r9
 80087f4:	f000 fca4 	bl	8009140 <__pow5mult>
 80087f8:	9b07      	ldr	r3, [sp, #28]
 80087fa:	2b01      	cmp	r3, #1
 80087fc:	4604      	mov	r4, r0
 80087fe:	f300 809f 	bgt.w	8008940 <_dtoa_r+0x8f8>
 8008802:	9b04      	ldr	r3, [sp, #16]
 8008804:	2b00      	cmp	r3, #0
 8008806:	f040 8097 	bne.w	8008938 <_dtoa_r+0x8f0>
 800880a:	9b05      	ldr	r3, [sp, #20]
 800880c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008810:	2b00      	cmp	r3, #0
 8008812:	f040 8093 	bne.w	800893c <_dtoa_r+0x8f4>
 8008816:	9b05      	ldr	r3, [sp, #20]
 8008818:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800881c:	0d1b      	lsrs	r3, r3, #20
 800881e:	051b      	lsls	r3, r3, #20
 8008820:	b133      	cbz	r3, 8008830 <_dtoa_r+0x7e8>
 8008822:	9b00      	ldr	r3, [sp, #0]
 8008824:	3301      	adds	r3, #1
 8008826:	9300      	str	r3, [sp, #0]
 8008828:	9b06      	ldr	r3, [sp, #24]
 800882a:	3301      	adds	r3, #1
 800882c:	9306      	str	r3, [sp, #24]
 800882e:	2301      	movs	r3, #1
 8008830:	9308      	str	r3, [sp, #32]
 8008832:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008834:	2b00      	cmp	r3, #0
 8008836:	f000 81b8 	beq.w	8008baa <_dtoa_r+0xb62>
 800883a:	6923      	ldr	r3, [r4, #16]
 800883c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008840:	6918      	ldr	r0, [r3, #16]
 8008842:	f000 fb79 	bl	8008f38 <__hi0bits>
 8008846:	f1c0 0020 	rsb	r0, r0, #32
 800884a:	9b06      	ldr	r3, [sp, #24]
 800884c:	4418      	add	r0, r3
 800884e:	f010 001f 	ands.w	r0, r0, #31
 8008852:	f000 8082 	beq.w	800895a <_dtoa_r+0x912>
 8008856:	f1c0 0320 	rsb	r3, r0, #32
 800885a:	2b04      	cmp	r3, #4
 800885c:	dd73      	ble.n	8008946 <_dtoa_r+0x8fe>
 800885e:	9b00      	ldr	r3, [sp, #0]
 8008860:	f1c0 001c 	rsb	r0, r0, #28
 8008864:	4403      	add	r3, r0
 8008866:	9300      	str	r3, [sp, #0]
 8008868:	9b06      	ldr	r3, [sp, #24]
 800886a:	4403      	add	r3, r0
 800886c:	4406      	add	r6, r0
 800886e:	9306      	str	r3, [sp, #24]
 8008870:	9b00      	ldr	r3, [sp, #0]
 8008872:	2b00      	cmp	r3, #0
 8008874:	dd05      	ble.n	8008882 <_dtoa_r+0x83a>
 8008876:	9902      	ldr	r1, [sp, #8]
 8008878:	461a      	mov	r2, r3
 800887a:	4648      	mov	r0, r9
 800887c:	f000 fcba 	bl	80091f4 <__lshift>
 8008880:	9002      	str	r0, [sp, #8]
 8008882:	9b06      	ldr	r3, [sp, #24]
 8008884:	2b00      	cmp	r3, #0
 8008886:	dd05      	ble.n	8008894 <_dtoa_r+0x84c>
 8008888:	4621      	mov	r1, r4
 800888a:	461a      	mov	r2, r3
 800888c:	4648      	mov	r0, r9
 800888e:	f000 fcb1 	bl	80091f4 <__lshift>
 8008892:	4604      	mov	r4, r0
 8008894:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008896:	2b00      	cmp	r3, #0
 8008898:	d061      	beq.n	800895e <_dtoa_r+0x916>
 800889a:	9802      	ldr	r0, [sp, #8]
 800889c:	4621      	mov	r1, r4
 800889e:	f000 fd15 	bl	80092cc <__mcmp>
 80088a2:	2800      	cmp	r0, #0
 80088a4:	da5b      	bge.n	800895e <_dtoa_r+0x916>
 80088a6:	2300      	movs	r3, #0
 80088a8:	9902      	ldr	r1, [sp, #8]
 80088aa:	220a      	movs	r2, #10
 80088ac:	4648      	mov	r0, r9
 80088ae:	f000 fafd 	bl	8008eac <__multadd>
 80088b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088b4:	9002      	str	r0, [sp, #8]
 80088b6:	f107 38ff 	add.w	r8, r7, #4294967295
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	f000 8177 	beq.w	8008bae <_dtoa_r+0xb66>
 80088c0:	4629      	mov	r1, r5
 80088c2:	2300      	movs	r3, #0
 80088c4:	220a      	movs	r2, #10
 80088c6:	4648      	mov	r0, r9
 80088c8:	f000 faf0 	bl	8008eac <__multadd>
 80088cc:	f1bb 0f00 	cmp.w	fp, #0
 80088d0:	4605      	mov	r5, r0
 80088d2:	dc6f      	bgt.n	80089b4 <_dtoa_r+0x96c>
 80088d4:	9b07      	ldr	r3, [sp, #28]
 80088d6:	2b02      	cmp	r3, #2
 80088d8:	dc49      	bgt.n	800896e <_dtoa_r+0x926>
 80088da:	e06b      	b.n	80089b4 <_dtoa_r+0x96c>
 80088dc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80088de:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80088e2:	e73c      	b.n	800875e <_dtoa_r+0x716>
 80088e4:	3fe00000 	.word	0x3fe00000
 80088e8:	40240000 	.word	0x40240000
 80088ec:	9b03      	ldr	r3, [sp, #12]
 80088ee:	1e5c      	subs	r4, r3, #1
 80088f0:	9b08      	ldr	r3, [sp, #32]
 80088f2:	42a3      	cmp	r3, r4
 80088f4:	db09      	blt.n	800890a <_dtoa_r+0x8c2>
 80088f6:	1b1c      	subs	r4, r3, r4
 80088f8:	9b03      	ldr	r3, [sp, #12]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	f6bf af30 	bge.w	8008760 <_dtoa_r+0x718>
 8008900:	9b00      	ldr	r3, [sp, #0]
 8008902:	9a03      	ldr	r2, [sp, #12]
 8008904:	1a9e      	subs	r6, r3, r2
 8008906:	2300      	movs	r3, #0
 8008908:	e72b      	b.n	8008762 <_dtoa_r+0x71a>
 800890a:	9b08      	ldr	r3, [sp, #32]
 800890c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800890e:	9408      	str	r4, [sp, #32]
 8008910:	1ae3      	subs	r3, r4, r3
 8008912:	441a      	add	r2, r3
 8008914:	9e00      	ldr	r6, [sp, #0]
 8008916:	9b03      	ldr	r3, [sp, #12]
 8008918:	920d      	str	r2, [sp, #52]	@ 0x34
 800891a:	2400      	movs	r4, #0
 800891c:	e721      	b.n	8008762 <_dtoa_r+0x71a>
 800891e:	9c08      	ldr	r4, [sp, #32]
 8008920:	9e00      	ldr	r6, [sp, #0]
 8008922:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8008924:	e728      	b.n	8008778 <_dtoa_r+0x730>
 8008926:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800892a:	e751      	b.n	80087d0 <_dtoa_r+0x788>
 800892c:	9a08      	ldr	r2, [sp, #32]
 800892e:	9902      	ldr	r1, [sp, #8]
 8008930:	e750      	b.n	80087d4 <_dtoa_r+0x78c>
 8008932:	f8cd 8008 	str.w	r8, [sp, #8]
 8008936:	e751      	b.n	80087dc <_dtoa_r+0x794>
 8008938:	2300      	movs	r3, #0
 800893a:	e779      	b.n	8008830 <_dtoa_r+0x7e8>
 800893c:	9b04      	ldr	r3, [sp, #16]
 800893e:	e777      	b.n	8008830 <_dtoa_r+0x7e8>
 8008940:	2300      	movs	r3, #0
 8008942:	9308      	str	r3, [sp, #32]
 8008944:	e779      	b.n	800883a <_dtoa_r+0x7f2>
 8008946:	d093      	beq.n	8008870 <_dtoa_r+0x828>
 8008948:	9a00      	ldr	r2, [sp, #0]
 800894a:	331c      	adds	r3, #28
 800894c:	441a      	add	r2, r3
 800894e:	9200      	str	r2, [sp, #0]
 8008950:	9a06      	ldr	r2, [sp, #24]
 8008952:	441a      	add	r2, r3
 8008954:	441e      	add	r6, r3
 8008956:	9206      	str	r2, [sp, #24]
 8008958:	e78a      	b.n	8008870 <_dtoa_r+0x828>
 800895a:	4603      	mov	r3, r0
 800895c:	e7f4      	b.n	8008948 <_dtoa_r+0x900>
 800895e:	9b03      	ldr	r3, [sp, #12]
 8008960:	2b00      	cmp	r3, #0
 8008962:	46b8      	mov	r8, r7
 8008964:	dc20      	bgt.n	80089a8 <_dtoa_r+0x960>
 8008966:	469b      	mov	fp, r3
 8008968:	9b07      	ldr	r3, [sp, #28]
 800896a:	2b02      	cmp	r3, #2
 800896c:	dd1e      	ble.n	80089ac <_dtoa_r+0x964>
 800896e:	f1bb 0f00 	cmp.w	fp, #0
 8008972:	f47f adb1 	bne.w	80084d8 <_dtoa_r+0x490>
 8008976:	4621      	mov	r1, r4
 8008978:	465b      	mov	r3, fp
 800897a:	2205      	movs	r2, #5
 800897c:	4648      	mov	r0, r9
 800897e:	f000 fa95 	bl	8008eac <__multadd>
 8008982:	4601      	mov	r1, r0
 8008984:	4604      	mov	r4, r0
 8008986:	9802      	ldr	r0, [sp, #8]
 8008988:	f000 fca0 	bl	80092cc <__mcmp>
 800898c:	2800      	cmp	r0, #0
 800898e:	f77f ada3 	ble.w	80084d8 <_dtoa_r+0x490>
 8008992:	4656      	mov	r6, sl
 8008994:	2331      	movs	r3, #49	@ 0x31
 8008996:	f806 3b01 	strb.w	r3, [r6], #1
 800899a:	f108 0801 	add.w	r8, r8, #1
 800899e:	e59f      	b.n	80084e0 <_dtoa_r+0x498>
 80089a0:	9c03      	ldr	r4, [sp, #12]
 80089a2:	46b8      	mov	r8, r7
 80089a4:	4625      	mov	r5, r4
 80089a6:	e7f4      	b.n	8008992 <_dtoa_r+0x94a>
 80089a8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80089ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	f000 8101 	beq.w	8008bb6 <_dtoa_r+0xb6e>
 80089b4:	2e00      	cmp	r6, #0
 80089b6:	dd05      	ble.n	80089c4 <_dtoa_r+0x97c>
 80089b8:	4629      	mov	r1, r5
 80089ba:	4632      	mov	r2, r6
 80089bc:	4648      	mov	r0, r9
 80089be:	f000 fc19 	bl	80091f4 <__lshift>
 80089c2:	4605      	mov	r5, r0
 80089c4:	9b08      	ldr	r3, [sp, #32]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d05c      	beq.n	8008a84 <_dtoa_r+0xa3c>
 80089ca:	6869      	ldr	r1, [r5, #4]
 80089cc:	4648      	mov	r0, r9
 80089ce:	f000 fa0b 	bl	8008de8 <_Balloc>
 80089d2:	4606      	mov	r6, r0
 80089d4:	b928      	cbnz	r0, 80089e2 <_dtoa_r+0x99a>
 80089d6:	4b82      	ldr	r3, [pc, #520]	@ (8008be0 <_dtoa_r+0xb98>)
 80089d8:	4602      	mov	r2, r0
 80089da:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80089de:	f7ff bb4a 	b.w	8008076 <_dtoa_r+0x2e>
 80089e2:	692a      	ldr	r2, [r5, #16]
 80089e4:	3202      	adds	r2, #2
 80089e6:	0092      	lsls	r2, r2, #2
 80089e8:	f105 010c 	add.w	r1, r5, #12
 80089ec:	300c      	adds	r0, #12
 80089ee:	f7ff fa94 	bl	8007f1a <memcpy>
 80089f2:	2201      	movs	r2, #1
 80089f4:	4631      	mov	r1, r6
 80089f6:	4648      	mov	r0, r9
 80089f8:	f000 fbfc 	bl	80091f4 <__lshift>
 80089fc:	f10a 0301 	add.w	r3, sl, #1
 8008a00:	9300      	str	r3, [sp, #0]
 8008a02:	eb0a 030b 	add.w	r3, sl, fp
 8008a06:	9308      	str	r3, [sp, #32]
 8008a08:	9b04      	ldr	r3, [sp, #16]
 8008a0a:	f003 0301 	and.w	r3, r3, #1
 8008a0e:	462f      	mov	r7, r5
 8008a10:	9306      	str	r3, [sp, #24]
 8008a12:	4605      	mov	r5, r0
 8008a14:	9b00      	ldr	r3, [sp, #0]
 8008a16:	9802      	ldr	r0, [sp, #8]
 8008a18:	4621      	mov	r1, r4
 8008a1a:	f103 3bff 	add.w	fp, r3, #4294967295
 8008a1e:	f7ff fa8a 	bl	8007f36 <quorem>
 8008a22:	4603      	mov	r3, r0
 8008a24:	3330      	adds	r3, #48	@ 0x30
 8008a26:	9003      	str	r0, [sp, #12]
 8008a28:	4639      	mov	r1, r7
 8008a2a:	9802      	ldr	r0, [sp, #8]
 8008a2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a2e:	f000 fc4d 	bl	80092cc <__mcmp>
 8008a32:	462a      	mov	r2, r5
 8008a34:	9004      	str	r0, [sp, #16]
 8008a36:	4621      	mov	r1, r4
 8008a38:	4648      	mov	r0, r9
 8008a3a:	f000 fc63 	bl	8009304 <__mdiff>
 8008a3e:	68c2      	ldr	r2, [r0, #12]
 8008a40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a42:	4606      	mov	r6, r0
 8008a44:	bb02      	cbnz	r2, 8008a88 <_dtoa_r+0xa40>
 8008a46:	4601      	mov	r1, r0
 8008a48:	9802      	ldr	r0, [sp, #8]
 8008a4a:	f000 fc3f 	bl	80092cc <__mcmp>
 8008a4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a50:	4602      	mov	r2, r0
 8008a52:	4631      	mov	r1, r6
 8008a54:	4648      	mov	r0, r9
 8008a56:	920c      	str	r2, [sp, #48]	@ 0x30
 8008a58:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a5a:	f000 fa05 	bl	8008e68 <_Bfree>
 8008a5e:	9b07      	ldr	r3, [sp, #28]
 8008a60:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008a62:	9e00      	ldr	r6, [sp, #0]
 8008a64:	ea42 0103 	orr.w	r1, r2, r3
 8008a68:	9b06      	ldr	r3, [sp, #24]
 8008a6a:	4319      	orrs	r1, r3
 8008a6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a6e:	d10d      	bne.n	8008a8c <_dtoa_r+0xa44>
 8008a70:	2b39      	cmp	r3, #57	@ 0x39
 8008a72:	d027      	beq.n	8008ac4 <_dtoa_r+0xa7c>
 8008a74:	9a04      	ldr	r2, [sp, #16]
 8008a76:	2a00      	cmp	r2, #0
 8008a78:	dd01      	ble.n	8008a7e <_dtoa_r+0xa36>
 8008a7a:	9b03      	ldr	r3, [sp, #12]
 8008a7c:	3331      	adds	r3, #49	@ 0x31
 8008a7e:	f88b 3000 	strb.w	r3, [fp]
 8008a82:	e52e      	b.n	80084e2 <_dtoa_r+0x49a>
 8008a84:	4628      	mov	r0, r5
 8008a86:	e7b9      	b.n	80089fc <_dtoa_r+0x9b4>
 8008a88:	2201      	movs	r2, #1
 8008a8a:	e7e2      	b.n	8008a52 <_dtoa_r+0xa0a>
 8008a8c:	9904      	ldr	r1, [sp, #16]
 8008a8e:	2900      	cmp	r1, #0
 8008a90:	db04      	blt.n	8008a9c <_dtoa_r+0xa54>
 8008a92:	9807      	ldr	r0, [sp, #28]
 8008a94:	4301      	orrs	r1, r0
 8008a96:	9806      	ldr	r0, [sp, #24]
 8008a98:	4301      	orrs	r1, r0
 8008a9a:	d120      	bne.n	8008ade <_dtoa_r+0xa96>
 8008a9c:	2a00      	cmp	r2, #0
 8008a9e:	ddee      	ble.n	8008a7e <_dtoa_r+0xa36>
 8008aa0:	9902      	ldr	r1, [sp, #8]
 8008aa2:	9300      	str	r3, [sp, #0]
 8008aa4:	2201      	movs	r2, #1
 8008aa6:	4648      	mov	r0, r9
 8008aa8:	f000 fba4 	bl	80091f4 <__lshift>
 8008aac:	4621      	mov	r1, r4
 8008aae:	9002      	str	r0, [sp, #8]
 8008ab0:	f000 fc0c 	bl	80092cc <__mcmp>
 8008ab4:	2800      	cmp	r0, #0
 8008ab6:	9b00      	ldr	r3, [sp, #0]
 8008ab8:	dc02      	bgt.n	8008ac0 <_dtoa_r+0xa78>
 8008aba:	d1e0      	bne.n	8008a7e <_dtoa_r+0xa36>
 8008abc:	07da      	lsls	r2, r3, #31
 8008abe:	d5de      	bpl.n	8008a7e <_dtoa_r+0xa36>
 8008ac0:	2b39      	cmp	r3, #57	@ 0x39
 8008ac2:	d1da      	bne.n	8008a7a <_dtoa_r+0xa32>
 8008ac4:	2339      	movs	r3, #57	@ 0x39
 8008ac6:	f88b 3000 	strb.w	r3, [fp]
 8008aca:	4633      	mov	r3, r6
 8008acc:	461e      	mov	r6, r3
 8008ace:	3b01      	subs	r3, #1
 8008ad0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008ad4:	2a39      	cmp	r2, #57	@ 0x39
 8008ad6:	d04e      	beq.n	8008b76 <_dtoa_r+0xb2e>
 8008ad8:	3201      	adds	r2, #1
 8008ada:	701a      	strb	r2, [r3, #0]
 8008adc:	e501      	b.n	80084e2 <_dtoa_r+0x49a>
 8008ade:	2a00      	cmp	r2, #0
 8008ae0:	dd03      	ble.n	8008aea <_dtoa_r+0xaa2>
 8008ae2:	2b39      	cmp	r3, #57	@ 0x39
 8008ae4:	d0ee      	beq.n	8008ac4 <_dtoa_r+0xa7c>
 8008ae6:	3301      	adds	r3, #1
 8008ae8:	e7c9      	b.n	8008a7e <_dtoa_r+0xa36>
 8008aea:	9a00      	ldr	r2, [sp, #0]
 8008aec:	9908      	ldr	r1, [sp, #32]
 8008aee:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008af2:	428a      	cmp	r2, r1
 8008af4:	d028      	beq.n	8008b48 <_dtoa_r+0xb00>
 8008af6:	9902      	ldr	r1, [sp, #8]
 8008af8:	2300      	movs	r3, #0
 8008afa:	220a      	movs	r2, #10
 8008afc:	4648      	mov	r0, r9
 8008afe:	f000 f9d5 	bl	8008eac <__multadd>
 8008b02:	42af      	cmp	r7, r5
 8008b04:	9002      	str	r0, [sp, #8]
 8008b06:	f04f 0300 	mov.w	r3, #0
 8008b0a:	f04f 020a 	mov.w	r2, #10
 8008b0e:	4639      	mov	r1, r7
 8008b10:	4648      	mov	r0, r9
 8008b12:	d107      	bne.n	8008b24 <_dtoa_r+0xadc>
 8008b14:	f000 f9ca 	bl	8008eac <__multadd>
 8008b18:	4607      	mov	r7, r0
 8008b1a:	4605      	mov	r5, r0
 8008b1c:	9b00      	ldr	r3, [sp, #0]
 8008b1e:	3301      	adds	r3, #1
 8008b20:	9300      	str	r3, [sp, #0]
 8008b22:	e777      	b.n	8008a14 <_dtoa_r+0x9cc>
 8008b24:	f000 f9c2 	bl	8008eac <__multadd>
 8008b28:	4629      	mov	r1, r5
 8008b2a:	4607      	mov	r7, r0
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	220a      	movs	r2, #10
 8008b30:	4648      	mov	r0, r9
 8008b32:	f000 f9bb 	bl	8008eac <__multadd>
 8008b36:	4605      	mov	r5, r0
 8008b38:	e7f0      	b.n	8008b1c <_dtoa_r+0xad4>
 8008b3a:	f1bb 0f00 	cmp.w	fp, #0
 8008b3e:	bfcc      	ite	gt
 8008b40:	465e      	movgt	r6, fp
 8008b42:	2601      	movle	r6, #1
 8008b44:	4456      	add	r6, sl
 8008b46:	2700      	movs	r7, #0
 8008b48:	9902      	ldr	r1, [sp, #8]
 8008b4a:	9300      	str	r3, [sp, #0]
 8008b4c:	2201      	movs	r2, #1
 8008b4e:	4648      	mov	r0, r9
 8008b50:	f000 fb50 	bl	80091f4 <__lshift>
 8008b54:	4621      	mov	r1, r4
 8008b56:	9002      	str	r0, [sp, #8]
 8008b58:	f000 fbb8 	bl	80092cc <__mcmp>
 8008b5c:	2800      	cmp	r0, #0
 8008b5e:	dcb4      	bgt.n	8008aca <_dtoa_r+0xa82>
 8008b60:	d102      	bne.n	8008b68 <_dtoa_r+0xb20>
 8008b62:	9b00      	ldr	r3, [sp, #0]
 8008b64:	07db      	lsls	r3, r3, #31
 8008b66:	d4b0      	bmi.n	8008aca <_dtoa_r+0xa82>
 8008b68:	4633      	mov	r3, r6
 8008b6a:	461e      	mov	r6, r3
 8008b6c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008b70:	2a30      	cmp	r2, #48	@ 0x30
 8008b72:	d0fa      	beq.n	8008b6a <_dtoa_r+0xb22>
 8008b74:	e4b5      	b.n	80084e2 <_dtoa_r+0x49a>
 8008b76:	459a      	cmp	sl, r3
 8008b78:	d1a8      	bne.n	8008acc <_dtoa_r+0xa84>
 8008b7a:	2331      	movs	r3, #49	@ 0x31
 8008b7c:	f108 0801 	add.w	r8, r8, #1
 8008b80:	f88a 3000 	strb.w	r3, [sl]
 8008b84:	e4ad      	b.n	80084e2 <_dtoa_r+0x49a>
 8008b86:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008b88:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8008be4 <_dtoa_r+0xb9c>
 8008b8c:	b11b      	cbz	r3, 8008b96 <_dtoa_r+0xb4e>
 8008b8e:	f10a 0308 	add.w	r3, sl, #8
 8008b92:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008b94:	6013      	str	r3, [r2, #0]
 8008b96:	4650      	mov	r0, sl
 8008b98:	b017      	add	sp, #92	@ 0x5c
 8008b9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b9e:	9b07      	ldr	r3, [sp, #28]
 8008ba0:	2b01      	cmp	r3, #1
 8008ba2:	f77f ae2e 	ble.w	8008802 <_dtoa_r+0x7ba>
 8008ba6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008ba8:	9308      	str	r3, [sp, #32]
 8008baa:	2001      	movs	r0, #1
 8008bac:	e64d      	b.n	800884a <_dtoa_r+0x802>
 8008bae:	f1bb 0f00 	cmp.w	fp, #0
 8008bb2:	f77f aed9 	ble.w	8008968 <_dtoa_r+0x920>
 8008bb6:	4656      	mov	r6, sl
 8008bb8:	9802      	ldr	r0, [sp, #8]
 8008bba:	4621      	mov	r1, r4
 8008bbc:	f7ff f9bb 	bl	8007f36 <quorem>
 8008bc0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8008bc4:	f806 3b01 	strb.w	r3, [r6], #1
 8008bc8:	eba6 020a 	sub.w	r2, r6, sl
 8008bcc:	4593      	cmp	fp, r2
 8008bce:	ddb4      	ble.n	8008b3a <_dtoa_r+0xaf2>
 8008bd0:	9902      	ldr	r1, [sp, #8]
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	220a      	movs	r2, #10
 8008bd6:	4648      	mov	r0, r9
 8008bd8:	f000 f968 	bl	8008eac <__multadd>
 8008bdc:	9002      	str	r0, [sp, #8]
 8008bde:	e7eb      	b.n	8008bb8 <_dtoa_r+0xb70>
 8008be0:	0800abec 	.word	0x0800abec
 8008be4:	0800ab70 	.word	0x0800ab70

08008be8 <_free_r>:
 8008be8:	b538      	push	{r3, r4, r5, lr}
 8008bea:	4605      	mov	r5, r0
 8008bec:	2900      	cmp	r1, #0
 8008bee:	d041      	beq.n	8008c74 <_free_r+0x8c>
 8008bf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008bf4:	1f0c      	subs	r4, r1, #4
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	bfb8      	it	lt
 8008bfa:	18e4      	addlt	r4, r4, r3
 8008bfc:	f000 f8e8 	bl	8008dd0 <__malloc_lock>
 8008c00:	4a1d      	ldr	r2, [pc, #116]	@ (8008c78 <_free_r+0x90>)
 8008c02:	6813      	ldr	r3, [r2, #0]
 8008c04:	b933      	cbnz	r3, 8008c14 <_free_r+0x2c>
 8008c06:	6063      	str	r3, [r4, #4]
 8008c08:	6014      	str	r4, [r2, #0]
 8008c0a:	4628      	mov	r0, r5
 8008c0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c10:	f000 b8e4 	b.w	8008ddc <__malloc_unlock>
 8008c14:	42a3      	cmp	r3, r4
 8008c16:	d908      	bls.n	8008c2a <_free_r+0x42>
 8008c18:	6820      	ldr	r0, [r4, #0]
 8008c1a:	1821      	adds	r1, r4, r0
 8008c1c:	428b      	cmp	r3, r1
 8008c1e:	bf01      	itttt	eq
 8008c20:	6819      	ldreq	r1, [r3, #0]
 8008c22:	685b      	ldreq	r3, [r3, #4]
 8008c24:	1809      	addeq	r1, r1, r0
 8008c26:	6021      	streq	r1, [r4, #0]
 8008c28:	e7ed      	b.n	8008c06 <_free_r+0x1e>
 8008c2a:	461a      	mov	r2, r3
 8008c2c:	685b      	ldr	r3, [r3, #4]
 8008c2e:	b10b      	cbz	r3, 8008c34 <_free_r+0x4c>
 8008c30:	42a3      	cmp	r3, r4
 8008c32:	d9fa      	bls.n	8008c2a <_free_r+0x42>
 8008c34:	6811      	ldr	r1, [r2, #0]
 8008c36:	1850      	adds	r0, r2, r1
 8008c38:	42a0      	cmp	r0, r4
 8008c3a:	d10b      	bne.n	8008c54 <_free_r+0x6c>
 8008c3c:	6820      	ldr	r0, [r4, #0]
 8008c3e:	4401      	add	r1, r0
 8008c40:	1850      	adds	r0, r2, r1
 8008c42:	4283      	cmp	r3, r0
 8008c44:	6011      	str	r1, [r2, #0]
 8008c46:	d1e0      	bne.n	8008c0a <_free_r+0x22>
 8008c48:	6818      	ldr	r0, [r3, #0]
 8008c4a:	685b      	ldr	r3, [r3, #4]
 8008c4c:	6053      	str	r3, [r2, #4]
 8008c4e:	4408      	add	r0, r1
 8008c50:	6010      	str	r0, [r2, #0]
 8008c52:	e7da      	b.n	8008c0a <_free_r+0x22>
 8008c54:	d902      	bls.n	8008c5c <_free_r+0x74>
 8008c56:	230c      	movs	r3, #12
 8008c58:	602b      	str	r3, [r5, #0]
 8008c5a:	e7d6      	b.n	8008c0a <_free_r+0x22>
 8008c5c:	6820      	ldr	r0, [r4, #0]
 8008c5e:	1821      	adds	r1, r4, r0
 8008c60:	428b      	cmp	r3, r1
 8008c62:	bf04      	itt	eq
 8008c64:	6819      	ldreq	r1, [r3, #0]
 8008c66:	685b      	ldreq	r3, [r3, #4]
 8008c68:	6063      	str	r3, [r4, #4]
 8008c6a:	bf04      	itt	eq
 8008c6c:	1809      	addeq	r1, r1, r0
 8008c6e:	6021      	streq	r1, [r4, #0]
 8008c70:	6054      	str	r4, [r2, #4]
 8008c72:	e7ca      	b.n	8008c0a <_free_r+0x22>
 8008c74:	bd38      	pop	{r3, r4, r5, pc}
 8008c76:	bf00      	nop
 8008c78:	200071e8 	.word	0x200071e8

08008c7c <malloc>:
 8008c7c:	4b02      	ldr	r3, [pc, #8]	@ (8008c88 <malloc+0xc>)
 8008c7e:	4601      	mov	r1, r0
 8008c80:	6818      	ldr	r0, [r3, #0]
 8008c82:	f000 b825 	b.w	8008cd0 <_malloc_r>
 8008c86:	bf00      	nop
 8008c88:	20000018 	.word	0x20000018

08008c8c <sbrk_aligned>:
 8008c8c:	b570      	push	{r4, r5, r6, lr}
 8008c8e:	4e0f      	ldr	r6, [pc, #60]	@ (8008ccc <sbrk_aligned+0x40>)
 8008c90:	460c      	mov	r4, r1
 8008c92:	6831      	ldr	r1, [r6, #0]
 8008c94:	4605      	mov	r5, r0
 8008c96:	b911      	cbnz	r1, 8008c9e <sbrk_aligned+0x12>
 8008c98:	f000 fe3e 	bl	8009918 <_sbrk_r>
 8008c9c:	6030      	str	r0, [r6, #0]
 8008c9e:	4621      	mov	r1, r4
 8008ca0:	4628      	mov	r0, r5
 8008ca2:	f000 fe39 	bl	8009918 <_sbrk_r>
 8008ca6:	1c43      	adds	r3, r0, #1
 8008ca8:	d103      	bne.n	8008cb2 <sbrk_aligned+0x26>
 8008caa:	f04f 34ff 	mov.w	r4, #4294967295
 8008cae:	4620      	mov	r0, r4
 8008cb0:	bd70      	pop	{r4, r5, r6, pc}
 8008cb2:	1cc4      	adds	r4, r0, #3
 8008cb4:	f024 0403 	bic.w	r4, r4, #3
 8008cb8:	42a0      	cmp	r0, r4
 8008cba:	d0f8      	beq.n	8008cae <sbrk_aligned+0x22>
 8008cbc:	1a21      	subs	r1, r4, r0
 8008cbe:	4628      	mov	r0, r5
 8008cc0:	f000 fe2a 	bl	8009918 <_sbrk_r>
 8008cc4:	3001      	adds	r0, #1
 8008cc6:	d1f2      	bne.n	8008cae <sbrk_aligned+0x22>
 8008cc8:	e7ef      	b.n	8008caa <sbrk_aligned+0x1e>
 8008cca:	bf00      	nop
 8008ccc:	200071e4 	.word	0x200071e4

08008cd0 <_malloc_r>:
 8008cd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cd4:	1ccd      	adds	r5, r1, #3
 8008cd6:	f025 0503 	bic.w	r5, r5, #3
 8008cda:	3508      	adds	r5, #8
 8008cdc:	2d0c      	cmp	r5, #12
 8008cde:	bf38      	it	cc
 8008ce0:	250c      	movcc	r5, #12
 8008ce2:	2d00      	cmp	r5, #0
 8008ce4:	4606      	mov	r6, r0
 8008ce6:	db01      	blt.n	8008cec <_malloc_r+0x1c>
 8008ce8:	42a9      	cmp	r1, r5
 8008cea:	d904      	bls.n	8008cf6 <_malloc_r+0x26>
 8008cec:	230c      	movs	r3, #12
 8008cee:	6033      	str	r3, [r6, #0]
 8008cf0:	2000      	movs	r0, #0
 8008cf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008cf6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008dcc <_malloc_r+0xfc>
 8008cfa:	f000 f869 	bl	8008dd0 <__malloc_lock>
 8008cfe:	f8d8 3000 	ldr.w	r3, [r8]
 8008d02:	461c      	mov	r4, r3
 8008d04:	bb44      	cbnz	r4, 8008d58 <_malloc_r+0x88>
 8008d06:	4629      	mov	r1, r5
 8008d08:	4630      	mov	r0, r6
 8008d0a:	f7ff ffbf 	bl	8008c8c <sbrk_aligned>
 8008d0e:	1c43      	adds	r3, r0, #1
 8008d10:	4604      	mov	r4, r0
 8008d12:	d158      	bne.n	8008dc6 <_malloc_r+0xf6>
 8008d14:	f8d8 4000 	ldr.w	r4, [r8]
 8008d18:	4627      	mov	r7, r4
 8008d1a:	2f00      	cmp	r7, #0
 8008d1c:	d143      	bne.n	8008da6 <_malloc_r+0xd6>
 8008d1e:	2c00      	cmp	r4, #0
 8008d20:	d04b      	beq.n	8008dba <_malloc_r+0xea>
 8008d22:	6823      	ldr	r3, [r4, #0]
 8008d24:	4639      	mov	r1, r7
 8008d26:	4630      	mov	r0, r6
 8008d28:	eb04 0903 	add.w	r9, r4, r3
 8008d2c:	f000 fdf4 	bl	8009918 <_sbrk_r>
 8008d30:	4581      	cmp	r9, r0
 8008d32:	d142      	bne.n	8008dba <_malloc_r+0xea>
 8008d34:	6821      	ldr	r1, [r4, #0]
 8008d36:	1a6d      	subs	r5, r5, r1
 8008d38:	4629      	mov	r1, r5
 8008d3a:	4630      	mov	r0, r6
 8008d3c:	f7ff ffa6 	bl	8008c8c <sbrk_aligned>
 8008d40:	3001      	adds	r0, #1
 8008d42:	d03a      	beq.n	8008dba <_malloc_r+0xea>
 8008d44:	6823      	ldr	r3, [r4, #0]
 8008d46:	442b      	add	r3, r5
 8008d48:	6023      	str	r3, [r4, #0]
 8008d4a:	f8d8 3000 	ldr.w	r3, [r8]
 8008d4e:	685a      	ldr	r2, [r3, #4]
 8008d50:	bb62      	cbnz	r2, 8008dac <_malloc_r+0xdc>
 8008d52:	f8c8 7000 	str.w	r7, [r8]
 8008d56:	e00f      	b.n	8008d78 <_malloc_r+0xa8>
 8008d58:	6822      	ldr	r2, [r4, #0]
 8008d5a:	1b52      	subs	r2, r2, r5
 8008d5c:	d420      	bmi.n	8008da0 <_malloc_r+0xd0>
 8008d5e:	2a0b      	cmp	r2, #11
 8008d60:	d917      	bls.n	8008d92 <_malloc_r+0xc2>
 8008d62:	1961      	adds	r1, r4, r5
 8008d64:	42a3      	cmp	r3, r4
 8008d66:	6025      	str	r5, [r4, #0]
 8008d68:	bf18      	it	ne
 8008d6a:	6059      	strne	r1, [r3, #4]
 8008d6c:	6863      	ldr	r3, [r4, #4]
 8008d6e:	bf08      	it	eq
 8008d70:	f8c8 1000 	streq.w	r1, [r8]
 8008d74:	5162      	str	r2, [r4, r5]
 8008d76:	604b      	str	r3, [r1, #4]
 8008d78:	4630      	mov	r0, r6
 8008d7a:	f000 f82f 	bl	8008ddc <__malloc_unlock>
 8008d7e:	f104 000b 	add.w	r0, r4, #11
 8008d82:	1d23      	adds	r3, r4, #4
 8008d84:	f020 0007 	bic.w	r0, r0, #7
 8008d88:	1ac2      	subs	r2, r0, r3
 8008d8a:	bf1c      	itt	ne
 8008d8c:	1a1b      	subne	r3, r3, r0
 8008d8e:	50a3      	strne	r3, [r4, r2]
 8008d90:	e7af      	b.n	8008cf2 <_malloc_r+0x22>
 8008d92:	6862      	ldr	r2, [r4, #4]
 8008d94:	42a3      	cmp	r3, r4
 8008d96:	bf0c      	ite	eq
 8008d98:	f8c8 2000 	streq.w	r2, [r8]
 8008d9c:	605a      	strne	r2, [r3, #4]
 8008d9e:	e7eb      	b.n	8008d78 <_malloc_r+0xa8>
 8008da0:	4623      	mov	r3, r4
 8008da2:	6864      	ldr	r4, [r4, #4]
 8008da4:	e7ae      	b.n	8008d04 <_malloc_r+0x34>
 8008da6:	463c      	mov	r4, r7
 8008da8:	687f      	ldr	r7, [r7, #4]
 8008daa:	e7b6      	b.n	8008d1a <_malloc_r+0x4a>
 8008dac:	461a      	mov	r2, r3
 8008dae:	685b      	ldr	r3, [r3, #4]
 8008db0:	42a3      	cmp	r3, r4
 8008db2:	d1fb      	bne.n	8008dac <_malloc_r+0xdc>
 8008db4:	2300      	movs	r3, #0
 8008db6:	6053      	str	r3, [r2, #4]
 8008db8:	e7de      	b.n	8008d78 <_malloc_r+0xa8>
 8008dba:	230c      	movs	r3, #12
 8008dbc:	6033      	str	r3, [r6, #0]
 8008dbe:	4630      	mov	r0, r6
 8008dc0:	f000 f80c 	bl	8008ddc <__malloc_unlock>
 8008dc4:	e794      	b.n	8008cf0 <_malloc_r+0x20>
 8008dc6:	6005      	str	r5, [r0, #0]
 8008dc8:	e7d6      	b.n	8008d78 <_malloc_r+0xa8>
 8008dca:	bf00      	nop
 8008dcc:	200071e8 	.word	0x200071e8

08008dd0 <__malloc_lock>:
 8008dd0:	4801      	ldr	r0, [pc, #4]	@ (8008dd8 <__malloc_lock+0x8>)
 8008dd2:	f7ff b8a0 	b.w	8007f16 <__retarget_lock_acquire_recursive>
 8008dd6:	bf00      	nop
 8008dd8:	200071e0 	.word	0x200071e0

08008ddc <__malloc_unlock>:
 8008ddc:	4801      	ldr	r0, [pc, #4]	@ (8008de4 <__malloc_unlock+0x8>)
 8008dde:	f7ff b89b 	b.w	8007f18 <__retarget_lock_release_recursive>
 8008de2:	bf00      	nop
 8008de4:	200071e0 	.word	0x200071e0

08008de8 <_Balloc>:
 8008de8:	b570      	push	{r4, r5, r6, lr}
 8008dea:	69c6      	ldr	r6, [r0, #28]
 8008dec:	4604      	mov	r4, r0
 8008dee:	460d      	mov	r5, r1
 8008df0:	b976      	cbnz	r6, 8008e10 <_Balloc+0x28>
 8008df2:	2010      	movs	r0, #16
 8008df4:	f7ff ff42 	bl	8008c7c <malloc>
 8008df8:	4602      	mov	r2, r0
 8008dfa:	61e0      	str	r0, [r4, #28]
 8008dfc:	b920      	cbnz	r0, 8008e08 <_Balloc+0x20>
 8008dfe:	4b18      	ldr	r3, [pc, #96]	@ (8008e60 <_Balloc+0x78>)
 8008e00:	4818      	ldr	r0, [pc, #96]	@ (8008e64 <_Balloc+0x7c>)
 8008e02:	216b      	movs	r1, #107	@ 0x6b
 8008e04:	f000 fd98 	bl	8009938 <__assert_func>
 8008e08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e0c:	6006      	str	r6, [r0, #0]
 8008e0e:	60c6      	str	r6, [r0, #12]
 8008e10:	69e6      	ldr	r6, [r4, #28]
 8008e12:	68f3      	ldr	r3, [r6, #12]
 8008e14:	b183      	cbz	r3, 8008e38 <_Balloc+0x50>
 8008e16:	69e3      	ldr	r3, [r4, #28]
 8008e18:	68db      	ldr	r3, [r3, #12]
 8008e1a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008e1e:	b9b8      	cbnz	r0, 8008e50 <_Balloc+0x68>
 8008e20:	2101      	movs	r1, #1
 8008e22:	fa01 f605 	lsl.w	r6, r1, r5
 8008e26:	1d72      	adds	r2, r6, #5
 8008e28:	0092      	lsls	r2, r2, #2
 8008e2a:	4620      	mov	r0, r4
 8008e2c:	f000 fda2 	bl	8009974 <_calloc_r>
 8008e30:	b160      	cbz	r0, 8008e4c <_Balloc+0x64>
 8008e32:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008e36:	e00e      	b.n	8008e56 <_Balloc+0x6e>
 8008e38:	2221      	movs	r2, #33	@ 0x21
 8008e3a:	2104      	movs	r1, #4
 8008e3c:	4620      	mov	r0, r4
 8008e3e:	f000 fd99 	bl	8009974 <_calloc_r>
 8008e42:	69e3      	ldr	r3, [r4, #28]
 8008e44:	60f0      	str	r0, [r6, #12]
 8008e46:	68db      	ldr	r3, [r3, #12]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d1e4      	bne.n	8008e16 <_Balloc+0x2e>
 8008e4c:	2000      	movs	r0, #0
 8008e4e:	bd70      	pop	{r4, r5, r6, pc}
 8008e50:	6802      	ldr	r2, [r0, #0]
 8008e52:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008e56:	2300      	movs	r3, #0
 8008e58:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008e5c:	e7f7      	b.n	8008e4e <_Balloc+0x66>
 8008e5e:	bf00      	nop
 8008e60:	0800ab7d 	.word	0x0800ab7d
 8008e64:	0800abfd 	.word	0x0800abfd

08008e68 <_Bfree>:
 8008e68:	b570      	push	{r4, r5, r6, lr}
 8008e6a:	69c6      	ldr	r6, [r0, #28]
 8008e6c:	4605      	mov	r5, r0
 8008e6e:	460c      	mov	r4, r1
 8008e70:	b976      	cbnz	r6, 8008e90 <_Bfree+0x28>
 8008e72:	2010      	movs	r0, #16
 8008e74:	f7ff ff02 	bl	8008c7c <malloc>
 8008e78:	4602      	mov	r2, r0
 8008e7a:	61e8      	str	r0, [r5, #28]
 8008e7c:	b920      	cbnz	r0, 8008e88 <_Bfree+0x20>
 8008e7e:	4b09      	ldr	r3, [pc, #36]	@ (8008ea4 <_Bfree+0x3c>)
 8008e80:	4809      	ldr	r0, [pc, #36]	@ (8008ea8 <_Bfree+0x40>)
 8008e82:	218f      	movs	r1, #143	@ 0x8f
 8008e84:	f000 fd58 	bl	8009938 <__assert_func>
 8008e88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e8c:	6006      	str	r6, [r0, #0]
 8008e8e:	60c6      	str	r6, [r0, #12]
 8008e90:	b13c      	cbz	r4, 8008ea2 <_Bfree+0x3a>
 8008e92:	69eb      	ldr	r3, [r5, #28]
 8008e94:	6862      	ldr	r2, [r4, #4]
 8008e96:	68db      	ldr	r3, [r3, #12]
 8008e98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008e9c:	6021      	str	r1, [r4, #0]
 8008e9e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008ea2:	bd70      	pop	{r4, r5, r6, pc}
 8008ea4:	0800ab7d 	.word	0x0800ab7d
 8008ea8:	0800abfd 	.word	0x0800abfd

08008eac <__multadd>:
 8008eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008eb0:	690d      	ldr	r5, [r1, #16]
 8008eb2:	4607      	mov	r7, r0
 8008eb4:	460c      	mov	r4, r1
 8008eb6:	461e      	mov	r6, r3
 8008eb8:	f101 0c14 	add.w	ip, r1, #20
 8008ebc:	2000      	movs	r0, #0
 8008ebe:	f8dc 3000 	ldr.w	r3, [ip]
 8008ec2:	b299      	uxth	r1, r3
 8008ec4:	fb02 6101 	mla	r1, r2, r1, r6
 8008ec8:	0c1e      	lsrs	r6, r3, #16
 8008eca:	0c0b      	lsrs	r3, r1, #16
 8008ecc:	fb02 3306 	mla	r3, r2, r6, r3
 8008ed0:	b289      	uxth	r1, r1
 8008ed2:	3001      	adds	r0, #1
 8008ed4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008ed8:	4285      	cmp	r5, r0
 8008eda:	f84c 1b04 	str.w	r1, [ip], #4
 8008ede:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008ee2:	dcec      	bgt.n	8008ebe <__multadd+0x12>
 8008ee4:	b30e      	cbz	r6, 8008f2a <__multadd+0x7e>
 8008ee6:	68a3      	ldr	r3, [r4, #8]
 8008ee8:	42ab      	cmp	r3, r5
 8008eea:	dc19      	bgt.n	8008f20 <__multadd+0x74>
 8008eec:	6861      	ldr	r1, [r4, #4]
 8008eee:	4638      	mov	r0, r7
 8008ef0:	3101      	adds	r1, #1
 8008ef2:	f7ff ff79 	bl	8008de8 <_Balloc>
 8008ef6:	4680      	mov	r8, r0
 8008ef8:	b928      	cbnz	r0, 8008f06 <__multadd+0x5a>
 8008efa:	4602      	mov	r2, r0
 8008efc:	4b0c      	ldr	r3, [pc, #48]	@ (8008f30 <__multadd+0x84>)
 8008efe:	480d      	ldr	r0, [pc, #52]	@ (8008f34 <__multadd+0x88>)
 8008f00:	21ba      	movs	r1, #186	@ 0xba
 8008f02:	f000 fd19 	bl	8009938 <__assert_func>
 8008f06:	6922      	ldr	r2, [r4, #16]
 8008f08:	3202      	adds	r2, #2
 8008f0a:	f104 010c 	add.w	r1, r4, #12
 8008f0e:	0092      	lsls	r2, r2, #2
 8008f10:	300c      	adds	r0, #12
 8008f12:	f7ff f802 	bl	8007f1a <memcpy>
 8008f16:	4621      	mov	r1, r4
 8008f18:	4638      	mov	r0, r7
 8008f1a:	f7ff ffa5 	bl	8008e68 <_Bfree>
 8008f1e:	4644      	mov	r4, r8
 8008f20:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008f24:	3501      	adds	r5, #1
 8008f26:	615e      	str	r6, [r3, #20]
 8008f28:	6125      	str	r5, [r4, #16]
 8008f2a:	4620      	mov	r0, r4
 8008f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f30:	0800abec 	.word	0x0800abec
 8008f34:	0800abfd 	.word	0x0800abfd

08008f38 <__hi0bits>:
 8008f38:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	bf36      	itet	cc
 8008f40:	0403      	lslcc	r3, r0, #16
 8008f42:	2000      	movcs	r0, #0
 8008f44:	2010      	movcc	r0, #16
 8008f46:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008f4a:	bf3c      	itt	cc
 8008f4c:	021b      	lslcc	r3, r3, #8
 8008f4e:	3008      	addcc	r0, #8
 8008f50:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008f54:	bf3c      	itt	cc
 8008f56:	011b      	lslcc	r3, r3, #4
 8008f58:	3004      	addcc	r0, #4
 8008f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f5e:	bf3c      	itt	cc
 8008f60:	009b      	lslcc	r3, r3, #2
 8008f62:	3002      	addcc	r0, #2
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	db05      	blt.n	8008f74 <__hi0bits+0x3c>
 8008f68:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008f6c:	f100 0001 	add.w	r0, r0, #1
 8008f70:	bf08      	it	eq
 8008f72:	2020      	moveq	r0, #32
 8008f74:	4770      	bx	lr

08008f76 <__lo0bits>:
 8008f76:	6803      	ldr	r3, [r0, #0]
 8008f78:	4602      	mov	r2, r0
 8008f7a:	f013 0007 	ands.w	r0, r3, #7
 8008f7e:	d00b      	beq.n	8008f98 <__lo0bits+0x22>
 8008f80:	07d9      	lsls	r1, r3, #31
 8008f82:	d421      	bmi.n	8008fc8 <__lo0bits+0x52>
 8008f84:	0798      	lsls	r0, r3, #30
 8008f86:	bf49      	itett	mi
 8008f88:	085b      	lsrmi	r3, r3, #1
 8008f8a:	089b      	lsrpl	r3, r3, #2
 8008f8c:	2001      	movmi	r0, #1
 8008f8e:	6013      	strmi	r3, [r2, #0]
 8008f90:	bf5c      	itt	pl
 8008f92:	6013      	strpl	r3, [r2, #0]
 8008f94:	2002      	movpl	r0, #2
 8008f96:	4770      	bx	lr
 8008f98:	b299      	uxth	r1, r3
 8008f9a:	b909      	cbnz	r1, 8008fa0 <__lo0bits+0x2a>
 8008f9c:	0c1b      	lsrs	r3, r3, #16
 8008f9e:	2010      	movs	r0, #16
 8008fa0:	b2d9      	uxtb	r1, r3
 8008fa2:	b909      	cbnz	r1, 8008fa8 <__lo0bits+0x32>
 8008fa4:	3008      	adds	r0, #8
 8008fa6:	0a1b      	lsrs	r3, r3, #8
 8008fa8:	0719      	lsls	r1, r3, #28
 8008faa:	bf04      	itt	eq
 8008fac:	091b      	lsreq	r3, r3, #4
 8008fae:	3004      	addeq	r0, #4
 8008fb0:	0799      	lsls	r1, r3, #30
 8008fb2:	bf04      	itt	eq
 8008fb4:	089b      	lsreq	r3, r3, #2
 8008fb6:	3002      	addeq	r0, #2
 8008fb8:	07d9      	lsls	r1, r3, #31
 8008fba:	d403      	bmi.n	8008fc4 <__lo0bits+0x4e>
 8008fbc:	085b      	lsrs	r3, r3, #1
 8008fbe:	f100 0001 	add.w	r0, r0, #1
 8008fc2:	d003      	beq.n	8008fcc <__lo0bits+0x56>
 8008fc4:	6013      	str	r3, [r2, #0]
 8008fc6:	4770      	bx	lr
 8008fc8:	2000      	movs	r0, #0
 8008fca:	4770      	bx	lr
 8008fcc:	2020      	movs	r0, #32
 8008fce:	4770      	bx	lr

08008fd0 <__i2b>:
 8008fd0:	b510      	push	{r4, lr}
 8008fd2:	460c      	mov	r4, r1
 8008fd4:	2101      	movs	r1, #1
 8008fd6:	f7ff ff07 	bl	8008de8 <_Balloc>
 8008fda:	4602      	mov	r2, r0
 8008fdc:	b928      	cbnz	r0, 8008fea <__i2b+0x1a>
 8008fde:	4b05      	ldr	r3, [pc, #20]	@ (8008ff4 <__i2b+0x24>)
 8008fe0:	4805      	ldr	r0, [pc, #20]	@ (8008ff8 <__i2b+0x28>)
 8008fe2:	f240 1145 	movw	r1, #325	@ 0x145
 8008fe6:	f000 fca7 	bl	8009938 <__assert_func>
 8008fea:	2301      	movs	r3, #1
 8008fec:	6144      	str	r4, [r0, #20]
 8008fee:	6103      	str	r3, [r0, #16]
 8008ff0:	bd10      	pop	{r4, pc}
 8008ff2:	bf00      	nop
 8008ff4:	0800abec 	.word	0x0800abec
 8008ff8:	0800abfd 	.word	0x0800abfd

08008ffc <__multiply>:
 8008ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009000:	4617      	mov	r7, r2
 8009002:	690a      	ldr	r2, [r1, #16]
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	429a      	cmp	r2, r3
 8009008:	bfa8      	it	ge
 800900a:	463b      	movge	r3, r7
 800900c:	4689      	mov	r9, r1
 800900e:	bfa4      	itt	ge
 8009010:	460f      	movge	r7, r1
 8009012:	4699      	movge	r9, r3
 8009014:	693d      	ldr	r5, [r7, #16]
 8009016:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	6879      	ldr	r1, [r7, #4]
 800901e:	eb05 060a 	add.w	r6, r5, sl
 8009022:	42b3      	cmp	r3, r6
 8009024:	b085      	sub	sp, #20
 8009026:	bfb8      	it	lt
 8009028:	3101      	addlt	r1, #1
 800902a:	f7ff fedd 	bl	8008de8 <_Balloc>
 800902e:	b930      	cbnz	r0, 800903e <__multiply+0x42>
 8009030:	4602      	mov	r2, r0
 8009032:	4b41      	ldr	r3, [pc, #260]	@ (8009138 <__multiply+0x13c>)
 8009034:	4841      	ldr	r0, [pc, #260]	@ (800913c <__multiply+0x140>)
 8009036:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800903a:	f000 fc7d 	bl	8009938 <__assert_func>
 800903e:	f100 0414 	add.w	r4, r0, #20
 8009042:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8009046:	4623      	mov	r3, r4
 8009048:	2200      	movs	r2, #0
 800904a:	4573      	cmp	r3, lr
 800904c:	d320      	bcc.n	8009090 <__multiply+0x94>
 800904e:	f107 0814 	add.w	r8, r7, #20
 8009052:	f109 0114 	add.w	r1, r9, #20
 8009056:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800905a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800905e:	9302      	str	r3, [sp, #8]
 8009060:	1beb      	subs	r3, r5, r7
 8009062:	3b15      	subs	r3, #21
 8009064:	f023 0303 	bic.w	r3, r3, #3
 8009068:	3304      	adds	r3, #4
 800906a:	3715      	adds	r7, #21
 800906c:	42bd      	cmp	r5, r7
 800906e:	bf38      	it	cc
 8009070:	2304      	movcc	r3, #4
 8009072:	9301      	str	r3, [sp, #4]
 8009074:	9b02      	ldr	r3, [sp, #8]
 8009076:	9103      	str	r1, [sp, #12]
 8009078:	428b      	cmp	r3, r1
 800907a:	d80c      	bhi.n	8009096 <__multiply+0x9a>
 800907c:	2e00      	cmp	r6, #0
 800907e:	dd03      	ble.n	8009088 <__multiply+0x8c>
 8009080:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009084:	2b00      	cmp	r3, #0
 8009086:	d055      	beq.n	8009134 <__multiply+0x138>
 8009088:	6106      	str	r6, [r0, #16]
 800908a:	b005      	add	sp, #20
 800908c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009090:	f843 2b04 	str.w	r2, [r3], #4
 8009094:	e7d9      	b.n	800904a <__multiply+0x4e>
 8009096:	f8b1 a000 	ldrh.w	sl, [r1]
 800909a:	f1ba 0f00 	cmp.w	sl, #0
 800909e:	d01f      	beq.n	80090e0 <__multiply+0xe4>
 80090a0:	46c4      	mov	ip, r8
 80090a2:	46a1      	mov	r9, r4
 80090a4:	2700      	movs	r7, #0
 80090a6:	f85c 2b04 	ldr.w	r2, [ip], #4
 80090aa:	f8d9 3000 	ldr.w	r3, [r9]
 80090ae:	fa1f fb82 	uxth.w	fp, r2
 80090b2:	b29b      	uxth	r3, r3
 80090b4:	fb0a 330b 	mla	r3, sl, fp, r3
 80090b8:	443b      	add	r3, r7
 80090ba:	f8d9 7000 	ldr.w	r7, [r9]
 80090be:	0c12      	lsrs	r2, r2, #16
 80090c0:	0c3f      	lsrs	r7, r7, #16
 80090c2:	fb0a 7202 	mla	r2, sl, r2, r7
 80090c6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80090ca:	b29b      	uxth	r3, r3
 80090cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80090d0:	4565      	cmp	r5, ip
 80090d2:	f849 3b04 	str.w	r3, [r9], #4
 80090d6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80090da:	d8e4      	bhi.n	80090a6 <__multiply+0xaa>
 80090dc:	9b01      	ldr	r3, [sp, #4]
 80090de:	50e7      	str	r7, [r4, r3]
 80090e0:	9b03      	ldr	r3, [sp, #12]
 80090e2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80090e6:	3104      	adds	r1, #4
 80090e8:	f1b9 0f00 	cmp.w	r9, #0
 80090ec:	d020      	beq.n	8009130 <__multiply+0x134>
 80090ee:	6823      	ldr	r3, [r4, #0]
 80090f0:	4647      	mov	r7, r8
 80090f2:	46a4      	mov	ip, r4
 80090f4:	f04f 0a00 	mov.w	sl, #0
 80090f8:	f8b7 b000 	ldrh.w	fp, [r7]
 80090fc:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8009100:	fb09 220b 	mla	r2, r9, fp, r2
 8009104:	4452      	add	r2, sl
 8009106:	b29b      	uxth	r3, r3
 8009108:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800910c:	f84c 3b04 	str.w	r3, [ip], #4
 8009110:	f857 3b04 	ldr.w	r3, [r7], #4
 8009114:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009118:	f8bc 3000 	ldrh.w	r3, [ip]
 800911c:	fb09 330a 	mla	r3, r9, sl, r3
 8009120:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8009124:	42bd      	cmp	r5, r7
 8009126:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800912a:	d8e5      	bhi.n	80090f8 <__multiply+0xfc>
 800912c:	9a01      	ldr	r2, [sp, #4]
 800912e:	50a3      	str	r3, [r4, r2]
 8009130:	3404      	adds	r4, #4
 8009132:	e79f      	b.n	8009074 <__multiply+0x78>
 8009134:	3e01      	subs	r6, #1
 8009136:	e7a1      	b.n	800907c <__multiply+0x80>
 8009138:	0800abec 	.word	0x0800abec
 800913c:	0800abfd 	.word	0x0800abfd

08009140 <__pow5mult>:
 8009140:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009144:	4615      	mov	r5, r2
 8009146:	f012 0203 	ands.w	r2, r2, #3
 800914a:	4607      	mov	r7, r0
 800914c:	460e      	mov	r6, r1
 800914e:	d007      	beq.n	8009160 <__pow5mult+0x20>
 8009150:	4c25      	ldr	r4, [pc, #148]	@ (80091e8 <__pow5mult+0xa8>)
 8009152:	3a01      	subs	r2, #1
 8009154:	2300      	movs	r3, #0
 8009156:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800915a:	f7ff fea7 	bl	8008eac <__multadd>
 800915e:	4606      	mov	r6, r0
 8009160:	10ad      	asrs	r5, r5, #2
 8009162:	d03d      	beq.n	80091e0 <__pow5mult+0xa0>
 8009164:	69fc      	ldr	r4, [r7, #28]
 8009166:	b97c      	cbnz	r4, 8009188 <__pow5mult+0x48>
 8009168:	2010      	movs	r0, #16
 800916a:	f7ff fd87 	bl	8008c7c <malloc>
 800916e:	4602      	mov	r2, r0
 8009170:	61f8      	str	r0, [r7, #28]
 8009172:	b928      	cbnz	r0, 8009180 <__pow5mult+0x40>
 8009174:	4b1d      	ldr	r3, [pc, #116]	@ (80091ec <__pow5mult+0xac>)
 8009176:	481e      	ldr	r0, [pc, #120]	@ (80091f0 <__pow5mult+0xb0>)
 8009178:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800917c:	f000 fbdc 	bl	8009938 <__assert_func>
 8009180:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009184:	6004      	str	r4, [r0, #0]
 8009186:	60c4      	str	r4, [r0, #12]
 8009188:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800918c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009190:	b94c      	cbnz	r4, 80091a6 <__pow5mult+0x66>
 8009192:	f240 2171 	movw	r1, #625	@ 0x271
 8009196:	4638      	mov	r0, r7
 8009198:	f7ff ff1a 	bl	8008fd0 <__i2b>
 800919c:	2300      	movs	r3, #0
 800919e:	f8c8 0008 	str.w	r0, [r8, #8]
 80091a2:	4604      	mov	r4, r0
 80091a4:	6003      	str	r3, [r0, #0]
 80091a6:	f04f 0900 	mov.w	r9, #0
 80091aa:	07eb      	lsls	r3, r5, #31
 80091ac:	d50a      	bpl.n	80091c4 <__pow5mult+0x84>
 80091ae:	4631      	mov	r1, r6
 80091b0:	4622      	mov	r2, r4
 80091b2:	4638      	mov	r0, r7
 80091b4:	f7ff ff22 	bl	8008ffc <__multiply>
 80091b8:	4631      	mov	r1, r6
 80091ba:	4680      	mov	r8, r0
 80091bc:	4638      	mov	r0, r7
 80091be:	f7ff fe53 	bl	8008e68 <_Bfree>
 80091c2:	4646      	mov	r6, r8
 80091c4:	106d      	asrs	r5, r5, #1
 80091c6:	d00b      	beq.n	80091e0 <__pow5mult+0xa0>
 80091c8:	6820      	ldr	r0, [r4, #0]
 80091ca:	b938      	cbnz	r0, 80091dc <__pow5mult+0x9c>
 80091cc:	4622      	mov	r2, r4
 80091ce:	4621      	mov	r1, r4
 80091d0:	4638      	mov	r0, r7
 80091d2:	f7ff ff13 	bl	8008ffc <__multiply>
 80091d6:	6020      	str	r0, [r4, #0]
 80091d8:	f8c0 9000 	str.w	r9, [r0]
 80091dc:	4604      	mov	r4, r0
 80091de:	e7e4      	b.n	80091aa <__pow5mult+0x6a>
 80091e0:	4630      	mov	r0, r6
 80091e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091e6:	bf00      	nop
 80091e8:	0800acb0 	.word	0x0800acb0
 80091ec:	0800ab7d 	.word	0x0800ab7d
 80091f0:	0800abfd 	.word	0x0800abfd

080091f4 <__lshift>:
 80091f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091f8:	460c      	mov	r4, r1
 80091fa:	6849      	ldr	r1, [r1, #4]
 80091fc:	6923      	ldr	r3, [r4, #16]
 80091fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009202:	68a3      	ldr	r3, [r4, #8]
 8009204:	4607      	mov	r7, r0
 8009206:	4691      	mov	r9, r2
 8009208:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800920c:	f108 0601 	add.w	r6, r8, #1
 8009210:	42b3      	cmp	r3, r6
 8009212:	db0b      	blt.n	800922c <__lshift+0x38>
 8009214:	4638      	mov	r0, r7
 8009216:	f7ff fde7 	bl	8008de8 <_Balloc>
 800921a:	4605      	mov	r5, r0
 800921c:	b948      	cbnz	r0, 8009232 <__lshift+0x3e>
 800921e:	4602      	mov	r2, r0
 8009220:	4b28      	ldr	r3, [pc, #160]	@ (80092c4 <__lshift+0xd0>)
 8009222:	4829      	ldr	r0, [pc, #164]	@ (80092c8 <__lshift+0xd4>)
 8009224:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009228:	f000 fb86 	bl	8009938 <__assert_func>
 800922c:	3101      	adds	r1, #1
 800922e:	005b      	lsls	r3, r3, #1
 8009230:	e7ee      	b.n	8009210 <__lshift+0x1c>
 8009232:	2300      	movs	r3, #0
 8009234:	f100 0114 	add.w	r1, r0, #20
 8009238:	f100 0210 	add.w	r2, r0, #16
 800923c:	4618      	mov	r0, r3
 800923e:	4553      	cmp	r3, sl
 8009240:	db33      	blt.n	80092aa <__lshift+0xb6>
 8009242:	6920      	ldr	r0, [r4, #16]
 8009244:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009248:	f104 0314 	add.w	r3, r4, #20
 800924c:	f019 091f 	ands.w	r9, r9, #31
 8009250:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009254:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009258:	d02b      	beq.n	80092b2 <__lshift+0xbe>
 800925a:	f1c9 0e20 	rsb	lr, r9, #32
 800925e:	468a      	mov	sl, r1
 8009260:	2200      	movs	r2, #0
 8009262:	6818      	ldr	r0, [r3, #0]
 8009264:	fa00 f009 	lsl.w	r0, r0, r9
 8009268:	4310      	orrs	r0, r2
 800926a:	f84a 0b04 	str.w	r0, [sl], #4
 800926e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009272:	459c      	cmp	ip, r3
 8009274:	fa22 f20e 	lsr.w	r2, r2, lr
 8009278:	d8f3      	bhi.n	8009262 <__lshift+0x6e>
 800927a:	ebac 0304 	sub.w	r3, ip, r4
 800927e:	3b15      	subs	r3, #21
 8009280:	f023 0303 	bic.w	r3, r3, #3
 8009284:	3304      	adds	r3, #4
 8009286:	f104 0015 	add.w	r0, r4, #21
 800928a:	4560      	cmp	r0, ip
 800928c:	bf88      	it	hi
 800928e:	2304      	movhi	r3, #4
 8009290:	50ca      	str	r2, [r1, r3]
 8009292:	b10a      	cbz	r2, 8009298 <__lshift+0xa4>
 8009294:	f108 0602 	add.w	r6, r8, #2
 8009298:	3e01      	subs	r6, #1
 800929a:	4638      	mov	r0, r7
 800929c:	612e      	str	r6, [r5, #16]
 800929e:	4621      	mov	r1, r4
 80092a0:	f7ff fde2 	bl	8008e68 <_Bfree>
 80092a4:	4628      	mov	r0, r5
 80092a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092aa:	f842 0f04 	str.w	r0, [r2, #4]!
 80092ae:	3301      	adds	r3, #1
 80092b0:	e7c5      	b.n	800923e <__lshift+0x4a>
 80092b2:	3904      	subs	r1, #4
 80092b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80092b8:	f841 2f04 	str.w	r2, [r1, #4]!
 80092bc:	459c      	cmp	ip, r3
 80092be:	d8f9      	bhi.n	80092b4 <__lshift+0xc0>
 80092c0:	e7ea      	b.n	8009298 <__lshift+0xa4>
 80092c2:	bf00      	nop
 80092c4:	0800abec 	.word	0x0800abec
 80092c8:	0800abfd 	.word	0x0800abfd

080092cc <__mcmp>:
 80092cc:	690a      	ldr	r2, [r1, #16]
 80092ce:	4603      	mov	r3, r0
 80092d0:	6900      	ldr	r0, [r0, #16]
 80092d2:	1a80      	subs	r0, r0, r2
 80092d4:	b530      	push	{r4, r5, lr}
 80092d6:	d10e      	bne.n	80092f6 <__mcmp+0x2a>
 80092d8:	3314      	adds	r3, #20
 80092da:	3114      	adds	r1, #20
 80092dc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80092e0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80092e4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80092e8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80092ec:	4295      	cmp	r5, r2
 80092ee:	d003      	beq.n	80092f8 <__mcmp+0x2c>
 80092f0:	d205      	bcs.n	80092fe <__mcmp+0x32>
 80092f2:	f04f 30ff 	mov.w	r0, #4294967295
 80092f6:	bd30      	pop	{r4, r5, pc}
 80092f8:	42a3      	cmp	r3, r4
 80092fa:	d3f3      	bcc.n	80092e4 <__mcmp+0x18>
 80092fc:	e7fb      	b.n	80092f6 <__mcmp+0x2a>
 80092fe:	2001      	movs	r0, #1
 8009300:	e7f9      	b.n	80092f6 <__mcmp+0x2a>
	...

08009304 <__mdiff>:
 8009304:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009308:	4689      	mov	r9, r1
 800930a:	4606      	mov	r6, r0
 800930c:	4611      	mov	r1, r2
 800930e:	4648      	mov	r0, r9
 8009310:	4614      	mov	r4, r2
 8009312:	f7ff ffdb 	bl	80092cc <__mcmp>
 8009316:	1e05      	subs	r5, r0, #0
 8009318:	d112      	bne.n	8009340 <__mdiff+0x3c>
 800931a:	4629      	mov	r1, r5
 800931c:	4630      	mov	r0, r6
 800931e:	f7ff fd63 	bl	8008de8 <_Balloc>
 8009322:	4602      	mov	r2, r0
 8009324:	b928      	cbnz	r0, 8009332 <__mdiff+0x2e>
 8009326:	4b3f      	ldr	r3, [pc, #252]	@ (8009424 <__mdiff+0x120>)
 8009328:	f240 2137 	movw	r1, #567	@ 0x237
 800932c:	483e      	ldr	r0, [pc, #248]	@ (8009428 <__mdiff+0x124>)
 800932e:	f000 fb03 	bl	8009938 <__assert_func>
 8009332:	2301      	movs	r3, #1
 8009334:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009338:	4610      	mov	r0, r2
 800933a:	b003      	add	sp, #12
 800933c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009340:	bfbc      	itt	lt
 8009342:	464b      	movlt	r3, r9
 8009344:	46a1      	movlt	r9, r4
 8009346:	4630      	mov	r0, r6
 8009348:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800934c:	bfba      	itte	lt
 800934e:	461c      	movlt	r4, r3
 8009350:	2501      	movlt	r5, #1
 8009352:	2500      	movge	r5, #0
 8009354:	f7ff fd48 	bl	8008de8 <_Balloc>
 8009358:	4602      	mov	r2, r0
 800935a:	b918      	cbnz	r0, 8009364 <__mdiff+0x60>
 800935c:	4b31      	ldr	r3, [pc, #196]	@ (8009424 <__mdiff+0x120>)
 800935e:	f240 2145 	movw	r1, #581	@ 0x245
 8009362:	e7e3      	b.n	800932c <__mdiff+0x28>
 8009364:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009368:	6926      	ldr	r6, [r4, #16]
 800936a:	60c5      	str	r5, [r0, #12]
 800936c:	f109 0310 	add.w	r3, r9, #16
 8009370:	f109 0514 	add.w	r5, r9, #20
 8009374:	f104 0e14 	add.w	lr, r4, #20
 8009378:	f100 0b14 	add.w	fp, r0, #20
 800937c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009380:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009384:	9301      	str	r3, [sp, #4]
 8009386:	46d9      	mov	r9, fp
 8009388:	f04f 0c00 	mov.w	ip, #0
 800938c:	9b01      	ldr	r3, [sp, #4]
 800938e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009392:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009396:	9301      	str	r3, [sp, #4]
 8009398:	fa1f f38a 	uxth.w	r3, sl
 800939c:	4619      	mov	r1, r3
 800939e:	b283      	uxth	r3, r0
 80093a0:	1acb      	subs	r3, r1, r3
 80093a2:	0c00      	lsrs	r0, r0, #16
 80093a4:	4463      	add	r3, ip
 80093a6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80093aa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80093ae:	b29b      	uxth	r3, r3
 80093b0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80093b4:	4576      	cmp	r6, lr
 80093b6:	f849 3b04 	str.w	r3, [r9], #4
 80093ba:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80093be:	d8e5      	bhi.n	800938c <__mdiff+0x88>
 80093c0:	1b33      	subs	r3, r6, r4
 80093c2:	3b15      	subs	r3, #21
 80093c4:	f023 0303 	bic.w	r3, r3, #3
 80093c8:	3415      	adds	r4, #21
 80093ca:	3304      	adds	r3, #4
 80093cc:	42a6      	cmp	r6, r4
 80093ce:	bf38      	it	cc
 80093d0:	2304      	movcc	r3, #4
 80093d2:	441d      	add	r5, r3
 80093d4:	445b      	add	r3, fp
 80093d6:	461e      	mov	r6, r3
 80093d8:	462c      	mov	r4, r5
 80093da:	4544      	cmp	r4, r8
 80093dc:	d30e      	bcc.n	80093fc <__mdiff+0xf8>
 80093de:	f108 0103 	add.w	r1, r8, #3
 80093e2:	1b49      	subs	r1, r1, r5
 80093e4:	f021 0103 	bic.w	r1, r1, #3
 80093e8:	3d03      	subs	r5, #3
 80093ea:	45a8      	cmp	r8, r5
 80093ec:	bf38      	it	cc
 80093ee:	2100      	movcc	r1, #0
 80093f0:	440b      	add	r3, r1
 80093f2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80093f6:	b191      	cbz	r1, 800941e <__mdiff+0x11a>
 80093f8:	6117      	str	r7, [r2, #16]
 80093fa:	e79d      	b.n	8009338 <__mdiff+0x34>
 80093fc:	f854 1b04 	ldr.w	r1, [r4], #4
 8009400:	46e6      	mov	lr, ip
 8009402:	0c08      	lsrs	r0, r1, #16
 8009404:	fa1c fc81 	uxtah	ip, ip, r1
 8009408:	4471      	add	r1, lr
 800940a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800940e:	b289      	uxth	r1, r1
 8009410:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009414:	f846 1b04 	str.w	r1, [r6], #4
 8009418:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800941c:	e7dd      	b.n	80093da <__mdiff+0xd6>
 800941e:	3f01      	subs	r7, #1
 8009420:	e7e7      	b.n	80093f2 <__mdiff+0xee>
 8009422:	bf00      	nop
 8009424:	0800abec 	.word	0x0800abec
 8009428:	0800abfd 	.word	0x0800abfd

0800942c <__d2b>:
 800942c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009430:	460f      	mov	r7, r1
 8009432:	2101      	movs	r1, #1
 8009434:	ec59 8b10 	vmov	r8, r9, d0
 8009438:	4616      	mov	r6, r2
 800943a:	f7ff fcd5 	bl	8008de8 <_Balloc>
 800943e:	4604      	mov	r4, r0
 8009440:	b930      	cbnz	r0, 8009450 <__d2b+0x24>
 8009442:	4602      	mov	r2, r0
 8009444:	4b23      	ldr	r3, [pc, #140]	@ (80094d4 <__d2b+0xa8>)
 8009446:	4824      	ldr	r0, [pc, #144]	@ (80094d8 <__d2b+0xac>)
 8009448:	f240 310f 	movw	r1, #783	@ 0x30f
 800944c:	f000 fa74 	bl	8009938 <__assert_func>
 8009450:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009454:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009458:	b10d      	cbz	r5, 800945e <__d2b+0x32>
 800945a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800945e:	9301      	str	r3, [sp, #4]
 8009460:	f1b8 0300 	subs.w	r3, r8, #0
 8009464:	d023      	beq.n	80094ae <__d2b+0x82>
 8009466:	4668      	mov	r0, sp
 8009468:	9300      	str	r3, [sp, #0]
 800946a:	f7ff fd84 	bl	8008f76 <__lo0bits>
 800946e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009472:	b1d0      	cbz	r0, 80094aa <__d2b+0x7e>
 8009474:	f1c0 0320 	rsb	r3, r0, #32
 8009478:	fa02 f303 	lsl.w	r3, r2, r3
 800947c:	430b      	orrs	r3, r1
 800947e:	40c2      	lsrs	r2, r0
 8009480:	6163      	str	r3, [r4, #20]
 8009482:	9201      	str	r2, [sp, #4]
 8009484:	9b01      	ldr	r3, [sp, #4]
 8009486:	61a3      	str	r3, [r4, #24]
 8009488:	2b00      	cmp	r3, #0
 800948a:	bf0c      	ite	eq
 800948c:	2201      	moveq	r2, #1
 800948e:	2202      	movne	r2, #2
 8009490:	6122      	str	r2, [r4, #16]
 8009492:	b1a5      	cbz	r5, 80094be <__d2b+0x92>
 8009494:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009498:	4405      	add	r5, r0
 800949a:	603d      	str	r5, [r7, #0]
 800949c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80094a0:	6030      	str	r0, [r6, #0]
 80094a2:	4620      	mov	r0, r4
 80094a4:	b003      	add	sp, #12
 80094a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80094aa:	6161      	str	r1, [r4, #20]
 80094ac:	e7ea      	b.n	8009484 <__d2b+0x58>
 80094ae:	a801      	add	r0, sp, #4
 80094b0:	f7ff fd61 	bl	8008f76 <__lo0bits>
 80094b4:	9b01      	ldr	r3, [sp, #4]
 80094b6:	6163      	str	r3, [r4, #20]
 80094b8:	3020      	adds	r0, #32
 80094ba:	2201      	movs	r2, #1
 80094bc:	e7e8      	b.n	8009490 <__d2b+0x64>
 80094be:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80094c2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80094c6:	6038      	str	r0, [r7, #0]
 80094c8:	6918      	ldr	r0, [r3, #16]
 80094ca:	f7ff fd35 	bl	8008f38 <__hi0bits>
 80094ce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80094d2:	e7e5      	b.n	80094a0 <__d2b+0x74>
 80094d4:	0800abec 	.word	0x0800abec
 80094d8:	0800abfd 	.word	0x0800abfd

080094dc <__ssputs_r>:
 80094dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094e0:	688e      	ldr	r6, [r1, #8]
 80094e2:	461f      	mov	r7, r3
 80094e4:	42be      	cmp	r6, r7
 80094e6:	680b      	ldr	r3, [r1, #0]
 80094e8:	4682      	mov	sl, r0
 80094ea:	460c      	mov	r4, r1
 80094ec:	4690      	mov	r8, r2
 80094ee:	d82d      	bhi.n	800954c <__ssputs_r+0x70>
 80094f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80094f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80094f8:	d026      	beq.n	8009548 <__ssputs_r+0x6c>
 80094fa:	6965      	ldr	r5, [r4, #20]
 80094fc:	6909      	ldr	r1, [r1, #16]
 80094fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009502:	eba3 0901 	sub.w	r9, r3, r1
 8009506:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800950a:	1c7b      	adds	r3, r7, #1
 800950c:	444b      	add	r3, r9
 800950e:	106d      	asrs	r5, r5, #1
 8009510:	429d      	cmp	r5, r3
 8009512:	bf38      	it	cc
 8009514:	461d      	movcc	r5, r3
 8009516:	0553      	lsls	r3, r2, #21
 8009518:	d527      	bpl.n	800956a <__ssputs_r+0x8e>
 800951a:	4629      	mov	r1, r5
 800951c:	f7ff fbd8 	bl	8008cd0 <_malloc_r>
 8009520:	4606      	mov	r6, r0
 8009522:	b360      	cbz	r0, 800957e <__ssputs_r+0xa2>
 8009524:	6921      	ldr	r1, [r4, #16]
 8009526:	464a      	mov	r2, r9
 8009528:	f7fe fcf7 	bl	8007f1a <memcpy>
 800952c:	89a3      	ldrh	r3, [r4, #12]
 800952e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009532:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009536:	81a3      	strh	r3, [r4, #12]
 8009538:	6126      	str	r6, [r4, #16]
 800953a:	6165      	str	r5, [r4, #20]
 800953c:	444e      	add	r6, r9
 800953e:	eba5 0509 	sub.w	r5, r5, r9
 8009542:	6026      	str	r6, [r4, #0]
 8009544:	60a5      	str	r5, [r4, #8]
 8009546:	463e      	mov	r6, r7
 8009548:	42be      	cmp	r6, r7
 800954a:	d900      	bls.n	800954e <__ssputs_r+0x72>
 800954c:	463e      	mov	r6, r7
 800954e:	6820      	ldr	r0, [r4, #0]
 8009550:	4632      	mov	r2, r6
 8009552:	4641      	mov	r1, r8
 8009554:	f000 f9c6 	bl	80098e4 <memmove>
 8009558:	68a3      	ldr	r3, [r4, #8]
 800955a:	1b9b      	subs	r3, r3, r6
 800955c:	60a3      	str	r3, [r4, #8]
 800955e:	6823      	ldr	r3, [r4, #0]
 8009560:	4433      	add	r3, r6
 8009562:	6023      	str	r3, [r4, #0]
 8009564:	2000      	movs	r0, #0
 8009566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800956a:	462a      	mov	r2, r5
 800956c:	f000 fa28 	bl	80099c0 <_realloc_r>
 8009570:	4606      	mov	r6, r0
 8009572:	2800      	cmp	r0, #0
 8009574:	d1e0      	bne.n	8009538 <__ssputs_r+0x5c>
 8009576:	6921      	ldr	r1, [r4, #16]
 8009578:	4650      	mov	r0, sl
 800957a:	f7ff fb35 	bl	8008be8 <_free_r>
 800957e:	230c      	movs	r3, #12
 8009580:	f8ca 3000 	str.w	r3, [sl]
 8009584:	89a3      	ldrh	r3, [r4, #12]
 8009586:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800958a:	81a3      	strh	r3, [r4, #12]
 800958c:	f04f 30ff 	mov.w	r0, #4294967295
 8009590:	e7e9      	b.n	8009566 <__ssputs_r+0x8a>
	...

08009594 <_svfiprintf_r>:
 8009594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009598:	4698      	mov	r8, r3
 800959a:	898b      	ldrh	r3, [r1, #12]
 800959c:	061b      	lsls	r3, r3, #24
 800959e:	b09d      	sub	sp, #116	@ 0x74
 80095a0:	4607      	mov	r7, r0
 80095a2:	460d      	mov	r5, r1
 80095a4:	4614      	mov	r4, r2
 80095a6:	d510      	bpl.n	80095ca <_svfiprintf_r+0x36>
 80095a8:	690b      	ldr	r3, [r1, #16]
 80095aa:	b973      	cbnz	r3, 80095ca <_svfiprintf_r+0x36>
 80095ac:	2140      	movs	r1, #64	@ 0x40
 80095ae:	f7ff fb8f 	bl	8008cd0 <_malloc_r>
 80095b2:	6028      	str	r0, [r5, #0]
 80095b4:	6128      	str	r0, [r5, #16]
 80095b6:	b930      	cbnz	r0, 80095c6 <_svfiprintf_r+0x32>
 80095b8:	230c      	movs	r3, #12
 80095ba:	603b      	str	r3, [r7, #0]
 80095bc:	f04f 30ff 	mov.w	r0, #4294967295
 80095c0:	b01d      	add	sp, #116	@ 0x74
 80095c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095c6:	2340      	movs	r3, #64	@ 0x40
 80095c8:	616b      	str	r3, [r5, #20]
 80095ca:	2300      	movs	r3, #0
 80095cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80095ce:	2320      	movs	r3, #32
 80095d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80095d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80095d8:	2330      	movs	r3, #48	@ 0x30
 80095da:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009778 <_svfiprintf_r+0x1e4>
 80095de:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80095e2:	f04f 0901 	mov.w	r9, #1
 80095e6:	4623      	mov	r3, r4
 80095e8:	469a      	mov	sl, r3
 80095ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095ee:	b10a      	cbz	r2, 80095f4 <_svfiprintf_r+0x60>
 80095f0:	2a25      	cmp	r2, #37	@ 0x25
 80095f2:	d1f9      	bne.n	80095e8 <_svfiprintf_r+0x54>
 80095f4:	ebba 0b04 	subs.w	fp, sl, r4
 80095f8:	d00b      	beq.n	8009612 <_svfiprintf_r+0x7e>
 80095fa:	465b      	mov	r3, fp
 80095fc:	4622      	mov	r2, r4
 80095fe:	4629      	mov	r1, r5
 8009600:	4638      	mov	r0, r7
 8009602:	f7ff ff6b 	bl	80094dc <__ssputs_r>
 8009606:	3001      	adds	r0, #1
 8009608:	f000 80a7 	beq.w	800975a <_svfiprintf_r+0x1c6>
 800960c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800960e:	445a      	add	r2, fp
 8009610:	9209      	str	r2, [sp, #36]	@ 0x24
 8009612:	f89a 3000 	ldrb.w	r3, [sl]
 8009616:	2b00      	cmp	r3, #0
 8009618:	f000 809f 	beq.w	800975a <_svfiprintf_r+0x1c6>
 800961c:	2300      	movs	r3, #0
 800961e:	f04f 32ff 	mov.w	r2, #4294967295
 8009622:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009626:	f10a 0a01 	add.w	sl, sl, #1
 800962a:	9304      	str	r3, [sp, #16]
 800962c:	9307      	str	r3, [sp, #28]
 800962e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009632:	931a      	str	r3, [sp, #104]	@ 0x68
 8009634:	4654      	mov	r4, sl
 8009636:	2205      	movs	r2, #5
 8009638:	f814 1b01 	ldrb.w	r1, [r4], #1
 800963c:	484e      	ldr	r0, [pc, #312]	@ (8009778 <_svfiprintf_r+0x1e4>)
 800963e:	f7f6 fdcf 	bl	80001e0 <memchr>
 8009642:	9a04      	ldr	r2, [sp, #16]
 8009644:	b9d8      	cbnz	r0, 800967e <_svfiprintf_r+0xea>
 8009646:	06d0      	lsls	r0, r2, #27
 8009648:	bf44      	itt	mi
 800964a:	2320      	movmi	r3, #32
 800964c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009650:	0711      	lsls	r1, r2, #28
 8009652:	bf44      	itt	mi
 8009654:	232b      	movmi	r3, #43	@ 0x2b
 8009656:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800965a:	f89a 3000 	ldrb.w	r3, [sl]
 800965e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009660:	d015      	beq.n	800968e <_svfiprintf_r+0xfa>
 8009662:	9a07      	ldr	r2, [sp, #28]
 8009664:	4654      	mov	r4, sl
 8009666:	2000      	movs	r0, #0
 8009668:	f04f 0c0a 	mov.w	ip, #10
 800966c:	4621      	mov	r1, r4
 800966e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009672:	3b30      	subs	r3, #48	@ 0x30
 8009674:	2b09      	cmp	r3, #9
 8009676:	d94b      	bls.n	8009710 <_svfiprintf_r+0x17c>
 8009678:	b1b0      	cbz	r0, 80096a8 <_svfiprintf_r+0x114>
 800967a:	9207      	str	r2, [sp, #28]
 800967c:	e014      	b.n	80096a8 <_svfiprintf_r+0x114>
 800967e:	eba0 0308 	sub.w	r3, r0, r8
 8009682:	fa09 f303 	lsl.w	r3, r9, r3
 8009686:	4313      	orrs	r3, r2
 8009688:	9304      	str	r3, [sp, #16]
 800968a:	46a2      	mov	sl, r4
 800968c:	e7d2      	b.n	8009634 <_svfiprintf_r+0xa0>
 800968e:	9b03      	ldr	r3, [sp, #12]
 8009690:	1d19      	adds	r1, r3, #4
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	9103      	str	r1, [sp, #12]
 8009696:	2b00      	cmp	r3, #0
 8009698:	bfbb      	ittet	lt
 800969a:	425b      	neglt	r3, r3
 800969c:	f042 0202 	orrlt.w	r2, r2, #2
 80096a0:	9307      	strge	r3, [sp, #28]
 80096a2:	9307      	strlt	r3, [sp, #28]
 80096a4:	bfb8      	it	lt
 80096a6:	9204      	strlt	r2, [sp, #16]
 80096a8:	7823      	ldrb	r3, [r4, #0]
 80096aa:	2b2e      	cmp	r3, #46	@ 0x2e
 80096ac:	d10a      	bne.n	80096c4 <_svfiprintf_r+0x130>
 80096ae:	7863      	ldrb	r3, [r4, #1]
 80096b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80096b2:	d132      	bne.n	800971a <_svfiprintf_r+0x186>
 80096b4:	9b03      	ldr	r3, [sp, #12]
 80096b6:	1d1a      	adds	r2, r3, #4
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	9203      	str	r2, [sp, #12]
 80096bc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80096c0:	3402      	adds	r4, #2
 80096c2:	9305      	str	r3, [sp, #20]
 80096c4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009788 <_svfiprintf_r+0x1f4>
 80096c8:	7821      	ldrb	r1, [r4, #0]
 80096ca:	2203      	movs	r2, #3
 80096cc:	4650      	mov	r0, sl
 80096ce:	f7f6 fd87 	bl	80001e0 <memchr>
 80096d2:	b138      	cbz	r0, 80096e4 <_svfiprintf_r+0x150>
 80096d4:	9b04      	ldr	r3, [sp, #16]
 80096d6:	eba0 000a 	sub.w	r0, r0, sl
 80096da:	2240      	movs	r2, #64	@ 0x40
 80096dc:	4082      	lsls	r2, r0
 80096de:	4313      	orrs	r3, r2
 80096e0:	3401      	adds	r4, #1
 80096e2:	9304      	str	r3, [sp, #16]
 80096e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096e8:	4824      	ldr	r0, [pc, #144]	@ (800977c <_svfiprintf_r+0x1e8>)
 80096ea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80096ee:	2206      	movs	r2, #6
 80096f0:	f7f6 fd76 	bl	80001e0 <memchr>
 80096f4:	2800      	cmp	r0, #0
 80096f6:	d036      	beq.n	8009766 <_svfiprintf_r+0x1d2>
 80096f8:	4b21      	ldr	r3, [pc, #132]	@ (8009780 <_svfiprintf_r+0x1ec>)
 80096fa:	bb1b      	cbnz	r3, 8009744 <_svfiprintf_r+0x1b0>
 80096fc:	9b03      	ldr	r3, [sp, #12]
 80096fe:	3307      	adds	r3, #7
 8009700:	f023 0307 	bic.w	r3, r3, #7
 8009704:	3308      	adds	r3, #8
 8009706:	9303      	str	r3, [sp, #12]
 8009708:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800970a:	4433      	add	r3, r6
 800970c:	9309      	str	r3, [sp, #36]	@ 0x24
 800970e:	e76a      	b.n	80095e6 <_svfiprintf_r+0x52>
 8009710:	fb0c 3202 	mla	r2, ip, r2, r3
 8009714:	460c      	mov	r4, r1
 8009716:	2001      	movs	r0, #1
 8009718:	e7a8      	b.n	800966c <_svfiprintf_r+0xd8>
 800971a:	2300      	movs	r3, #0
 800971c:	3401      	adds	r4, #1
 800971e:	9305      	str	r3, [sp, #20]
 8009720:	4619      	mov	r1, r3
 8009722:	f04f 0c0a 	mov.w	ip, #10
 8009726:	4620      	mov	r0, r4
 8009728:	f810 2b01 	ldrb.w	r2, [r0], #1
 800972c:	3a30      	subs	r2, #48	@ 0x30
 800972e:	2a09      	cmp	r2, #9
 8009730:	d903      	bls.n	800973a <_svfiprintf_r+0x1a6>
 8009732:	2b00      	cmp	r3, #0
 8009734:	d0c6      	beq.n	80096c4 <_svfiprintf_r+0x130>
 8009736:	9105      	str	r1, [sp, #20]
 8009738:	e7c4      	b.n	80096c4 <_svfiprintf_r+0x130>
 800973a:	fb0c 2101 	mla	r1, ip, r1, r2
 800973e:	4604      	mov	r4, r0
 8009740:	2301      	movs	r3, #1
 8009742:	e7f0      	b.n	8009726 <_svfiprintf_r+0x192>
 8009744:	ab03      	add	r3, sp, #12
 8009746:	9300      	str	r3, [sp, #0]
 8009748:	462a      	mov	r2, r5
 800974a:	4b0e      	ldr	r3, [pc, #56]	@ (8009784 <_svfiprintf_r+0x1f0>)
 800974c:	a904      	add	r1, sp, #16
 800974e:	4638      	mov	r0, r7
 8009750:	f7fd fe76 	bl	8007440 <_printf_float>
 8009754:	1c42      	adds	r2, r0, #1
 8009756:	4606      	mov	r6, r0
 8009758:	d1d6      	bne.n	8009708 <_svfiprintf_r+0x174>
 800975a:	89ab      	ldrh	r3, [r5, #12]
 800975c:	065b      	lsls	r3, r3, #25
 800975e:	f53f af2d 	bmi.w	80095bc <_svfiprintf_r+0x28>
 8009762:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009764:	e72c      	b.n	80095c0 <_svfiprintf_r+0x2c>
 8009766:	ab03      	add	r3, sp, #12
 8009768:	9300      	str	r3, [sp, #0]
 800976a:	462a      	mov	r2, r5
 800976c:	4b05      	ldr	r3, [pc, #20]	@ (8009784 <_svfiprintf_r+0x1f0>)
 800976e:	a904      	add	r1, sp, #16
 8009770:	4638      	mov	r0, r7
 8009772:	f7fe f8fd 	bl	8007970 <_printf_i>
 8009776:	e7ed      	b.n	8009754 <_svfiprintf_r+0x1c0>
 8009778:	0800ac56 	.word	0x0800ac56
 800977c:	0800ac60 	.word	0x0800ac60
 8009780:	08007441 	.word	0x08007441
 8009784:	080094dd 	.word	0x080094dd
 8009788:	0800ac5c 	.word	0x0800ac5c

0800978c <__sflush_r>:
 800978c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009794:	0716      	lsls	r6, r2, #28
 8009796:	4605      	mov	r5, r0
 8009798:	460c      	mov	r4, r1
 800979a:	d454      	bmi.n	8009846 <__sflush_r+0xba>
 800979c:	684b      	ldr	r3, [r1, #4]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	dc02      	bgt.n	80097a8 <__sflush_r+0x1c>
 80097a2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	dd48      	ble.n	800983a <__sflush_r+0xae>
 80097a8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80097aa:	2e00      	cmp	r6, #0
 80097ac:	d045      	beq.n	800983a <__sflush_r+0xae>
 80097ae:	2300      	movs	r3, #0
 80097b0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80097b4:	682f      	ldr	r7, [r5, #0]
 80097b6:	6a21      	ldr	r1, [r4, #32]
 80097b8:	602b      	str	r3, [r5, #0]
 80097ba:	d030      	beq.n	800981e <__sflush_r+0x92>
 80097bc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80097be:	89a3      	ldrh	r3, [r4, #12]
 80097c0:	0759      	lsls	r1, r3, #29
 80097c2:	d505      	bpl.n	80097d0 <__sflush_r+0x44>
 80097c4:	6863      	ldr	r3, [r4, #4]
 80097c6:	1ad2      	subs	r2, r2, r3
 80097c8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80097ca:	b10b      	cbz	r3, 80097d0 <__sflush_r+0x44>
 80097cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80097ce:	1ad2      	subs	r2, r2, r3
 80097d0:	2300      	movs	r3, #0
 80097d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80097d4:	6a21      	ldr	r1, [r4, #32]
 80097d6:	4628      	mov	r0, r5
 80097d8:	47b0      	blx	r6
 80097da:	1c43      	adds	r3, r0, #1
 80097dc:	89a3      	ldrh	r3, [r4, #12]
 80097de:	d106      	bne.n	80097ee <__sflush_r+0x62>
 80097e0:	6829      	ldr	r1, [r5, #0]
 80097e2:	291d      	cmp	r1, #29
 80097e4:	d82b      	bhi.n	800983e <__sflush_r+0xb2>
 80097e6:	4a2a      	ldr	r2, [pc, #168]	@ (8009890 <__sflush_r+0x104>)
 80097e8:	40ca      	lsrs	r2, r1
 80097ea:	07d6      	lsls	r6, r2, #31
 80097ec:	d527      	bpl.n	800983e <__sflush_r+0xb2>
 80097ee:	2200      	movs	r2, #0
 80097f0:	6062      	str	r2, [r4, #4]
 80097f2:	04d9      	lsls	r1, r3, #19
 80097f4:	6922      	ldr	r2, [r4, #16]
 80097f6:	6022      	str	r2, [r4, #0]
 80097f8:	d504      	bpl.n	8009804 <__sflush_r+0x78>
 80097fa:	1c42      	adds	r2, r0, #1
 80097fc:	d101      	bne.n	8009802 <__sflush_r+0x76>
 80097fe:	682b      	ldr	r3, [r5, #0]
 8009800:	b903      	cbnz	r3, 8009804 <__sflush_r+0x78>
 8009802:	6560      	str	r0, [r4, #84]	@ 0x54
 8009804:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009806:	602f      	str	r7, [r5, #0]
 8009808:	b1b9      	cbz	r1, 800983a <__sflush_r+0xae>
 800980a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800980e:	4299      	cmp	r1, r3
 8009810:	d002      	beq.n	8009818 <__sflush_r+0x8c>
 8009812:	4628      	mov	r0, r5
 8009814:	f7ff f9e8 	bl	8008be8 <_free_r>
 8009818:	2300      	movs	r3, #0
 800981a:	6363      	str	r3, [r4, #52]	@ 0x34
 800981c:	e00d      	b.n	800983a <__sflush_r+0xae>
 800981e:	2301      	movs	r3, #1
 8009820:	4628      	mov	r0, r5
 8009822:	47b0      	blx	r6
 8009824:	4602      	mov	r2, r0
 8009826:	1c50      	adds	r0, r2, #1
 8009828:	d1c9      	bne.n	80097be <__sflush_r+0x32>
 800982a:	682b      	ldr	r3, [r5, #0]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d0c6      	beq.n	80097be <__sflush_r+0x32>
 8009830:	2b1d      	cmp	r3, #29
 8009832:	d001      	beq.n	8009838 <__sflush_r+0xac>
 8009834:	2b16      	cmp	r3, #22
 8009836:	d11e      	bne.n	8009876 <__sflush_r+0xea>
 8009838:	602f      	str	r7, [r5, #0]
 800983a:	2000      	movs	r0, #0
 800983c:	e022      	b.n	8009884 <__sflush_r+0xf8>
 800983e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009842:	b21b      	sxth	r3, r3
 8009844:	e01b      	b.n	800987e <__sflush_r+0xf2>
 8009846:	690f      	ldr	r7, [r1, #16]
 8009848:	2f00      	cmp	r7, #0
 800984a:	d0f6      	beq.n	800983a <__sflush_r+0xae>
 800984c:	0793      	lsls	r3, r2, #30
 800984e:	680e      	ldr	r6, [r1, #0]
 8009850:	bf08      	it	eq
 8009852:	694b      	ldreq	r3, [r1, #20]
 8009854:	600f      	str	r7, [r1, #0]
 8009856:	bf18      	it	ne
 8009858:	2300      	movne	r3, #0
 800985a:	eba6 0807 	sub.w	r8, r6, r7
 800985e:	608b      	str	r3, [r1, #8]
 8009860:	f1b8 0f00 	cmp.w	r8, #0
 8009864:	dde9      	ble.n	800983a <__sflush_r+0xae>
 8009866:	6a21      	ldr	r1, [r4, #32]
 8009868:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800986a:	4643      	mov	r3, r8
 800986c:	463a      	mov	r2, r7
 800986e:	4628      	mov	r0, r5
 8009870:	47b0      	blx	r6
 8009872:	2800      	cmp	r0, #0
 8009874:	dc08      	bgt.n	8009888 <__sflush_r+0xfc>
 8009876:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800987a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800987e:	81a3      	strh	r3, [r4, #12]
 8009880:	f04f 30ff 	mov.w	r0, #4294967295
 8009884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009888:	4407      	add	r7, r0
 800988a:	eba8 0800 	sub.w	r8, r8, r0
 800988e:	e7e7      	b.n	8009860 <__sflush_r+0xd4>
 8009890:	20400001 	.word	0x20400001

08009894 <_fflush_r>:
 8009894:	b538      	push	{r3, r4, r5, lr}
 8009896:	690b      	ldr	r3, [r1, #16]
 8009898:	4605      	mov	r5, r0
 800989a:	460c      	mov	r4, r1
 800989c:	b913      	cbnz	r3, 80098a4 <_fflush_r+0x10>
 800989e:	2500      	movs	r5, #0
 80098a0:	4628      	mov	r0, r5
 80098a2:	bd38      	pop	{r3, r4, r5, pc}
 80098a4:	b118      	cbz	r0, 80098ae <_fflush_r+0x1a>
 80098a6:	6a03      	ldr	r3, [r0, #32]
 80098a8:	b90b      	cbnz	r3, 80098ae <_fflush_r+0x1a>
 80098aa:	f7fe fa0b 	bl	8007cc4 <__sinit>
 80098ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d0f3      	beq.n	800989e <_fflush_r+0xa>
 80098b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80098b8:	07d0      	lsls	r0, r2, #31
 80098ba:	d404      	bmi.n	80098c6 <_fflush_r+0x32>
 80098bc:	0599      	lsls	r1, r3, #22
 80098be:	d402      	bmi.n	80098c6 <_fflush_r+0x32>
 80098c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80098c2:	f7fe fb28 	bl	8007f16 <__retarget_lock_acquire_recursive>
 80098c6:	4628      	mov	r0, r5
 80098c8:	4621      	mov	r1, r4
 80098ca:	f7ff ff5f 	bl	800978c <__sflush_r>
 80098ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80098d0:	07da      	lsls	r2, r3, #31
 80098d2:	4605      	mov	r5, r0
 80098d4:	d4e4      	bmi.n	80098a0 <_fflush_r+0xc>
 80098d6:	89a3      	ldrh	r3, [r4, #12]
 80098d8:	059b      	lsls	r3, r3, #22
 80098da:	d4e1      	bmi.n	80098a0 <_fflush_r+0xc>
 80098dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80098de:	f7fe fb1b 	bl	8007f18 <__retarget_lock_release_recursive>
 80098e2:	e7dd      	b.n	80098a0 <_fflush_r+0xc>

080098e4 <memmove>:
 80098e4:	4288      	cmp	r0, r1
 80098e6:	b510      	push	{r4, lr}
 80098e8:	eb01 0402 	add.w	r4, r1, r2
 80098ec:	d902      	bls.n	80098f4 <memmove+0x10>
 80098ee:	4284      	cmp	r4, r0
 80098f0:	4623      	mov	r3, r4
 80098f2:	d807      	bhi.n	8009904 <memmove+0x20>
 80098f4:	1e43      	subs	r3, r0, #1
 80098f6:	42a1      	cmp	r1, r4
 80098f8:	d008      	beq.n	800990c <memmove+0x28>
 80098fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80098fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009902:	e7f8      	b.n	80098f6 <memmove+0x12>
 8009904:	4402      	add	r2, r0
 8009906:	4601      	mov	r1, r0
 8009908:	428a      	cmp	r2, r1
 800990a:	d100      	bne.n	800990e <memmove+0x2a>
 800990c:	bd10      	pop	{r4, pc}
 800990e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009912:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009916:	e7f7      	b.n	8009908 <memmove+0x24>

08009918 <_sbrk_r>:
 8009918:	b538      	push	{r3, r4, r5, lr}
 800991a:	4d06      	ldr	r5, [pc, #24]	@ (8009934 <_sbrk_r+0x1c>)
 800991c:	2300      	movs	r3, #0
 800991e:	4604      	mov	r4, r0
 8009920:	4608      	mov	r0, r1
 8009922:	602b      	str	r3, [r5, #0]
 8009924:	f7fa f84a 	bl	80039bc <_sbrk>
 8009928:	1c43      	adds	r3, r0, #1
 800992a:	d102      	bne.n	8009932 <_sbrk_r+0x1a>
 800992c:	682b      	ldr	r3, [r5, #0]
 800992e:	b103      	cbz	r3, 8009932 <_sbrk_r+0x1a>
 8009930:	6023      	str	r3, [r4, #0]
 8009932:	bd38      	pop	{r3, r4, r5, pc}
 8009934:	200071dc 	.word	0x200071dc

08009938 <__assert_func>:
 8009938:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800993a:	4614      	mov	r4, r2
 800993c:	461a      	mov	r2, r3
 800993e:	4b09      	ldr	r3, [pc, #36]	@ (8009964 <__assert_func+0x2c>)
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	4605      	mov	r5, r0
 8009944:	68d8      	ldr	r0, [r3, #12]
 8009946:	b14c      	cbz	r4, 800995c <__assert_func+0x24>
 8009948:	4b07      	ldr	r3, [pc, #28]	@ (8009968 <__assert_func+0x30>)
 800994a:	9100      	str	r1, [sp, #0]
 800994c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009950:	4906      	ldr	r1, [pc, #24]	@ (800996c <__assert_func+0x34>)
 8009952:	462b      	mov	r3, r5
 8009954:	f000 f870 	bl	8009a38 <fiprintf>
 8009958:	f000 f880 	bl	8009a5c <abort>
 800995c:	4b04      	ldr	r3, [pc, #16]	@ (8009970 <__assert_func+0x38>)
 800995e:	461c      	mov	r4, r3
 8009960:	e7f3      	b.n	800994a <__assert_func+0x12>
 8009962:	bf00      	nop
 8009964:	20000018 	.word	0x20000018
 8009968:	0800ac71 	.word	0x0800ac71
 800996c:	0800ac7e 	.word	0x0800ac7e
 8009970:	0800acac 	.word	0x0800acac

08009974 <_calloc_r>:
 8009974:	b570      	push	{r4, r5, r6, lr}
 8009976:	fba1 5402 	umull	r5, r4, r1, r2
 800997a:	b934      	cbnz	r4, 800998a <_calloc_r+0x16>
 800997c:	4629      	mov	r1, r5
 800997e:	f7ff f9a7 	bl	8008cd0 <_malloc_r>
 8009982:	4606      	mov	r6, r0
 8009984:	b928      	cbnz	r0, 8009992 <_calloc_r+0x1e>
 8009986:	4630      	mov	r0, r6
 8009988:	bd70      	pop	{r4, r5, r6, pc}
 800998a:	220c      	movs	r2, #12
 800998c:	6002      	str	r2, [r0, #0]
 800998e:	2600      	movs	r6, #0
 8009990:	e7f9      	b.n	8009986 <_calloc_r+0x12>
 8009992:	462a      	mov	r2, r5
 8009994:	4621      	mov	r1, r4
 8009996:	f7fe fa40 	bl	8007e1a <memset>
 800999a:	e7f4      	b.n	8009986 <_calloc_r+0x12>

0800999c <__ascii_mbtowc>:
 800999c:	b082      	sub	sp, #8
 800999e:	b901      	cbnz	r1, 80099a2 <__ascii_mbtowc+0x6>
 80099a0:	a901      	add	r1, sp, #4
 80099a2:	b142      	cbz	r2, 80099b6 <__ascii_mbtowc+0x1a>
 80099a4:	b14b      	cbz	r3, 80099ba <__ascii_mbtowc+0x1e>
 80099a6:	7813      	ldrb	r3, [r2, #0]
 80099a8:	600b      	str	r3, [r1, #0]
 80099aa:	7812      	ldrb	r2, [r2, #0]
 80099ac:	1e10      	subs	r0, r2, #0
 80099ae:	bf18      	it	ne
 80099b0:	2001      	movne	r0, #1
 80099b2:	b002      	add	sp, #8
 80099b4:	4770      	bx	lr
 80099b6:	4610      	mov	r0, r2
 80099b8:	e7fb      	b.n	80099b2 <__ascii_mbtowc+0x16>
 80099ba:	f06f 0001 	mvn.w	r0, #1
 80099be:	e7f8      	b.n	80099b2 <__ascii_mbtowc+0x16>

080099c0 <_realloc_r>:
 80099c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099c4:	4607      	mov	r7, r0
 80099c6:	4614      	mov	r4, r2
 80099c8:	460d      	mov	r5, r1
 80099ca:	b921      	cbnz	r1, 80099d6 <_realloc_r+0x16>
 80099cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80099d0:	4611      	mov	r1, r2
 80099d2:	f7ff b97d 	b.w	8008cd0 <_malloc_r>
 80099d6:	b92a      	cbnz	r2, 80099e4 <_realloc_r+0x24>
 80099d8:	f7ff f906 	bl	8008be8 <_free_r>
 80099dc:	4625      	mov	r5, r4
 80099de:	4628      	mov	r0, r5
 80099e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099e4:	f000 f841 	bl	8009a6a <_malloc_usable_size_r>
 80099e8:	4284      	cmp	r4, r0
 80099ea:	4606      	mov	r6, r0
 80099ec:	d802      	bhi.n	80099f4 <_realloc_r+0x34>
 80099ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80099f2:	d8f4      	bhi.n	80099de <_realloc_r+0x1e>
 80099f4:	4621      	mov	r1, r4
 80099f6:	4638      	mov	r0, r7
 80099f8:	f7ff f96a 	bl	8008cd0 <_malloc_r>
 80099fc:	4680      	mov	r8, r0
 80099fe:	b908      	cbnz	r0, 8009a04 <_realloc_r+0x44>
 8009a00:	4645      	mov	r5, r8
 8009a02:	e7ec      	b.n	80099de <_realloc_r+0x1e>
 8009a04:	42b4      	cmp	r4, r6
 8009a06:	4622      	mov	r2, r4
 8009a08:	4629      	mov	r1, r5
 8009a0a:	bf28      	it	cs
 8009a0c:	4632      	movcs	r2, r6
 8009a0e:	f7fe fa84 	bl	8007f1a <memcpy>
 8009a12:	4629      	mov	r1, r5
 8009a14:	4638      	mov	r0, r7
 8009a16:	f7ff f8e7 	bl	8008be8 <_free_r>
 8009a1a:	e7f1      	b.n	8009a00 <_realloc_r+0x40>

08009a1c <__ascii_wctomb>:
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	4608      	mov	r0, r1
 8009a20:	b141      	cbz	r1, 8009a34 <__ascii_wctomb+0x18>
 8009a22:	2aff      	cmp	r2, #255	@ 0xff
 8009a24:	d904      	bls.n	8009a30 <__ascii_wctomb+0x14>
 8009a26:	228a      	movs	r2, #138	@ 0x8a
 8009a28:	601a      	str	r2, [r3, #0]
 8009a2a:	f04f 30ff 	mov.w	r0, #4294967295
 8009a2e:	4770      	bx	lr
 8009a30:	700a      	strb	r2, [r1, #0]
 8009a32:	2001      	movs	r0, #1
 8009a34:	4770      	bx	lr
	...

08009a38 <fiprintf>:
 8009a38:	b40e      	push	{r1, r2, r3}
 8009a3a:	b503      	push	{r0, r1, lr}
 8009a3c:	4601      	mov	r1, r0
 8009a3e:	ab03      	add	r3, sp, #12
 8009a40:	4805      	ldr	r0, [pc, #20]	@ (8009a58 <fiprintf+0x20>)
 8009a42:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a46:	6800      	ldr	r0, [r0, #0]
 8009a48:	9301      	str	r3, [sp, #4]
 8009a4a:	f000 f83f 	bl	8009acc <_vfiprintf_r>
 8009a4e:	b002      	add	sp, #8
 8009a50:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a54:	b003      	add	sp, #12
 8009a56:	4770      	bx	lr
 8009a58:	20000018 	.word	0x20000018

08009a5c <abort>:
 8009a5c:	b508      	push	{r3, lr}
 8009a5e:	2006      	movs	r0, #6
 8009a60:	f000 fa08 	bl	8009e74 <raise>
 8009a64:	2001      	movs	r0, #1
 8009a66:	f7f9 ff31 	bl	80038cc <_exit>

08009a6a <_malloc_usable_size_r>:
 8009a6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a6e:	1f18      	subs	r0, r3, #4
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	bfbc      	itt	lt
 8009a74:	580b      	ldrlt	r3, [r1, r0]
 8009a76:	18c0      	addlt	r0, r0, r3
 8009a78:	4770      	bx	lr

08009a7a <__sfputc_r>:
 8009a7a:	6893      	ldr	r3, [r2, #8]
 8009a7c:	3b01      	subs	r3, #1
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	b410      	push	{r4}
 8009a82:	6093      	str	r3, [r2, #8]
 8009a84:	da08      	bge.n	8009a98 <__sfputc_r+0x1e>
 8009a86:	6994      	ldr	r4, [r2, #24]
 8009a88:	42a3      	cmp	r3, r4
 8009a8a:	db01      	blt.n	8009a90 <__sfputc_r+0x16>
 8009a8c:	290a      	cmp	r1, #10
 8009a8e:	d103      	bne.n	8009a98 <__sfputc_r+0x1e>
 8009a90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a94:	f000 b932 	b.w	8009cfc <__swbuf_r>
 8009a98:	6813      	ldr	r3, [r2, #0]
 8009a9a:	1c58      	adds	r0, r3, #1
 8009a9c:	6010      	str	r0, [r2, #0]
 8009a9e:	7019      	strb	r1, [r3, #0]
 8009aa0:	4608      	mov	r0, r1
 8009aa2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009aa6:	4770      	bx	lr

08009aa8 <__sfputs_r>:
 8009aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aaa:	4606      	mov	r6, r0
 8009aac:	460f      	mov	r7, r1
 8009aae:	4614      	mov	r4, r2
 8009ab0:	18d5      	adds	r5, r2, r3
 8009ab2:	42ac      	cmp	r4, r5
 8009ab4:	d101      	bne.n	8009aba <__sfputs_r+0x12>
 8009ab6:	2000      	movs	r0, #0
 8009ab8:	e007      	b.n	8009aca <__sfputs_r+0x22>
 8009aba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009abe:	463a      	mov	r2, r7
 8009ac0:	4630      	mov	r0, r6
 8009ac2:	f7ff ffda 	bl	8009a7a <__sfputc_r>
 8009ac6:	1c43      	adds	r3, r0, #1
 8009ac8:	d1f3      	bne.n	8009ab2 <__sfputs_r+0xa>
 8009aca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009acc <_vfiprintf_r>:
 8009acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ad0:	460d      	mov	r5, r1
 8009ad2:	b09d      	sub	sp, #116	@ 0x74
 8009ad4:	4614      	mov	r4, r2
 8009ad6:	4698      	mov	r8, r3
 8009ad8:	4606      	mov	r6, r0
 8009ada:	b118      	cbz	r0, 8009ae4 <_vfiprintf_r+0x18>
 8009adc:	6a03      	ldr	r3, [r0, #32]
 8009ade:	b90b      	cbnz	r3, 8009ae4 <_vfiprintf_r+0x18>
 8009ae0:	f7fe f8f0 	bl	8007cc4 <__sinit>
 8009ae4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009ae6:	07d9      	lsls	r1, r3, #31
 8009ae8:	d405      	bmi.n	8009af6 <_vfiprintf_r+0x2a>
 8009aea:	89ab      	ldrh	r3, [r5, #12]
 8009aec:	059a      	lsls	r2, r3, #22
 8009aee:	d402      	bmi.n	8009af6 <_vfiprintf_r+0x2a>
 8009af0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009af2:	f7fe fa10 	bl	8007f16 <__retarget_lock_acquire_recursive>
 8009af6:	89ab      	ldrh	r3, [r5, #12]
 8009af8:	071b      	lsls	r3, r3, #28
 8009afa:	d501      	bpl.n	8009b00 <_vfiprintf_r+0x34>
 8009afc:	692b      	ldr	r3, [r5, #16]
 8009afe:	b99b      	cbnz	r3, 8009b28 <_vfiprintf_r+0x5c>
 8009b00:	4629      	mov	r1, r5
 8009b02:	4630      	mov	r0, r6
 8009b04:	f000 f938 	bl	8009d78 <__swsetup_r>
 8009b08:	b170      	cbz	r0, 8009b28 <_vfiprintf_r+0x5c>
 8009b0a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009b0c:	07dc      	lsls	r4, r3, #31
 8009b0e:	d504      	bpl.n	8009b1a <_vfiprintf_r+0x4e>
 8009b10:	f04f 30ff 	mov.w	r0, #4294967295
 8009b14:	b01d      	add	sp, #116	@ 0x74
 8009b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b1a:	89ab      	ldrh	r3, [r5, #12]
 8009b1c:	0598      	lsls	r0, r3, #22
 8009b1e:	d4f7      	bmi.n	8009b10 <_vfiprintf_r+0x44>
 8009b20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009b22:	f7fe f9f9 	bl	8007f18 <__retarget_lock_release_recursive>
 8009b26:	e7f3      	b.n	8009b10 <_vfiprintf_r+0x44>
 8009b28:	2300      	movs	r3, #0
 8009b2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b2c:	2320      	movs	r3, #32
 8009b2e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009b32:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b36:	2330      	movs	r3, #48	@ 0x30
 8009b38:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009ce8 <_vfiprintf_r+0x21c>
 8009b3c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009b40:	f04f 0901 	mov.w	r9, #1
 8009b44:	4623      	mov	r3, r4
 8009b46:	469a      	mov	sl, r3
 8009b48:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b4c:	b10a      	cbz	r2, 8009b52 <_vfiprintf_r+0x86>
 8009b4e:	2a25      	cmp	r2, #37	@ 0x25
 8009b50:	d1f9      	bne.n	8009b46 <_vfiprintf_r+0x7a>
 8009b52:	ebba 0b04 	subs.w	fp, sl, r4
 8009b56:	d00b      	beq.n	8009b70 <_vfiprintf_r+0xa4>
 8009b58:	465b      	mov	r3, fp
 8009b5a:	4622      	mov	r2, r4
 8009b5c:	4629      	mov	r1, r5
 8009b5e:	4630      	mov	r0, r6
 8009b60:	f7ff ffa2 	bl	8009aa8 <__sfputs_r>
 8009b64:	3001      	adds	r0, #1
 8009b66:	f000 80a7 	beq.w	8009cb8 <_vfiprintf_r+0x1ec>
 8009b6a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b6c:	445a      	add	r2, fp
 8009b6e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009b70:	f89a 3000 	ldrb.w	r3, [sl]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	f000 809f 	beq.w	8009cb8 <_vfiprintf_r+0x1ec>
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	f04f 32ff 	mov.w	r2, #4294967295
 8009b80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b84:	f10a 0a01 	add.w	sl, sl, #1
 8009b88:	9304      	str	r3, [sp, #16]
 8009b8a:	9307      	str	r3, [sp, #28]
 8009b8c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009b90:	931a      	str	r3, [sp, #104]	@ 0x68
 8009b92:	4654      	mov	r4, sl
 8009b94:	2205      	movs	r2, #5
 8009b96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b9a:	4853      	ldr	r0, [pc, #332]	@ (8009ce8 <_vfiprintf_r+0x21c>)
 8009b9c:	f7f6 fb20 	bl	80001e0 <memchr>
 8009ba0:	9a04      	ldr	r2, [sp, #16]
 8009ba2:	b9d8      	cbnz	r0, 8009bdc <_vfiprintf_r+0x110>
 8009ba4:	06d1      	lsls	r1, r2, #27
 8009ba6:	bf44      	itt	mi
 8009ba8:	2320      	movmi	r3, #32
 8009baa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009bae:	0713      	lsls	r3, r2, #28
 8009bb0:	bf44      	itt	mi
 8009bb2:	232b      	movmi	r3, #43	@ 0x2b
 8009bb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009bb8:	f89a 3000 	ldrb.w	r3, [sl]
 8009bbc:	2b2a      	cmp	r3, #42	@ 0x2a
 8009bbe:	d015      	beq.n	8009bec <_vfiprintf_r+0x120>
 8009bc0:	9a07      	ldr	r2, [sp, #28]
 8009bc2:	4654      	mov	r4, sl
 8009bc4:	2000      	movs	r0, #0
 8009bc6:	f04f 0c0a 	mov.w	ip, #10
 8009bca:	4621      	mov	r1, r4
 8009bcc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009bd0:	3b30      	subs	r3, #48	@ 0x30
 8009bd2:	2b09      	cmp	r3, #9
 8009bd4:	d94b      	bls.n	8009c6e <_vfiprintf_r+0x1a2>
 8009bd6:	b1b0      	cbz	r0, 8009c06 <_vfiprintf_r+0x13a>
 8009bd8:	9207      	str	r2, [sp, #28]
 8009bda:	e014      	b.n	8009c06 <_vfiprintf_r+0x13a>
 8009bdc:	eba0 0308 	sub.w	r3, r0, r8
 8009be0:	fa09 f303 	lsl.w	r3, r9, r3
 8009be4:	4313      	orrs	r3, r2
 8009be6:	9304      	str	r3, [sp, #16]
 8009be8:	46a2      	mov	sl, r4
 8009bea:	e7d2      	b.n	8009b92 <_vfiprintf_r+0xc6>
 8009bec:	9b03      	ldr	r3, [sp, #12]
 8009bee:	1d19      	adds	r1, r3, #4
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	9103      	str	r1, [sp, #12]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	bfbb      	ittet	lt
 8009bf8:	425b      	neglt	r3, r3
 8009bfa:	f042 0202 	orrlt.w	r2, r2, #2
 8009bfe:	9307      	strge	r3, [sp, #28]
 8009c00:	9307      	strlt	r3, [sp, #28]
 8009c02:	bfb8      	it	lt
 8009c04:	9204      	strlt	r2, [sp, #16]
 8009c06:	7823      	ldrb	r3, [r4, #0]
 8009c08:	2b2e      	cmp	r3, #46	@ 0x2e
 8009c0a:	d10a      	bne.n	8009c22 <_vfiprintf_r+0x156>
 8009c0c:	7863      	ldrb	r3, [r4, #1]
 8009c0e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009c10:	d132      	bne.n	8009c78 <_vfiprintf_r+0x1ac>
 8009c12:	9b03      	ldr	r3, [sp, #12]
 8009c14:	1d1a      	adds	r2, r3, #4
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	9203      	str	r2, [sp, #12]
 8009c1a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009c1e:	3402      	adds	r4, #2
 8009c20:	9305      	str	r3, [sp, #20]
 8009c22:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009cf8 <_vfiprintf_r+0x22c>
 8009c26:	7821      	ldrb	r1, [r4, #0]
 8009c28:	2203      	movs	r2, #3
 8009c2a:	4650      	mov	r0, sl
 8009c2c:	f7f6 fad8 	bl	80001e0 <memchr>
 8009c30:	b138      	cbz	r0, 8009c42 <_vfiprintf_r+0x176>
 8009c32:	9b04      	ldr	r3, [sp, #16]
 8009c34:	eba0 000a 	sub.w	r0, r0, sl
 8009c38:	2240      	movs	r2, #64	@ 0x40
 8009c3a:	4082      	lsls	r2, r0
 8009c3c:	4313      	orrs	r3, r2
 8009c3e:	3401      	adds	r4, #1
 8009c40:	9304      	str	r3, [sp, #16]
 8009c42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c46:	4829      	ldr	r0, [pc, #164]	@ (8009cec <_vfiprintf_r+0x220>)
 8009c48:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009c4c:	2206      	movs	r2, #6
 8009c4e:	f7f6 fac7 	bl	80001e0 <memchr>
 8009c52:	2800      	cmp	r0, #0
 8009c54:	d03f      	beq.n	8009cd6 <_vfiprintf_r+0x20a>
 8009c56:	4b26      	ldr	r3, [pc, #152]	@ (8009cf0 <_vfiprintf_r+0x224>)
 8009c58:	bb1b      	cbnz	r3, 8009ca2 <_vfiprintf_r+0x1d6>
 8009c5a:	9b03      	ldr	r3, [sp, #12]
 8009c5c:	3307      	adds	r3, #7
 8009c5e:	f023 0307 	bic.w	r3, r3, #7
 8009c62:	3308      	adds	r3, #8
 8009c64:	9303      	str	r3, [sp, #12]
 8009c66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c68:	443b      	add	r3, r7
 8009c6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c6c:	e76a      	b.n	8009b44 <_vfiprintf_r+0x78>
 8009c6e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c72:	460c      	mov	r4, r1
 8009c74:	2001      	movs	r0, #1
 8009c76:	e7a8      	b.n	8009bca <_vfiprintf_r+0xfe>
 8009c78:	2300      	movs	r3, #0
 8009c7a:	3401      	adds	r4, #1
 8009c7c:	9305      	str	r3, [sp, #20]
 8009c7e:	4619      	mov	r1, r3
 8009c80:	f04f 0c0a 	mov.w	ip, #10
 8009c84:	4620      	mov	r0, r4
 8009c86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c8a:	3a30      	subs	r2, #48	@ 0x30
 8009c8c:	2a09      	cmp	r2, #9
 8009c8e:	d903      	bls.n	8009c98 <_vfiprintf_r+0x1cc>
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d0c6      	beq.n	8009c22 <_vfiprintf_r+0x156>
 8009c94:	9105      	str	r1, [sp, #20]
 8009c96:	e7c4      	b.n	8009c22 <_vfiprintf_r+0x156>
 8009c98:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c9c:	4604      	mov	r4, r0
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	e7f0      	b.n	8009c84 <_vfiprintf_r+0x1b8>
 8009ca2:	ab03      	add	r3, sp, #12
 8009ca4:	9300      	str	r3, [sp, #0]
 8009ca6:	462a      	mov	r2, r5
 8009ca8:	4b12      	ldr	r3, [pc, #72]	@ (8009cf4 <_vfiprintf_r+0x228>)
 8009caa:	a904      	add	r1, sp, #16
 8009cac:	4630      	mov	r0, r6
 8009cae:	f7fd fbc7 	bl	8007440 <_printf_float>
 8009cb2:	4607      	mov	r7, r0
 8009cb4:	1c78      	adds	r0, r7, #1
 8009cb6:	d1d6      	bne.n	8009c66 <_vfiprintf_r+0x19a>
 8009cb8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009cba:	07d9      	lsls	r1, r3, #31
 8009cbc:	d405      	bmi.n	8009cca <_vfiprintf_r+0x1fe>
 8009cbe:	89ab      	ldrh	r3, [r5, #12]
 8009cc0:	059a      	lsls	r2, r3, #22
 8009cc2:	d402      	bmi.n	8009cca <_vfiprintf_r+0x1fe>
 8009cc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009cc6:	f7fe f927 	bl	8007f18 <__retarget_lock_release_recursive>
 8009cca:	89ab      	ldrh	r3, [r5, #12]
 8009ccc:	065b      	lsls	r3, r3, #25
 8009cce:	f53f af1f 	bmi.w	8009b10 <_vfiprintf_r+0x44>
 8009cd2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009cd4:	e71e      	b.n	8009b14 <_vfiprintf_r+0x48>
 8009cd6:	ab03      	add	r3, sp, #12
 8009cd8:	9300      	str	r3, [sp, #0]
 8009cda:	462a      	mov	r2, r5
 8009cdc:	4b05      	ldr	r3, [pc, #20]	@ (8009cf4 <_vfiprintf_r+0x228>)
 8009cde:	a904      	add	r1, sp, #16
 8009ce0:	4630      	mov	r0, r6
 8009ce2:	f7fd fe45 	bl	8007970 <_printf_i>
 8009ce6:	e7e4      	b.n	8009cb2 <_vfiprintf_r+0x1e6>
 8009ce8:	0800ac56 	.word	0x0800ac56
 8009cec:	0800ac60 	.word	0x0800ac60
 8009cf0:	08007441 	.word	0x08007441
 8009cf4:	08009aa9 	.word	0x08009aa9
 8009cf8:	0800ac5c 	.word	0x0800ac5c

08009cfc <__swbuf_r>:
 8009cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cfe:	460e      	mov	r6, r1
 8009d00:	4614      	mov	r4, r2
 8009d02:	4605      	mov	r5, r0
 8009d04:	b118      	cbz	r0, 8009d0e <__swbuf_r+0x12>
 8009d06:	6a03      	ldr	r3, [r0, #32]
 8009d08:	b90b      	cbnz	r3, 8009d0e <__swbuf_r+0x12>
 8009d0a:	f7fd ffdb 	bl	8007cc4 <__sinit>
 8009d0e:	69a3      	ldr	r3, [r4, #24]
 8009d10:	60a3      	str	r3, [r4, #8]
 8009d12:	89a3      	ldrh	r3, [r4, #12]
 8009d14:	071a      	lsls	r2, r3, #28
 8009d16:	d501      	bpl.n	8009d1c <__swbuf_r+0x20>
 8009d18:	6923      	ldr	r3, [r4, #16]
 8009d1a:	b943      	cbnz	r3, 8009d2e <__swbuf_r+0x32>
 8009d1c:	4621      	mov	r1, r4
 8009d1e:	4628      	mov	r0, r5
 8009d20:	f000 f82a 	bl	8009d78 <__swsetup_r>
 8009d24:	b118      	cbz	r0, 8009d2e <__swbuf_r+0x32>
 8009d26:	f04f 37ff 	mov.w	r7, #4294967295
 8009d2a:	4638      	mov	r0, r7
 8009d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d2e:	6823      	ldr	r3, [r4, #0]
 8009d30:	6922      	ldr	r2, [r4, #16]
 8009d32:	1a98      	subs	r0, r3, r2
 8009d34:	6963      	ldr	r3, [r4, #20]
 8009d36:	b2f6      	uxtb	r6, r6
 8009d38:	4283      	cmp	r3, r0
 8009d3a:	4637      	mov	r7, r6
 8009d3c:	dc05      	bgt.n	8009d4a <__swbuf_r+0x4e>
 8009d3e:	4621      	mov	r1, r4
 8009d40:	4628      	mov	r0, r5
 8009d42:	f7ff fda7 	bl	8009894 <_fflush_r>
 8009d46:	2800      	cmp	r0, #0
 8009d48:	d1ed      	bne.n	8009d26 <__swbuf_r+0x2a>
 8009d4a:	68a3      	ldr	r3, [r4, #8]
 8009d4c:	3b01      	subs	r3, #1
 8009d4e:	60a3      	str	r3, [r4, #8]
 8009d50:	6823      	ldr	r3, [r4, #0]
 8009d52:	1c5a      	adds	r2, r3, #1
 8009d54:	6022      	str	r2, [r4, #0]
 8009d56:	701e      	strb	r6, [r3, #0]
 8009d58:	6962      	ldr	r2, [r4, #20]
 8009d5a:	1c43      	adds	r3, r0, #1
 8009d5c:	429a      	cmp	r2, r3
 8009d5e:	d004      	beq.n	8009d6a <__swbuf_r+0x6e>
 8009d60:	89a3      	ldrh	r3, [r4, #12]
 8009d62:	07db      	lsls	r3, r3, #31
 8009d64:	d5e1      	bpl.n	8009d2a <__swbuf_r+0x2e>
 8009d66:	2e0a      	cmp	r6, #10
 8009d68:	d1df      	bne.n	8009d2a <__swbuf_r+0x2e>
 8009d6a:	4621      	mov	r1, r4
 8009d6c:	4628      	mov	r0, r5
 8009d6e:	f7ff fd91 	bl	8009894 <_fflush_r>
 8009d72:	2800      	cmp	r0, #0
 8009d74:	d0d9      	beq.n	8009d2a <__swbuf_r+0x2e>
 8009d76:	e7d6      	b.n	8009d26 <__swbuf_r+0x2a>

08009d78 <__swsetup_r>:
 8009d78:	b538      	push	{r3, r4, r5, lr}
 8009d7a:	4b29      	ldr	r3, [pc, #164]	@ (8009e20 <__swsetup_r+0xa8>)
 8009d7c:	4605      	mov	r5, r0
 8009d7e:	6818      	ldr	r0, [r3, #0]
 8009d80:	460c      	mov	r4, r1
 8009d82:	b118      	cbz	r0, 8009d8c <__swsetup_r+0x14>
 8009d84:	6a03      	ldr	r3, [r0, #32]
 8009d86:	b90b      	cbnz	r3, 8009d8c <__swsetup_r+0x14>
 8009d88:	f7fd ff9c 	bl	8007cc4 <__sinit>
 8009d8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d90:	0719      	lsls	r1, r3, #28
 8009d92:	d422      	bmi.n	8009dda <__swsetup_r+0x62>
 8009d94:	06da      	lsls	r2, r3, #27
 8009d96:	d407      	bmi.n	8009da8 <__swsetup_r+0x30>
 8009d98:	2209      	movs	r2, #9
 8009d9a:	602a      	str	r2, [r5, #0]
 8009d9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009da0:	81a3      	strh	r3, [r4, #12]
 8009da2:	f04f 30ff 	mov.w	r0, #4294967295
 8009da6:	e033      	b.n	8009e10 <__swsetup_r+0x98>
 8009da8:	0758      	lsls	r0, r3, #29
 8009daa:	d512      	bpl.n	8009dd2 <__swsetup_r+0x5a>
 8009dac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009dae:	b141      	cbz	r1, 8009dc2 <__swsetup_r+0x4a>
 8009db0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009db4:	4299      	cmp	r1, r3
 8009db6:	d002      	beq.n	8009dbe <__swsetup_r+0x46>
 8009db8:	4628      	mov	r0, r5
 8009dba:	f7fe ff15 	bl	8008be8 <_free_r>
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	6363      	str	r3, [r4, #52]	@ 0x34
 8009dc2:	89a3      	ldrh	r3, [r4, #12]
 8009dc4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009dc8:	81a3      	strh	r3, [r4, #12]
 8009dca:	2300      	movs	r3, #0
 8009dcc:	6063      	str	r3, [r4, #4]
 8009dce:	6923      	ldr	r3, [r4, #16]
 8009dd0:	6023      	str	r3, [r4, #0]
 8009dd2:	89a3      	ldrh	r3, [r4, #12]
 8009dd4:	f043 0308 	orr.w	r3, r3, #8
 8009dd8:	81a3      	strh	r3, [r4, #12]
 8009dda:	6923      	ldr	r3, [r4, #16]
 8009ddc:	b94b      	cbnz	r3, 8009df2 <__swsetup_r+0x7a>
 8009dde:	89a3      	ldrh	r3, [r4, #12]
 8009de0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009de4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009de8:	d003      	beq.n	8009df2 <__swsetup_r+0x7a>
 8009dea:	4621      	mov	r1, r4
 8009dec:	4628      	mov	r0, r5
 8009dee:	f000 f883 	bl	8009ef8 <__smakebuf_r>
 8009df2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009df6:	f013 0201 	ands.w	r2, r3, #1
 8009dfa:	d00a      	beq.n	8009e12 <__swsetup_r+0x9a>
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	60a2      	str	r2, [r4, #8]
 8009e00:	6962      	ldr	r2, [r4, #20]
 8009e02:	4252      	negs	r2, r2
 8009e04:	61a2      	str	r2, [r4, #24]
 8009e06:	6922      	ldr	r2, [r4, #16]
 8009e08:	b942      	cbnz	r2, 8009e1c <__swsetup_r+0xa4>
 8009e0a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009e0e:	d1c5      	bne.n	8009d9c <__swsetup_r+0x24>
 8009e10:	bd38      	pop	{r3, r4, r5, pc}
 8009e12:	0799      	lsls	r1, r3, #30
 8009e14:	bf58      	it	pl
 8009e16:	6962      	ldrpl	r2, [r4, #20]
 8009e18:	60a2      	str	r2, [r4, #8]
 8009e1a:	e7f4      	b.n	8009e06 <__swsetup_r+0x8e>
 8009e1c:	2000      	movs	r0, #0
 8009e1e:	e7f7      	b.n	8009e10 <__swsetup_r+0x98>
 8009e20:	20000018 	.word	0x20000018

08009e24 <_raise_r>:
 8009e24:	291f      	cmp	r1, #31
 8009e26:	b538      	push	{r3, r4, r5, lr}
 8009e28:	4605      	mov	r5, r0
 8009e2a:	460c      	mov	r4, r1
 8009e2c:	d904      	bls.n	8009e38 <_raise_r+0x14>
 8009e2e:	2316      	movs	r3, #22
 8009e30:	6003      	str	r3, [r0, #0]
 8009e32:	f04f 30ff 	mov.w	r0, #4294967295
 8009e36:	bd38      	pop	{r3, r4, r5, pc}
 8009e38:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009e3a:	b112      	cbz	r2, 8009e42 <_raise_r+0x1e>
 8009e3c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009e40:	b94b      	cbnz	r3, 8009e56 <_raise_r+0x32>
 8009e42:	4628      	mov	r0, r5
 8009e44:	f000 f830 	bl	8009ea8 <_getpid_r>
 8009e48:	4622      	mov	r2, r4
 8009e4a:	4601      	mov	r1, r0
 8009e4c:	4628      	mov	r0, r5
 8009e4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e52:	f000 b817 	b.w	8009e84 <_kill_r>
 8009e56:	2b01      	cmp	r3, #1
 8009e58:	d00a      	beq.n	8009e70 <_raise_r+0x4c>
 8009e5a:	1c59      	adds	r1, r3, #1
 8009e5c:	d103      	bne.n	8009e66 <_raise_r+0x42>
 8009e5e:	2316      	movs	r3, #22
 8009e60:	6003      	str	r3, [r0, #0]
 8009e62:	2001      	movs	r0, #1
 8009e64:	e7e7      	b.n	8009e36 <_raise_r+0x12>
 8009e66:	2100      	movs	r1, #0
 8009e68:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009e6c:	4620      	mov	r0, r4
 8009e6e:	4798      	blx	r3
 8009e70:	2000      	movs	r0, #0
 8009e72:	e7e0      	b.n	8009e36 <_raise_r+0x12>

08009e74 <raise>:
 8009e74:	4b02      	ldr	r3, [pc, #8]	@ (8009e80 <raise+0xc>)
 8009e76:	4601      	mov	r1, r0
 8009e78:	6818      	ldr	r0, [r3, #0]
 8009e7a:	f7ff bfd3 	b.w	8009e24 <_raise_r>
 8009e7e:	bf00      	nop
 8009e80:	20000018 	.word	0x20000018

08009e84 <_kill_r>:
 8009e84:	b538      	push	{r3, r4, r5, lr}
 8009e86:	4d07      	ldr	r5, [pc, #28]	@ (8009ea4 <_kill_r+0x20>)
 8009e88:	2300      	movs	r3, #0
 8009e8a:	4604      	mov	r4, r0
 8009e8c:	4608      	mov	r0, r1
 8009e8e:	4611      	mov	r1, r2
 8009e90:	602b      	str	r3, [r5, #0]
 8009e92:	f7f9 fd0b 	bl	80038ac <_kill>
 8009e96:	1c43      	adds	r3, r0, #1
 8009e98:	d102      	bne.n	8009ea0 <_kill_r+0x1c>
 8009e9a:	682b      	ldr	r3, [r5, #0]
 8009e9c:	b103      	cbz	r3, 8009ea0 <_kill_r+0x1c>
 8009e9e:	6023      	str	r3, [r4, #0]
 8009ea0:	bd38      	pop	{r3, r4, r5, pc}
 8009ea2:	bf00      	nop
 8009ea4:	200071dc 	.word	0x200071dc

08009ea8 <_getpid_r>:
 8009ea8:	f7f9 bcf8 	b.w	800389c <_getpid>

08009eac <__swhatbuf_r>:
 8009eac:	b570      	push	{r4, r5, r6, lr}
 8009eae:	460c      	mov	r4, r1
 8009eb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009eb4:	2900      	cmp	r1, #0
 8009eb6:	b096      	sub	sp, #88	@ 0x58
 8009eb8:	4615      	mov	r5, r2
 8009eba:	461e      	mov	r6, r3
 8009ebc:	da0d      	bge.n	8009eda <__swhatbuf_r+0x2e>
 8009ebe:	89a3      	ldrh	r3, [r4, #12]
 8009ec0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009ec4:	f04f 0100 	mov.w	r1, #0
 8009ec8:	bf14      	ite	ne
 8009eca:	2340      	movne	r3, #64	@ 0x40
 8009ecc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009ed0:	2000      	movs	r0, #0
 8009ed2:	6031      	str	r1, [r6, #0]
 8009ed4:	602b      	str	r3, [r5, #0]
 8009ed6:	b016      	add	sp, #88	@ 0x58
 8009ed8:	bd70      	pop	{r4, r5, r6, pc}
 8009eda:	466a      	mov	r2, sp
 8009edc:	f000 f848 	bl	8009f70 <_fstat_r>
 8009ee0:	2800      	cmp	r0, #0
 8009ee2:	dbec      	blt.n	8009ebe <__swhatbuf_r+0x12>
 8009ee4:	9901      	ldr	r1, [sp, #4]
 8009ee6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009eea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009eee:	4259      	negs	r1, r3
 8009ef0:	4159      	adcs	r1, r3
 8009ef2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009ef6:	e7eb      	b.n	8009ed0 <__swhatbuf_r+0x24>

08009ef8 <__smakebuf_r>:
 8009ef8:	898b      	ldrh	r3, [r1, #12]
 8009efa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009efc:	079d      	lsls	r5, r3, #30
 8009efe:	4606      	mov	r6, r0
 8009f00:	460c      	mov	r4, r1
 8009f02:	d507      	bpl.n	8009f14 <__smakebuf_r+0x1c>
 8009f04:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009f08:	6023      	str	r3, [r4, #0]
 8009f0a:	6123      	str	r3, [r4, #16]
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	6163      	str	r3, [r4, #20]
 8009f10:	b003      	add	sp, #12
 8009f12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f14:	ab01      	add	r3, sp, #4
 8009f16:	466a      	mov	r2, sp
 8009f18:	f7ff ffc8 	bl	8009eac <__swhatbuf_r>
 8009f1c:	9f00      	ldr	r7, [sp, #0]
 8009f1e:	4605      	mov	r5, r0
 8009f20:	4639      	mov	r1, r7
 8009f22:	4630      	mov	r0, r6
 8009f24:	f7fe fed4 	bl	8008cd0 <_malloc_r>
 8009f28:	b948      	cbnz	r0, 8009f3e <__smakebuf_r+0x46>
 8009f2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f2e:	059a      	lsls	r2, r3, #22
 8009f30:	d4ee      	bmi.n	8009f10 <__smakebuf_r+0x18>
 8009f32:	f023 0303 	bic.w	r3, r3, #3
 8009f36:	f043 0302 	orr.w	r3, r3, #2
 8009f3a:	81a3      	strh	r3, [r4, #12]
 8009f3c:	e7e2      	b.n	8009f04 <__smakebuf_r+0xc>
 8009f3e:	89a3      	ldrh	r3, [r4, #12]
 8009f40:	6020      	str	r0, [r4, #0]
 8009f42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f46:	81a3      	strh	r3, [r4, #12]
 8009f48:	9b01      	ldr	r3, [sp, #4]
 8009f4a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009f4e:	b15b      	cbz	r3, 8009f68 <__smakebuf_r+0x70>
 8009f50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f54:	4630      	mov	r0, r6
 8009f56:	f000 f81d 	bl	8009f94 <_isatty_r>
 8009f5a:	b128      	cbz	r0, 8009f68 <__smakebuf_r+0x70>
 8009f5c:	89a3      	ldrh	r3, [r4, #12]
 8009f5e:	f023 0303 	bic.w	r3, r3, #3
 8009f62:	f043 0301 	orr.w	r3, r3, #1
 8009f66:	81a3      	strh	r3, [r4, #12]
 8009f68:	89a3      	ldrh	r3, [r4, #12]
 8009f6a:	431d      	orrs	r5, r3
 8009f6c:	81a5      	strh	r5, [r4, #12]
 8009f6e:	e7cf      	b.n	8009f10 <__smakebuf_r+0x18>

08009f70 <_fstat_r>:
 8009f70:	b538      	push	{r3, r4, r5, lr}
 8009f72:	4d07      	ldr	r5, [pc, #28]	@ (8009f90 <_fstat_r+0x20>)
 8009f74:	2300      	movs	r3, #0
 8009f76:	4604      	mov	r4, r0
 8009f78:	4608      	mov	r0, r1
 8009f7a:	4611      	mov	r1, r2
 8009f7c:	602b      	str	r3, [r5, #0]
 8009f7e:	f7f9 fcf5 	bl	800396c <_fstat>
 8009f82:	1c43      	adds	r3, r0, #1
 8009f84:	d102      	bne.n	8009f8c <_fstat_r+0x1c>
 8009f86:	682b      	ldr	r3, [r5, #0]
 8009f88:	b103      	cbz	r3, 8009f8c <_fstat_r+0x1c>
 8009f8a:	6023      	str	r3, [r4, #0]
 8009f8c:	bd38      	pop	{r3, r4, r5, pc}
 8009f8e:	bf00      	nop
 8009f90:	200071dc 	.word	0x200071dc

08009f94 <_isatty_r>:
 8009f94:	b538      	push	{r3, r4, r5, lr}
 8009f96:	4d06      	ldr	r5, [pc, #24]	@ (8009fb0 <_isatty_r+0x1c>)
 8009f98:	2300      	movs	r3, #0
 8009f9a:	4604      	mov	r4, r0
 8009f9c:	4608      	mov	r0, r1
 8009f9e:	602b      	str	r3, [r5, #0]
 8009fa0:	f7f9 fcf4 	bl	800398c <_isatty>
 8009fa4:	1c43      	adds	r3, r0, #1
 8009fa6:	d102      	bne.n	8009fae <_isatty_r+0x1a>
 8009fa8:	682b      	ldr	r3, [r5, #0]
 8009faa:	b103      	cbz	r3, 8009fae <_isatty_r+0x1a>
 8009fac:	6023      	str	r3, [r4, #0]
 8009fae:	bd38      	pop	{r3, r4, r5, pc}
 8009fb0:	200071dc 	.word	0x200071dc
 8009fb4:	00000000 	.word	0x00000000

08009fb8 <log>:
 8009fb8:	b538      	push	{r3, r4, r5, lr}
 8009fba:	ed2d 8b02 	vpush	{d8}
 8009fbe:	ec55 4b10 	vmov	r4, r5, d0
 8009fc2:	f000 f841 	bl	800a048 <__ieee754_log>
 8009fc6:	4622      	mov	r2, r4
 8009fc8:	462b      	mov	r3, r5
 8009fca:	4620      	mov	r0, r4
 8009fcc:	4629      	mov	r1, r5
 8009fce:	eeb0 8a40 	vmov.f32	s16, s0
 8009fd2:	eef0 8a60 	vmov.f32	s17, s1
 8009fd6:	f7f6 fdb1 	bl	8000b3c <__aeabi_dcmpun>
 8009fda:	b998      	cbnz	r0, 800a004 <log+0x4c>
 8009fdc:	2200      	movs	r2, #0
 8009fde:	2300      	movs	r3, #0
 8009fe0:	4620      	mov	r0, r4
 8009fe2:	4629      	mov	r1, r5
 8009fe4:	f7f6 fda0 	bl	8000b28 <__aeabi_dcmpgt>
 8009fe8:	b960      	cbnz	r0, 800a004 <log+0x4c>
 8009fea:	2200      	movs	r2, #0
 8009fec:	2300      	movs	r3, #0
 8009fee:	4620      	mov	r0, r4
 8009ff0:	4629      	mov	r1, r5
 8009ff2:	f7f6 fd71 	bl	8000ad8 <__aeabi_dcmpeq>
 8009ff6:	b160      	cbz	r0, 800a012 <log+0x5a>
 8009ff8:	f7fd ff62 	bl	8007ec0 <__errno>
 8009ffc:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 800a028 <log+0x70>
 800a000:	2322      	movs	r3, #34	@ 0x22
 800a002:	6003      	str	r3, [r0, #0]
 800a004:	eeb0 0a48 	vmov.f32	s0, s16
 800a008:	eef0 0a68 	vmov.f32	s1, s17
 800a00c:	ecbd 8b02 	vpop	{d8}
 800a010:	bd38      	pop	{r3, r4, r5, pc}
 800a012:	f7fd ff55 	bl	8007ec0 <__errno>
 800a016:	ecbd 8b02 	vpop	{d8}
 800a01a:	2321      	movs	r3, #33	@ 0x21
 800a01c:	6003      	str	r3, [r0, #0]
 800a01e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a022:	4803      	ldr	r0, [pc, #12]	@ (800a030 <log+0x78>)
 800a024:	f000 b808 	b.w	800a038 <nan>
 800a028:	00000000 	.word	0x00000000
 800a02c:	fff00000 	.word	0xfff00000
 800a030:	0800acac 	.word	0x0800acac
 800a034:	00000000 	.word	0x00000000

0800a038 <nan>:
 800a038:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a040 <nan+0x8>
 800a03c:	4770      	bx	lr
 800a03e:	bf00      	nop
 800a040:	00000000 	.word	0x00000000
 800a044:	7ff80000 	.word	0x7ff80000

0800a048 <__ieee754_log>:
 800a048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a04c:	ec51 0b10 	vmov	r0, r1, d0
 800a050:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800a054:	b087      	sub	sp, #28
 800a056:	460d      	mov	r5, r1
 800a058:	da26      	bge.n	800a0a8 <__ieee754_log+0x60>
 800a05a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a05e:	4303      	orrs	r3, r0
 800a060:	4602      	mov	r2, r0
 800a062:	d10a      	bne.n	800a07a <__ieee754_log+0x32>
 800a064:	49ce      	ldr	r1, [pc, #824]	@ (800a3a0 <__ieee754_log+0x358>)
 800a066:	2200      	movs	r2, #0
 800a068:	2300      	movs	r3, #0
 800a06a:	2000      	movs	r0, #0
 800a06c:	f7f6 fbf6 	bl	800085c <__aeabi_ddiv>
 800a070:	ec41 0b10 	vmov	d0, r0, r1
 800a074:	b007      	add	sp, #28
 800a076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a07a:	2900      	cmp	r1, #0
 800a07c:	da05      	bge.n	800a08a <__ieee754_log+0x42>
 800a07e:	460b      	mov	r3, r1
 800a080:	f7f6 f90a 	bl	8000298 <__aeabi_dsub>
 800a084:	2200      	movs	r2, #0
 800a086:	2300      	movs	r3, #0
 800a088:	e7f0      	b.n	800a06c <__ieee754_log+0x24>
 800a08a:	4bc6      	ldr	r3, [pc, #792]	@ (800a3a4 <__ieee754_log+0x35c>)
 800a08c:	2200      	movs	r2, #0
 800a08e:	f7f6 fabb 	bl	8000608 <__aeabi_dmul>
 800a092:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 800a096:	460d      	mov	r5, r1
 800a098:	4ac3      	ldr	r2, [pc, #780]	@ (800a3a8 <__ieee754_log+0x360>)
 800a09a:	4295      	cmp	r5, r2
 800a09c:	dd06      	ble.n	800a0ac <__ieee754_log+0x64>
 800a09e:	4602      	mov	r2, r0
 800a0a0:	460b      	mov	r3, r1
 800a0a2:	f7f6 f8fb 	bl	800029c <__adddf3>
 800a0a6:	e7e3      	b.n	800a070 <__ieee754_log+0x28>
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	e7f5      	b.n	800a098 <__ieee754_log+0x50>
 800a0ac:	152c      	asrs	r4, r5, #20
 800a0ae:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 800a0b2:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800a0b6:	441c      	add	r4, r3
 800a0b8:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 800a0bc:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 800a0c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a0c4:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 800a0c8:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 800a0cc:	ea42 0105 	orr.w	r1, r2, r5
 800a0d0:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	4bb5      	ldr	r3, [pc, #724]	@ (800a3ac <__ieee754_log+0x364>)
 800a0d8:	f7f6 f8de 	bl	8000298 <__aeabi_dsub>
 800a0dc:	1cab      	adds	r3, r5, #2
 800a0de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a0e2:	2b02      	cmp	r3, #2
 800a0e4:	4682      	mov	sl, r0
 800a0e6:	468b      	mov	fp, r1
 800a0e8:	f04f 0200 	mov.w	r2, #0
 800a0ec:	dc53      	bgt.n	800a196 <__ieee754_log+0x14e>
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	f7f6 fcf2 	bl	8000ad8 <__aeabi_dcmpeq>
 800a0f4:	b1d0      	cbz	r0, 800a12c <__ieee754_log+0xe4>
 800a0f6:	2c00      	cmp	r4, #0
 800a0f8:	f000 8120 	beq.w	800a33c <__ieee754_log+0x2f4>
 800a0fc:	4620      	mov	r0, r4
 800a0fe:	f7f6 fa19 	bl	8000534 <__aeabi_i2d>
 800a102:	a391      	add	r3, pc, #580	@ (adr r3, 800a348 <__ieee754_log+0x300>)
 800a104:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a108:	4606      	mov	r6, r0
 800a10a:	460f      	mov	r7, r1
 800a10c:	f7f6 fa7c 	bl	8000608 <__aeabi_dmul>
 800a110:	a38f      	add	r3, pc, #572	@ (adr r3, 800a350 <__ieee754_log+0x308>)
 800a112:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a116:	4604      	mov	r4, r0
 800a118:	460d      	mov	r5, r1
 800a11a:	4630      	mov	r0, r6
 800a11c:	4639      	mov	r1, r7
 800a11e:	f7f6 fa73 	bl	8000608 <__aeabi_dmul>
 800a122:	4602      	mov	r2, r0
 800a124:	460b      	mov	r3, r1
 800a126:	4620      	mov	r0, r4
 800a128:	4629      	mov	r1, r5
 800a12a:	e7ba      	b.n	800a0a2 <__ieee754_log+0x5a>
 800a12c:	a38a      	add	r3, pc, #552	@ (adr r3, 800a358 <__ieee754_log+0x310>)
 800a12e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a132:	4650      	mov	r0, sl
 800a134:	4659      	mov	r1, fp
 800a136:	f7f6 fa67 	bl	8000608 <__aeabi_dmul>
 800a13a:	4602      	mov	r2, r0
 800a13c:	460b      	mov	r3, r1
 800a13e:	2000      	movs	r0, #0
 800a140:	499b      	ldr	r1, [pc, #620]	@ (800a3b0 <__ieee754_log+0x368>)
 800a142:	f7f6 f8a9 	bl	8000298 <__aeabi_dsub>
 800a146:	4652      	mov	r2, sl
 800a148:	4606      	mov	r6, r0
 800a14a:	460f      	mov	r7, r1
 800a14c:	465b      	mov	r3, fp
 800a14e:	4650      	mov	r0, sl
 800a150:	4659      	mov	r1, fp
 800a152:	f7f6 fa59 	bl	8000608 <__aeabi_dmul>
 800a156:	4602      	mov	r2, r0
 800a158:	460b      	mov	r3, r1
 800a15a:	4630      	mov	r0, r6
 800a15c:	4639      	mov	r1, r7
 800a15e:	f7f6 fa53 	bl	8000608 <__aeabi_dmul>
 800a162:	4606      	mov	r6, r0
 800a164:	460f      	mov	r7, r1
 800a166:	b914      	cbnz	r4, 800a16e <__ieee754_log+0x126>
 800a168:	4632      	mov	r2, r6
 800a16a:	463b      	mov	r3, r7
 800a16c:	e0a0      	b.n	800a2b0 <__ieee754_log+0x268>
 800a16e:	4620      	mov	r0, r4
 800a170:	f7f6 f9e0 	bl	8000534 <__aeabi_i2d>
 800a174:	a374      	add	r3, pc, #464	@ (adr r3, 800a348 <__ieee754_log+0x300>)
 800a176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a17a:	4680      	mov	r8, r0
 800a17c:	4689      	mov	r9, r1
 800a17e:	f7f6 fa43 	bl	8000608 <__aeabi_dmul>
 800a182:	a373      	add	r3, pc, #460	@ (adr r3, 800a350 <__ieee754_log+0x308>)
 800a184:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a188:	4604      	mov	r4, r0
 800a18a:	460d      	mov	r5, r1
 800a18c:	4640      	mov	r0, r8
 800a18e:	4649      	mov	r1, r9
 800a190:	f7f6 fa3a 	bl	8000608 <__aeabi_dmul>
 800a194:	e0a5      	b.n	800a2e2 <__ieee754_log+0x29a>
 800a196:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a19a:	f7f6 f87f 	bl	800029c <__adddf3>
 800a19e:	4602      	mov	r2, r0
 800a1a0:	460b      	mov	r3, r1
 800a1a2:	4650      	mov	r0, sl
 800a1a4:	4659      	mov	r1, fp
 800a1a6:	f7f6 fb59 	bl	800085c <__aeabi_ddiv>
 800a1aa:	e9cd 0100 	strd	r0, r1, [sp]
 800a1ae:	4620      	mov	r0, r4
 800a1b0:	f7f6 f9c0 	bl	8000534 <__aeabi_i2d>
 800a1b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a1b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a1bc:	4610      	mov	r0, r2
 800a1be:	4619      	mov	r1, r3
 800a1c0:	f7f6 fa22 	bl	8000608 <__aeabi_dmul>
 800a1c4:	4602      	mov	r2, r0
 800a1c6:	460b      	mov	r3, r1
 800a1c8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a1cc:	f7f6 fa1c 	bl	8000608 <__aeabi_dmul>
 800a1d0:	a363      	add	r3, pc, #396	@ (adr r3, 800a360 <__ieee754_log+0x318>)
 800a1d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1d6:	4680      	mov	r8, r0
 800a1d8:	4689      	mov	r9, r1
 800a1da:	f7f6 fa15 	bl	8000608 <__aeabi_dmul>
 800a1de:	a362      	add	r3, pc, #392	@ (adr r3, 800a368 <__ieee754_log+0x320>)
 800a1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1e4:	f7f6 f85a 	bl	800029c <__adddf3>
 800a1e8:	4642      	mov	r2, r8
 800a1ea:	464b      	mov	r3, r9
 800a1ec:	f7f6 fa0c 	bl	8000608 <__aeabi_dmul>
 800a1f0:	a35f      	add	r3, pc, #380	@ (adr r3, 800a370 <__ieee754_log+0x328>)
 800a1f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1f6:	f7f6 f851 	bl	800029c <__adddf3>
 800a1fa:	4642      	mov	r2, r8
 800a1fc:	464b      	mov	r3, r9
 800a1fe:	f7f6 fa03 	bl	8000608 <__aeabi_dmul>
 800a202:	a35d      	add	r3, pc, #372	@ (adr r3, 800a378 <__ieee754_log+0x330>)
 800a204:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a208:	f7f6 f848 	bl	800029c <__adddf3>
 800a20c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a210:	f7f6 f9fa 	bl	8000608 <__aeabi_dmul>
 800a214:	a35a      	add	r3, pc, #360	@ (adr r3, 800a380 <__ieee754_log+0x338>)
 800a216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a21a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a21e:	4640      	mov	r0, r8
 800a220:	4649      	mov	r1, r9
 800a222:	f7f6 f9f1 	bl	8000608 <__aeabi_dmul>
 800a226:	a358      	add	r3, pc, #352	@ (adr r3, 800a388 <__ieee754_log+0x340>)
 800a228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a22c:	f7f6 f836 	bl	800029c <__adddf3>
 800a230:	4642      	mov	r2, r8
 800a232:	464b      	mov	r3, r9
 800a234:	f7f6 f9e8 	bl	8000608 <__aeabi_dmul>
 800a238:	a355      	add	r3, pc, #340	@ (adr r3, 800a390 <__ieee754_log+0x348>)
 800a23a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a23e:	f7f6 f82d 	bl	800029c <__adddf3>
 800a242:	4642      	mov	r2, r8
 800a244:	464b      	mov	r3, r9
 800a246:	f7f6 f9df 	bl	8000608 <__aeabi_dmul>
 800a24a:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 800a24e:	4602      	mov	r2, r0
 800a250:	460b      	mov	r3, r1
 800a252:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 800a256:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a25a:	f7f6 f81f 	bl	800029c <__adddf3>
 800a25e:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 800a262:	3551      	adds	r5, #81	@ 0x51
 800a264:	4335      	orrs	r5, r6
 800a266:	2d00      	cmp	r5, #0
 800a268:	4680      	mov	r8, r0
 800a26a:	4689      	mov	r9, r1
 800a26c:	dd48      	ble.n	800a300 <__ieee754_log+0x2b8>
 800a26e:	4b50      	ldr	r3, [pc, #320]	@ (800a3b0 <__ieee754_log+0x368>)
 800a270:	2200      	movs	r2, #0
 800a272:	4650      	mov	r0, sl
 800a274:	4659      	mov	r1, fp
 800a276:	f7f6 f9c7 	bl	8000608 <__aeabi_dmul>
 800a27a:	4652      	mov	r2, sl
 800a27c:	465b      	mov	r3, fp
 800a27e:	f7f6 f9c3 	bl	8000608 <__aeabi_dmul>
 800a282:	4602      	mov	r2, r0
 800a284:	460b      	mov	r3, r1
 800a286:	4606      	mov	r6, r0
 800a288:	460f      	mov	r7, r1
 800a28a:	4640      	mov	r0, r8
 800a28c:	4649      	mov	r1, r9
 800a28e:	f7f6 f805 	bl	800029c <__adddf3>
 800a292:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a296:	f7f6 f9b7 	bl	8000608 <__aeabi_dmul>
 800a29a:	4680      	mov	r8, r0
 800a29c:	4689      	mov	r9, r1
 800a29e:	b964      	cbnz	r4, 800a2ba <__ieee754_log+0x272>
 800a2a0:	4602      	mov	r2, r0
 800a2a2:	460b      	mov	r3, r1
 800a2a4:	4630      	mov	r0, r6
 800a2a6:	4639      	mov	r1, r7
 800a2a8:	f7f5 fff6 	bl	8000298 <__aeabi_dsub>
 800a2ac:	4602      	mov	r2, r0
 800a2ae:	460b      	mov	r3, r1
 800a2b0:	4650      	mov	r0, sl
 800a2b2:	4659      	mov	r1, fp
 800a2b4:	f7f5 fff0 	bl	8000298 <__aeabi_dsub>
 800a2b8:	e6da      	b.n	800a070 <__ieee754_log+0x28>
 800a2ba:	a323      	add	r3, pc, #140	@ (adr r3, 800a348 <__ieee754_log+0x300>)
 800a2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2c4:	f7f6 f9a0 	bl	8000608 <__aeabi_dmul>
 800a2c8:	a321      	add	r3, pc, #132	@ (adr r3, 800a350 <__ieee754_log+0x308>)
 800a2ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ce:	4604      	mov	r4, r0
 800a2d0:	460d      	mov	r5, r1
 800a2d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2d6:	f7f6 f997 	bl	8000608 <__aeabi_dmul>
 800a2da:	4642      	mov	r2, r8
 800a2dc:	464b      	mov	r3, r9
 800a2de:	f7f5 ffdd 	bl	800029c <__adddf3>
 800a2e2:	4602      	mov	r2, r0
 800a2e4:	460b      	mov	r3, r1
 800a2e6:	4630      	mov	r0, r6
 800a2e8:	4639      	mov	r1, r7
 800a2ea:	f7f5 ffd5 	bl	8000298 <__aeabi_dsub>
 800a2ee:	4652      	mov	r2, sl
 800a2f0:	465b      	mov	r3, fp
 800a2f2:	f7f5 ffd1 	bl	8000298 <__aeabi_dsub>
 800a2f6:	4602      	mov	r2, r0
 800a2f8:	460b      	mov	r3, r1
 800a2fa:	4620      	mov	r0, r4
 800a2fc:	4629      	mov	r1, r5
 800a2fe:	e7d9      	b.n	800a2b4 <__ieee754_log+0x26c>
 800a300:	4602      	mov	r2, r0
 800a302:	460b      	mov	r3, r1
 800a304:	4650      	mov	r0, sl
 800a306:	4659      	mov	r1, fp
 800a308:	f7f5 ffc6 	bl	8000298 <__aeabi_dsub>
 800a30c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a310:	f7f6 f97a 	bl	8000608 <__aeabi_dmul>
 800a314:	4606      	mov	r6, r0
 800a316:	460f      	mov	r7, r1
 800a318:	2c00      	cmp	r4, #0
 800a31a:	f43f af25 	beq.w	800a168 <__ieee754_log+0x120>
 800a31e:	a30a      	add	r3, pc, #40	@ (adr r3, 800a348 <__ieee754_log+0x300>)
 800a320:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a324:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a328:	f7f6 f96e 	bl	8000608 <__aeabi_dmul>
 800a32c:	a308      	add	r3, pc, #32	@ (adr r3, 800a350 <__ieee754_log+0x308>)
 800a32e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a332:	4604      	mov	r4, r0
 800a334:	460d      	mov	r5, r1
 800a336:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a33a:	e729      	b.n	800a190 <__ieee754_log+0x148>
 800a33c:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 800a398 <__ieee754_log+0x350>
 800a340:	e698      	b.n	800a074 <__ieee754_log+0x2c>
 800a342:	bf00      	nop
 800a344:	f3af 8000 	nop.w
 800a348:	fee00000 	.word	0xfee00000
 800a34c:	3fe62e42 	.word	0x3fe62e42
 800a350:	35793c76 	.word	0x35793c76
 800a354:	3dea39ef 	.word	0x3dea39ef
 800a358:	55555555 	.word	0x55555555
 800a35c:	3fd55555 	.word	0x3fd55555
 800a360:	df3e5244 	.word	0xdf3e5244
 800a364:	3fc2f112 	.word	0x3fc2f112
 800a368:	96cb03de 	.word	0x96cb03de
 800a36c:	3fc74664 	.word	0x3fc74664
 800a370:	94229359 	.word	0x94229359
 800a374:	3fd24924 	.word	0x3fd24924
 800a378:	55555593 	.word	0x55555593
 800a37c:	3fe55555 	.word	0x3fe55555
 800a380:	d078c69f 	.word	0xd078c69f
 800a384:	3fc39a09 	.word	0x3fc39a09
 800a388:	1d8e78af 	.word	0x1d8e78af
 800a38c:	3fcc71c5 	.word	0x3fcc71c5
 800a390:	9997fa04 	.word	0x9997fa04
 800a394:	3fd99999 	.word	0x3fd99999
	...
 800a3a0:	c3500000 	.word	0xc3500000
 800a3a4:	43500000 	.word	0x43500000
 800a3a8:	7fefffff 	.word	0x7fefffff
 800a3ac:	3ff00000 	.word	0x3ff00000
 800a3b0:	3fe00000 	.word	0x3fe00000

0800a3b4 <_init>:
 800a3b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3b6:	bf00      	nop
 800a3b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3ba:	bc08      	pop	{r3}
 800a3bc:	469e      	mov	lr, r3
 800a3be:	4770      	bx	lr

0800a3c0 <_fini>:
 800a3c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3c2:	bf00      	nop
 800a3c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3c6:	bc08      	pop	{r3}
 800a3c8:	469e      	mov	lr, r3
 800a3ca:	4770      	bx	lr
