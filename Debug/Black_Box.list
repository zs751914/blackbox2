
Black_Box.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009dac  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ae4  08009f50  08009f50  0000af50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa34  0800aa34  0000c1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800aa34  0800aa34  0000ba34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aa3c  0800aa3c  0000c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa3c  0800aa3c  0000ba3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800aa40  0800aa40  0000ba40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800aa44  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004908  200001d4  0800ac18  0000c1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004adc  0800ac18  0000cadc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000165a7  00000000  00000000  0000c204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003321  00000000  00000000  000227ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013b8  00000000  00000000  00025ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fc6  00000000  00000000  00026e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a2eb  00000000  00000000  00027e4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019f66  00000000  00000000  00042139  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009fcb2  00000000  00000000  0005c09f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fbd51  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006508  00000000  00000000  000fbd94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  0010229c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009f34 	.word	0x08009f34

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	08009f34 	.word	0x08009f34

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b988 	b.w	8000f80 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	468e      	mov	lr, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	4688      	mov	r8, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d962      	bls.n	8000d64 <__udivmoddi4+0xdc>
 8000c9e:	fab2 f682 	clz	r6, r2
 8000ca2:	b14e      	cbz	r6, 8000cb8 <__udivmoddi4+0x30>
 8000ca4:	f1c6 0320 	rsb	r3, r6, #32
 8000ca8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cac:	fa20 f303 	lsr.w	r3, r0, r3
 8000cb0:	40b7      	lsls	r7, r6
 8000cb2:	ea43 0808 	orr.w	r8, r3, r8
 8000cb6:	40b4      	lsls	r4, r6
 8000cb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cbc:	fa1f fc87 	uxth.w	ip, r7
 8000cc0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cc4:	0c23      	lsrs	r3, r4, #16
 8000cc6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cce:	fb01 f20c 	mul.w	r2, r1, ip
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd6:	18fb      	adds	r3, r7, r3
 8000cd8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cdc:	f080 80ea 	bcs.w	8000eb4 <__udivmoddi4+0x22c>
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	f240 80e7 	bls.w	8000eb4 <__udivmoddi4+0x22c>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	443b      	add	r3, r7
 8000cea:	1a9a      	subs	r2, r3, r2
 8000cec:	b2a3      	uxth	r3, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cfa:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cfe:	459c      	cmp	ip, r3
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x8e>
 8000d02:	18fb      	adds	r3, r7, r3
 8000d04:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d08:	f080 80d6 	bcs.w	8000eb8 <__udivmoddi4+0x230>
 8000d0c:	459c      	cmp	ip, r3
 8000d0e:	f240 80d3 	bls.w	8000eb8 <__udivmoddi4+0x230>
 8000d12:	443b      	add	r3, r7
 8000d14:	3802      	subs	r0, #2
 8000d16:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1a:	eba3 030c 	sub.w	r3, r3, ip
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11d      	cbz	r5, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40f3      	lsrs	r3, r6
 8000d24:	2200      	movs	r2, #0
 8000d26:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d905      	bls.n	8000d3e <__udivmoddi4+0xb6>
 8000d32:	b10d      	cbz	r5, 8000d38 <__udivmoddi4+0xb0>
 8000d34:	e9c5 0100 	strd	r0, r1, [r5]
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4608      	mov	r0, r1
 8000d3c:	e7f5      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d3e:	fab3 f183 	clz	r1, r3
 8000d42:	2900      	cmp	r1, #0
 8000d44:	d146      	bne.n	8000dd4 <__udivmoddi4+0x14c>
 8000d46:	4573      	cmp	r3, lr
 8000d48:	d302      	bcc.n	8000d50 <__udivmoddi4+0xc8>
 8000d4a:	4282      	cmp	r2, r0
 8000d4c:	f200 8105 	bhi.w	8000f5a <__udivmoddi4+0x2d2>
 8000d50:	1a84      	subs	r4, r0, r2
 8000d52:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d56:	2001      	movs	r0, #1
 8000d58:	4690      	mov	r8, r2
 8000d5a:	2d00      	cmp	r5, #0
 8000d5c:	d0e5      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d5e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d62:	e7e2      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f000 8090 	beq.w	8000e8a <__udivmoddi4+0x202>
 8000d6a:	fab2 f682 	clz	r6, r2
 8000d6e:	2e00      	cmp	r6, #0
 8000d70:	f040 80a4 	bne.w	8000ebc <__udivmoddi4+0x234>
 8000d74:	1a8a      	subs	r2, r1, r2
 8000d76:	0c03      	lsrs	r3, r0, #16
 8000d78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7c:	b280      	uxth	r0, r0
 8000d7e:	b2bc      	uxth	r4, r7
 8000d80:	2101      	movs	r1, #1
 8000d82:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d86:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d8e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d92:	429a      	cmp	r2, r3
 8000d94:	d907      	bls.n	8000da6 <__udivmoddi4+0x11e>
 8000d96:	18fb      	adds	r3, r7, r3
 8000d98:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d9c:	d202      	bcs.n	8000da4 <__udivmoddi4+0x11c>
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	f200 80e0 	bhi.w	8000f64 <__udivmoddi4+0x2dc>
 8000da4:	46c4      	mov	ip, r8
 8000da6:	1a9b      	subs	r3, r3, r2
 8000da8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dac:	fb0e 3312 	mls	r3, lr, r2, r3
 8000db0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000db4:	fb02 f404 	mul.w	r4, r2, r4
 8000db8:	429c      	cmp	r4, r3
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x144>
 8000dbc:	18fb      	adds	r3, r7, r3
 8000dbe:	f102 30ff 	add.w	r0, r2, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x142>
 8000dc4:	429c      	cmp	r4, r3
 8000dc6:	f200 80ca 	bhi.w	8000f5e <__udivmoddi4+0x2d6>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	1b1b      	subs	r3, r3, r4
 8000dce:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dd2:	e7a5      	b.n	8000d20 <__udivmoddi4+0x98>
 8000dd4:	f1c1 0620 	rsb	r6, r1, #32
 8000dd8:	408b      	lsls	r3, r1
 8000dda:	fa22 f706 	lsr.w	r7, r2, r6
 8000dde:	431f      	orrs	r7, r3
 8000de0:	fa0e f401 	lsl.w	r4, lr, r1
 8000de4:	fa20 f306 	lsr.w	r3, r0, r6
 8000de8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000dec:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000df0:	4323      	orrs	r3, r4
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	fa1f fc87 	uxth.w	ip, r7
 8000dfa:	fbbe f0f9 	udiv	r0, lr, r9
 8000dfe:	0c1c      	lsrs	r4, r3, #16
 8000e00:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e04:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e08:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e0c:	45a6      	cmp	lr, r4
 8000e0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e12:	d909      	bls.n	8000e28 <__udivmoddi4+0x1a0>
 8000e14:	193c      	adds	r4, r7, r4
 8000e16:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e1a:	f080 809c 	bcs.w	8000f56 <__udivmoddi4+0x2ce>
 8000e1e:	45a6      	cmp	lr, r4
 8000e20:	f240 8099 	bls.w	8000f56 <__udivmoddi4+0x2ce>
 8000e24:	3802      	subs	r0, #2
 8000e26:	443c      	add	r4, r7
 8000e28:	eba4 040e 	sub.w	r4, r4, lr
 8000e2c:	fa1f fe83 	uxth.w	lr, r3
 8000e30:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e34:	fb09 4413 	mls	r4, r9, r3, r4
 8000e38:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e3c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e40:	45a4      	cmp	ip, r4
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x1ce>
 8000e44:	193c      	adds	r4, r7, r4
 8000e46:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e4a:	f080 8082 	bcs.w	8000f52 <__udivmoddi4+0x2ca>
 8000e4e:	45a4      	cmp	ip, r4
 8000e50:	d97f      	bls.n	8000f52 <__udivmoddi4+0x2ca>
 8000e52:	3b02      	subs	r3, #2
 8000e54:	443c      	add	r4, r7
 8000e56:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e5a:	eba4 040c 	sub.w	r4, r4, ip
 8000e5e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e62:	4564      	cmp	r4, ip
 8000e64:	4673      	mov	r3, lr
 8000e66:	46e1      	mov	r9, ip
 8000e68:	d362      	bcc.n	8000f30 <__udivmoddi4+0x2a8>
 8000e6a:	d05f      	beq.n	8000f2c <__udivmoddi4+0x2a4>
 8000e6c:	b15d      	cbz	r5, 8000e86 <__udivmoddi4+0x1fe>
 8000e6e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e72:	eb64 0409 	sbc.w	r4, r4, r9
 8000e76:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e7e:	431e      	orrs	r6, r3
 8000e80:	40cc      	lsrs	r4, r1
 8000e82:	e9c5 6400 	strd	r6, r4, [r5]
 8000e86:	2100      	movs	r1, #0
 8000e88:	e74f      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000e8a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e8e:	0c01      	lsrs	r1, r0, #16
 8000e90:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e94:	b280      	uxth	r0, r0
 8000e96:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e9a:	463b      	mov	r3, r7
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	463c      	mov	r4, r7
 8000ea0:	46b8      	mov	r8, r7
 8000ea2:	46be      	mov	lr, r7
 8000ea4:	2620      	movs	r6, #32
 8000ea6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eaa:	eba2 0208 	sub.w	r2, r2, r8
 8000eae:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000eb2:	e766      	b.n	8000d82 <__udivmoddi4+0xfa>
 8000eb4:	4601      	mov	r1, r0
 8000eb6:	e718      	b.n	8000cea <__udivmoddi4+0x62>
 8000eb8:	4610      	mov	r0, r2
 8000eba:	e72c      	b.n	8000d16 <__udivmoddi4+0x8e>
 8000ebc:	f1c6 0220 	rsb	r2, r6, #32
 8000ec0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ec4:	40b7      	lsls	r7, r6
 8000ec6:	40b1      	lsls	r1, r6
 8000ec8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ecc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ed0:	430a      	orrs	r2, r1
 8000ed2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ed6:	b2bc      	uxth	r4, r7
 8000ed8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000edc:	0c11      	lsrs	r1, r2, #16
 8000ede:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee2:	fb08 f904 	mul.w	r9, r8, r4
 8000ee6:	40b0      	lsls	r0, r6
 8000ee8:	4589      	cmp	r9, r1
 8000eea:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000eee:	b280      	uxth	r0, r0
 8000ef0:	d93e      	bls.n	8000f70 <__udivmoddi4+0x2e8>
 8000ef2:	1879      	adds	r1, r7, r1
 8000ef4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ef8:	d201      	bcs.n	8000efe <__udivmoddi4+0x276>
 8000efa:	4589      	cmp	r9, r1
 8000efc:	d81f      	bhi.n	8000f3e <__udivmoddi4+0x2b6>
 8000efe:	eba1 0109 	sub.w	r1, r1, r9
 8000f02:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f06:	fb09 f804 	mul.w	r8, r9, r4
 8000f0a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f0e:	b292      	uxth	r2, r2
 8000f10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f14:	4542      	cmp	r2, r8
 8000f16:	d229      	bcs.n	8000f6c <__udivmoddi4+0x2e4>
 8000f18:	18ba      	adds	r2, r7, r2
 8000f1a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f1e:	d2c4      	bcs.n	8000eaa <__udivmoddi4+0x222>
 8000f20:	4542      	cmp	r2, r8
 8000f22:	d2c2      	bcs.n	8000eaa <__udivmoddi4+0x222>
 8000f24:	f1a9 0102 	sub.w	r1, r9, #2
 8000f28:	443a      	add	r2, r7
 8000f2a:	e7be      	b.n	8000eaa <__udivmoddi4+0x222>
 8000f2c:	45f0      	cmp	r8, lr
 8000f2e:	d29d      	bcs.n	8000e6c <__udivmoddi4+0x1e4>
 8000f30:	ebbe 0302 	subs.w	r3, lr, r2
 8000f34:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f38:	3801      	subs	r0, #1
 8000f3a:	46e1      	mov	r9, ip
 8000f3c:	e796      	b.n	8000e6c <__udivmoddi4+0x1e4>
 8000f3e:	eba7 0909 	sub.w	r9, r7, r9
 8000f42:	4449      	add	r1, r9
 8000f44:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f48:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f4c:	fb09 f804 	mul.w	r8, r9, r4
 8000f50:	e7db      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f52:	4673      	mov	r3, lr
 8000f54:	e77f      	b.n	8000e56 <__udivmoddi4+0x1ce>
 8000f56:	4650      	mov	r0, sl
 8000f58:	e766      	b.n	8000e28 <__udivmoddi4+0x1a0>
 8000f5a:	4608      	mov	r0, r1
 8000f5c:	e6fd      	b.n	8000d5a <__udivmoddi4+0xd2>
 8000f5e:	443b      	add	r3, r7
 8000f60:	3a02      	subs	r2, #2
 8000f62:	e733      	b.n	8000dcc <__udivmoddi4+0x144>
 8000f64:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f68:	443b      	add	r3, r7
 8000f6a:	e71c      	b.n	8000da6 <__udivmoddi4+0x11e>
 8000f6c:	4649      	mov	r1, r9
 8000f6e:	e79c      	b.n	8000eaa <__udivmoddi4+0x222>
 8000f70:	eba1 0109 	sub.w	r1, r1, r9
 8000f74:	46c4      	mov	ip, r8
 8000f76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f7a:	fb09 f804 	mul.w	r8, r9, r4
 8000f7e:	e7c4      	b.n	8000f0a <__udivmoddi4+0x282>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f8a:	463b      	mov	r3, r7
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f96:	4b22      	ldr	r3, [pc, #136]	@ (8001020 <MX_ADC1_Init+0x9c>)
 8000f98:	4a22      	ldr	r2, [pc, #136]	@ (8001024 <MX_ADC1_Init+0xa0>)
 8000f9a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f9c:	4b20      	ldr	r3, [pc, #128]	@ (8001020 <MX_ADC1_Init+0x9c>)
 8000f9e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000fa2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fa4:	4b1e      	ldr	r3, [pc, #120]	@ (8001020 <MX_ADC1_Init+0x9c>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000faa:	4b1d      	ldr	r3, [pc, #116]	@ (8001020 <MX_ADC1_Init+0x9c>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fb0:	4b1b      	ldr	r3, [pc, #108]	@ (8001020 <MX_ADC1_Init+0x9c>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fb6:	4b1a      	ldr	r3, [pc, #104]	@ (8001020 <MX_ADC1_Init+0x9c>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000fbe:	4b18      	ldr	r3, [pc, #96]	@ (8001020 <MX_ADC1_Init+0x9c>)
 8000fc0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000fc4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000fc6:	4b16      	ldr	r3, [pc, #88]	@ (8001020 <MX_ADC1_Init+0x9c>)
 8000fc8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000fcc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fce:	4b14      	ldr	r3, [pc, #80]	@ (8001020 <MX_ADC1_Init+0x9c>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000fd4:	4b12      	ldr	r3, [pc, #72]	@ (8001020 <MX_ADC1_Init+0x9c>)
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000fda:	4b11      	ldr	r3, [pc, #68]	@ (8001020 <MX_ADC1_Init+0x9c>)
 8000fdc:	2201      	movs	r2, #1
 8000fde:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fe2:	4b0f      	ldr	r3, [pc, #60]	@ (8001020 <MX_ADC1_Init+0x9c>)
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fe8:	480d      	ldr	r0, [pc, #52]	@ (8001020 <MX_ADC1_Init+0x9c>)
 8000fea:	f002 fc8f 	bl	800390c <HAL_ADC_Init>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000ff4:	f001 fe50 	bl	8002c98 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001000:	2300      	movs	r3, #0
 8001002:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001004:	463b      	mov	r3, r7
 8001006:	4619      	mov	r1, r3
 8001008:	4805      	ldr	r0, [pc, #20]	@ (8001020 <MX_ADC1_Init+0x9c>)
 800100a:	f002 ff35 	bl	8003e78 <HAL_ADC_ConfigChannel>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001014:	f001 fe40 	bl	8002c98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001018:	bf00      	nop
 800101a:	3710      	adds	r7, #16
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	200001f0 	.word	0x200001f0
 8001024:	40012000 	.word	0x40012000

08001028 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b08a      	sub	sp, #40	@ 0x28
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001030:	f107 0314 	add.w	r3, r7, #20
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a32      	ldr	r2, [pc, #200]	@ (8001110 <HAL_ADC_MspInit+0xe8>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d15e      	bne.n	8001108 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	613b      	str	r3, [r7, #16]
 800104e:	4b31      	ldr	r3, [pc, #196]	@ (8001114 <HAL_ADC_MspInit+0xec>)
 8001050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001052:	4a30      	ldr	r2, [pc, #192]	@ (8001114 <HAL_ADC_MspInit+0xec>)
 8001054:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001058:	6453      	str	r3, [r2, #68]	@ 0x44
 800105a:	4b2e      	ldr	r3, [pc, #184]	@ (8001114 <HAL_ADC_MspInit+0xec>)
 800105c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800105e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001062:	613b      	str	r3, [r7, #16]
 8001064:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	60fb      	str	r3, [r7, #12]
 800106a:	4b2a      	ldr	r3, [pc, #168]	@ (8001114 <HAL_ADC_MspInit+0xec>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106e:	4a29      	ldr	r2, [pc, #164]	@ (8001114 <HAL_ADC_MspInit+0xec>)
 8001070:	f043 0301 	orr.w	r3, r3, #1
 8001074:	6313      	str	r3, [r2, #48]	@ 0x30
 8001076:	4b27      	ldr	r3, [pc, #156]	@ (8001114 <HAL_ADC_MspInit+0xec>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_6;
 8001082:	2362      	movs	r3, #98	@ 0x62
 8001084:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001086:	2303      	movs	r3, #3
 8001088:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	2300      	movs	r3, #0
 800108c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108e:	f107 0314 	add.w	r3, r7, #20
 8001092:	4619      	mov	r1, r3
 8001094:	4820      	ldr	r0, [pc, #128]	@ (8001118 <HAL_ADC_MspInit+0xf0>)
 8001096:	f003 fe9b 	bl	8004dd0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800109a:	4b20      	ldr	r3, [pc, #128]	@ (800111c <HAL_ADC_MspInit+0xf4>)
 800109c:	4a20      	ldr	r2, [pc, #128]	@ (8001120 <HAL_ADC_MspInit+0xf8>)
 800109e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80010a0:	4b1e      	ldr	r3, [pc, #120]	@ (800111c <HAL_ADC_MspInit+0xf4>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010a6:	4b1d      	ldr	r3, [pc, #116]	@ (800111c <HAL_ADC_MspInit+0xf4>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80010ac:	4b1b      	ldr	r3, [pc, #108]	@ (800111c <HAL_ADC_MspInit+0xf4>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80010b2:	4b1a      	ldr	r3, [pc, #104]	@ (800111c <HAL_ADC_MspInit+0xf4>)
 80010b4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010b8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010ba:	4b18      	ldr	r3, [pc, #96]	@ (800111c <HAL_ADC_MspInit+0xf4>)
 80010bc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80010c0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010c2:	4b16      	ldr	r3, [pc, #88]	@ (800111c <HAL_ADC_MspInit+0xf4>)
 80010c4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010c8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80010ca:	4b14      	ldr	r3, [pc, #80]	@ (800111c <HAL_ADC_MspInit+0xf4>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80010d0:	4b12      	ldr	r3, [pc, #72]	@ (800111c <HAL_ADC_MspInit+0xf4>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010d6:	4b11      	ldr	r3, [pc, #68]	@ (800111c <HAL_ADC_MspInit+0xf4>)
 80010d8:	2200      	movs	r2, #0
 80010da:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80010dc:	480f      	ldr	r0, [pc, #60]	@ (800111c <HAL_ADC_MspInit+0xf4>)
 80010de:	f003 fa97 	bl	8004610 <HAL_DMA_Init>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 80010e8:	f001 fdd6 	bl	8002c98 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	4a0b      	ldr	r2, [pc, #44]	@ (800111c <HAL_ADC_MspInit+0xf4>)
 80010f0:	639a      	str	r2, [r3, #56]	@ 0x38
 80010f2:	4a0a      	ldr	r2, [pc, #40]	@ (800111c <HAL_ADC_MspInit+0xf4>)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80010f8:	2200      	movs	r2, #0
 80010fa:	2100      	movs	r1, #0
 80010fc:	2012      	movs	r0, #18
 80010fe:	f003 fa50 	bl	80045a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001102:	2012      	movs	r0, #18
 8001104:	f003 fa69 	bl	80045da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001108:	bf00      	nop
 800110a:	3728      	adds	r7, #40	@ 0x28
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	40012000 	.word	0x40012000
 8001114:	40023800 	.word	0x40023800
 8001118:	40020000 	.word	0x40020000
 800111c:	20000238 	.word	0x20000238
 8001120:	40026410 	.word	0x40026410

08001124 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	607b      	str	r3, [r7, #4]
 800112e:	4b0c      	ldr	r3, [pc, #48]	@ (8001160 <MX_DMA_Init+0x3c>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001132:	4a0b      	ldr	r2, [pc, #44]	@ (8001160 <MX_DMA_Init+0x3c>)
 8001134:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001138:	6313      	str	r3, [r2, #48]	@ 0x30
 800113a:	4b09      	ldr	r3, [pc, #36]	@ (8001160 <MX_DMA_Init+0x3c>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001142:	607b      	str	r3, [r7, #4]
 8001144:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001146:	2200      	movs	r2, #0
 8001148:	2100      	movs	r1, #0
 800114a:	2038      	movs	r0, #56	@ 0x38
 800114c:	f003 fa29 	bl	80045a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001150:	2038      	movs	r0, #56	@ 0x38
 8001152:	f003 fa42 	bl	80045da <HAL_NVIC_EnableIRQ>

}
 8001156:	bf00      	nop
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40023800 	.word	0x40023800

08001164 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b088      	sub	sp, #32
 8001168:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116a:	f107 030c 	add.w	r3, r7, #12
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	609a      	str	r2, [r3, #8]
 8001176:	60da      	str	r2, [r3, #12]
 8001178:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	60bb      	str	r3, [r7, #8]
 800117e:	4b30      	ldr	r3, [pc, #192]	@ (8001240 <MX_GPIO_Init+0xdc>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001182:	4a2f      	ldr	r2, [pc, #188]	@ (8001240 <MX_GPIO_Init+0xdc>)
 8001184:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001188:	6313      	str	r3, [r2, #48]	@ 0x30
 800118a:	4b2d      	ldr	r3, [pc, #180]	@ (8001240 <MX_GPIO_Init+0xdc>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001192:	60bb      	str	r3, [r7, #8]
 8001194:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	607b      	str	r3, [r7, #4]
 800119a:	4b29      	ldr	r3, [pc, #164]	@ (8001240 <MX_GPIO_Init+0xdc>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119e:	4a28      	ldr	r2, [pc, #160]	@ (8001240 <MX_GPIO_Init+0xdc>)
 80011a0:	f043 0301 	orr.w	r3, r3, #1
 80011a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011a6:	4b26      	ldr	r3, [pc, #152]	@ (8001240 <MX_GPIO_Init+0xdc>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	607b      	str	r3, [r7, #4]
 80011b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	603b      	str	r3, [r7, #0]
 80011b6:	4b22      	ldr	r3, [pc, #136]	@ (8001240 <MX_GPIO_Init+0xdc>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ba:	4a21      	ldr	r2, [pc, #132]	@ (8001240 <MX_GPIO_Init+0xdc>)
 80011bc:	f043 0302 	orr.w	r3, r3, #2
 80011c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001240 <MX_GPIO_Init+0xdc>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c6:	f003 0302 	and.w	r3, r3, #2
 80011ca:	603b      	str	r3, [r7, #0]
 80011cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STEP_PIN_Pin|GPIO_PIN_4|STEP2_PIN_Pin, GPIO_PIN_RESET);
 80011ce:	2200      	movs	r2, #0
 80011d0:	2191      	movs	r1, #145	@ 0x91
 80011d2:	481c      	ldr	r0, [pc, #112]	@ (8001244 <MX_GPIO_Init+0xe0>)
 80011d4:	f003 ff80 	bl	80050d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80011d8:	2200      	movs	r2, #0
 80011da:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80011de:	481a      	ldr	r0, [pc, #104]	@ (8001248 <MX_GPIO_Init+0xe4>)
 80011e0:	f003 ff7a 	bl	80050d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : STEP_PIN_Pin PA4 STEP2_PIN_Pin */
  GPIO_InitStruct.Pin = STEP_PIN_Pin|GPIO_PIN_4|STEP2_PIN_Pin;
 80011e4:	2391      	movs	r3, #145	@ 0x91
 80011e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e8:	2301      	movs	r3, #1
 80011ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f0:	2300      	movs	r3, #0
 80011f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f4:	f107 030c 	add.w	r3, r7, #12
 80011f8:	4619      	mov	r1, r3
 80011fa:	4812      	ldr	r0, [pc, #72]	@ (8001244 <MX_GPIO_Init+0xe0>)
 80011fc:	f003 fde8 	bl	8004dd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_14;
 8001200:	f244 0302 	movw	r3, #16386	@ 0x4002
 8001204:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001206:	2300      	movs	r3, #0
 8001208:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800120e:	f107 030c 	add.w	r3, r7, #12
 8001212:	4619      	mov	r1, r3
 8001214:	480c      	ldr	r0, [pc, #48]	@ (8001248 <MX_GPIO_Init+0xe4>)
 8001216:	f003 fddb 	bl	8004dd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800121a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800121e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001220:	2301      	movs	r3, #1
 8001222:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001228:	2300      	movs	r3, #0
 800122a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800122c:	f107 030c 	add.w	r3, r7, #12
 8001230:	4619      	mov	r1, r3
 8001232:	4805      	ldr	r0, [pc, #20]	@ (8001248 <MX_GPIO_Init+0xe4>)
 8001234:	f003 fdcc 	bl	8004dd0 <HAL_GPIO_Init>

}
 8001238:	bf00      	nop
 800123a:	3720      	adds	r7, #32
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40023800 	.word	0x40023800
 8001244:	40020000 	.word	0x40020000
 8001248:	40020400 	.word	0x40020400

0800124c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001250:	4b12      	ldr	r3, [pc, #72]	@ (800129c <MX_I2C1_Init+0x50>)
 8001252:	4a13      	ldr	r2, [pc, #76]	@ (80012a0 <MX_I2C1_Init+0x54>)
 8001254:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001256:	4b11      	ldr	r3, [pc, #68]	@ (800129c <MX_I2C1_Init+0x50>)
 8001258:	4a12      	ldr	r2, [pc, #72]	@ (80012a4 <MX_I2C1_Init+0x58>)
 800125a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800125c:	4b0f      	ldr	r3, [pc, #60]	@ (800129c <MX_I2C1_Init+0x50>)
 800125e:	2200      	movs	r2, #0
 8001260:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001262:	4b0e      	ldr	r3, [pc, #56]	@ (800129c <MX_I2C1_Init+0x50>)
 8001264:	2200      	movs	r2, #0
 8001266:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001268:	4b0c      	ldr	r3, [pc, #48]	@ (800129c <MX_I2C1_Init+0x50>)
 800126a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800126e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001270:	4b0a      	ldr	r3, [pc, #40]	@ (800129c <MX_I2C1_Init+0x50>)
 8001272:	2200      	movs	r2, #0
 8001274:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001276:	4b09      	ldr	r3, [pc, #36]	@ (800129c <MX_I2C1_Init+0x50>)
 8001278:	2200      	movs	r2, #0
 800127a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800127c:	4b07      	ldr	r3, [pc, #28]	@ (800129c <MX_I2C1_Init+0x50>)
 800127e:	2200      	movs	r2, #0
 8001280:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001282:	4b06      	ldr	r3, [pc, #24]	@ (800129c <MX_I2C1_Init+0x50>)
 8001284:	2200      	movs	r2, #0
 8001286:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001288:	4804      	ldr	r0, [pc, #16]	@ (800129c <MX_I2C1_Init+0x50>)
 800128a:	f003 ff3f 	bl	800510c <HAL_I2C_Init>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001294:	f001 fd00 	bl	8002c98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001298:	bf00      	nop
 800129a:	bd80      	pop	{r7, pc}
 800129c:	20000298 	.word	0x20000298
 80012a0:	40005400 	.word	0x40005400
 80012a4:	000186a0 	.word	0x000186a0

080012a8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08a      	sub	sp, #40	@ 0x28
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b0:	f107 0314 	add.w	r3, r7, #20
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
 80012be:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a19      	ldr	r2, [pc, #100]	@ (800132c <HAL_I2C_MspInit+0x84>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d12b      	bne.n	8001322 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	613b      	str	r3, [r7, #16]
 80012ce:	4b18      	ldr	r3, [pc, #96]	@ (8001330 <HAL_I2C_MspInit+0x88>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d2:	4a17      	ldr	r2, [pc, #92]	@ (8001330 <HAL_I2C_MspInit+0x88>)
 80012d4:	f043 0302 	orr.w	r3, r3, #2
 80012d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012da:	4b15      	ldr	r3, [pc, #84]	@ (8001330 <HAL_I2C_MspInit+0x88>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	613b      	str	r3, [r7, #16]
 80012e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012e6:	23c0      	movs	r3, #192	@ 0xc0
 80012e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012ea:	2312      	movs	r3, #18
 80012ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f2:	2303      	movs	r3, #3
 80012f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012f6:	2304      	movs	r3, #4
 80012f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012fa:	f107 0314 	add.w	r3, r7, #20
 80012fe:	4619      	mov	r1, r3
 8001300:	480c      	ldr	r0, [pc, #48]	@ (8001334 <HAL_I2C_MspInit+0x8c>)
 8001302:	f003 fd65 	bl	8004dd0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	60fb      	str	r3, [r7, #12]
 800130a:	4b09      	ldr	r3, [pc, #36]	@ (8001330 <HAL_I2C_MspInit+0x88>)
 800130c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800130e:	4a08      	ldr	r2, [pc, #32]	@ (8001330 <HAL_I2C_MspInit+0x88>)
 8001310:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001314:	6413      	str	r3, [r2, #64]	@ 0x40
 8001316:	4b06      	ldr	r3, [pc, #24]	@ (8001330 <HAL_I2C_MspInit+0x88>)
 8001318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800131a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001322:	bf00      	nop
 8001324:	3728      	adds	r7, #40	@ 0x28
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40005400 	.word	0x40005400
 8001330:	40023800 	.word	0x40023800
 8001334:	40020400 	.word	0x40020400

08001338 <HAL_ADC_ConvCpltCallback>:
float VPA0F;
char message1[128];     //输出显示
char message2[128];
char msg[40];
// DMA完成回调函数
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
	measurement_done = 1;
 8001340:	4b04      	ldr	r3, [pc, #16]	@ (8001354 <HAL_ADC_ConvCpltCallback+0x1c>)
 8001342:	2201      	movs	r2, #1
 8001344:	701a      	strb	r2, [r3, #0]
//	GPIO_Set_Low(GPIOA, GPIO_PIN_0);
//	GPIO_Set_Low(GPIOA, GPIO_PIN_4);
//	GPIO_Set_Low(GPIOA, GPIO_PIN_7);
}
 8001346:	bf00      	nop
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	20004320 	.word	0x20004320

08001358 <HAL_ADC_ErrorCallback>:
//DMA错误处理
void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc) {
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
	if (hadc->ErrorCode & HAL_ADC_ERROR_DMA) {
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
	}
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <component_test>:
	}
	// 初始化测量次数为0
	black_box.measurement_count = 0;
}

void component_test() {
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
	GPIO_Set_HighZ(GPIOA, GPIO_PIN_4);
 8001374:	2110      	movs	r1, #16
 8001376:	482a      	ldr	r0, [pc, #168]	@ (8001420 <component_test+0xb0>)
 8001378:	f000 f872 	bl	8001460 <GPIO_Set_HighZ>
	GPIO_Set_HighZ(GPIOB, GPIO_PIN_15);
 800137c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001380:	4828      	ldr	r0, [pc, #160]	@ (8001424 <component_test+0xb4>)
 8001382:	f000 f86d 	bl	8001460 <GPIO_Set_HighZ>
	GPIO_Set_Low(GPIOA, GPIO_PIN_0);
 8001386:	2101      	movs	r1, #1
 8001388:	4825      	ldr	r0, [pc, #148]	@ (8001420 <component_test+0xb0>)
 800138a:	f000 f8b3 	bl	80014f4 <GPIO_Set_Low>
	GPIO_Set_Low(GPIOA, GPIO_PIN_7);
 800138e:	2180      	movs	r1, #128	@ 0x80
 8001390:	4823      	ldr	r0, [pc, #140]	@ (8001420 <component_test+0xb0>)
 8001392:	f000 f8af 	bl	80014f4 <GPIO_Set_Low>
	//memset(adc_buffer1_com, 0, sizeof(adc_buffer1_com));
	DMA_Measure_com(1, adc_buffer1_com);
 8001396:	4924      	ldr	r1, [pc, #144]	@ (8001428 <component_test+0xb8>)
 8001398:	2001      	movs	r0, #1
 800139a:	f001 f9db 	bl	8002754 <DMA_Measure_com>
	VPA1Z = VPA1;
 800139e:	4b23      	ldr	r3, [pc, #140]	@ (800142c <component_test+0xbc>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a23      	ldr	r2, [pc, #140]	@ (8001430 <component_test+0xc0>)
 80013a4:	6013      	str	r3, [r2, #0]
	VPA0Z =VPA0;
 80013a6:	4b23      	ldr	r3, [pc, #140]	@ (8001434 <component_test+0xc4>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a23      	ldr	r2, [pc, #140]	@ (8001438 <component_test+0xc8>)
 80013ac:	6013      	str	r3, [r2, #0]
	VPA7Z=VPA7;
 80013ae:	4b23      	ldr	r3, [pc, #140]	@ (800143c <component_test+0xcc>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a23      	ldr	r2, [pc, #140]	@ (8001440 <component_test+0xd0>)
 80013b4:	6013      	str	r3, [r2, #0]
	GPIO_Set_HighZ(GPIOA, GPIO_PIN_4);
 80013b6:	2110      	movs	r1, #16
 80013b8:	4819      	ldr	r0, [pc, #100]	@ (8001420 <component_test+0xb0>)
 80013ba:	f000 f851 	bl	8001460 <GPIO_Set_HighZ>
	GPIO_Set_HighZ(GPIOB, GPIO_PIN_15);
 80013be:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80013c2:	4818      	ldr	r0, [pc, #96]	@ (8001424 <component_test+0xb4>)
 80013c4:	f000 f84c 	bl	8001460 <GPIO_Set_HighZ>
	//memset(adc_buffer2_com, 0, sizeof(adc_buffer2_com));
	DMA_Measure_com(2, adc_buffer2_com);
 80013c8:	491e      	ldr	r1, [pc, #120]	@ (8001444 <component_test+0xd4>)
 80013ca:	2002      	movs	r0, #2
 80013cc:	f001 f9c2 	bl	8002754 <DMA_Measure_com>
	VPA1F = VPA1;
 80013d0:	4b16      	ldr	r3, [pc, #88]	@ (800142c <component_test+0xbc>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a1c      	ldr	r2, [pc, #112]	@ (8001448 <component_test+0xd8>)
 80013d6:	6013      	str	r3, [r2, #0]
	VPA0F=VPA0;
 80013d8:	4b16      	ldr	r3, [pc, #88]	@ (8001434 <component_test+0xc4>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a1b      	ldr	r2, [pc, #108]	@ (800144c <component_test+0xdc>)
 80013de:	6013      	str	r3, [r2, #0]
	VPA7F=VPA7;
 80013e0:	4b16      	ldr	r3, [pc, #88]	@ (800143c <component_test+0xcc>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a1a      	ldr	r2, [pc, #104]	@ (8001450 <component_test+0xe0>)
 80013e6:	6013      	str	r3, [r2, #0]
	if (adc_buffer1_com[20] >= 0.98 * VREF && adc_buffer2_com[20] <= 0.01f) {
 80013e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001428 <component_test+0xb8>)
 80013ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013ec:	2b03      	cmp	r3, #3
 80013ee:	d911      	bls.n	8001414 <component_test+0xa4>
 80013f0:	4b14      	ldr	r3, [pc, #80]	@ (8001444 <component_test+0xd4>)
 80013f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013f4:	ee07 3a90 	vmov	s15, r3
 80013f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013fc:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8001454 <component_test+0xe4>
 8001400:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001408:	d804      	bhi.n	8001414 <component_test+0xa4>
		sprintf(msg, "no load");
 800140a:	4913      	ldr	r1, [pc, #76]	@ (8001458 <component_test+0xe8>)
 800140c:	4813      	ldr	r0, [pc, #76]	@ (800145c <component_test+0xec>)
 800140e:	f006 fa4f 	bl	80078b0 <siprintf>
 8001412:	e002      	b.n	800141a <component_test+0xaa>
	} else {
		Determine_component();
 8001414:	f000 f8c0 	bl	8001598 <Determine_component>
	}
}
 8001418:	bf00      	nop
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	40020000 	.word	0x40020000
 8001424:	40020400 	.word	0x40020400
 8001428:	20000320 	.word	0x20000320
 800142c:	20004324 	.word	0x20004324
 8001430:	20004328 	.word	0x20004328
 8001434:	2000433c 	.word	0x2000433c
 8001438:	20004340 	.word	0x20004340
 800143c:	20004330 	.word	0x20004330
 8001440:	20004334 	.word	0x20004334
 8001444:	20001320 	.word	0x20001320
 8001448:	2000432c 	.word	0x2000432c
 800144c:	20004344 	.word	0x20004344
 8001450:	20004338 	.word	0x20004338
 8001454:	3c23d70a 	.word	0x3c23d70a
 8001458:	08009f50 	.word	0x08009f50
 800145c:	20004448 	.word	0x20004448

08001460 <GPIO_Set_HighZ>:

void GPIO_Set_HighZ(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8001460:	b580      	push	{r7, lr}
 8001462:	b08a      	sub	sp, #40	@ 0x28
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	460b      	mov	r3, r1
 800146a:	807b      	strh	r3, [r7, #2]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800146c:	2300      	movs	r3, #0
 800146e:	613b      	str	r3, [r7, #16]
 8001470:	4b1f      	ldr	r3, [pc, #124]	@ (80014f0 <GPIO_Set_HighZ+0x90>)
 8001472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001474:	4a1e      	ldr	r2, [pc, #120]	@ (80014f0 <GPIO_Set_HighZ+0x90>)
 8001476:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800147a:	6313      	str	r3, [r2, #48]	@ 0x30
 800147c:	4b1c      	ldr	r3, [pc, #112]	@ (80014f0 <GPIO_Set_HighZ+0x90>)
 800147e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001480:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001484:	613b      	str	r3, [r7, #16]
 8001486:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001488:	2300      	movs	r3, #0
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	4b18      	ldr	r3, [pc, #96]	@ (80014f0 <GPIO_Set_HighZ+0x90>)
 800148e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001490:	4a17      	ldr	r2, [pc, #92]	@ (80014f0 <GPIO_Set_HighZ+0x90>)
 8001492:	f043 0301 	orr.w	r3, r3, #1
 8001496:	6313      	str	r3, [r2, #48]	@ 0x30
 8001498:	4b15      	ldr	r3, [pc, #84]	@ (80014f0 <GPIO_Set_HighZ+0x90>)
 800149a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149c:	f003 0301 	and.w	r3, r3, #1
 80014a0:	60fb      	str	r3, [r7, #12]
 80014a2:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80014a4:	2300      	movs	r3, #0
 80014a6:	60bb      	str	r3, [r7, #8]
 80014a8:	4b11      	ldr	r3, [pc, #68]	@ (80014f0 <GPIO_Set_HighZ+0x90>)
 80014aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ac:	4a10      	ldr	r2, [pc, #64]	@ (80014f0 <GPIO_Set_HighZ+0x90>)
 80014ae:	f043 0302 	orr.w	r3, r3, #2
 80014b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80014b4:	4b0e      	ldr	r3, [pc, #56]	@ (80014f0 <GPIO_Set_HighZ+0x90>)
 80014b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b8:	f003 0302 	and.w	r3, r3, #2
 80014bc:	60bb      	str	r3, [r7, #8]
 80014be:	68bb      	ldr	r3, [r7, #8]

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80014c0:	f107 0314 	add.w	r3, r7, #20
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	60da      	str	r2, [r3, #12]
 80014ce:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80014d0:	887b      	ldrh	r3, [r7, #2]
 80014d2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;  // 输入模式
 80014d4:	2300      	movs	r3, #0
 80014d6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;      // 无上拉/下拉 → 高阻态
 80014d8:	2300      	movs	r3, #0
 80014da:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80014dc:	f107 0314 	add.w	r3, r7, #20
 80014e0:	4619      	mov	r1, r3
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f003 fc74 	bl	8004dd0 <HAL_GPIO_Init>
}
 80014e8:	bf00      	nop
 80014ea:	3728      	adds	r7, #40	@ 0x28
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	40023800 	.word	0x40023800

080014f4 <GPIO_Set_Low>:
 * @brief  设置GPIO为低电平输出
 * @param  GPIOx: GPIO端口
 * @param  GPIO_Pin: 引脚号
 * @retval 无
 */
void GPIO_Set_Low(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b08a      	sub	sp, #40	@ 0x28
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	460b      	mov	r3, r1
 80014fe:	807b      	strh	r3, [r7, #2]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001500:	2300      	movs	r3, #0
 8001502:	613b      	str	r3, [r7, #16]
 8001504:	4b22      	ldr	r3, [pc, #136]	@ (8001590 <GPIO_Set_Low+0x9c>)
 8001506:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001508:	4a21      	ldr	r2, [pc, #132]	@ (8001590 <GPIO_Set_Low+0x9c>)
 800150a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800150e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001510:	4b1f      	ldr	r3, [pc, #124]	@ (8001590 <GPIO_Set_Low+0x9c>)
 8001512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001514:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001518:	613b      	str	r3, [r7, #16]
 800151a:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800151c:	2300      	movs	r3, #0
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	4b1b      	ldr	r3, [pc, #108]	@ (8001590 <GPIO_Set_Low+0x9c>)
 8001522:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001524:	4a1a      	ldr	r2, [pc, #104]	@ (8001590 <GPIO_Set_Low+0x9c>)
 8001526:	f043 0301 	orr.w	r3, r3, #1
 800152a:	6313      	str	r3, [r2, #48]	@ 0x30
 800152c:	4b18      	ldr	r3, [pc, #96]	@ (8001590 <GPIO_Set_Low+0x9c>)
 800152e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001530:	f003 0301 	and.w	r3, r3, #1
 8001534:	60fb      	str	r3, [r7, #12]
 8001536:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001538:	2300      	movs	r3, #0
 800153a:	60bb      	str	r3, [r7, #8]
 800153c:	4b14      	ldr	r3, [pc, #80]	@ (8001590 <GPIO_Set_Low+0x9c>)
 800153e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001540:	4a13      	ldr	r2, [pc, #76]	@ (8001590 <GPIO_Set_Low+0x9c>)
 8001542:	f043 0302 	orr.w	r3, r3, #2
 8001546:	6313      	str	r3, [r2, #48]	@ 0x30
 8001548:	4b11      	ldr	r3, [pc, #68]	@ (8001590 <GPIO_Set_Low+0x9c>)
 800154a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154c:	f003 0302 	and.w	r3, r3, #2
 8001550:	60bb      	str	r3, [r7, #8]
 8001552:	68bb      	ldr	r3, [r7, #8]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001554:	f107 0314 	add.w	r3, r7, #20
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	605a      	str	r2, [r3, #4]
 800155e:	609a      	str	r2, [r3, #8]
 8001560:	60da      	str	r2, [r3, #12]
 8001562:	611a      	str	r2, [r3, #16]
	// 先配置为输出模式
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001564:	887b      	ldrh	r3, [r7, #2]
 8001566:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;   // 推挽输出
 8001568:	2301      	movs	r3, #1
 800156a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156c:	2300      	movs	r3, #0
 800156e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001570:	f107 0314 	add.w	r3, r7, #20
 8001574:	4619      	mov	r1, r3
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f003 fc2a 	bl	8004dd0 <HAL_GPIO_Init>

	// 再设置低电平
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 800157c:	887b      	ldrh	r3, [r7, #2]
 800157e:	2200      	movs	r2, #0
 8001580:	4619      	mov	r1, r3
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f003 fda8 	bl	80050d8 <HAL_GPIO_WritePin>
}
 8001588:	bf00      	nop
 800158a:	3728      	adds	r7, #40	@ 0x28
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	40023800 	.word	0x40023800
 8001594:	00000000 	.word	0x00000000

08001598 <Determine_component>:
//
void Determine_component() {
 8001598:	b5b0      	push	{r4, r5, r7, lr}
 800159a:	b0b0      	sub	sp, #192	@ 0xc0
 800159c:	af00      	add	r7, sp, #0

	if (Analyze_trend(adc_buffer1_com, VPA1Z) == 1
 800159e:	4bca      	ldr	r3, [pc, #808]	@ (80018c8 <Determine_component+0x330>)
 80015a0:	edd3 7a00 	vldr	s15, [r3]
 80015a4:	eeb0 0a67 	vmov.f32	s0, s15
 80015a8:	48c8      	ldr	r0, [pc, #800]	@ (80018cc <Determine_component+0x334>)
 80015aa:	f000 fe71 	bl	8002290 <Analyze_trend>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	f040 82f7 	bne.w	8001ba4 <Determine_component+0x60c>
			&& Analyze_trend(adc_buffer2_com, VPA1F) == -1) {
 80015b6:	4bc6      	ldr	r3, [pc, #792]	@ (80018d0 <Determine_component+0x338>)
 80015b8:	edd3 7a00 	vldr	s15, [r3]
 80015bc:	eeb0 0a67 	vmov.f32	s0, s15
 80015c0:	48c4      	ldr	r0, [pc, #784]	@ (80018d4 <Determine_component+0x33c>)
 80015c2:	f000 fe65 	bl	8002290 <Analyze_trend>
 80015c6:	4603      	mov	r3, r0
 80015c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015cc:	f040 82ea 	bne.w	8001ba4 <Determine_component+0x60c>
		component.type = COMPONENT_C;
 80015d0:	4bc1      	ldr	r3, [pc, #772]	@ (80018d8 <Determine_component+0x340>)
 80015d2:	2202      	movs	r2, #2
 80015d4:	701a      	strb	r2, [r3, #0]
		if (steady_test(adc_buffer1_com, VPA1Z)) {
 80015d6:	4bbc      	ldr	r3, [pc, #752]	@ (80018c8 <Determine_component+0x330>)
 80015d8:	edd3 7a00 	vldr	s15, [r3]
 80015dc:	eeb0 0a67 	vmov.f32	s0, s15
 80015e0:	48ba      	ldr	r0, [pc, #744]	@ (80018cc <Determine_component+0x334>)
 80015e2:	f000 fded 	bl	80021c0 <steady_test>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	f000 820e 	beq.w	8001a0a <Determine_component+0x472>
			if (Find_tau_com(adc_buffer1_com)) {
 80015ee:	48b7      	ldr	r0, [pc, #732]	@ (80018cc <Determine_component+0x334>)
 80015f0:	f000 fc9e 	bl	8001f30 <Find_tau_com>
 80015f4:	eef0 7a40 	vmov.f32	s15, s0
 80015f8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80015fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001600:	d061      	beq.n	80016c6 <Determine_component+0x12e>
				float tau = Find_tau_com(adc_buffer1_com);
 8001602:	48b2      	ldr	r0, [pc, #712]	@ (80018cc <Determine_component+0x334>)
 8001604:	f000 fc94 	bl	8001f30 <Find_tau_com>
 8001608:	ed87 0a0d 	vstr	s0, [r7, #52]	@ 0x34
				float v_initial = 0.0f;
 800160c:	f04f 0300 	mov.w	r3, #0
 8001610:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
				//int initial_index;
				for (int i = 0; i < BUFFER_SIZE; i++) {
 8001614:	2300      	movs	r3, #0
 8001616:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800161a:	e024      	b.n	8001666 <Determine_component+0xce>
					float voltage = (adc_buffer1_com[i] * VREF) / 4095.0f;
 800161c:	4aab      	ldr	r2, [pc, #684]	@ (80018cc <Determine_component+0x334>)
 800161e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001622:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001626:	ee07 3a90 	vmov	s15, r3
 800162a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800162e:	ed9f 7aab 	vldr	s14, [pc, #684]	@ 80018dc <Determine_component+0x344>
 8001632:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001636:	eddf 6aaa 	vldr	s13, [pc, #680]	@ 80018e0 <Determine_component+0x348>
 800163a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800163e:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
					if (voltage > MIN_VOLTAGE) {
 8001642:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001646:	ed9f 7aa7 	vldr	s14, [pc, #668]	@ 80018e4 <Determine_component+0x34c>
 800164a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800164e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001652:	dd03      	ble.n	800165c <Determine_component+0xc4>
						v_initial = voltage;
 8001654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001656:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
						//initial_index=i;
						break;
 800165a:	e009      	b.n	8001670 <Determine_component+0xd8>
				for (int i = 0; i < BUFFER_SIZE; i++) {
 800165c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001660:	3301      	adds	r3, #1
 8001662:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001666:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800166a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800166e:	dbd5      	blt.n	800161c <Determine_component+0x84>
					}
				}
				float r_com = (v_initial * R_KNOWN) / (VREF - v_initial);
 8001670:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 8001674:	ed9f 7a9c 	vldr	s14, [pc, #624]	@ 80018e8 <Determine_component+0x350>
 8001678:	ee67 6a87 	vmul.f32	s13, s15, s14
 800167c:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 80018dc <Determine_component+0x344>
 8001680:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 8001684:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001688:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800168c:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
				float c_com = tau / r_com;
 8001690:	edd7 6a0d 	vldr	s13, [r7, #52]	@ 0x34
 8001694:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001698:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800169c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
				sprintf(message1, "Rs=%.2fΩ", r_com);
 80016a0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80016a2:	f7fe ff59 	bl	8000558 <__aeabi_f2d>
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	4990      	ldr	r1, [pc, #576]	@ (80018ec <Determine_component+0x354>)
 80016ac:	4890      	ldr	r0, [pc, #576]	@ (80018f0 <Determine_component+0x358>)
 80016ae:	f006 f8ff 	bl	80078b0 <siprintf>
				sprintf(message2, "Cs=%.4fuF", c_com);
 80016b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80016b4:	f7fe ff50 	bl	8000558 <__aeabi_f2d>
 80016b8:	4602      	mov	r2, r0
 80016ba:	460b      	mov	r3, r1
 80016bc:	498d      	ldr	r1, [pc, #564]	@ (80018f4 <Determine_component+0x35c>)
 80016be:	488e      	ldr	r0, [pc, #568]	@ (80018f8 <Determine_component+0x360>)
 80016c0:	f006 f8f6 	bl	80078b0 <siprintf>
		if (steady_test(adc_buffer1_com, VPA1Z)) {
 80016c4:	e3ff      	b.n	8001ec6 <Determine_component+0x92e>
			} else {
				float v_initial = 0.0f;
 80016c6:	f04f 0300 	mov.w	r3, #0
 80016ca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
				//int initial_index;
				for (int i = 0; i < BUFFER_SIZE; i++) {
 80016ce:	2300      	movs	r3, #0
 80016d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80016d4:	e024      	b.n	8001720 <Determine_component+0x188>
					float voltage = (adc_buffer1_com[i] * VREF) / 4095.0f;
 80016d6:	4a7d      	ldr	r2, [pc, #500]	@ (80018cc <Determine_component+0x334>)
 80016d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80016dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016e0:	ee07 3a90 	vmov	s15, r3
 80016e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016e8:	ed9f 7a7c 	vldr	s14, [pc, #496]	@ 80018dc <Determine_component+0x344>
 80016ec:	ee27 7a87 	vmul.f32	s14, s15, s14
 80016f0:	eddf 6a7b 	vldr	s13, [pc, #492]	@ 80018e0 <Determine_component+0x348>
 80016f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016f8:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
					if (voltage > MIN_VOLTAGE) {
 80016fc:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8001700:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 80018e4 <Determine_component+0x34c>
 8001704:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800170c:	dd03      	ble.n	8001716 <Determine_component+0x17e>
						v_initial = voltage;
 800170e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001710:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
						//initial_index=i;
						break;
 8001714:	e009      	b.n	800172a <Determine_component+0x192>
				for (int i = 0; i < BUFFER_SIZE; i++) {
 8001716:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800171a:	3301      	adds	r3, #1
 800171c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001720:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001724:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001728:	dbd5      	blt.n	80016d6 <Determine_component+0x13e>
					}
				}
				float r_com = (v_initial * R_KNOWN) / (VREF - v_initial);
 800172a:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 800172e:	ed9f 7a6e 	vldr	s14, [pc, #440]	@ 80018e8 <Determine_component+0x350>
 8001732:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001736:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 80018dc <Determine_component+0x344>
 800173a:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 800173e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001742:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001746:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
				//确定是电容，换用5.1k
				GPIO_Set_HighZ(GPIOA, GPIO_PIN_0);
 800174a:	2101      	movs	r1, #1
 800174c:	486b      	ldr	r0, [pc, #428]	@ (80018fc <Determine_component+0x364>)
 800174e:	f7ff fe87 	bl	8001460 <GPIO_Set_HighZ>
				GPIO_Set_Low(GPIOA, GPIO_PIN_4);
 8001752:	2110      	movs	r1, #16
 8001754:	4869      	ldr	r0, [pc, #420]	@ (80018fc <Determine_component+0x364>)
 8001756:	f7ff fecd 	bl	80014f4 <GPIO_Set_Low>
				GPIO_Set_Low(GPIOA, GPIO_PIN_7);
 800175a:	2180      	movs	r1, #128	@ 0x80
 800175c:	4867      	ldr	r0, [pc, #412]	@ (80018fc <Determine_component+0x364>)
 800175e:	f7ff fec9 	bl	80014f4 <GPIO_Set_Low>
				GPIO_Set_HighZ(GPIOB, GPIO_PIN_15);
 8001762:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001766:	4866      	ldr	r0, [pc, #408]	@ (8001900 <Determine_component+0x368>)
 8001768:	f7ff fe7a 	bl	8001460 <GPIO_Set_HighZ>
				memset(adc_buffer1_com, 0, sizeof(adc_buffer1_com));
 800176c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001770:	2100      	movs	r1, #0
 8001772:	4856      	ldr	r0, [pc, #344]	@ (80018cc <Determine_component+0x334>)
 8001774:	f006 f911 	bl	800799a <memset>
				DMA_Measure_com(3, adc_buffer1_com);
 8001778:	4954      	ldr	r1, [pc, #336]	@ (80018cc <Determine_component+0x334>)
 800177a:	2003      	movs	r0, #3
 800177c:	f000 ffea 	bl	8002754 <DMA_Measure_com>
				VPA1Z = VPA1;
 8001780:	4b60      	ldr	r3, [pc, #384]	@ (8001904 <Determine_component+0x36c>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a50      	ldr	r2, [pc, #320]	@ (80018c8 <Determine_component+0x330>)
 8001786:	6013      	str	r3, [r2, #0]
				if (steady_test(adc_buffer1_com, VPA1Z)) {
 8001788:	4b4f      	ldr	r3, [pc, #316]	@ (80018c8 <Determine_component+0x330>)
 800178a:	edd3 7a00 	vldr	s15, [r3]
 800178e:	eeb0 0a67 	vmov.f32	s0, s15
 8001792:	484e      	ldr	r0, [pc, #312]	@ (80018cc <Determine_component+0x334>)
 8001794:	f000 fd14 	bl	80021c0 <steady_test>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d058      	beq.n	8001850 <Determine_component+0x2b8>
					float tau = Find_tau_com(adc_buffer1_com);
 800179e:	484b      	ldr	r0, [pc, #300]	@ (80018cc <Determine_component+0x334>)
 80017a0:	f000 fbc6 	bl	8001f30 <Find_tau_com>
 80017a4:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
					float v_initial = 0.0f;
 80017a8:	f04f 0300 	mov.w	r3, #0
 80017ac:	643b      	str	r3, [r7, #64]	@ 0x40
					//int initial_index;
					for (int i = 0; i < BUFFER_SIZE; i++) {
 80017ae:	2300      	movs	r3, #0
 80017b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80017b4:	e023      	b.n	80017fe <Determine_component+0x266>
						float voltage = (adc_buffer1_com[i] * VREF) / 4095.0f;
 80017b6:	4a45      	ldr	r2, [pc, #276]	@ (80018cc <Determine_component+0x334>)
 80017b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80017bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017c0:	ee07 3a90 	vmov	s15, r3
 80017c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017c8:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 80018dc <Determine_component+0x344>
 80017cc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80017d0:	eddf 6a43 	vldr	s13, [pc, #268]	@ 80018e0 <Determine_component+0x348>
 80017d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017d8:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
						if (voltage > MIN_VOLTAGE) {
 80017dc:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80017e0:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 80018e4 <Determine_component+0x34c>
 80017e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ec:	dd02      	ble.n	80017f4 <Determine_component+0x25c>
							v_initial = voltage;
 80017ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80017f0:	643b      	str	r3, [r7, #64]	@ 0x40
							//initial_index=i;
							break;
 80017f2:	e009      	b.n	8001808 <Determine_component+0x270>
					for (int i = 0; i < BUFFER_SIZE; i++) {
 80017f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80017f8:	3301      	adds	r3, #1
 80017fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80017fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001802:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001806:	dbd6      	blt.n	80017b6 <Determine_component+0x21e>
						}
					}
					//float r_com = (v_initial * 5100) / (VREF - v_initial);
					float c_com = tau / (r_com+5100);
 8001808:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 800180c:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8001908 <Determine_component+0x370>
 8001810:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001814:	edd7 6a11 	vldr	s13, [r7, #68]	@ 0x44
 8001818:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800181c:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
					sprintf(message1, "Rs=%.2fΩ", r_com);
 8001820:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8001822:	f7fe fe99 	bl	8000558 <__aeabi_f2d>
 8001826:	4602      	mov	r2, r0
 8001828:	460b      	mov	r3, r1
 800182a:	4930      	ldr	r1, [pc, #192]	@ (80018ec <Determine_component+0x354>)
 800182c:	4830      	ldr	r0, [pc, #192]	@ (80018f0 <Determine_component+0x358>)
 800182e:	f006 f83f 	bl	80078b0 <siprintf>
					sprintf(message2, "Cs=%.4fuF", c_com*1e6);
 8001832:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001834:	f7fe fe90 	bl	8000558 <__aeabi_f2d>
 8001838:	a321      	add	r3, pc, #132	@ (adr r3, 80018c0 <Determine_component+0x328>)
 800183a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800183e:	f7fe fee3 	bl	8000608 <__aeabi_dmul>
 8001842:	4602      	mov	r2, r0
 8001844:	460b      	mov	r3, r1
 8001846:	492b      	ldr	r1, [pc, #172]	@ (80018f4 <Determine_component+0x35c>)
 8001848:	482b      	ldr	r0, [pc, #172]	@ (80018f8 <Determine_component+0x360>)
 800184a:	f006 f831 	bl	80078b0 <siprintf>
		if (steady_test(adc_buffer1_com, VPA1Z)) {
 800184e:	e33a      	b.n	8001ec6 <Determine_component+0x92e>
				} else {   //换电阻后未达稳态
					float v_target1 = (adc_buffer1_com[800] * VREF) / 4095.0f;
 8001850:	4b1e      	ldr	r3, [pc, #120]	@ (80018cc <Determine_component+0x334>)
 8001852:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	@ 0x640
 8001856:	ee07 3a90 	vmov	s15, r3
 800185a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800185e:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 80018dc <Determine_component+0x344>
 8001862:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001866:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 80018e0 <Determine_component+0x348>
 800186a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800186e:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
					float v_initial = 0.0f;
 8001872:	f04f 0300 	mov.w	r3, #0
 8001876:	667b      	str	r3, [r7, #100]	@ 0x64
					//int initial_index;
					for (int i = 0; i < BUFFER_SIZE; i++) {
 8001878:	2300      	movs	r3, #0
 800187a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800187e:	e04a      	b.n	8001916 <Determine_component+0x37e>
						float voltage = (adc_buffer1_com[i] * VREF) / 4095.0f;
 8001880:	4a12      	ldr	r2, [pc, #72]	@ (80018cc <Determine_component+0x334>)
 8001882:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001886:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800188a:	ee07 3a90 	vmov	s15, r3
 800188e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001892:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 80018dc <Determine_component+0x344>
 8001896:	ee27 7a87 	vmul.f32	s14, s15, s14
 800189a:	eddf 6a11 	vldr	s13, [pc, #68]	@ 80018e0 <Determine_component+0x348>
 800189e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018a2:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
						if (voltage > MIN_VOLTAGE) {
 80018a6:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 80018aa:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80018e4 <Determine_component+0x34c>
 80018ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018b6:	dd29      	ble.n	800190c <Determine_component+0x374>
							v_initial = voltage;
 80018b8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80018ba:	667b      	str	r3, [r7, #100]	@ 0x64
							//initial_index=i;
							break;
 80018bc:	e030      	b.n	8001920 <Determine_component+0x388>
 80018be:	bf00      	nop
 80018c0:	00000000 	.word	0x00000000
 80018c4:	412e8480 	.word	0x412e8480
 80018c8:	20004328 	.word	0x20004328
 80018cc:	20000320 	.word	0x20000320
 80018d0:	2000432c 	.word	0x2000432c
 80018d4:	20001320 	.word	0x20001320
 80018d8:	200002ec 	.word	0x200002ec
 80018dc:	40533333 	.word	0x40533333
 80018e0:	457ff000 	.word	0x457ff000
 80018e4:	3d4ccccd 	.word	0x3d4ccccd
 80018e8:	424c0000 	.word	0x424c0000
 80018ec:	08009f58 	.word	0x08009f58
 80018f0:	20004348 	.word	0x20004348
 80018f4:	08009f64 	.word	0x08009f64
 80018f8:	200043c8 	.word	0x200043c8
 80018fc:	40020000 	.word	0x40020000
 8001900:	40020400 	.word	0x40020400
 8001904:	20004324 	.word	0x20004324
 8001908:	459f6000 	.word	0x459f6000
					for (int i = 0; i < BUFFER_SIZE; i++) {
 800190c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001910:	3301      	adds	r3, #1
 8001912:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001916:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800191a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800191e:	dbaf      	blt.n	8001880 <Determine_component+0x2e8>
						}
					}
					int target1_index = 800;
 8001920:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8001924:	65fb      	str	r3, [r7, #92]	@ 0x5c
					float v_target2 = (adc_buffer1_com[1600] * VREF) / 4095.0f;
 8001926:	4bca      	ldr	r3, [pc, #808]	@ (8001c50 <Determine_component+0x6b8>)
 8001928:	f8b3 3c80 	ldrh.w	r3, [r3, #3200]	@ 0xc80
 800192c:	ee07 3a90 	vmov	s15, r3
 8001930:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001934:	ed9f 7ac7 	vldr	s14, [pc, #796]	@ 8001c54 <Determine_component+0x6bc>
 8001938:	ee27 7a87 	vmul.f32	s14, s15, s14
 800193c:	eddf 6ac6 	vldr	s13, [pc, #792]	@ 8001c58 <Determine_component+0x6c0>
 8001940:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001944:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
					;
					int target2_index = 1600;
 8001948:	f44f 63c8 	mov.w	r3, #1600	@ 0x640
 800194c:	657b      	str	r3, [r7, #84]	@ 0x54
					float delta_t = (target2_index - target1_index)
 800194e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001950:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001952:	1ad3      	subs	r3, r2, r3
							/ (float) SAMPLE_RATE;
 8001954:	ee07 3a90 	vmov	s15, r3
 8001958:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
					float delta_t = (target2_index - target1_index)
 800195c:	eddf 6abf 	vldr	s13, [pc, #764]	@ 8001c5c <Determine_component+0x6c4>
 8001960:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001964:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
					// 计算时间常数τ = Δt / ln[(V_ss - v1)/(V_ss - v2)]
					float tau = delta_t
							/ log((VPA1Z - v_target1) / (VPA1Z - v_target2));
 8001968:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800196a:	f7fe fdf5 	bl	8000558 <__aeabi_f2d>
 800196e:	4604      	mov	r4, r0
 8001970:	460d      	mov	r5, r1
 8001972:	4bbb      	ldr	r3, [pc, #748]	@ (8001c60 <Determine_component+0x6c8>)
 8001974:	ed93 7a00 	vldr	s14, [r3]
 8001978:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 800197c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001980:	4bb7      	ldr	r3, [pc, #732]	@ (8001c60 <Determine_component+0x6c8>)
 8001982:	edd3 6a00 	vldr	s13, [r3]
 8001986:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800198a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800198e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001992:	ee16 0a90 	vmov	r0, s13
 8001996:	f7fe fddf 	bl	8000558 <__aeabi_f2d>
 800199a:	4602      	mov	r2, r0
 800199c:	460b      	mov	r3, r1
 800199e:	ec43 2b10 	vmov	d0, r2, r3
 80019a2:	f008 f8c9 	bl	8009b38 <log>
 80019a6:	ec53 2b10 	vmov	r2, r3, d0
 80019aa:	4620      	mov	r0, r4
 80019ac:	4629      	mov	r1, r5
 80019ae:	f7fe ff55 	bl	800085c <__aeabi_ddiv>
 80019b2:	4602      	mov	r2, r0
 80019b4:	460b      	mov	r3, r1
					float tau = delta_t
 80019b6:	4610      	mov	r0, r2
 80019b8:	4619      	mov	r1, r3
 80019ba:	f7ff f8fd 	bl	8000bb8 <__aeabi_d2f>
 80019be:	4603      	mov	r3, r0
 80019c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
					//float   r_com=(v_initial* 5100) / (VREF - v_initial);
					float c_com = tau / (r_com + 5100);
 80019c2:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 80019c6:	ed9f 7aa7 	vldr	s14, [pc, #668]	@ 8001c64 <Determine_component+0x6cc>
 80019ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80019ce:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 80019d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019d6:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
					sprintf(message1, "Rs=%.2fΩ", r_com);
 80019da:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80019dc:	f7fe fdbc 	bl	8000558 <__aeabi_f2d>
 80019e0:	4602      	mov	r2, r0
 80019e2:	460b      	mov	r3, r1
 80019e4:	49a0      	ldr	r1, [pc, #640]	@ (8001c68 <Determine_component+0x6d0>)
 80019e6:	48a1      	ldr	r0, [pc, #644]	@ (8001c6c <Determine_component+0x6d4>)
 80019e8:	f005 ff62 	bl	80078b0 <siprintf>
					sprintf(message2, "Cs=%.4fuF", c_com * 1e6);
 80019ec:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80019ee:	f7fe fdb3 	bl	8000558 <__aeabi_f2d>
 80019f2:	a395      	add	r3, pc, #596	@ (adr r3, 8001c48 <Determine_component+0x6b0>)
 80019f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f8:	f7fe fe06 	bl	8000608 <__aeabi_dmul>
 80019fc:	4602      	mov	r2, r0
 80019fe:	460b      	mov	r3, r1
 8001a00:	499b      	ldr	r1, [pc, #620]	@ (8001c70 <Determine_component+0x6d8>)
 8001a02:	489c      	ldr	r0, [pc, #624]	@ (8001c74 <Determine_component+0x6dc>)
 8001a04:	f005 ff54 	bl	80078b0 <siprintf>
		if (steady_test(adc_buffer1_com, VPA1Z)) {
 8001a08:	e25d      	b.n	8001ec6 <Determine_component+0x92e>
				}
			}

		} else {
			float v_target1 = (adc_buffer1_com[200] * VREF) / 4095.0f;
 8001a0a:	4b91      	ldr	r3, [pc, #580]	@ (8001c50 <Determine_component+0x6b8>)
 8001a0c:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8001a10:	ee07 3a90 	vmov	s15, r3
 8001a14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a18:	ed9f 7a8e 	vldr	s14, [pc, #568]	@ 8001c54 <Determine_component+0x6bc>
 8001a1c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001a20:	eddf 6a8d 	vldr	s13, [pc, #564]	@ 8001c58 <Determine_component+0x6c0>
 8001a24:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a28:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
			float v_initial = 0.0f;
 8001a2c:	f04f 0300 	mov.w	r3, #0
 8001a30:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
			//int initial_index;
			for (int i = 0; i < BUFFER_SIZE; i++) {
 8001a34:	2300      	movs	r3, #0
 8001a36:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001a3a:	e025      	b.n	8001a88 <Determine_component+0x4f0>
				float voltage = (adc_buffer1_com[i] * VREF) / 4095.0f;
 8001a3c:	4a84      	ldr	r2, [pc, #528]	@ (8001c50 <Determine_component+0x6b8>)
 8001a3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001a42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a46:	ee07 3a90 	vmov	s15, r3
 8001a4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a4e:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 8001c54 <Determine_component+0x6bc>
 8001a52:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001a56:	eddf 6a80 	vldr	s13, [pc, #512]	@ 8001c58 <Determine_component+0x6c0>
 8001a5a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a5e:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
				if (voltage > MIN_VOLTAGE) {
 8001a62:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8001a66:	ed9f 7a84 	vldr	s14, [pc, #528]	@ 8001c78 <Determine_component+0x6e0>
 8001a6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a72:	dd04      	ble.n	8001a7e <Determine_component+0x4e6>
					v_initial = voltage;
 8001a74:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001a78:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
					//initial_index=i;
					break;
 8001a7c:	e009      	b.n	8001a92 <Determine_component+0x4fa>
			for (int i = 0; i < BUFFER_SIZE; i++) {
 8001a7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001a82:	3301      	adds	r3, #1
 8001a84:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001a88:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001a8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001a90:	dbd4      	blt.n	8001a3c <Determine_component+0x4a4>
				}
			}
			int target1_index = 200;
 8001a92:	23c8      	movs	r3, #200	@ 0xc8
 8001a94:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
			float v_target2 = (adc_buffer1_com[2000] * VREF) / 4095.0f;
 8001a98:	4b6d      	ldr	r3, [pc, #436]	@ (8001c50 <Determine_component+0x6b8>)
 8001a9a:	f8b3 3fa0 	ldrh.w	r3, [r3, #4000]	@ 0xfa0
 8001a9e:	ee07 3a90 	vmov	s15, r3
 8001aa2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001aa6:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 8001c54 <Determine_component+0x6bc>
 8001aaa:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001aae:	eddf 6a6a 	vldr	s13, [pc, #424]	@ 8001c58 <Determine_component+0x6c0>
 8001ab2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ab6:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
			;
			int target2_index = 2000;
 8001aba:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001abe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			float delta_t = (target2_index - target1_index)
 8001ac2:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8001ac6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001aca:	1ad3      	subs	r3, r2, r3
					/ (float) SAMPLE_RATE;
 8001acc:	ee07 3a90 	vmov	s15, r3
 8001ad0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
			float delta_t = (target2_index - target1_index)
 8001ad4:	eddf 6a61 	vldr	s13, [pc, #388]	@ 8001c5c <Determine_component+0x6c4>
 8001ad8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001adc:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
			// 计算时间常数τ = Δt / ln[(V_ss - v1)/(V_ss - v2)]
			float tau = delta_t/ log((VPA1Z - v_target1) / (VPA1Z - v_target2));
 8001ae0:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8001ae4:	f7fe fd38 	bl	8000558 <__aeabi_f2d>
 8001ae8:	4604      	mov	r4, r0
 8001aea:	460d      	mov	r5, r1
 8001aec:	4b5c      	ldr	r3, [pc, #368]	@ (8001c60 <Determine_component+0x6c8>)
 8001aee:	ed93 7a00 	vldr	s14, [r3]
 8001af2:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8001af6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001afa:	4b59      	ldr	r3, [pc, #356]	@ (8001c60 <Determine_component+0x6c8>)
 8001afc:	edd3 6a00 	vldr	s13, [r3]
 8001b00:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8001b04:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001b08:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001b0c:	ee16 0a90 	vmov	r0, s13
 8001b10:	f7fe fd22 	bl	8000558 <__aeabi_f2d>
 8001b14:	4602      	mov	r2, r0
 8001b16:	460b      	mov	r3, r1
 8001b18:	ec43 2b10 	vmov	d0, r2, r3
 8001b1c:	f008 f80c 	bl	8009b38 <log>
 8001b20:	ec53 2b10 	vmov	r2, r3, d0
 8001b24:	4620      	mov	r0, r4
 8001b26:	4629      	mov	r1, r5
 8001b28:	f7fe fe98 	bl	800085c <__aeabi_ddiv>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	460b      	mov	r3, r1
 8001b30:	4610      	mov	r0, r2
 8001b32:	4619      	mov	r1, r3
 8001b34:	f7ff f840 	bl	8000bb8 <__aeabi_d2f>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
			float r_com = (v_initial * R_KNOWN) / (VREF - v_initial);
 8001b3c:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8001b40:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8001c7c <Determine_component+0x6e4>
 8001b44:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001b48:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8001c54 <Determine_component+0x6bc>
 8001b4c:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8001b50:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b58:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
			float c_com = tau / (r_com + R_KNOWN);
 8001b5c:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8001b60:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8001c7c <Determine_component+0x6e4>
 8001b64:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001b68:	edd7 6a1f 	vldr	s13, [r7, #124]	@ 0x7c
 8001b6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b70:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
			sprintf(message1, "Rs=%.2fΩ", r_com);
 8001b74:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8001b76:	f7fe fcef 	bl	8000558 <__aeabi_f2d>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	493a      	ldr	r1, [pc, #232]	@ (8001c68 <Determine_component+0x6d0>)
 8001b80:	483a      	ldr	r0, [pc, #232]	@ (8001c6c <Determine_component+0x6d4>)
 8001b82:	f005 fe95 	bl	80078b0 <siprintf>
			sprintf(message2, "Cs=%.4fuF", c_com*1e6);
 8001b86:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8001b88:	f7fe fce6 	bl	8000558 <__aeabi_f2d>
 8001b8c:	a32e      	add	r3, pc, #184	@ (adr r3, 8001c48 <Determine_component+0x6b0>)
 8001b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b92:	f7fe fd39 	bl	8000608 <__aeabi_dmul>
 8001b96:	4602      	mov	r2, r0
 8001b98:	460b      	mov	r3, r1
 8001b9a:	4935      	ldr	r1, [pc, #212]	@ (8001c70 <Determine_component+0x6d8>)
 8001b9c:	4835      	ldr	r0, [pc, #212]	@ (8001c74 <Determine_component+0x6dc>)
 8001b9e:	f005 fe87 	bl	80078b0 <siprintf>
		if (steady_test(adc_buffer1_com, VPA1Z)) {
 8001ba2:	e190      	b.n	8001ec6 <Determine_component+0x92e>

		}
		//计算RC
	}   //初末比较CL
	else if (Analyze_trend(adc_buffer1_com, VPA1Z) == -1
 8001ba4:	4b2e      	ldr	r3, [pc, #184]	@ (8001c60 <Determine_component+0x6c8>)
 8001ba6:	edd3 7a00 	vldr	s15, [r3]
 8001baa:	eeb0 0a67 	vmov.f32	s0, s15
 8001bae:	4828      	ldr	r0, [pc, #160]	@ (8001c50 <Determine_component+0x6b8>)
 8001bb0:	f000 fb6e 	bl	8002290 <Analyze_trend>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bba:	d10e      	bne.n	8001bda <Determine_component+0x642>
			&& Analyze_trend(adc_buffer2_com, VPA1F) == 1) {
 8001bbc:	4b30      	ldr	r3, [pc, #192]	@ (8001c80 <Determine_component+0x6e8>)
 8001bbe:	edd3 7a00 	vldr	s15, [r3]
 8001bc2:	eeb0 0a67 	vmov.f32	s0, s15
 8001bc6:	482f      	ldr	r0, [pc, #188]	@ (8001c84 <Determine_component+0x6ec>)
 8001bc8:	f000 fb62 	bl	8002290 <Analyze_trend>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d103      	bne.n	8001bda <Determine_component+0x642>
		component.type = COMPONENT_L;
 8001bd2:	4b2d      	ldr	r3, [pc, #180]	@ (8001c88 <Determine_component+0x6f0>)
 8001bd4:	2203      	movs	r2, #3
 8001bd6:	701a      	strb	r2, [r3, #0]
 8001bd8:	e175      	b.n	8001ec6 <Determine_component+0x92e>
		//计算RL
	} else {
		float a = Danalyze();
 8001bda:	f000 fcf1 	bl	80025c0 <Danalyze>
 8001bde:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
		if (a) {   //求平均有极值，差值小于2v
 8001be2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001be6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bee:	d051      	beq.n	8001c94 <Determine_component+0x6fc>
			component.type = COMPONENT_D;
 8001bf0:	4b25      	ldr	r3, [pc, #148]	@ (8001c88 <Determine_component+0x6f0>)
 8001bf2:	2204      	movs	r2, #4
 8001bf4:	701a      	strb	r2, [r3, #0]
			component.params.diode.forward_voltage = fabs(a);
 8001bf6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001bfa:	eef0 7ae7 	vabs.f32	s15, s15
 8001bfe:	4b22      	ldr	r3, [pc, #136]	@ (8001c88 <Determine_component+0x6f0>)
 8001c00:	edc3 7a01 	vstr	s15, [r3, #4]
			if (a > 0) {
 8001c04:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001c08:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c10:	dd0b      	ble.n	8001c2a <Determine_component+0x692>
				component.params.diode.polarity == L_TO_R;   //>>
				sprintf(message1, " Z V=%.2fΩ", component.params.diode.forward_voltage);
 8001c12:	4b1d      	ldr	r3, [pc, #116]	@ (8001c88 <Determine_component+0x6f0>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7fe fc9e 	bl	8000558 <__aeabi_f2d>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	460b      	mov	r3, r1
 8001c20:	491a      	ldr	r1, [pc, #104]	@ (8001c8c <Determine_component+0x6f4>)
 8001c22:	4812      	ldr	r0, [pc, #72]	@ (8001c6c <Determine_component+0x6d4>)
 8001c24:	f005 fe44 	bl	80078b0 <siprintf>
			}

		}
	}

}
 8001c28:	e14d      	b.n	8001ec6 <Determine_component+0x92e>
				sprintf(message1, " F V=%.2fΩ", component.params.diode.forward_voltage);
 8001c2a:	4b17      	ldr	r3, [pc, #92]	@ (8001c88 <Determine_component+0x6f0>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7fe fc92 	bl	8000558 <__aeabi_f2d>
 8001c34:	4602      	mov	r2, r0
 8001c36:	460b      	mov	r3, r1
 8001c38:	4915      	ldr	r1, [pc, #84]	@ (8001c90 <Determine_component+0x6f8>)
 8001c3a:	480c      	ldr	r0, [pc, #48]	@ (8001c6c <Determine_component+0x6d4>)
 8001c3c:	f005 fe38 	bl	80078b0 <siprintf>
}
 8001c40:	e141      	b.n	8001ec6 <Determine_component+0x92e>
 8001c42:	bf00      	nop
 8001c44:	f3af 8000 	nop.w
 8001c48:	00000000 	.word	0x00000000
 8001c4c:	412e8480 	.word	0x412e8480
 8001c50:	20000320 	.word	0x20000320
 8001c54:	40533333 	.word	0x40533333
 8001c58:	457ff000 	.word	0x457ff000
 8001c5c:	48f42400 	.word	0x48f42400
 8001c60:	20004328 	.word	0x20004328
 8001c64:	459f6000 	.word	0x459f6000
 8001c68:	08009f58 	.word	0x08009f58
 8001c6c:	20004348 	.word	0x20004348
 8001c70:	08009f64 	.word	0x08009f64
 8001c74:	200043c8 	.word	0x200043c8
 8001c78:	3d4ccccd 	.word	0x3d4ccccd
 8001c7c:	424c0000 	.word	0x424c0000
 8001c80:	2000432c 	.word	0x2000432c
 8001c84:	20001320 	.word	0x20001320
 8001c88:	200002ec 	.word	0x200002ec
 8001c8c:	08009f70 	.word	0x08009f70
 8001c90:	08009f7c 	.word	0x08009f7c
			GPIO_Set_HighZ(GPIOA, GPIO_PIN_0);
 8001c94:	2101      	movs	r1, #1
 8001c96:	4890      	ldr	r0, [pc, #576]	@ (8001ed8 <Determine_component+0x940>)
 8001c98:	f7ff fbe2 	bl	8001460 <GPIO_Set_HighZ>
			GPIO_Set_HighZ(GPIOA, GPIO_PIN_4);
 8001c9c:	2110      	movs	r1, #16
 8001c9e:	488e      	ldr	r0, [pc, #568]	@ (8001ed8 <Determine_component+0x940>)
 8001ca0:	f7ff fbde 	bl	8001460 <GPIO_Set_HighZ>
			GPIO_Set_Low(GPIOA, GPIO_PIN_7);
 8001ca4:	2180      	movs	r1, #128	@ 0x80
 8001ca6:	488c      	ldr	r0, [pc, #560]	@ (8001ed8 <Determine_component+0x940>)
 8001ca8:	f7ff fc24 	bl	80014f4 <GPIO_Set_Low>
			GPIO_Set_Low(GPIOB, GPIO_PIN_15);
 8001cac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001cb0:	488a      	ldr	r0, [pc, #552]	@ (8001edc <Determine_component+0x944>)
 8001cb2:	f7ff fc1f 	bl	80014f4 <GPIO_Set_Low>
			memset(adc_buffer3_com, 0, sizeof(adc_buffer3_com));
 8001cb6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001cba:	2100      	movs	r1, #0
 8001cbc:	4888      	ldr	r0, [pc, #544]	@ (8001ee0 <Determine_component+0x948>)
 8001cbe:	f005 fe6c 	bl	800799a <memset>
			DMA_Measure_com(4, adc_buffer3_com);
 8001cc2:	4987      	ldr	r1, [pc, #540]	@ (8001ee0 <Determine_component+0x948>)
 8001cc4:	2004      	movs	r0, #4
 8001cc6:	f000 fd45 	bl	8002754 <DMA_Measure_com>
			GPIO_Set_HighZ(GPIOA, GPIO_PIN_0);
 8001cca:	2101      	movs	r1, #1
 8001ccc:	4882      	ldr	r0, [pc, #520]	@ (8001ed8 <Determine_component+0x940>)
 8001cce:	f7ff fbc7 	bl	8001460 <GPIO_Set_HighZ>
			GPIO_Set_HighZ(GPIOA, GPIO_PIN_4);
 8001cd2:	2110      	movs	r1, #16
 8001cd4:	4880      	ldr	r0, [pc, #512]	@ (8001ed8 <Determine_component+0x940>)
 8001cd6:	f7ff fbc3 	bl	8001460 <GPIO_Set_HighZ>
			memset(adc_buffer4_com, 0, sizeof(adc_buffer4_com));
 8001cda:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001cde:	2100      	movs	r1, #0
 8001ce0:	4880      	ldr	r0, [pc, #512]	@ (8001ee4 <Determine_component+0x94c>)
 8001ce2:	f005 fe5a 	bl	800799a <memset>
			DMA_Measure_com(2, adc_buffer4_com);
 8001ce6:	497f      	ldr	r1, [pc, #508]	@ (8001ee4 <Determine_component+0x94c>)
 8001ce8:	2002      	movs	r0, #2
 8001cea:	f000 fd33 	bl	8002754 <DMA_Measure_com>
			VPA1F = VPA1;
 8001cee:	4b7e      	ldr	r3, [pc, #504]	@ (8001ee8 <Determine_component+0x950>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a7e      	ldr	r2, [pc, #504]	@ (8001eec <Determine_component+0x954>)
 8001cf4:	6013      	str	r3, [r2, #0]
			if (Analyze_trend(adc_buffer3_com, VPA1Z) == 1
 8001cf6:	4b7e      	ldr	r3, [pc, #504]	@ (8001ef0 <Determine_component+0x958>)
 8001cf8:	edd3 7a00 	vldr	s15, [r3]
 8001cfc:	eeb0 0a67 	vmov.f32	s0, s15
 8001d00:	4877      	ldr	r0, [pc, #476]	@ (8001ee0 <Determine_component+0x948>)
 8001d02:	f000 fac5 	bl	8002290 <Analyze_trend>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d175      	bne.n	8001df8 <Determine_component+0x860>
					&& Analyze_trend(adc_buffer4_com, VPA1F) == -1) {
 8001d0c:	4b77      	ldr	r3, [pc, #476]	@ (8001eec <Determine_component+0x954>)
 8001d0e:	edd3 7a00 	vldr	s15, [r3]
 8001d12:	eeb0 0a67 	vmov.f32	s0, s15
 8001d16:	4873      	ldr	r0, [pc, #460]	@ (8001ee4 <Determine_component+0x94c>)
 8001d18:	f000 faba 	bl	8002290 <Analyze_trend>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d22:	d169      	bne.n	8001df8 <Determine_component+0x860>
				component.type = COMPONENT_C;   //计算小c
 8001d24:	4b73      	ldr	r3, [pc, #460]	@ (8001ef4 <Determine_component+0x95c>)
 8001d26:	2202      	movs	r2, #2
 8001d28:	701a      	strb	r2, [r3, #0]
				float v_initial = 0.0f;
 8001d2a:	f04f 0300 	mov.w	r3, #0
 8001d2e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
				for (int i = 0; i < BUFFER_SIZE; i++) {
 8001d32:	2300      	movs	r3, #0
 8001d34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001d38:	e024      	b.n	8001d84 <Determine_component+0x7ec>
					float voltage = (adc_buffer3_com[i] * VREF) / 4095.0f;
 8001d3a:	4a69      	ldr	r2, [pc, #420]	@ (8001ee0 <Determine_component+0x948>)
 8001d3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001d40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d44:	ee07 3a90 	vmov	s15, r3
 8001d48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d4c:	ed9f 7a6a 	vldr	s14, [pc, #424]	@ 8001ef8 <Determine_component+0x960>
 8001d50:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001d54:	eddf 6a69 	vldr	s13, [pc, #420]	@ 8001efc <Determine_component+0x964>
 8001d58:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d5c:	edc7 7a08 	vstr	s15, [r7, #32]
					if (voltage > MIN_VOLTAGE) {
 8001d60:	edd7 7a08 	vldr	s15, [r7, #32]
 8001d64:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 8001f00 <Determine_component+0x968>
 8001d68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d70:	dd03      	ble.n	8001d7a <Determine_component+0x7e2>
						v_initial = voltage;
 8001d72:	6a3b      	ldr	r3, [r7, #32]
 8001d74:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
						break;
 8001d78:	e009      	b.n	8001d8e <Determine_component+0x7f6>
				for (int i = 0; i < BUFFER_SIZE; i++) {
 8001d7a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001d7e:	3301      	adds	r3, #1
 8001d80:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001d84:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001d88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001d8c:	dbd5      	blt.n	8001d3a <Determine_component+0x7a2>
				float r_com = (v_initial * R_KNOWN) / (VREF - v_initial);
 8001d8e:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8001d92:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 8001f04 <Determine_component+0x96c>
 8001d96:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001d9a:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 8001ef8 <Determine_component+0x960>
 8001d9e:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8001da2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001da6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001daa:	edc7 7a07 	vstr	s15, [r7, #28]
				sprintf(message1, "Rs=%.2fΩ", r_com);
 8001dae:	69f8      	ldr	r0, [r7, #28]
 8001db0:	f7fe fbd2 	bl	8000558 <__aeabi_f2d>
 8001db4:	4602      	mov	r2, r0
 8001db6:	460b      	mov	r3, r1
 8001db8:	4953      	ldr	r1, [pc, #332]	@ (8001f08 <Determine_component+0x970>)
 8001dba:	4854      	ldr	r0, [pc, #336]	@ (8001f0c <Determine_component+0x974>)
 8001dbc:	f005 fd78 	bl	80078b0 <siprintf>
				float tau = Find_tau_com(adc_buffer3_com);
 8001dc0:	4847      	ldr	r0, [pc, #284]	@ (8001ee0 <Determine_component+0x948>)
 8001dc2:	f000 f8b5 	bl	8001f30 <Find_tau_com>
 8001dc6:	ed87 0a06 	vstr	s0, [r7, #24]
				float c_com = tau / r_com;
 8001dca:	edd7 6a06 	vldr	s13, [r7, #24]
 8001dce:	ed97 7a07 	vldr	s14, [r7, #28]
 8001dd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dd6:	edc7 7a05 	vstr	s15, [r7, #20]
				sprintf(message2, "Cs=%.2fΩ", c_com * 1e6);
 8001dda:	6978      	ldr	r0, [r7, #20]
 8001ddc:	f7fe fbbc 	bl	8000558 <__aeabi_f2d>
 8001de0:	a33b      	add	r3, pc, #236	@ (adr r3, 8001ed0 <Determine_component+0x938>)
 8001de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001de6:	f7fe fc0f 	bl	8000608 <__aeabi_dmul>
 8001dea:	4602      	mov	r2, r0
 8001dec:	460b      	mov	r3, r1
 8001dee:	4948      	ldr	r1, [pc, #288]	@ (8001f10 <Determine_component+0x978>)
 8001df0:	4848      	ldr	r0, [pc, #288]	@ (8001f14 <Determine_component+0x97c>)
 8001df2:	f005 fd5d 	bl	80078b0 <siprintf>
					&& Analyze_trend(adc_buffer4_com, VPA1F) == -1) {
 8001df6:	e066      	b.n	8001ec6 <Determine_component+0x92e>
			if (analyze_Vpicture(adc_buffer3_com, adc_buffer4_com)
 8001df8:	493a      	ldr	r1, [pc, #232]	@ (8001ee4 <Determine_component+0x94c>)
 8001dfa:	4839      	ldr	r0, [pc, #228]	@ (8001ee0 <Determine_component+0x948>)
 8001dfc:	f000 fa20 	bl	8002240 <analyze_Vpicture>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d122      	bne.n	8001e4c <Determine_component+0x8b4>
				component.type = COMPONENT_R;   //
 8001e06:	4b3b      	ldr	r3, [pc, #236]	@ (8001ef4 <Determine_component+0x95c>)
 8001e08:	2201      	movs	r2, #1
 8001e0a:	701a      	strb	r2, [r3, #0]
				float V=calculate_average(adc_buffer3_com);
 8001e0c:	4834      	ldr	r0, [pc, #208]	@ (8001ee0 <Determine_component+0x948>)
 8001e0e:	f000 fc55 	bl	80026bc <calculate_average>
 8001e12:	ed87 0a02 	vstr	s0, [r7, #8]
				R=470000/(VPA0Z-V) * V;
 8001e16:	4b40      	ldr	r3, [pc, #256]	@ (8001f18 <Determine_component+0x980>)
 8001e18:	ed93 7a00 	vldr	s14, [r3]
 8001e1c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e20:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e24:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8001f1c <Determine_component+0x984>
 8001e28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e2c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001e30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e34:	edc7 7a01 	vstr	s15, [r7, #4]
				sprintf(message1, " R=%.2fΩ", R);
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f7fe fb8d 	bl	8000558 <__aeabi_f2d>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	460b      	mov	r3, r1
 8001e42:	4937      	ldr	r1, [pc, #220]	@ (8001f20 <Determine_component+0x988>)
 8001e44:	4831      	ldr	r0, [pc, #196]	@ (8001f0c <Determine_component+0x974>)
 8001e46:	f005 fd33 	bl	80078b0 <siprintf>
}
 8001e4a:	e03c      	b.n	8001ec6 <Determine_component+0x92e>
			} else if (analyze_Vpicture(adc_buffer1_com, adc_buffer2_com)
 8001e4c:	4935      	ldr	r1, [pc, #212]	@ (8001f24 <Determine_component+0x98c>)
 8001e4e:	4836      	ldr	r0, [pc, #216]	@ (8001f28 <Determine_component+0x990>)
 8001e50:	f000 f9f6 	bl	8002240 <analyze_Vpicture>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d135      	bne.n	8001ec6 <Determine_component+0x92e>
				component.type = COMPONENT_R;
 8001e5a:	4b26      	ldr	r3, [pc, #152]	@ (8001ef4 <Determine_component+0x95c>)
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	701a      	strb	r2, [r3, #0]
				GPIO_Set_HighZ(GPIOA, GPIO_PIN_0);
 8001e60:	2101      	movs	r1, #1
 8001e62:	481d      	ldr	r0, [pc, #116]	@ (8001ed8 <Determine_component+0x940>)
 8001e64:	f7ff fafc 	bl	8001460 <GPIO_Set_HighZ>
				GPIO_Set_HighZ(GPIOB, GPIO_PIN_15);
 8001e68:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001e6c:	481b      	ldr	r0, [pc, #108]	@ (8001edc <Determine_component+0x944>)
 8001e6e:	f7ff faf7 	bl	8001460 <GPIO_Set_HighZ>
				memset(adc_buffer3_com, 0, sizeof(adc_buffer3_com));
 8001e72:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001e76:	2100      	movs	r1, #0
 8001e78:	4819      	ldr	r0, [pc, #100]	@ (8001ee0 <Determine_component+0x948>)
 8001e7a:	f005 fd8e 	bl	800799a <memset>
				DMA_Measure_com(3, adc_buffer3_com);
 8001e7e:	4918      	ldr	r1, [pc, #96]	@ (8001ee0 <Determine_component+0x948>)
 8001e80:	2003      	movs	r0, #3
 8001e82:	f000 fc67 	bl	8002754 <DMA_Measure_com>
				float V = calculate_average(adc_buffer3_com);
 8001e86:	4816      	ldr	r0, [pc, #88]	@ (8001ee0 <Determine_component+0x948>)
 8001e88:	f000 fc18 	bl	80026bc <calculate_average>
 8001e8c:	ed87 0a04 	vstr	s0, [r7, #16]
				R = 5100 / (VPA0Z-V) * V;
 8001e90:	4b21      	ldr	r3, [pc, #132]	@ (8001f18 <Determine_component+0x980>)
 8001e92:	ed93 7a00 	vldr	s14, [r3]
 8001e96:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e9a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e9e:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8001f2c <Determine_component+0x994>
 8001ea2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ea6:	ed97 7a04 	vldr	s14, [r7, #16]
 8001eaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eae:	edc7 7a03 	vstr	s15, [r7, #12]
				sprintf(message1, " R=%.2fΩ", R);
 8001eb2:	68f8      	ldr	r0, [r7, #12]
 8001eb4:	f7fe fb50 	bl	8000558 <__aeabi_f2d>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	460b      	mov	r3, r1
 8001ebc:	4918      	ldr	r1, [pc, #96]	@ (8001f20 <Determine_component+0x988>)
 8001ebe:	4813      	ldr	r0, [pc, #76]	@ (8001f0c <Determine_component+0x974>)
 8001ec0:	f005 fcf6 	bl	80078b0 <siprintf>
}
 8001ec4:	e7ff      	b.n	8001ec6 <Determine_component+0x92e>
 8001ec6:	bf00      	nop
 8001ec8:	37c0      	adds	r7, #192	@ 0xc0
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bdb0      	pop	{r4, r5, r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	00000000 	.word	0x00000000
 8001ed4:	412e8480 	.word	0x412e8480
 8001ed8:	40020000 	.word	0x40020000
 8001edc:	40020400 	.word	0x40020400
 8001ee0:	20002320 	.word	0x20002320
 8001ee4:	20003320 	.word	0x20003320
 8001ee8:	20004324 	.word	0x20004324
 8001eec:	2000432c 	.word	0x2000432c
 8001ef0:	20004328 	.word	0x20004328
 8001ef4:	200002ec 	.word	0x200002ec
 8001ef8:	40533333 	.word	0x40533333
 8001efc:	457ff000 	.word	0x457ff000
 8001f00:	3d4ccccd 	.word	0x3d4ccccd
 8001f04:	424c0000 	.word	0x424c0000
 8001f08:	08009f58 	.word	0x08009f58
 8001f0c:	20004348 	.word	0x20004348
 8001f10:	08009f88 	.word	0x08009f88
 8001f14:	200043c8 	.word	0x200043c8
 8001f18:	20004340 	.word	0x20004340
 8001f1c:	48e57e00 	.word	0x48e57e00
 8001f20:	08009f94 	.word	0x08009f94
 8001f24:	20001320 	.word	0x20001320
 8001f28:	20000320 	.word	0x20000320
 8001f2c:	459f6000 	.word	0x459f6000

08001f30 <Find_tau_com>:
float Find_tau_com(uint16_t *adc_buffer) {
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b092      	sub	sp, #72	@ 0x48
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
	// 1. 寻找起始点
	float start_index = 0;
 8001f38:	f04f 0300 	mov.w	r3, #0
 8001f3c:	647b      	str	r3, [r7, #68]	@ 0x44
	float v_start = 0;
 8001f3e:	f04f 0300 	mov.w	r3, #0
 8001f42:	637b      	str	r3, [r7, #52]	@ 0x34

	for (int i = 0; i < BUFFER_SIZE; i++) {
 8001f44:	2300      	movs	r3, #0
 8001f46:	643b      	str	r3, [r7, #64]	@ 0x40
 8001f48:	e028      	b.n	8001f9c <Find_tau_com+0x6c>
		float voltage = (adc_buffer[i] * VREF) / 4095.0f;
 8001f4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	4413      	add	r3, r2
 8001f52:	881b      	ldrh	r3, [r3, #0]
 8001f54:	ee07 3a90 	vmov	s15, r3
 8001f58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f5c:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 80021b0 <Find_tau_com+0x280>
 8001f60:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f64:	eddf 6a93 	vldr	s13, [pc, #588]	@ 80021b4 <Find_tau_com+0x284>
 8001f68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f6c:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		if (voltage > MIN_VOLTAGE) {
 8001f70:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001f74:	ed9f 7a90 	vldr	s14, [pc, #576]	@ 80021b8 <Find_tau_com+0x288>
 8001f78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f80:	dd09      	ble.n	8001f96 <Find_tau_com+0x66>
			start_index = i;
 8001f82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f84:	ee07 3a90 	vmov	s15, r3
 8001f88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f8c:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
			v_start = voltage;
 8001f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f92:	637b      	str	r3, [r7, #52]	@ 0x34
			break;
 8001f94:	e006      	b.n	8001fa4 <Find_tau_com+0x74>
	for (int i = 0; i < BUFFER_SIZE; i++) {
 8001f96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f98:	3301      	adds	r3, #1
 8001f9a:	643b      	str	r3, [r7, #64]	@ 0x40
 8001f9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f9e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001fa2:	dbd2      	blt.n	8001f4a <Find_tau_com+0x1a>
		}
	}

	// 2. 更准确地检测稳态点和稳态电压
	float v_steady = (adc_buffer[BUFFER_SIZE - 1] * VREF) / 4095.0f;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f603 73fe 	addw	r3, r3, #4094	@ 0xffe
 8001faa:	881b      	ldrh	r3, [r3, #0]
 8001fac:	ee07 3a90 	vmov	s15, r3
 8001fb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fb4:	ed9f 7a7e 	vldr	s14, [pc, #504]	@ 80021b0 <Find_tau_com+0x280>
 8001fb8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001fbc:	eddf 6a7d 	vldr	s13, [pc, #500]	@ 80021b4 <Find_tau_com+0x284>
 8001fc0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fc4:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c


	// 3. 寻找目标电压点（使用改进的算法）
	float v_target1 = v_steady * 0.632;  // 1个时间常数
 8001fc8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001fca:	f7fe fac5 	bl	8000558 <__aeabi_f2d>
 8001fce:	a374      	add	r3, pc, #464	@ (adr r3, 80021a0 <Find_tau_com+0x270>)
 8001fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd4:	f7fe fb18 	bl	8000608 <__aeabi_dmul>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	460b      	mov	r3, r1
 8001fdc:	4610      	mov	r0, r2
 8001fde:	4619      	mov	r1, r3
 8001fe0:	f7fe fdea 	bl	8000bb8 <__aeabi_d2f>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	62bb      	str	r3, [r7, #40]	@ 0x28
	float v_target2 = v_steady * 0.865;  // 2个时间常数
 8001fe8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001fea:	f7fe fab5 	bl	8000558 <__aeabi_f2d>
 8001fee:	a36e      	add	r3, pc, #440	@ (adr r3, 80021a8 <Find_tau_com+0x278>)
 8001ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ff4:	f7fe fb08 	bl	8000608 <__aeabi_dmul>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	4610      	mov	r0, r2
 8001ffe:	4619      	mov	r1, r3
 8002000:	f7fe fdda 	bl	8000bb8 <__aeabi_d2f>
 8002004:	4603      	mov	r3, r0
 8002006:	627b      	str	r3, [r7, #36]	@ 0x24

	uint16_t index1 = 0, index2 = 0;
 8002008:	2300      	movs	r3, #0
 800200a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800200c:	2300      	movs	r3, #0
 800200e:	87bb      	strh	r3, [r7, #60]	@ 0x3c

	// 使用线性插值提高时间点精度
	for (int i = start_index; i < BUFFER_SIZE - 1; i++) {
 8002010:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002014:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002018:	ee17 3a90 	vmov	r3, s15
 800201c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800201e:	e090      	b.n	8002142 <Find_tau_com+0x212>
		float voltage = (adc_buffer[i] * VREF) / 4095.0f;
 8002020:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	4413      	add	r3, r2
 8002028:	881b      	ldrh	r3, [r3, #0]
 800202a:	ee07 3a90 	vmov	s15, r3
 800202e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002032:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 80021b0 <Find_tau_com+0x280>
 8002036:	ee27 7a87 	vmul.f32	s14, s15, s14
 800203a:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80021b4 <Find_tau_com+0x284>
 800203e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002042:	edc7 7a08 	vstr	s15, [r7, #32]
		float next_voltage = (adc_buffer[i + 1] * VREF) / 4095.0f;
 8002046:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002048:	3301      	adds	r3, #1
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	4413      	add	r3, r2
 8002050:	881b      	ldrh	r3, [r3, #0]
 8002052:	ee07 3a90 	vmov	s15, r3
 8002056:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800205a:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 80021b0 <Find_tau_com+0x280>
 800205e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002062:	eddf 6a54 	vldr	s13, [pc, #336]	@ 80021b4 <Find_tau_com+0x284>
 8002066:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800206a:	edc7 7a07 	vstr	s15, [r7, #28]

		// 插值寻找更准确的交叉点
		if (index1 == 0 && voltage <= v_target1 && next_voltage >= v_target1) {
 800206e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002070:	2b00      	cmp	r3, #0
 8002072:	d12f      	bne.n	80020d4 <Find_tau_com+0x1a4>
 8002074:	ed97 7a08 	vldr	s14, [r7, #32]
 8002078:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800207c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002084:	d826      	bhi.n	80020d4 <Find_tau_com+0x1a4>
 8002086:	ed97 7a07 	vldr	s14, [r7, #28]
 800208a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800208e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002096:	db1d      	blt.n	80020d4 <Find_tau_com+0x1a4>
			float fraction = (v_target1 - voltage) / (next_voltage - voltage);
 8002098:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800209c:	edd7 7a08 	vldr	s15, [r7, #32]
 80020a0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80020a4:	ed97 7a07 	vldr	s14, [r7, #28]
 80020a8:	edd7 7a08 	vldr	s15, [r7, #32]
 80020ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020b4:	edc7 7a06 	vstr	s15, [r7, #24]
			index1 = i + fraction;  // 线性插值计算更精确的位置
 80020b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020ba:	ee07 3a90 	vmov	s15, r3
 80020be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020c2:	edd7 7a06 	vldr	s15, [r7, #24]
 80020c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020ce:	ee17 3a90 	vmov	r3, s15
 80020d2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
		}

		if (index2 == 0 && voltage <= v_target2 && next_voltage >= v_target2) {
 80020d4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d130      	bne.n	800213c <Find_tau_com+0x20c>
 80020da:	ed97 7a08 	vldr	s14, [r7, #32]
 80020de:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80020e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020ea:	d827      	bhi.n	800213c <Find_tau_com+0x20c>
 80020ec:	ed97 7a07 	vldr	s14, [r7, #28]
 80020f0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80020f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020fc:	db1e      	blt.n	800213c <Find_tau_com+0x20c>
			float fraction = (v_target2 - voltage) / (next_voltage - voltage);
 80020fe:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002102:	edd7 7a08 	vldr	s15, [r7, #32]
 8002106:	ee77 6a67 	vsub.f32	s13, s14, s15
 800210a:	ed97 7a07 	vldr	s14, [r7, #28]
 800210e:	edd7 7a08 	vldr	s15, [r7, #32]
 8002112:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002116:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800211a:	edc7 7a05 	vstr	s15, [r7, #20]
			index2 = i + fraction;  // 线性插值计算更精确的位置
 800211e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002120:	ee07 3a90 	vmov	s15, r3
 8002124:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002128:	edd7 7a05 	vldr	s15, [r7, #20]
 800212c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002130:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002134:	ee17 3a90 	vmov	r3, s15
 8002138:	87bb      	strh	r3, [r7, #60]	@ 0x3c
			break;
 800213a:	e008      	b.n	800214e <Find_tau_com+0x21e>
	for (int i = start_index; i < BUFFER_SIZE - 1; i++) {
 800213c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800213e:	3301      	adds	r3, #1
 8002140:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002142:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002144:	f240 72fe 	movw	r2, #2046	@ 0x7fe
 8002148:	4293      	cmp	r3, r2
 800214a:	f77f af69 	ble.w	8002020 <Find_tau_com+0xf0>
		}
	}

	// 4. 计算时间常数（改进计算方法）
	if (index1 > 0 && index2 > 0 && index2 - index1 > 50) {
 800214e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002150:	2b00      	cmp	r3, #0
 8002152:	d01a      	beq.n	800218a <Find_tau_com+0x25a>
 8002154:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8002156:	2b00      	cmp	r3, #0
 8002158:	d017      	beq.n	800218a <Find_tau_com+0x25a>
 800215a:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 800215c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	2b32      	cmp	r3, #50	@ 0x32
 8002162:	dd12      	ble.n	800218a <Find_tau_com+0x25a>
		// 使用两个时间点计算时间常数，提高准确性
		float delta_index = index2 - index1;
 8002164:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8002166:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	ee07 3a90 	vmov	s15, r3
 800216e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002172:	edc7 7a04 	vstr	s15, [r7, #16]
		float tau = delta_index * (1.0f / SAMPLE_RATE);
 8002176:	edd7 7a04 	vldr	s15, [r7, #16]
 800217a:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80021bc <Find_tau_com+0x28c>
 800217e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002182:	edc7 7a03 	vstr	s15, [r7, #12]
		return tau;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	e001      	b.n	800218e <Find_tau_com+0x25e>
	} else {
		return 0;  // 无法计算有效时间常数
 800218a:	f04f 0300 	mov.w	r3, #0
	}
}
 800218e:	ee07 3a90 	vmov	s15, r3
 8002192:	eeb0 0a67 	vmov.f32	s0, s15
 8002196:	3748      	adds	r7, #72	@ 0x48
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	f3af 8000 	nop.w
 80021a0:	10624dd3 	.word	0x10624dd3
 80021a4:	3fe43958 	.word	0x3fe43958
 80021a8:	7ae147ae 	.word	0x7ae147ae
 80021ac:	3febae14 	.word	0x3febae14
 80021b0:	40533333 	.word	0x40533333
 80021b4:	457ff000 	.word	0x457ff000
 80021b8:	3d4ccccd 	.word	0x3d4ccccd
 80021bc:	360637bd 	.word	0x360637bd

080021c0 <steady_test>:
int steady_test(uint16_t *adc_buffer, float V) {
 80021c0:	b5b0      	push	{r4, r5, r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	ed87 0a00 	vstr	s0, [r7]
	float v_end = (adc_buffer[BUFFER_SIZE - 1] * VREF) / 4095.0f;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f603 73fe 	addw	r3, r3, #4094	@ 0xffe
 80021d2:	881b      	ldrh	r3, [r3, #0]
 80021d4:	ee07 3a90 	vmov	s15, r3
 80021d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021dc:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8002238 <steady_test+0x78>
 80021e0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80021e4:	eddf 6a15 	vldr	s13, [pc, #84]	@ 800223c <steady_test+0x7c>
 80021e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021ec:	edc7 7a03 	vstr	s15, [r7, #12]
	if (v_end > 0.98 * V) {
 80021f0:	68f8      	ldr	r0, [r7, #12]
 80021f2:	f7fe f9b1 	bl	8000558 <__aeabi_f2d>
 80021f6:	4604      	mov	r4, r0
 80021f8:	460d      	mov	r5, r1
 80021fa:	6838      	ldr	r0, [r7, #0]
 80021fc:	f7fe f9ac 	bl	8000558 <__aeabi_f2d>
 8002200:	a30b      	add	r3, pc, #44	@ (adr r3, 8002230 <steady_test+0x70>)
 8002202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002206:	f7fe f9ff 	bl	8000608 <__aeabi_dmul>
 800220a:	4602      	mov	r2, r0
 800220c:	460b      	mov	r3, r1
 800220e:	4620      	mov	r0, r4
 8002210:	4629      	mov	r1, r5
 8002212:	f7fe fc89 	bl	8000b28 <__aeabi_dcmpgt>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <steady_test+0x60>
		return 1;
 800221c:	2301      	movs	r3, #1
 800221e:	e000      	b.n	8002222 <steady_test+0x62>
	} else {
		return 0;
 8002220:	2300      	movs	r3, #0
	}
}
 8002222:	4618      	mov	r0, r3
 8002224:	3710      	adds	r7, #16
 8002226:	46bd      	mov	sp, r7
 8002228:	bdb0      	pop	{r4, r5, r7, pc}
 800222a:	bf00      	nop
 800222c:	f3af 8000 	nop.w
 8002230:	f5c28f5c 	.word	0xf5c28f5c
 8002234:	3fef5c28 	.word	0x3fef5c28
 8002238:	40533333 	.word	0x40533333
 800223c:	457ff000 	.word	0x457ff000

08002240 <analyze_Vpicture>:
int analyze_Vpicture(uint16_t *adc_buffer, uint16_t *adc_buffer2) {
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
    float ave1=calculate_average(adc_buffer);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 fa36 	bl	80026bc <calculate_average>
 8002250:	ed87 0a03 	vstr	s0, [r7, #12]
    float ave2=calculate_average(adc_buffer2);
 8002254:	6838      	ldr	r0, [r7, #0]
 8002256:	f000 fa31 	bl	80026bc <calculate_average>
 800225a:	ed87 0a02 	vstr	s0, [r7, #8]
    if(ave1>=0.3){
 800225e:	68f8      	ldr	r0, [r7, #12]
 8002260:	f7fe f97a 	bl	8000558 <__aeabi_f2d>
 8002264:	a308      	add	r3, pc, #32	@ (adr r3, 8002288 <analyze_Vpicture+0x48>)
 8002266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800226a:	f7fe fc53 	bl	8000b14 <__aeabi_dcmpge>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <analyze_Vpicture+0x38>
    	return 1;
 8002274:	2301      	movs	r3, #1
 8002276:	e000      	b.n	800227a <analyze_Vpicture+0x3a>
    }else{
    	return 0;
 8002278:	2300      	movs	r3, #0
    }
}
 800227a:	4618      	mov	r0, r3
 800227c:	3710      	adds	r7, #16
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	f3af 8000 	nop.w
 8002288:	33333333 	.word	0x33333333
 800228c:	3fd33333 	.word	0x3fd33333

08002290 <Analyze_trend>:

int Analyze_trend(uint16_t *adc_buffer, float V_steady) {
 8002290:	b580      	push	{r7, lr}
 8002292:	b098      	sub	sp, #96	@ 0x60
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	ed87 0a00 	vstr	s0, [r7]
    // 寻找起始有效电压点
    int start_index = -1;
 800229c:	f04f 33ff 	mov.w	r3, #4294967295
 80022a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    float start_voltage = 0.0f;
 80022a2:	f04f 0300 	mov.w	r3, #0
 80022a6:	65bb      	str	r3, [r7, #88]	@ 0x58
    for (int i = 0; i < BUFFER_SIZE; i++) {
 80022a8:	2300      	movs	r3, #0
 80022aa:	657b      	str	r3, [r7, #84]	@ 0x54
 80022ac:	e023      	b.n	80022f6 <Analyze_trend+0x66>
        float voltage = (adc_buffer[i] * VREF) / 4095.0f;
 80022ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	4413      	add	r3, r2
 80022b6:	881b      	ldrh	r3, [r3, #0]
 80022b8:	ee07 3a90 	vmov	s15, r3
 80022bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022c0:	ed9f 7abb 	vldr	s14, [pc, #748]	@ 80025b0 <Analyze_trend+0x320>
 80022c4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80022c8:	eddf 6aba 	vldr	s13, [pc, #744]	@ 80025b4 <Analyze_trend+0x324>
 80022cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022d0:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        if (voltage > MIN_VOLTAGE) {
 80022d4:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80022d8:	ed9f 7ab7 	vldr	s14, [pc, #732]	@ 80025b8 <Analyze_trend+0x328>
 80022dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022e4:	dd04      	ble.n	80022f0 <Analyze_trend+0x60>
            start_index = i;
 80022e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
            start_voltage = voltage;
 80022ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022ec:	65bb      	str	r3, [r7, #88]	@ 0x58
            break;
 80022ee:	e006      	b.n	80022fe <Analyze_trend+0x6e>
    for (int i = 0; i < BUFFER_SIZE; i++) {
 80022f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022f2:	3301      	adds	r3, #1
 80022f4:	657b      	str	r3, [r7, #84]	@ 0x54
 80022f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80022fc:	dbd7      	blt.n	80022ae <Analyze_trend+0x1e>
        }
    }

    if (start_index == -1) return 0; // 无有效数据
 80022fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002304:	d101      	bne.n	800230a <Analyze_trend+0x7a>
 8002306:	2300      	movs	r3, #0
 8002308:	e146      	b.n	8002598 <Analyze_trend+0x308>

    // 计算结束电压（取最后10%数据的平均值）
    float end_voltage = 0.0f;
 800230a:	f04f 0300 	mov.w	r3, #0
 800230e:	653b      	str	r3, [r7, #80]	@ 0x50
    int count = 0;
 8002310:	2300      	movs	r3, #0
 8002312:	64fb      	str	r3, [r7, #76]	@ 0x4c
    for (int i = BUFFER_SIZE * 0.9; i < BUFFER_SIZE; i++) {
 8002314:	f240 7333 	movw	r3, #1843	@ 0x733
 8002318:	64bb      	str	r3, [r7, #72]	@ 0x48
 800231a:	e020      	b.n	800235e <Analyze_trend+0xce>
        if (i >= start_index) {
 800231c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800231e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002320:	429a      	cmp	r2, r3
 8002322:	db19      	blt.n	8002358 <Analyze_trend+0xc8>
            end_voltage += (adc_buffer[i] * VREF) / 4095.0f;
 8002324:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	4413      	add	r3, r2
 800232c:	881b      	ldrh	r3, [r3, #0]
 800232e:	ee07 3a90 	vmov	s15, r3
 8002332:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002336:	ed9f 7a9e 	vldr	s14, [pc, #632]	@ 80025b0 <Analyze_trend+0x320>
 800233a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800233e:	eddf 6a9d 	vldr	s13, [pc, #628]	@ 80025b4 <Analyze_trend+0x324>
 8002342:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002346:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800234a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800234e:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
            count++;
 8002352:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002354:	3301      	adds	r3, #1
 8002356:	64fb      	str	r3, [r7, #76]	@ 0x4c
    for (int i = BUFFER_SIZE * 0.9; i < BUFFER_SIZE; i++) {
 8002358:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800235a:	3301      	adds	r3, #1
 800235c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800235e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002360:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002364:	dbda      	blt.n	800231c <Analyze_trend+0x8c>
        }
    }

    if (count == 0) return 0;
 8002366:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002368:	2b00      	cmp	r3, #0
 800236a:	d101      	bne.n	8002370 <Analyze_trend+0xe0>
 800236c:	2300      	movs	r3, #0
 800236e:	e113      	b.n	8002598 <Analyze_trend+0x308>
    end_voltage /= count;
 8002370:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002372:	ee07 3a90 	vmov	s15, r3
 8002376:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800237a:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 800237e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002382:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50

    // 计算电压变化量
    float delta_voltage = end_voltage - start_voltage;
 8002386:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800238a:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800238e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002392:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

    // 判断基本趋势
    if (fabsf(delta_voltage) < 0.1) return 0; // 无明显趋势
 8002396:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800239a:	eef0 7ae7 	vabs.f32	s15, s15
 800239e:	ee17 0a90 	vmov	r0, s15
 80023a2:	f7fe f8d9 	bl	8000558 <__aeabi_f2d>
 80023a6:	a37e      	add	r3, pc, #504	@ (adr r3, 80025a0 <Analyze_trend+0x310>)
 80023a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ac:	f7fe fb9e 	bl	8000aec <__aeabi_dcmplt>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <Analyze_trend+0x12a>
 80023b6:	2300      	movs	r3, #0
 80023b8:	e0ee      	b.n	8002598 <Analyze_trend+0x308>

    // 计算前20%数据的平均上升速率（用于区分电阻和电容）
    float fast_rising_threshold = 0.03f; // 快速上升阈值（V/采样点）
 80023ba:	4b80      	ldr	r3, [pc, #512]	@ (80025bc <Analyze_trend+0x32c>)
 80023bc:	627b      	str	r3, [r7, #36]	@ 0x24
    float avg_initial_slope = 0.0f;
 80023be:	f04f 0300 	mov.w	r3, #0
 80023c2:	647b      	str	r3, [r7, #68]	@ 0x44
    int initial_points = BUFFER_SIZE * 0.2;
 80023c4:	f240 1399 	movw	r3, #409	@ 0x199
 80023c8:	623b      	str	r3, [r7, #32]
    int valid_initial_points = 0;
 80023ca:	2300      	movs	r3, #0
 80023cc:	643b      	str	r3, [r7, #64]	@ 0x40

    for (int i = start_index; i < start_index + initial_points && i < BUFFER_SIZE - 1; i++) {
 80023ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80023d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80023d2:	e028      	b.n	8002426 <Analyze_trend+0x196>
        float slope = ((adc_buffer[i+1] - adc_buffer[i]) * VREF) / 4095.0f;
 80023d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023d6:	3301      	adds	r3, #1
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	4413      	add	r3, r2
 80023de:	881b      	ldrh	r3, [r3, #0]
 80023e0:	4619      	mov	r1, r3
 80023e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023e4:	005b      	lsls	r3, r3, #1
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	4413      	add	r3, r2
 80023ea:	881b      	ldrh	r3, [r3, #0]
 80023ec:	1acb      	subs	r3, r1, r3
 80023ee:	ee07 3a90 	vmov	s15, r3
 80023f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023f6:	ed9f 7a6e 	vldr	s14, [pc, #440]	@ 80025b0 <Analyze_trend+0x320>
 80023fa:	ee27 7a87 	vmul.f32	s14, s15, s14
 80023fe:	eddf 6a6d 	vldr	s13, [pc, #436]	@ 80025b4 <Analyze_trend+0x324>
 8002402:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002406:	edc7 7a07 	vstr	s15, [r7, #28]
        avg_initial_slope += slope;
 800240a:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 800240e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002412:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002416:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
        valid_initial_points++;
 800241a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800241c:	3301      	adds	r3, #1
 800241e:	643b      	str	r3, [r7, #64]	@ 0x40
    for (int i = start_index; i < start_index + initial_points && i < BUFFER_SIZE - 1; i++) {
 8002420:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002422:	3301      	adds	r3, #1
 8002424:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002426:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002428:	6a3b      	ldr	r3, [r7, #32]
 800242a:	4413      	add	r3, r2
 800242c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800242e:	429a      	cmp	r2, r3
 8002430:	da04      	bge.n	800243c <Analyze_trend+0x1ac>
 8002432:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002434:	f240 72fe 	movw	r2, #2046	@ 0x7fe
 8002438:	4293      	cmp	r3, r2
 800243a:	ddcb      	ble.n	80023d4 <Analyze_trend+0x144>
    }

    if (valid_initial_points > 0) {
 800243c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800243e:	2b00      	cmp	r3, #0
 8002440:	dd0a      	ble.n	8002458 <Analyze_trend+0x1c8>
        avg_initial_slope /= valid_initial_points;
 8002442:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002444:	ee07 3a90 	vmov	s15, r3
 8002448:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800244c:	edd7 6a11 	vldr	s13, [r7, #68]	@ 0x44
 8002450:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002454:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    }

    // 计算曲线非线性度（电容充电为指数曲线，电阻为线性）
    float nonlinearity = 0.0f;
 8002458:	f04f 0300 	mov.w	r3, #0
 800245c:	63bb      	str	r3, [r7, #56]	@ 0x38
    int curve_points = BUFFER_SIZE * 0.5;
 800245e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002462:	61bb      	str	r3, [r7, #24]
    int valid_curve_points = 0;
 8002464:	2300      	movs	r3, #0
 8002466:	637b      	str	r3, [r7, #52]	@ 0x34

    for (int i = start_index; i < start_index + curve_points && i < BUFFER_SIZE - 2; i++) {
 8002468:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800246a:	633b      	str	r3, [r7, #48]	@ 0x30
 800246c:	e05a      	b.n	8002524 <Analyze_trend+0x294>
        float v1 = (adc_buffer[i] * VREF) / 4095.0f;
 800246e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	4413      	add	r3, r2
 8002476:	881b      	ldrh	r3, [r3, #0]
 8002478:	ee07 3a90 	vmov	s15, r3
 800247c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002480:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 80025b0 <Analyze_trend+0x320>
 8002484:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002488:	eddf 6a4a 	vldr	s13, [pc, #296]	@ 80025b4 <Analyze_trend+0x324>
 800248c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002490:	edc7 7a05 	vstr	s15, [r7, #20]
        float v2 = (adc_buffer[i+1] * VREF) / 4095.0f;
 8002494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002496:	3301      	adds	r3, #1
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	4413      	add	r3, r2
 800249e:	881b      	ldrh	r3, [r3, #0]
 80024a0:	ee07 3a90 	vmov	s15, r3
 80024a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024a8:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 80025b0 <Analyze_trend+0x320>
 80024ac:	ee27 7a87 	vmul.f32	s14, s15, s14
 80024b0:	eddf 6a40 	vldr	s13, [pc, #256]	@ 80025b4 <Analyze_trend+0x324>
 80024b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024b8:	edc7 7a04 	vstr	s15, [r7, #16]
        float v3 = (adc_buffer[i+2] * VREF) / 4095.0f;
 80024bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024be:	3302      	adds	r3, #2
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	4413      	add	r3, r2
 80024c6:	881b      	ldrh	r3, [r3, #0]
 80024c8:	ee07 3a90 	vmov	s15, r3
 80024cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024d0:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 80025b0 <Analyze_trend+0x320>
 80024d4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80024d8:	eddf 6a36 	vldr	s13, [pc, #216]	@ 80025b4 <Analyze_trend+0x324>
 80024dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024e0:	edc7 7a03 	vstr	s15, [r7, #12]

        // 线性度指标：(v3-v2)与(v2-v1)的差异
        float linear_diff = fabsf((v3 - v2) - (v2 - v1));
 80024e4:	ed97 7a03 	vldr	s14, [r7, #12]
 80024e8:	edd7 7a04 	vldr	s15, [r7, #16]
 80024ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80024f0:	edd7 6a04 	vldr	s13, [r7, #16]
 80024f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80024f8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80024fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002500:	eef0 7ae7 	vabs.f32	s15, s15
 8002504:	edc7 7a02 	vstr	s15, [r7, #8]
        nonlinearity += linear_diff;
 8002508:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 800250c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002510:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002514:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
        valid_curve_points++;
 8002518:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800251a:	3301      	adds	r3, #1
 800251c:	637b      	str	r3, [r7, #52]	@ 0x34
    for (int i = start_index; i < start_index + curve_points && i < BUFFER_SIZE - 2; i++) {
 800251e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002520:	3301      	adds	r3, #1
 8002522:	633b      	str	r3, [r7, #48]	@ 0x30
 8002524:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	4413      	add	r3, r2
 800252a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800252c:	429a      	cmp	r2, r3
 800252e:	da04      	bge.n	800253a <Analyze_trend+0x2aa>
 8002530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002532:	f240 72fd 	movw	r2, #2045	@ 0x7fd
 8002536:	4293      	cmp	r3, r2
 8002538:	dd99      	ble.n	800246e <Analyze_trend+0x1de>
    }

    if (valid_curve_points > 0) {
 800253a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800253c:	2b00      	cmp	r3, #0
 800253e:	dd0a      	ble.n	8002556 <Analyze_trend+0x2c6>
        nonlinearity /= valid_curve_points;
 8002540:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002542:	ee07 3a90 	vmov	s15, r3
 8002546:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800254a:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 800254e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002552:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    }

    // 关键判断逻辑：
    // 1. 若初始上升速率快且非线性度低，认为是电阻（返回0）
    // 2. 若初始上升速率慢且非线性度高，认为是电容（返回1）
    if (delta_voltage > 0) {
 8002556:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800255a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800255e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002562:	dd17      	ble.n	8002594 <Analyze_trend+0x304>
        if (avg_initial_slope > fast_rising_threshold && nonlinearity < 0.005) {
 8002564:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8002568:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800256c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002574:	dd0c      	ble.n	8002590 <Analyze_trend+0x300>
 8002576:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002578:	f7fd ffee 	bl	8000558 <__aeabi_f2d>
 800257c:	a30a      	add	r3, pc, #40	@ (adr r3, 80025a8 <Analyze_trend+0x318>)
 800257e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002582:	f7fe fab3 	bl	8000aec <__aeabi_dcmplt>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <Analyze_trend+0x300>
            return 0; // 大电阻特性（快速上升且接近线性）
 800258c:	2300      	movs	r3, #0
 800258e:	e003      	b.n	8002598 <Analyze_trend+0x308>
        } else {
            return 1; // 电容特性（缓慢上升且非线性）
 8002590:	2301      	movs	r3, #1
 8002592:	e001      	b.n	8002598 <Analyze_trend+0x308>
        }
    } else {
        return -1; // 下降趋势
 8002594:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8002598:	4618      	mov	r0, r3
 800259a:	3760      	adds	r7, #96	@ 0x60
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	9999999a 	.word	0x9999999a
 80025a4:	3fb99999 	.word	0x3fb99999
 80025a8:	47ae147b 	.word	0x47ae147b
 80025ac:	3f747ae1 	.word	0x3f747ae1
 80025b0:	40533333 	.word	0x40533333
 80025b4:	457ff000 	.word	0x457ff000
 80025b8:	3d4ccccd 	.word	0x3d4ccccd
 80025bc:	3cf5c28f 	.word	0x3cf5c28f

080025c0 <Danalyze>:

//
float Danalyze() {
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b088      	sub	sp, #32
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80025ca:	603b      	str	r3, [r7, #0]
	}
	int is_near_2v6(float voltage) {
		return voltage >= 2.5f && voltage <= 2.8f;
	}

	float v1 = calculate_average(adc_buffer1_com);
 80025cc:	4835      	ldr	r0, [pc, #212]	@ (80026a4 <Danalyze+0xe4>)
 80025ce:	f000 f875 	bl	80026bc <calculate_average>
 80025d2:	ed87 0a07 	vstr	s0, [r7, #28]
	float IZ=fabs(VPA0Z-v1)/51;
 80025d6:	4b34      	ldr	r3, [pc, #208]	@ (80026a8 <Danalyze+0xe8>)
 80025d8:	ed93 7a00 	vldr	s14, [r3]
 80025dc:	edd7 7a07 	vldr	s15, [r7, #28]
 80025e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025e4:	eeb0 7ae7 	vabs.f32	s14, s15
 80025e8:	eddf 6a30 	vldr	s13, [pc, #192]	@ 80026ac <Danalyze+0xec>
 80025ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025f0:	edc7 7a06 	vstr	s15, [r7, #24]
	float v2 = calculate_average(adc_buffer2_com);
 80025f4:	482e      	ldr	r0, [pc, #184]	@ (80026b0 <Danalyze+0xf0>)
 80025f6:	f000 f861 	bl	80026bc <calculate_average>
 80025fa:	ed87 0a05 	vstr	s0, [r7, #20]
	float IF=fabs(v2-VPA0F)/51;
 80025fe:	4b2d      	ldr	r3, [pc, #180]	@ (80026b4 <Danalyze+0xf4>)
 8002600:	edd3 7a00 	vldr	s15, [r3]
 8002604:	ed97 7a05 	vldr	s14, [r7, #20]
 8002608:	ee77 7a67 	vsub.f32	s15, s14, s15
 800260c:	eeb0 7ae7 	vabs.f32	s14, s15
 8002610:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80026ac <Danalyze+0xec>
 8002614:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002618:	edc7 7a04 	vstr	s15, [r7, #16]
    float a=IZ/IF;
 800261c:	edd7 6a06 	vldr	s13, [r7, #24]
 8002620:	ed97 7a04 	vldr	s14, [r7, #16]
 8002624:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002628:	edc7 7a03 	vstr	s15, [r7, #12]
    float b=IF/IZ;
 800262c:	edd7 6a04 	vldr	s13, [r7, #16]
 8002630:	ed97 7a06 	vldr	s14, [r7, #24]
 8002634:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002638:	edc7 7a02 	vstr	s15, [r7, #8]
    float delta = fabs(v1 - v2);
 800263c:	ed97 7a07 	vldr	s14, [r7, #28]
 8002640:	edd7 7a05 	vldr	s15, [r7, #20]
 8002644:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002648:	eef0 7ae7 	vabs.f32	s15, s15
 800264c:	edc7 7a01 	vstr	s15, [r7, #4]
    if(a>5||b>=5){
 8002650:	edd7 7a03 	vldr	s15, [r7, #12]
 8002654:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8002658:	eef4 7ac7 	vcmpe.f32	s15, s14
 800265c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002660:	dc08      	bgt.n	8002674 <Danalyze+0xb4>
 8002662:	edd7 7a02 	vldr	s15, [r7, #8]
 8002666:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800266a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800266e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002672:	db10      	blt.n	8002696 <Danalyze+0xd6>
    	if(a>5){
 8002674:	edd7 7a03 	vldr	s15, [r7, #12]
 8002678:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800267c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002684:	dd02      	ble.n	800268c <Danalyze+0xcc>
    		//sprintf(message1, " Z V=%.2fΩ", delta);
    		return delta;
 8002686:	edd7 7a01 	vldr	s15, [r7, #4]
 800268a:	e006      	b.n	800269a <Danalyze+0xda>
    	}else{
    		//sprintf(message1, " F V=%.2fΩ", delta);
    		return -delta;
 800268c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002690:	eef1 7a67 	vneg.f32	s15, s15
 8002694:	e001      	b.n	800269a <Danalyze+0xda>
    	}
    }else{
    	return 0;
 8002696:	eddf 7a08 	vldr	s15, [pc, #32]	@ 80026b8 <Danalyze+0xf8>
    }
}
 800269a:	eeb0 0a67 	vmov.f32	s0, s15
 800269e:	3720      	adds	r7, #32
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	20000320 	.word	0x20000320
 80026a8:	20004340 	.word	0x20004340
 80026ac:	424c0000 	.word	0x424c0000
 80026b0:	20001320 	.word	0x20001320
 80026b4:	20004344 	.word	0x20004344
 80026b8:	00000000 	.word	0x00000000

080026bc <calculate_average>:
//
float calculate_average(uint16_t *buffer) {
 80026bc:	b480      	push	{r7}
 80026be:	b087      	sub	sp, #28
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
	float sum = 0.0f;
 80026c4:	f04f 0300 	mov.w	r3, #0
 80026c8:	617b      	str	r3, [r7, #20]
	int count = 0;
 80026ca:	2300      	movs	r3, #0
 80026cc:	613b      	str	r3, [r7, #16]
	for (int i = 100; i < BUFFER_SIZE; i += SAMPLE_STEP) {
 80026ce:	2364      	movs	r3, #100	@ 0x64
 80026d0:	60fb      	str	r3, [r7, #12]
 80026d2:	e014      	b.n	80026fe <calculate_average+0x42>
		sum += buffer[i];
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	4413      	add	r3, r2
 80026dc:	881b      	ldrh	r3, [r3, #0]
 80026de:	ee07 3a90 	vmov	s15, r3
 80026e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026e6:	ed97 7a05 	vldr	s14, [r7, #20]
 80026ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026ee:	edc7 7a05 	vstr	s15, [r7, #20]
		count++;
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	3301      	adds	r3, #1
 80026f6:	613b      	str	r3, [r7, #16]
	for (int i = 100; i < BUFFER_SIZE; i += SAMPLE_STEP) {
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	3314      	adds	r3, #20
 80026fc:	60fb      	str	r3, [r7, #12]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002704:	dbe6      	blt.n	80026d4 <calculate_average+0x18>
	}
	return (count > 0) ? (sum / count) * VREF / 4095.0f : 0.0f;
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	2b00      	cmp	r3, #0
 800270a:	dd11      	ble.n	8002730 <calculate_average+0x74>
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	ee07 3a90 	vmov	s15, r3
 8002712:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002716:	edd7 6a05 	vldr	s13, [r7, #20]
 800271a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800271e:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8002748 <calculate_average+0x8c>
 8002722:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002726:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800274c <calculate_average+0x90>
 800272a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800272e:	e001      	b.n	8002734 <calculate_average+0x78>
 8002730:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8002750 <calculate_average+0x94>
 8002734:	eef0 7a47 	vmov.f32	s15, s14
}
 8002738:	eeb0 0a67 	vmov.f32	s0, s15
 800273c:	371c      	adds	r7, #28
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	40533333 	.word	0x40533333
 800274c:	457ff000 	.word	0x457ff000
 8002750:	00000000 	.word	0x00000000

08002754 <DMA_Measure_com>:
//
void DMA_Measure_com(int sign, uint16_t *adc_buffer) {
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]
	// 1. 电容放电
	//memset(adc_buffer, 0, BUFFER_SIZE);
	HAL_Delay(50);  // 10ms放电
 800275e:	2032      	movs	r0, #50	@ 0x32
 8002760:	f001 f8b0 	bl	80038c4 <HAL_Delay>

	// 2. 启动DMA采样
	uint32_t start_tick = HAL_GetTick();
 8002764:	f001 f8a2 	bl	80038ac <HAL_GetTick>
 8002768:	60f8      	str	r0, [r7, #12]
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_buffer, BUFFER_SIZE);
 800276a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800276e:	6839      	ldr	r1, [r7, #0]
 8002770:	4831      	ldr	r0, [pc, #196]	@ (8002838 <DMA_Measure_com+0xe4>)
 8002772:	f001 fa1f 	bl	8003bb4 <HAL_ADC_Start_DMA>
	measurement_done = 0;
 8002776:	4b31      	ldr	r3, [pc, #196]	@ (800283c <DMA_Measure_com+0xe8>)
 8002778:	2200      	movs	r2, #0
 800277a:	701a      	strb	r2, [r3, #0]

	// 3. 短暂延时确保DMA已启动
	//HAL_Delay(1);

	if (sign == 1) {
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2b01      	cmp	r3, #1
 8002780:	d105      	bne.n	800278e <DMA_Measure_com+0x3a>
		// STEP_PIN: 高电平
		HAL_GPIO_WritePin(GPIOA, STEP_PIN, GPIO_PIN_SET);
 8002782:	2201      	movs	r2, #1
 8002784:	2101      	movs	r1, #1
 8002786:	482e      	ldr	r0, [pc, #184]	@ (8002840 <DMA_Measure_com+0xec>)
 8002788:	f002 fca6 	bl	80050d8 <HAL_GPIO_WritePin>
 800278c:	e01a      	b.n	80027c4 <DMA_Measure_com+0x70>
	} else if (sign == 2) {
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2b02      	cmp	r3, #2
 8002792:	d105      	bne.n	80027a0 <DMA_Measure_com+0x4c>
		// STEP3_PIN: 高电平
		HAL_GPIO_WritePin(GPIOA, STEP2_PIN, GPIO_PIN_SET);
 8002794:	2201      	movs	r2, #1
 8002796:	2180      	movs	r1, #128	@ 0x80
 8002798:	4829      	ldr	r0, [pc, #164]	@ (8002840 <DMA_Measure_com+0xec>)
 800279a:	f002 fc9d 	bl	80050d8 <HAL_GPIO_WritePin>
 800279e:	e011      	b.n	80027c4 <DMA_Measure_com+0x70>
	} else if (sign == 3) {
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2b03      	cmp	r3, #3
 80027a4:	d105      	bne.n	80027b2 <DMA_Measure_com+0x5e>
		// STEP2_PIN: 高电平
		HAL_GPIO_WritePin(GPIOA, STEP3_PIN, GPIO_PIN_SET);
 80027a6:	2201      	movs	r2, #1
 80027a8:	2110      	movs	r1, #16
 80027aa:	4825      	ldr	r0, [pc, #148]	@ (8002840 <DMA_Measure_com+0xec>)
 80027ac:	f002 fc94 	bl	80050d8 <HAL_GPIO_WritePin>
 80027b0:	e008      	b.n	80027c4 <DMA_Measure_com+0x70>
	} else if (sign == 4) {
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2b04      	cmp	r3, #4
 80027b6:	d105      	bne.n	80027c4 <DMA_Measure_com+0x70>
		HAL_GPIO_WritePin(GPIOB, STEP4_PIN, GPIO_PIN_SET);
 80027b8:	2201      	movs	r2, #1
 80027ba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80027be:	4821      	ldr	r0, [pc, #132]	@ (8002844 <DMA_Measure_com+0xf0>)
 80027c0:	f002 fc8a 	bl	80050d8 <HAL_GPIO_WritePin>
	}

	// 5. 等待测量完成
	while (!measurement_done)
 80027c4:	bf00      	nop
 80027c6:	4b1d      	ldr	r3, [pc, #116]	@ (800283c <DMA_Measure_com+0xe8>)
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d0fa      	beq.n	80027c6 <DMA_Measure_com+0x72>
		;
	HAL_ADC_Stop_DMA(&hadc1);
 80027d0:	4819      	ldr	r0, [pc, #100]	@ (8002838 <DMA_Measure_com+0xe4>)
 80027d2:	f001 fae3 	bl	8003d9c <HAL_ADC_Stop_DMA>
	uint32_t end_tick = HAL_GetTick();
 80027d6:	f001 f869 	bl	80038ac <HAL_GetTick>
 80027da:	60b8      	str	r0, [r7, #8]
	HAL_Delay(50);
 80027dc:	2032      	movs	r0, #50	@ 0x32
 80027de:	f001 f871 	bl	80038c4 <HAL_Delay>
	VPA1 = Sample_PA1_Average();
 80027e2:	f000 f947 	bl	8002a74 <Sample_PA1_Average>
 80027e6:	eef0 7a40 	vmov.f32	s15, s0
 80027ea:	4b17      	ldr	r3, [pc, #92]	@ (8002848 <DMA_Measure_com+0xf4>)
 80027ec:	edc3 7a00 	vstr	s15, [r3]
	VPA0 = Sample_PA0_Average();
 80027f0:	f000 f8f0 	bl	80029d4 <Sample_PA0_Average>
 80027f4:	eef0 7a40 	vmov.f32	s15, s0
 80027f8:	4b14      	ldr	r3, [pc, #80]	@ (800284c <DMA_Measure_com+0xf8>)
 80027fa:	edc3 7a00 	vstr	s15, [r3]
	VPA7 = Sample_PA7_Average();
 80027fe:	f000 f899 	bl	8002934 <Sample_PA7_Average>
 8002802:	eef0 7a40 	vmov.f32	s15, s0
 8002806:	4b12      	ldr	r3, [pc, #72]	@ (8002850 <DMA_Measure_com+0xfc>)
 8002808:	edc3 7a00 	vstr	s15, [r3]
	GPIO_Set_Low(GPIOA, GPIO_PIN_0);
 800280c:	2101      	movs	r1, #1
 800280e:	480c      	ldr	r0, [pc, #48]	@ (8002840 <DMA_Measure_com+0xec>)
 8002810:	f7fe fe70 	bl	80014f4 <GPIO_Set_Low>
	GPIO_Set_Low(GPIOA, GPIO_PIN_4);
 8002814:	2110      	movs	r1, #16
 8002816:	480a      	ldr	r0, [pc, #40]	@ (8002840 <DMA_Measure_com+0xec>)
 8002818:	f7fe fe6c 	bl	80014f4 <GPIO_Set_Low>
	GPIO_Set_Low(GPIOA, GPIO_PIN_7);
 800281c:	2180      	movs	r1, #128	@ 0x80
 800281e:	4808      	ldr	r0, [pc, #32]	@ (8002840 <DMA_Measure_com+0xec>)
 8002820:	f7fe fe68 	bl	80014f4 <GPIO_Set_Low>
	GPIO_Set_Low(GPIOB, GPIO_PIN_15);
 8002824:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002828:	4806      	ldr	r0, [pc, #24]	@ (8002844 <DMA_Measure_com+0xf0>)
 800282a:	f7fe fe63 	bl	80014f4 <GPIO_Set_Low>
	// 6. 分析数据
	// Analyze_ADC_Data();
}
 800282e:	bf00      	nop
 8002830:	3710      	adds	r7, #16
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	200001f0 	.word	0x200001f0
 800283c:	20004320 	.word	0x20004320
 8002840:	40020000 	.word	0x40020000
 8002844:	40020400 	.word	0x40020400
 8002848:	20004324 	.word	0x20004324
 800284c:	2000433c 	.word	0x2000433c
 8002850:	20004330 	.word	0x20004330

08002854 <ADC_SampleWithTemporaryChannel>:
	// Analyze_ADC_Data();
}
//
// 简化的通道切换函数
int ADC_SampleWithTemporaryChannel(ADC_HandleTypeDef* hadc, uint32_t temp_channel,
                                  uint16_t* buffer, int size) {
 8002854:	b580      	push	{r7, lr}
 8002856:	b08a      	sub	sp, #40	@ 0x28
 8002858:	af00      	add	r7, sp, #0
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	607a      	str	r2, [r7, #4]
 8002860:	603b      	str	r3, [r7, #0]
    HAL_StatusTypeDef status;

    // 1. 停止当前ADC DMA
    status = HAL_ADC_Stop_DMA(hadc);
 8002862:	68f8      	ldr	r0, [r7, #12]
 8002864:	f001 fa9a 	bl	8003d9c <HAL_ADC_Stop_DMA>
 8002868:	4603      	mov	r3, r0
 800286a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (status != HAL_OK) return -1;
 800286e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002872:	2b00      	cmp	r3, #0
 8002874:	d002      	beq.n	800287c <ADC_SampleWithTemporaryChannel+0x28>
 8002876:	f04f 33ff 	mov.w	r3, #4294967295
 800287a:	e055      	b.n	8002928 <ADC_SampleWithTemporaryChannel+0xd4>

    // 2. 配置为临时通道
    ADC_ChannelConfTypeDef sConfig = {0};
 800287c:	f107 0314 	add.w	r3, r7, #20
 8002880:	2200      	movs	r2, #0
 8002882:	601a      	str	r2, [r3, #0]
 8002884:	605a      	str	r2, [r3, #4]
 8002886:	609a      	str	r2, [r3, #8]
 8002888:	60da      	str	r2, [r3, #12]
    sConfig.Channel = temp_channel;
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	617b      	str	r3, [r7, #20]
    sConfig.Rank = 1;
 800288e:	2301      	movs	r3, #1
 8002890:	61bb      	str	r3, [r7, #24]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES; // 根据您的需求设置
 8002892:	2300      	movs	r3, #0
 8002894:	61fb      	str	r3, [r7, #28]

    status = HAL_ADC_ConfigChannel(hadc, &sConfig);
 8002896:	f107 0314 	add.w	r3, r7, #20
 800289a:	4619      	mov	r1, r3
 800289c:	68f8      	ldr	r0, [r7, #12]
 800289e:	f001 faeb 	bl	8003e78 <HAL_ADC_ConfigChannel>
 80028a2:	4603      	mov	r3, r0
 80028a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (status != HAL_OK) return -2;
 80028a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d002      	beq.n	80028b6 <ADC_SampleWithTemporaryChannel+0x62>
 80028b0:	f06f 0301 	mvn.w	r3, #1
 80028b4:	e038      	b.n	8002928 <ADC_SampleWithTemporaryChannel+0xd4>

    // 3. 启动临时通道采样
    measurement_done = 0; // 重置完成标志
 80028b6:	4b1e      	ldr	r3, [pc, #120]	@ (8002930 <ADC_SampleWithTemporaryChannel+0xdc>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	701a      	strb	r2, [r3, #0]
    status = HAL_ADC_Start_DMA(hadc, (uint32_t*)buffer, size);
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	461a      	mov	r2, r3
 80028c0:	6879      	ldr	r1, [r7, #4]
 80028c2:	68f8      	ldr	r0, [r7, #12]
 80028c4:	f001 f976 	bl	8003bb4 <HAL_ADC_Start_DMA>
 80028c8:	4603      	mov	r3, r0
 80028ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (status != HAL_OK) return -3;
 80028ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d002      	beq.n	80028dc <ADC_SampleWithTemporaryChannel+0x88>
 80028d6:	f06f 0302 	mvn.w	r3, #2
 80028da:	e025      	b.n	8002928 <ADC_SampleWithTemporaryChannel+0xd4>

    // 4. 等待采样完成
    while (!measurement_done); // 由DMA中断回调设置
 80028dc:	bf00      	nop
 80028de:	4b14      	ldr	r3, [pc, #80]	@ (8002930 <ADC_SampleWithTemporaryChannel+0xdc>)
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d0fa      	beq.n	80028de <ADC_SampleWithTemporaryChannel+0x8a>

    // 5. 停止DMA
    status = HAL_ADC_Stop_DMA(hadc);
 80028e8:	68f8      	ldr	r0, [r7, #12]
 80028ea:	f001 fa57 	bl	8003d9c <HAL_ADC_Stop_DMA>
 80028ee:	4603      	mov	r3, r0
 80028f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (status != HAL_OK) return -4;
 80028f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d002      	beq.n	8002902 <ADC_SampleWithTemporaryChannel+0xae>
 80028fc:	f06f 0303 	mvn.w	r3, #3
 8002900:	e012      	b.n	8002928 <ADC_SampleWithTemporaryChannel+0xd4>

    // 6. 恢复为默认通道1
    sConfig.Channel = ADC_CHANNEL_1;
 8002902:	2301      	movs	r3, #1
 8002904:	617b      	str	r3, [r7, #20]
    status = HAL_ADC_ConfigChannel(hadc, &sConfig);
 8002906:	f107 0314 	add.w	r3, r7, #20
 800290a:	4619      	mov	r1, r3
 800290c:	68f8      	ldr	r0, [r7, #12]
 800290e:	f001 fab3 	bl	8003e78 <HAL_ADC_ConfigChannel>
 8002912:	4603      	mov	r3, r0
 8002914:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (status != HAL_OK) return -5;
 8002918:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800291c:	2b00      	cmp	r3, #0
 800291e:	d002      	beq.n	8002926 <ADC_SampleWithTemporaryChannel+0xd2>
 8002920:	f06f 0304 	mvn.w	r3, #4
 8002924:	e000      	b.n	8002928 <ADC_SampleWithTemporaryChannel+0xd4>


    return 0;
 8002926:	2300      	movs	r3, #0
}
 8002928:	4618      	mov	r0, r3
 800292a:	3728      	adds	r7, #40	@ 0x28
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	20004320 	.word	0x20004320

08002934 <Sample_PA7_Average>:
//
// 简化的采样函数
float Sample_PA7_Average(void) {
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
    memset(adc_buffer2, 0, sizeof(adc_buffer2));
 800293a:	2228      	movs	r2, #40	@ 0x28
 800293c:	2100      	movs	r1, #0
 800293e:	4821      	ldr	r0, [pc, #132]	@ (80029c4 <Sample_PA7_Average+0x90>)
 8002940:	f005 f82b 	bl	800799a <memset>

    int result = ADC_SampleWithTemporaryChannel(&hadc1, ADC_CHANNEL_5,
 8002944:	2314      	movs	r3, #20
 8002946:	4a1f      	ldr	r2, [pc, #124]	@ (80029c4 <Sample_PA7_Average+0x90>)
 8002948:	2105      	movs	r1, #5
 800294a:	481f      	ldr	r0, [pc, #124]	@ (80029c8 <Sample_PA7_Average+0x94>)
 800294c:	f7ff ff82 	bl	8002854 <ADC_SampleWithTemporaryChannel>
 8002950:	6078      	str	r0, [r7, #4]
                                              adc_buffer2, BUFFER2_SIZE);

    if (result == 0) {
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d12c      	bne.n	80029b2 <Sample_PA7_Average+0x7e>
        float sum = 0.0f;
 8002958:	f04f 0300 	mov.w	r3, #0
 800295c:	60fb      	str	r3, [r7, #12]
        for (int i = 0; i < BUFFER2_SIZE; i++) {
 800295e:	2300      	movs	r3, #0
 8002960:	60bb      	str	r3, [r7, #8]
 8002962:	e01c      	b.n	800299e <Sample_PA7_Average+0x6a>
            float voltage = (adc_buffer2[i] * VREF) / 4095.0f;
 8002964:	4a17      	ldr	r2, [pc, #92]	@ (80029c4 <Sample_PA7_Average+0x90>)
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800296c:	ee07 3a90 	vmov	s15, r3
 8002970:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002974:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 80029cc <Sample_PA7_Average+0x98>
 8002978:	ee27 7a87 	vmul.f32	s14, s15, s14
 800297c:	eddf 6a14 	vldr	s13, [pc, #80]	@ 80029d0 <Sample_PA7_Average+0x9c>
 8002980:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002984:	edc7 7a00 	vstr	s15, [r7]
            sum += voltage;
 8002988:	ed97 7a03 	vldr	s14, [r7, #12]
 800298c:	edd7 7a00 	vldr	s15, [r7]
 8002990:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002994:	edc7 7a03 	vstr	s15, [r7, #12]
        for (int i = 0; i < BUFFER2_SIZE; i++) {
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	3301      	adds	r3, #1
 800299c:	60bb      	str	r3, [r7, #8]
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	2b13      	cmp	r3, #19
 80029a2:	dddf      	ble.n	8002964 <Sample_PA7_Average+0x30>
        }
        return sum / BUFFER2_SIZE;
 80029a4:	edd7 7a03 	vldr	s15, [r7, #12]
 80029a8:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 80029ac:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80029b0:	e001      	b.n	80029b6 <Sample_PA7_Average+0x82>
    }
    return -1.0f; // 错误返回值
 80029b2:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
}
 80029b6:	eef0 7a47 	vmov.f32	s15, s14
 80029ba:	eeb0 0a67 	vmov.f32	s0, s15
 80029be:	3710      	adds	r7, #16
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	200002f8 	.word	0x200002f8
 80029c8:	200001f0 	.word	0x200001f0
 80029cc:	40533333 	.word	0x40533333
 80029d0:	457ff000 	.word	0x457ff000

080029d4 <Sample_PA0_Average>:
float Sample_PA0_Average(void) {
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
    memset(adc_buffer2, 0, sizeof(adc_buffer2));
 80029da:	2228      	movs	r2, #40	@ 0x28
 80029dc:	2100      	movs	r1, #0
 80029de:	4821      	ldr	r0, [pc, #132]	@ (8002a64 <Sample_PA0_Average+0x90>)
 80029e0:	f004 ffdb 	bl	800799a <memset>

    int result = ADC_SampleWithTemporaryChannel(&hadc1, ADC_CHANNEL_6,
 80029e4:	2314      	movs	r3, #20
 80029e6:	4a1f      	ldr	r2, [pc, #124]	@ (8002a64 <Sample_PA0_Average+0x90>)
 80029e8:	2106      	movs	r1, #6
 80029ea:	481f      	ldr	r0, [pc, #124]	@ (8002a68 <Sample_PA0_Average+0x94>)
 80029ec:	f7ff ff32 	bl	8002854 <ADC_SampleWithTemporaryChannel>
 80029f0:	6078      	str	r0, [r7, #4]
                                              adc_buffer2, BUFFER2_SIZE);

    if (result == 0) {
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d12c      	bne.n	8002a52 <Sample_PA0_Average+0x7e>
        float sum = 0.0f;
 80029f8:	f04f 0300 	mov.w	r3, #0
 80029fc:	60fb      	str	r3, [r7, #12]
        for (int i = 0; i < BUFFER2_SIZE; i++) {
 80029fe:	2300      	movs	r3, #0
 8002a00:	60bb      	str	r3, [r7, #8]
 8002a02:	e01c      	b.n	8002a3e <Sample_PA0_Average+0x6a>
            float voltage = (adc_buffer2[i] * VREF) / 4095.0f;
 8002a04:	4a17      	ldr	r2, [pc, #92]	@ (8002a64 <Sample_PA0_Average+0x90>)
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a0c:	ee07 3a90 	vmov	s15, r3
 8002a10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a14:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8002a6c <Sample_PA0_Average+0x98>
 8002a18:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002a1c:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8002a70 <Sample_PA0_Average+0x9c>
 8002a20:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a24:	edc7 7a00 	vstr	s15, [r7]
            sum += voltage;
 8002a28:	ed97 7a03 	vldr	s14, [r7, #12]
 8002a2c:	edd7 7a00 	vldr	s15, [r7]
 8002a30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a34:	edc7 7a03 	vstr	s15, [r7, #12]
        for (int i = 0; i < BUFFER2_SIZE; i++) {
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	60bb      	str	r3, [r7, #8]
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	2b13      	cmp	r3, #19
 8002a42:	dddf      	ble.n	8002a04 <Sample_PA0_Average+0x30>
        }
        return sum / BUFFER2_SIZE;
 8002a44:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a48:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 8002a4c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002a50:	e001      	b.n	8002a56 <Sample_PA0_Average+0x82>
    }
    return -1.0f; // 错误返回值
 8002a52:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
}
 8002a56:	eef0 7a47 	vmov.f32	s15, s14
 8002a5a:	eeb0 0a67 	vmov.f32	s0, s15
 8002a5e:	3710      	adds	r7, #16
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	200002f8 	.word	0x200002f8
 8002a68:	200001f0 	.word	0x200001f0
 8002a6c:	40533333 	.word	0x40533333
 8002a70:	457ff000 	.word	0x457ff000

08002a74 <Sample_PA1_Average>:
		Analyze_ADC_RL_TEST();
	}
}
// 分析ADC数据
//
float Sample_PA1_Average(void) {
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0

	memset(adc_buffer2, 0, sizeof(adc_buffer2));
 8002a7a:	2228      	movs	r2, #40	@ 0x28
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	4823      	ldr	r0, [pc, #140]	@ (8002b0c <Sample_PA1_Average+0x98>)
 8002a80:	f004 ff8b 	bl	800799a <memset>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_buffer2, BUFFER2_SIZE);
 8002a84:	2214      	movs	r2, #20
 8002a86:	4921      	ldr	r1, [pc, #132]	@ (8002b0c <Sample_PA1_Average+0x98>)
 8002a88:	4821      	ldr	r0, [pc, #132]	@ (8002b10 <Sample_PA1_Average+0x9c>)
 8002a8a:	f001 f893 	bl	8003bb4 <HAL_ADC_Start_DMA>
	measurement_done = 0;
 8002a8e:	4b21      	ldr	r3, [pc, #132]	@ (8002b14 <Sample_PA1_Average+0xa0>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	701a      	strb	r2, [r3, #0]
	while (!measurement_done)
 8002a94:	bf00      	nop
 8002a96:	4b1f      	ldr	r3, [pc, #124]	@ (8002b14 <Sample_PA1_Average+0xa0>)
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d0fa      	beq.n	8002a96 <Sample_PA1_Average+0x22>
		;
	HAL_ADC_Stop_DMA(&hadc1);
 8002aa0:	481b      	ldr	r0, [pc, #108]	@ (8002b10 <Sample_PA1_Average+0x9c>)
 8002aa2:	f001 f97b 	bl	8003d9c <HAL_ADC_Stop_DMA>
	// 3. 采样 20 次并计算平均值
	float sum = 0.0f;
 8002aa6:	f04f 0300 	mov.w	r3, #0
 8002aaa:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < BUFFER2_SIZE; i++) {
 8002aac:	2300      	movs	r3, #0
 8002aae:	60bb      	str	r3, [r7, #8]
 8002ab0:	e01c      	b.n	8002aec <Sample_PA1_Average+0x78>
		float voltage = (adc_buffer2[i] * VREF) / 4095.0f;
 8002ab2:	4a16      	ldr	r2, [pc, #88]	@ (8002b0c <Sample_PA1_Average+0x98>)
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002aba:	ee07 3a90 	vmov	s15, r3
 8002abe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ac2:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8002b18 <Sample_PA1_Average+0xa4>
 8002ac6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002aca:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8002b1c <Sample_PA1_Average+0xa8>
 8002ace:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ad2:	edc7 7a01 	vstr	s15, [r7, #4]
		sum = sum + voltage;
 8002ad6:	ed97 7a03 	vldr	s14, [r7, #12]
 8002ada:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ade:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ae2:	edc7 7a03 	vstr	s15, [r7, #12]
	for (int i = 0; i < BUFFER2_SIZE; i++) {
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	3301      	adds	r3, #1
 8002aea:	60bb      	str	r3, [r7, #8]
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	2b13      	cmp	r3, #19
 8002af0:	dddf      	ble.n	8002ab2 <Sample_PA1_Average+0x3e>
	}
	// 5. 返回平均值
	return sum / BUFFER2_SIZE;
 8002af2:	edd7 7a03 	vldr	s15, [r7, #12]
 8002af6:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8002afa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002afe:	eef0 7a66 	vmov.f32	s15, s13
}
 8002b02:	eeb0 0a67 	vmov.f32	s0, s15
 8002b06:	3710      	adds	r7, #16
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	200002f8 	.word	0x200002f8
 8002b10:	200001f0 	.word	0x200001f0
 8002b14:	20004320 	.word	0x20004320
 8002b18:	40533333 	.word	0x40533333
 8002b1c:	457ff000 	.word	0x457ff000

08002b20 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002b26:	f000 fe5b 	bl	80037e0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002b2a:	f000 f84d 	bl	8002bc8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002b2e:	f7fe fb19 	bl	8001164 <MX_GPIO_Init>
	MX_DMA_Init();
 8002b32:	f7fe faf7 	bl	8001124 <MX_DMA_Init>
	MX_ADC1_Init();
 8002b36:	f7fe fa25 	bl	8000f84 <MX_ADC1_Init>
	MX_TIM3_Init();
 8002b3a:	f000 fd47 	bl	80035cc <MX_TIM3_Init>
	MX_USART1_UART_Init();
 8002b3e:	f000 fdb3 	bl	80036a8 <MX_USART1_UART_Init>
	MX_I2C1_Init();
 8002b42:	f7fe fb83 	bl	800124c <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	HAL_Delay(30); // 单片机启动比OLED上电快,需要延迟等待一下
 8002b46:	201e      	movs	r0, #30
 8002b48:	f000 febc 	bl	80038c4 <HAL_Delay>
	OLED_Init();
 8002b4c:	f000 f8d2 	bl	8002cf4 <OLED_Init>

	//启用TIM3触发ADC
	TIM_HandleTypeDef *adc_timer = &htim3;
 8002b50:	4b18      	ldr	r3, [pc, #96]	@ (8002bb4 <main+0x94>)
 8002b52:	607b      	str	r3, [r7, #4]
	// 设置采样率 (500kHz)
	adc_timer->Instance->PSC = 100 - 1;   // 99 (CubeMX配置)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2263      	movs	r2, #99	@ 0x63
 8002b5a:	629a      	str	r2, [r3, #40]	@ 0x28
	adc_timer->Instance->ARR = 2 - 1;   // 9 (CubeMX配置);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2201      	movs	r2, #1
 8002b62:	62da      	str	r2, [r3, #44]	@ 0x2c
	//adc_timer->Instance->ARR = 2 - 1;   // 9 (CubeMX配置)
	HAL_TIM_Base_Start(adc_timer);
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f003 fc17 	bl	8006398 <HAL_TIM_Base_Start>
//	  if(pinState==GPIO_PIN_SET){
//		  GPIO_PinState pinState = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
	//	  if(pinState==GPIO_PIN_SET){
	//		  black_box_test();
	//		  }else{
		component_test();
 8002b6a:	f7fe fc01 	bl	8001370 <component_test>

//	  else{
//		  //HAL_DeInit(3000);
//	  }
		//black_box_test();
		OLED_NewFrame();
 8002b6e:	f000 f91d 	bl	8002dac <OLED_NewFrame>
		OLED_PrintString(0, 0, message1, &font16x16, OLED_COLOR_NORMAL);
 8002b72:	2300      	movs	r3, #0
 8002b74:	9300      	str	r3, [sp, #0]
 8002b76:	4b10      	ldr	r3, [pc, #64]	@ (8002bb8 <main+0x98>)
 8002b78:	4a10      	ldr	r2, [pc, #64]	@ (8002bbc <main+0x9c>)
 8002b7a:	2100      	movs	r1, #0
 8002b7c:	2000      	movs	r0, #0
 8002b7e:	f000 fb3b 	bl	80031f8 <OLED_PrintString>
		OLED_PrintString(0, 20, message2, &font16x16, OLED_COLOR_NORMAL);
 8002b82:	2300      	movs	r3, #0
 8002b84:	9300      	str	r3, [sp, #0]
 8002b86:	4b0c      	ldr	r3, [pc, #48]	@ (8002bb8 <main+0x98>)
 8002b88:	4a0d      	ldr	r2, [pc, #52]	@ (8002bc0 <main+0xa0>)
 8002b8a:	2114      	movs	r1, #20
 8002b8c:	2000      	movs	r0, #0
 8002b8e:	f000 fb33 	bl	80031f8 <OLED_PrintString>
		OLED_PrintString(0, 40, msg, &font16x16, OLED_COLOR_NORMAL);
 8002b92:	2300      	movs	r3, #0
 8002b94:	9300      	str	r3, [sp, #0]
 8002b96:	4b08      	ldr	r3, [pc, #32]	@ (8002bb8 <main+0x98>)
 8002b98:	4a0a      	ldr	r2, [pc, #40]	@ (8002bc4 <main+0xa4>)
 8002b9a:	2128      	movs	r1, #40	@ 0x28
 8002b9c:	2000      	movs	r0, #0
 8002b9e:	f000 fb2b 	bl	80031f8 <OLED_PrintString>
		OLED_ShowFrame();
 8002ba2:	f000 f90f 	bl	8002dc4 <OLED_ShowFrame>
		HAL_Delay(1500);  // 每2秒测量一次
 8002ba6:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8002baa:	f000 fe8b 	bl	80038c4 <HAL_Delay>
		component_test();
 8002bae:	bf00      	nop
 8002bb0:	e7db      	b.n	8002b6a <main+0x4a>
 8002bb2:	bf00      	nop
 8002bb4:	200048fc 	.word	0x200048fc
 8002bb8:	0800a68c 	.word	0x0800a68c
 8002bbc:	20004348 	.word	0x20004348
 8002bc0:	200043c8 	.word	0x200043c8
 8002bc4:	20004448 	.word	0x20004448

08002bc8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b094      	sub	sp, #80	@ 0x50
 8002bcc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002bce:	f107 0320 	add.w	r3, r7, #32
 8002bd2:	2230      	movs	r2, #48	@ 0x30
 8002bd4:	2100      	movs	r1, #0
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f004 fedf 	bl	800799a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002bdc:	f107 030c 	add.w	r3, r7, #12
 8002be0:	2200      	movs	r2, #0
 8002be2:	601a      	str	r2, [r3, #0]
 8002be4:	605a      	str	r2, [r3, #4]
 8002be6:	609a      	str	r2, [r3, #8]
 8002be8:	60da      	str	r2, [r3, #12]
 8002bea:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002bec:	2300      	movs	r3, #0
 8002bee:	60bb      	str	r3, [r7, #8]
 8002bf0:	4b27      	ldr	r3, [pc, #156]	@ (8002c90 <SystemClock_Config+0xc8>)
 8002bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf4:	4a26      	ldr	r2, [pc, #152]	@ (8002c90 <SystemClock_Config+0xc8>)
 8002bf6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bfa:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bfc:	4b24      	ldr	r3, [pc, #144]	@ (8002c90 <SystemClock_Config+0xc8>)
 8002bfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c04:	60bb      	str	r3, [r7, #8]
 8002c06:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c08:	2300      	movs	r3, #0
 8002c0a:	607b      	str	r3, [r7, #4]
 8002c0c:	4b21      	ldr	r3, [pc, #132]	@ (8002c94 <SystemClock_Config+0xcc>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a20      	ldr	r2, [pc, #128]	@ (8002c94 <SystemClock_Config+0xcc>)
 8002c12:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002c16:	6013      	str	r3, [r2, #0]
 8002c18:	4b1e      	ldr	r3, [pc, #120]	@ (8002c94 <SystemClock_Config+0xcc>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002c20:	607b      	str	r3, [r7, #4]
 8002c22:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002c24:	2302      	movs	r3, #2
 8002c26:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002c2c:	2310      	movs	r3, #16
 8002c2e:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c30:	2302      	movs	r3, #2
 8002c32:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002c34:	2300      	movs	r3, #0
 8002c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8002c38:	2308      	movs	r3, #8
 8002c3a:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 100;
 8002c3c:	2364      	movs	r3, #100	@ 0x64
 8002c3e:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002c40:	2302      	movs	r3, #2
 8002c42:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8002c44:	2304      	movs	r3, #4
 8002c46:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002c48:	f107 0320 	add.w	r3, r7, #32
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f002 fefb 	bl	8005a48 <HAL_RCC_OscConfig>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d001      	beq.n	8002c5c <SystemClock_Config+0x94>
		Error_Handler();
 8002c58:	f000 f81e 	bl	8002c98 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002c5c:	230f      	movs	r3, #15
 8002c5e:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c60:	2302      	movs	r3, #2
 8002c62:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c64:	2300      	movs	r3, #0
 8002c66:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002c68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c6c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 8002c72:	f107 030c 	add.w	r3, r7, #12
 8002c76:	2103      	movs	r1, #3
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f003 f95d 	bl	8005f38 <HAL_RCC_ClockConfig>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d001      	beq.n	8002c88 <SystemClock_Config+0xc0>
		Error_Handler();
 8002c84:	f000 f808 	bl	8002c98 <Error_Handler>
	}
}
 8002c88:	bf00      	nop
 8002c8a:	3750      	adds	r7, #80	@ 0x50
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	40023800 	.word	0x40023800
 8002c94:	40007000 	.word	0x40007000

08002c98 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c9c:	b672      	cpsid	i
}
 8002c9e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002ca0:	bf00      	nop
 8002ca2:	e7fd      	b.n	8002ca0 <Error_Handler+0x8>

08002ca4 <OLED_Send>:
 * @param len 要发送的数据长度
 * @return None
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他平台时应根据实际情况修改此函数
 */
void OLED_Send(uint8_t *data, uint8_t len)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af02      	add	r7, sp, #8
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	460b      	mov	r3, r1
 8002cae:	70fb      	strb	r3, [r7, #3]
  HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, data, len, HAL_MAX_DELAY);
 8002cb0:	78fb      	ldrb	r3, [r7, #3]
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8002cb8:	9200      	str	r2, [sp, #0]
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	2178      	movs	r1, #120	@ 0x78
 8002cbe:	4803      	ldr	r0, [pc, #12]	@ (8002ccc <OLED_Send+0x28>)
 8002cc0:	f002 fb68 	bl	8005394 <HAL_I2C_Master_Transmit>
}
 8002cc4:	bf00      	nop
 8002cc6:	3708      	adds	r7, #8
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	20000298 	.word	0x20000298

08002cd0 <OLED_SendCmd>:

/**
 * @brief 向OLED发送指令
 */
void OLED_SendCmd(uint8_t cmd)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	71fb      	strb	r3, [r7, #7]
  static uint8_t sendBuffer[2] = {0};
  sendBuffer[1] = cmd;
 8002cda:	4a05      	ldr	r2, [pc, #20]	@ (8002cf0 <OLED_SendCmd+0x20>)
 8002cdc:	79fb      	ldrb	r3, [r7, #7]
 8002cde:	7053      	strb	r3, [r2, #1]
  OLED_Send(sendBuffer, 2);
 8002ce0:	2102      	movs	r1, #2
 8002ce2:	4803      	ldr	r0, [pc, #12]	@ (8002cf0 <OLED_SendCmd+0x20>)
 8002ce4:	f7ff ffde 	bl	8002ca4 <OLED_Send>
}
 8002ce8:	bf00      	nop
 8002cea:	3708      	adds	r7, #8
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	20004870 	.word	0x20004870

08002cf4 <OLED_Init>:
/**
 * @brief 初始化OLED (SSD1306)
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_Init()
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	af00      	add	r7, sp, #0
  OLED_SendCmd(0xAE); /*关闭显示 display off*/
 8002cf8:	20ae      	movs	r0, #174	@ 0xae
 8002cfa:	f7ff ffe9 	bl	8002cd0 <OLED_SendCmd>

  OLED_SendCmd(0x20);
 8002cfe:	2020      	movs	r0, #32
 8002d00:	f7ff ffe6 	bl	8002cd0 <OLED_SendCmd>
  OLED_SendCmd(0x10);
 8002d04:	2010      	movs	r0, #16
 8002d06:	f7ff ffe3 	bl	8002cd0 <OLED_SendCmd>

  OLED_SendCmd(0xB0);
 8002d0a:	20b0      	movs	r0, #176	@ 0xb0
 8002d0c:	f7ff ffe0 	bl	8002cd0 <OLED_SendCmd>

  OLED_SendCmd(0xC8);
 8002d10:	20c8      	movs	r0, #200	@ 0xc8
 8002d12:	f7ff ffdd 	bl	8002cd0 <OLED_SendCmd>

  OLED_SendCmd(0x00);
 8002d16:	2000      	movs	r0, #0
 8002d18:	f7ff ffda 	bl	8002cd0 <OLED_SendCmd>
  OLED_SendCmd(0x10);
 8002d1c:	2010      	movs	r0, #16
 8002d1e:	f7ff ffd7 	bl	8002cd0 <OLED_SendCmd>

  OLED_SendCmd(0x40);
 8002d22:	2040      	movs	r0, #64	@ 0x40
 8002d24:	f7ff ffd4 	bl	8002cd0 <OLED_SendCmd>

  OLED_SendCmd(0x81);
 8002d28:	2081      	movs	r0, #129	@ 0x81
 8002d2a:	f7ff ffd1 	bl	8002cd0 <OLED_SendCmd>

  OLED_SendCmd(0xDF);
 8002d2e:	20df      	movs	r0, #223	@ 0xdf
 8002d30:	f7ff ffce 	bl	8002cd0 <OLED_SendCmd>
  OLED_SendCmd(0xA1);
 8002d34:	20a1      	movs	r0, #161	@ 0xa1
 8002d36:	f7ff ffcb 	bl	8002cd0 <OLED_SendCmd>

  OLED_SendCmd(0xA6);
 8002d3a:	20a6      	movs	r0, #166	@ 0xa6
 8002d3c:	f7ff ffc8 	bl	8002cd0 <OLED_SendCmd>
  OLED_SendCmd(0xA8);
 8002d40:	20a8      	movs	r0, #168	@ 0xa8
 8002d42:	f7ff ffc5 	bl	8002cd0 <OLED_SendCmd>

  OLED_SendCmd(0x3F);
 8002d46:	203f      	movs	r0, #63	@ 0x3f
 8002d48:	f7ff ffc2 	bl	8002cd0 <OLED_SendCmd>

  OLED_SendCmd(0xA4);
 8002d4c:	20a4      	movs	r0, #164	@ 0xa4
 8002d4e:	f7ff ffbf 	bl	8002cd0 <OLED_SendCmd>

  OLED_SendCmd(0xD3);
 8002d52:	20d3      	movs	r0, #211	@ 0xd3
 8002d54:	f7ff ffbc 	bl	8002cd0 <OLED_SendCmd>
  OLED_SendCmd(0x00);
 8002d58:	2000      	movs	r0, #0
 8002d5a:	f7ff ffb9 	bl	8002cd0 <OLED_SendCmd>

  OLED_SendCmd(0xD5);
 8002d5e:	20d5      	movs	r0, #213	@ 0xd5
 8002d60:	f7ff ffb6 	bl	8002cd0 <OLED_SendCmd>
  OLED_SendCmd(0xF0);
 8002d64:	20f0      	movs	r0, #240	@ 0xf0
 8002d66:	f7ff ffb3 	bl	8002cd0 <OLED_SendCmd>

  OLED_SendCmd(0xD9);
 8002d6a:	20d9      	movs	r0, #217	@ 0xd9
 8002d6c:	f7ff ffb0 	bl	8002cd0 <OLED_SendCmd>
  OLED_SendCmd(0x22);
 8002d70:	2022      	movs	r0, #34	@ 0x22
 8002d72:	f7ff ffad 	bl	8002cd0 <OLED_SendCmd>

  OLED_SendCmd(0xDA);
 8002d76:	20da      	movs	r0, #218	@ 0xda
 8002d78:	f7ff ffaa 	bl	8002cd0 <OLED_SendCmd>
  OLED_SendCmd(0x12);
 8002d7c:	2012      	movs	r0, #18
 8002d7e:	f7ff ffa7 	bl	8002cd0 <OLED_SendCmd>

  OLED_SendCmd(0xDB);
 8002d82:	20db      	movs	r0, #219	@ 0xdb
 8002d84:	f7ff ffa4 	bl	8002cd0 <OLED_SendCmd>
  OLED_SendCmd(0x20);
 8002d88:	2020      	movs	r0, #32
 8002d8a:	f7ff ffa1 	bl	8002cd0 <OLED_SendCmd>

  OLED_SendCmd(0x8D);
 8002d8e:	208d      	movs	r0, #141	@ 0x8d
 8002d90:	f7ff ff9e 	bl	8002cd0 <OLED_SendCmd>
  OLED_SendCmd(0x14);
 8002d94:	2014      	movs	r0, #20
 8002d96:	f7ff ff9b 	bl	8002cd0 <OLED_SendCmd>

  OLED_NewFrame();
 8002d9a:	f000 f807 	bl	8002dac <OLED_NewFrame>
  OLED_ShowFrame();
 8002d9e:	f000 f811 	bl	8002dc4 <OLED_ShowFrame>

  OLED_SendCmd(0xAF); /*开启显示 display ON*/
 8002da2:	20af      	movs	r0, #175	@ 0xaf
 8002da4:	f7ff ff94 	bl	8002cd0 <OLED_SendCmd>
}
 8002da8:	bf00      	nop
 8002daa:	bd80      	pop	{r7, pc}

08002dac <OLED_NewFrame>:

/**
 * @brief 清空显存 绘制新的一帧
 */
void OLED_NewFrame()
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	af00      	add	r7, sp, #0
  memset(OLED_GRAM, 0, sizeof(OLED_GRAM));
 8002db0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002db4:	2100      	movs	r1, #0
 8002db6:	4802      	ldr	r0, [pc, #8]	@ (8002dc0 <OLED_NewFrame+0x14>)
 8002db8:	f004 fdef 	bl	800799a <memset>
}
 8002dbc:	bf00      	nop
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	20004470 	.word	0x20004470

08002dc4 <OLED_ShowFrame>:
/**
 * @brief 将当前显存显示到屏幕上
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_ShowFrame()
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
  static uint8_t sendBuffer[OLED_COLUMN + 1];
  sendBuffer[0] = 0x40;
 8002dca:	4b15      	ldr	r3, [pc, #84]	@ (8002e20 <OLED_ShowFrame+0x5c>)
 8002dcc:	2240      	movs	r2, #64	@ 0x40
 8002dce:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < OLED_PAGE; i++)
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	71fb      	strb	r3, [r7, #7]
 8002dd4:	e01b      	b.n	8002e0e <OLED_ShowFrame+0x4a>
  {
    OLED_SendCmd(0xB0 + i); // 设置页地址
 8002dd6:	79fb      	ldrb	r3, [r7, #7]
 8002dd8:	3b50      	subs	r3, #80	@ 0x50
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7ff ff77 	bl	8002cd0 <OLED_SendCmd>
    OLED_SendCmd(0x00);     // 设置列地址低4位
 8002de2:	2000      	movs	r0, #0
 8002de4:	f7ff ff74 	bl	8002cd0 <OLED_SendCmd>
    OLED_SendCmd(0x10);     // 设置列地址高4位
 8002de8:	2010      	movs	r0, #16
 8002dea:	f7ff ff71 	bl	8002cd0 <OLED_SendCmd>
    memcpy(sendBuffer + 1, OLED_GRAM[i], OLED_COLUMN);
 8002dee:	480d      	ldr	r0, [pc, #52]	@ (8002e24 <OLED_ShowFrame+0x60>)
 8002df0:	79fb      	ldrb	r3, [r7, #7]
 8002df2:	01db      	lsls	r3, r3, #7
 8002df4:	4a0c      	ldr	r2, [pc, #48]	@ (8002e28 <OLED_ShowFrame+0x64>)
 8002df6:	4413      	add	r3, r2
 8002df8:	2280      	movs	r2, #128	@ 0x80
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	f004 fe4d 	bl	8007a9a <memcpy>
    OLED_Send(sendBuffer, OLED_COLUMN + 1);
 8002e00:	2181      	movs	r1, #129	@ 0x81
 8002e02:	4807      	ldr	r0, [pc, #28]	@ (8002e20 <OLED_ShowFrame+0x5c>)
 8002e04:	f7ff ff4e 	bl	8002ca4 <OLED_Send>
  for (uint8_t i = 0; i < OLED_PAGE; i++)
 8002e08:	79fb      	ldrb	r3, [r7, #7]
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	71fb      	strb	r3, [r7, #7]
 8002e0e:	79fb      	ldrb	r3, [r7, #7]
 8002e10:	2b07      	cmp	r3, #7
 8002e12:	d9e0      	bls.n	8002dd6 <OLED_ShowFrame+0x12>
  }
}
 8002e14:	bf00      	nop
 8002e16:	bf00      	nop
 8002e18:	3708      	adds	r7, #8
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	20004874 	.word	0x20004874
 8002e24:	20004875 	.word	0x20004875
 8002e28:	20004470 	.word	0x20004470

08002e2c <OLED_SetByte_Fine>:
 * @note 此函数将显存中的某一字节的第start位到第end位设置为与data相同
 * @note start和end的范围为0-7, start必须小于等于end
 * @note 此函数与OLED_SetByte_Fine的区别在于此函数只能设置显存中的某一真实字节
 */
void OLED_SetByte_Fine(uint8_t page, uint8_t column, uint8_t data, uint8_t start, uint8_t end, OLED_ColorMode color)
{
 8002e2c:	b490      	push	{r4, r7}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	4604      	mov	r4, r0
 8002e34:	4608      	mov	r0, r1
 8002e36:	4611      	mov	r1, r2
 8002e38:	461a      	mov	r2, r3
 8002e3a:	4623      	mov	r3, r4
 8002e3c:	71fb      	strb	r3, [r7, #7]
 8002e3e:	4603      	mov	r3, r0
 8002e40:	71bb      	strb	r3, [r7, #6]
 8002e42:	460b      	mov	r3, r1
 8002e44:	717b      	strb	r3, [r7, #5]
 8002e46:	4613      	mov	r3, r2
 8002e48:	713b      	strb	r3, [r7, #4]
  static uint8_t temp;
  if (page >= OLED_PAGE || column >= OLED_COLUMN)
 8002e4a:	79fb      	ldrb	r3, [r7, #7]
 8002e4c:	2b07      	cmp	r3, #7
 8002e4e:	d85f      	bhi.n	8002f10 <OLED_SetByte_Fine+0xe4>
 8002e50:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	db5b      	blt.n	8002f10 <OLED_SetByte_Fine+0xe4>
    return;
  if (color)
 8002e58:	7d3b      	ldrb	r3, [r7, #20]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d002      	beq.n	8002e64 <OLED_SetByte_Fine+0x38>
    data = ~data;
 8002e5e:	797b      	ldrb	r3, [r7, #5]
 8002e60:	43db      	mvns	r3, r3
 8002e62:	717b      	strb	r3, [r7, #5]

  temp = data | (0xff << (end + 1)) | (0xff >> (8 - start));
 8002e64:	7c3b      	ldrb	r3, [r7, #16]
 8002e66:	3301      	adds	r3, #1
 8002e68:	22ff      	movs	r2, #255	@ 0xff
 8002e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6e:	b25a      	sxtb	r2, r3
 8002e70:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	b25a      	sxtb	r2, r3
 8002e78:	793b      	ldrb	r3, [r7, #4]
 8002e7a:	f1c3 0308 	rsb	r3, r3, #8
 8002e7e:	21ff      	movs	r1, #255	@ 0xff
 8002e80:	fa41 f303 	asr.w	r3, r1, r3
 8002e84:	b25b      	sxtb	r3, r3
 8002e86:	4313      	orrs	r3, r2
 8002e88:	b25b      	sxtb	r3, r3
 8002e8a:	b2da      	uxtb	r2, r3
 8002e8c:	4b23      	ldr	r3, [pc, #140]	@ (8002f1c <OLED_SetByte_Fine+0xf0>)
 8002e8e:	701a      	strb	r2, [r3, #0]
  OLED_GRAM[page][column] &= temp;
 8002e90:	79fa      	ldrb	r2, [r7, #7]
 8002e92:	79bb      	ldrb	r3, [r7, #6]
 8002e94:	4922      	ldr	r1, [pc, #136]	@ (8002f20 <OLED_SetByte_Fine+0xf4>)
 8002e96:	01d2      	lsls	r2, r2, #7
 8002e98:	440a      	add	r2, r1
 8002e9a:	4413      	add	r3, r2
 8002e9c:	7818      	ldrb	r0, [r3, #0]
 8002e9e:	4b1f      	ldr	r3, [pc, #124]	@ (8002f1c <OLED_SetByte_Fine+0xf0>)
 8002ea0:	7819      	ldrb	r1, [r3, #0]
 8002ea2:	79fa      	ldrb	r2, [r7, #7]
 8002ea4:	79bb      	ldrb	r3, [r7, #6]
 8002ea6:	4001      	ands	r1, r0
 8002ea8:	b2c8      	uxtb	r0, r1
 8002eaa:	491d      	ldr	r1, [pc, #116]	@ (8002f20 <OLED_SetByte_Fine+0xf4>)
 8002eac:	01d2      	lsls	r2, r2, #7
 8002eae:	440a      	add	r2, r1
 8002eb0:	4413      	add	r3, r2
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	701a      	strb	r2, [r3, #0]
  temp = data & ~(0xff << (end + 1)) & ~(0xff >> (8 - start));
 8002eb6:	7c3b      	ldrb	r3, [r7, #16]
 8002eb8:	3301      	adds	r3, #1
 8002eba:	22ff      	movs	r2, #255	@ 0xff
 8002ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec0:	b25b      	sxtb	r3, r3
 8002ec2:	43db      	mvns	r3, r3
 8002ec4:	b25a      	sxtb	r2, r3
 8002ec6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	b25a      	sxtb	r2, r3
 8002ece:	793b      	ldrb	r3, [r7, #4]
 8002ed0:	f1c3 0308 	rsb	r3, r3, #8
 8002ed4:	f06f 01ff 	mvn.w	r1, #255	@ 0xff
 8002ed8:	fa41 f303 	asr.w	r3, r1, r3
 8002edc:	b25b      	sxtb	r3, r3
 8002ede:	4013      	ands	r3, r2
 8002ee0:	b25b      	sxtb	r3, r3
 8002ee2:	b2da      	uxtb	r2, r3
 8002ee4:	4b0d      	ldr	r3, [pc, #52]	@ (8002f1c <OLED_SetByte_Fine+0xf0>)
 8002ee6:	701a      	strb	r2, [r3, #0]
  OLED_GRAM[page][column] |= temp;
 8002ee8:	79fa      	ldrb	r2, [r7, #7]
 8002eea:	79bb      	ldrb	r3, [r7, #6]
 8002eec:	490c      	ldr	r1, [pc, #48]	@ (8002f20 <OLED_SetByte_Fine+0xf4>)
 8002eee:	01d2      	lsls	r2, r2, #7
 8002ef0:	440a      	add	r2, r1
 8002ef2:	4413      	add	r3, r2
 8002ef4:	7818      	ldrb	r0, [r3, #0]
 8002ef6:	4b09      	ldr	r3, [pc, #36]	@ (8002f1c <OLED_SetByte_Fine+0xf0>)
 8002ef8:	7819      	ldrb	r1, [r3, #0]
 8002efa:	79fa      	ldrb	r2, [r7, #7]
 8002efc:	79bb      	ldrb	r3, [r7, #6]
 8002efe:	4301      	orrs	r1, r0
 8002f00:	b2c8      	uxtb	r0, r1
 8002f02:	4907      	ldr	r1, [pc, #28]	@ (8002f20 <OLED_SetByte_Fine+0xf4>)
 8002f04:	01d2      	lsls	r2, r2, #7
 8002f06:	440a      	add	r2, r1
 8002f08:	4413      	add	r3, r2
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	701a      	strb	r2, [r3, #0]
 8002f0e:	e000      	b.n	8002f12 <OLED_SetByte_Fine+0xe6>
    return;
 8002f10:	bf00      	nop
  // 使用OLED_SetPixel实现
  // for (uint8_t i = start; i <= end; i++) {
  //   OLED_SetPixel(column, page * 8 + i, !((data >> i) & 0x01));
  // }
}
 8002f12:	3708      	adds	r7, #8
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bc90      	pop	{r4, r7}
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	200048f5 	.word	0x200048f5
 8002f20:	20004470 	.word	0x20004470

08002f24 <OLED_SetBits_Fine>:
 * @note 此函数将显存中从(x,y)开始向下数len位设置为与data相同
 * @note len的范围为1-8
 * @note 此函数与OLED_SetByte_Fine的区别在于此函数的横坐标和纵坐标是以像素为单位的, 可能出现跨两个真实字节的情况(跨页)
 */
void OLED_SetBits_Fine(uint8_t x, uint8_t y, uint8_t data, uint8_t len, OLED_ColorMode color)
{
 8002f24:	b5b0      	push	{r4, r5, r7, lr}
 8002f26:	b086      	sub	sp, #24
 8002f28:	af02      	add	r7, sp, #8
 8002f2a:	4604      	mov	r4, r0
 8002f2c:	4608      	mov	r0, r1
 8002f2e:	4611      	mov	r1, r2
 8002f30:	461a      	mov	r2, r3
 8002f32:	4623      	mov	r3, r4
 8002f34:	71fb      	strb	r3, [r7, #7]
 8002f36:	4603      	mov	r3, r0
 8002f38:	71bb      	strb	r3, [r7, #6]
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	717b      	strb	r3, [r7, #5]
 8002f3e:	4613      	mov	r3, r2
 8002f40:	713b      	strb	r3, [r7, #4]
  uint8_t page = y / 8;
 8002f42:	79bb      	ldrb	r3, [r7, #6]
 8002f44:	08db      	lsrs	r3, r3, #3
 8002f46:	73fb      	strb	r3, [r7, #15]
  uint8_t bit = y % 8;
 8002f48:	79bb      	ldrb	r3, [r7, #6]
 8002f4a:	f003 0307 	and.w	r3, r3, #7
 8002f4e:	73bb      	strb	r3, [r7, #14]
  if (bit + len > 8)
 8002f50:	7bba      	ldrb	r2, [r7, #14]
 8002f52:	793b      	ldrb	r3, [r7, #4]
 8002f54:	4413      	add	r3, r2
 8002f56:	2b08      	cmp	r3, #8
 8002f58:	dd29      	ble.n	8002fae <OLED_SetBits_Fine+0x8a>
  {
    OLED_SetByte_Fine(page, x, data << bit, bit, 7, color);
 8002f5a:	797a      	ldrb	r2, [r7, #5]
 8002f5c:	7bbb      	ldrb	r3, [r7, #14]
 8002f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f62:	b2da      	uxtb	r2, r3
 8002f64:	7bbc      	ldrb	r4, [r7, #14]
 8002f66:	79f9      	ldrb	r1, [r7, #7]
 8002f68:	7bf8      	ldrb	r0, [r7, #15]
 8002f6a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002f6e:	9301      	str	r3, [sp, #4]
 8002f70:	2307      	movs	r3, #7
 8002f72:	9300      	str	r3, [sp, #0]
 8002f74:	4623      	mov	r3, r4
 8002f76:	f7ff ff59 	bl	8002e2c <OLED_SetByte_Fine>
    OLED_SetByte_Fine(page + 1, x, data >> (8 - bit), 0, len + bit - 1 - 8, color);
 8002f7a:	7bfb      	ldrb	r3, [r7, #15]
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	b2d8      	uxtb	r0, r3
 8002f80:	797a      	ldrb	r2, [r7, #5]
 8002f82:	7bbb      	ldrb	r3, [r7, #14]
 8002f84:	f1c3 0308 	rsb	r3, r3, #8
 8002f88:	fa42 f303 	asr.w	r3, r2, r3
 8002f8c:	b2dc      	uxtb	r4, r3
 8002f8e:	793a      	ldrb	r2, [r7, #4]
 8002f90:	7bbb      	ldrb	r3, [r7, #14]
 8002f92:	4413      	add	r3, r2
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	3b09      	subs	r3, #9
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	79f9      	ldrb	r1, [r7, #7]
 8002f9c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002fa0:	9201      	str	r2, [sp, #4]
 8002fa2:	9300      	str	r3, [sp, #0]
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	4622      	mov	r2, r4
 8002fa8:	f7ff ff40 	bl	8002e2c <OLED_SetByte_Fine>
  }
  // 使用OLED_SetPixel实现
  // for (uint8_t i = 0; i < len; i++) {
  //   OLED_SetPixel(x, y + i, !((data >> i) & 0x01));
  // }
}
 8002fac:	e015      	b.n	8002fda <OLED_SetBits_Fine+0xb6>
    OLED_SetByte_Fine(page, x, data << bit, bit, bit + len - 1, color);
 8002fae:	797a      	ldrb	r2, [r7, #5]
 8002fb0:	7bbb      	ldrb	r3, [r7, #14]
 8002fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb6:	b2dc      	uxtb	r4, r3
 8002fb8:	7bba      	ldrb	r2, [r7, #14]
 8002fba:	793b      	ldrb	r3, [r7, #4]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	3b01      	subs	r3, #1
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	7bbd      	ldrb	r5, [r7, #14]
 8002fc6:	79f9      	ldrb	r1, [r7, #7]
 8002fc8:	7bf8      	ldrb	r0, [r7, #15]
 8002fca:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002fce:	9201      	str	r2, [sp, #4]
 8002fd0:	9300      	str	r3, [sp, #0]
 8002fd2:	462b      	mov	r3, r5
 8002fd4:	4622      	mov	r2, r4
 8002fd6:	f7ff ff29 	bl	8002e2c <OLED_SetByte_Fine>
}
 8002fda:	bf00      	nop
 8002fdc:	3710      	adds	r7, #16
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bdb0      	pop	{r4, r5, r7, pc}

08002fe2 <OLED_SetBits>:
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始向下数8位设置为与data相同
 * @note 此函数与OLED_SetByte的区别在于此函数的横坐标和纵坐标是以像素为单位的, 可能出现跨两个真实字节的情况(跨页)
 */
void OLED_SetBits(uint8_t x, uint8_t y, uint8_t data, OLED_ColorMode color)
{
 8002fe2:	b590      	push	{r4, r7, lr}
 8002fe4:	b087      	sub	sp, #28
 8002fe6:	af02      	add	r7, sp, #8
 8002fe8:	4604      	mov	r4, r0
 8002fea:	4608      	mov	r0, r1
 8002fec:	4611      	mov	r1, r2
 8002fee:	461a      	mov	r2, r3
 8002ff0:	4623      	mov	r3, r4
 8002ff2:	71fb      	strb	r3, [r7, #7]
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	71bb      	strb	r3, [r7, #6]
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	717b      	strb	r3, [r7, #5]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	713b      	strb	r3, [r7, #4]
  uint8_t page = y / 8;
 8003000:	79bb      	ldrb	r3, [r7, #6]
 8003002:	08db      	lsrs	r3, r3, #3
 8003004:	73fb      	strb	r3, [r7, #15]
  uint8_t bit = y % 8;
 8003006:	79bb      	ldrb	r3, [r7, #6]
 8003008:	f003 0307 	and.w	r3, r3, #7
 800300c:	73bb      	strb	r3, [r7, #14]
  OLED_SetByte_Fine(page, x, data << bit, bit, 7, color);
 800300e:	797a      	ldrb	r2, [r7, #5]
 8003010:	7bbb      	ldrb	r3, [r7, #14]
 8003012:	fa02 f303 	lsl.w	r3, r2, r3
 8003016:	b2da      	uxtb	r2, r3
 8003018:	7bbc      	ldrb	r4, [r7, #14]
 800301a:	79f9      	ldrb	r1, [r7, #7]
 800301c:	7bf8      	ldrb	r0, [r7, #15]
 800301e:	793b      	ldrb	r3, [r7, #4]
 8003020:	9301      	str	r3, [sp, #4]
 8003022:	2307      	movs	r3, #7
 8003024:	9300      	str	r3, [sp, #0]
 8003026:	4623      	mov	r3, r4
 8003028:	f7ff ff00 	bl	8002e2c <OLED_SetByte_Fine>
  if (bit)
 800302c:	7bbb      	ldrb	r3, [r7, #14]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d014      	beq.n	800305c <OLED_SetBits+0x7a>
  {
    OLED_SetByte_Fine(page + 1, x, data >> (8 - bit), 0, bit - 1, color);
 8003032:	7bfb      	ldrb	r3, [r7, #15]
 8003034:	3301      	adds	r3, #1
 8003036:	b2d8      	uxtb	r0, r3
 8003038:	797a      	ldrb	r2, [r7, #5]
 800303a:	7bbb      	ldrb	r3, [r7, #14]
 800303c:	f1c3 0308 	rsb	r3, r3, #8
 8003040:	fa42 f303 	asr.w	r3, r2, r3
 8003044:	b2dc      	uxtb	r4, r3
 8003046:	7bbb      	ldrb	r3, [r7, #14]
 8003048:	3b01      	subs	r3, #1
 800304a:	b2db      	uxtb	r3, r3
 800304c:	79f9      	ldrb	r1, [r7, #7]
 800304e:	793a      	ldrb	r2, [r7, #4]
 8003050:	9201      	str	r2, [sp, #4]
 8003052:	9300      	str	r3, [sp, #0]
 8003054:	2300      	movs	r3, #0
 8003056:	4622      	mov	r2, r4
 8003058:	f7ff fee8 	bl	8002e2c <OLED_SetByte_Fine>
  }
}
 800305c:	bf00      	nop
 800305e:	3714      	adds	r7, #20
 8003060:	46bd      	mov	sp, r7
 8003062:	bd90      	pop	{r4, r7, pc}

08003064 <OLED_SetBlock>:
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始的w*h个像素设置为data中的数据
 * @note data的数据应该采用列行式排列
 */
void OLED_SetBlock(uint8_t x, uint8_t y, const uint8_t *data, uint8_t w, uint8_t h, OLED_ColorMode color)
{
 8003064:	b590      	push	{r4, r7, lr}
 8003066:	b087      	sub	sp, #28
 8003068:	af02      	add	r7, sp, #8
 800306a:	603a      	str	r2, [r7, #0]
 800306c:	461a      	mov	r2, r3
 800306e:	4603      	mov	r3, r0
 8003070:	71fb      	strb	r3, [r7, #7]
 8003072:	460b      	mov	r3, r1
 8003074:	71bb      	strb	r3, [r7, #6]
 8003076:	4613      	mov	r3, r2
 8003078:	717b      	strb	r3, [r7, #5]
  uint8_t fullRow = h / 8; // 完整的行数
 800307a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800307e:	08db      	lsrs	r3, r3, #3
 8003080:	733b      	strb	r3, [r7, #12]
  uint8_t partBit = h % 8; // 不完整的字节中的有效位数
 8003082:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003086:	f003 0307 	and.w	r3, r3, #7
 800308a:	72fb      	strb	r3, [r7, #11]
  for (uint8_t i = 0; i < w; i++)
 800308c:	2300      	movs	r3, #0
 800308e:	73fb      	strb	r3, [r7, #15]
 8003090:	e025      	b.n	80030de <OLED_SetBlock+0x7a>
  {
    for (uint8_t j = 0; j < fullRow; j++)
 8003092:	2300      	movs	r3, #0
 8003094:	73bb      	strb	r3, [r7, #14]
 8003096:	e01b      	b.n	80030d0 <OLED_SetBlock+0x6c>
    {
      OLED_SetBits(x + i, y + j * 8, data[i + j * w], color);
 8003098:	79fa      	ldrb	r2, [r7, #7]
 800309a:	7bfb      	ldrb	r3, [r7, #15]
 800309c:	4413      	add	r3, r2
 800309e:	b2d8      	uxtb	r0, r3
 80030a0:	7bbb      	ldrb	r3, [r7, #14]
 80030a2:	00db      	lsls	r3, r3, #3
 80030a4:	b2da      	uxtb	r2, r3
 80030a6:	79bb      	ldrb	r3, [r7, #6]
 80030a8:	4413      	add	r3, r2
 80030aa:	b2dc      	uxtb	r4, r3
 80030ac:	7bfa      	ldrb	r2, [r7, #15]
 80030ae:	7bbb      	ldrb	r3, [r7, #14]
 80030b0:	7979      	ldrb	r1, [r7, #5]
 80030b2:	fb01 f303 	mul.w	r3, r1, r3
 80030b6:	4413      	add	r3, r2
 80030b8:	461a      	mov	r2, r3
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	4413      	add	r3, r2
 80030be:	781a      	ldrb	r2, [r3, #0]
 80030c0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80030c4:	4621      	mov	r1, r4
 80030c6:	f7ff ff8c 	bl	8002fe2 <OLED_SetBits>
    for (uint8_t j = 0; j < fullRow; j++)
 80030ca:	7bbb      	ldrb	r3, [r7, #14]
 80030cc:	3301      	adds	r3, #1
 80030ce:	73bb      	strb	r3, [r7, #14]
 80030d0:	7bba      	ldrb	r2, [r7, #14]
 80030d2:	7b3b      	ldrb	r3, [r7, #12]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d3df      	bcc.n	8003098 <OLED_SetBlock+0x34>
  for (uint8_t i = 0; i < w; i++)
 80030d8:	7bfb      	ldrb	r3, [r7, #15]
 80030da:	3301      	adds	r3, #1
 80030dc:	73fb      	strb	r3, [r7, #15]
 80030de:	7bfa      	ldrb	r2, [r7, #15]
 80030e0:	797b      	ldrb	r3, [r7, #5]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d3d5      	bcc.n	8003092 <OLED_SetBlock+0x2e>
    }
  }
  if (partBit)
 80030e6:	7afb      	ldrb	r3, [r7, #11]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d028      	beq.n	800313e <OLED_SetBlock+0xda>
  {
    uint16_t fullNum = w * fullRow; // 完整的字节数
 80030ec:	797b      	ldrb	r3, [r7, #5]
 80030ee:	b29a      	uxth	r2, r3
 80030f0:	7b3b      	ldrb	r3, [r7, #12]
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	fb12 f303 	smulbb	r3, r2, r3
 80030f8:	813b      	strh	r3, [r7, #8]
    for (uint8_t i = 0; i < w; i++)
 80030fa:	2300      	movs	r3, #0
 80030fc:	737b      	strb	r3, [r7, #13]
 80030fe:	e01a      	b.n	8003136 <OLED_SetBlock+0xd2>
    {
      OLED_SetBits_Fine(x + i, y + (fullRow * 8), data[fullNum + i], partBit, color);
 8003100:	79fa      	ldrb	r2, [r7, #7]
 8003102:	7b7b      	ldrb	r3, [r7, #13]
 8003104:	4413      	add	r3, r2
 8003106:	b2d8      	uxtb	r0, r3
 8003108:	7b3b      	ldrb	r3, [r7, #12]
 800310a:	00db      	lsls	r3, r3, #3
 800310c:	b2da      	uxtb	r2, r3
 800310e:	79bb      	ldrb	r3, [r7, #6]
 8003110:	4413      	add	r3, r2
 8003112:	b2d9      	uxtb	r1, r3
 8003114:	893a      	ldrh	r2, [r7, #8]
 8003116:	7b7b      	ldrb	r3, [r7, #13]
 8003118:	4413      	add	r3, r2
 800311a:	461a      	mov	r2, r3
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	4413      	add	r3, r2
 8003120:	781a      	ldrb	r2, [r3, #0]
 8003122:	7afc      	ldrb	r4, [r7, #11]
 8003124:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003128:	9300      	str	r3, [sp, #0]
 800312a:	4623      	mov	r3, r4
 800312c:	f7ff fefa 	bl	8002f24 <OLED_SetBits_Fine>
    for (uint8_t i = 0; i < w; i++)
 8003130:	7b7b      	ldrb	r3, [r7, #13]
 8003132:	3301      	adds	r3, #1
 8003134:	737b      	strb	r3, [r7, #13]
 8003136:	7b7a      	ldrb	r2, [r7, #13]
 8003138:	797b      	ldrb	r3, [r7, #5]
 800313a:	429a      	cmp	r2, r3
 800313c:	d3e0      	bcc.n	8003100 <OLED_SetBlock+0x9c>
  //       if (j * 8 + k >= h) break; // 防止越界(不完整的字节
  //       OLED_SetPixel(x + i, y + j * 8 + k, !((data[i + j * w] >> k) & 0x01));
  //     }
  //   }
  // }
}
 800313e:	bf00      	nop
 8003140:	3714      	adds	r7, #20
 8003142:	46bd      	mov	sp, r7
 8003144:	bd90      	pop	{r4, r7, pc}

08003146 <OLED_PrintASCIIChar>:
 * @param ch 字符
 * @param font 字体
 * @param color 颜色
 */
void OLED_PrintASCIIChar(uint8_t x, uint8_t y, char ch, const ASCIIFont *font, OLED_ColorMode color)
{
 8003146:	b5b0      	push	{r4, r5, r7, lr}
 8003148:	b084      	sub	sp, #16
 800314a:	af02      	add	r7, sp, #8
 800314c:	603b      	str	r3, [r7, #0]
 800314e:	4603      	mov	r3, r0
 8003150:	71fb      	strb	r3, [r7, #7]
 8003152:	460b      	mov	r3, r1
 8003154:	71bb      	strb	r3, [r7, #6]
 8003156:	4613      	mov	r3, r2
 8003158:	717b      	strb	r3, [r7, #5]
  OLED_SetBlock(x, y, font->chars + (ch - ' ') * (((font->h + 7) / 8) * font->w), font->w, font->h, color);
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	685a      	ldr	r2, [r3, #4]
 800315e:	797b      	ldrb	r3, [r7, #5]
 8003160:	f1a3 0120 	sub.w	r1, r3, #32
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	3307      	adds	r3, #7
 800316a:	2b00      	cmp	r3, #0
 800316c:	da00      	bge.n	8003170 <OLED_PrintASCIIChar+0x2a>
 800316e:	3307      	adds	r3, #7
 8003170:	10db      	asrs	r3, r3, #3
 8003172:	4618      	mov	r0, r3
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	785b      	ldrb	r3, [r3, #1]
 8003178:	fb00 f303 	mul.w	r3, r0, r3
 800317c:	fb01 f303 	mul.w	r3, r1, r3
 8003180:	18d4      	adds	r4, r2, r3
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	785d      	ldrb	r5, [r3, #1]
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	79b9      	ldrb	r1, [r7, #6]
 800318c:	79f8      	ldrb	r0, [r7, #7]
 800318e:	7e3a      	ldrb	r2, [r7, #24]
 8003190:	9201      	str	r2, [sp, #4]
 8003192:	9300      	str	r3, [sp, #0]
 8003194:	462b      	mov	r3, r5
 8003196:	4622      	mov	r2, r4
 8003198:	f7ff ff64 	bl	8003064 <OLED_SetBlock>
}
 800319c:	bf00      	nop
 800319e:	3708      	adds	r7, #8
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bdb0      	pop	{r4, r5, r7, pc}

080031a4 <_OLED_GetUTF8Len>:

/**
 * @brief 获取UTF-8编码的字符长度
 */
uint8_t _OLED_GetUTF8Len(char *string)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  if ((string[0] & 0x80) == 0x00)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	b25b      	sxtb	r3, r3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	db01      	blt.n	80031ba <_OLED_GetUTF8Len+0x16>
  {
    return 1;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e018      	b.n	80031ec <_OLED_GetUTF8Len+0x48>
  }
  else if ((string[0] & 0xE0) == 0xC0)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 80031c2:	2bc0      	cmp	r3, #192	@ 0xc0
 80031c4:	d101      	bne.n	80031ca <_OLED_GetUTF8Len+0x26>
  {
    return 2;
 80031c6:	2302      	movs	r3, #2
 80031c8:	e010      	b.n	80031ec <_OLED_GetUTF8Len+0x48>
  }
  else if ((string[0] & 0xF0) == 0xE0)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80031d2:	2be0      	cmp	r3, #224	@ 0xe0
 80031d4:	d101      	bne.n	80031da <_OLED_GetUTF8Len+0x36>
  {
    return 3;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e008      	b.n	80031ec <_OLED_GetUTF8Len+0x48>
  }
  else if ((string[0] & 0xF8) == 0xF0)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 80031e2:	2bf0      	cmp	r3, #240	@ 0xf0
 80031e4:	d101      	bne.n	80031ea <_OLED_GetUTF8Len+0x46>
  {
    return 4;
 80031e6:	2304      	movs	r3, #4
 80031e8:	e000      	b.n	80031ec <_OLED_GetUTF8Len+0x48>
  }
  return 0;
 80031ea:	2300      	movs	r3, #0
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <OLED_PrintString>:
 * @note 为保证字符串中的中文会被自动识别并绘制, 需:
 * 1. 编译器字符集设置为UTF-8
 * 2. 使用波特律动LED取模工具生成字模(https://led.baud-dance.com)
 */
void OLED_PrintString(uint8_t x, uint8_t y, char *str, const Font *font, OLED_ColorMode color)
{
 80031f8:	b5b0      	push	{r4, r5, r7, lr}
 80031fa:	b08a      	sub	sp, #40	@ 0x28
 80031fc:	af02      	add	r7, sp, #8
 80031fe:	60ba      	str	r2, [r7, #8]
 8003200:	607b      	str	r3, [r7, #4]
 8003202:	4603      	mov	r3, r0
 8003204:	73fb      	strb	r3, [r7, #15]
 8003206:	460b      	mov	r3, r1
 8003208:	73bb      	strb	r3, [r7, #14]
  uint16_t i = 0;                                       // 字符串索引
 800320a:	2300      	movs	r3, #0
 800320c:	83fb      	strh	r3, [r7, #30]
  uint8_t oneLen = (((font->h + 7) / 8) * font->w) + 4; // 一个字模占多少字节
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	3307      	adds	r3, #7
 8003214:	2b00      	cmp	r3, #0
 8003216:	da00      	bge.n	800321a <OLED_PrintString+0x22>
 8003218:	3307      	adds	r3, #7
 800321a:	10db      	asrs	r3, r3, #3
 800321c:	b2da      	uxtb	r2, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	785b      	ldrb	r3, [r3, #1]
 8003222:	fb12 f303 	smulbb	r3, r2, r3
 8003226:	b2db      	uxtb	r3, r3
 8003228:	3304      	adds	r3, #4
 800322a:	76fb      	strb	r3, [r7, #27]
  uint8_t found;                                        // 是否找到字模
  uint8_t utf8Len;                                      // UTF-8编码长度
  uint8_t *head;                                        // 字模头指针
  while (str[i])
 800322c:	e07d      	b.n	800332a <OLED_PrintString+0x132>
  {
    found = 0;
 800322e:	2300      	movs	r3, #0
 8003230:	777b      	strb	r3, [r7, #29]
    utf8Len = _OLED_GetUTF8Len(str + i);
 8003232:	8bfb      	ldrh	r3, [r7, #30]
 8003234:	68ba      	ldr	r2, [r7, #8]
 8003236:	4413      	add	r3, r2
 8003238:	4618      	mov	r0, r3
 800323a:	f7ff ffb3 	bl	80031a4 <_OLED_GetUTF8Len>
 800323e:	4603      	mov	r3, r0
 8003240:	76bb      	strb	r3, [r7, #26]
    if (utf8Len == 0)
 8003242:	7ebb      	ldrb	r3, [r7, #26]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d078      	beq.n	800333a <OLED_PrintString+0x142>
      break; // 有问题的UTF-8编码

    // 寻找字符  TODO 优化查找算法, 二分查找或者hash
    for (uint8_t j = 0; j < font->len; j++)
 8003248:	2300      	movs	r3, #0
 800324a:	773b      	strb	r3, [r7, #28]
 800324c:	e032      	b.n	80032b4 <OLED_PrintString+0xbc>
    {
      head = (uint8_t *)(font->chars) + (j * oneLen);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	7f3a      	ldrb	r2, [r7, #28]
 8003254:	7ef9      	ldrb	r1, [r7, #27]
 8003256:	fb01 f202 	mul.w	r2, r1, r2
 800325a:	4413      	add	r3, r2
 800325c:	617b      	str	r3, [r7, #20]
      if (memcmp(str + i, head, utf8Len) == 0)
 800325e:	8bfb      	ldrh	r3, [r7, #30]
 8003260:	68ba      	ldr	r2, [r7, #8]
 8003262:	4413      	add	r3, r2
 8003264:	7eba      	ldrb	r2, [r7, #26]
 8003266:	6979      	ldr	r1, [r7, #20]
 8003268:	4618      	mov	r0, r3
 800326a:	f004 fb86 	bl	800797a <memcmp>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d11c      	bne.n	80032ae <OLED_PrintString+0xb6>
      {
        OLED_SetBlock(x, y, head + 4, font->w, font->h, color);
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	1d1c      	adds	r4, r3, #4
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	785d      	ldrb	r5, [r3, #1]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	7bb9      	ldrb	r1, [r7, #14]
 8003282:	7bf8      	ldrb	r0, [r7, #15]
 8003284:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8003288:	9201      	str	r2, [sp, #4]
 800328a:	9300      	str	r3, [sp, #0]
 800328c:	462b      	mov	r3, r5
 800328e:	4622      	mov	r2, r4
 8003290:	f7ff fee8 	bl	8003064 <OLED_SetBlock>
        // 移动光标
        x += font->w;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	785a      	ldrb	r2, [r3, #1]
 8003298:	7bfb      	ldrb	r3, [r7, #15]
 800329a:	4413      	add	r3, r2
 800329c:	73fb      	strb	r3, [r7, #15]
        i += utf8Len;
 800329e:	7ebb      	ldrb	r3, [r7, #26]
 80032a0:	b29a      	uxth	r2, r3
 80032a2:	8bfb      	ldrh	r3, [r7, #30]
 80032a4:	4413      	add	r3, r2
 80032a6:	83fb      	strh	r3, [r7, #30]
        found = 1;
 80032a8:	2301      	movs	r3, #1
 80032aa:	777b      	strb	r3, [r7, #29]
        break;
 80032ac:	e007      	b.n	80032be <OLED_PrintString+0xc6>
    for (uint8_t j = 0; j < font->len; j++)
 80032ae:	7f3b      	ldrb	r3, [r7, #28]
 80032b0:	3301      	adds	r3, #1
 80032b2:	773b      	strb	r3, [r7, #28]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	7a1b      	ldrb	r3, [r3, #8]
 80032b8:	7f3a      	ldrb	r2, [r7, #28]
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d3c7      	bcc.n	800324e <OLED_PrintString+0x56>
      }
    }

    // 若未找到字模,且为ASCII字符, 则缺省显示ASCII字符
    if (found == 0)
 80032be:	7f7b      	ldrb	r3, [r7, #29]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d132      	bne.n	800332a <OLED_PrintString+0x132>
    {
      if (utf8Len == 1)
 80032c4:	7ebb      	ldrb	r3, [r7, #26]
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d119      	bne.n	80032fe <OLED_PrintString+0x106>
      {
        OLED_PrintASCIIChar(x, y, str[i], font->ascii, color);
 80032ca:	8bfb      	ldrh	r3, [r7, #30]
 80032cc:	68ba      	ldr	r2, [r7, #8]
 80032ce:	4413      	add	r3, r2
 80032d0:	781a      	ldrb	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	68dc      	ldr	r4, [r3, #12]
 80032d6:	7bb9      	ldrb	r1, [r7, #14]
 80032d8:	7bf8      	ldrb	r0, [r7, #15]
 80032da:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80032de:	9300      	str	r3, [sp, #0]
 80032e0:	4623      	mov	r3, r4
 80032e2:	f7ff ff30 	bl	8003146 <OLED_PrintASCIIChar>
        // 移动光标
        x += font->ascii->w;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	785a      	ldrb	r2, [r3, #1]
 80032ec:	7bfb      	ldrb	r3, [r7, #15]
 80032ee:	4413      	add	r3, r2
 80032f0:	73fb      	strb	r3, [r7, #15]
        i += utf8Len;
 80032f2:	7ebb      	ldrb	r3, [r7, #26]
 80032f4:	b29a      	uxth	r2, r3
 80032f6:	8bfb      	ldrh	r3, [r7, #30]
 80032f8:	4413      	add	r3, r2
 80032fa:	83fb      	strh	r3, [r7, #30]
 80032fc:	e015      	b.n	800332a <OLED_PrintString+0x132>
      }
      else
      {
        OLED_PrintASCIIChar(x, y, ' ', font->ascii, color);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	68da      	ldr	r2, [r3, #12]
 8003302:	7bb9      	ldrb	r1, [r7, #14]
 8003304:	7bf8      	ldrb	r0, [r7, #15]
 8003306:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800330a:	9300      	str	r3, [sp, #0]
 800330c:	4613      	mov	r3, r2
 800330e:	2220      	movs	r2, #32
 8003310:	f7ff ff19 	bl	8003146 <OLED_PrintASCIIChar>
        x += font->ascii->w;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	785a      	ldrb	r2, [r3, #1]
 800331a:	7bfb      	ldrb	r3, [r7, #15]
 800331c:	4413      	add	r3, r2
 800331e:	73fb      	strb	r3, [r7, #15]
        i += utf8Len;
 8003320:	7ebb      	ldrb	r3, [r7, #26]
 8003322:	b29a      	uxth	r2, r3
 8003324:	8bfb      	ldrh	r3, [r7, #30]
 8003326:	4413      	add	r3, r2
 8003328:	83fb      	strh	r3, [r7, #30]
  while (str[i])
 800332a:	8bfb      	ldrh	r3, [r7, #30]
 800332c:	68ba      	ldr	r2, [r7, #8]
 800332e:	4413      	add	r3, r2
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	2b00      	cmp	r3, #0
 8003334:	f47f af7b 	bne.w	800322e <OLED_PrintString+0x36>
      }
    }
  }
}
 8003338:	e000      	b.n	800333c <OLED_PrintString+0x144>
      break; // 有问题的UTF-8编码
 800333a:	bf00      	nop
}
 800333c:	bf00      	nop
 800333e:	3720      	adds	r7, #32
 8003340:	46bd      	mov	sp, r7
 8003342:	bdb0      	pop	{r4, r5, r7, pc}

08003344 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800334a:	2300      	movs	r3, #0
 800334c:	607b      	str	r3, [r7, #4]
 800334e:	4b10      	ldr	r3, [pc, #64]	@ (8003390 <HAL_MspInit+0x4c>)
 8003350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003352:	4a0f      	ldr	r2, [pc, #60]	@ (8003390 <HAL_MspInit+0x4c>)
 8003354:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003358:	6453      	str	r3, [r2, #68]	@ 0x44
 800335a:	4b0d      	ldr	r3, [pc, #52]	@ (8003390 <HAL_MspInit+0x4c>)
 800335c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800335e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003362:	607b      	str	r3, [r7, #4]
 8003364:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003366:	2300      	movs	r3, #0
 8003368:	603b      	str	r3, [r7, #0]
 800336a:	4b09      	ldr	r3, [pc, #36]	@ (8003390 <HAL_MspInit+0x4c>)
 800336c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800336e:	4a08      	ldr	r2, [pc, #32]	@ (8003390 <HAL_MspInit+0x4c>)
 8003370:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003374:	6413      	str	r3, [r2, #64]	@ 0x40
 8003376:	4b06      	ldr	r3, [pc, #24]	@ (8003390 <HAL_MspInit+0x4c>)
 8003378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800337a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800337e:	603b      	str	r3, [r7, #0]
 8003380:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003382:	bf00      	nop
 8003384:	370c      	adds	r7, #12
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	40023800 	.word	0x40023800

08003394 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003394:	b480      	push	{r7}
 8003396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003398:	bf00      	nop
 800339a:	e7fd      	b.n	8003398 <NMI_Handler+0x4>

0800339c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800339c:	b480      	push	{r7}
 800339e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033a0:	bf00      	nop
 80033a2:	e7fd      	b.n	80033a0 <HardFault_Handler+0x4>

080033a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80033a4:	b480      	push	{r7}
 80033a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033a8:	bf00      	nop
 80033aa:	e7fd      	b.n	80033a8 <MemManage_Handler+0x4>

080033ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033ac:	b480      	push	{r7}
 80033ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033b0:	bf00      	nop
 80033b2:	e7fd      	b.n	80033b0 <BusFault_Handler+0x4>

080033b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033b4:	b480      	push	{r7}
 80033b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033b8:	bf00      	nop
 80033ba:	e7fd      	b.n	80033b8 <UsageFault_Handler+0x4>

080033bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80033bc:	b480      	push	{r7}
 80033be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80033c0:	bf00      	nop
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr

080033ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033ca:	b480      	push	{r7}
 80033cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033ce:	bf00      	nop
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033d8:	b480      	push	{r7}
 80033da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033dc:	bf00      	nop
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr

080033e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033e6:	b580      	push	{r7, lr}
 80033e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033ea:	f000 fa4b 	bl	8003884 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033ee:	bf00      	nop
 80033f0:	bd80      	pop	{r7, pc}
	...

080033f4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80033f8:	4802      	ldr	r0, [pc, #8]	@ (8003404 <ADC_IRQHandler+0x10>)
 80033fa:	f000 faca 	bl	8003992 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80033fe:	bf00      	nop
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	200001f0 	.word	0x200001f0

08003408 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800340c:	4802      	ldr	r0, [pc, #8]	@ (8003418 <DMA2_Stream0_IRQHandler+0x10>)
 800340e:	f001 fa75 	bl	80048fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003412:	bf00      	nop
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	20000238 	.word	0x20000238

0800341c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800341c:	b480      	push	{r7}
 800341e:	af00      	add	r7, sp, #0
  return 1;
 8003420:	2301      	movs	r3, #1
}
 8003422:	4618      	mov	r0, r3
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <_kill>:

int _kill(int pid, int sig)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003436:	f004 fb03 	bl	8007a40 <__errno>
 800343a:	4603      	mov	r3, r0
 800343c:	2216      	movs	r2, #22
 800343e:	601a      	str	r2, [r3, #0]
  return -1;
 8003440:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003444:	4618      	mov	r0, r3
 8003446:	3708      	adds	r7, #8
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <_exit>:

void _exit (int status)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003454:	f04f 31ff 	mov.w	r1, #4294967295
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f7ff ffe7 	bl	800342c <_kill>
  while (1) {}    /* Make sure we hang here */
 800345e:	bf00      	nop
 8003460:	e7fd      	b.n	800345e <_exit+0x12>

08003462 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003462:	b580      	push	{r7, lr}
 8003464:	b086      	sub	sp, #24
 8003466:	af00      	add	r7, sp, #0
 8003468:	60f8      	str	r0, [r7, #12]
 800346a:	60b9      	str	r1, [r7, #8]
 800346c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800346e:	2300      	movs	r3, #0
 8003470:	617b      	str	r3, [r7, #20]
 8003472:	e00a      	b.n	800348a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003474:	f3af 8000 	nop.w
 8003478:	4601      	mov	r1, r0
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	1c5a      	adds	r2, r3, #1
 800347e:	60ba      	str	r2, [r7, #8]
 8003480:	b2ca      	uxtb	r2, r1
 8003482:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	3301      	adds	r3, #1
 8003488:	617b      	str	r3, [r7, #20]
 800348a:	697a      	ldr	r2, [r7, #20]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	429a      	cmp	r2, r3
 8003490:	dbf0      	blt.n	8003474 <_read+0x12>
  }

  return len;
 8003492:	687b      	ldr	r3, [r7, #4]
}
 8003494:	4618      	mov	r0, r3
 8003496:	3718      	adds	r7, #24
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b086      	sub	sp, #24
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034a8:	2300      	movs	r3, #0
 80034aa:	617b      	str	r3, [r7, #20]
 80034ac:	e009      	b.n	80034c2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	1c5a      	adds	r2, r3, #1
 80034b2:	60ba      	str	r2, [r7, #8]
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	4618      	mov	r0, r3
 80034b8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	3301      	adds	r3, #1
 80034c0:	617b      	str	r3, [r7, #20]
 80034c2:	697a      	ldr	r2, [r7, #20]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	dbf1      	blt.n	80034ae <_write+0x12>
  }
  return len;
 80034ca:	687b      	ldr	r3, [r7, #4]
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3718      	adds	r7, #24
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <_close>:

int _close(int file)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80034dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <_fstat>:


int _fstat(int file, struct stat *st)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80034fc:	605a      	str	r2, [r3, #4]
  return 0;
 80034fe:	2300      	movs	r3, #0
}
 8003500:	4618      	mov	r0, r3
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <_isatty>:

int _isatty(int file)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003514:	2301      	movs	r3, #1
}
 8003516:	4618      	mov	r0, r3
 8003518:	370c      	adds	r7, #12
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr

08003522 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003522:	b480      	push	{r7}
 8003524:	b085      	sub	sp, #20
 8003526:	af00      	add	r7, sp, #0
 8003528:	60f8      	str	r0, [r7, #12]
 800352a:	60b9      	str	r1, [r7, #8]
 800352c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800352e:	2300      	movs	r3, #0
}
 8003530:	4618      	mov	r0, r3
 8003532:	3714      	adds	r7, #20
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b086      	sub	sp, #24
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003544:	4a14      	ldr	r2, [pc, #80]	@ (8003598 <_sbrk+0x5c>)
 8003546:	4b15      	ldr	r3, [pc, #84]	@ (800359c <_sbrk+0x60>)
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003550:	4b13      	ldr	r3, [pc, #76]	@ (80035a0 <_sbrk+0x64>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d102      	bne.n	800355e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003558:	4b11      	ldr	r3, [pc, #68]	@ (80035a0 <_sbrk+0x64>)
 800355a:	4a12      	ldr	r2, [pc, #72]	@ (80035a4 <_sbrk+0x68>)
 800355c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800355e:	4b10      	ldr	r3, [pc, #64]	@ (80035a0 <_sbrk+0x64>)
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4413      	add	r3, r2
 8003566:	693a      	ldr	r2, [r7, #16]
 8003568:	429a      	cmp	r2, r3
 800356a:	d207      	bcs.n	800357c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800356c:	f004 fa68 	bl	8007a40 <__errno>
 8003570:	4603      	mov	r3, r0
 8003572:	220c      	movs	r2, #12
 8003574:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003576:	f04f 33ff 	mov.w	r3, #4294967295
 800357a:	e009      	b.n	8003590 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800357c:	4b08      	ldr	r3, [pc, #32]	@ (80035a0 <_sbrk+0x64>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003582:	4b07      	ldr	r3, [pc, #28]	@ (80035a0 <_sbrk+0x64>)
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4413      	add	r3, r2
 800358a:	4a05      	ldr	r2, [pc, #20]	@ (80035a0 <_sbrk+0x64>)
 800358c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800358e:	68fb      	ldr	r3, [r7, #12]
}
 8003590:	4618      	mov	r0, r3
 8003592:	3718      	adds	r7, #24
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}
 8003598:	20020000 	.word	0x20020000
 800359c:	00000400 	.word	0x00000400
 80035a0:	200048f8 	.word	0x200048f8
 80035a4:	20004ae0 	.word	0x20004ae0

080035a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80035a8:	b480      	push	{r7}
 80035aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80035ac:	4b06      	ldr	r3, [pc, #24]	@ (80035c8 <SystemInit+0x20>)
 80035ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035b2:	4a05      	ldr	r2, [pc, #20]	@ (80035c8 <SystemInit+0x20>)
 80035b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80035b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80035bc:	bf00      	nop
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	e000ed00 	.word	0xe000ed00

080035cc <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b086      	sub	sp, #24
 80035d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80035d2:	f107 0308 	add.w	r3, r7, #8
 80035d6:	2200      	movs	r2, #0
 80035d8:	601a      	str	r2, [r3, #0]
 80035da:	605a      	str	r2, [r3, #4]
 80035dc:	609a      	str	r2, [r3, #8]
 80035de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035e0:	463b      	mov	r3, r7
 80035e2:	2200      	movs	r2, #0
 80035e4:	601a      	str	r2, [r3, #0]
 80035e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80035e8:	4b1c      	ldr	r3, [pc, #112]	@ (800365c <MX_TIM3_Init+0x90>)
 80035ea:	4a1d      	ldr	r2, [pc, #116]	@ (8003660 <MX_TIM3_Init+0x94>)
 80035ec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 80035ee:	4b1b      	ldr	r3, [pc, #108]	@ (800365c <MX_TIM3_Init+0x90>)
 80035f0:	2263      	movs	r2, #99	@ 0x63
 80035f2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035f4:	4b19      	ldr	r3, [pc, #100]	@ (800365c <MX_TIM3_Init+0x90>)
 80035f6:	2200      	movs	r2, #0
 80035f8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10-1;
 80035fa:	4b18      	ldr	r3, [pc, #96]	@ (800365c <MX_TIM3_Init+0x90>)
 80035fc:	2209      	movs	r2, #9
 80035fe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003600:	4b16      	ldr	r3, [pc, #88]	@ (800365c <MX_TIM3_Init+0x90>)
 8003602:	2200      	movs	r2, #0
 8003604:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003606:	4b15      	ldr	r3, [pc, #84]	@ (800365c <MX_TIM3_Init+0x90>)
 8003608:	2200      	movs	r2, #0
 800360a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800360c:	4813      	ldr	r0, [pc, #76]	@ (800365c <MX_TIM3_Init+0x90>)
 800360e:	f002 fe73 	bl	80062f8 <HAL_TIM_Base_Init>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d001      	beq.n	800361c <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8003618:	f7ff fb3e 	bl	8002c98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800361c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003620:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003622:	f107 0308 	add.w	r3, r7, #8
 8003626:	4619      	mov	r1, r3
 8003628:	480c      	ldr	r0, [pc, #48]	@ (800365c <MX_TIM3_Init+0x90>)
 800362a:	f002 ff0f 	bl	800644c <HAL_TIM_ConfigClockSource>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d001      	beq.n	8003638 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8003634:	f7ff fb30 	bl	8002c98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003638:	2320      	movs	r3, #32
 800363a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800363c:	2300      	movs	r3, #0
 800363e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003640:	463b      	mov	r3, r7
 8003642:	4619      	mov	r1, r3
 8003644:	4805      	ldr	r0, [pc, #20]	@ (800365c <MX_TIM3_Init+0x90>)
 8003646:	f003 f8e9 	bl	800681c <HAL_TIMEx_MasterConfigSynchronization>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d001      	beq.n	8003654 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8003650:	f7ff fb22 	bl	8002c98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003654:	bf00      	nop
 8003656:	3718      	adds	r7, #24
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}
 800365c:	200048fc 	.word	0x200048fc
 8003660:	40000400 	.word	0x40000400

08003664 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003664:	b480      	push	{r7}
 8003666:	b085      	sub	sp, #20
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a0b      	ldr	r2, [pc, #44]	@ (80036a0 <HAL_TIM_Base_MspInit+0x3c>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d10d      	bne.n	8003692 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003676:	2300      	movs	r3, #0
 8003678:	60fb      	str	r3, [r7, #12]
 800367a:	4b0a      	ldr	r3, [pc, #40]	@ (80036a4 <HAL_TIM_Base_MspInit+0x40>)
 800367c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800367e:	4a09      	ldr	r2, [pc, #36]	@ (80036a4 <HAL_TIM_Base_MspInit+0x40>)
 8003680:	f043 0302 	orr.w	r3, r3, #2
 8003684:	6413      	str	r3, [r2, #64]	@ 0x40
 8003686:	4b07      	ldr	r3, [pc, #28]	@ (80036a4 <HAL_TIM_Base_MspInit+0x40>)
 8003688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	60fb      	str	r3, [r7, #12]
 8003690:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003692:	bf00      	nop
 8003694:	3714      	adds	r7, #20
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	40000400 	.word	0x40000400
 80036a4:	40023800 	.word	0x40023800

080036a8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80036ac:	4b11      	ldr	r3, [pc, #68]	@ (80036f4 <MX_USART1_UART_Init+0x4c>)
 80036ae:	4a12      	ldr	r2, [pc, #72]	@ (80036f8 <MX_USART1_UART_Init+0x50>)
 80036b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80036b2:	4b10      	ldr	r3, [pc, #64]	@ (80036f4 <MX_USART1_UART_Init+0x4c>)
 80036b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80036b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80036ba:	4b0e      	ldr	r3, [pc, #56]	@ (80036f4 <MX_USART1_UART_Init+0x4c>)
 80036bc:	2200      	movs	r2, #0
 80036be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80036c0:	4b0c      	ldr	r3, [pc, #48]	@ (80036f4 <MX_USART1_UART_Init+0x4c>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80036c6:	4b0b      	ldr	r3, [pc, #44]	@ (80036f4 <MX_USART1_UART_Init+0x4c>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80036cc:	4b09      	ldr	r3, [pc, #36]	@ (80036f4 <MX_USART1_UART_Init+0x4c>)
 80036ce:	220c      	movs	r2, #12
 80036d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80036d2:	4b08      	ldr	r3, [pc, #32]	@ (80036f4 <MX_USART1_UART_Init+0x4c>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80036d8:	4b06      	ldr	r3, [pc, #24]	@ (80036f4 <MX_USART1_UART_Init+0x4c>)
 80036da:	2200      	movs	r2, #0
 80036dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80036de:	4805      	ldr	r0, [pc, #20]	@ (80036f4 <MX_USART1_UART_Init+0x4c>)
 80036e0:	f003 f90a 	bl	80068f8 <HAL_UART_Init>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d001      	beq.n	80036ee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80036ea:	f7ff fad5 	bl	8002c98 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80036ee:	bf00      	nop
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	20004944 	.word	0x20004944
 80036f8:	40011000 	.word	0x40011000

080036fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b08a      	sub	sp, #40	@ 0x28
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003704:	f107 0314 	add.w	r3, r7, #20
 8003708:	2200      	movs	r2, #0
 800370a:	601a      	str	r2, [r3, #0]
 800370c:	605a      	str	r2, [r3, #4]
 800370e:	609a      	str	r2, [r3, #8]
 8003710:	60da      	str	r2, [r3, #12]
 8003712:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a19      	ldr	r2, [pc, #100]	@ (8003780 <HAL_UART_MspInit+0x84>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d12c      	bne.n	8003778 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800371e:	2300      	movs	r3, #0
 8003720:	613b      	str	r3, [r7, #16]
 8003722:	4b18      	ldr	r3, [pc, #96]	@ (8003784 <HAL_UART_MspInit+0x88>)
 8003724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003726:	4a17      	ldr	r2, [pc, #92]	@ (8003784 <HAL_UART_MspInit+0x88>)
 8003728:	f043 0310 	orr.w	r3, r3, #16
 800372c:	6453      	str	r3, [r2, #68]	@ 0x44
 800372e:	4b15      	ldr	r3, [pc, #84]	@ (8003784 <HAL_UART_MspInit+0x88>)
 8003730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003732:	f003 0310 	and.w	r3, r3, #16
 8003736:	613b      	str	r3, [r7, #16]
 8003738:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800373a:	2300      	movs	r3, #0
 800373c:	60fb      	str	r3, [r7, #12]
 800373e:	4b11      	ldr	r3, [pc, #68]	@ (8003784 <HAL_UART_MspInit+0x88>)
 8003740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003742:	4a10      	ldr	r2, [pc, #64]	@ (8003784 <HAL_UART_MspInit+0x88>)
 8003744:	f043 0301 	orr.w	r3, r3, #1
 8003748:	6313      	str	r3, [r2, #48]	@ 0x30
 800374a:	4b0e      	ldr	r3, [pc, #56]	@ (8003784 <HAL_UART_MspInit+0x88>)
 800374c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800374e:	f003 0301 	and.w	r3, r3, #1
 8003752:	60fb      	str	r3, [r7, #12]
 8003754:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003756:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800375a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800375c:	2302      	movs	r3, #2
 800375e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003760:	2300      	movs	r3, #0
 8003762:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003764:	2303      	movs	r3, #3
 8003766:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003768:	2307      	movs	r3, #7
 800376a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800376c:	f107 0314 	add.w	r3, r7, #20
 8003770:	4619      	mov	r1, r3
 8003772:	4805      	ldr	r0, [pc, #20]	@ (8003788 <HAL_UART_MspInit+0x8c>)
 8003774:	f001 fb2c 	bl	8004dd0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003778:	bf00      	nop
 800377a:	3728      	adds	r7, #40	@ 0x28
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}
 8003780:	40011000 	.word	0x40011000
 8003784:	40023800 	.word	0x40023800
 8003788:	40020000 	.word	0x40020000

0800378c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
 ldr   sp, =_estack    		 /* set stack pointer */
 800378c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80037c4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003790:	f7ff ff0a 	bl	80035a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003794:	480c      	ldr	r0, [pc, #48]	@ (80037c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003796:	490d      	ldr	r1, [pc, #52]	@ (80037cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003798:	4a0d      	ldr	r2, [pc, #52]	@ (80037d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800379a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800379c:	e002      	b.n	80037a4 <LoopCopyDataInit>

0800379e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800379e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80037a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80037a2:	3304      	adds	r3, #4

080037a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80037a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80037a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80037a8:	d3f9      	bcc.n	800379e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80037aa:	4a0a      	ldr	r2, [pc, #40]	@ (80037d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80037ac:	4c0a      	ldr	r4, [pc, #40]	@ (80037d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80037ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80037b0:	e001      	b.n	80037b6 <LoopFillZerobss>

080037b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80037b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80037b4:	3204      	adds	r2, #4

080037b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80037b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80037b8:	d3fb      	bcc.n	80037b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80037ba:	f004 f947 	bl	8007a4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80037be:	f7ff f9af 	bl	8002b20 <main>
  bx  lr    
 80037c2:	4770      	bx	lr
 ldr   sp, =_estack    		 /* set stack pointer */
 80037c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80037c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80037cc:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80037d0:	0800aa44 	.word	0x0800aa44
  ldr r2, =_sbss
 80037d4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80037d8:	20004adc 	.word	0x20004adc

080037dc <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80037dc:	e7fe      	b.n	80037dc <DMA1_Stream0_IRQHandler>
	...

080037e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80037e4:	4b0e      	ldr	r3, [pc, #56]	@ (8003820 <HAL_Init+0x40>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a0d      	ldr	r2, [pc, #52]	@ (8003820 <HAL_Init+0x40>)
 80037ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80037ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80037f0:	4b0b      	ldr	r3, [pc, #44]	@ (8003820 <HAL_Init+0x40>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a0a      	ldr	r2, [pc, #40]	@ (8003820 <HAL_Init+0x40>)
 80037f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80037fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037fc:	4b08      	ldr	r3, [pc, #32]	@ (8003820 <HAL_Init+0x40>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a07      	ldr	r2, [pc, #28]	@ (8003820 <HAL_Init+0x40>)
 8003802:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003806:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003808:	2003      	movs	r0, #3
 800380a:	f000 febf 	bl	800458c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800380e:	200f      	movs	r0, #15
 8003810:	f000 f808 	bl	8003824 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003814:	f7ff fd96 	bl	8003344 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003818:	2300      	movs	r3, #0
}
 800381a:	4618      	mov	r0, r3
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	40023c00 	.word	0x40023c00

08003824 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800382c:	4b12      	ldr	r3, [pc, #72]	@ (8003878 <HAL_InitTick+0x54>)
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	4b12      	ldr	r3, [pc, #72]	@ (800387c <HAL_InitTick+0x58>)
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	4619      	mov	r1, r3
 8003836:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800383a:	fbb3 f3f1 	udiv	r3, r3, r1
 800383e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003842:	4618      	mov	r0, r3
 8003844:	f000 fed7 	bl	80045f6 <HAL_SYSTICK_Config>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d001      	beq.n	8003852 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e00e      	b.n	8003870 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2b0f      	cmp	r3, #15
 8003856:	d80a      	bhi.n	800386e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003858:	2200      	movs	r2, #0
 800385a:	6879      	ldr	r1, [r7, #4]
 800385c:	f04f 30ff 	mov.w	r0, #4294967295
 8003860:	f000 fe9f 	bl	80045a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003864:	4a06      	ldr	r2, [pc, #24]	@ (8003880 <HAL_InitTick+0x5c>)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800386a:	2300      	movs	r3, #0
 800386c:	e000      	b.n	8003870 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
}
 8003870:	4618      	mov	r0, r3
 8003872:	3708      	adds	r7, #8
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}
 8003878:	20000000 	.word	0x20000000
 800387c:	20000008 	.word	0x20000008
 8003880:	20000004 	.word	0x20000004

08003884 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003884:	b480      	push	{r7}
 8003886:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003888:	4b06      	ldr	r3, [pc, #24]	@ (80038a4 <HAL_IncTick+0x20>)
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	461a      	mov	r2, r3
 800388e:	4b06      	ldr	r3, [pc, #24]	@ (80038a8 <HAL_IncTick+0x24>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4413      	add	r3, r2
 8003894:	4a04      	ldr	r2, [pc, #16]	@ (80038a8 <HAL_IncTick+0x24>)
 8003896:	6013      	str	r3, [r2, #0]
}
 8003898:	bf00      	nop
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	20000008 	.word	0x20000008
 80038a8:	2000498c 	.word	0x2000498c

080038ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038ac:	b480      	push	{r7}
 80038ae:	af00      	add	r7, sp, #0
  return uwTick;
 80038b0:	4b03      	ldr	r3, [pc, #12]	@ (80038c0 <HAL_GetTick+0x14>)
 80038b2:	681b      	ldr	r3, [r3, #0]
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr
 80038be:	bf00      	nop
 80038c0:	2000498c 	.word	0x2000498c

080038c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038cc:	f7ff ffee 	bl	80038ac <HAL_GetTick>
 80038d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038dc:	d005      	beq.n	80038ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80038de:	4b0a      	ldr	r3, [pc, #40]	@ (8003908 <HAL_Delay+0x44>)
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	461a      	mov	r2, r3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	4413      	add	r3, r2
 80038e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80038ea:	bf00      	nop
 80038ec:	f7ff ffde 	bl	80038ac <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	68fa      	ldr	r2, [r7, #12]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d8f7      	bhi.n	80038ec <HAL_Delay+0x28>
  {
  }
}
 80038fc:	bf00      	nop
 80038fe:	bf00      	nop
 8003900:	3710      	adds	r7, #16
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	20000008 	.word	0x20000008

0800390c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003914:	2300      	movs	r3, #0
 8003916:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d101      	bne.n	8003922 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e033      	b.n	800398a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003926:	2b00      	cmp	r3, #0
 8003928:	d109      	bne.n	800393e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f7fd fb7c 	bl	8001028 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003942:	f003 0310 	and.w	r3, r3, #16
 8003946:	2b00      	cmp	r3, #0
 8003948:	d118      	bne.n	800397c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800394e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003952:	f023 0302 	bic.w	r3, r3, #2
 8003956:	f043 0202 	orr.w	r2, r3, #2
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 fbbc 	bl	80040dc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800396e:	f023 0303 	bic.w	r3, r3, #3
 8003972:	f043 0201 	orr.w	r2, r3, #1
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	641a      	str	r2, [r3, #64]	@ 0x40
 800397a:	e001      	b.n	8003980 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003988:	7bfb      	ldrb	r3, [r7, #15]
}
 800398a:	4618      	mov	r0, r3
 800398c:	3710      	adds	r7, #16
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}

08003992 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003992:	b580      	push	{r7, lr}
 8003994:	b086      	sub	sp, #24
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800399a:	2300      	movs	r3, #0
 800399c:	617b      	str	r3, [r7, #20]
 800399e:	2300      	movs	r3, #0
 80039a0:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f003 0302 	and.w	r3, r3, #2
 80039b8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	f003 0320 	and.w	r3, r3, #32
 80039c0:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d049      	beq.n	8003a5c <HAL_ADC_IRQHandler+0xca>
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d046      	beq.n	8003a5c <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039d2:	f003 0310 	and.w	r3, r3, #16
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d105      	bne.n	80039e6 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039de:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d12b      	bne.n	8003a4c <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d127      	bne.n	8003a4c <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a02:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d006      	beq.n	8003a18 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d119      	bne.n	8003a4c <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	685a      	ldr	r2, [r3, #4]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f022 0220 	bic.w	r2, r2, #32
 8003a26:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a2c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a38:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d105      	bne.n	8003a4c <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a44:	f043 0201 	orr.w	r2, r3, #1
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f7fd fc73 	bl	8001338 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f06f 0212 	mvn.w	r2, #18
 8003a5a:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f003 0304 	and.w	r3, r3, #4
 8003a62:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a6a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d057      	beq.n	8003b22 <HAL_ADC_IRQHandler+0x190>
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d054      	beq.n	8003b22 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a7c:	f003 0310 	and.w	r3, r3, #16
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d105      	bne.n	8003a90 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a88:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d139      	bne.n	8003b12 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aa4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d006      	beq.n	8003aba <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d12b      	bne.n	8003b12 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d124      	bne.n	8003b12 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d11d      	bne.n	8003b12 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d119      	bne.n	8003b12 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	685a      	ldr	r2, [r3, #4]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003aec:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003afe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d105      	bne.n	8003b12 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b0a:	f043 0201 	orr.w	r2, r3, #1
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f000 fc60 	bl	80043d8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f06f 020c 	mvn.w	r2, #12
 8003b20:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f003 0301 	and.w	r3, r3, #1
 8003b28:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b30:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d017      	beq.n	8003b68 <HAL_ADC_IRQHandler+0x1d6>
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d014      	beq.n	8003b68 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0301 	and.w	r3, r3, #1
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d10d      	bne.n	8003b68 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b50:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f000 f983 	bl	8003e64 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f06f 0201 	mvn.w	r2, #1
 8003b66:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f003 0320 	and.w	r3, r3, #32
 8003b6e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003b76:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d015      	beq.n	8003baa <HAL_ADC_IRQHandler+0x218>
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d012      	beq.n	8003baa <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b88:	f043 0202 	orr.w	r2, r3, #2
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f06f 0220 	mvn.w	r2, #32
 8003b98:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f7fd fbdc 	bl	8001358 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f06f 0220 	mvn.w	r2, #32
 8003ba8:	601a      	str	r2, [r3, #0]
  }
}
 8003baa:	bf00      	nop
 8003bac:	3718      	adds	r7, #24
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
	...

08003bb4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b088      	sub	sp, #32
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d101      	bne.n	8003bd6 <HAL_ADC_Start_DMA+0x22>
 8003bd2:	2302      	movs	r3, #2
 8003bd4:	e0d0      	b.n	8003d78 <HAL_ADC_Start_DMA+0x1c4>
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2201      	movs	r2, #1
 8003bda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	f003 0301 	and.w	r3, r3, #1
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d018      	beq.n	8003c1e <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	689a      	ldr	r2, [r3, #8]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f042 0201 	orr.w	r2, r2, #1
 8003bfa:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003bfc:	4b60      	ldr	r3, [pc, #384]	@ (8003d80 <HAL_ADC_Start_DMA+0x1cc>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a60      	ldr	r2, [pc, #384]	@ (8003d84 <HAL_ADC_Start_DMA+0x1d0>)
 8003c02:	fba2 2303 	umull	r2, r3, r2, r3
 8003c06:	0c9a      	lsrs	r2, r3, #18
 8003c08:	4613      	mov	r3, r2
 8003c0a:	005b      	lsls	r3, r3, #1
 8003c0c:	4413      	add	r3, r2
 8003c0e:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8003c10:	e002      	b.n	8003c18 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	3b01      	subs	r3, #1
 8003c16:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d1f9      	bne.n	8003c12 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c2c:	d107      	bne.n	8003c3e <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	689a      	ldr	r2, [r3, #8]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003c3c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	f003 0301 	and.w	r3, r3, #1
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	f040 8088 	bne.w	8003d5e <HAL_ADC_Start_DMA+0x1aa>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c52:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003c56:	f023 0301 	bic.w	r3, r3, #1
 8003c5a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d007      	beq.n	8003c80 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c74:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003c78:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c84:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c8c:	d106      	bne.n	8003c9c <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c92:	f023 0206 	bic.w	r2, r3, #6
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	645a      	str	r2, [r3, #68]	@ 0x44
 8003c9a:	e002      	b.n	8003ca2 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003caa:	4b37      	ldr	r3, [pc, #220]	@ (8003d88 <HAL_ADC_Start_DMA+0x1d4>)
 8003cac:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cb2:	4a36      	ldr	r2, [pc, #216]	@ (8003d8c <HAL_ADC_Start_DMA+0x1d8>)
 8003cb4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cba:	4a35      	ldr	r2, [pc, #212]	@ (8003d90 <HAL_ADC_Start_DMA+0x1dc>)
 8003cbc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cc2:	4a34      	ldr	r2, [pc, #208]	@ (8003d94 <HAL_ADC_Start_DMA+0x1e0>)
 8003cc4:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003cce:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	685a      	ldr	r2, [r3, #4]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8003cde:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	689a      	ldr	r2, [r3, #8]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003cee:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	334c      	adds	r3, #76	@ 0x4c
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	68ba      	ldr	r2, [r7, #8]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f000 fd34 	bl	800476c <HAL_DMA_Start_IT>
 8003d04:	4603      	mov	r3, r0
 8003d06:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f003 031f 	and.w	r3, r3, #31
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d10f      	bne.n	8003d34 <HAL_ADC_Start_DMA+0x180>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d129      	bne.n	8003d76 <HAL_ADC_Start_DMA+0x1c2>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	689a      	ldr	r2, [r3, #8]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003d30:	609a      	str	r2, [r3, #8]
 8003d32:	e020      	b.n	8003d76 <HAL_ADC_Start_DMA+0x1c2>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a17      	ldr	r2, [pc, #92]	@ (8003d98 <HAL_ADC_Start_DMA+0x1e4>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d11b      	bne.n	8003d76 <HAL_ADC_Start_DMA+0x1c2>
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d114      	bne.n	8003d76 <HAL_ADC_Start_DMA+0x1c2>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	689a      	ldr	r2, [r3, #8]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003d5a:	609a      	str	r2, [r3, #8]
 8003d5c:	e00b      	b.n	8003d76 <HAL_ADC_Start_DMA+0x1c2>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d62:	f043 0210 	orr.w	r2, r3, #16
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d6e:	f043 0201 	orr.w	r2, r3, #1
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8003d76:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3720      	adds	r7, #32
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	20000000 	.word	0x20000000
 8003d84:	431bde83 	.word	0x431bde83
 8003d88:	40012300 	.word	0x40012300
 8003d8c:	080042d5 	.word	0x080042d5
 8003d90:	0800438f 	.word	0x0800438f
 8003d94:	080043ab 	.word	0x080043ab
 8003d98:	40012000 	.word	0x40012000

08003d9c <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003da4:	2300      	movs	r3, #0
 8003da6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d101      	bne.n	8003db6 <HAL_ADC_Stop_DMA+0x1a>
 8003db2:	2302      	movs	r3, #2
 8003db4:	e048      	b.n	8003e48 <HAL_ADC_Stop_DMA+0xac>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2201      	movs	r2, #1
 8003dba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	689a      	ldr	r2, [r3, #8]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f022 0201 	bic.w	r2, r2, #1
 8003dcc:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f003 0301 	and.w	r3, r3, #1
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d130      	bne.n	8003e3e <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	689a      	ldr	r2, [r3, #8]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003dea:	609a      	str	r2, [r3, #8]

    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003df0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d10f      	bne.n	8003e1a <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f000 fd0c 	bl	800481c <HAL_DMA_Abort>
 8003e04:	4603      	mov	r3, r0
 8003e06:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8003e08:	7bfb      	ldrb	r3, [r7, #15]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d005      	beq.n	8003e1a <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e12:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	685a      	ldr	r2, [r3, #4]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 8003e28:	605a      	str	r2, [r3, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e2e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003e32:	f023 0301 	bic.w	r3, r3, #1
 8003e36:	f043 0201 	orr.w	r2, r3, #1
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3710      	adds	r7, #16
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}

08003e50 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003e58:	bf00      	nop
 8003e5a:	370c      	adds	r7, #12
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003e6c:	bf00      	nop
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b085      	sub	sp, #20
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003e82:	2300      	movs	r3, #0
 8003e84:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d101      	bne.n	8003e94 <HAL_ADC_ConfigChannel+0x1c>
 8003e90:	2302      	movs	r3, #2
 8003e92:	e113      	b.n	80040bc <HAL_ADC_ConfigChannel+0x244>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2b09      	cmp	r3, #9
 8003ea2:	d925      	bls.n	8003ef0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	68d9      	ldr	r1, [r3, #12]
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	005b      	lsls	r3, r3, #1
 8003eb6:	4413      	add	r3, r2
 8003eb8:	3b1e      	subs	r3, #30
 8003eba:	2207      	movs	r2, #7
 8003ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec0:	43da      	mvns	r2, r3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	400a      	ands	r2, r1
 8003ec8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68d9      	ldr	r1, [r3, #12]
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	689a      	ldr	r2, [r3, #8]
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	4618      	mov	r0, r3
 8003edc:	4603      	mov	r3, r0
 8003ede:	005b      	lsls	r3, r3, #1
 8003ee0:	4403      	add	r3, r0
 8003ee2:	3b1e      	subs	r3, #30
 8003ee4:	409a      	lsls	r2, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	430a      	orrs	r2, r1
 8003eec:	60da      	str	r2, [r3, #12]
 8003eee:	e022      	b.n	8003f36 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	6919      	ldr	r1, [r3, #16]
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	461a      	mov	r2, r3
 8003efe:	4613      	mov	r3, r2
 8003f00:	005b      	lsls	r3, r3, #1
 8003f02:	4413      	add	r3, r2
 8003f04:	2207      	movs	r2, #7
 8003f06:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0a:	43da      	mvns	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	400a      	ands	r2, r1
 8003f12:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	6919      	ldr	r1, [r3, #16]
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	689a      	ldr	r2, [r3, #8]
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	4618      	mov	r0, r3
 8003f26:	4603      	mov	r3, r0
 8003f28:	005b      	lsls	r3, r3, #1
 8003f2a:	4403      	add	r3, r0
 8003f2c:	409a      	lsls	r2, r3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	430a      	orrs	r2, r1
 8003f34:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	2b06      	cmp	r3, #6
 8003f3c:	d824      	bhi.n	8003f88 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	685a      	ldr	r2, [r3, #4]
 8003f48:	4613      	mov	r3, r2
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	4413      	add	r3, r2
 8003f4e:	3b05      	subs	r3, #5
 8003f50:	221f      	movs	r2, #31
 8003f52:	fa02 f303 	lsl.w	r3, r2, r3
 8003f56:	43da      	mvns	r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	400a      	ands	r2, r1
 8003f5e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	685a      	ldr	r2, [r3, #4]
 8003f72:	4613      	mov	r3, r2
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	4413      	add	r3, r2
 8003f78:	3b05      	subs	r3, #5
 8003f7a:	fa00 f203 	lsl.w	r2, r0, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	430a      	orrs	r2, r1
 8003f84:	635a      	str	r2, [r3, #52]	@ 0x34
 8003f86:	e04c      	b.n	8004022 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	2b0c      	cmp	r3, #12
 8003f8e:	d824      	bhi.n	8003fda <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	685a      	ldr	r2, [r3, #4]
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	4413      	add	r3, r2
 8003fa0:	3b23      	subs	r3, #35	@ 0x23
 8003fa2:	221f      	movs	r2, #31
 8003fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa8:	43da      	mvns	r2, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	400a      	ands	r2, r1
 8003fb0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	685a      	ldr	r2, [r3, #4]
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	4413      	add	r3, r2
 8003fca:	3b23      	subs	r3, #35	@ 0x23
 8003fcc:	fa00 f203 	lsl.w	r2, r0, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	430a      	orrs	r2, r1
 8003fd6:	631a      	str	r2, [r3, #48]	@ 0x30
 8003fd8:	e023      	b.n	8004022 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	685a      	ldr	r2, [r3, #4]
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	4413      	add	r3, r2
 8003fea:	3b41      	subs	r3, #65	@ 0x41
 8003fec:	221f      	movs	r2, #31
 8003fee:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff2:	43da      	mvns	r2, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	400a      	ands	r2, r1
 8003ffa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	b29b      	uxth	r3, r3
 8004008:	4618      	mov	r0, r3
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	685a      	ldr	r2, [r3, #4]
 800400e:	4613      	mov	r3, r2
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	4413      	add	r3, r2
 8004014:	3b41      	subs	r3, #65	@ 0x41
 8004016:	fa00 f203 	lsl.w	r2, r0, r3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	430a      	orrs	r2, r1
 8004020:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004022:	4b29      	ldr	r3, [pc, #164]	@ (80040c8 <HAL_ADC_ConfigChannel+0x250>)
 8004024:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a28      	ldr	r2, [pc, #160]	@ (80040cc <HAL_ADC_ConfigChannel+0x254>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d10f      	bne.n	8004050 <HAL_ADC_ConfigChannel+0x1d8>
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	2b12      	cmp	r3, #18
 8004036:	d10b      	bne.n	8004050 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a1d      	ldr	r2, [pc, #116]	@ (80040cc <HAL_ADC_ConfigChannel+0x254>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d12b      	bne.n	80040b2 <HAL_ADC_ConfigChannel+0x23a>
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a1c      	ldr	r2, [pc, #112]	@ (80040d0 <HAL_ADC_ConfigChannel+0x258>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d003      	beq.n	800406c <HAL_ADC_ConfigChannel+0x1f4>
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2b11      	cmp	r3, #17
 800406a:	d122      	bne.n	80040b2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a11      	ldr	r2, [pc, #68]	@ (80040d0 <HAL_ADC_ConfigChannel+0x258>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d111      	bne.n	80040b2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800408e:	4b11      	ldr	r3, [pc, #68]	@ (80040d4 <HAL_ADC_ConfigChannel+0x25c>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a11      	ldr	r2, [pc, #68]	@ (80040d8 <HAL_ADC_ConfigChannel+0x260>)
 8004094:	fba2 2303 	umull	r2, r3, r2, r3
 8004098:	0c9a      	lsrs	r2, r3, #18
 800409a:	4613      	mov	r3, r2
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	4413      	add	r3, r2
 80040a0:	005b      	lsls	r3, r3, #1
 80040a2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80040a4:	e002      	b.n	80040ac <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	3b01      	subs	r3, #1
 80040aa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d1f9      	bne.n	80040a6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80040ba:	2300      	movs	r3, #0
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3714      	adds	r7, #20
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr
 80040c8:	40012300 	.word	0x40012300
 80040cc:	40012000 	.word	0x40012000
 80040d0:	10000012 	.word	0x10000012
 80040d4:	20000000 	.word	0x20000000
 80040d8:	431bde83 	.word	0x431bde83

080040dc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80040dc:	b480      	push	{r7}
 80040de:	b085      	sub	sp, #20
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80040e4:	4b79      	ldr	r3, [pc, #484]	@ (80042cc <ADC_Init+0x1f0>)
 80040e6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	685a      	ldr	r2, [r3, #4]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	431a      	orrs	r2, r3
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	685a      	ldr	r2, [r3, #4]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004110:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	6859      	ldr	r1, [r3, #4]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	691b      	ldr	r3, [r3, #16]
 800411c:	021a      	lsls	r2, r3, #8
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	430a      	orrs	r2, r1
 8004124:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	685a      	ldr	r2, [r3, #4]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004134:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	6859      	ldr	r1, [r3, #4]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	689a      	ldr	r2, [r3, #8]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	430a      	orrs	r2, r1
 8004146:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	689a      	ldr	r2, [r3, #8]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004156:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	6899      	ldr	r1, [r3, #8]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	68da      	ldr	r2, [r3, #12]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	430a      	orrs	r2, r1
 8004168:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800416e:	4a58      	ldr	r2, [pc, #352]	@ (80042d0 <ADC_Init+0x1f4>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d022      	beq.n	80041ba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	689a      	ldr	r2, [r3, #8]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004182:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	6899      	ldr	r1, [r3, #8]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	430a      	orrs	r2, r1
 8004194:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	689a      	ldr	r2, [r3, #8]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80041a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	6899      	ldr	r1, [r3, #8]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	430a      	orrs	r2, r1
 80041b6:	609a      	str	r2, [r3, #8]
 80041b8:	e00f      	b.n	80041da <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	689a      	ldr	r2, [r3, #8]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80041c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	689a      	ldr	r2, [r3, #8]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80041d8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	689a      	ldr	r2, [r3, #8]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f022 0202 	bic.w	r2, r2, #2
 80041e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	6899      	ldr	r1, [r3, #8]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	7e1b      	ldrb	r3, [r3, #24]
 80041f4:	005a      	lsls	r2, r3, #1
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	430a      	orrs	r2, r1
 80041fc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d01b      	beq.n	8004240 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	685a      	ldr	r2, [r3, #4]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004216:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	685a      	ldr	r2, [r3, #4]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004226:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	6859      	ldr	r1, [r3, #4]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004232:	3b01      	subs	r3, #1
 8004234:	035a      	lsls	r2, r3, #13
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	430a      	orrs	r2, r1
 800423c:	605a      	str	r2, [r3, #4]
 800423e:	e007      	b.n	8004250 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	685a      	ldr	r2, [r3, #4]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800424e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800425e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	69db      	ldr	r3, [r3, #28]
 800426a:	3b01      	subs	r3, #1
 800426c:	051a      	lsls	r2, r3, #20
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	430a      	orrs	r2, r1
 8004274:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	689a      	ldr	r2, [r3, #8]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004284:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	6899      	ldr	r1, [r3, #8]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004292:	025a      	lsls	r2, r3, #9
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	430a      	orrs	r2, r1
 800429a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	689a      	ldr	r2, [r3, #8]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	6899      	ldr	r1, [r3, #8]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	695b      	ldr	r3, [r3, #20]
 80042b6:	029a      	lsls	r2, r3, #10
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	430a      	orrs	r2, r1
 80042be:	609a      	str	r2, [r3, #8]
}
 80042c0:	bf00      	nop
 80042c2:	3714      	adds	r7, #20
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr
 80042cc:	40012300 	.word	0x40012300
 80042d0:	0f000001 	.word	0x0f000001

080042d4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042e0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042e6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d13c      	bne.n	8004368 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042f2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d12b      	bne.n	8004360 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800430c:	2b00      	cmp	r3, #0
 800430e:	d127      	bne.n	8004360 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004316:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800431a:	2b00      	cmp	r3, #0
 800431c:	d006      	beq.n	800432c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004328:	2b00      	cmp	r3, #0
 800432a:	d119      	bne.n	8004360 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	685a      	ldr	r2, [r3, #4]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f022 0220 	bic.w	r2, r2, #32
 800433a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004340:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800434c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004350:	2b00      	cmp	r3, #0
 8004352:	d105      	bne.n	8004360 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004358:	f043 0201 	orr.w	r2, r3, #1
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004360:	68f8      	ldr	r0, [r7, #12]
 8004362:	f7fc ffe9 	bl	8001338 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004366:	e00e      	b.n	8004386 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800436c:	f003 0310 	and.w	r3, r3, #16
 8004370:	2b00      	cmp	r3, #0
 8004372:	d003      	beq.n	800437c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004374:	68f8      	ldr	r0, [r7, #12]
 8004376:	f7fc ffef 	bl	8001358 <HAL_ADC_ErrorCallback>
}
 800437a:	e004      	b.n	8004386 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004380:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	4798      	blx	r3
}
 8004386:	bf00      	nop
 8004388:	3710      	adds	r7, #16
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}

0800438e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800438e:	b580      	push	{r7, lr}
 8004390:	b084      	sub	sp, #16
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800439a:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800439c:	68f8      	ldr	r0, [r7, #12]
 800439e:	f7ff fd57 	bl	8003e50 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80043a2:	bf00      	nop
 80043a4:	3710      	adds	r7, #16
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}

080043aa <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80043aa:	b580      	push	{r7, lr}
 80043ac:	b084      	sub	sp, #16
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043b6:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2240      	movs	r2, #64	@ 0x40
 80043bc:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043c2:	f043 0204 	orr.w	r2, r3, #4
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80043ca:	68f8      	ldr	r0, [r7, #12]
 80043cc:	f7fc ffc4 	bl	8001358 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80043d0:	bf00      	nop
 80043d2:	3710      	adds	r7, #16
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80043e0:	bf00      	nop
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr

080043ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b085      	sub	sp, #20
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f003 0307 	and.w	r3, r3, #7
 80043fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80043fc:	4b0c      	ldr	r3, [pc, #48]	@ (8004430 <__NVIC_SetPriorityGrouping+0x44>)
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004402:	68ba      	ldr	r2, [r7, #8]
 8004404:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004408:	4013      	ands	r3, r2
 800440a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004414:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004418:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800441c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800441e:	4a04      	ldr	r2, [pc, #16]	@ (8004430 <__NVIC_SetPriorityGrouping+0x44>)
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	60d3      	str	r3, [r2, #12]
}
 8004424:	bf00      	nop
 8004426:	3714      	adds	r7, #20
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr
 8004430:	e000ed00 	.word	0xe000ed00

08004434 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004434:	b480      	push	{r7}
 8004436:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004438:	4b04      	ldr	r3, [pc, #16]	@ (800444c <__NVIC_GetPriorityGrouping+0x18>)
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	0a1b      	lsrs	r3, r3, #8
 800443e:	f003 0307 	and.w	r3, r3, #7
}
 8004442:	4618      	mov	r0, r3
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr
 800444c:	e000ed00 	.word	0xe000ed00

08004450 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	4603      	mov	r3, r0
 8004458:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800445a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800445e:	2b00      	cmp	r3, #0
 8004460:	db0b      	blt.n	800447a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004462:	79fb      	ldrb	r3, [r7, #7]
 8004464:	f003 021f 	and.w	r2, r3, #31
 8004468:	4907      	ldr	r1, [pc, #28]	@ (8004488 <__NVIC_EnableIRQ+0x38>)
 800446a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800446e:	095b      	lsrs	r3, r3, #5
 8004470:	2001      	movs	r0, #1
 8004472:	fa00 f202 	lsl.w	r2, r0, r2
 8004476:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800447a:	bf00      	nop
 800447c:	370c      	adds	r7, #12
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr
 8004486:	bf00      	nop
 8004488:	e000e100 	.word	0xe000e100

0800448c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	4603      	mov	r3, r0
 8004494:	6039      	str	r1, [r7, #0]
 8004496:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004498:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800449c:	2b00      	cmp	r3, #0
 800449e:	db0a      	blt.n	80044b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	b2da      	uxtb	r2, r3
 80044a4:	490c      	ldr	r1, [pc, #48]	@ (80044d8 <__NVIC_SetPriority+0x4c>)
 80044a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044aa:	0112      	lsls	r2, r2, #4
 80044ac:	b2d2      	uxtb	r2, r2
 80044ae:	440b      	add	r3, r1
 80044b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80044b4:	e00a      	b.n	80044cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	b2da      	uxtb	r2, r3
 80044ba:	4908      	ldr	r1, [pc, #32]	@ (80044dc <__NVIC_SetPriority+0x50>)
 80044bc:	79fb      	ldrb	r3, [r7, #7]
 80044be:	f003 030f 	and.w	r3, r3, #15
 80044c2:	3b04      	subs	r3, #4
 80044c4:	0112      	lsls	r2, r2, #4
 80044c6:	b2d2      	uxtb	r2, r2
 80044c8:	440b      	add	r3, r1
 80044ca:	761a      	strb	r2, [r3, #24]
}
 80044cc:	bf00      	nop
 80044ce:	370c      	adds	r7, #12
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr
 80044d8:	e000e100 	.word	0xe000e100
 80044dc:	e000ed00 	.word	0xe000ed00

080044e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b089      	sub	sp, #36	@ 0x24
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f003 0307 	and.w	r3, r3, #7
 80044f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	f1c3 0307 	rsb	r3, r3, #7
 80044fa:	2b04      	cmp	r3, #4
 80044fc:	bf28      	it	cs
 80044fe:	2304      	movcs	r3, #4
 8004500:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	3304      	adds	r3, #4
 8004506:	2b06      	cmp	r3, #6
 8004508:	d902      	bls.n	8004510 <NVIC_EncodePriority+0x30>
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	3b03      	subs	r3, #3
 800450e:	e000      	b.n	8004512 <NVIC_EncodePriority+0x32>
 8004510:	2300      	movs	r3, #0
 8004512:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004514:	f04f 32ff 	mov.w	r2, #4294967295
 8004518:	69bb      	ldr	r3, [r7, #24]
 800451a:	fa02 f303 	lsl.w	r3, r2, r3
 800451e:	43da      	mvns	r2, r3
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	401a      	ands	r2, r3
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004528:	f04f 31ff 	mov.w	r1, #4294967295
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	fa01 f303 	lsl.w	r3, r1, r3
 8004532:	43d9      	mvns	r1, r3
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004538:	4313      	orrs	r3, r2
         );
}
 800453a:	4618      	mov	r0, r3
 800453c:	3724      	adds	r7, #36	@ 0x24
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr
	...

08004548 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	3b01      	subs	r3, #1
 8004554:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004558:	d301      	bcc.n	800455e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800455a:	2301      	movs	r3, #1
 800455c:	e00f      	b.n	800457e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800455e:	4a0a      	ldr	r2, [pc, #40]	@ (8004588 <SysTick_Config+0x40>)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	3b01      	subs	r3, #1
 8004564:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004566:	210f      	movs	r1, #15
 8004568:	f04f 30ff 	mov.w	r0, #4294967295
 800456c:	f7ff ff8e 	bl	800448c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004570:	4b05      	ldr	r3, [pc, #20]	@ (8004588 <SysTick_Config+0x40>)
 8004572:	2200      	movs	r2, #0
 8004574:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004576:	4b04      	ldr	r3, [pc, #16]	@ (8004588 <SysTick_Config+0x40>)
 8004578:	2207      	movs	r2, #7
 800457a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800457c:	2300      	movs	r3, #0
}
 800457e:	4618      	mov	r0, r3
 8004580:	3708      	adds	r7, #8
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	e000e010 	.word	0xe000e010

0800458c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b082      	sub	sp, #8
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f7ff ff29 	bl	80043ec <__NVIC_SetPriorityGrouping>
}
 800459a:	bf00      	nop
 800459c:	3708      	adds	r7, #8
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}

080045a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80045a2:	b580      	push	{r7, lr}
 80045a4:	b086      	sub	sp, #24
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	4603      	mov	r3, r0
 80045aa:	60b9      	str	r1, [r7, #8]
 80045ac:	607a      	str	r2, [r7, #4]
 80045ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80045b0:	2300      	movs	r3, #0
 80045b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80045b4:	f7ff ff3e 	bl	8004434 <__NVIC_GetPriorityGrouping>
 80045b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	68b9      	ldr	r1, [r7, #8]
 80045be:	6978      	ldr	r0, [r7, #20]
 80045c0:	f7ff ff8e 	bl	80044e0 <NVIC_EncodePriority>
 80045c4:	4602      	mov	r2, r0
 80045c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045ca:	4611      	mov	r1, r2
 80045cc:	4618      	mov	r0, r3
 80045ce:	f7ff ff5d 	bl	800448c <__NVIC_SetPriority>
}
 80045d2:	bf00      	nop
 80045d4:	3718      	adds	r7, #24
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}

080045da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045da:	b580      	push	{r7, lr}
 80045dc:	b082      	sub	sp, #8
 80045de:	af00      	add	r7, sp, #0
 80045e0:	4603      	mov	r3, r0
 80045e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80045e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045e8:	4618      	mov	r0, r3
 80045ea:	f7ff ff31 	bl	8004450 <__NVIC_EnableIRQ>
}
 80045ee:	bf00      	nop
 80045f0:	3708      	adds	r7, #8
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}

080045f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80045f6:	b580      	push	{r7, lr}
 80045f8:	b082      	sub	sp, #8
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f7ff ffa2 	bl	8004548 <SysTick_Config>
 8004604:	4603      	mov	r3, r0
}
 8004606:	4618      	mov	r0, r3
 8004608:	3708      	adds	r7, #8
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
	...

08004610 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b086      	sub	sp, #24
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004618:	2300      	movs	r3, #0
 800461a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800461c:	f7ff f946 	bl	80038ac <HAL_GetTick>
 8004620:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d101      	bne.n	800462c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e099      	b.n	8004760 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2202      	movs	r2, #2
 8004630:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f022 0201 	bic.w	r2, r2, #1
 800464a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800464c:	e00f      	b.n	800466e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800464e:	f7ff f92d 	bl	80038ac <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	2b05      	cmp	r3, #5
 800465a:	d908      	bls.n	800466e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2220      	movs	r2, #32
 8004660:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2203      	movs	r2, #3
 8004666:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e078      	b.n	8004760 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0301 	and.w	r3, r3, #1
 8004678:	2b00      	cmp	r3, #0
 800467a:	d1e8      	bne.n	800464e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004684:	697a      	ldr	r2, [r7, #20]
 8004686:	4b38      	ldr	r3, [pc, #224]	@ (8004768 <HAL_DMA_Init+0x158>)
 8004688:	4013      	ands	r3, r2
 800468a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	685a      	ldr	r2, [r3, #4]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800469a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	691b      	ldr	r3, [r3, #16]
 80046a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	699b      	ldr	r3, [r3, #24]
 80046ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a1b      	ldr	r3, [r3, #32]
 80046b8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80046ba:	697a      	ldr	r2, [r7, #20]
 80046bc:	4313      	orrs	r3, r2
 80046be:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c4:	2b04      	cmp	r3, #4
 80046c6:	d107      	bne.n	80046d8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046d0:	4313      	orrs	r3, r2
 80046d2:	697a      	ldr	r2, [r7, #20]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	697a      	ldr	r2, [r7, #20]
 80046de:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	695b      	ldr	r3, [r3, #20]
 80046e6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	f023 0307 	bic.w	r3, r3, #7
 80046ee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f4:	697a      	ldr	r2, [r7, #20]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046fe:	2b04      	cmp	r3, #4
 8004700:	d117      	bne.n	8004732 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004706:	697a      	ldr	r2, [r7, #20]
 8004708:	4313      	orrs	r3, r2
 800470a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004710:	2b00      	cmp	r3, #0
 8004712:	d00e      	beq.n	8004732 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f000 fadf 	bl	8004cd8 <DMA_CheckFifoParam>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d008      	beq.n	8004732 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2240      	movs	r2, #64	@ 0x40
 8004724:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2201      	movs	r2, #1
 800472a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800472e:	2301      	movs	r3, #1
 8004730:	e016      	b.n	8004760 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	697a      	ldr	r2, [r7, #20]
 8004738:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 fa96 	bl	8004c6c <DMA_CalcBaseAndBitshift>
 8004740:	4603      	mov	r3, r0
 8004742:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004748:	223f      	movs	r2, #63	@ 0x3f
 800474a:	409a      	lsls	r2, r3
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2201      	movs	r2, #1
 800475a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800475e:	2300      	movs	r3, #0
}
 8004760:	4618      	mov	r0, r3
 8004762:	3718      	adds	r7, #24
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}
 8004768:	f010803f 	.word	0xf010803f

0800476c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b086      	sub	sp, #24
 8004770:	af00      	add	r7, sp, #0
 8004772:	60f8      	str	r0, [r7, #12]
 8004774:	60b9      	str	r1, [r7, #8]
 8004776:	607a      	str	r2, [r7, #4]
 8004778:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800477a:	2300      	movs	r3, #0
 800477c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004782:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800478a:	2b01      	cmp	r3, #1
 800478c:	d101      	bne.n	8004792 <HAL_DMA_Start_IT+0x26>
 800478e:	2302      	movs	r3, #2
 8004790:	e040      	b.n	8004814 <HAL_DMA_Start_IT+0xa8>
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2201      	movs	r2, #1
 8004796:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d12f      	bne.n	8004806 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2202      	movs	r2, #2
 80047aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2200      	movs	r2, #0
 80047b2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	68b9      	ldr	r1, [r7, #8]
 80047ba:	68f8      	ldr	r0, [r7, #12]
 80047bc:	f000 fa28 	bl	8004c10 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047c4:	223f      	movs	r2, #63	@ 0x3f
 80047c6:	409a      	lsls	r2, r3
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f042 0216 	orr.w	r2, r2, #22
 80047da:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d007      	beq.n	80047f4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f042 0208 	orr.w	r2, r2, #8
 80047f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f042 0201 	orr.w	r2, r2, #1
 8004802:	601a      	str	r2, [r3, #0]
 8004804:	e005      	b.n	8004812 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2200      	movs	r2, #0
 800480a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800480e:	2302      	movs	r3, #2
 8004810:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004812:	7dfb      	ldrb	r3, [r7, #23]
}
 8004814:	4618      	mov	r0, r3
 8004816:	3718      	adds	r7, #24
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}

0800481c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004828:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800482a:	f7ff f83f 	bl	80038ac <HAL_GetTick>
 800482e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004836:	b2db      	uxtb	r3, r3
 8004838:	2b02      	cmp	r3, #2
 800483a:	d008      	beq.n	800484e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2280      	movs	r2, #128	@ 0x80
 8004840:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e052      	b.n	80048f4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f022 0216 	bic.w	r2, r2, #22
 800485c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	695a      	ldr	r2, [r3, #20]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800486c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004872:	2b00      	cmp	r3, #0
 8004874:	d103      	bne.n	800487e <HAL_DMA_Abort+0x62>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800487a:	2b00      	cmp	r3, #0
 800487c:	d007      	beq.n	800488e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f022 0208 	bic.w	r2, r2, #8
 800488c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f022 0201 	bic.w	r2, r2, #1
 800489c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800489e:	e013      	b.n	80048c8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80048a0:	f7ff f804 	bl	80038ac <HAL_GetTick>
 80048a4:	4602      	mov	r2, r0
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	2b05      	cmp	r3, #5
 80048ac:	d90c      	bls.n	80048c8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2220      	movs	r2, #32
 80048b2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2203      	movs	r2, #3
 80048b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80048c4:	2303      	movs	r3, #3
 80048c6:	e015      	b.n	80048f4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0301 	and.w	r3, r3, #1
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d1e4      	bne.n	80048a0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048da:	223f      	movs	r2, #63	@ 0x3f
 80048dc:	409a      	lsls	r2, r3
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2201      	movs	r2, #1
 80048e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80048f2:	2300      	movs	r3, #0
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3710      	adds	r7, #16
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}

080048fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b086      	sub	sp, #24
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004904:	2300      	movs	r3, #0
 8004906:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004908:	4b8e      	ldr	r3, [pc, #568]	@ (8004b44 <HAL_DMA_IRQHandler+0x248>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a8e      	ldr	r2, [pc, #568]	@ (8004b48 <HAL_DMA_IRQHandler+0x24c>)
 800490e:	fba2 2303 	umull	r2, r3, r2, r3
 8004912:	0a9b      	lsrs	r3, r3, #10
 8004914:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800491a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004926:	2208      	movs	r2, #8
 8004928:	409a      	lsls	r2, r3
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	4013      	ands	r3, r2
 800492e:	2b00      	cmp	r3, #0
 8004930:	d01a      	beq.n	8004968 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 0304 	and.w	r3, r3, #4
 800493c:	2b00      	cmp	r3, #0
 800493e:	d013      	beq.n	8004968 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f022 0204 	bic.w	r2, r2, #4
 800494e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004954:	2208      	movs	r2, #8
 8004956:	409a      	lsls	r2, r3
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004960:	f043 0201 	orr.w	r2, r3, #1
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800496c:	2201      	movs	r2, #1
 800496e:	409a      	lsls	r2, r3
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	4013      	ands	r3, r2
 8004974:	2b00      	cmp	r3, #0
 8004976:	d012      	beq.n	800499e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	695b      	ldr	r3, [r3, #20]
 800497e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00b      	beq.n	800499e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800498a:	2201      	movs	r2, #1
 800498c:	409a      	lsls	r2, r3
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004996:	f043 0202 	orr.w	r2, r3, #2
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049a2:	2204      	movs	r2, #4
 80049a4:	409a      	lsls	r2, r3
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	4013      	ands	r3, r2
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d012      	beq.n	80049d4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0302 	and.w	r3, r3, #2
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d00b      	beq.n	80049d4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049c0:	2204      	movs	r2, #4
 80049c2:	409a      	lsls	r2, r3
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049cc:	f043 0204 	orr.w	r2, r3, #4
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049d8:	2210      	movs	r2, #16
 80049da:	409a      	lsls	r2, r3
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	4013      	ands	r3, r2
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d043      	beq.n	8004a6c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0308 	and.w	r3, r3, #8
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d03c      	beq.n	8004a6c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049f6:	2210      	movs	r2, #16
 80049f8:	409a      	lsls	r2, r3
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d018      	beq.n	8004a3e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d108      	bne.n	8004a2c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d024      	beq.n	8004a6c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	4798      	blx	r3
 8004a2a:	e01f      	b.n	8004a6c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d01b      	beq.n	8004a6c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	4798      	blx	r3
 8004a3c:	e016      	b.n	8004a6c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d107      	bne.n	8004a5c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f022 0208 	bic.w	r2, r2, #8
 8004a5a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d003      	beq.n	8004a6c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a70:	2220      	movs	r2, #32
 8004a72:	409a      	lsls	r2, r3
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	4013      	ands	r3, r2
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	f000 808f 	beq.w	8004b9c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 0310 	and.w	r3, r3, #16
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	f000 8087 	beq.w	8004b9c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a92:	2220      	movs	r2, #32
 8004a94:	409a      	lsls	r2, r3
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	2b05      	cmp	r3, #5
 8004aa4:	d136      	bne.n	8004b14 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f022 0216 	bic.w	r2, r2, #22
 8004ab4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	695a      	ldr	r2, [r3, #20]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004ac4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d103      	bne.n	8004ad6 <HAL_DMA_IRQHandler+0x1da>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d007      	beq.n	8004ae6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f022 0208 	bic.w	r2, r2, #8
 8004ae4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004aea:	223f      	movs	r2, #63	@ 0x3f
 8004aec:	409a      	lsls	r2, r3
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2201      	movs	r2, #1
 8004af6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d07e      	beq.n	8004c08 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	4798      	blx	r3
        }
        return;
 8004b12:	e079      	b.n	8004c08 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d01d      	beq.n	8004b5e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d10d      	bne.n	8004b4c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d031      	beq.n	8004b9c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	4798      	blx	r3
 8004b40:	e02c      	b.n	8004b9c <HAL_DMA_IRQHandler+0x2a0>
 8004b42:	bf00      	nop
 8004b44:	20000000 	.word	0x20000000
 8004b48:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d023      	beq.n	8004b9c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	4798      	blx	r3
 8004b5c:	e01e      	b.n	8004b9c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d10f      	bne.n	8004b8c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f022 0210 	bic.w	r2, r2, #16
 8004b7a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d003      	beq.n	8004b9c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d032      	beq.n	8004c0a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ba8:	f003 0301 	and.w	r3, r3, #1
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d022      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2205      	movs	r2, #5
 8004bb4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f022 0201 	bic.w	r2, r2, #1
 8004bc6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	3301      	adds	r3, #1
 8004bcc:	60bb      	str	r3, [r7, #8]
 8004bce:	697a      	ldr	r2, [r7, #20]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d307      	bcc.n	8004be4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0301 	and.w	r3, r3, #1
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d1f2      	bne.n	8004bc8 <HAL_DMA_IRQHandler+0x2cc>
 8004be2:	e000      	b.n	8004be6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004be4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2201      	movs	r2, #1
 8004bea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d005      	beq.n	8004c0a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	4798      	blx	r3
 8004c06:	e000      	b.n	8004c0a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004c08:	bf00      	nop
    }
  }
}
 8004c0a:	3718      	adds	r7, #24
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}

08004c10 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b085      	sub	sp, #20
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	60b9      	str	r1, [r7, #8]
 8004c1a:	607a      	str	r2, [r7, #4]
 8004c1c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004c2c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	683a      	ldr	r2, [r7, #0]
 8004c34:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	2b40      	cmp	r3, #64	@ 0x40
 8004c3c:	d108      	bne.n	8004c50 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	68ba      	ldr	r2, [r7, #8]
 8004c4c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004c4e:	e007      	b.n	8004c60 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	68ba      	ldr	r2, [r7, #8]
 8004c56:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	60da      	str	r2, [r3, #12]
}
 8004c60:	bf00      	nop
 8004c62:	3714      	adds	r7, #20
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr

08004c6c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b085      	sub	sp, #20
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	3b10      	subs	r3, #16
 8004c7c:	4a14      	ldr	r2, [pc, #80]	@ (8004cd0 <DMA_CalcBaseAndBitshift+0x64>)
 8004c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c82:	091b      	lsrs	r3, r3, #4
 8004c84:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004c86:	4a13      	ldr	r2, [pc, #76]	@ (8004cd4 <DMA_CalcBaseAndBitshift+0x68>)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	4413      	add	r3, r2
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	461a      	mov	r2, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2b03      	cmp	r3, #3
 8004c98:	d909      	bls.n	8004cae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004ca2:	f023 0303 	bic.w	r3, r3, #3
 8004ca6:	1d1a      	adds	r2, r3, #4
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	659a      	str	r2, [r3, #88]	@ 0x58
 8004cac:	e007      	b.n	8004cbe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004cb6:	f023 0303 	bic.w	r3, r3, #3
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3714      	adds	r7, #20
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr
 8004cce:	bf00      	nop
 8004cd0:	aaaaaaab 	.word	0xaaaaaaab
 8004cd4:	0800a6b4 	.word	0x0800a6b4

08004cd8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b085      	sub	sp, #20
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ce8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	699b      	ldr	r3, [r3, #24]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d11f      	bne.n	8004d32 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	2b03      	cmp	r3, #3
 8004cf6:	d856      	bhi.n	8004da6 <DMA_CheckFifoParam+0xce>
 8004cf8:	a201      	add	r2, pc, #4	@ (adr r2, 8004d00 <DMA_CheckFifoParam+0x28>)
 8004cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cfe:	bf00      	nop
 8004d00:	08004d11 	.word	0x08004d11
 8004d04:	08004d23 	.word	0x08004d23
 8004d08:	08004d11 	.word	0x08004d11
 8004d0c:	08004da7 	.word	0x08004da7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d14:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d046      	beq.n	8004daa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d20:	e043      	b.n	8004daa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d26:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004d2a:	d140      	bne.n	8004dae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d30:	e03d      	b.n	8004dae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	699b      	ldr	r3, [r3, #24]
 8004d36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d3a:	d121      	bne.n	8004d80 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	2b03      	cmp	r3, #3
 8004d40:	d837      	bhi.n	8004db2 <DMA_CheckFifoParam+0xda>
 8004d42:	a201      	add	r2, pc, #4	@ (adr r2, 8004d48 <DMA_CheckFifoParam+0x70>)
 8004d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d48:	08004d59 	.word	0x08004d59
 8004d4c:	08004d5f 	.word	0x08004d5f
 8004d50:	08004d59 	.word	0x08004d59
 8004d54:	08004d71 	.word	0x08004d71
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	73fb      	strb	r3, [r7, #15]
      break;
 8004d5c:	e030      	b.n	8004dc0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d62:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d025      	beq.n	8004db6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d6e:	e022      	b.n	8004db6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d74:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004d78:	d11f      	bne.n	8004dba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004d7e:	e01c      	b.n	8004dba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	2b02      	cmp	r3, #2
 8004d84:	d903      	bls.n	8004d8e <DMA_CheckFifoParam+0xb6>
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	2b03      	cmp	r3, #3
 8004d8a:	d003      	beq.n	8004d94 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004d8c:	e018      	b.n	8004dc0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	73fb      	strb	r3, [r7, #15]
      break;
 8004d92:	e015      	b.n	8004dc0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d98:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d00e      	beq.n	8004dbe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	73fb      	strb	r3, [r7, #15]
      break;
 8004da4:	e00b      	b.n	8004dbe <DMA_CheckFifoParam+0xe6>
      break;
 8004da6:	bf00      	nop
 8004da8:	e00a      	b.n	8004dc0 <DMA_CheckFifoParam+0xe8>
      break;
 8004daa:	bf00      	nop
 8004dac:	e008      	b.n	8004dc0 <DMA_CheckFifoParam+0xe8>
      break;
 8004dae:	bf00      	nop
 8004db0:	e006      	b.n	8004dc0 <DMA_CheckFifoParam+0xe8>
      break;
 8004db2:	bf00      	nop
 8004db4:	e004      	b.n	8004dc0 <DMA_CheckFifoParam+0xe8>
      break;
 8004db6:	bf00      	nop
 8004db8:	e002      	b.n	8004dc0 <DMA_CheckFifoParam+0xe8>
      break;   
 8004dba:	bf00      	nop
 8004dbc:	e000      	b.n	8004dc0 <DMA_CheckFifoParam+0xe8>
      break;
 8004dbe:	bf00      	nop
    }
  } 
  
  return status; 
 8004dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3714      	adds	r7, #20
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr
 8004dce:	bf00      	nop

08004dd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b089      	sub	sp, #36	@ 0x24
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004dde:	2300      	movs	r3, #0
 8004de0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004de2:	2300      	movs	r3, #0
 8004de4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004de6:	2300      	movs	r3, #0
 8004de8:	61fb      	str	r3, [r7, #28]
 8004dea:	e159      	b.n	80050a0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004dec:	2201      	movs	r2, #1
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	fa02 f303 	lsl.w	r3, r2, r3
 8004df4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	697a      	ldr	r2, [r7, #20]
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004e00:	693a      	ldr	r2, [r7, #16]
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	f040 8148 	bne.w	800509a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	f003 0303 	and.w	r3, r3, #3
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d005      	beq.n	8004e22 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d130      	bne.n	8004e84 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	005b      	lsls	r3, r3, #1
 8004e2c:	2203      	movs	r2, #3
 8004e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e32:	43db      	mvns	r3, r3
 8004e34:	69ba      	ldr	r2, [r7, #24]
 8004e36:	4013      	ands	r3, r2
 8004e38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	68da      	ldr	r2, [r3, #12]
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	005b      	lsls	r3, r3, #1
 8004e42:	fa02 f303 	lsl.w	r3, r2, r3
 8004e46:	69ba      	ldr	r2, [r7, #24]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	69ba      	ldr	r2, [r7, #24]
 8004e50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004e58:	2201      	movs	r2, #1
 8004e5a:	69fb      	ldr	r3, [r7, #28]
 8004e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e60:	43db      	mvns	r3, r3
 8004e62:	69ba      	ldr	r2, [r7, #24]
 8004e64:	4013      	ands	r3, r2
 8004e66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	091b      	lsrs	r3, r3, #4
 8004e6e:	f003 0201 	and.w	r2, r3, #1
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	fa02 f303 	lsl.w	r3, r2, r3
 8004e78:	69ba      	ldr	r2, [r7, #24]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	69ba      	ldr	r2, [r7, #24]
 8004e82:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	f003 0303 	and.w	r3, r3, #3
 8004e8c:	2b03      	cmp	r3, #3
 8004e8e:	d017      	beq.n	8004ec0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	005b      	lsls	r3, r3, #1
 8004e9a:	2203      	movs	r2, #3
 8004e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea0:	43db      	mvns	r3, r3
 8004ea2:	69ba      	ldr	r2, [r7, #24]
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	689a      	ldr	r2, [r3, #8]
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	005b      	lsls	r3, r3, #1
 8004eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb4:	69ba      	ldr	r2, [r7, #24]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	69ba      	ldr	r2, [r7, #24]
 8004ebe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	f003 0303 	and.w	r3, r3, #3
 8004ec8:	2b02      	cmp	r3, #2
 8004eca:	d123      	bne.n	8004f14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	08da      	lsrs	r2, r3, #3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	3208      	adds	r2, #8
 8004ed4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	f003 0307 	and.w	r3, r3, #7
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	220f      	movs	r2, #15
 8004ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee8:	43db      	mvns	r3, r3
 8004eea:	69ba      	ldr	r2, [r7, #24]
 8004eec:	4013      	ands	r3, r2
 8004eee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	691a      	ldr	r2, [r3, #16]
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	f003 0307 	and.w	r3, r3, #7
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	fa02 f303 	lsl.w	r3, r2, r3
 8004f00:	69ba      	ldr	r2, [r7, #24]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	08da      	lsrs	r2, r3, #3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	3208      	adds	r2, #8
 8004f0e:	69b9      	ldr	r1, [r7, #24]
 8004f10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	005b      	lsls	r3, r3, #1
 8004f1e:	2203      	movs	r2, #3
 8004f20:	fa02 f303 	lsl.w	r3, r2, r3
 8004f24:	43db      	mvns	r3, r3
 8004f26:	69ba      	ldr	r2, [r7, #24]
 8004f28:	4013      	ands	r3, r2
 8004f2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	f003 0203 	and.w	r2, r3, #3
 8004f34:	69fb      	ldr	r3, [r7, #28]
 8004f36:	005b      	lsls	r3, r3, #1
 8004f38:	fa02 f303 	lsl.w	r3, r2, r3
 8004f3c:	69ba      	ldr	r2, [r7, #24]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	69ba      	ldr	r2, [r7, #24]
 8004f46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	f000 80a2 	beq.w	800509a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f56:	2300      	movs	r3, #0
 8004f58:	60fb      	str	r3, [r7, #12]
 8004f5a:	4b57      	ldr	r3, [pc, #348]	@ (80050b8 <HAL_GPIO_Init+0x2e8>)
 8004f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f5e:	4a56      	ldr	r2, [pc, #344]	@ (80050b8 <HAL_GPIO_Init+0x2e8>)
 8004f60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004f64:	6453      	str	r3, [r2, #68]	@ 0x44
 8004f66:	4b54      	ldr	r3, [pc, #336]	@ (80050b8 <HAL_GPIO_Init+0x2e8>)
 8004f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f6e:	60fb      	str	r3, [r7, #12]
 8004f70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f72:	4a52      	ldr	r2, [pc, #328]	@ (80050bc <HAL_GPIO_Init+0x2ec>)
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	089b      	lsrs	r3, r3, #2
 8004f78:	3302      	adds	r3, #2
 8004f7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	f003 0303 	and.w	r3, r3, #3
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	220f      	movs	r2, #15
 8004f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f8e:	43db      	mvns	r3, r3
 8004f90:	69ba      	ldr	r2, [r7, #24]
 8004f92:	4013      	ands	r3, r2
 8004f94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a49      	ldr	r2, [pc, #292]	@ (80050c0 <HAL_GPIO_Init+0x2f0>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d019      	beq.n	8004fd2 <HAL_GPIO_Init+0x202>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a48      	ldr	r2, [pc, #288]	@ (80050c4 <HAL_GPIO_Init+0x2f4>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d013      	beq.n	8004fce <HAL_GPIO_Init+0x1fe>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a47      	ldr	r2, [pc, #284]	@ (80050c8 <HAL_GPIO_Init+0x2f8>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d00d      	beq.n	8004fca <HAL_GPIO_Init+0x1fa>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a46      	ldr	r2, [pc, #280]	@ (80050cc <HAL_GPIO_Init+0x2fc>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d007      	beq.n	8004fc6 <HAL_GPIO_Init+0x1f6>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a45      	ldr	r2, [pc, #276]	@ (80050d0 <HAL_GPIO_Init+0x300>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d101      	bne.n	8004fc2 <HAL_GPIO_Init+0x1f2>
 8004fbe:	2304      	movs	r3, #4
 8004fc0:	e008      	b.n	8004fd4 <HAL_GPIO_Init+0x204>
 8004fc2:	2307      	movs	r3, #7
 8004fc4:	e006      	b.n	8004fd4 <HAL_GPIO_Init+0x204>
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	e004      	b.n	8004fd4 <HAL_GPIO_Init+0x204>
 8004fca:	2302      	movs	r3, #2
 8004fcc:	e002      	b.n	8004fd4 <HAL_GPIO_Init+0x204>
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e000      	b.n	8004fd4 <HAL_GPIO_Init+0x204>
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	69fa      	ldr	r2, [r7, #28]
 8004fd6:	f002 0203 	and.w	r2, r2, #3
 8004fda:	0092      	lsls	r2, r2, #2
 8004fdc:	4093      	lsls	r3, r2
 8004fde:	69ba      	ldr	r2, [r7, #24]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004fe4:	4935      	ldr	r1, [pc, #212]	@ (80050bc <HAL_GPIO_Init+0x2ec>)
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	089b      	lsrs	r3, r3, #2
 8004fea:	3302      	adds	r3, #2
 8004fec:	69ba      	ldr	r2, [r7, #24]
 8004fee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004ff2:	4b38      	ldr	r3, [pc, #224]	@ (80050d4 <HAL_GPIO_Init+0x304>)
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	43db      	mvns	r3, r3
 8004ffc:	69ba      	ldr	r2, [r7, #24]
 8004ffe:	4013      	ands	r3, r2
 8005000:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800500a:	2b00      	cmp	r3, #0
 800500c:	d003      	beq.n	8005016 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800500e:	69ba      	ldr	r2, [r7, #24]
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	4313      	orrs	r3, r2
 8005014:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005016:	4a2f      	ldr	r2, [pc, #188]	@ (80050d4 <HAL_GPIO_Init+0x304>)
 8005018:	69bb      	ldr	r3, [r7, #24]
 800501a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800501c:	4b2d      	ldr	r3, [pc, #180]	@ (80050d4 <HAL_GPIO_Init+0x304>)
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	43db      	mvns	r3, r3
 8005026:	69ba      	ldr	r2, [r7, #24]
 8005028:	4013      	ands	r3, r2
 800502a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005034:	2b00      	cmp	r3, #0
 8005036:	d003      	beq.n	8005040 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005038:	69ba      	ldr	r2, [r7, #24]
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	4313      	orrs	r3, r2
 800503e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005040:	4a24      	ldr	r2, [pc, #144]	@ (80050d4 <HAL_GPIO_Init+0x304>)
 8005042:	69bb      	ldr	r3, [r7, #24]
 8005044:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005046:	4b23      	ldr	r3, [pc, #140]	@ (80050d4 <HAL_GPIO_Init+0x304>)
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	43db      	mvns	r3, r3
 8005050:	69ba      	ldr	r2, [r7, #24]
 8005052:	4013      	ands	r3, r2
 8005054:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800505e:	2b00      	cmp	r3, #0
 8005060:	d003      	beq.n	800506a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005062:	69ba      	ldr	r2, [r7, #24]
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	4313      	orrs	r3, r2
 8005068:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800506a:	4a1a      	ldr	r2, [pc, #104]	@ (80050d4 <HAL_GPIO_Init+0x304>)
 800506c:	69bb      	ldr	r3, [r7, #24]
 800506e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005070:	4b18      	ldr	r3, [pc, #96]	@ (80050d4 <HAL_GPIO_Init+0x304>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	43db      	mvns	r3, r3
 800507a:	69ba      	ldr	r2, [r7, #24]
 800507c:	4013      	ands	r3, r2
 800507e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005088:	2b00      	cmp	r3, #0
 800508a:	d003      	beq.n	8005094 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800508c:	69ba      	ldr	r2, [r7, #24]
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	4313      	orrs	r3, r2
 8005092:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005094:	4a0f      	ldr	r2, [pc, #60]	@ (80050d4 <HAL_GPIO_Init+0x304>)
 8005096:	69bb      	ldr	r3, [r7, #24]
 8005098:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800509a:	69fb      	ldr	r3, [r7, #28]
 800509c:	3301      	adds	r3, #1
 800509e:	61fb      	str	r3, [r7, #28]
 80050a0:	69fb      	ldr	r3, [r7, #28]
 80050a2:	2b0f      	cmp	r3, #15
 80050a4:	f67f aea2 	bls.w	8004dec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80050a8:	bf00      	nop
 80050aa:	bf00      	nop
 80050ac:	3724      	adds	r7, #36	@ 0x24
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr
 80050b6:	bf00      	nop
 80050b8:	40023800 	.word	0x40023800
 80050bc:	40013800 	.word	0x40013800
 80050c0:	40020000 	.word	0x40020000
 80050c4:	40020400 	.word	0x40020400
 80050c8:	40020800 	.word	0x40020800
 80050cc:	40020c00 	.word	0x40020c00
 80050d0:	40021000 	.word	0x40021000
 80050d4:	40013c00 	.word	0x40013c00

080050d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80050d8:	b480      	push	{r7}
 80050da:	b083      	sub	sp, #12
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	460b      	mov	r3, r1
 80050e2:	807b      	strh	r3, [r7, #2]
 80050e4:	4613      	mov	r3, r2
 80050e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80050e8:	787b      	ldrb	r3, [r7, #1]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d003      	beq.n	80050f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80050ee:	887a      	ldrh	r2, [r7, #2]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80050f4:	e003      	b.n	80050fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80050f6:	887b      	ldrh	r3, [r7, #2]
 80050f8:	041a      	lsls	r2, r3, #16
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	619a      	str	r2, [r3, #24]
}
 80050fe:	bf00      	nop
 8005100:	370c      	adds	r7, #12
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr
	...

0800510c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b084      	sub	sp, #16
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d101      	bne.n	800511e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e12b      	b.n	8005376 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005124:	b2db      	uxtb	r3, r3
 8005126:	2b00      	cmp	r3, #0
 8005128:	d106      	bne.n	8005138 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f7fc f8b8 	bl	80012a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2224      	movs	r2, #36	@ 0x24
 800513c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f022 0201 	bic.w	r2, r2, #1
 800514e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800515e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800516e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005170:	f001 f89a 	bl	80062a8 <HAL_RCC_GetPCLK1Freq>
 8005174:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	4a81      	ldr	r2, [pc, #516]	@ (8005380 <HAL_I2C_Init+0x274>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d807      	bhi.n	8005190 <HAL_I2C_Init+0x84>
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	4a80      	ldr	r2, [pc, #512]	@ (8005384 <HAL_I2C_Init+0x278>)
 8005184:	4293      	cmp	r3, r2
 8005186:	bf94      	ite	ls
 8005188:	2301      	movls	r3, #1
 800518a:	2300      	movhi	r3, #0
 800518c:	b2db      	uxtb	r3, r3
 800518e:	e006      	b.n	800519e <HAL_I2C_Init+0x92>
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	4a7d      	ldr	r2, [pc, #500]	@ (8005388 <HAL_I2C_Init+0x27c>)
 8005194:	4293      	cmp	r3, r2
 8005196:	bf94      	ite	ls
 8005198:	2301      	movls	r3, #1
 800519a:	2300      	movhi	r3, #0
 800519c:	b2db      	uxtb	r3, r3
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d001      	beq.n	80051a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e0e7      	b.n	8005376 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	4a78      	ldr	r2, [pc, #480]	@ (800538c <HAL_I2C_Init+0x280>)
 80051aa:	fba2 2303 	umull	r2, r3, r2, r3
 80051ae:	0c9b      	lsrs	r3, r3, #18
 80051b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	68ba      	ldr	r2, [r7, #8]
 80051c2:	430a      	orrs	r2, r1
 80051c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	6a1b      	ldr	r3, [r3, #32]
 80051cc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	4a6a      	ldr	r2, [pc, #424]	@ (8005380 <HAL_I2C_Init+0x274>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d802      	bhi.n	80051e0 <HAL_I2C_Init+0xd4>
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	3301      	adds	r3, #1
 80051de:	e009      	b.n	80051f4 <HAL_I2C_Init+0xe8>
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80051e6:	fb02 f303 	mul.w	r3, r2, r3
 80051ea:	4a69      	ldr	r2, [pc, #420]	@ (8005390 <HAL_I2C_Init+0x284>)
 80051ec:	fba2 2303 	umull	r2, r3, r2, r3
 80051f0:	099b      	lsrs	r3, r3, #6
 80051f2:	3301      	adds	r3, #1
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	6812      	ldr	r2, [r2, #0]
 80051f8:	430b      	orrs	r3, r1
 80051fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	69db      	ldr	r3, [r3, #28]
 8005202:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005206:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	495c      	ldr	r1, [pc, #368]	@ (8005380 <HAL_I2C_Init+0x274>)
 8005210:	428b      	cmp	r3, r1
 8005212:	d819      	bhi.n	8005248 <HAL_I2C_Init+0x13c>
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	1e59      	subs	r1, r3, #1
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	005b      	lsls	r3, r3, #1
 800521e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005222:	1c59      	adds	r1, r3, #1
 8005224:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005228:	400b      	ands	r3, r1
 800522a:	2b00      	cmp	r3, #0
 800522c:	d00a      	beq.n	8005244 <HAL_I2C_Init+0x138>
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	1e59      	subs	r1, r3, #1
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	005b      	lsls	r3, r3, #1
 8005238:	fbb1 f3f3 	udiv	r3, r1, r3
 800523c:	3301      	adds	r3, #1
 800523e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005242:	e051      	b.n	80052e8 <HAL_I2C_Init+0x1dc>
 8005244:	2304      	movs	r3, #4
 8005246:	e04f      	b.n	80052e8 <HAL_I2C_Init+0x1dc>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d111      	bne.n	8005274 <HAL_I2C_Init+0x168>
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	1e58      	subs	r0, r3, #1
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6859      	ldr	r1, [r3, #4]
 8005258:	460b      	mov	r3, r1
 800525a:	005b      	lsls	r3, r3, #1
 800525c:	440b      	add	r3, r1
 800525e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005262:	3301      	adds	r3, #1
 8005264:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005268:	2b00      	cmp	r3, #0
 800526a:	bf0c      	ite	eq
 800526c:	2301      	moveq	r3, #1
 800526e:	2300      	movne	r3, #0
 8005270:	b2db      	uxtb	r3, r3
 8005272:	e012      	b.n	800529a <HAL_I2C_Init+0x18e>
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	1e58      	subs	r0, r3, #1
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6859      	ldr	r1, [r3, #4]
 800527c:	460b      	mov	r3, r1
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	440b      	add	r3, r1
 8005282:	0099      	lsls	r1, r3, #2
 8005284:	440b      	add	r3, r1
 8005286:	fbb0 f3f3 	udiv	r3, r0, r3
 800528a:	3301      	adds	r3, #1
 800528c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005290:	2b00      	cmp	r3, #0
 8005292:	bf0c      	ite	eq
 8005294:	2301      	moveq	r3, #1
 8005296:	2300      	movne	r3, #0
 8005298:	b2db      	uxtb	r3, r3
 800529a:	2b00      	cmp	r3, #0
 800529c:	d001      	beq.n	80052a2 <HAL_I2C_Init+0x196>
 800529e:	2301      	movs	r3, #1
 80052a0:	e022      	b.n	80052e8 <HAL_I2C_Init+0x1dc>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d10e      	bne.n	80052c8 <HAL_I2C_Init+0x1bc>
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	1e58      	subs	r0, r3, #1
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6859      	ldr	r1, [r3, #4]
 80052b2:	460b      	mov	r3, r1
 80052b4:	005b      	lsls	r3, r3, #1
 80052b6:	440b      	add	r3, r1
 80052b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80052bc:	3301      	adds	r3, #1
 80052be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80052c6:	e00f      	b.n	80052e8 <HAL_I2C_Init+0x1dc>
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	1e58      	subs	r0, r3, #1
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6859      	ldr	r1, [r3, #4]
 80052d0:	460b      	mov	r3, r1
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	440b      	add	r3, r1
 80052d6:	0099      	lsls	r1, r3, #2
 80052d8:	440b      	add	r3, r1
 80052da:	fbb0 f3f3 	udiv	r3, r0, r3
 80052de:	3301      	adds	r3, #1
 80052e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052e4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80052e8:	6879      	ldr	r1, [r7, #4]
 80052ea:	6809      	ldr	r1, [r1, #0]
 80052ec:	4313      	orrs	r3, r2
 80052ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	69da      	ldr	r2, [r3, #28]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6a1b      	ldr	r3, [r3, #32]
 8005302:	431a      	orrs	r2, r3
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	430a      	orrs	r2, r1
 800530a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005316:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	6911      	ldr	r1, [r2, #16]
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	68d2      	ldr	r2, [r2, #12]
 8005322:	4311      	orrs	r1, r2
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	6812      	ldr	r2, [r2, #0]
 8005328:	430b      	orrs	r3, r1
 800532a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	695a      	ldr	r2, [r3, #20]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	699b      	ldr	r3, [r3, #24]
 800533e:	431a      	orrs	r2, r3
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	430a      	orrs	r2, r1
 8005346:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f042 0201 	orr.w	r2, r2, #1
 8005356:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2220      	movs	r2, #32
 8005362:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005374:	2300      	movs	r3, #0
}
 8005376:	4618      	mov	r0, r3
 8005378:	3710      	adds	r7, #16
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
 800537e:	bf00      	nop
 8005380:	000186a0 	.word	0x000186a0
 8005384:	001e847f 	.word	0x001e847f
 8005388:	003d08ff 	.word	0x003d08ff
 800538c:	431bde83 	.word	0x431bde83
 8005390:	10624dd3 	.word	0x10624dd3

08005394 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b088      	sub	sp, #32
 8005398:	af02      	add	r7, sp, #8
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	607a      	str	r2, [r7, #4]
 800539e:	461a      	mov	r2, r3
 80053a0:	460b      	mov	r3, r1
 80053a2:	817b      	strh	r3, [r7, #10]
 80053a4:	4613      	mov	r3, r2
 80053a6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80053a8:	f7fe fa80 	bl	80038ac <HAL_GetTick>
 80053ac:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	2b20      	cmp	r3, #32
 80053b8:	f040 80e0 	bne.w	800557c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	9300      	str	r3, [sp, #0]
 80053c0:	2319      	movs	r3, #25
 80053c2:	2201      	movs	r2, #1
 80053c4:	4970      	ldr	r1, [pc, #448]	@ (8005588 <HAL_I2C_Master_Transmit+0x1f4>)
 80053c6:	68f8      	ldr	r0, [r7, #12]
 80053c8:	f000 f964 	bl	8005694 <I2C_WaitOnFlagUntilTimeout>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d001      	beq.n	80053d6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80053d2:	2302      	movs	r3, #2
 80053d4:	e0d3      	b.n	800557e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d101      	bne.n	80053e4 <HAL_I2C_Master_Transmit+0x50>
 80053e0:	2302      	movs	r3, #2
 80053e2:	e0cc      	b.n	800557e <HAL_I2C_Master_Transmit+0x1ea>
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 0301 	and.w	r3, r3, #1
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d007      	beq.n	800540a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f042 0201 	orr.w	r2, r2, #1
 8005408:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005418:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2221      	movs	r2, #33	@ 0x21
 800541e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2210      	movs	r2, #16
 8005426:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2200      	movs	r2, #0
 800542e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	893a      	ldrh	r2, [r7, #8]
 800543a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005440:	b29a      	uxth	r2, r3
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	4a50      	ldr	r2, [pc, #320]	@ (800558c <HAL_I2C_Master_Transmit+0x1f8>)
 800544a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800544c:	8979      	ldrh	r1, [r7, #10]
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	6a3a      	ldr	r2, [r7, #32]
 8005452:	68f8      	ldr	r0, [r7, #12]
 8005454:	f000 f89c 	bl	8005590 <I2C_MasterRequestWrite>
 8005458:	4603      	mov	r3, r0
 800545a:	2b00      	cmp	r3, #0
 800545c:	d001      	beq.n	8005462 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e08d      	b.n	800557e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005462:	2300      	movs	r3, #0
 8005464:	613b      	str	r3, [r7, #16]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	695b      	ldr	r3, [r3, #20]
 800546c:	613b      	str	r3, [r7, #16]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	699b      	ldr	r3, [r3, #24]
 8005474:	613b      	str	r3, [r7, #16]
 8005476:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005478:	e066      	b.n	8005548 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800547a:	697a      	ldr	r2, [r7, #20]
 800547c:	6a39      	ldr	r1, [r7, #32]
 800547e:	68f8      	ldr	r0, [r7, #12]
 8005480:	f000 fa22 	bl	80058c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005484:	4603      	mov	r3, r0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d00d      	beq.n	80054a6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800548e:	2b04      	cmp	r3, #4
 8005490:	d107      	bne.n	80054a2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80054a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e06b      	b.n	800557e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054aa:	781a      	ldrb	r2, [r3, #0]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054b6:	1c5a      	adds	r2, r3, #1
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	3b01      	subs	r3, #1
 80054c4:	b29a      	uxth	r2, r3
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054ce:	3b01      	subs	r3, #1
 80054d0:	b29a      	uxth	r2, r3
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	695b      	ldr	r3, [r3, #20]
 80054dc:	f003 0304 	and.w	r3, r3, #4
 80054e0:	2b04      	cmp	r3, #4
 80054e2:	d11b      	bne.n	800551c <HAL_I2C_Master_Transmit+0x188>
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d017      	beq.n	800551c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054f0:	781a      	ldrb	r2, [r3, #0]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054fc:	1c5a      	adds	r2, r3, #1
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005506:	b29b      	uxth	r3, r3
 8005508:	3b01      	subs	r3, #1
 800550a:	b29a      	uxth	r2, r3
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005514:	3b01      	subs	r3, #1
 8005516:	b29a      	uxth	r2, r3
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800551c:	697a      	ldr	r2, [r7, #20]
 800551e:	6a39      	ldr	r1, [r7, #32]
 8005520:	68f8      	ldr	r0, [r7, #12]
 8005522:	f000 fa19 	bl	8005958 <I2C_WaitOnBTFFlagUntilTimeout>
 8005526:	4603      	mov	r3, r0
 8005528:	2b00      	cmp	r3, #0
 800552a:	d00d      	beq.n	8005548 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005530:	2b04      	cmp	r3, #4
 8005532:	d107      	bne.n	8005544 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005542:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	e01a      	b.n	800557e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800554c:	2b00      	cmp	r3, #0
 800554e:	d194      	bne.n	800547a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800555e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2220      	movs	r2, #32
 8005564:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2200      	movs	r2, #0
 800556c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2200      	movs	r2, #0
 8005574:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005578:	2300      	movs	r3, #0
 800557a:	e000      	b.n	800557e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800557c:	2302      	movs	r3, #2
  }
}
 800557e:	4618      	mov	r0, r3
 8005580:	3718      	adds	r7, #24
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}
 8005586:	bf00      	nop
 8005588:	00100002 	.word	0x00100002
 800558c:	ffff0000 	.word	0xffff0000

08005590 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b088      	sub	sp, #32
 8005594:	af02      	add	r7, sp, #8
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	607a      	str	r2, [r7, #4]
 800559a:	603b      	str	r3, [r7, #0]
 800559c:	460b      	mov	r3, r1
 800559e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055a4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	2b08      	cmp	r3, #8
 80055aa:	d006      	beq.n	80055ba <I2C_MasterRequestWrite+0x2a>
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d003      	beq.n	80055ba <I2C_MasterRequestWrite+0x2a>
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80055b8:	d108      	bne.n	80055cc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80055c8:	601a      	str	r2, [r3, #0]
 80055ca:	e00b      	b.n	80055e4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055d0:	2b12      	cmp	r3, #18
 80055d2:	d107      	bne.n	80055e4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80055e2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	9300      	str	r3, [sp, #0]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80055f0:	68f8      	ldr	r0, [r7, #12]
 80055f2:	f000 f84f 	bl	8005694 <I2C_WaitOnFlagUntilTimeout>
 80055f6:	4603      	mov	r3, r0
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d00d      	beq.n	8005618 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005606:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800560a:	d103      	bne.n	8005614 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005612:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005614:	2303      	movs	r3, #3
 8005616:	e035      	b.n	8005684 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	691b      	ldr	r3, [r3, #16]
 800561c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005620:	d108      	bne.n	8005634 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005622:	897b      	ldrh	r3, [r7, #10]
 8005624:	b2db      	uxtb	r3, r3
 8005626:	461a      	mov	r2, r3
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005630:	611a      	str	r2, [r3, #16]
 8005632:	e01b      	b.n	800566c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005634:	897b      	ldrh	r3, [r7, #10]
 8005636:	11db      	asrs	r3, r3, #7
 8005638:	b2db      	uxtb	r3, r3
 800563a:	f003 0306 	and.w	r3, r3, #6
 800563e:	b2db      	uxtb	r3, r3
 8005640:	f063 030f 	orn	r3, r3, #15
 8005644:	b2da      	uxtb	r2, r3
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	490e      	ldr	r1, [pc, #56]	@ (800568c <I2C_MasterRequestWrite+0xfc>)
 8005652:	68f8      	ldr	r0, [r7, #12]
 8005654:	f000 f898 	bl	8005788 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005658:	4603      	mov	r3, r0
 800565a:	2b00      	cmp	r3, #0
 800565c:	d001      	beq.n	8005662 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	e010      	b.n	8005684 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005662:	897b      	ldrh	r3, [r7, #10]
 8005664:	b2da      	uxtb	r2, r3
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	4907      	ldr	r1, [pc, #28]	@ (8005690 <I2C_MasterRequestWrite+0x100>)
 8005672:	68f8      	ldr	r0, [r7, #12]
 8005674:	f000 f888 	bl	8005788 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005678:	4603      	mov	r3, r0
 800567a:	2b00      	cmp	r3, #0
 800567c:	d001      	beq.n	8005682 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e000      	b.n	8005684 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005682:	2300      	movs	r3, #0
}
 8005684:	4618      	mov	r0, r3
 8005686:	3718      	adds	r7, #24
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}
 800568c:	00010008 	.word	0x00010008
 8005690:	00010002 	.word	0x00010002

08005694 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
 800569a:	60f8      	str	r0, [r7, #12]
 800569c:	60b9      	str	r1, [r7, #8]
 800569e:	603b      	str	r3, [r7, #0]
 80056a0:	4613      	mov	r3, r2
 80056a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80056a4:	e048      	b.n	8005738 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ac:	d044      	beq.n	8005738 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056ae:	f7fe f8fd 	bl	80038ac <HAL_GetTick>
 80056b2:	4602      	mov	r2, r0
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	1ad3      	subs	r3, r2, r3
 80056b8:	683a      	ldr	r2, [r7, #0]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d302      	bcc.n	80056c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d139      	bne.n	8005738 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	0c1b      	lsrs	r3, r3, #16
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d10d      	bne.n	80056ea <I2C_WaitOnFlagUntilTimeout+0x56>
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	695b      	ldr	r3, [r3, #20]
 80056d4:	43da      	mvns	r2, r3
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	4013      	ands	r3, r2
 80056da:	b29b      	uxth	r3, r3
 80056dc:	2b00      	cmp	r3, #0
 80056de:	bf0c      	ite	eq
 80056e0:	2301      	moveq	r3, #1
 80056e2:	2300      	movne	r3, #0
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	461a      	mov	r2, r3
 80056e8:	e00c      	b.n	8005704 <I2C_WaitOnFlagUntilTimeout+0x70>
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	699b      	ldr	r3, [r3, #24]
 80056f0:	43da      	mvns	r2, r3
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	4013      	ands	r3, r2
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	bf0c      	ite	eq
 80056fc:	2301      	moveq	r3, #1
 80056fe:	2300      	movne	r3, #0
 8005700:	b2db      	uxtb	r3, r3
 8005702:	461a      	mov	r2, r3
 8005704:	79fb      	ldrb	r3, [r7, #7]
 8005706:	429a      	cmp	r2, r3
 8005708:	d116      	bne.n	8005738 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2200      	movs	r2, #0
 800570e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2220      	movs	r2, #32
 8005714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2200      	movs	r2, #0
 800571c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005724:	f043 0220 	orr.w	r2, r3, #32
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2200      	movs	r2, #0
 8005730:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	e023      	b.n	8005780 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	0c1b      	lsrs	r3, r3, #16
 800573c:	b2db      	uxtb	r3, r3
 800573e:	2b01      	cmp	r3, #1
 8005740:	d10d      	bne.n	800575e <I2C_WaitOnFlagUntilTimeout+0xca>
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	695b      	ldr	r3, [r3, #20]
 8005748:	43da      	mvns	r2, r3
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	4013      	ands	r3, r2
 800574e:	b29b      	uxth	r3, r3
 8005750:	2b00      	cmp	r3, #0
 8005752:	bf0c      	ite	eq
 8005754:	2301      	moveq	r3, #1
 8005756:	2300      	movne	r3, #0
 8005758:	b2db      	uxtb	r3, r3
 800575a:	461a      	mov	r2, r3
 800575c:	e00c      	b.n	8005778 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	699b      	ldr	r3, [r3, #24]
 8005764:	43da      	mvns	r2, r3
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	4013      	ands	r3, r2
 800576a:	b29b      	uxth	r3, r3
 800576c:	2b00      	cmp	r3, #0
 800576e:	bf0c      	ite	eq
 8005770:	2301      	moveq	r3, #1
 8005772:	2300      	movne	r3, #0
 8005774:	b2db      	uxtb	r3, r3
 8005776:	461a      	mov	r2, r3
 8005778:	79fb      	ldrb	r3, [r7, #7]
 800577a:	429a      	cmp	r2, r3
 800577c:	d093      	beq.n	80056a6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800577e:	2300      	movs	r3, #0
}
 8005780:	4618      	mov	r0, r3
 8005782:	3710      	adds	r7, #16
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}

08005788 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b084      	sub	sp, #16
 800578c:	af00      	add	r7, sp, #0
 800578e:	60f8      	str	r0, [r7, #12]
 8005790:	60b9      	str	r1, [r7, #8]
 8005792:	607a      	str	r2, [r7, #4]
 8005794:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005796:	e071      	b.n	800587c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	695b      	ldr	r3, [r3, #20]
 800579e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057a6:	d123      	bne.n	80057f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80057b6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80057c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2200      	movs	r2, #0
 80057c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2220      	movs	r2, #32
 80057cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2200      	movs	r2, #0
 80057d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057dc:	f043 0204 	orr.w	r2, r3, #4
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2200      	movs	r2, #0
 80057e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	e067      	b.n	80058c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057f6:	d041      	beq.n	800587c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057f8:	f7fe f858 	bl	80038ac <HAL_GetTick>
 80057fc:	4602      	mov	r2, r0
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	1ad3      	subs	r3, r2, r3
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	429a      	cmp	r2, r3
 8005806:	d302      	bcc.n	800580e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d136      	bne.n	800587c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	0c1b      	lsrs	r3, r3, #16
 8005812:	b2db      	uxtb	r3, r3
 8005814:	2b01      	cmp	r3, #1
 8005816:	d10c      	bne.n	8005832 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	695b      	ldr	r3, [r3, #20]
 800581e:	43da      	mvns	r2, r3
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	4013      	ands	r3, r2
 8005824:	b29b      	uxth	r3, r3
 8005826:	2b00      	cmp	r3, #0
 8005828:	bf14      	ite	ne
 800582a:	2301      	movne	r3, #1
 800582c:	2300      	moveq	r3, #0
 800582e:	b2db      	uxtb	r3, r3
 8005830:	e00b      	b.n	800584a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	699b      	ldr	r3, [r3, #24]
 8005838:	43da      	mvns	r2, r3
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	4013      	ands	r3, r2
 800583e:	b29b      	uxth	r3, r3
 8005840:	2b00      	cmp	r3, #0
 8005842:	bf14      	ite	ne
 8005844:	2301      	movne	r3, #1
 8005846:	2300      	moveq	r3, #0
 8005848:	b2db      	uxtb	r3, r3
 800584a:	2b00      	cmp	r3, #0
 800584c:	d016      	beq.n	800587c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2200      	movs	r2, #0
 8005852:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2220      	movs	r2, #32
 8005858:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2200      	movs	r2, #0
 8005860:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005868:	f043 0220 	orr.w	r2, r3, #32
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2200      	movs	r2, #0
 8005874:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	e021      	b.n	80058c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	0c1b      	lsrs	r3, r3, #16
 8005880:	b2db      	uxtb	r3, r3
 8005882:	2b01      	cmp	r3, #1
 8005884:	d10c      	bne.n	80058a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	695b      	ldr	r3, [r3, #20]
 800588c:	43da      	mvns	r2, r3
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	4013      	ands	r3, r2
 8005892:	b29b      	uxth	r3, r3
 8005894:	2b00      	cmp	r3, #0
 8005896:	bf14      	ite	ne
 8005898:	2301      	movne	r3, #1
 800589a:	2300      	moveq	r3, #0
 800589c:	b2db      	uxtb	r3, r3
 800589e:	e00b      	b.n	80058b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	699b      	ldr	r3, [r3, #24]
 80058a6:	43da      	mvns	r2, r3
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	4013      	ands	r3, r2
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	bf14      	ite	ne
 80058b2:	2301      	movne	r3, #1
 80058b4:	2300      	moveq	r3, #0
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	f47f af6d 	bne.w	8005798 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80058be:	2300      	movs	r3, #0
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3710      	adds	r7, #16
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}

080058c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b084      	sub	sp, #16
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	60f8      	str	r0, [r7, #12]
 80058d0:	60b9      	str	r1, [r7, #8]
 80058d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058d4:	e034      	b.n	8005940 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80058d6:	68f8      	ldr	r0, [r7, #12]
 80058d8:	f000 f886 	bl	80059e8 <I2C_IsAcknowledgeFailed>
 80058dc:	4603      	mov	r3, r0
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d001      	beq.n	80058e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	e034      	b.n	8005950 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ec:	d028      	beq.n	8005940 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058ee:	f7fd ffdd 	bl	80038ac <HAL_GetTick>
 80058f2:	4602      	mov	r2, r0
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	1ad3      	subs	r3, r2, r3
 80058f8:	68ba      	ldr	r2, [r7, #8]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d302      	bcc.n	8005904 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d11d      	bne.n	8005940 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	695b      	ldr	r3, [r3, #20]
 800590a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800590e:	2b80      	cmp	r3, #128	@ 0x80
 8005910:	d016      	beq.n	8005940 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2200      	movs	r2, #0
 8005916:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2220      	movs	r2, #32
 800591c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2200      	movs	r2, #0
 8005924:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800592c:	f043 0220 	orr.w	r2, r3, #32
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2200      	movs	r2, #0
 8005938:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	e007      	b.n	8005950 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	695b      	ldr	r3, [r3, #20]
 8005946:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800594a:	2b80      	cmp	r3, #128	@ 0x80
 800594c:	d1c3      	bne.n	80058d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800594e:	2300      	movs	r3, #0
}
 8005950:	4618      	mov	r0, r3
 8005952:	3710      	adds	r7, #16
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}

08005958 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b084      	sub	sp, #16
 800595c:	af00      	add	r7, sp, #0
 800595e:	60f8      	str	r0, [r7, #12]
 8005960:	60b9      	str	r1, [r7, #8]
 8005962:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005964:	e034      	b.n	80059d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005966:	68f8      	ldr	r0, [r7, #12]
 8005968:	f000 f83e 	bl	80059e8 <I2C_IsAcknowledgeFailed>
 800596c:	4603      	mov	r3, r0
 800596e:	2b00      	cmp	r3, #0
 8005970:	d001      	beq.n	8005976 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	e034      	b.n	80059e0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800597c:	d028      	beq.n	80059d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800597e:	f7fd ff95 	bl	80038ac <HAL_GetTick>
 8005982:	4602      	mov	r2, r0
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	1ad3      	subs	r3, r2, r3
 8005988:	68ba      	ldr	r2, [r7, #8]
 800598a:	429a      	cmp	r2, r3
 800598c:	d302      	bcc.n	8005994 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d11d      	bne.n	80059d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	695b      	ldr	r3, [r3, #20]
 800599a:	f003 0304 	and.w	r3, r3, #4
 800599e:	2b04      	cmp	r3, #4
 80059a0:	d016      	beq.n	80059d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2200      	movs	r2, #0
 80059a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2220      	movs	r2, #32
 80059ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2200      	movs	r2, #0
 80059b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059bc:	f043 0220 	orr.w	r2, r3, #32
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2200      	movs	r2, #0
 80059c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	e007      	b.n	80059e0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	695b      	ldr	r3, [r3, #20]
 80059d6:	f003 0304 	and.w	r3, r3, #4
 80059da:	2b04      	cmp	r3, #4
 80059dc:	d1c3      	bne.n	8005966 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80059de:	2300      	movs	r3, #0
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3710      	adds	r7, #16
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	695b      	ldr	r3, [r3, #20]
 80059f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059fe:	d11b      	bne.n	8005a38 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005a08:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2220      	movs	r2, #32
 8005a14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a24:	f043 0204 	orr.w	r2, r3, #4
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	e000      	b.n	8005a3a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005a38:	2300      	movs	r3, #0
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	370c      	adds	r7, #12
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr
	...

08005a48 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b086      	sub	sp, #24
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d101      	bne.n	8005a5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	e267      	b.n	8005f2a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f003 0301 	and.w	r3, r3, #1
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d075      	beq.n	8005b52 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005a66:	4b88      	ldr	r3, [pc, #544]	@ (8005c88 <HAL_RCC_OscConfig+0x240>)
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	f003 030c 	and.w	r3, r3, #12
 8005a6e:	2b04      	cmp	r3, #4
 8005a70:	d00c      	beq.n	8005a8c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a72:	4b85      	ldr	r3, [pc, #532]	@ (8005c88 <HAL_RCC_OscConfig+0x240>)
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005a7a:	2b08      	cmp	r3, #8
 8005a7c:	d112      	bne.n	8005aa4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a7e:	4b82      	ldr	r3, [pc, #520]	@ (8005c88 <HAL_RCC_OscConfig+0x240>)
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a86:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a8a:	d10b      	bne.n	8005aa4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a8c:	4b7e      	ldr	r3, [pc, #504]	@ (8005c88 <HAL_RCC_OscConfig+0x240>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d05b      	beq.n	8005b50 <HAL_RCC_OscConfig+0x108>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d157      	bne.n	8005b50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e242      	b.n	8005f2a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005aac:	d106      	bne.n	8005abc <HAL_RCC_OscConfig+0x74>
 8005aae:	4b76      	ldr	r3, [pc, #472]	@ (8005c88 <HAL_RCC_OscConfig+0x240>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a75      	ldr	r2, [pc, #468]	@ (8005c88 <HAL_RCC_OscConfig+0x240>)
 8005ab4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ab8:	6013      	str	r3, [r2, #0]
 8005aba:	e01d      	b.n	8005af8 <HAL_RCC_OscConfig+0xb0>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005ac4:	d10c      	bne.n	8005ae0 <HAL_RCC_OscConfig+0x98>
 8005ac6:	4b70      	ldr	r3, [pc, #448]	@ (8005c88 <HAL_RCC_OscConfig+0x240>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a6f      	ldr	r2, [pc, #444]	@ (8005c88 <HAL_RCC_OscConfig+0x240>)
 8005acc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005ad0:	6013      	str	r3, [r2, #0]
 8005ad2:	4b6d      	ldr	r3, [pc, #436]	@ (8005c88 <HAL_RCC_OscConfig+0x240>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a6c      	ldr	r2, [pc, #432]	@ (8005c88 <HAL_RCC_OscConfig+0x240>)
 8005ad8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005adc:	6013      	str	r3, [r2, #0]
 8005ade:	e00b      	b.n	8005af8 <HAL_RCC_OscConfig+0xb0>
 8005ae0:	4b69      	ldr	r3, [pc, #420]	@ (8005c88 <HAL_RCC_OscConfig+0x240>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a68      	ldr	r2, [pc, #416]	@ (8005c88 <HAL_RCC_OscConfig+0x240>)
 8005ae6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005aea:	6013      	str	r3, [r2, #0]
 8005aec:	4b66      	ldr	r3, [pc, #408]	@ (8005c88 <HAL_RCC_OscConfig+0x240>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a65      	ldr	r2, [pc, #404]	@ (8005c88 <HAL_RCC_OscConfig+0x240>)
 8005af2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005af6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d013      	beq.n	8005b28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b00:	f7fd fed4 	bl	80038ac <HAL_GetTick>
 8005b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b06:	e008      	b.n	8005b1a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b08:	f7fd fed0 	bl	80038ac <HAL_GetTick>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	1ad3      	subs	r3, r2, r3
 8005b12:	2b64      	cmp	r3, #100	@ 0x64
 8005b14:	d901      	bls.n	8005b1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005b16:	2303      	movs	r3, #3
 8005b18:	e207      	b.n	8005f2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b1a:	4b5b      	ldr	r3, [pc, #364]	@ (8005c88 <HAL_RCC_OscConfig+0x240>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d0f0      	beq.n	8005b08 <HAL_RCC_OscConfig+0xc0>
 8005b26:	e014      	b.n	8005b52 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b28:	f7fd fec0 	bl	80038ac <HAL_GetTick>
 8005b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b2e:	e008      	b.n	8005b42 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b30:	f7fd febc 	bl	80038ac <HAL_GetTick>
 8005b34:	4602      	mov	r2, r0
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	1ad3      	subs	r3, r2, r3
 8005b3a:	2b64      	cmp	r3, #100	@ 0x64
 8005b3c:	d901      	bls.n	8005b42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005b3e:	2303      	movs	r3, #3
 8005b40:	e1f3      	b.n	8005f2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b42:	4b51      	ldr	r3, [pc, #324]	@ (8005c88 <HAL_RCC_OscConfig+0x240>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d1f0      	bne.n	8005b30 <HAL_RCC_OscConfig+0xe8>
 8005b4e:	e000      	b.n	8005b52 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f003 0302 	and.w	r3, r3, #2
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d063      	beq.n	8005c26 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005b5e:	4b4a      	ldr	r3, [pc, #296]	@ (8005c88 <HAL_RCC_OscConfig+0x240>)
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	f003 030c 	and.w	r3, r3, #12
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d00b      	beq.n	8005b82 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b6a:	4b47      	ldr	r3, [pc, #284]	@ (8005c88 <HAL_RCC_OscConfig+0x240>)
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005b72:	2b08      	cmp	r3, #8
 8005b74:	d11c      	bne.n	8005bb0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b76:	4b44      	ldr	r3, [pc, #272]	@ (8005c88 <HAL_RCC_OscConfig+0x240>)
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d116      	bne.n	8005bb0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b82:	4b41      	ldr	r3, [pc, #260]	@ (8005c88 <HAL_RCC_OscConfig+0x240>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f003 0302 	and.w	r3, r3, #2
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d005      	beq.n	8005b9a <HAL_RCC_OscConfig+0x152>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	68db      	ldr	r3, [r3, #12]
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d001      	beq.n	8005b9a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	e1c7      	b.n	8005f2a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b9a:	4b3b      	ldr	r3, [pc, #236]	@ (8005c88 <HAL_RCC_OscConfig+0x240>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	691b      	ldr	r3, [r3, #16]
 8005ba6:	00db      	lsls	r3, r3, #3
 8005ba8:	4937      	ldr	r1, [pc, #220]	@ (8005c88 <HAL_RCC_OscConfig+0x240>)
 8005baa:	4313      	orrs	r3, r2
 8005bac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005bae:	e03a      	b.n	8005c26 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d020      	beq.n	8005bfa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005bb8:	4b34      	ldr	r3, [pc, #208]	@ (8005c8c <HAL_RCC_OscConfig+0x244>)
 8005bba:	2201      	movs	r2, #1
 8005bbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bbe:	f7fd fe75 	bl	80038ac <HAL_GetTick>
 8005bc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bc4:	e008      	b.n	8005bd8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005bc6:	f7fd fe71 	bl	80038ac <HAL_GetTick>
 8005bca:	4602      	mov	r2, r0
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	1ad3      	subs	r3, r2, r3
 8005bd0:	2b02      	cmp	r3, #2
 8005bd2:	d901      	bls.n	8005bd8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005bd4:	2303      	movs	r3, #3
 8005bd6:	e1a8      	b.n	8005f2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bd8:	4b2b      	ldr	r3, [pc, #172]	@ (8005c88 <HAL_RCC_OscConfig+0x240>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 0302 	and.w	r3, r3, #2
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d0f0      	beq.n	8005bc6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005be4:	4b28      	ldr	r3, [pc, #160]	@ (8005c88 <HAL_RCC_OscConfig+0x240>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	691b      	ldr	r3, [r3, #16]
 8005bf0:	00db      	lsls	r3, r3, #3
 8005bf2:	4925      	ldr	r1, [pc, #148]	@ (8005c88 <HAL_RCC_OscConfig+0x240>)
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	600b      	str	r3, [r1, #0]
 8005bf8:	e015      	b.n	8005c26 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005bfa:	4b24      	ldr	r3, [pc, #144]	@ (8005c8c <HAL_RCC_OscConfig+0x244>)
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c00:	f7fd fe54 	bl	80038ac <HAL_GetTick>
 8005c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c06:	e008      	b.n	8005c1a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c08:	f7fd fe50 	bl	80038ac <HAL_GetTick>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	1ad3      	subs	r3, r2, r3
 8005c12:	2b02      	cmp	r3, #2
 8005c14:	d901      	bls.n	8005c1a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005c16:	2303      	movs	r3, #3
 8005c18:	e187      	b.n	8005f2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c1a:	4b1b      	ldr	r3, [pc, #108]	@ (8005c88 <HAL_RCC_OscConfig+0x240>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f003 0302 	and.w	r3, r3, #2
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d1f0      	bne.n	8005c08 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f003 0308 	and.w	r3, r3, #8
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d036      	beq.n	8005ca0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	695b      	ldr	r3, [r3, #20]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d016      	beq.n	8005c68 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c3a:	4b15      	ldr	r3, [pc, #84]	@ (8005c90 <HAL_RCC_OscConfig+0x248>)
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c40:	f7fd fe34 	bl	80038ac <HAL_GetTick>
 8005c44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c46:	e008      	b.n	8005c5a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c48:	f7fd fe30 	bl	80038ac <HAL_GetTick>
 8005c4c:	4602      	mov	r2, r0
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	1ad3      	subs	r3, r2, r3
 8005c52:	2b02      	cmp	r3, #2
 8005c54:	d901      	bls.n	8005c5a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005c56:	2303      	movs	r3, #3
 8005c58:	e167      	b.n	8005f2a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c5a:	4b0b      	ldr	r3, [pc, #44]	@ (8005c88 <HAL_RCC_OscConfig+0x240>)
 8005c5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c5e:	f003 0302 	and.w	r3, r3, #2
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d0f0      	beq.n	8005c48 <HAL_RCC_OscConfig+0x200>
 8005c66:	e01b      	b.n	8005ca0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c68:	4b09      	ldr	r3, [pc, #36]	@ (8005c90 <HAL_RCC_OscConfig+0x248>)
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c6e:	f7fd fe1d 	bl	80038ac <HAL_GetTick>
 8005c72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c74:	e00e      	b.n	8005c94 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c76:	f7fd fe19 	bl	80038ac <HAL_GetTick>
 8005c7a:	4602      	mov	r2, r0
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	1ad3      	subs	r3, r2, r3
 8005c80:	2b02      	cmp	r3, #2
 8005c82:	d907      	bls.n	8005c94 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005c84:	2303      	movs	r3, #3
 8005c86:	e150      	b.n	8005f2a <HAL_RCC_OscConfig+0x4e2>
 8005c88:	40023800 	.word	0x40023800
 8005c8c:	42470000 	.word	0x42470000
 8005c90:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c94:	4b88      	ldr	r3, [pc, #544]	@ (8005eb8 <HAL_RCC_OscConfig+0x470>)
 8005c96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c98:	f003 0302 	and.w	r3, r3, #2
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d1ea      	bne.n	8005c76 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f003 0304 	and.w	r3, r3, #4
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	f000 8097 	beq.w	8005ddc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005cb2:	4b81      	ldr	r3, [pc, #516]	@ (8005eb8 <HAL_RCC_OscConfig+0x470>)
 8005cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d10f      	bne.n	8005cde <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	60bb      	str	r3, [r7, #8]
 8005cc2:	4b7d      	ldr	r3, [pc, #500]	@ (8005eb8 <HAL_RCC_OscConfig+0x470>)
 8005cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cc6:	4a7c      	ldr	r2, [pc, #496]	@ (8005eb8 <HAL_RCC_OscConfig+0x470>)
 8005cc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ccc:	6413      	str	r3, [r2, #64]	@ 0x40
 8005cce:	4b7a      	ldr	r3, [pc, #488]	@ (8005eb8 <HAL_RCC_OscConfig+0x470>)
 8005cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005cd6:	60bb      	str	r3, [r7, #8]
 8005cd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cde:	4b77      	ldr	r3, [pc, #476]	@ (8005ebc <HAL_RCC_OscConfig+0x474>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d118      	bne.n	8005d1c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005cea:	4b74      	ldr	r3, [pc, #464]	@ (8005ebc <HAL_RCC_OscConfig+0x474>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a73      	ldr	r2, [pc, #460]	@ (8005ebc <HAL_RCC_OscConfig+0x474>)
 8005cf0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005cf4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005cf6:	f7fd fdd9 	bl	80038ac <HAL_GetTick>
 8005cfa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cfc:	e008      	b.n	8005d10 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cfe:	f7fd fdd5 	bl	80038ac <HAL_GetTick>
 8005d02:	4602      	mov	r2, r0
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	1ad3      	subs	r3, r2, r3
 8005d08:	2b02      	cmp	r3, #2
 8005d0a:	d901      	bls.n	8005d10 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005d0c:	2303      	movs	r3, #3
 8005d0e:	e10c      	b.n	8005f2a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d10:	4b6a      	ldr	r3, [pc, #424]	@ (8005ebc <HAL_RCC_OscConfig+0x474>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d0f0      	beq.n	8005cfe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d106      	bne.n	8005d32 <HAL_RCC_OscConfig+0x2ea>
 8005d24:	4b64      	ldr	r3, [pc, #400]	@ (8005eb8 <HAL_RCC_OscConfig+0x470>)
 8005d26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d28:	4a63      	ldr	r2, [pc, #396]	@ (8005eb8 <HAL_RCC_OscConfig+0x470>)
 8005d2a:	f043 0301 	orr.w	r3, r3, #1
 8005d2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d30:	e01c      	b.n	8005d6c <HAL_RCC_OscConfig+0x324>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	2b05      	cmp	r3, #5
 8005d38:	d10c      	bne.n	8005d54 <HAL_RCC_OscConfig+0x30c>
 8005d3a:	4b5f      	ldr	r3, [pc, #380]	@ (8005eb8 <HAL_RCC_OscConfig+0x470>)
 8005d3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d3e:	4a5e      	ldr	r2, [pc, #376]	@ (8005eb8 <HAL_RCC_OscConfig+0x470>)
 8005d40:	f043 0304 	orr.w	r3, r3, #4
 8005d44:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d46:	4b5c      	ldr	r3, [pc, #368]	@ (8005eb8 <HAL_RCC_OscConfig+0x470>)
 8005d48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d4a:	4a5b      	ldr	r2, [pc, #364]	@ (8005eb8 <HAL_RCC_OscConfig+0x470>)
 8005d4c:	f043 0301 	orr.w	r3, r3, #1
 8005d50:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d52:	e00b      	b.n	8005d6c <HAL_RCC_OscConfig+0x324>
 8005d54:	4b58      	ldr	r3, [pc, #352]	@ (8005eb8 <HAL_RCC_OscConfig+0x470>)
 8005d56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d58:	4a57      	ldr	r2, [pc, #348]	@ (8005eb8 <HAL_RCC_OscConfig+0x470>)
 8005d5a:	f023 0301 	bic.w	r3, r3, #1
 8005d5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d60:	4b55      	ldr	r3, [pc, #340]	@ (8005eb8 <HAL_RCC_OscConfig+0x470>)
 8005d62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d64:	4a54      	ldr	r2, [pc, #336]	@ (8005eb8 <HAL_RCC_OscConfig+0x470>)
 8005d66:	f023 0304 	bic.w	r3, r3, #4
 8005d6a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d015      	beq.n	8005da0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d74:	f7fd fd9a 	bl	80038ac <HAL_GetTick>
 8005d78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d7a:	e00a      	b.n	8005d92 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d7c:	f7fd fd96 	bl	80038ac <HAL_GetTick>
 8005d80:	4602      	mov	r2, r0
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	1ad3      	subs	r3, r2, r3
 8005d86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d901      	bls.n	8005d92 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005d8e:	2303      	movs	r3, #3
 8005d90:	e0cb      	b.n	8005f2a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d92:	4b49      	ldr	r3, [pc, #292]	@ (8005eb8 <HAL_RCC_OscConfig+0x470>)
 8005d94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d96:	f003 0302 	and.w	r3, r3, #2
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d0ee      	beq.n	8005d7c <HAL_RCC_OscConfig+0x334>
 8005d9e:	e014      	b.n	8005dca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005da0:	f7fd fd84 	bl	80038ac <HAL_GetTick>
 8005da4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005da6:	e00a      	b.n	8005dbe <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005da8:	f7fd fd80 	bl	80038ac <HAL_GetTick>
 8005dac:	4602      	mov	r2, r0
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	1ad3      	subs	r3, r2, r3
 8005db2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d901      	bls.n	8005dbe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005dba:	2303      	movs	r3, #3
 8005dbc:	e0b5      	b.n	8005f2a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005dbe:	4b3e      	ldr	r3, [pc, #248]	@ (8005eb8 <HAL_RCC_OscConfig+0x470>)
 8005dc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dc2:	f003 0302 	and.w	r3, r3, #2
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d1ee      	bne.n	8005da8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005dca:	7dfb      	ldrb	r3, [r7, #23]
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d105      	bne.n	8005ddc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005dd0:	4b39      	ldr	r3, [pc, #228]	@ (8005eb8 <HAL_RCC_OscConfig+0x470>)
 8005dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dd4:	4a38      	ldr	r2, [pc, #224]	@ (8005eb8 <HAL_RCC_OscConfig+0x470>)
 8005dd6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005dda:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	699b      	ldr	r3, [r3, #24]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	f000 80a1 	beq.w	8005f28 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005de6:	4b34      	ldr	r3, [pc, #208]	@ (8005eb8 <HAL_RCC_OscConfig+0x470>)
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	f003 030c 	and.w	r3, r3, #12
 8005dee:	2b08      	cmp	r3, #8
 8005df0:	d05c      	beq.n	8005eac <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	699b      	ldr	r3, [r3, #24]
 8005df6:	2b02      	cmp	r3, #2
 8005df8:	d141      	bne.n	8005e7e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dfa:	4b31      	ldr	r3, [pc, #196]	@ (8005ec0 <HAL_RCC_OscConfig+0x478>)
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e00:	f7fd fd54 	bl	80038ac <HAL_GetTick>
 8005e04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e06:	e008      	b.n	8005e1a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e08:	f7fd fd50 	bl	80038ac <HAL_GetTick>
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	1ad3      	subs	r3, r2, r3
 8005e12:	2b02      	cmp	r3, #2
 8005e14:	d901      	bls.n	8005e1a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005e16:	2303      	movs	r3, #3
 8005e18:	e087      	b.n	8005f2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e1a:	4b27      	ldr	r3, [pc, #156]	@ (8005eb8 <HAL_RCC_OscConfig+0x470>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d1f0      	bne.n	8005e08 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	69da      	ldr	r2, [r3, #28]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6a1b      	ldr	r3, [r3, #32]
 8005e2e:	431a      	orrs	r2, r3
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e34:	019b      	lsls	r3, r3, #6
 8005e36:	431a      	orrs	r2, r3
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e3c:	085b      	lsrs	r3, r3, #1
 8005e3e:	3b01      	subs	r3, #1
 8005e40:	041b      	lsls	r3, r3, #16
 8005e42:	431a      	orrs	r2, r3
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e48:	061b      	lsls	r3, r3, #24
 8005e4a:	491b      	ldr	r1, [pc, #108]	@ (8005eb8 <HAL_RCC_OscConfig+0x470>)
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e50:	4b1b      	ldr	r3, [pc, #108]	@ (8005ec0 <HAL_RCC_OscConfig+0x478>)
 8005e52:	2201      	movs	r2, #1
 8005e54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e56:	f7fd fd29 	bl	80038ac <HAL_GetTick>
 8005e5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e5c:	e008      	b.n	8005e70 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e5e:	f7fd fd25 	bl	80038ac <HAL_GetTick>
 8005e62:	4602      	mov	r2, r0
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	1ad3      	subs	r3, r2, r3
 8005e68:	2b02      	cmp	r3, #2
 8005e6a:	d901      	bls.n	8005e70 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005e6c:	2303      	movs	r3, #3
 8005e6e:	e05c      	b.n	8005f2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e70:	4b11      	ldr	r3, [pc, #68]	@ (8005eb8 <HAL_RCC_OscConfig+0x470>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d0f0      	beq.n	8005e5e <HAL_RCC_OscConfig+0x416>
 8005e7c:	e054      	b.n	8005f28 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e7e:	4b10      	ldr	r3, [pc, #64]	@ (8005ec0 <HAL_RCC_OscConfig+0x478>)
 8005e80:	2200      	movs	r2, #0
 8005e82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e84:	f7fd fd12 	bl	80038ac <HAL_GetTick>
 8005e88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e8a:	e008      	b.n	8005e9e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e8c:	f7fd fd0e 	bl	80038ac <HAL_GetTick>
 8005e90:	4602      	mov	r2, r0
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	1ad3      	subs	r3, r2, r3
 8005e96:	2b02      	cmp	r3, #2
 8005e98:	d901      	bls.n	8005e9e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005e9a:	2303      	movs	r3, #3
 8005e9c:	e045      	b.n	8005f2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e9e:	4b06      	ldr	r3, [pc, #24]	@ (8005eb8 <HAL_RCC_OscConfig+0x470>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d1f0      	bne.n	8005e8c <HAL_RCC_OscConfig+0x444>
 8005eaa:	e03d      	b.n	8005f28 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	699b      	ldr	r3, [r3, #24]
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d107      	bne.n	8005ec4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	e038      	b.n	8005f2a <HAL_RCC_OscConfig+0x4e2>
 8005eb8:	40023800 	.word	0x40023800
 8005ebc:	40007000 	.word	0x40007000
 8005ec0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005ec4:	4b1b      	ldr	r3, [pc, #108]	@ (8005f34 <HAL_RCC_OscConfig+0x4ec>)
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	699b      	ldr	r3, [r3, #24]
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d028      	beq.n	8005f24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d121      	bne.n	8005f24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d11a      	bne.n	8005f24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005eee:	68fa      	ldr	r2, [r7, #12]
 8005ef0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005ef4:	4013      	ands	r3, r2
 8005ef6:	687a      	ldr	r2, [r7, #4]
 8005ef8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005efa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d111      	bne.n	8005f24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f0a:	085b      	lsrs	r3, r3, #1
 8005f0c:	3b01      	subs	r3, #1
 8005f0e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d107      	bne.n	8005f24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f1e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d001      	beq.n	8005f28 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005f24:	2301      	movs	r3, #1
 8005f26:	e000      	b.n	8005f2a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005f28:	2300      	movs	r3, #0
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3718      	adds	r7, #24
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
 8005f32:	bf00      	nop
 8005f34:	40023800 	.word	0x40023800

08005f38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d101      	bne.n	8005f4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e0cc      	b.n	80060e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005f4c:	4b68      	ldr	r3, [pc, #416]	@ (80060f0 <HAL_RCC_ClockConfig+0x1b8>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f003 0307 	and.w	r3, r3, #7
 8005f54:	683a      	ldr	r2, [r7, #0]
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d90c      	bls.n	8005f74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f5a:	4b65      	ldr	r3, [pc, #404]	@ (80060f0 <HAL_RCC_ClockConfig+0x1b8>)
 8005f5c:	683a      	ldr	r2, [r7, #0]
 8005f5e:	b2d2      	uxtb	r2, r2
 8005f60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f62:	4b63      	ldr	r3, [pc, #396]	@ (80060f0 <HAL_RCC_ClockConfig+0x1b8>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f003 0307 	and.w	r3, r3, #7
 8005f6a:	683a      	ldr	r2, [r7, #0]
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d001      	beq.n	8005f74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005f70:	2301      	movs	r3, #1
 8005f72:	e0b8      	b.n	80060e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f003 0302 	and.w	r3, r3, #2
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d020      	beq.n	8005fc2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f003 0304 	and.w	r3, r3, #4
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d005      	beq.n	8005f98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f8c:	4b59      	ldr	r3, [pc, #356]	@ (80060f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	4a58      	ldr	r2, [pc, #352]	@ (80060f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f92:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005f96:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f003 0308 	and.w	r3, r3, #8
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d005      	beq.n	8005fb0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005fa4:	4b53      	ldr	r3, [pc, #332]	@ (80060f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	4a52      	ldr	r2, [pc, #328]	@ (80060f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005faa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005fae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005fb0:	4b50      	ldr	r3, [pc, #320]	@ (80060f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	494d      	ldr	r1, [pc, #308]	@ (80060f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f003 0301 	and.w	r3, r3, #1
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d044      	beq.n	8006058 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d107      	bne.n	8005fe6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fd6:	4b47      	ldr	r3, [pc, #284]	@ (80060f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d119      	bne.n	8006016 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e07f      	b.n	80060e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	2b02      	cmp	r3, #2
 8005fec:	d003      	beq.n	8005ff6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ff2:	2b03      	cmp	r3, #3
 8005ff4:	d107      	bne.n	8006006 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ff6:	4b3f      	ldr	r3, [pc, #252]	@ (80060f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d109      	bne.n	8006016 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	e06f      	b.n	80060e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006006:	4b3b      	ldr	r3, [pc, #236]	@ (80060f4 <HAL_RCC_ClockConfig+0x1bc>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f003 0302 	and.w	r3, r3, #2
 800600e:	2b00      	cmp	r3, #0
 8006010:	d101      	bne.n	8006016 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	e067      	b.n	80060e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006016:	4b37      	ldr	r3, [pc, #220]	@ (80060f4 <HAL_RCC_ClockConfig+0x1bc>)
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	f023 0203 	bic.w	r2, r3, #3
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	4934      	ldr	r1, [pc, #208]	@ (80060f4 <HAL_RCC_ClockConfig+0x1bc>)
 8006024:	4313      	orrs	r3, r2
 8006026:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006028:	f7fd fc40 	bl	80038ac <HAL_GetTick>
 800602c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800602e:	e00a      	b.n	8006046 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006030:	f7fd fc3c 	bl	80038ac <HAL_GetTick>
 8006034:	4602      	mov	r2, r0
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	1ad3      	subs	r3, r2, r3
 800603a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800603e:	4293      	cmp	r3, r2
 8006040:	d901      	bls.n	8006046 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006042:	2303      	movs	r3, #3
 8006044:	e04f      	b.n	80060e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006046:	4b2b      	ldr	r3, [pc, #172]	@ (80060f4 <HAL_RCC_ClockConfig+0x1bc>)
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	f003 020c 	and.w	r2, r3, #12
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	429a      	cmp	r2, r3
 8006056:	d1eb      	bne.n	8006030 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006058:	4b25      	ldr	r3, [pc, #148]	@ (80060f0 <HAL_RCC_ClockConfig+0x1b8>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f003 0307 	and.w	r3, r3, #7
 8006060:	683a      	ldr	r2, [r7, #0]
 8006062:	429a      	cmp	r2, r3
 8006064:	d20c      	bcs.n	8006080 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006066:	4b22      	ldr	r3, [pc, #136]	@ (80060f0 <HAL_RCC_ClockConfig+0x1b8>)
 8006068:	683a      	ldr	r2, [r7, #0]
 800606a:	b2d2      	uxtb	r2, r2
 800606c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800606e:	4b20      	ldr	r3, [pc, #128]	@ (80060f0 <HAL_RCC_ClockConfig+0x1b8>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f003 0307 	and.w	r3, r3, #7
 8006076:	683a      	ldr	r2, [r7, #0]
 8006078:	429a      	cmp	r2, r3
 800607a:	d001      	beq.n	8006080 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800607c:	2301      	movs	r3, #1
 800607e:	e032      	b.n	80060e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f003 0304 	and.w	r3, r3, #4
 8006088:	2b00      	cmp	r3, #0
 800608a:	d008      	beq.n	800609e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800608c:	4b19      	ldr	r3, [pc, #100]	@ (80060f4 <HAL_RCC_ClockConfig+0x1bc>)
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	68db      	ldr	r3, [r3, #12]
 8006098:	4916      	ldr	r1, [pc, #88]	@ (80060f4 <HAL_RCC_ClockConfig+0x1bc>)
 800609a:	4313      	orrs	r3, r2
 800609c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f003 0308 	and.w	r3, r3, #8
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d009      	beq.n	80060be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80060aa:	4b12      	ldr	r3, [pc, #72]	@ (80060f4 <HAL_RCC_ClockConfig+0x1bc>)
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	691b      	ldr	r3, [r3, #16]
 80060b6:	00db      	lsls	r3, r3, #3
 80060b8:	490e      	ldr	r1, [pc, #56]	@ (80060f4 <HAL_RCC_ClockConfig+0x1bc>)
 80060ba:	4313      	orrs	r3, r2
 80060bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80060be:	f000 f821 	bl	8006104 <HAL_RCC_GetSysClockFreq>
 80060c2:	4602      	mov	r2, r0
 80060c4:	4b0b      	ldr	r3, [pc, #44]	@ (80060f4 <HAL_RCC_ClockConfig+0x1bc>)
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	091b      	lsrs	r3, r3, #4
 80060ca:	f003 030f 	and.w	r3, r3, #15
 80060ce:	490a      	ldr	r1, [pc, #40]	@ (80060f8 <HAL_RCC_ClockConfig+0x1c0>)
 80060d0:	5ccb      	ldrb	r3, [r1, r3]
 80060d2:	fa22 f303 	lsr.w	r3, r2, r3
 80060d6:	4a09      	ldr	r2, [pc, #36]	@ (80060fc <HAL_RCC_ClockConfig+0x1c4>)
 80060d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80060da:	4b09      	ldr	r3, [pc, #36]	@ (8006100 <HAL_RCC_ClockConfig+0x1c8>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4618      	mov	r0, r3
 80060e0:	f7fd fba0 	bl	8003824 <HAL_InitTick>

  return HAL_OK;
 80060e4:	2300      	movs	r3, #0
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3710      	adds	r7, #16
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}
 80060ee:	bf00      	nop
 80060f0:	40023c00 	.word	0x40023c00
 80060f4:	40023800 	.word	0x40023800
 80060f8:	0800a69c 	.word	0x0800a69c
 80060fc:	20000000 	.word	0x20000000
 8006100:	20000004 	.word	0x20000004

08006104 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006104:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006108:	b090      	sub	sp, #64	@ 0x40
 800610a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800610c:	2300      	movs	r3, #0
 800610e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8006110:	2300      	movs	r3, #0
 8006112:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8006114:	2300      	movs	r3, #0
 8006116:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8006118:	2300      	movs	r3, #0
 800611a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800611c:	4b59      	ldr	r3, [pc, #356]	@ (8006284 <HAL_RCC_GetSysClockFreq+0x180>)
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	f003 030c 	and.w	r3, r3, #12
 8006124:	2b08      	cmp	r3, #8
 8006126:	d00d      	beq.n	8006144 <HAL_RCC_GetSysClockFreq+0x40>
 8006128:	2b08      	cmp	r3, #8
 800612a:	f200 80a1 	bhi.w	8006270 <HAL_RCC_GetSysClockFreq+0x16c>
 800612e:	2b00      	cmp	r3, #0
 8006130:	d002      	beq.n	8006138 <HAL_RCC_GetSysClockFreq+0x34>
 8006132:	2b04      	cmp	r3, #4
 8006134:	d003      	beq.n	800613e <HAL_RCC_GetSysClockFreq+0x3a>
 8006136:	e09b      	b.n	8006270 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006138:	4b53      	ldr	r3, [pc, #332]	@ (8006288 <HAL_RCC_GetSysClockFreq+0x184>)
 800613a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800613c:	e09b      	b.n	8006276 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800613e:	4b53      	ldr	r3, [pc, #332]	@ (800628c <HAL_RCC_GetSysClockFreq+0x188>)
 8006140:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006142:	e098      	b.n	8006276 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006144:	4b4f      	ldr	r3, [pc, #316]	@ (8006284 <HAL_RCC_GetSysClockFreq+0x180>)
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800614c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800614e:	4b4d      	ldr	r3, [pc, #308]	@ (8006284 <HAL_RCC_GetSysClockFreq+0x180>)
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006156:	2b00      	cmp	r3, #0
 8006158:	d028      	beq.n	80061ac <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800615a:	4b4a      	ldr	r3, [pc, #296]	@ (8006284 <HAL_RCC_GetSysClockFreq+0x180>)
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	099b      	lsrs	r3, r3, #6
 8006160:	2200      	movs	r2, #0
 8006162:	623b      	str	r3, [r7, #32]
 8006164:	627a      	str	r2, [r7, #36]	@ 0x24
 8006166:	6a3b      	ldr	r3, [r7, #32]
 8006168:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800616c:	2100      	movs	r1, #0
 800616e:	4b47      	ldr	r3, [pc, #284]	@ (800628c <HAL_RCC_GetSysClockFreq+0x188>)
 8006170:	fb03 f201 	mul.w	r2, r3, r1
 8006174:	2300      	movs	r3, #0
 8006176:	fb00 f303 	mul.w	r3, r0, r3
 800617a:	4413      	add	r3, r2
 800617c:	4a43      	ldr	r2, [pc, #268]	@ (800628c <HAL_RCC_GetSysClockFreq+0x188>)
 800617e:	fba0 1202 	umull	r1, r2, r0, r2
 8006182:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006184:	460a      	mov	r2, r1
 8006186:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006188:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800618a:	4413      	add	r3, r2
 800618c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800618e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006190:	2200      	movs	r2, #0
 8006192:	61bb      	str	r3, [r7, #24]
 8006194:	61fa      	str	r2, [r7, #28]
 8006196:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800619a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800619e:	f7fa fd5b 	bl	8000c58 <__aeabi_uldivmod>
 80061a2:	4602      	mov	r2, r0
 80061a4:	460b      	mov	r3, r1
 80061a6:	4613      	mov	r3, r2
 80061a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80061aa:	e053      	b.n	8006254 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80061ac:	4b35      	ldr	r3, [pc, #212]	@ (8006284 <HAL_RCC_GetSysClockFreq+0x180>)
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	099b      	lsrs	r3, r3, #6
 80061b2:	2200      	movs	r2, #0
 80061b4:	613b      	str	r3, [r7, #16]
 80061b6:	617a      	str	r2, [r7, #20]
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80061be:	f04f 0b00 	mov.w	fp, #0
 80061c2:	4652      	mov	r2, sl
 80061c4:	465b      	mov	r3, fp
 80061c6:	f04f 0000 	mov.w	r0, #0
 80061ca:	f04f 0100 	mov.w	r1, #0
 80061ce:	0159      	lsls	r1, r3, #5
 80061d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80061d4:	0150      	lsls	r0, r2, #5
 80061d6:	4602      	mov	r2, r0
 80061d8:	460b      	mov	r3, r1
 80061da:	ebb2 080a 	subs.w	r8, r2, sl
 80061de:	eb63 090b 	sbc.w	r9, r3, fp
 80061e2:	f04f 0200 	mov.w	r2, #0
 80061e6:	f04f 0300 	mov.w	r3, #0
 80061ea:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80061ee:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80061f2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80061f6:	ebb2 0408 	subs.w	r4, r2, r8
 80061fa:	eb63 0509 	sbc.w	r5, r3, r9
 80061fe:	f04f 0200 	mov.w	r2, #0
 8006202:	f04f 0300 	mov.w	r3, #0
 8006206:	00eb      	lsls	r3, r5, #3
 8006208:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800620c:	00e2      	lsls	r2, r4, #3
 800620e:	4614      	mov	r4, r2
 8006210:	461d      	mov	r5, r3
 8006212:	eb14 030a 	adds.w	r3, r4, sl
 8006216:	603b      	str	r3, [r7, #0]
 8006218:	eb45 030b 	adc.w	r3, r5, fp
 800621c:	607b      	str	r3, [r7, #4]
 800621e:	f04f 0200 	mov.w	r2, #0
 8006222:	f04f 0300 	mov.w	r3, #0
 8006226:	e9d7 4500 	ldrd	r4, r5, [r7]
 800622a:	4629      	mov	r1, r5
 800622c:	028b      	lsls	r3, r1, #10
 800622e:	4621      	mov	r1, r4
 8006230:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006234:	4621      	mov	r1, r4
 8006236:	028a      	lsls	r2, r1, #10
 8006238:	4610      	mov	r0, r2
 800623a:	4619      	mov	r1, r3
 800623c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800623e:	2200      	movs	r2, #0
 8006240:	60bb      	str	r3, [r7, #8]
 8006242:	60fa      	str	r2, [r7, #12]
 8006244:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006248:	f7fa fd06 	bl	8000c58 <__aeabi_uldivmod>
 800624c:	4602      	mov	r2, r0
 800624e:	460b      	mov	r3, r1
 8006250:	4613      	mov	r3, r2
 8006252:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006254:	4b0b      	ldr	r3, [pc, #44]	@ (8006284 <HAL_RCC_GetSysClockFreq+0x180>)
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	0c1b      	lsrs	r3, r3, #16
 800625a:	f003 0303 	and.w	r3, r3, #3
 800625e:	3301      	adds	r3, #1
 8006260:	005b      	lsls	r3, r3, #1
 8006262:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8006264:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006268:	fbb2 f3f3 	udiv	r3, r2, r3
 800626c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800626e:	e002      	b.n	8006276 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006270:	4b05      	ldr	r3, [pc, #20]	@ (8006288 <HAL_RCC_GetSysClockFreq+0x184>)
 8006272:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006274:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8006278:	4618      	mov	r0, r3
 800627a:	3740      	adds	r7, #64	@ 0x40
 800627c:	46bd      	mov	sp, r7
 800627e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006282:	bf00      	nop
 8006284:	40023800 	.word	0x40023800
 8006288:	00f42400 	.word	0x00f42400
 800628c:	017d7840 	.word	0x017d7840

08006290 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006290:	b480      	push	{r7}
 8006292:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006294:	4b03      	ldr	r3, [pc, #12]	@ (80062a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006296:	681b      	ldr	r3, [r3, #0]
}
 8006298:	4618      	mov	r0, r3
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr
 80062a2:	bf00      	nop
 80062a4:	20000000 	.word	0x20000000

080062a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80062ac:	f7ff fff0 	bl	8006290 <HAL_RCC_GetHCLKFreq>
 80062b0:	4602      	mov	r2, r0
 80062b2:	4b05      	ldr	r3, [pc, #20]	@ (80062c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	0a9b      	lsrs	r3, r3, #10
 80062b8:	f003 0307 	and.w	r3, r3, #7
 80062bc:	4903      	ldr	r1, [pc, #12]	@ (80062cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80062be:	5ccb      	ldrb	r3, [r1, r3]
 80062c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	bd80      	pop	{r7, pc}
 80062c8:	40023800 	.word	0x40023800
 80062cc:	0800a6ac 	.word	0x0800a6ac

080062d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80062d4:	f7ff ffdc 	bl	8006290 <HAL_RCC_GetHCLKFreq>
 80062d8:	4602      	mov	r2, r0
 80062da:	4b05      	ldr	r3, [pc, #20]	@ (80062f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	0b5b      	lsrs	r3, r3, #13
 80062e0:	f003 0307 	and.w	r3, r3, #7
 80062e4:	4903      	ldr	r1, [pc, #12]	@ (80062f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80062e6:	5ccb      	ldrb	r3, [r1, r3]
 80062e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	bd80      	pop	{r7, pc}
 80062f0:	40023800 	.word	0x40023800
 80062f4:	0800a6ac 	.word	0x0800a6ac

080062f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b082      	sub	sp, #8
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d101      	bne.n	800630a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	e041      	b.n	800638e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006310:	b2db      	uxtb	r3, r3
 8006312:	2b00      	cmp	r3, #0
 8006314:	d106      	bne.n	8006324 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2200      	movs	r2, #0
 800631a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f7fd f9a0 	bl	8003664 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2202      	movs	r2, #2
 8006328:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681a      	ldr	r2, [r3, #0]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	3304      	adds	r3, #4
 8006334:	4619      	mov	r1, r3
 8006336:	4610      	mov	r0, r2
 8006338:	f000 f950 	bl	80065dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2201      	movs	r2, #1
 8006340:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2201      	movs	r2, #1
 8006348:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2201      	movs	r2, #1
 8006350:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2201      	movs	r2, #1
 8006358:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2201      	movs	r2, #1
 8006360:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2201      	movs	r2, #1
 8006368:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2201      	movs	r2, #1
 8006370:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2201      	movs	r2, #1
 8006378:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2201      	movs	r2, #1
 8006380:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2201      	movs	r2, #1
 8006388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800638c:	2300      	movs	r3, #0
}
 800638e:	4618      	mov	r0, r3
 8006390:	3708      	adds	r7, #8
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
	...

08006398 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006398:	b480      	push	{r7}
 800639a:	b085      	sub	sp, #20
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063a6:	b2db      	uxtb	r3, r3
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d001      	beq.n	80063b0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80063ac:	2301      	movs	r3, #1
 80063ae:	e03c      	b.n	800642a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2202      	movs	r2, #2
 80063b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a1e      	ldr	r2, [pc, #120]	@ (8006438 <HAL_TIM_Base_Start+0xa0>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d018      	beq.n	80063f4 <HAL_TIM_Base_Start+0x5c>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063ca:	d013      	beq.n	80063f4 <HAL_TIM_Base_Start+0x5c>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a1a      	ldr	r2, [pc, #104]	@ (800643c <HAL_TIM_Base_Start+0xa4>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d00e      	beq.n	80063f4 <HAL_TIM_Base_Start+0x5c>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a19      	ldr	r2, [pc, #100]	@ (8006440 <HAL_TIM_Base_Start+0xa8>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d009      	beq.n	80063f4 <HAL_TIM_Base_Start+0x5c>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a17      	ldr	r2, [pc, #92]	@ (8006444 <HAL_TIM_Base_Start+0xac>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d004      	beq.n	80063f4 <HAL_TIM_Base_Start+0x5c>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a16      	ldr	r2, [pc, #88]	@ (8006448 <HAL_TIM_Base_Start+0xb0>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d111      	bne.n	8006418 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	f003 0307 	and.w	r3, r3, #7
 80063fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2b06      	cmp	r3, #6
 8006404:	d010      	beq.n	8006428 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f042 0201 	orr.w	r2, r2, #1
 8006414:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006416:	e007      	b.n	8006428 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f042 0201 	orr.w	r2, r2, #1
 8006426:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006428:	2300      	movs	r3, #0
}
 800642a:	4618      	mov	r0, r3
 800642c:	3714      	adds	r7, #20
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr
 8006436:	bf00      	nop
 8006438:	40010000 	.word	0x40010000
 800643c:	40000400 	.word	0x40000400
 8006440:	40000800 	.word	0x40000800
 8006444:	40000c00 	.word	0x40000c00
 8006448:	40014000 	.word	0x40014000

0800644c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b084      	sub	sp, #16
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006456:	2300      	movs	r3, #0
 8006458:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006460:	2b01      	cmp	r3, #1
 8006462:	d101      	bne.n	8006468 <HAL_TIM_ConfigClockSource+0x1c>
 8006464:	2302      	movs	r3, #2
 8006466:	e0b4      	b.n	80065d2 <HAL_TIM_ConfigClockSource+0x186>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2201      	movs	r2, #1
 800646c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2202      	movs	r2, #2
 8006474:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006486:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800648e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	68ba      	ldr	r2, [r7, #8]
 8006496:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064a0:	d03e      	beq.n	8006520 <HAL_TIM_ConfigClockSource+0xd4>
 80064a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064a6:	f200 8087 	bhi.w	80065b8 <HAL_TIM_ConfigClockSource+0x16c>
 80064aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064ae:	f000 8086 	beq.w	80065be <HAL_TIM_ConfigClockSource+0x172>
 80064b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064b6:	d87f      	bhi.n	80065b8 <HAL_TIM_ConfigClockSource+0x16c>
 80064b8:	2b70      	cmp	r3, #112	@ 0x70
 80064ba:	d01a      	beq.n	80064f2 <HAL_TIM_ConfigClockSource+0xa6>
 80064bc:	2b70      	cmp	r3, #112	@ 0x70
 80064be:	d87b      	bhi.n	80065b8 <HAL_TIM_ConfigClockSource+0x16c>
 80064c0:	2b60      	cmp	r3, #96	@ 0x60
 80064c2:	d050      	beq.n	8006566 <HAL_TIM_ConfigClockSource+0x11a>
 80064c4:	2b60      	cmp	r3, #96	@ 0x60
 80064c6:	d877      	bhi.n	80065b8 <HAL_TIM_ConfigClockSource+0x16c>
 80064c8:	2b50      	cmp	r3, #80	@ 0x50
 80064ca:	d03c      	beq.n	8006546 <HAL_TIM_ConfigClockSource+0xfa>
 80064cc:	2b50      	cmp	r3, #80	@ 0x50
 80064ce:	d873      	bhi.n	80065b8 <HAL_TIM_ConfigClockSource+0x16c>
 80064d0:	2b40      	cmp	r3, #64	@ 0x40
 80064d2:	d058      	beq.n	8006586 <HAL_TIM_ConfigClockSource+0x13a>
 80064d4:	2b40      	cmp	r3, #64	@ 0x40
 80064d6:	d86f      	bhi.n	80065b8 <HAL_TIM_ConfigClockSource+0x16c>
 80064d8:	2b30      	cmp	r3, #48	@ 0x30
 80064da:	d064      	beq.n	80065a6 <HAL_TIM_ConfigClockSource+0x15a>
 80064dc:	2b30      	cmp	r3, #48	@ 0x30
 80064de:	d86b      	bhi.n	80065b8 <HAL_TIM_ConfigClockSource+0x16c>
 80064e0:	2b20      	cmp	r3, #32
 80064e2:	d060      	beq.n	80065a6 <HAL_TIM_ConfigClockSource+0x15a>
 80064e4:	2b20      	cmp	r3, #32
 80064e6:	d867      	bhi.n	80065b8 <HAL_TIM_ConfigClockSource+0x16c>
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d05c      	beq.n	80065a6 <HAL_TIM_ConfigClockSource+0x15a>
 80064ec:	2b10      	cmp	r3, #16
 80064ee:	d05a      	beq.n	80065a6 <HAL_TIM_ConfigClockSource+0x15a>
 80064f0:	e062      	b.n	80065b8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006502:	f000 f96b 	bl	80067dc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006514:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	68ba      	ldr	r2, [r7, #8]
 800651c:	609a      	str	r2, [r3, #8]
      break;
 800651e:	e04f      	b.n	80065c0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006530:	f000 f954 	bl	80067dc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	689a      	ldr	r2, [r3, #8]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006542:	609a      	str	r2, [r3, #8]
      break;
 8006544:	e03c      	b.n	80065c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006552:	461a      	mov	r2, r3
 8006554:	f000 f8c8 	bl	80066e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	2150      	movs	r1, #80	@ 0x50
 800655e:	4618      	mov	r0, r3
 8006560:	f000 f921 	bl	80067a6 <TIM_ITRx_SetConfig>
      break;
 8006564:	e02c      	b.n	80065c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006572:	461a      	mov	r2, r3
 8006574:	f000 f8e7 	bl	8006746 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	2160      	movs	r1, #96	@ 0x60
 800657e:	4618      	mov	r0, r3
 8006580:	f000 f911 	bl	80067a6 <TIM_ITRx_SetConfig>
      break;
 8006584:	e01c      	b.n	80065c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006592:	461a      	mov	r2, r3
 8006594:	f000 f8a8 	bl	80066e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	2140      	movs	r1, #64	@ 0x40
 800659e:	4618      	mov	r0, r3
 80065a0:	f000 f901 	bl	80067a6 <TIM_ITRx_SetConfig>
      break;
 80065a4:	e00c      	b.n	80065c0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4619      	mov	r1, r3
 80065b0:	4610      	mov	r0, r2
 80065b2:	f000 f8f8 	bl	80067a6 <TIM_ITRx_SetConfig>
      break;
 80065b6:	e003      	b.n	80065c0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80065b8:	2301      	movs	r3, #1
 80065ba:	73fb      	strb	r3, [r7, #15]
      break;
 80065bc:	e000      	b.n	80065c0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80065be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2201      	movs	r2, #1
 80065c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2200      	movs	r2, #0
 80065cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80065d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3710      	adds	r7, #16
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
	...

080065dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80065dc:	b480      	push	{r7}
 80065de:	b085      	sub	sp, #20
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	4a37      	ldr	r2, [pc, #220]	@ (80066cc <TIM_Base_SetConfig+0xf0>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d00f      	beq.n	8006614 <TIM_Base_SetConfig+0x38>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065fa:	d00b      	beq.n	8006614 <TIM_Base_SetConfig+0x38>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	4a34      	ldr	r2, [pc, #208]	@ (80066d0 <TIM_Base_SetConfig+0xf4>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d007      	beq.n	8006614 <TIM_Base_SetConfig+0x38>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	4a33      	ldr	r2, [pc, #204]	@ (80066d4 <TIM_Base_SetConfig+0xf8>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d003      	beq.n	8006614 <TIM_Base_SetConfig+0x38>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	4a32      	ldr	r2, [pc, #200]	@ (80066d8 <TIM_Base_SetConfig+0xfc>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d108      	bne.n	8006626 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800661a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	68fa      	ldr	r2, [r7, #12]
 8006622:	4313      	orrs	r3, r2
 8006624:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	4a28      	ldr	r2, [pc, #160]	@ (80066cc <TIM_Base_SetConfig+0xf0>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d01b      	beq.n	8006666 <TIM_Base_SetConfig+0x8a>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006634:	d017      	beq.n	8006666 <TIM_Base_SetConfig+0x8a>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	4a25      	ldr	r2, [pc, #148]	@ (80066d0 <TIM_Base_SetConfig+0xf4>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d013      	beq.n	8006666 <TIM_Base_SetConfig+0x8a>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	4a24      	ldr	r2, [pc, #144]	@ (80066d4 <TIM_Base_SetConfig+0xf8>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d00f      	beq.n	8006666 <TIM_Base_SetConfig+0x8a>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	4a23      	ldr	r2, [pc, #140]	@ (80066d8 <TIM_Base_SetConfig+0xfc>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d00b      	beq.n	8006666 <TIM_Base_SetConfig+0x8a>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	4a22      	ldr	r2, [pc, #136]	@ (80066dc <TIM_Base_SetConfig+0x100>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d007      	beq.n	8006666 <TIM_Base_SetConfig+0x8a>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	4a21      	ldr	r2, [pc, #132]	@ (80066e0 <TIM_Base_SetConfig+0x104>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d003      	beq.n	8006666 <TIM_Base_SetConfig+0x8a>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	4a20      	ldr	r2, [pc, #128]	@ (80066e4 <TIM_Base_SetConfig+0x108>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d108      	bne.n	8006678 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800666c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	68db      	ldr	r3, [r3, #12]
 8006672:	68fa      	ldr	r2, [r7, #12]
 8006674:	4313      	orrs	r3, r2
 8006676:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	695b      	ldr	r3, [r3, #20]
 8006682:	4313      	orrs	r3, r2
 8006684:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	689a      	ldr	r2, [r3, #8]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	4a0c      	ldr	r2, [pc, #48]	@ (80066cc <TIM_Base_SetConfig+0xf0>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d103      	bne.n	80066a6 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	691a      	ldr	r2, [r3, #16]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f043 0204 	orr.w	r2, r3, #4
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2201      	movs	r2, #1
 80066b6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	68fa      	ldr	r2, [r7, #12]
 80066bc:	601a      	str	r2, [r3, #0]
}
 80066be:	bf00      	nop
 80066c0:	3714      	adds	r7, #20
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr
 80066ca:	bf00      	nop
 80066cc:	40010000 	.word	0x40010000
 80066d0:	40000400 	.word	0x40000400
 80066d4:	40000800 	.word	0x40000800
 80066d8:	40000c00 	.word	0x40000c00
 80066dc:	40014000 	.word	0x40014000
 80066e0:	40014400 	.word	0x40014400
 80066e4:	40014800 	.word	0x40014800

080066e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b087      	sub	sp, #28
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	60f8      	str	r0, [r7, #12]
 80066f0:	60b9      	str	r1, [r7, #8]
 80066f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	6a1b      	ldr	r3, [r3, #32]
 80066f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	6a1b      	ldr	r3, [r3, #32]
 80066fe:	f023 0201 	bic.w	r2, r3, #1
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	699b      	ldr	r3, [r3, #24]
 800670a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006712:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	011b      	lsls	r3, r3, #4
 8006718:	693a      	ldr	r2, [r7, #16]
 800671a:	4313      	orrs	r3, r2
 800671c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	f023 030a 	bic.w	r3, r3, #10
 8006724:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006726:	697a      	ldr	r2, [r7, #20]
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	4313      	orrs	r3, r2
 800672c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	693a      	ldr	r2, [r7, #16]
 8006732:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	697a      	ldr	r2, [r7, #20]
 8006738:	621a      	str	r2, [r3, #32]
}
 800673a:	bf00      	nop
 800673c:	371c      	adds	r7, #28
 800673e:	46bd      	mov	sp, r7
 8006740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006744:	4770      	bx	lr

08006746 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006746:	b480      	push	{r7}
 8006748:	b087      	sub	sp, #28
 800674a:	af00      	add	r7, sp, #0
 800674c:	60f8      	str	r0, [r7, #12]
 800674e:	60b9      	str	r1, [r7, #8]
 8006750:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	6a1b      	ldr	r3, [r3, #32]
 8006756:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	6a1b      	ldr	r3, [r3, #32]
 800675c:	f023 0210 	bic.w	r2, r3, #16
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	699b      	ldr	r3, [r3, #24]
 8006768:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006770:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	031b      	lsls	r3, r3, #12
 8006776:	693a      	ldr	r2, [r7, #16]
 8006778:	4313      	orrs	r3, r2
 800677a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006782:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	011b      	lsls	r3, r3, #4
 8006788:	697a      	ldr	r2, [r7, #20]
 800678a:	4313      	orrs	r3, r2
 800678c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	693a      	ldr	r2, [r7, #16]
 8006792:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	697a      	ldr	r2, [r7, #20]
 8006798:	621a      	str	r2, [r3, #32]
}
 800679a:	bf00      	nop
 800679c:	371c      	adds	r7, #28
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr

080067a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80067a6:	b480      	push	{r7}
 80067a8:	b085      	sub	sp, #20
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	6078      	str	r0, [r7, #4]
 80067ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80067be:	683a      	ldr	r2, [r7, #0]
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	4313      	orrs	r3, r2
 80067c4:	f043 0307 	orr.w	r3, r3, #7
 80067c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	68fa      	ldr	r2, [r7, #12]
 80067ce:	609a      	str	r2, [r3, #8]
}
 80067d0:	bf00      	nop
 80067d2:	3714      	adds	r7, #20
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr

080067dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80067dc:	b480      	push	{r7}
 80067de:	b087      	sub	sp, #28
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	60f8      	str	r0, [r7, #12]
 80067e4:	60b9      	str	r1, [r7, #8]
 80067e6:	607a      	str	r2, [r7, #4]
 80067e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80067f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	021a      	lsls	r2, r3, #8
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	431a      	orrs	r2, r3
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	4313      	orrs	r3, r2
 8006804:	697a      	ldr	r2, [r7, #20]
 8006806:	4313      	orrs	r3, r2
 8006808:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	697a      	ldr	r2, [r7, #20]
 800680e:	609a      	str	r2, [r3, #8]
}
 8006810:	bf00      	nop
 8006812:	371c      	adds	r7, #28
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr

0800681c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800681c:	b480      	push	{r7}
 800681e:	b085      	sub	sp, #20
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800682c:	2b01      	cmp	r3, #1
 800682e:	d101      	bne.n	8006834 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006830:	2302      	movs	r3, #2
 8006832:	e050      	b.n	80068d6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2201      	movs	r2, #1
 8006838:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2202      	movs	r2, #2
 8006840:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	689b      	ldr	r3, [r3, #8]
 8006852:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800685a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	68fa      	ldr	r2, [r7, #12]
 8006862:	4313      	orrs	r3, r2
 8006864:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	68fa      	ldr	r2, [r7, #12]
 800686c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a1c      	ldr	r2, [pc, #112]	@ (80068e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d018      	beq.n	80068aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006880:	d013      	beq.n	80068aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a18      	ldr	r2, [pc, #96]	@ (80068e8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d00e      	beq.n	80068aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a16      	ldr	r2, [pc, #88]	@ (80068ec <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d009      	beq.n	80068aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a15      	ldr	r2, [pc, #84]	@ (80068f0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d004      	beq.n	80068aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a13      	ldr	r2, [pc, #76]	@ (80068f4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d10c      	bne.n	80068c4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80068b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	68ba      	ldr	r2, [r7, #8]
 80068b8:	4313      	orrs	r3, r2
 80068ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	68ba      	ldr	r2, [r7, #8]
 80068c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2201      	movs	r2, #1
 80068c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2200      	movs	r2, #0
 80068d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80068d4:	2300      	movs	r3, #0
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3714      	adds	r7, #20
 80068da:	46bd      	mov	sp, r7
 80068dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e0:	4770      	bx	lr
 80068e2:	bf00      	nop
 80068e4:	40010000 	.word	0x40010000
 80068e8:	40000400 	.word	0x40000400
 80068ec:	40000800 	.word	0x40000800
 80068f0:	40000c00 	.word	0x40000c00
 80068f4:	40014000 	.word	0x40014000

080068f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b082      	sub	sp, #8
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d101      	bne.n	800690a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006906:	2301      	movs	r3, #1
 8006908:	e042      	b.n	8006990 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006910:	b2db      	uxtb	r3, r3
 8006912:	2b00      	cmp	r3, #0
 8006914:	d106      	bne.n	8006924 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2200      	movs	r2, #0
 800691a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f7fc feec 	bl	80036fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2224      	movs	r2, #36	@ 0x24
 8006928:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	68da      	ldr	r2, [r3, #12]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800693a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f000 f82b 	bl	8006998 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	691a      	ldr	r2, [r3, #16]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006950:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	695a      	ldr	r2, [r3, #20]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006960:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	68da      	ldr	r2, [r3, #12]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006970:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2200      	movs	r2, #0
 8006976:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2220      	movs	r2, #32
 800697c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2220      	movs	r2, #32
 8006984:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2200      	movs	r2, #0
 800698c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800698e:	2300      	movs	r3, #0
}
 8006990:	4618      	mov	r0, r3
 8006992:	3708      	adds	r7, #8
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}

08006998 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006998:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800699c:	b0c0      	sub	sp, #256	@ 0x100
 800699e:	af00      	add	r7, sp, #0
 80069a0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	691b      	ldr	r3, [r3, #16]
 80069ac:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80069b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069b4:	68d9      	ldr	r1, [r3, #12]
 80069b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069ba:	681a      	ldr	r2, [r3, #0]
 80069bc:	ea40 0301 	orr.w	r3, r0, r1
 80069c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80069c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069c6:	689a      	ldr	r2, [r3, #8]
 80069c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069cc:	691b      	ldr	r3, [r3, #16]
 80069ce:	431a      	orrs	r2, r3
 80069d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069d4:	695b      	ldr	r3, [r3, #20]
 80069d6:	431a      	orrs	r2, r3
 80069d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069dc:	69db      	ldr	r3, [r3, #28]
 80069de:	4313      	orrs	r3, r2
 80069e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80069e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	68db      	ldr	r3, [r3, #12]
 80069ec:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80069f0:	f021 010c 	bic.w	r1, r1, #12
 80069f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069f8:	681a      	ldr	r2, [r3, #0]
 80069fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80069fe:	430b      	orrs	r3, r1
 8006a00:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006a02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	695b      	ldr	r3, [r3, #20]
 8006a0a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006a0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a12:	6999      	ldr	r1, [r3, #24]
 8006a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	ea40 0301 	orr.w	r3, r0, r1
 8006a1e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a24:	681a      	ldr	r2, [r3, #0]
 8006a26:	4b8f      	ldr	r3, [pc, #572]	@ (8006c64 <UART_SetConfig+0x2cc>)
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d005      	beq.n	8006a38 <UART_SetConfig+0xa0>
 8006a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	4b8d      	ldr	r3, [pc, #564]	@ (8006c68 <UART_SetConfig+0x2d0>)
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d104      	bne.n	8006a42 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006a38:	f7ff fc4a 	bl	80062d0 <HAL_RCC_GetPCLK2Freq>
 8006a3c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006a40:	e003      	b.n	8006a4a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006a42:	f7ff fc31 	bl	80062a8 <HAL_RCC_GetPCLK1Freq>
 8006a46:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a4e:	69db      	ldr	r3, [r3, #28]
 8006a50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a54:	f040 810c 	bne.w	8006c70 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006a58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006a62:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006a66:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006a6a:	4622      	mov	r2, r4
 8006a6c:	462b      	mov	r3, r5
 8006a6e:	1891      	adds	r1, r2, r2
 8006a70:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006a72:	415b      	adcs	r3, r3
 8006a74:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006a76:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006a7a:	4621      	mov	r1, r4
 8006a7c:	eb12 0801 	adds.w	r8, r2, r1
 8006a80:	4629      	mov	r1, r5
 8006a82:	eb43 0901 	adc.w	r9, r3, r1
 8006a86:	f04f 0200 	mov.w	r2, #0
 8006a8a:	f04f 0300 	mov.w	r3, #0
 8006a8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006a92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006a96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006a9a:	4690      	mov	r8, r2
 8006a9c:	4699      	mov	r9, r3
 8006a9e:	4623      	mov	r3, r4
 8006aa0:	eb18 0303 	adds.w	r3, r8, r3
 8006aa4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006aa8:	462b      	mov	r3, r5
 8006aaa:	eb49 0303 	adc.w	r3, r9, r3
 8006aae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006ab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006abe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006ac2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006ac6:	460b      	mov	r3, r1
 8006ac8:	18db      	adds	r3, r3, r3
 8006aca:	653b      	str	r3, [r7, #80]	@ 0x50
 8006acc:	4613      	mov	r3, r2
 8006ace:	eb42 0303 	adc.w	r3, r2, r3
 8006ad2:	657b      	str	r3, [r7, #84]	@ 0x54
 8006ad4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006ad8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006adc:	f7fa f8bc 	bl	8000c58 <__aeabi_uldivmod>
 8006ae0:	4602      	mov	r2, r0
 8006ae2:	460b      	mov	r3, r1
 8006ae4:	4b61      	ldr	r3, [pc, #388]	@ (8006c6c <UART_SetConfig+0x2d4>)
 8006ae6:	fba3 2302 	umull	r2, r3, r3, r2
 8006aea:	095b      	lsrs	r3, r3, #5
 8006aec:	011c      	lsls	r4, r3, #4
 8006aee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006af2:	2200      	movs	r2, #0
 8006af4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006af8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006afc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006b00:	4642      	mov	r2, r8
 8006b02:	464b      	mov	r3, r9
 8006b04:	1891      	adds	r1, r2, r2
 8006b06:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006b08:	415b      	adcs	r3, r3
 8006b0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b0c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006b10:	4641      	mov	r1, r8
 8006b12:	eb12 0a01 	adds.w	sl, r2, r1
 8006b16:	4649      	mov	r1, r9
 8006b18:	eb43 0b01 	adc.w	fp, r3, r1
 8006b1c:	f04f 0200 	mov.w	r2, #0
 8006b20:	f04f 0300 	mov.w	r3, #0
 8006b24:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006b28:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006b2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b30:	4692      	mov	sl, r2
 8006b32:	469b      	mov	fp, r3
 8006b34:	4643      	mov	r3, r8
 8006b36:	eb1a 0303 	adds.w	r3, sl, r3
 8006b3a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006b3e:	464b      	mov	r3, r9
 8006b40:	eb4b 0303 	adc.w	r3, fp, r3
 8006b44:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006b54:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006b58:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006b5c:	460b      	mov	r3, r1
 8006b5e:	18db      	adds	r3, r3, r3
 8006b60:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b62:	4613      	mov	r3, r2
 8006b64:	eb42 0303 	adc.w	r3, r2, r3
 8006b68:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b6a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006b6e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006b72:	f7fa f871 	bl	8000c58 <__aeabi_uldivmod>
 8006b76:	4602      	mov	r2, r0
 8006b78:	460b      	mov	r3, r1
 8006b7a:	4611      	mov	r1, r2
 8006b7c:	4b3b      	ldr	r3, [pc, #236]	@ (8006c6c <UART_SetConfig+0x2d4>)
 8006b7e:	fba3 2301 	umull	r2, r3, r3, r1
 8006b82:	095b      	lsrs	r3, r3, #5
 8006b84:	2264      	movs	r2, #100	@ 0x64
 8006b86:	fb02 f303 	mul.w	r3, r2, r3
 8006b8a:	1acb      	subs	r3, r1, r3
 8006b8c:	00db      	lsls	r3, r3, #3
 8006b8e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006b92:	4b36      	ldr	r3, [pc, #216]	@ (8006c6c <UART_SetConfig+0x2d4>)
 8006b94:	fba3 2302 	umull	r2, r3, r3, r2
 8006b98:	095b      	lsrs	r3, r3, #5
 8006b9a:	005b      	lsls	r3, r3, #1
 8006b9c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006ba0:	441c      	add	r4, r3
 8006ba2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006bac:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006bb0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006bb4:	4642      	mov	r2, r8
 8006bb6:	464b      	mov	r3, r9
 8006bb8:	1891      	adds	r1, r2, r2
 8006bba:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006bbc:	415b      	adcs	r3, r3
 8006bbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006bc0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006bc4:	4641      	mov	r1, r8
 8006bc6:	1851      	adds	r1, r2, r1
 8006bc8:	6339      	str	r1, [r7, #48]	@ 0x30
 8006bca:	4649      	mov	r1, r9
 8006bcc:	414b      	adcs	r3, r1
 8006bce:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bd0:	f04f 0200 	mov.w	r2, #0
 8006bd4:	f04f 0300 	mov.w	r3, #0
 8006bd8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006bdc:	4659      	mov	r1, fp
 8006bde:	00cb      	lsls	r3, r1, #3
 8006be0:	4651      	mov	r1, sl
 8006be2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006be6:	4651      	mov	r1, sl
 8006be8:	00ca      	lsls	r2, r1, #3
 8006bea:	4610      	mov	r0, r2
 8006bec:	4619      	mov	r1, r3
 8006bee:	4603      	mov	r3, r0
 8006bf0:	4642      	mov	r2, r8
 8006bf2:	189b      	adds	r3, r3, r2
 8006bf4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006bf8:	464b      	mov	r3, r9
 8006bfa:	460a      	mov	r2, r1
 8006bfc:	eb42 0303 	adc.w	r3, r2, r3
 8006c00:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006c10:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006c14:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006c18:	460b      	mov	r3, r1
 8006c1a:	18db      	adds	r3, r3, r3
 8006c1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c1e:	4613      	mov	r3, r2
 8006c20:	eb42 0303 	adc.w	r3, r2, r3
 8006c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006c2a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006c2e:	f7fa f813 	bl	8000c58 <__aeabi_uldivmod>
 8006c32:	4602      	mov	r2, r0
 8006c34:	460b      	mov	r3, r1
 8006c36:	4b0d      	ldr	r3, [pc, #52]	@ (8006c6c <UART_SetConfig+0x2d4>)
 8006c38:	fba3 1302 	umull	r1, r3, r3, r2
 8006c3c:	095b      	lsrs	r3, r3, #5
 8006c3e:	2164      	movs	r1, #100	@ 0x64
 8006c40:	fb01 f303 	mul.w	r3, r1, r3
 8006c44:	1ad3      	subs	r3, r2, r3
 8006c46:	00db      	lsls	r3, r3, #3
 8006c48:	3332      	adds	r3, #50	@ 0x32
 8006c4a:	4a08      	ldr	r2, [pc, #32]	@ (8006c6c <UART_SetConfig+0x2d4>)
 8006c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8006c50:	095b      	lsrs	r3, r3, #5
 8006c52:	f003 0207 	and.w	r2, r3, #7
 8006c56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4422      	add	r2, r4
 8006c5e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006c60:	e106      	b.n	8006e70 <UART_SetConfig+0x4d8>
 8006c62:	bf00      	nop
 8006c64:	40011000 	.word	0x40011000
 8006c68:	40011400 	.word	0x40011400
 8006c6c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006c70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c74:	2200      	movs	r2, #0
 8006c76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006c7a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006c7e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006c82:	4642      	mov	r2, r8
 8006c84:	464b      	mov	r3, r9
 8006c86:	1891      	adds	r1, r2, r2
 8006c88:	6239      	str	r1, [r7, #32]
 8006c8a:	415b      	adcs	r3, r3
 8006c8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006c92:	4641      	mov	r1, r8
 8006c94:	1854      	adds	r4, r2, r1
 8006c96:	4649      	mov	r1, r9
 8006c98:	eb43 0501 	adc.w	r5, r3, r1
 8006c9c:	f04f 0200 	mov.w	r2, #0
 8006ca0:	f04f 0300 	mov.w	r3, #0
 8006ca4:	00eb      	lsls	r3, r5, #3
 8006ca6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006caa:	00e2      	lsls	r2, r4, #3
 8006cac:	4614      	mov	r4, r2
 8006cae:	461d      	mov	r5, r3
 8006cb0:	4643      	mov	r3, r8
 8006cb2:	18e3      	adds	r3, r4, r3
 8006cb4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006cb8:	464b      	mov	r3, r9
 8006cba:	eb45 0303 	adc.w	r3, r5, r3
 8006cbe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006cc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006cce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006cd2:	f04f 0200 	mov.w	r2, #0
 8006cd6:	f04f 0300 	mov.w	r3, #0
 8006cda:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006cde:	4629      	mov	r1, r5
 8006ce0:	008b      	lsls	r3, r1, #2
 8006ce2:	4621      	mov	r1, r4
 8006ce4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ce8:	4621      	mov	r1, r4
 8006cea:	008a      	lsls	r2, r1, #2
 8006cec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006cf0:	f7f9 ffb2 	bl	8000c58 <__aeabi_uldivmod>
 8006cf4:	4602      	mov	r2, r0
 8006cf6:	460b      	mov	r3, r1
 8006cf8:	4b60      	ldr	r3, [pc, #384]	@ (8006e7c <UART_SetConfig+0x4e4>)
 8006cfa:	fba3 2302 	umull	r2, r3, r3, r2
 8006cfe:	095b      	lsrs	r3, r3, #5
 8006d00:	011c      	lsls	r4, r3, #4
 8006d02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d06:	2200      	movs	r2, #0
 8006d08:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006d0c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006d10:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006d14:	4642      	mov	r2, r8
 8006d16:	464b      	mov	r3, r9
 8006d18:	1891      	adds	r1, r2, r2
 8006d1a:	61b9      	str	r1, [r7, #24]
 8006d1c:	415b      	adcs	r3, r3
 8006d1e:	61fb      	str	r3, [r7, #28]
 8006d20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d24:	4641      	mov	r1, r8
 8006d26:	1851      	adds	r1, r2, r1
 8006d28:	6139      	str	r1, [r7, #16]
 8006d2a:	4649      	mov	r1, r9
 8006d2c:	414b      	adcs	r3, r1
 8006d2e:	617b      	str	r3, [r7, #20]
 8006d30:	f04f 0200 	mov.w	r2, #0
 8006d34:	f04f 0300 	mov.w	r3, #0
 8006d38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006d3c:	4659      	mov	r1, fp
 8006d3e:	00cb      	lsls	r3, r1, #3
 8006d40:	4651      	mov	r1, sl
 8006d42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d46:	4651      	mov	r1, sl
 8006d48:	00ca      	lsls	r2, r1, #3
 8006d4a:	4610      	mov	r0, r2
 8006d4c:	4619      	mov	r1, r3
 8006d4e:	4603      	mov	r3, r0
 8006d50:	4642      	mov	r2, r8
 8006d52:	189b      	adds	r3, r3, r2
 8006d54:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006d58:	464b      	mov	r3, r9
 8006d5a:	460a      	mov	r2, r1
 8006d5c:	eb42 0303 	adc.w	r3, r2, r3
 8006d60:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006d6e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006d70:	f04f 0200 	mov.w	r2, #0
 8006d74:	f04f 0300 	mov.w	r3, #0
 8006d78:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006d7c:	4649      	mov	r1, r9
 8006d7e:	008b      	lsls	r3, r1, #2
 8006d80:	4641      	mov	r1, r8
 8006d82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d86:	4641      	mov	r1, r8
 8006d88:	008a      	lsls	r2, r1, #2
 8006d8a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006d8e:	f7f9 ff63 	bl	8000c58 <__aeabi_uldivmod>
 8006d92:	4602      	mov	r2, r0
 8006d94:	460b      	mov	r3, r1
 8006d96:	4611      	mov	r1, r2
 8006d98:	4b38      	ldr	r3, [pc, #224]	@ (8006e7c <UART_SetConfig+0x4e4>)
 8006d9a:	fba3 2301 	umull	r2, r3, r3, r1
 8006d9e:	095b      	lsrs	r3, r3, #5
 8006da0:	2264      	movs	r2, #100	@ 0x64
 8006da2:	fb02 f303 	mul.w	r3, r2, r3
 8006da6:	1acb      	subs	r3, r1, r3
 8006da8:	011b      	lsls	r3, r3, #4
 8006daa:	3332      	adds	r3, #50	@ 0x32
 8006dac:	4a33      	ldr	r2, [pc, #204]	@ (8006e7c <UART_SetConfig+0x4e4>)
 8006dae:	fba2 2303 	umull	r2, r3, r2, r3
 8006db2:	095b      	lsrs	r3, r3, #5
 8006db4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006db8:	441c      	add	r4, r3
 8006dba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	673b      	str	r3, [r7, #112]	@ 0x70
 8006dc2:	677a      	str	r2, [r7, #116]	@ 0x74
 8006dc4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006dc8:	4642      	mov	r2, r8
 8006dca:	464b      	mov	r3, r9
 8006dcc:	1891      	adds	r1, r2, r2
 8006dce:	60b9      	str	r1, [r7, #8]
 8006dd0:	415b      	adcs	r3, r3
 8006dd2:	60fb      	str	r3, [r7, #12]
 8006dd4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006dd8:	4641      	mov	r1, r8
 8006dda:	1851      	adds	r1, r2, r1
 8006ddc:	6039      	str	r1, [r7, #0]
 8006dde:	4649      	mov	r1, r9
 8006de0:	414b      	adcs	r3, r1
 8006de2:	607b      	str	r3, [r7, #4]
 8006de4:	f04f 0200 	mov.w	r2, #0
 8006de8:	f04f 0300 	mov.w	r3, #0
 8006dec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006df0:	4659      	mov	r1, fp
 8006df2:	00cb      	lsls	r3, r1, #3
 8006df4:	4651      	mov	r1, sl
 8006df6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006dfa:	4651      	mov	r1, sl
 8006dfc:	00ca      	lsls	r2, r1, #3
 8006dfe:	4610      	mov	r0, r2
 8006e00:	4619      	mov	r1, r3
 8006e02:	4603      	mov	r3, r0
 8006e04:	4642      	mov	r2, r8
 8006e06:	189b      	adds	r3, r3, r2
 8006e08:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006e0a:	464b      	mov	r3, r9
 8006e0c:	460a      	mov	r2, r1
 8006e0e:	eb42 0303 	adc.w	r3, r2, r3
 8006e12:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	663b      	str	r3, [r7, #96]	@ 0x60
 8006e1e:	667a      	str	r2, [r7, #100]	@ 0x64
 8006e20:	f04f 0200 	mov.w	r2, #0
 8006e24:	f04f 0300 	mov.w	r3, #0
 8006e28:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006e2c:	4649      	mov	r1, r9
 8006e2e:	008b      	lsls	r3, r1, #2
 8006e30:	4641      	mov	r1, r8
 8006e32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e36:	4641      	mov	r1, r8
 8006e38:	008a      	lsls	r2, r1, #2
 8006e3a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006e3e:	f7f9 ff0b 	bl	8000c58 <__aeabi_uldivmod>
 8006e42:	4602      	mov	r2, r0
 8006e44:	460b      	mov	r3, r1
 8006e46:	4b0d      	ldr	r3, [pc, #52]	@ (8006e7c <UART_SetConfig+0x4e4>)
 8006e48:	fba3 1302 	umull	r1, r3, r3, r2
 8006e4c:	095b      	lsrs	r3, r3, #5
 8006e4e:	2164      	movs	r1, #100	@ 0x64
 8006e50:	fb01 f303 	mul.w	r3, r1, r3
 8006e54:	1ad3      	subs	r3, r2, r3
 8006e56:	011b      	lsls	r3, r3, #4
 8006e58:	3332      	adds	r3, #50	@ 0x32
 8006e5a:	4a08      	ldr	r2, [pc, #32]	@ (8006e7c <UART_SetConfig+0x4e4>)
 8006e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8006e60:	095b      	lsrs	r3, r3, #5
 8006e62:	f003 020f 	and.w	r2, r3, #15
 8006e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4422      	add	r2, r4
 8006e6e:	609a      	str	r2, [r3, #8]
}
 8006e70:	bf00      	nop
 8006e72:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006e76:	46bd      	mov	sp, r7
 8006e78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e7c:	51eb851f 	.word	0x51eb851f

08006e80 <__cvt>:
 8006e80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e84:	ec57 6b10 	vmov	r6, r7, d0
 8006e88:	2f00      	cmp	r7, #0
 8006e8a:	460c      	mov	r4, r1
 8006e8c:	4619      	mov	r1, r3
 8006e8e:	463b      	mov	r3, r7
 8006e90:	bfbb      	ittet	lt
 8006e92:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006e96:	461f      	movlt	r7, r3
 8006e98:	2300      	movge	r3, #0
 8006e9a:	232d      	movlt	r3, #45	@ 0x2d
 8006e9c:	700b      	strb	r3, [r1, #0]
 8006e9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006ea0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006ea4:	4691      	mov	r9, r2
 8006ea6:	f023 0820 	bic.w	r8, r3, #32
 8006eaa:	bfbc      	itt	lt
 8006eac:	4632      	movlt	r2, r6
 8006eae:	4616      	movlt	r6, r2
 8006eb0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006eb4:	d005      	beq.n	8006ec2 <__cvt+0x42>
 8006eb6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006eba:	d100      	bne.n	8006ebe <__cvt+0x3e>
 8006ebc:	3401      	adds	r4, #1
 8006ebe:	2102      	movs	r1, #2
 8006ec0:	e000      	b.n	8006ec4 <__cvt+0x44>
 8006ec2:	2103      	movs	r1, #3
 8006ec4:	ab03      	add	r3, sp, #12
 8006ec6:	9301      	str	r3, [sp, #4]
 8006ec8:	ab02      	add	r3, sp, #8
 8006eca:	9300      	str	r3, [sp, #0]
 8006ecc:	ec47 6b10 	vmov	d0, r6, r7
 8006ed0:	4653      	mov	r3, sl
 8006ed2:	4622      	mov	r2, r4
 8006ed4:	f000 fe78 	bl	8007bc8 <_dtoa_r>
 8006ed8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006edc:	4605      	mov	r5, r0
 8006ede:	d119      	bne.n	8006f14 <__cvt+0x94>
 8006ee0:	f019 0f01 	tst.w	r9, #1
 8006ee4:	d00e      	beq.n	8006f04 <__cvt+0x84>
 8006ee6:	eb00 0904 	add.w	r9, r0, r4
 8006eea:	2200      	movs	r2, #0
 8006eec:	2300      	movs	r3, #0
 8006eee:	4630      	mov	r0, r6
 8006ef0:	4639      	mov	r1, r7
 8006ef2:	f7f9 fdf1 	bl	8000ad8 <__aeabi_dcmpeq>
 8006ef6:	b108      	cbz	r0, 8006efc <__cvt+0x7c>
 8006ef8:	f8cd 900c 	str.w	r9, [sp, #12]
 8006efc:	2230      	movs	r2, #48	@ 0x30
 8006efe:	9b03      	ldr	r3, [sp, #12]
 8006f00:	454b      	cmp	r3, r9
 8006f02:	d31e      	bcc.n	8006f42 <__cvt+0xc2>
 8006f04:	9b03      	ldr	r3, [sp, #12]
 8006f06:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006f08:	1b5b      	subs	r3, r3, r5
 8006f0a:	4628      	mov	r0, r5
 8006f0c:	6013      	str	r3, [r2, #0]
 8006f0e:	b004      	add	sp, #16
 8006f10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f14:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006f18:	eb00 0904 	add.w	r9, r0, r4
 8006f1c:	d1e5      	bne.n	8006eea <__cvt+0x6a>
 8006f1e:	7803      	ldrb	r3, [r0, #0]
 8006f20:	2b30      	cmp	r3, #48	@ 0x30
 8006f22:	d10a      	bne.n	8006f3a <__cvt+0xba>
 8006f24:	2200      	movs	r2, #0
 8006f26:	2300      	movs	r3, #0
 8006f28:	4630      	mov	r0, r6
 8006f2a:	4639      	mov	r1, r7
 8006f2c:	f7f9 fdd4 	bl	8000ad8 <__aeabi_dcmpeq>
 8006f30:	b918      	cbnz	r0, 8006f3a <__cvt+0xba>
 8006f32:	f1c4 0401 	rsb	r4, r4, #1
 8006f36:	f8ca 4000 	str.w	r4, [sl]
 8006f3a:	f8da 3000 	ldr.w	r3, [sl]
 8006f3e:	4499      	add	r9, r3
 8006f40:	e7d3      	b.n	8006eea <__cvt+0x6a>
 8006f42:	1c59      	adds	r1, r3, #1
 8006f44:	9103      	str	r1, [sp, #12]
 8006f46:	701a      	strb	r2, [r3, #0]
 8006f48:	e7d9      	b.n	8006efe <__cvt+0x7e>

08006f4a <__exponent>:
 8006f4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f4c:	2900      	cmp	r1, #0
 8006f4e:	bfba      	itte	lt
 8006f50:	4249      	neglt	r1, r1
 8006f52:	232d      	movlt	r3, #45	@ 0x2d
 8006f54:	232b      	movge	r3, #43	@ 0x2b
 8006f56:	2909      	cmp	r1, #9
 8006f58:	7002      	strb	r2, [r0, #0]
 8006f5a:	7043      	strb	r3, [r0, #1]
 8006f5c:	dd29      	ble.n	8006fb2 <__exponent+0x68>
 8006f5e:	f10d 0307 	add.w	r3, sp, #7
 8006f62:	461d      	mov	r5, r3
 8006f64:	270a      	movs	r7, #10
 8006f66:	461a      	mov	r2, r3
 8006f68:	fbb1 f6f7 	udiv	r6, r1, r7
 8006f6c:	fb07 1416 	mls	r4, r7, r6, r1
 8006f70:	3430      	adds	r4, #48	@ 0x30
 8006f72:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006f76:	460c      	mov	r4, r1
 8006f78:	2c63      	cmp	r4, #99	@ 0x63
 8006f7a:	f103 33ff 	add.w	r3, r3, #4294967295
 8006f7e:	4631      	mov	r1, r6
 8006f80:	dcf1      	bgt.n	8006f66 <__exponent+0x1c>
 8006f82:	3130      	adds	r1, #48	@ 0x30
 8006f84:	1e94      	subs	r4, r2, #2
 8006f86:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006f8a:	1c41      	adds	r1, r0, #1
 8006f8c:	4623      	mov	r3, r4
 8006f8e:	42ab      	cmp	r3, r5
 8006f90:	d30a      	bcc.n	8006fa8 <__exponent+0x5e>
 8006f92:	f10d 0309 	add.w	r3, sp, #9
 8006f96:	1a9b      	subs	r3, r3, r2
 8006f98:	42ac      	cmp	r4, r5
 8006f9a:	bf88      	it	hi
 8006f9c:	2300      	movhi	r3, #0
 8006f9e:	3302      	adds	r3, #2
 8006fa0:	4403      	add	r3, r0
 8006fa2:	1a18      	subs	r0, r3, r0
 8006fa4:	b003      	add	sp, #12
 8006fa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fa8:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006fac:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006fb0:	e7ed      	b.n	8006f8e <__exponent+0x44>
 8006fb2:	2330      	movs	r3, #48	@ 0x30
 8006fb4:	3130      	adds	r1, #48	@ 0x30
 8006fb6:	7083      	strb	r3, [r0, #2]
 8006fb8:	70c1      	strb	r1, [r0, #3]
 8006fba:	1d03      	adds	r3, r0, #4
 8006fbc:	e7f1      	b.n	8006fa2 <__exponent+0x58>
	...

08006fc0 <_printf_float>:
 8006fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fc4:	b08d      	sub	sp, #52	@ 0x34
 8006fc6:	460c      	mov	r4, r1
 8006fc8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006fcc:	4616      	mov	r6, r2
 8006fce:	461f      	mov	r7, r3
 8006fd0:	4605      	mov	r5, r0
 8006fd2:	f000 fceb 	bl	80079ac <_localeconv_r>
 8006fd6:	6803      	ldr	r3, [r0, #0]
 8006fd8:	9304      	str	r3, [sp, #16]
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f7f9 f950 	bl	8000280 <strlen>
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	930a      	str	r3, [sp, #40]	@ 0x28
 8006fe4:	f8d8 3000 	ldr.w	r3, [r8]
 8006fe8:	9005      	str	r0, [sp, #20]
 8006fea:	3307      	adds	r3, #7
 8006fec:	f023 0307 	bic.w	r3, r3, #7
 8006ff0:	f103 0208 	add.w	r2, r3, #8
 8006ff4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006ff8:	f8d4 b000 	ldr.w	fp, [r4]
 8006ffc:	f8c8 2000 	str.w	r2, [r8]
 8007000:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007004:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007008:	9307      	str	r3, [sp, #28]
 800700a:	f8cd 8018 	str.w	r8, [sp, #24]
 800700e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007012:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007016:	4b9c      	ldr	r3, [pc, #624]	@ (8007288 <_printf_float+0x2c8>)
 8007018:	f04f 32ff 	mov.w	r2, #4294967295
 800701c:	f7f9 fd8e 	bl	8000b3c <__aeabi_dcmpun>
 8007020:	bb70      	cbnz	r0, 8007080 <_printf_float+0xc0>
 8007022:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007026:	4b98      	ldr	r3, [pc, #608]	@ (8007288 <_printf_float+0x2c8>)
 8007028:	f04f 32ff 	mov.w	r2, #4294967295
 800702c:	f7f9 fd68 	bl	8000b00 <__aeabi_dcmple>
 8007030:	bb30      	cbnz	r0, 8007080 <_printf_float+0xc0>
 8007032:	2200      	movs	r2, #0
 8007034:	2300      	movs	r3, #0
 8007036:	4640      	mov	r0, r8
 8007038:	4649      	mov	r1, r9
 800703a:	f7f9 fd57 	bl	8000aec <__aeabi_dcmplt>
 800703e:	b110      	cbz	r0, 8007046 <_printf_float+0x86>
 8007040:	232d      	movs	r3, #45	@ 0x2d
 8007042:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007046:	4a91      	ldr	r2, [pc, #580]	@ (800728c <_printf_float+0x2cc>)
 8007048:	4b91      	ldr	r3, [pc, #580]	@ (8007290 <_printf_float+0x2d0>)
 800704a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800704e:	bf8c      	ite	hi
 8007050:	4690      	movhi	r8, r2
 8007052:	4698      	movls	r8, r3
 8007054:	2303      	movs	r3, #3
 8007056:	6123      	str	r3, [r4, #16]
 8007058:	f02b 0304 	bic.w	r3, fp, #4
 800705c:	6023      	str	r3, [r4, #0]
 800705e:	f04f 0900 	mov.w	r9, #0
 8007062:	9700      	str	r7, [sp, #0]
 8007064:	4633      	mov	r3, r6
 8007066:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007068:	4621      	mov	r1, r4
 800706a:	4628      	mov	r0, r5
 800706c:	f000 f9d2 	bl	8007414 <_printf_common>
 8007070:	3001      	adds	r0, #1
 8007072:	f040 808d 	bne.w	8007190 <_printf_float+0x1d0>
 8007076:	f04f 30ff 	mov.w	r0, #4294967295
 800707a:	b00d      	add	sp, #52	@ 0x34
 800707c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007080:	4642      	mov	r2, r8
 8007082:	464b      	mov	r3, r9
 8007084:	4640      	mov	r0, r8
 8007086:	4649      	mov	r1, r9
 8007088:	f7f9 fd58 	bl	8000b3c <__aeabi_dcmpun>
 800708c:	b140      	cbz	r0, 80070a0 <_printf_float+0xe0>
 800708e:	464b      	mov	r3, r9
 8007090:	2b00      	cmp	r3, #0
 8007092:	bfbc      	itt	lt
 8007094:	232d      	movlt	r3, #45	@ 0x2d
 8007096:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800709a:	4a7e      	ldr	r2, [pc, #504]	@ (8007294 <_printf_float+0x2d4>)
 800709c:	4b7e      	ldr	r3, [pc, #504]	@ (8007298 <_printf_float+0x2d8>)
 800709e:	e7d4      	b.n	800704a <_printf_float+0x8a>
 80070a0:	6863      	ldr	r3, [r4, #4]
 80070a2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80070a6:	9206      	str	r2, [sp, #24]
 80070a8:	1c5a      	adds	r2, r3, #1
 80070aa:	d13b      	bne.n	8007124 <_printf_float+0x164>
 80070ac:	2306      	movs	r3, #6
 80070ae:	6063      	str	r3, [r4, #4]
 80070b0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80070b4:	2300      	movs	r3, #0
 80070b6:	6022      	str	r2, [r4, #0]
 80070b8:	9303      	str	r3, [sp, #12]
 80070ba:	ab0a      	add	r3, sp, #40	@ 0x28
 80070bc:	e9cd a301 	strd	sl, r3, [sp, #4]
 80070c0:	ab09      	add	r3, sp, #36	@ 0x24
 80070c2:	9300      	str	r3, [sp, #0]
 80070c4:	6861      	ldr	r1, [r4, #4]
 80070c6:	ec49 8b10 	vmov	d0, r8, r9
 80070ca:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80070ce:	4628      	mov	r0, r5
 80070d0:	f7ff fed6 	bl	8006e80 <__cvt>
 80070d4:	9b06      	ldr	r3, [sp, #24]
 80070d6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80070d8:	2b47      	cmp	r3, #71	@ 0x47
 80070da:	4680      	mov	r8, r0
 80070dc:	d129      	bne.n	8007132 <_printf_float+0x172>
 80070de:	1cc8      	adds	r0, r1, #3
 80070e0:	db02      	blt.n	80070e8 <_printf_float+0x128>
 80070e2:	6863      	ldr	r3, [r4, #4]
 80070e4:	4299      	cmp	r1, r3
 80070e6:	dd41      	ble.n	800716c <_printf_float+0x1ac>
 80070e8:	f1aa 0a02 	sub.w	sl, sl, #2
 80070ec:	fa5f fa8a 	uxtb.w	sl, sl
 80070f0:	3901      	subs	r1, #1
 80070f2:	4652      	mov	r2, sl
 80070f4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80070f8:	9109      	str	r1, [sp, #36]	@ 0x24
 80070fa:	f7ff ff26 	bl	8006f4a <__exponent>
 80070fe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007100:	1813      	adds	r3, r2, r0
 8007102:	2a01      	cmp	r2, #1
 8007104:	4681      	mov	r9, r0
 8007106:	6123      	str	r3, [r4, #16]
 8007108:	dc02      	bgt.n	8007110 <_printf_float+0x150>
 800710a:	6822      	ldr	r2, [r4, #0]
 800710c:	07d2      	lsls	r2, r2, #31
 800710e:	d501      	bpl.n	8007114 <_printf_float+0x154>
 8007110:	3301      	adds	r3, #1
 8007112:	6123      	str	r3, [r4, #16]
 8007114:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007118:	2b00      	cmp	r3, #0
 800711a:	d0a2      	beq.n	8007062 <_printf_float+0xa2>
 800711c:	232d      	movs	r3, #45	@ 0x2d
 800711e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007122:	e79e      	b.n	8007062 <_printf_float+0xa2>
 8007124:	9a06      	ldr	r2, [sp, #24]
 8007126:	2a47      	cmp	r2, #71	@ 0x47
 8007128:	d1c2      	bne.n	80070b0 <_printf_float+0xf0>
 800712a:	2b00      	cmp	r3, #0
 800712c:	d1c0      	bne.n	80070b0 <_printf_float+0xf0>
 800712e:	2301      	movs	r3, #1
 8007130:	e7bd      	b.n	80070ae <_printf_float+0xee>
 8007132:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007136:	d9db      	bls.n	80070f0 <_printf_float+0x130>
 8007138:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800713c:	d118      	bne.n	8007170 <_printf_float+0x1b0>
 800713e:	2900      	cmp	r1, #0
 8007140:	6863      	ldr	r3, [r4, #4]
 8007142:	dd0b      	ble.n	800715c <_printf_float+0x19c>
 8007144:	6121      	str	r1, [r4, #16]
 8007146:	b913      	cbnz	r3, 800714e <_printf_float+0x18e>
 8007148:	6822      	ldr	r2, [r4, #0]
 800714a:	07d0      	lsls	r0, r2, #31
 800714c:	d502      	bpl.n	8007154 <_printf_float+0x194>
 800714e:	3301      	adds	r3, #1
 8007150:	440b      	add	r3, r1
 8007152:	6123      	str	r3, [r4, #16]
 8007154:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007156:	f04f 0900 	mov.w	r9, #0
 800715a:	e7db      	b.n	8007114 <_printf_float+0x154>
 800715c:	b913      	cbnz	r3, 8007164 <_printf_float+0x1a4>
 800715e:	6822      	ldr	r2, [r4, #0]
 8007160:	07d2      	lsls	r2, r2, #31
 8007162:	d501      	bpl.n	8007168 <_printf_float+0x1a8>
 8007164:	3302      	adds	r3, #2
 8007166:	e7f4      	b.n	8007152 <_printf_float+0x192>
 8007168:	2301      	movs	r3, #1
 800716a:	e7f2      	b.n	8007152 <_printf_float+0x192>
 800716c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007170:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007172:	4299      	cmp	r1, r3
 8007174:	db05      	blt.n	8007182 <_printf_float+0x1c2>
 8007176:	6823      	ldr	r3, [r4, #0]
 8007178:	6121      	str	r1, [r4, #16]
 800717a:	07d8      	lsls	r0, r3, #31
 800717c:	d5ea      	bpl.n	8007154 <_printf_float+0x194>
 800717e:	1c4b      	adds	r3, r1, #1
 8007180:	e7e7      	b.n	8007152 <_printf_float+0x192>
 8007182:	2900      	cmp	r1, #0
 8007184:	bfd4      	ite	le
 8007186:	f1c1 0202 	rsble	r2, r1, #2
 800718a:	2201      	movgt	r2, #1
 800718c:	4413      	add	r3, r2
 800718e:	e7e0      	b.n	8007152 <_printf_float+0x192>
 8007190:	6823      	ldr	r3, [r4, #0]
 8007192:	055a      	lsls	r2, r3, #21
 8007194:	d407      	bmi.n	80071a6 <_printf_float+0x1e6>
 8007196:	6923      	ldr	r3, [r4, #16]
 8007198:	4642      	mov	r2, r8
 800719a:	4631      	mov	r1, r6
 800719c:	4628      	mov	r0, r5
 800719e:	47b8      	blx	r7
 80071a0:	3001      	adds	r0, #1
 80071a2:	d12b      	bne.n	80071fc <_printf_float+0x23c>
 80071a4:	e767      	b.n	8007076 <_printf_float+0xb6>
 80071a6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80071aa:	f240 80dd 	bls.w	8007368 <_printf_float+0x3a8>
 80071ae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80071b2:	2200      	movs	r2, #0
 80071b4:	2300      	movs	r3, #0
 80071b6:	f7f9 fc8f 	bl	8000ad8 <__aeabi_dcmpeq>
 80071ba:	2800      	cmp	r0, #0
 80071bc:	d033      	beq.n	8007226 <_printf_float+0x266>
 80071be:	4a37      	ldr	r2, [pc, #220]	@ (800729c <_printf_float+0x2dc>)
 80071c0:	2301      	movs	r3, #1
 80071c2:	4631      	mov	r1, r6
 80071c4:	4628      	mov	r0, r5
 80071c6:	47b8      	blx	r7
 80071c8:	3001      	adds	r0, #1
 80071ca:	f43f af54 	beq.w	8007076 <_printf_float+0xb6>
 80071ce:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80071d2:	4543      	cmp	r3, r8
 80071d4:	db02      	blt.n	80071dc <_printf_float+0x21c>
 80071d6:	6823      	ldr	r3, [r4, #0]
 80071d8:	07d8      	lsls	r0, r3, #31
 80071da:	d50f      	bpl.n	80071fc <_printf_float+0x23c>
 80071dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80071e0:	4631      	mov	r1, r6
 80071e2:	4628      	mov	r0, r5
 80071e4:	47b8      	blx	r7
 80071e6:	3001      	adds	r0, #1
 80071e8:	f43f af45 	beq.w	8007076 <_printf_float+0xb6>
 80071ec:	f04f 0900 	mov.w	r9, #0
 80071f0:	f108 38ff 	add.w	r8, r8, #4294967295
 80071f4:	f104 0a1a 	add.w	sl, r4, #26
 80071f8:	45c8      	cmp	r8, r9
 80071fa:	dc09      	bgt.n	8007210 <_printf_float+0x250>
 80071fc:	6823      	ldr	r3, [r4, #0]
 80071fe:	079b      	lsls	r3, r3, #30
 8007200:	f100 8103 	bmi.w	800740a <_printf_float+0x44a>
 8007204:	68e0      	ldr	r0, [r4, #12]
 8007206:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007208:	4298      	cmp	r0, r3
 800720a:	bfb8      	it	lt
 800720c:	4618      	movlt	r0, r3
 800720e:	e734      	b.n	800707a <_printf_float+0xba>
 8007210:	2301      	movs	r3, #1
 8007212:	4652      	mov	r2, sl
 8007214:	4631      	mov	r1, r6
 8007216:	4628      	mov	r0, r5
 8007218:	47b8      	blx	r7
 800721a:	3001      	adds	r0, #1
 800721c:	f43f af2b 	beq.w	8007076 <_printf_float+0xb6>
 8007220:	f109 0901 	add.w	r9, r9, #1
 8007224:	e7e8      	b.n	80071f8 <_printf_float+0x238>
 8007226:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007228:	2b00      	cmp	r3, #0
 800722a:	dc39      	bgt.n	80072a0 <_printf_float+0x2e0>
 800722c:	4a1b      	ldr	r2, [pc, #108]	@ (800729c <_printf_float+0x2dc>)
 800722e:	2301      	movs	r3, #1
 8007230:	4631      	mov	r1, r6
 8007232:	4628      	mov	r0, r5
 8007234:	47b8      	blx	r7
 8007236:	3001      	adds	r0, #1
 8007238:	f43f af1d 	beq.w	8007076 <_printf_float+0xb6>
 800723c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007240:	ea59 0303 	orrs.w	r3, r9, r3
 8007244:	d102      	bne.n	800724c <_printf_float+0x28c>
 8007246:	6823      	ldr	r3, [r4, #0]
 8007248:	07d9      	lsls	r1, r3, #31
 800724a:	d5d7      	bpl.n	80071fc <_printf_float+0x23c>
 800724c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007250:	4631      	mov	r1, r6
 8007252:	4628      	mov	r0, r5
 8007254:	47b8      	blx	r7
 8007256:	3001      	adds	r0, #1
 8007258:	f43f af0d 	beq.w	8007076 <_printf_float+0xb6>
 800725c:	f04f 0a00 	mov.w	sl, #0
 8007260:	f104 0b1a 	add.w	fp, r4, #26
 8007264:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007266:	425b      	negs	r3, r3
 8007268:	4553      	cmp	r3, sl
 800726a:	dc01      	bgt.n	8007270 <_printf_float+0x2b0>
 800726c:	464b      	mov	r3, r9
 800726e:	e793      	b.n	8007198 <_printf_float+0x1d8>
 8007270:	2301      	movs	r3, #1
 8007272:	465a      	mov	r2, fp
 8007274:	4631      	mov	r1, r6
 8007276:	4628      	mov	r0, r5
 8007278:	47b8      	blx	r7
 800727a:	3001      	adds	r0, #1
 800727c:	f43f aefb 	beq.w	8007076 <_printf_float+0xb6>
 8007280:	f10a 0a01 	add.w	sl, sl, #1
 8007284:	e7ee      	b.n	8007264 <_printf_float+0x2a4>
 8007286:	bf00      	nop
 8007288:	7fefffff 	.word	0x7fefffff
 800728c:	0800a6c0 	.word	0x0800a6c0
 8007290:	0800a6bc 	.word	0x0800a6bc
 8007294:	0800a6c8 	.word	0x0800a6c8
 8007298:	0800a6c4 	.word	0x0800a6c4
 800729c:	0800a6cc 	.word	0x0800a6cc
 80072a0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80072a2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80072a6:	4553      	cmp	r3, sl
 80072a8:	bfa8      	it	ge
 80072aa:	4653      	movge	r3, sl
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	4699      	mov	r9, r3
 80072b0:	dc36      	bgt.n	8007320 <_printf_float+0x360>
 80072b2:	f04f 0b00 	mov.w	fp, #0
 80072b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80072ba:	f104 021a 	add.w	r2, r4, #26
 80072be:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80072c0:	9306      	str	r3, [sp, #24]
 80072c2:	eba3 0309 	sub.w	r3, r3, r9
 80072c6:	455b      	cmp	r3, fp
 80072c8:	dc31      	bgt.n	800732e <_printf_float+0x36e>
 80072ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072cc:	459a      	cmp	sl, r3
 80072ce:	dc3a      	bgt.n	8007346 <_printf_float+0x386>
 80072d0:	6823      	ldr	r3, [r4, #0]
 80072d2:	07da      	lsls	r2, r3, #31
 80072d4:	d437      	bmi.n	8007346 <_printf_float+0x386>
 80072d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072d8:	ebaa 0903 	sub.w	r9, sl, r3
 80072dc:	9b06      	ldr	r3, [sp, #24]
 80072de:	ebaa 0303 	sub.w	r3, sl, r3
 80072e2:	4599      	cmp	r9, r3
 80072e4:	bfa8      	it	ge
 80072e6:	4699      	movge	r9, r3
 80072e8:	f1b9 0f00 	cmp.w	r9, #0
 80072ec:	dc33      	bgt.n	8007356 <_printf_float+0x396>
 80072ee:	f04f 0800 	mov.w	r8, #0
 80072f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80072f6:	f104 0b1a 	add.w	fp, r4, #26
 80072fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072fc:	ebaa 0303 	sub.w	r3, sl, r3
 8007300:	eba3 0309 	sub.w	r3, r3, r9
 8007304:	4543      	cmp	r3, r8
 8007306:	f77f af79 	ble.w	80071fc <_printf_float+0x23c>
 800730a:	2301      	movs	r3, #1
 800730c:	465a      	mov	r2, fp
 800730e:	4631      	mov	r1, r6
 8007310:	4628      	mov	r0, r5
 8007312:	47b8      	blx	r7
 8007314:	3001      	adds	r0, #1
 8007316:	f43f aeae 	beq.w	8007076 <_printf_float+0xb6>
 800731a:	f108 0801 	add.w	r8, r8, #1
 800731e:	e7ec      	b.n	80072fa <_printf_float+0x33a>
 8007320:	4642      	mov	r2, r8
 8007322:	4631      	mov	r1, r6
 8007324:	4628      	mov	r0, r5
 8007326:	47b8      	blx	r7
 8007328:	3001      	adds	r0, #1
 800732a:	d1c2      	bne.n	80072b2 <_printf_float+0x2f2>
 800732c:	e6a3      	b.n	8007076 <_printf_float+0xb6>
 800732e:	2301      	movs	r3, #1
 8007330:	4631      	mov	r1, r6
 8007332:	4628      	mov	r0, r5
 8007334:	9206      	str	r2, [sp, #24]
 8007336:	47b8      	blx	r7
 8007338:	3001      	adds	r0, #1
 800733a:	f43f ae9c 	beq.w	8007076 <_printf_float+0xb6>
 800733e:	9a06      	ldr	r2, [sp, #24]
 8007340:	f10b 0b01 	add.w	fp, fp, #1
 8007344:	e7bb      	b.n	80072be <_printf_float+0x2fe>
 8007346:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800734a:	4631      	mov	r1, r6
 800734c:	4628      	mov	r0, r5
 800734e:	47b8      	blx	r7
 8007350:	3001      	adds	r0, #1
 8007352:	d1c0      	bne.n	80072d6 <_printf_float+0x316>
 8007354:	e68f      	b.n	8007076 <_printf_float+0xb6>
 8007356:	9a06      	ldr	r2, [sp, #24]
 8007358:	464b      	mov	r3, r9
 800735a:	4442      	add	r2, r8
 800735c:	4631      	mov	r1, r6
 800735e:	4628      	mov	r0, r5
 8007360:	47b8      	blx	r7
 8007362:	3001      	adds	r0, #1
 8007364:	d1c3      	bne.n	80072ee <_printf_float+0x32e>
 8007366:	e686      	b.n	8007076 <_printf_float+0xb6>
 8007368:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800736c:	f1ba 0f01 	cmp.w	sl, #1
 8007370:	dc01      	bgt.n	8007376 <_printf_float+0x3b6>
 8007372:	07db      	lsls	r3, r3, #31
 8007374:	d536      	bpl.n	80073e4 <_printf_float+0x424>
 8007376:	2301      	movs	r3, #1
 8007378:	4642      	mov	r2, r8
 800737a:	4631      	mov	r1, r6
 800737c:	4628      	mov	r0, r5
 800737e:	47b8      	blx	r7
 8007380:	3001      	adds	r0, #1
 8007382:	f43f ae78 	beq.w	8007076 <_printf_float+0xb6>
 8007386:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800738a:	4631      	mov	r1, r6
 800738c:	4628      	mov	r0, r5
 800738e:	47b8      	blx	r7
 8007390:	3001      	adds	r0, #1
 8007392:	f43f ae70 	beq.w	8007076 <_printf_float+0xb6>
 8007396:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800739a:	2200      	movs	r2, #0
 800739c:	2300      	movs	r3, #0
 800739e:	f10a 3aff 	add.w	sl, sl, #4294967295
 80073a2:	f7f9 fb99 	bl	8000ad8 <__aeabi_dcmpeq>
 80073a6:	b9c0      	cbnz	r0, 80073da <_printf_float+0x41a>
 80073a8:	4653      	mov	r3, sl
 80073aa:	f108 0201 	add.w	r2, r8, #1
 80073ae:	4631      	mov	r1, r6
 80073b0:	4628      	mov	r0, r5
 80073b2:	47b8      	blx	r7
 80073b4:	3001      	adds	r0, #1
 80073b6:	d10c      	bne.n	80073d2 <_printf_float+0x412>
 80073b8:	e65d      	b.n	8007076 <_printf_float+0xb6>
 80073ba:	2301      	movs	r3, #1
 80073bc:	465a      	mov	r2, fp
 80073be:	4631      	mov	r1, r6
 80073c0:	4628      	mov	r0, r5
 80073c2:	47b8      	blx	r7
 80073c4:	3001      	adds	r0, #1
 80073c6:	f43f ae56 	beq.w	8007076 <_printf_float+0xb6>
 80073ca:	f108 0801 	add.w	r8, r8, #1
 80073ce:	45d0      	cmp	r8, sl
 80073d0:	dbf3      	blt.n	80073ba <_printf_float+0x3fa>
 80073d2:	464b      	mov	r3, r9
 80073d4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80073d8:	e6df      	b.n	800719a <_printf_float+0x1da>
 80073da:	f04f 0800 	mov.w	r8, #0
 80073de:	f104 0b1a 	add.w	fp, r4, #26
 80073e2:	e7f4      	b.n	80073ce <_printf_float+0x40e>
 80073e4:	2301      	movs	r3, #1
 80073e6:	4642      	mov	r2, r8
 80073e8:	e7e1      	b.n	80073ae <_printf_float+0x3ee>
 80073ea:	2301      	movs	r3, #1
 80073ec:	464a      	mov	r2, r9
 80073ee:	4631      	mov	r1, r6
 80073f0:	4628      	mov	r0, r5
 80073f2:	47b8      	blx	r7
 80073f4:	3001      	adds	r0, #1
 80073f6:	f43f ae3e 	beq.w	8007076 <_printf_float+0xb6>
 80073fa:	f108 0801 	add.w	r8, r8, #1
 80073fe:	68e3      	ldr	r3, [r4, #12]
 8007400:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007402:	1a5b      	subs	r3, r3, r1
 8007404:	4543      	cmp	r3, r8
 8007406:	dcf0      	bgt.n	80073ea <_printf_float+0x42a>
 8007408:	e6fc      	b.n	8007204 <_printf_float+0x244>
 800740a:	f04f 0800 	mov.w	r8, #0
 800740e:	f104 0919 	add.w	r9, r4, #25
 8007412:	e7f4      	b.n	80073fe <_printf_float+0x43e>

08007414 <_printf_common>:
 8007414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007418:	4616      	mov	r6, r2
 800741a:	4698      	mov	r8, r3
 800741c:	688a      	ldr	r2, [r1, #8]
 800741e:	690b      	ldr	r3, [r1, #16]
 8007420:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007424:	4293      	cmp	r3, r2
 8007426:	bfb8      	it	lt
 8007428:	4613      	movlt	r3, r2
 800742a:	6033      	str	r3, [r6, #0]
 800742c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007430:	4607      	mov	r7, r0
 8007432:	460c      	mov	r4, r1
 8007434:	b10a      	cbz	r2, 800743a <_printf_common+0x26>
 8007436:	3301      	adds	r3, #1
 8007438:	6033      	str	r3, [r6, #0]
 800743a:	6823      	ldr	r3, [r4, #0]
 800743c:	0699      	lsls	r1, r3, #26
 800743e:	bf42      	ittt	mi
 8007440:	6833      	ldrmi	r3, [r6, #0]
 8007442:	3302      	addmi	r3, #2
 8007444:	6033      	strmi	r3, [r6, #0]
 8007446:	6825      	ldr	r5, [r4, #0]
 8007448:	f015 0506 	ands.w	r5, r5, #6
 800744c:	d106      	bne.n	800745c <_printf_common+0x48>
 800744e:	f104 0a19 	add.w	sl, r4, #25
 8007452:	68e3      	ldr	r3, [r4, #12]
 8007454:	6832      	ldr	r2, [r6, #0]
 8007456:	1a9b      	subs	r3, r3, r2
 8007458:	42ab      	cmp	r3, r5
 800745a:	dc26      	bgt.n	80074aa <_printf_common+0x96>
 800745c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007460:	6822      	ldr	r2, [r4, #0]
 8007462:	3b00      	subs	r3, #0
 8007464:	bf18      	it	ne
 8007466:	2301      	movne	r3, #1
 8007468:	0692      	lsls	r2, r2, #26
 800746a:	d42b      	bmi.n	80074c4 <_printf_common+0xb0>
 800746c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007470:	4641      	mov	r1, r8
 8007472:	4638      	mov	r0, r7
 8007474:	47c8      	blx	r9
 8007476:	3001      	adds	r0, #1
 8007478:	d01e      	beq.n	80074b8 <_printf_common+0xa4>
 800747a:	6823      	ldr	r3, [r4, #0]
 800747c:	6922      	ldr	r2, [r4, #16]
 800747e:	f003 0306 	and.w	r3, r3, #6
 8007482:	2b04      	cmp	r3, #4
 8007484:	bf02      	ittt	eq
 8007486:	68e5      	ldreq	r5, [r4, #12]
 8007488:	6833      	ldreq	r3, [r6, #0]
 800748a:	1aed      	subeq	r5, r5, r3
 800748c:	68a3      	ldr	r3, [r4, #8]
 800748e:	bf0c      	ite	eq
 8007490:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007494:	2500      	movne	r5, #0
 8007496:	4293      	cmp	r3, r2
 8007498:	bfc4      	itt	gt
 800749a:	1a9b      	subgt	r3, r3, r2
 800749c:	18ed      	addgt	r5, r5, r3
 800749e:	2600      	movs	r6, #0
 80074a0:	341a      	adds	r4, #26
 80074a2:	42b5      	cmp	r5, r6
 80074a4:	d11a      	bne.n	80074dc <_printf_common+0xc8>
 80074a6:	2000      	movs	r0, #0
 80074a8:	e008      	b.n	80074bc <_printf_common+0xa8>
 80074aa:	2301      	movs	r3, #1
 80074ac:	4652      	mov	r2, sl
 80074ae:	4641      	mov	r1, r8
 80074b0:	4638      	mov	r0, r7
 80074b2:	47c8      	blx	r9
 80074b4:	3001      	adds	r0, #1
 80074b6:	d103      	bne.n	80074c0 <_printf_common+0xac>
 80074b8:	f04f 30ff 	mov.w	r0, #4294967295
 80074bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074c0:	3501      	adds	r5, #1
 80074c2:	e7c6      	b.n	8007452 <_printf_common+0x3e>
 80074c4:	18e1      	adds	r1, r4, r3
 80074c6:	1c5a      	adds	r2, r3, #1
 80074c8:	2030      	movs	r0, #48	@ 0x30
 80074ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80074ce:	4422      	add	r2, r4
 80074d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80074d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80074d8:	3302      	adds	r3, #2
 80074da:	e7c7      	b.n	800746c <_printf_common+0x58>
 80074dc:	2301      	movs	r3, #1
 80074de:	4622      	mov	r2, r4
 80074e0:	4641      	mov	r1, r8
 80074e2:	4638      	mov	r0, r7
 80074e4:	47c8      	blx	r9
 80074e6:	3001      	adds	r0, #1
 80074e8:	d0e6      	beq.n	80074b8 <_printf_common+0xa4>
 80074ea:	3601      	adds	r6, #1
 80074ec:	e7d9      	b.n	80074a2 <_printf_common+0x8e>
	...

080074f0 <_printf_i>:
 80074f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074f4:	7e0f      	ldrb	r7, [r1, #24]
 80074f6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80074f8:	2f78      	cmp	r7, #120	@ 0x78
 80074fa:	4691      	mov	r9, r2
 80074fc:	4680      	mov	r8, r0
 80074fe:	460c      	mov	r4, r1
 8007500:	469a      	mov	sl, r3
 8007502:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007506:	d807      	bhi.n	8007518 <_printf_i+0x28>
 8007508:	2f62      	cmp	r7, #98	@ 0x62
 800750a:	d80a      	bhi.n	8007522 <_printf_i+0x32>
 800750c:	2f00      	cmp	r7, #0
 800750e:	f000 80d1 	beq.w	80076b4 <_printf_i+0x1c4>
 8007512:	2f58      	cmp	r7, #88	@ 0x58
 8007514:	f000 80b8 	beq.w	8007688 <_printf_i+0x198>
 8007518:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800751c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007520:	e03a      	b.n	8007598 <_printf_i+0xa8>
 8007522:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007526:	2b15      	cmp	r3, #21
 8007528:	d8f6      	bhi.n	8007518 <_printf_i+0x28>
 800752a:	a101      	add	r1, pc, #4	@ (adr r1, 8007530 <_printf_i+0x40>)
 800752c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007530:	08007589 	.word	0x08007589
 8007534:	0800759d 	.word	0x0800759d
 8007538:	08007519 	.word	0x08007519
 800753c:	08007519 	.word	0x08007519
 8007540:	08007519 	.word	0x08007519
 8007544:	08007519 	.word	0x08007519
 8007548:	0800759d 	.word	0x0800759d
 800754c:	08007519 	.word	0x08007519
 8007550:	08007519 	.word	0x08007519
 8007554:	08007519 	.word	0x08007519
 8007558:	08007519 	.word	0x08007519
 800755c:	0800769b 	.word	0x0800769b
 8007560:	080075c7 	.word	0x080075c7
 8007564:	08007655 	.word	0x08007655
 8007568:	08007519 	.word	0x08007519
 800756c:	08007519 	.word	0x08007519
 8007570:	080076bd 	.word	0x080076bd
 8007574:	08007519 	.word	0x08007519
 8007578:	080075c7 	.word	0x080075c7
 800757c:	08007519 	.word	0x08007519
 8007580:	08007519 	.word	0x08007519
 8007584:	0800765d 	.word	0x0800765d
 8007588:	6833      	ldr	r3, [r6, #0]
 800758a:	1d1a      	adds	r2, r3, #4
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	6032      	str	r2, [r6, #0]
 8007590:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007594:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007598:	2301      	movs	r3, #1
 800759a:	e09c      	b.n	80076d6 <_printf_i+0x1e6>
 800759c:	6833      	ldr	r3, [r6, #0]
 800759e:	6820      	ldr	r0, [r4, #0]
 80075a0:	1d19      	adds	r1, r3, #4
 80075a2:	6031      	str	r1, [r6, #0]
 80075a4:	0606      	lsls	r6, r0, #24
 80075a6:	d501      	bpl.n	80075ac <_printf_i+0xbc>
 80075a8:	681d      	ldr	r5, [r3, #0]
 80075aa:	e003      	b.n	80075b4 <_printf_i+0xc4>
 80075ac:	0645      	lsls	r5, r0, #25
 80075ae:	d5fb      	bpl.n	80075a8 <_printf_i+0xb8>
 80075b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80075b4:	2d00      	cmp	r5, #0
 80075b6:	da03      	bge.n	80075c0 <_printf_i+0xd0>
 80075b8:	232d      	movs	r3, #45	@ 0x2d
 80075ba:	426d      	negs	r5, r5
 80075bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80075c0:	4858      	ldr	r0, [pc, #352]	@ (8007724 <_printf_i+0x234>)
 80075c2:	230a      	movs	r3, #10
 80075c4:	e011      	b.n	80075ea <_printf_i+0xfa>
 80075c6:	6821      	ldr	r1, [r4, #0]
 80075c8:	6833      	ldr	r3, [r6, #0]
 80075ca:	0608      	lsls	r0, r1, #24
 80075cc:	f853 5b04 	ldr.w	r5, [r3], #4
 80075d0:	d402      	bmi.n	80075d8 <_printf_i+0xe8>
 80075d2:	0649      	lsls	r1, r1, #25
 80075d4:	bf48      	it	mi
 80075d6:	b2ad      	uxthmi	r5, r5
 80075d8:	2f6f      	cmp	r7, #111	@ 0x6f
 80075da:	4852      	ldr	r0, [pc, #328]	@ (8007724 <_printf_i+0x234>)
 80075dc:	6033      	str	r3, [r6, #0]
 80075de:	bf14      	ite	ne
 80075e0:	230a      	movne	r3, #10
 80075e2:	2308      	moveq	r3, #8
 80075e4:	2100      	movs	r1, #0
 80075e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80075ea:	6866      	ldr	r6, [r4, #4]
 80075ec:	60a6      	str	r6, [r4, #8]
 80075ee:	2e00      	cmp	r6, #0
 80075f0:	db05      	blt.n	80075fe <_printf_i+0x10e>
 80075f2:	6821      	ldr	r1, [r4, #0]
 80075f4:	432e      	orrs	r6, r5
 80075f6:	f021 0104 	bic.w	r1, r1, #4
 80075fa:	6021      	str	r1, [r4, #0]
 80075fc:	d04b      	beq.n	8007696 <_printf_i+0x1a6>
 80075fe:	4616      	mov	r6, r2
 8007600:	fbb5 f1f3 	udiv	r1, r5, r3
 8007604:	fb03 5711 	mls	r7, r3, r1, r5
 8007608:	5dc7      	ldrb	r7, [r0, r7]
 800760a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800760e:	462f      	mov	r7, r5
 8007610:	42bb      	cmp	r3, r7
 8007612:	460d      	mov	r5, r1
 8007614:	d9f4      	bls.n	8007600 <_printf_i+0x110>
 8007616:	2b08      	cmp	r3, #8
 8007618:	d10b      	bne.n	8007632 <_printf_i+0x142>
 800761a:	6823      	ldr	r3, [r4, #0]
 800761c:	07df      	lsls	r7, r3, #31
 800761e:	d508      	bpl.n	8007632 <_printf_i+0x142>
 8007620:	6923      	ldr	r3, [r4, #16]
 8007622:	6861      	ldr	r1, [r4, #4]
 8007624:	4299      	cmp	r1, r3
 8007626:	bfde      	ittt	le
 8007628:	2330      	movle	r3, #48	@ 0x30
 800762a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800762e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007632:	1b92      	subs	r2, r2, r6
 8007634:	6122      	str	r2, [r4, #16]
 8007636:	f8cd a000 	str.w	sl, [sp]
 800763a:	464b      	mov	r3, r9
 800763c:	aa03      	add	r2, sp, #12
 800763e:	4621      	mov	r1, r4
 8007640:	4640      	mov	r0, r8
 8007642:	f7ff fee7 	bl	8007414 <_printf_common>
 8007646:	3001      	adds	r0, #1
 8007648:	d14a      	bne.n	80076e0 <_printf_i+0x1f0>
 800764a:	f04f 30ff 	mov.w	r0, #4294967295
 800764e:	b004      	add	sp, #16
 8007650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007654:	6823      	ldr	r3, [r4, #0]
 8007656:	f043 0320 	orr.w	r3, r3, #32
 800765a:	6023      	str	r3, [r4, #0]
 800765c:	4832      	ldr	r0, [pc, #200]	@ (8007728 <_printf_i+0x238>)
 800765e:	2778      	movs	r7, #120	@ 0x78
 8007660:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007664:	6823      	ldr	r3, [r4, #0]
 8007666:	6831      	ldr	r1, [r6, #0]
 8007668:	061f      	lsls	r7, r3, #24
 800766a:	f851 5b04 	ldr.w	r5, [r1], #4
 800766e:	d402      	bmi.n	8007676 <_printf_i+0x186>
 8007670:	065f      	lsls	r7, r3, #25
 8007672:	bf48      	it	mi
 8007674:	b2ad      	uxthmi	r5, r5
 8007676:	6031      	str	r1, [r6, #0]
 8007678:	07d9      	lsls	r1, r3, #31
 800767a:	bf44      	itt	mi
 800767c:	f043 0320 	orrmi.w	r3, r3, #32
 8007680:	6023      	strmi	r3, [r4, #0]
 8007682:	b11d      	cbz	r5, 800768c <_printf_i+0x19c>
 8007684:	2310      	movs	r3, #16
 8007686:	e7ad      	b.n	80075e4 <_printf_i+0xf4>
 8007688:	4826      	ldr	r0, [pc, #152]	@ (8007724 <_printf_i+0x234>)
 800768a:	e7e9      	b.n	8007660 <_printf_i+0x170>
 800768c:	6823      	ldr	r3, [r4, #0]
 800768e:	f023 0320 	bic.w	r3, r3, #32
 8007692:	6023      	str	r3, [r4, #0]
 8007694:	e7f6      	b.n	8007684 <_printf_i+0x194>
 8007696:	4616      	mov	r6, r2
 8007698:	e7bd      	b.n	8007616 <_printf_i+0x126>
 800769a:	6833      	ldr	r3, [r6, #0]
 800769c:	6825      	ldr	r5, [r4, #0]
 800769e:	6961      	ldr	r1, [r4, #20]
 80076a0:	1d18      	adds	r0, r3, #4
 80076a2:	6030      	str	r0, [r6, #0]
 80076a4:	062e      	lsls	r6, r5, #24
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	d501      	bpl.n	80076ae <_printf_i+0x1be>
 80076aa:	6019      	str	r1, [r3, #0]
 80076ac:	e002      	b.n	80076b4 <_printf_i+0x1c4>
 80076ae:	0668      	lsls	r0, r5, #25
 80076b0:	d5fb      	bpl.n	80076aa <_printf_i+0x1ba>
 80076b2:	8019      	strh	r1, [r3, #0]
 80076b4:	2300      	movs	r3, #0
 80076b6:	6123      	str	r3, [r4, #16]
 80076b8:	4616      	mov	r6, r2
 80076ba:	e7bc      	b.n	8007636 <_printf_i+0x146>
 80076bc:	6833      	ldr	r3, [r6, #0]
 80076be:	1d1a      	adds	r2, r3, #4
 80076c0:	6032      	str	r2, [r6, #0]
 80076c2:	681e      	ldr	r6, [r3, #0]
 80076c4:	6862      	ldr	r2, [r4, #4]
 80076c6:	2100      	movs	r1, #0
 80076c8:	4630      	mov	r0, r6
 80076ca:	f7f8 fd89 	bl	80001e0 <memchr>
 80076ce:	b108      	cbz	r0, 80076d4 <_printf_i+0x1e4>
 80076d0:	1b80      	subs	r0, r0, r6
 80076d2:	6060      	str	r0, [r4, #4]
 80076d4:	6863      	ldr	r3, [r4, #4]
 80076d6:	6123      	str	r3, [r4, #16]
 80076d8:	2300      	movs	r3, #0
 80076da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80076de:	e7aa      	b.n	8007636 <_printf_i+0x146>
 80076e0:	6923      	ldr	r3, [r4, #16]
 80076e2:	4632      	mov	r2, r6
 80076e4:	4649      	mov	r1, r9
 80076e6:	4640      	mov	r0, r8
 80076e8:	47d0      	blx	sl
 80076ea:	3001      	adds	r0, #1
 80076ec:	d0ad      	beq.n	800764a <_printf_i+0x15a>
 80076ee:	6823      	ldr	r3, [r4, #0]
 80076f0:	079b      	lsls	r3, r3, #30
 80076f2:	d413      	bmi.n	800771c <_printf_i+0x22c>
 80076f4:	68e0      	ldr	r0, [r4, #12]
 80076f6:	9b03      	ldr	r3, [sp, #12]
 80076f8:	4298      	cmp	r0, r3
 80076fa:	bfb8      	it	lt
 80076fc:	4618      	movlt	r0, r3
 80076fe:	e7a6      	b.n	800764e <_printf_i+0x15e>
 8007700:	2301      	movs	r3, #1
 8007702:	4632      	mov	r2, r6
 8007704:	4649      	mov	r1, r9
 8007706:	4640      	mov	r0, r8
 8007708:	47d0      	blx	sl
 800770a:	3001      	adds	r0, #1
 800770c:	d09d      	beq.n	800764a <_printf_i+0x15a>
 800770e:	3501      	adds	r5, #1
 8007710:	68e3      	ldr	r3, [r4, #12]
 8007712:	9903      	ldr	r1, [sp, #12]
 8007714:	1a5b      	subs	r3, r3, r1
 8007716:	42ab      	cmp	r3, r5
 8007718:	dcf2      	bgt.n	8007700 <_printf_i+0x210>
 800771a:	e7eb      	b.n	80076f4 <_printf_i+0x204>
 800771c:	2500      	movs	r5, #0
 800771e:	f104 0619 	add.w	r6, r4, #25
 8007722:	e7f5      	b.n	8007710 <_printf_i+0x220>
 8007724:	0800a6ce 	.word	0x0800a6ce
 8007728:	0800a6df 	.word	0x0800a6df

0800772c <std>:
 800772c:	2300      	movs	r3, #0
 800772e:	b510      	push	{r4, lr}
 8007730:	4604      	mov	r4, r0
 8007732:	e9c0 3300 	strd	r3, r3, [r0]
 8007736:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800773a:	6083      	str	r3, [r0, #8]
 800773c:	8181      	strh	r1, [r0, #12]
 800773e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007740:	81c2      	strh	r2, [r0, #14]
 8007742:	6183      	str	r3, [r0, #24]
 8007744:	4619      	mov	r1, r3
 8007746:	2208      	movs	r2, #8
 8007748:	305c      	adds	r0, #92	@ 0x5c
 800774a:	f000 f926 	bl	800799a <memset>
 800774e:	4b0d      	ldr	r3, [pc, #52]	@ (8007784 <std+0x58>)
 8007750:	6263      	str	r3, [r4, #36]	@ 0x24
 8007752:	4b0d      	ldr	r3, [pc, #52]	@ (8007788 <std+0x5c>)
 8007754:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007756:	4b0d      	ldr	r3, [pc, #52]	@ (800778c <std+0x60>)
 8007758:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800775a:	4b0d      	ldr	r3, [pc, #52]	@ (8007790 <std+0x64>)
 800775c:	6323      	str	r3, [r4, #48]	@ 0x30
 800775e:	4b0d      	ldr	r3, [pc, #52]	@ (8007794 <std+0x68>)
 8007760:	6224      	str	r4, [r4, #32]
 8007762:	429c      	cmp	r4, r3
 8007764:	d006      	beq.n	8007774 <std+0x48>
 8007766:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800776a:	4294      	cmp	r4, r2
 800776c:	d002      	beq.n	8007774 <std+0x48>
 800776e:	33d0      	adds	r3, #208	@ 0xd0
 8007770:	429c      	cmp	r4, r3
 8007772:	d105      	bne.n	8007780 <std+0x54>
 8007774:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800777c:	f000 b98a 	b.w	8007a94 <__retarget_lock_init_recursive>
 8007780:	bd10      	pop	{r4, pc}
 8007782:	bf00      	nop
 8007784:	080078f5 	.word	0x080078f5
 8007788:	08007917 	.word	0x08007917
 800778c:	0800794f 	.word	0x0800794f
 8007790:	08007973 	.word	0x08007973
 8007794:	20004990 	.word	0x20004990

08007798 <stdio_exit_handler>:
 8007798:	4a02      	ldr	r2, [pc, #8]	@ (80077a4 <stdio_exit_handler+0xc>)
 800779a:	4903      	ldr	r1, [pc, #12]	@ (80077a8 <stdio_exit_handler+0x10>)
 800779c:	4803      	ldr	r0, [pc, #12]	@ (80077ac <stdio_exit_handler+0x14>)
 800779e:	f000 b869 	b.w	8007874 <_fwalk_sglue>
 80077a2:	bf00      	nop
 80077a4:	2000000c 	.word	0x2000000c
 80077a8:	08009415 	.word	0x08009415
 80077ac:	2000001c 	.word	0x2000001c

080077b0 <cleanup_stdio>:
 80077b0:	6841      	ldr	r1, [r0, #4]
 80077b2:	4b0c      	ldr	r3, [pc, #48]	@ (80077e4 <cleanup_stdio+0x34>)
 80077b4:	4299      	cmp	r1, r3
 80077b6:	b510      	push	{r4, lr}
 80077b8:	4604      	mov	r4, r0
 80077ba:	d001      	beq.n	80077c0 <cleanup_stdio+0x10>
 80077bc:	f001 fe2a 	bl	8009414 <_fflush_r>
 80077c0:	68a1      	ldr	r1, [r4, #8]
 80077c2:	4b09      	ldr	r3, [pc, #36]	@ (80077e8 <cleanup_stdio+0x38>)
 80077c4:	4299      	cmp	r1, r3
 80077c6:	d002      	beq.n	80077ce <cleanup_stdio+0x1e>
 80077c8:	4620      	mov	r0, r4
 80077ca:	f001 fe23 	bl	8009414 <_fflush_r>
 80077ce:	68e1      	ldr	r1, [r4, #12]
 80077d0:	4b06      	ldr	r3, [pc, #24]	@ (80077ec <cleanup_stdio+0x3c>)
 80077d2:	4299      	cmp	r1, r3
 80077d4:	d004      	beq.n	80077e0 <cleanup_stdio+0x30>
 80077d6:	4620      	mov	r0, r4
 80077d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077dc:	f001 be1a 	b.w	8009414 <_fflush_r>
 80077e0:	bd10      	pop	{r4, pc}
 80077e2:	bf00      	nop
 80077e4:	20004990 	.word	0x20004990
 80077e8:	200049f8 	.word	0x200049f8
 80077ec:	20004a60 	.word	0x20004a60

080077f0 <global_stdio_init.part.0>:
 80077f0:	b510      	push	{r4, lr}
 80077f2:	4b0b      	ldr	r3, [pc, #44]	@ (8007820 <global_stdio_init.part.0+0x30>)
 80077f4:	4c0b      	ldr	r4, [pc, #44]	@ (8007824 <global_stdio_init.part.0+0x34>)
 80077f6:	4a0c      	ldr	r2, [pc, #48]	@ (8007828 <global_stdio_init.part.0+0x38>)
 80077f8:	601a      	str	r2, [r3, #0]
 80077fa:	4620      	mov	r0, r4
 80077fc:	2200      	movs	r2, #0
 80077fe:	2104      	movs	r1, #4
 8007800:	f7ff ff94 	bl	800772c <std>
 8007804:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007808:	2201      	movs	r2, #1
 800780a:	2109      	movs	r1, #9
 800780c:	f7ff ff8e 	bl	800772c <std>
 8007810:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007814:	2202      	movs	r2, #2
 8007816:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800781a:	2112      	movs	r1, #18
 800781c:	f7ff bf86 	b.w	800772c <std>
 8007820:	20004ac8 	.word	0x20004ac8
 8007824:	20004990 	.word	0x20004990
 8007828:	08007799 	.word	0x08007799

0800782c <__sfp_lock_acquire>:
 800782c:	4801      	ldr	r0, [pc, #4]	@ (8007834 <__sfp_lock_acquire+0x8>)
 800782e:	f000 b932 	b.w	8007a96 <__retarget_lock_acquire_recursive>
 8007832:	bf00      	nop
 8007834:	20004ad1 	.word	0x20004ad1

08007838 <__sfp_lock_release>:
 8007838:	4801      	ldr	r0, [pc, #4]	@ (8007840 <__sfp_lock_release+0x8>)
 800783a:	f000 b92d 	b.w	8007a98 <__retarget_lock_release_recursive>
 800783e:	bf00      	nop
 8007840:	20004ad1 	.word	0x20004ad1

08007844 <__sinit>:
 8007844:	b510      	push	{r4, lr}
 8007846:	4604      	mov	r4, r0
 8007848:	f7ff fff0 	bl	800782c <__sfp_lock_acquire>
 800784c:	6a23      	ldr	r3, [r4, #32]
 800784e:	b11b      	cbz	r3, 8007858 <__sinit+0x14>
 8007850:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007854:	f7ff bff0 	b.w	8007838 <__sfp_lock_release>
 8007858:	4b04      	ldr	r3, [pc, #16]	@ (800786c <__sinit+0x28>)
 800785a:	6223      	str	r3, [r4, #32]
 800785c:	4b04      	ldr	r3, [pc, #16]	@ (8007870 <__sinit+0x2c>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d1f5      	bne.n	8007850 <__sinit+0xc>
 8007864:	f7ff ffc4 	bl	80077f0 <global_stdio_init.part.0>
 8007868:	e7f2      	b.n	8007850 <__sinit+0xc>
 800786a:	bf00      	nop
 800786c:	080077b1 	.word	0x080077b1
 8007870:	20004ac8 	.word	0x20004ac8

08007874 <_fwalk_sglue>:
 8007874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007878:	4607      	mov	r7, r0
 800787a:	4688      	mov	r8, r1
 800787c:	4614      	mov	r4, r2
 800787e:	2600      	movs	r6, #0
 8007880:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007884:	f1b9 0901 	subs.w	r9, r9, #1
 8007888:	d505      	bpl.n	8007896 <_fwalk_sglue+0x22>
 800788a:	6824      	ldr	r4, [r4, #0]
 800788c:	2c00      	cmp	r4, #0
 800788e:	d1f7      	bne.n	8007880 <_fwalk_sglue+0xc>
 8007890:	4630      	mov	r0, r6
 8007892:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007896:	89ab      	ldrh	r3, [r5, #12]
 8007898:	2b01      	cmp	r3, #1
 800789a:	d907      	bls.n	80078ac <_fwalk_sglue+0x38>
 800789c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80078a0:	3301      	adds	r3, #1
 80078a2:	d003      	beq.n	80078ac <_fwalk_sglue+0x38>
 80078a4:	4629      	mov	r1, r5
 80078a6:	4638      	mov	r0, r7
 80078a8:	47c0      	blx	r8
 80078aa:	4306      	orrs	r6, r0
 80078ac:	3568      	adds	r5, #104	@ 0x68
 80078ae:	e7e9      	b.n	8007884 <_fwalk_sglue+0x10>

080078b0 <siprintf>:
 80078b0:	b40e      	push	{r1, r2, r3}
 80078b2:	b510      	push	{r4, lr}
 80078b4:	b09d      	sub	sp, #116	@ 0x74
 80078b6:	ab1f      	add	r3, sp, #124	@ 0x7c
 80078b8:	9002      	str	r0, [sp, #8]
 80078ba:	9006      	str	r0, [sp, #24]
 80078bc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80078c0:	480a      	ldr	r0, [pc, #40]	@ (80078ec <siprintf+0x3c>)
 80078c2:	9107      	str	r1, [sp, #28]
 80078c4:	9104      	str	r1, [sp, #16]
 80078c6:	490a      	ldr	r1, [pc, #40]	@ (80078f0 <siprintf+0x40>)
 80078c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80078cc:	9105      	str	r1, [sp, #20]
 80078ce:	2400      	movs	r4, #0
 80078d0:	a902      	add	r1, sp, #8
 80078d2:	6800      	ldr	r0, [r0, #0]
 80078d4:	9301      	str	r3, [sp, #4]
 80078d6:	941b      	str	r4, [sp, #108]	@ 0x6c
 80078d8:	f001 fc1c 	bl	8009114 <_svfiprintf_r>
 80078dc:	9b02      	ldr	r3, [sp, #8]
 80078de:	701c      	strb	r4, [r3, #0]
 80078e0:	b01d      	add	sp, #116	@ 0x74
 80078e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078e6:	b003      	add	sp, #12
 80078e8:	4770      	bx	lr
 80078ea:	bf00      	nop
 80078ec:	20000018 	.word	0x20000018
 80078f0:	ffff0208 	.word	0xffff0208

080078f4 <__sread>:
 80078f4:	b510      	push	{r4, lr}
 80078f6:	460c      	mov	r4, r1
 80078f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078fc:	f000 f87c 	bl	80079f8 <_read_r>
 8007900:	2800      	cmp	r0, #0
 8007902:	bfab      	itete	ge
 8007904:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007906:	89a3      	ldrhlt	r3, [r4, #12]
 8007908:	181b      	addge	r3, r3, r0
 800790a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800790e:	bfac      	ite	ge
 8007910:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007912:	81a3      	strhlt	r3, [r4, #12]
 8007914:	bd10      	pop	{r4, pc}

08007916 <__swrite>:
 8007916:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800791a:	461f      	mov	r7, r3
 800791c:	898b      	ldrh	r3, [r1, #12]
 800791e:	05db      	lsls	r3, r3, #23
 8007920:	4605      	mov	r5, r0
 8007922:	460c      	mov	r4, r1
 8007924:	4616      	mov	r6, r2
 8007926:	d505      	bpl.n	8007934 <__swrite+0x1e>
 8007928:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800792c:	2302      	movs	r3, #2
 800792e:	2200      	movs	r2, #0
 8007930:	f000 f850 	bl	80079d4 <_lseek_r>
 8007934:	89a3      	ldrh	r3, [r4, #12]
 8007936:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800793a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800793e:	81a3      	strh	r3, [r4, #12]
 8007940:	4632      	mov	r2, r6
 8007942:	463b      	mov	r3, r7
 8007944:	4628      	mov	r0, r5
 8007946:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800794a:	f000 b867 	b.w	8007a1c <_write_r>

0800794e <__sseek>:
 800794e:	b510      	push	{r4, lr}
 8007950:	460c      	mov	r4, r1
 8007952:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007956:	f000 f83d 	bl	80079d4 <_lseek_r>
 800795a:	1c43      	adds	r3, r0, #1
 800795c:	89a3      	ldrh	r3, [r4, #12]
 800795e:	bf15      	itete	ne
 8007960:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007962:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007966:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800796a:	81a3      	strheq	r3, [r4, #12]
 800796c:	bf18      	it	ne
 800796e:	81a3      	strhne	r3, [r4, #12]
 8007970:	bd10      	pop	{r4, pc}

08007972 <__sclose>:
 8007972:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007976:	f000 b81d 	b.w	80079b4 <_close_r>

0800797a <memcmp>:
 800797a:	b510      	push	{r4, lr}
 800797c:	3901      	subs	r1, #1
 800797e:	4402      	add	r2, r0
 8007980:	4290      	cmp	r0, r2
 8007982:	d101      	bne.n	8007988 <memcmp+0xe>
 8007984:	2000      	movs	r0, #0
 8007986:	e005      	b.n	8007994 <memcmp+0x1a>
 8007988:	7803      	ldrb	r3, [r0, #0]
 800798a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800798e:	42a3      	cmp	r3, r4
 8007990:	d001      	beq.n	8007996 <memcmp+0x1c>
 8007992:	1b18      	subs	r0, r3, r4
 8007994:	bd10      	pop	{r4, pc}
 8007996:	3001      	adds	r0, #1
 8007998:	e7f2      	b.n	8007980 <memcmp+0x6>

0800799a <memset>:
 800799a:	4402      	add	r2, r0
 800799c:	4603      	mov	r3, r0
 800799e:	4293      	cmp	r3, r2
 80079a0:	d100      	bne.n	80079a4 <memset+0xa>
 80079a2:	4770      	bx	lr
 80079a4:	f803 1b01 	strb.w	r1, [r3], #1
 80079a8:	e7f9      	b.n	800799e <memset+0x4>
	...

080079ac <_localeconv_r>:
 80079ac:	4800      	ldr	r0, [pc, #0]	@ (80079b0 <_localeconv_r+0x4>)
 80079ae:	4770      	bx	lr
 80079b0:	20000158 	.word	0x20000158

080079b4 <_close_r>:
 80079b4:	b538      	push	{r3, r4, r5, lr}
 80079b6:	4d06      	ldr	r5, [pc, #24]	@ (80079d0 <_close_r+0x1c>)
 80079b8:	2300      	movs	r3, #0
 80079ba:	4604      	mov	r4, r0
 80079bc:	4608      	mov	r0, r1
 80079be:	602b      	str	r3, [r5, #0]
 80079c0:	f7fb fd88 	bl	80034d4 <_close>
 80079c4:	1c43      	adds	r3, r0, #1
 80079c6:	d102      	bne.n	80079ce <_close_r+0x1a>
 80079c8:	682b      	ldr	r3, [r5, #0]
 80079ca:	b103      	cbz	r3, 80079ce <_close_r+0x1a>
 80079cc:	6023      	str	r3, [r4, #0]
 80079ce:	bd38      	pop	{r3, r4, r5, pc}
 80079d0:	20004acc 	.word	0x20004acc

080079d4 <_lseek_r>:
 80079d4:	b538      	push	{r3, r4, r5, lr}
 80079d6:	4d07      	ldr	r5, [pc, #28]	@ (80079f4 <_lseek_r+0x20>)
 80079d8:	4604      	mov	r4, r0
 80079da:	4608      	mov	r0, r1
 80079dc:	4611      	mov	r1, r2
 80079de:	2200      	movs	r2, #0
 80079e0:	602a      	str	r2, [r5, #0]
 80079e2:	461a      	mov	r2, r3
 80079e4:	f7fb fd9d 	bl	8003522 <_lseek>
 80079e8:	1c43      	adds	r3, r0, #1
 80079ea:	d102      	bne.n	80079f2 <_lseek_r+0x1e>
 80079ec:	682b      	ldr	r3, [r5, #0]
 80079ee:	b103      	cbz	r3, 80079f2 <_lseek_r+0x1e>
 80079f0:	6023      	str	r3, [r4, #0]
 80079f2:	bd38      	pop	{r3, r4, r5, pc}
 80079f4:	20004acc 	.word	0x20004acc

080079f8 <_read_r>:
 80079f8:	b538      	push	{r3, r4, r5, lr}
 80079fa:	4d07      	ldr	r5, [pc, #28]	@ (8007a18 <_read_r+0x20>)
 80079fc:	4604      	mov	r4, r0
 80079fe:	4608      	mov	r0, r1
 8007a00:	4611      	mov	r1, r2
 8007a02:	2200      	movs	r2, #0
 8007a04:	602a      	str	r2, [r5, #0]
 8007a06:	461a      	mov	r2, r3
 8007a08:	f7fb fd2b 	bl	8003462 <_read>
 8007a0c:	1c43      	adds	r3, r0, #1
 8007a0e:	d102      	bne.n	8007a16 <_read_r+0x1e>
 8007a10:	682b      	ldr	r3, [r5, #0]
 8007a12:	b103      	cbz	r3, 8007a16 <_read_r+0x1e>
 8007a14:	6023      	str	r3, [r4, #0]
 8007a16:	bd38      	pop	{r3, r4, r5, pc}
 8007a18:	20004acc 	.word	0x20004acc

08007a1c <_write_r>:
 8007a1c:	b538      	push	{r3, r4, r5, lr}
 8007a1e:	4d07      	ldr	r5, [pc, #28]	@ (8007a3c <_write_r+0x20>)
 8007a20:	4604      	mov	r4, r0
 8007a22:	4608      	mov	r0, r1
 8007a24:	4611      	mov	r1, r2
 8007a26:	2200      	movs	r2, #0
 8007a28:	602a      	str	r2, [r5, #0]
 8007a2a:	461a      	mov	r2, r3
 8007a2c:	f7fb fd36 	bl	800349c <_write>
 8007a30:	1c43      	adds	r3, r0, #1
 8007a32:	d102      	bne.n	8007a3a <_write_r+0x1e>
 8007a34:	682b      	ldr	r3, [r5, #0]
 8007a36:	b103      	cbz	r3, 8007a3a <_write_r+0x1e>
 8007a38:	6023      	str	r3, [r4, #0]
 8007a3a:	bd38      	pop	{r3, r4, r5, pc}
 8007a3c:	20004acc 	.word	0x20004acc

08007a40 <__errno>:
 8007a40:	4b01      	ldr	r3, [pc, #4]	@ (8007a48 <__errno+0x8>)
 8007a42:	6818      	ldr	r0, [r3, #0]
 8007a44:	4770      	bx	lr
 8007a46:	bf00      	nop
 8007a48:	20000018 	.word	0x20000018

08007a4c <__libc_init_array>:
 8007a4c:	b570      	push	{r4, r5, r6, lr}
 8007a4e:	4d0d      	ldr	r5, [pc, #52]	@ (8007a84 <__libc_init_array+0x38>)
 8007a50:	4c0d      	ldr	r4, [pc, #52]	@ (8007a88 <__libc_init_array+0x3c>)
 8007a52:	1b64      	subs	r4, r4, r5
 8007a54:	10a4      	asrs	r4, r4, #2
 8007a56:	2600      	movs	r6, #0
 8007a58:	42a6      	cmp	r6, r4
 8007a5a:	d109      	bne.n	8007a70 <__libc_init_array+0x24>
 8007a5c:	4d0b      	ldr	r5, [pc, #44]	@ (8007a8c <__libc_init_array+0x40>)
 8007a5e:	4c0c      	ldr	r4, [pc, #48]	@ (8007a90 <__libc_init_array+0x44>)
 8007a60:	f002 fa68 	bl	8009f34 <_init>
 8007a64:	1b64      	subs	r4, r4, r5
 8007a66:	10a4      	asrs	r4, r4, #2
 8007a68:	2600      	movs	r6, #0
 8007a6a:	42a6      	cmp	r6, r4
 8007a6c:	d105      	bne.n	8007a7a <__libc_init_array+0x2e>
 8007a6e:	bd70      	pop	{r4, r5, r6, pc}
 8007a70:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a74:	4798      	blx	r3
 8007a76:	3601      	adds	r6, #1
 8007a78:	e7ee      	b.n	8007a58 <__libc_init_array+0xc>
 8007a7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a7e:	4798      	blx	r3
 8007a80:	3601      	adds	r6, #1
 8007a82:	e7f2      	b.n	8007a6a <__libc_init_array+0x1e>
 8007a84:	0800aa3c 	.word	0x0800aa3c
 8007a88:	0800aa3c 	.word	0x0800aa3c
 8007a8c:	0800aa3c 	.word	0x0800aa3c
 8007a90:	0800aa40 	.word	0x0800aa40

08007a94 <__retarget_lock_init_recursive>:
 8007a94:	4770      	bx	lr

08007a96 <__retarget_lock_acquire_recursive>:
 8007a96:	4770      	bx	lr

08007a98 <__retarget_lock_release_recursive>:
 8007a98:	4770      	bx	lr

08007a9a <memcpy>:
 8007a9a:	440a      	add	r2, r1
 8007a9c:	4291      	cmp	r1, r2
 8007a9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8007aa2:	d100      	bne.n	8007aa6 <memcpy+0xc>
 8007aa4:	4770      	bx	lr
 8007aa6:	b510      	push	{r4, lr}
 8007aa8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007aac:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ab0:	4291      	cmp	r1, r2
 8007ab2:	d1f9      	bne.n	8007aa8 <memcpy+0xe>
 8007ab4:	bd10      	pop	{r4, pc}

08007ab6 <quorem>:
 8007ab6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aba:	6903      	ldr	r3, [r0, #16]
 8007abc:	690c      	ldr	r4, [r1, #16]
 8007abe:	42a3      	cmp	r3, r4
 8007ac0:	4607      	mov	r7, r0
 8007ac2:	db7e      	blt.n	8007bc2 <quorem+0x10c>
 8007ac4:	3c01      	subs	r4, #1
 8007ac6:	f101 0814 	add.w	r8, r1, #20
 8007aca:	00a3      	lsls	r3, r4, #2
 8007acc:	f100 0514 	add.w	r5, r0, #20
 8007ad0:	9300      	str	r3, [sp, #0]
 8007ad2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007ad6:	9301      	str	r3, [sp, #4]
 8007ad8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007adc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007ae0:	3301      	adds	r3, #1
 8007ae2:	429a      	cmp	r2, r3
 8007ae4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007ae8:	fbb2 f6f3 	udiv	r6, r2, r3
 8007aec:	d32e      	bcc.n	8007b4c <quorem+0x96>
 8007aee:	f04f 0a00 	mov.w	sl, #0
 8007af2:	46c4      	mov	ip, r8
 8007af4:	46ae      	mov	lr, r5
 8007af6:	46d3      	mov	fp, sl
 8007af8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007afc:	b298      	uxth	r0, r3
 8007afe:	fb06 a000 	mla	r0, r6, r0, sl
 8007b02:	0c02      	lsrs	r2, r0, #16
 8007b04:	0c1b      	lsrs	r3, r3, #16
 8007b06:	fb06 2303 	mla	r3, r6, r3, r2
 8007b0a:	f8de 2000 	ldr.w	r2, [lr]
 8007b0e:	b280      	uxth	r0, r0
 8007b10:	b292      	uxth	r2, r2
 8007b12:	1a12      	subs	r2, r2, r0
 8007b14:	445a      	add	r2, fp
 8007b16:	f8de 0000 	ldr.w	r0, [lr]
 8007b1a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007b1e:	b29b      	uxth	r3, r3
 8007b20:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007b24:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007b28:	b292      	uxth	r2, r2
 8007b2a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007b2e:	45e1      	cmp	r9, ip
 8007b30:	f84e 2b04 	str.w	r2, [lr], #4
 8007b34:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007b38:	d2de      	bcs.n	8007af8 <quorem+0x42>
 8007b3a:	9b00      	ldr	r3, [sp, #0]
 8007b3c:	58eb      	ldr	r3, [r5, r3]
 8007b3e:	b92b      	cbnz	r3, 8007b4c <quorem+0x96>
 8007b40:	9b01      	ldr	r3, [sp, #4]
 8007b42:	3b04      	subs	r3, #4
 8007b44:	429d      	cmp	r5, r3
 8007b46:	461a      	mov	r2, r3
 8007b48:	d32f      	bcc.n	8007baa <quorem+0xf4>
 8007b4a:	613c      	str	r4, [r7, #16]
 8007b4c:	4638      	mov	r0, r7
 8007b4e:	f001 f97d 	bl	8008e4c <__mcmp>
 8007b52:	2800      	cmp	r0, #0
 8007b54:	db25      	blt.n	8007ba2 <quorem+0xec>
 8007b56:	4629      	mov	r1, r5
 8007b58:	2000      	movs	r0, #0
 8007b5a:	f858 2b04 	ldr.w	r2, [r8], #4
 8007b5e:	f8d1 c000 	ldr.w	ip, [r1]
 8007b62:	fa1f fe82 	uxth.w	lr, r2
 8007b66:	fa1f f38c 	uxth.w	r3, ip
 8007b6a:	eba3 030e 	sub.w	r3, r3, lr
 8007b6e:	4403      	add	r3, r0
 8007b70:	0c12      	lsrs	r2, r2, #16
 8007b72:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007b76:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007b80:	45c1      	cmp	r9, r8
 8007b82:	f841 3b04 	str.w	r3, [r1], #4
 8007b86:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007b8a:	d2e6      	bcs.n	8007b5a <quorem+0xa4>
 8007b8c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007b90:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007b94:	b922      	cbnz	r2, 8007ba0 <quorem+0xea>
 8007b96:	3b04      	subs	r3, #4
 8007b98:	429d      	cmp	r5, r3
 8007b9a:	461a      	mov	r2, r3
 8007b9c:	d30b      	bcc.n	8007bb6 <quorem+0x100>
 8007b9e:	613c      	str	r4, [r7, #16]
 8007ba0:	3601      	adds	r6, #1
 8007ba2:	4630      	mov	r0, r6
 8007ba4:	b003      	add	sp, #12
 8007ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007baa:	6812      	ldr	r2, [r2, #0]
 8007bac:	3b04      	subs	r3, #4
 8007bae:	2a00      	cmp	r2, #0
 8007bb0:	d1cb      	bne.n	8007b4a <quorem+0x94>
 8007bb2:	3c01      	subs	r4, #1
 8007bb4:	e7c6      	b.n	8007b44 <quorem+0x8e>
 8007bb6:	6812      	ldr	r2, [r2, #0]
 8007bb8:	3b04      	subs	r3, #4
 8007bba:	2a00      	cmp	r2, #0
 8007bbc:	d1ef      	bne.n	8007b9e <quorem+0xe8>
 8007bbe:	3c01      	subs	r4, #1
 8007bc0:	e7ea      	b.n	8007b98 <quorem+0xe2>
 8007bc2:	2000      	movs	r0, #0
 8007bc4:	e7ee      	b.n	8007ba4 <quorem+0xee>
	...

08007bc8 <_dtoa_r>:
 8007bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bcc:	69c7      	ldr	r7, [r0, #28]
 8007bce:	b097      	sub	sp, #92	@ 0x5c
 8007bd0:	ed8d 0b04 	vstr	d0, [sp, #16]
 8007bd4:	ec55 4b10 	vmov	r4, r5, d0
 8007bd8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8007bda:	9107      	str	r1, [sp, #28]
 8007bdc:	4681      	mov	r9, r0
 8007bde:	920c      	str	r2, [sp, #48]	@ 0x30
 8007be0:	9311      	str	r3, [sp, #68]	@ 0x44
 8007be2:	b97f      	cbnz	r7, 8007c04 <_dtoa_r+0x3c>
 8007be4:	2010      	movs	r0, #16
 8007be6:	f000 fe09 	bl	80087fc <malloc>
 8007bea:	4602      	mov	r2, r0
 8007bec:	f8c9 001c 	str.w	r0, [r9, #28]
 8007bf0:	b920      	cbnz	r0, 8007bfc <_dtoa_r+0x34>
 8007bf2:	4ba9      	ldr	r3, [pc, #676]	@ (8007e98 <_dtoa_r+0x2d0>)
 8007bf4:	21ef      	movs	r1, #239	@ 0xef
 8007bf6:	48a9      	ldr	r0, [pc, #676]	@ (8007e9c <_dtoa_r+0x2d4>)
 8007bf8:	f001 fc5e 	bl	80094b8 <__assert_func>
 8007bfc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007c00:	6007      	str	r7, [r0, #0]
 8007c02:	60c7      	str	r7, [r0, #12]
 8007c04:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007c08:	6819      	ldr	r1, [r3, #0]
 8007c0a:	b159      	cbz	r1, 8007c24 <_dtoa_r+0x5c>
 8007c0c:	685a      	ldr	r2, [r3, #4]
 8007c0e:	604a      	str	r2, [r1, #4]
 8007c10:	2301      	movs	r3, #1
 8007c12:	4093      	lsls	r3, r2
 8007c14:	608b      	str	r3, [r1, #8]
 8007c16:	4648      	mov	r0, r9
 8007c18:	f000 fee6 	bl	80089e8 <_Bfree>
 8007c1c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007c20:	2200      	movs	r2, #0
 8007c22:	601a      	str	r2, [r3, #0]
 8007c24:	1e2b      	subs	r3, r5, #0
 8007c26:	bfb9      	ittee	lt
 8007c28:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007c2c:	9305      	strlt	r3, [sp, #20]
 8007c2e:	2300      	movge	r3, #0
 8007c30:	6033      	strge	r3, [r6, #0]
 8007c32:	9f05      	ldr	r7, [sp, #20]
 8007c34:	4b9a      	ldr	r3, [pc, #616]	@ (8007ea0 <_dtoa_r+0x2d8>)
 8007c36:	bfbc      	itt	lt
 8007c38:	2201      	movlt	r2, #1
 8007c3a:	6032      	strlt	r2, [r6, #0]
 8007c3c:	43bb      	bics	r3, r7
 8007c3e:	d112      	bne.n	8007c66 <_dtoa_r+0x9e>
 8007c40:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007c42:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007c46:	6013      	str	r3, [r2, #0]
 8007c48:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007c4c:	4323      	orrs	r3, r4
 8007c4e:	f000 855a 	beq.w	8008706 <_dtoa_r+0xb3e>
 8007c52:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007c54:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8007eb4 <_dtoa_r+0x2ec>
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	f000 855c 	beq.w	8008716 <_dtoa_r+0xb4e>
 8007c5e:	f10a 0303 	add.w	r3, sl, #3
 8007c62:	f000 bd56 	b.w	8008712 <_dtoa_r+0xb4a>
 8007c66:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	ec51 0b17 	vmov	r0, r1, d7
 8007c70:	2300      	movs	r3, #0
 8007c72:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8007c76:	f7f8 ff2f 	bl	8000ad8 <__aeabi_dcmpeq>
 8007c7a:	4680      	mov	r8, r0
 8007c7c:	b158      	cbz	r0, 8007c96 <_dtoa_r+0xce>
 8007c7e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007c80:	2301      	movs	r3, #1
 8007c82:	6013      	str	r3, [r2, #0]
 8007c84:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007c86:	b113      	cbz	r3, 8007c8e <_dtoa_r+0xc6>
 8007c88:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007c8a:	4b86      	ldr	r3, [pc, #536]	@ (8007ea4 <_dtoa_r+0x2dc>)
 8007c8c:	6013      	str	r3, [r2, #0]
 8007c8e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8007eb8 <_dtoa_r+0x2f0>
 8007c92:	f000 bd40 	b.w	8008716 <_dtoa_r+0xb4e>
 8007c96:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8007c9a:	aa14      	add	r2, sp, #80	@ 0x50
 8007c9c:	a915      	add	r1, sp, #84	@ 0x54
 8007c9e:	4648      	mov	r0, r9
 8007ca0:	f001 f984 	bl	8008fac <__d2b>
 8007ca4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007ca8:	9002      	str	r0, [sp, #8]
 8007caa:	2e00      	cmp	r6, #0
 8007cac:	d078      	beq.n	8007da0 <_dtoa_r+0x1d8>
 8007cae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007cb0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8007cb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007cb8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007cbc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007cc0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007cc4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007cc8:	4619      	mov	r1, r3
 8007cca:	2200      	movs	r2, #0
 8007ccc:	4b76      	ldr	r3, [pc, #472]	@ (8007ea8 <_dtoa_r+0x2e0>)
 8007cce:	f7f8 fae3 	bl	8000298 <__aeabi_dsub>
 8007cd2:	a36b      	add	r3, pc, #428	@ (adr r3, 8007e80 <_dtoa_r+0x2b8>)
 8007cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd8:	f7f8 fc96 	bl	8000608 <__aeabi_dmul>
 8007cdc:	a36a      	add	r3, pc, #424	@ (adr r3, 8007e88 <_dtoa_r+0x2c0>)
 8007cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ce2:	f7f8 fadb 	bl	800029c <__adddf3>
 8007ce6:	4604      	mov	r4, r0
 8007ce8:	4630      	mov	r0, r6
 8007cea:	460d      	mov	r5, r1
 8007cec:	f7f8 fc22 	bl	8000534 <__aeabi_i2d>
 8007cf0:	a367      	add	r3, pc, #412	@ (adr r3, 8007e90 <_dtoa_r+0x2c8>)
 8007cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cf6:	f7f8 fc87 	bl	8000608 <__aeabi_dmul>
 8007cfa:	4602      	mov	r2, r0
 8007cfc:	460b      	mov	r3, r1
 8007cfe:	4620      	mov	r0, r4
 8007d00:	4629      	mov	r1, r5
 8007d02:	f7f8 facb 	bl	800029c <__adddf3>
 8007d06:	4604      	mov	r4, r0
 8007d08:	460d      	mov	r5, r1
 8007d0a:	f7f8 ff2d 	bl	8000b68 <__aeabi_d2iz>
 8007d0e:	2200      	movs	r2, #0
 8007d10:	4607      	mov	r7, r0
 8007d12:	2300      	movs	r3, #0
 8007d14:	4620      	mov	r0, r4
 8007d16:	4629      	mov	r1, r5
 8007d18:	f7f8 fee8 	bl	8000aec <__aeabi_dcmplt>
 8007d1c:	b140      	cbz	r0, 8007d30 <_dtoa_r+0x168>
 8007d1e:	4638      	mov	r0, r7
 8007d20:	f7f8 fc08 	bl	8000534 <__aeabi_i2d>
 8007d24:	4622      	mov	r2, r4
 8007d26:	462b      	mov	r3, r5
 8007d28:	f7f8 fed6 	bl	8000ad8 <__aeabi_dcmpeq>
 8007d2c:	b900      	cbnz	r0, 8007d30 <_dtoa_r+0x168>
 8007d2e:	3f01      	subs	r7, #1
 8007d30:	2f16      	cmp	r7, #22
 8007d32:	d852      	bhi.n	8007dda <_dtoa_r+0x212>
 8007d34:	4b5d      	ldr	r3, [pc, #372]	@ (8007eac <_dtoa_r+0x2e4>)
 8007d36:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d3e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007d42:	f7f8 fed3 	bl	8000aec <__aeabi_dcmplt>
 8007d46:	2800      	cmp	r0, #0
 8007d48:	d049      	beq.n	8007dde <_dtoa_r+0x216>
 8007d4a:	3f01      	subs	r7, #1
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	9310      	str	r3, [sp, #64]	@ 0x40
 8007d50:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007d52:	1b9b      	subs	r3, r3, r6
 8007d54:	1e5a      	subs	r2, r3, #1
 8007d56:	bf45      	ittet	mi
 8007d58:	f1c3 0301 	rsbmi	r3, r3, #1
 8007d5c:	9300      	strmi	r3, [sp, #0]
 8007d5e:	2300      	movpl	r3, #0
 8007d60:	2300      	movmi	r3, #0
 8007d62:	9206      	str	r2, [sp, #24]
 8007d64:	bf54      	ite	pl
 8007d66:	9300      	strpl	r3, [sp, #0]
 8007d68:	9306      	strmi	r3, [sp, #24]
 8007d6a:	2f00      	cmp	r7, #0
 8007d6c:	db39      	blt.n	8007de2 <_dtoa_r+0x21a>
 8007d6e:	9b06      	ldr	r3, [sp, #24]
 8007d70:	970d      	str	r7, [sp, #52]	@ 0x34
 8007d72:	443b      	add	r3, r7
 8007d74:	9306      	str	r3, [sp, #24]
 8007d76:	2300      	movs	r3, #0
 8007d78:	9308      	str	r3, [sp, #32]
 8007d7a:	9b07      	ldr	r3, [sp, #28]
 8007d7c:	2b09      	cmp	r3, #9
 8007d7e:	d863      	bhi.n	8007e48 <_dtoa_r+0x280>
 8007d80:	2b05      	cmp	r3, #5
 8007d82:	bfc4      	itt	gt
 8007d84:	3b04      	subgt	r3, #4
 8007d86:	9307      	strgt	r3, [sp, #28]
 8007d88:	9b07      	ldr	r3, [sp, #28]
 8007d8a:	f1a3 0302 	sub.w	r3, r3, #2
 8007d8e:	bfcc      	ite	gt
 8007d90:	2400      	movgt	r4, #0
 8007d92:	2401      	movle	r4, #1
 8007d94:	2b03      	cmp	r3, #3
 8007d96:	d863      	bhi.n	8007e60 <_dtoa_r+0x298>
 8007d98:	e8df f003 	tbb	[pc, r3]
 8007d9c:	2b375452 	.word	0x2b375452
 8007da0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007da4:	441e      	add	r6, r3
 8007da6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007daa:	2b20      	cmp	r3, #32
 8007dac:	bfc1      	itttt	gt
 8007dae:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007db2:	409f      	lslgt	r7, r3
 8007db4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007db8:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007dbc:	bfd6      	itet	le
 8007dbe:	f1c3 0320 	rsble	r3, r3, #32
 8007dc2:	ea47 0003 	orrgt.w	r0, r7, r3
 8007dc6:	fa04 f003 	lslle.w	r0, r4, r3
 8007dca:	f7f8 fba3 	bl	8000514 <__aeabi_ui2d>
 8007dce:	2201      	movs	r2, #1
 8007dd0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007dd4:	3e01      	subs	r6, #1
 8007dd6:	9212      	str	r2, [sp, #72]	@ 0x48
 8007dd8:	e776      	b.n	8007cc8 <_dtoa_r+0x100>
 8007dda:	2301      	movs	r3, #1
 8007ddc:	e7b7      	b.n	8007d4e <_dtoa_r+0x186>
 8007dde:	9010      	str	r0, [sp, #64]	@ 0x40
 8007de0:	e7b6      	b.n	8007d50 <_dtoa_r+0x188>
 8007de2:	9b00      	ldr	r3, [sp, #0]
 8007de4:	1bdb      	subs	r3, r3, r7
 8007de6:	9300      	str	r3, [sp, #0]
 8007de8:	427b      	negs	r3, r7
 8007dea:	9308      	str	r3, [sp, #32]
 8007dec:	2300      	movs	r3, #0
 8007dee:	930d      	str	r3, [sp, #52]	@ 0x34
 8007df0:	e7c3      	b.n	8007d7a <_dtoa_r+0x1b2>
 8007df2:	2301      	movs	r3, #1
 8007df4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007df6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007df8:	eb07 0b03 	add.w	fp, r7, r3
 8007dfc:	f10b 0301 	add.w	r3, fp, #1
 8007e00:	2b01      	cmp	r3, #1
 8007e02:	9303      	str	r3, [sp, #12]
 8007e04:	bfb8      	it	lt
 8007e06:	2301      	movlt	r3, #1
 8007e08:	e006      	b.n	8007e18 <_dtoa_r+0x250>
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e0e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	dd28      	ble.n	8007e66 <_dtoa_r+0x29e>
 8007e14:	469b      	mov	fp, r3
 8007e16:	9303      	str	r3, [sp, #12]
 8007e18:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8007e1c:	2100      	movs	r1, #0
 8007e1e:	2204      	movs	r2, #4
 8007e20:	f102 0514 	add.w	r5, r2, #20
 8007e24:	429d      	cmp	r5, r3
 8007e26:	d926      	bls.n	8007e76 <_dtoa_r+0x2ae>
 8007e28:	6041      	str	r1, [r0, #4]
 8007e2a:	4648      	mov	r0, r9
 8007e2c:	f000 fd9c 	bl	8008968 <_Balloc>
 8007e30:	4682      	mov	sl, r0
 8007e32:	2800      	cmp	r0, #0
 8007e34:	d142      	bne.n	8007ebc <_dtoa_r+0x2f4>
 8007e36:	4b1e      	ldr	r3, [pc, #120]	@ (8007eb0 <_dtoa_r+0x2e8>)
 8007e38:	4602      	mov	r2, r0
 8007e3a:	f240 11af 	movw	r1, #431	@ 0x1af
 8007e3e:	e6da      	b.n	8007bf6 <_dtoa_r+0x2e>
 8007e40:	2300      	movs	r3, #0
 8007e42:	e7e3      	b.n	8007e0c <_dtoa_r+0x244>
 8007e44:	2300      	movs	r3, #0
 8007e46:	e7d5      	b.n	8007df4 <_dtoa_r+0x22c>
 8007e48:	2401      	movs	r4, #1
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	9307      	str	r3, [sp, #28]
 8007e4e:	9409      	str	r4, [sp, #36]	@ 0x24
 8007e50:	f04f 3bff 	mov.w	fp, #4294967295
 8007e54:	2200      	movs	r2, #0
 8007e56:	f8cd b00c 	str.w	fp, [sp, #12]
 8007e5a:	2312      	movs	r3, #18
 8007e5c:	920c      	str	r2, [sp, #48]	@ 0x30
 8007e5e:	e7db      	b.n	8007e18 <_dtoa_r+0x250>
 8007e60:	2301      	movs	r3, #1
 8007e62:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e64:	e7f4      	b.n	8007e50 <_dtoa_r+0x288>
 8007e66:	f04f 0b01 	mov.w	fp, #1
 8007e6a:	f8cd b00c 	str.w	fp, [sp, #12]
 8007e6e:	465b      	mov	r3, fp
 8007e70:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8007e74:	e7d0      	b.n	8007e18 <_dtoa_r+0x250>
 8007e76:	3101      	adds	r1, #1
 8007e78:	0052      	lsls	r2, r2, #1
 8007e7a:	e7d1      	b.n	8007e20 <_dtoa_r+0x258>
 8007e7c:	f3af 8000 	nop.w
 8007e80:	636f4361 	.word	0x636f4361
 8007e84:	3fd287a7 	.word	0x3fd287a7
 8007e88:	8b60c8b3 	.word	0x8b60c8b3
 8007e8c:	3fc68a28 	.word	0x3fc68a28
 8007e90:	509f79fb 	.word	0x509f79fb
 8007e94:	3fd34413 	.word	0x3fd34413
 8007e98:	0800a6fd 	.word	0x0800a6fd
 8007e9c:	0800a714 	.word	0x0800a714
 8007ea0:	7ff00000 	.word	0x7ff00000
 8007ea4:	0800a6cd 	.word	0x0800a6cd
 8007ea8:	3ff80000 	.word	0x3ff80000
 8007eac:	0800a868 	.word	0x0800a868
 8007eb0:	0800a76c 	.word	0x0800a76c
 8007eb4:	0800a6f9 	.word	0x0800a6f9
 8007eb8:	0800a6cc 	.word	0x0800a6cc
 8007ebc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007ec0:	6018      	str	r0, [r3, #0]
 8007ec2:	9b03      	ldr	r3, [sp, #12]
 8007ec4:	2b0e      	cmp	r3, #14
 8007ec6:	f200 80a1 	bhi.w	800800c <_dtoa_r+0x444>
 8007eca:	2c00      	cmp	r4, #0
 8007ecc:	f000 809e 	beq.w	800800c <_dtoa_r+0x444>
 8007ed0:	2f00      	cmp	r7, #0
 8007ed2:	dd33      	ble.n	8007f3c <_dtoa_r+0x374>
 8007ed4:	4b9c      	ldr	r3, [pc, #624]	@ (8008148 <_dtoa_r+0x580>)
 8007ed6:	f007 020f 	and.w	r2, r7, #15
 8007eda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ede:	ed93 7b00 	vldr	d7, [r3]
 8007ee2:	05f8      	lsls	r0, r7, #23
 8007ee4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8007ee8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007eec:	d516      	bpl.n	8007f1c <_dtoa_r+0x354>
 8007eee:	4b97      	ldr	r3, [pc, #604]	@ (800814c <_dtoa_r+0x584>)
 8007ef0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007ef4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007ef8:	f7f8 fcb0 	bl	800085c <__aeabi_ddiv>
 8007efc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007f00:	f004 040f 	and.w	r4, r4, #15
 8007f04:	2603      	movs	r6, #3
 8007f06:	4d91      	ldr	r5, [pc, #580]	@ (800814c <_dtoa_r+0x584>)
 8007f08:	b954      	cbnz	r4, 8007f20 <_dtoa_r+0x358>
 8007f0a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007f0e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f12:	f7f8 fca3 	bl	800085c <__aeabi_ddiv>
 8007f16:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007f1a:	e028      	b.n	8007f6e <_dtoa_r+0x3a6>
 8007f1c:	2602      	movs	r6, #2
 8007f1e:	e7f2      	b.n	8007f06 <_dtoa_r+0x33e>
 8007f20:	07e1      	lsls	r1, r4, #31
 8007f22:	d508      	bpl.n	8007f36 <_dtoa_r+0x36e>
 8007f24:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007f28:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007f2c:	f7f8 fb6c 	bl	8000608 <__aeabi_dmul>
 8007f30:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007f34:	3601      	adds	r6, #1
 8007f36:	1064      	asrs	r4, r4, #1
 8007f38:	3508      	adds	r5, #8
 8007f3a:	e7e5      	b.n	8007f08 <_dtoa_r+0x340>
 8007f3c:	f000 80af 	beq.w	800809e <_dtoa_r+0x4d6>
 8007f40:	427c      	negs	r4, r7
 8007f42:	4b81      	ldr	r3, [pc, #516]	@ (8008148 <_dtoa_r+0x580>)
 8007f44:	4d81      	ldr	r5, [pc, #516]	@ (800814c <_dtoa_r+0x584>)
 8007f46:	f004 020f 	and.w	r2, r4, #15
 8007f4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f52:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007f56:	f7f8 fb57 	bl	8000608 <__aeabi_dmul>
 8007f5a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007f5e:	1124      	asrs	r4, r4, #4
 8007f60:	2300      	movs	r3, #0
 8007f62:	2602      	movs	r6, #2
 8007f64:	2c00      	cmp	r4, #0
 8007f66:	f040 808f 	bne.w	8008088 <_dtoa_r+0x4c0>
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d1d3      	bne.n	8007f16 <_dtoa_r+0x34e>
 8007f6e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007f70:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	f000 8094 	beq.w	80080a2 <_dtoa_r+0x4da>
 8007f7a:	4b75      	ldr	r3, [pc, #468]	@ (8008150 <_dtoa_r+0x588>)
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	4620      	mov	r0, r4
 8007f80:	4629      	mov	r1, r5
 8007f82:	f7f8 fdb3 	bl	8000aec <__aeabi_dcmplt>
 8007f86:	2800      	cmp	r0, #0
 8007f88:	f000 808b 	beq.w	80080a2 <_dtoa_r+0x4da>
 8007f8c:	9b03      	ldr	r3, [sp, #12]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	f000 8087 	beq.w	80080a2 <_dtoa_r+0x4da>
 8007f94:	f1bb 0f00 	cmp.w	fp, #0
 8007f98:	dd34      	ble.n	8008004 <_dtoa_r+0x43c>
 8007f9a:	4620      	mov	r0, r4
 8007f9c:	4b6d      	ldr	r3, [pc, #436]	@ (8008154 <_dtoa_r+0x58c>)
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	4629      	mov	r1, r5
 8007fa2:	f7f8 fb31 	bl	8000608 <__aeabi_dmul>
 8007fa6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007faa:	f107 38ff 	add.w	r8, r7, #4294967295
 8007fae:	3601      	adds	r6, #1
 8007fb0:	465c      	mov	r4, fp
 8007fb2:	4630      	mov	r0, r6
 8007fb4:	f7f8 fabe 	bl	8000534 <__aeabi_i2d>
 8007fb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007fbc:	f7f8 fb24 	bl	8000608 <__aeabi_dmul>
 8007fc0:	4b65      	ldr	r3, [pc, #404]	@ (8008158 <_dtoa_r+0x590>)
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	f7f8 f96a 	bl	800029c <__adddf3>
 8007fc8:	4605      	mov	r5, r0
 8007fca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007fce:	2c00      	cmp	r4, #0
 8007fd0:	d16a      	bne.n	80080a8 <_dtoa_r+0x4e0>
 8007fd2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007fd6:	4b61      	ldr	r3, [pc, #388]	@ (800815c <_dtoa_r+0x594>)
 8007fd8:	2200      	movs	r2, #0
 8007fda:	f7f8 f95d 	bl	8000298 <__aeabi_dsub>
 8007fde:	4602      	mov	r2, r0
 8007fe0:	460b      	mov	r3, r1
 8007fe2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007fe6:	462a      	mov	r2, r5
 8007fe8:	4633      	mov	r3, r6
 8007fea:	f7f8 fd9d 	bl	8000b28 <__aeabi_dcmpgt>
 8007fee:	2800      	cmp	r0, #0
 8007ff0:	f040 8298 	bne.w	8008524 <_dtoa_r+0x95c>
 8007ff4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ff8:	462a      	mov	r2, r5
 8007ffa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007ffe:	f7f8 fd75 	bl	8000aec <__aeabi_dcmplt>
 8008002:	bb38      	cbnz	r0, 8008054 <_dtoa_r+0x48c>
 8008004:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8008008:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800800c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800800e:	2b00      	cmp	r3, #0
 8008010:	f2c0 8157 	blt.w	80082c2 <_dtoa_r+0x6fa>
 8008014:	2f0e      	cmp	r7, #14
 8008016:	f300 8154 	bgt.w	80082c2 <_dtoa_r+0x6fa>
 800801a:	4b4b      	ldr	r3, [pc, #300]	@ (8008148 <_dtoa_r+0x580>)
 800801c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008020:	ed93 7b00 	vldr	d7, [r3]
 8008024:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008026:	2b00      	cmp	r3, #0
 8008028:	ed8d 7b00 	vstr	d7, [sp]
 800802c:	f280 80e5 	bge.w	80081fa <_dtoa_r+0x632>
 8008030:	9b03      	ldr	r3, [sp, #12]
 8008032:	2b00      	cmp	r3, #0
 8008034:	f300 80e1 	bgt.w	80081fa <_dtoa_r+0x632>
 8008038:	d10c      	bne.n	8008054 <_dtoa_r+0x48c>
 800803a:	4b48      	ldr	r3, [pc, #288]	@ (800815c <_dtoa_r+0x594>)
 800803c:	2200      	movs	r2, #0
 800803e:	ec51 0b17 	vmov	r0, r1, d7
 8008042:	f7f8 fae1 	bl	8000608 <__aeabi_dmul>
 8008046:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800804a:	f7f8 fd63 	bl	8000b14 <__aeabi_dcmpge>
 800804e:	2800      	cmp	r0, #0
 8008050:	f000 8266 	beq.w	8008520 <_dtoa_r+0x958>
 8008054:	2400      	movs	r4, #0
 8008056:	4625      	mov	r5, r4
 8008058:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800805a:	4656      	mov	r6, sl
 800805c:	ea6f 0803 	mvn.w	r8, r3
 8008060:	2700      	movs	r7, #0
 8008062:	4621      	mov	r1, r4
 8008064:	4648      	mov	r0, r9
 8008066:	f000 fcbf 	bl	80089e8 <_Bfree>
 800806a:	2d00      	cmp	r5, #0
 800806c:	f000 80bd 	beq.w	80081ea <_dtoa_r+0x622>
 8008070:	b12f      	cbz	r7, 800807e <_dtoa_r+0x4b6>
 8008072:	42af      	cmp	r7, r5
 8008074:	d003      	beq.n	800807e <_dtoa_r+0x4b6>
 8008076:	4639      	mov	r1, r7
 8008078:	4648      	mov	r0, r9
 800807a:	f000 fcb5 	bl	80089e8 <_Bfree>
 800807e:	4629      	mov	r1, r5
 8008080:	4648      	mov	r0, r9
 8008082:	f000 fcb1 	bl	80089e8 <_Bfree>
 8008086:	e0b0      	b.n	80081ea <_dtoa_r+0x622>
 8008088:	07e2      	lsls	r2, r4, #31
 800808a:	d505      	bpl.n	8008098 <_dtoa_r+0x4d0>
 800808c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008090:	f7f8 faba 	bl	8000608 <__aeabi_dmul>
 8008094:	3601      	adds	r6, #1
 8008096:	2301      	movs	r3, #1
 8008098:	1064      	asrs	r4, r4, #1
 800809a:	3508      	adds	r5, #8
 800809c:	e762      	b.n	8007f64 <_dtoa_r+0x39c>
 800809e:	2602      	movs	r6, #2
 80080a0:	e765      	b.n	8007f6e <_dtoa_r+0x3a6>
 80080a2:	9c03      	ldr	r4, [sp, #12]
 80080a4:	46b8      	mov	r8, r7
 80080a6:	e784      	b.n	8007fb2 <_dtoa_r+0x3ea>
 80080a8:	4b27      	ldr	r3, [pc, #156]	@ (8008148 <_dtoa_r+0x580>)
 80080aa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80080ac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80080b0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80080b4:	4454      	add	r4, sl
 80080b6:	2900      	cmp	r1, #0
 80080b8:	d054      	beq.n	8008164 <_dtoa_r+0x59c>
 80080ba:	4929      	ldr	r1, [pc, #164]	@ (8008160 <_dtoa_r+0x598>)
 80080bc:	2000      	movs	r0, #0
 80080be:	f7f8 fbcd 	bl	800085c <__aeabi_ddiv>
 80080c2:	4633      	mov	r3, r6
 80080c4:	462a      	mov	r2, r5
 80080c6:	f7f8 f8e7 	bl	8000298 <__aeabi_dsub>
 80080ca:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80080ce:	4656      	mov	r6, sl
 80080d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80080d4:	f7f8 fd48 	bl	8000b68 <__aeabi_d2iz>
 80080d8:	4605      	mov	r5, r0
 80080da:	f7f8 fa2b 	bl	8000534 <__aeabi_i2d>
 80080de:	4602      	mov	r2, r0
 80080e0:	460b      	mov	r3, r1
 80080e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80080e6:	f7f8 f8d7 	bl	8000298 <__aeabi_dsub>
 80080ea:	3530      	adds	r5, #48	@ 0x30
 80080ec:	4602      	mov	r2, r0
 80080ee:	460b      	mov	r3, r1
 80080f0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80080f4:	f806 5b01 	strb.w	r5, [r6], #1
 80080f8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80080fc:	f7f8 fcf6 	bl	8000aec <__aeabi_dcmplt>
 8008100:	2800      	cmp	r0, #0
 8008102:	d172      	bne.n	80081ea <_dtoa_r+0x622>
 8008104:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008108:	4911      	ldr	r1, [pc, #68]	@ (8008150 <_dtoa_r+0x588>)
 800810a:	2000      	movs	r0, #0
 800810c:	f7f8 f8c4 	bl	8000298 <__aeabi_dsub>
 8008110:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008114:	f7f8 fcea 	bl	8000aec <__aeabi_dcmplt>
 8008118:	2800      	cmp	r0, #0
 800811a:	f040 80b4 	bne.w	8008286 <_dtoa_r+0x6be>
 800811e:	42a6      	cmp	r6, r4
 8008120:	f43f af70 	beq.w	8008004 <_dtoa_r+0x43c>
 8008124:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008128:	4b0a      	ldr	r3, [pc, #40]	@ (8008154 <_dtoa_r+0x58c>)
 800812a:	2200      	movs	r2, #0
 800812c:	f7f8 fa6c 	bl	8000608 <__aeabi_dmul>
 8008130:	4b08      	ldr	r3, [pc, #32]	@ (8008154 <_dtoa_r+0x58c>)
 8008132:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008136:	2200      	movs	r2, #0
 8008138:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800813c:	f7f8 fa64 	bl	8000608 <__aeabi_dmul>
 8008140:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008144:	e7c4      	b.n	80080d0 <_dtoa_r+0x508>
 8008146:	bf00      	nop
 8008148:	0800a868 	.word	0x0800a868
 800814c:	0800a840 	.word	0x0800a840
 8008150:	3ff00000 	.word	0x3ff00000
 8008154:	40240000 	.word	0x40240000
 8008158:	401c0000 	.word	0x401c0000
 800815c:	40140000 	.word	0x40140000
 8008160:	3fe00000 	.word	0x3fe00000
 8008164:	4631      	mov	r1, r6
 8008166:	4628      	mov	r0, r5
 8008168:	f7f8 fa4e 	bl	8000608 <__aeabi_dmul>
 800816c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008170:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008172:	4656      	mov	r6, sl
 8008174:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008178:	f7f8 fcf6 	bl	8000b68 <__aeabi_d2iz>
 800817c:	4605      	mov	r5, r0
 800817e:	f7f8 f9d9 	bl	8000534 <__aeabi_i2d>
 8008182:	4602      	mov	r2, r0
 8008184:	460b      	mov	r3, r1
 8008186:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800818a:	f7f8 f885 	bl	8000298 <__aeabi_dsub>
 800818e:	3530      	adds	r5, #48	@ 0x30
 8008190:	f806 5b01 	strb.w	r5, [r6], #1
 8008194:	4602      	mov	r2, r0
 8008196:	460b      	mov	r3, r1
 8008198:	42a6      	cmp	r6, r4
 800819a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800819e:	f04f 0200 	mov.w	r2, #0
 80081a2:	d124      	bne.n	80081ee <_dtoa_r+0x626>
 80081a4:	4baf      	ldr	r3, [pc, #700]	@ (8008464 <_dtoa_r+0x89c>)
 80081a6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80081aa:	f7f8 f877 	bl	800029c <__adddf3>
 80081ae:	4602      	mov	r2, r0
 80081b0:	460b      	mov	r3, r1
 80081b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80081b6:	f7f8 fcb7 	bl	8000b28 <__aeabi_dcmpgt>
 80081ba:	2800      	cmp	r0, #0
 80081bc:	d163      	bne.n	8008286 <_dtoa_r+0x6be>
 80081be:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80081c2:	49a8      	ldr	r1, [pc, #672]	@ (8008464 <_dtoa_r+0x89c>)
 80081c4:	2000      	movs	r0, #0
 80081c6:	f7f8 f867 	bl	8000298 <__aeabi_dsub>
 80081ca:	4602      	mov	r2, r0
 80081cc:	460b      	mov	r3, r1
 80081ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80081d2:	f7f8 fc8b 	bl	8000aec <__aeabi_dcmplt>
 80081d6:	2800      	cmp	r0, #0
 80081d8:	f43f af14 	beq.w	8008004 <_dtoa_r+0x43c>
 80081dc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80081de:	1e73      	subs	r3, r6, #1
 80081e0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80081e2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80081e6:	2b30      	cmp	r3, #48	@ 0x30
 80081e8:	d0f8      	beq.n	80081dc <_dtoa_r+0x614>
 80081ea:	4647      	mov	r7, r8
 80081ec:	e03b      	b.n	8008266 <_dtoa_r+0x69e>
 80081ee:	4b9e      	ldr	r3, [pc, #632]	@ (8008468 <_dtoa_r+0x8a0>)
 80081f0:	f7f8 fa0a 	bl	8000608 <__aeabi_dmul>
 80081f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80081f8:	e7bc      	b.n	8008174 <_dtoa_r+0x5ac>
 80081fa:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80081fe:	4656      	mov	r6, sl
 8008200:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008204:	4620      	mov	r0, r4
 8008206:	4629      	mov	r1, r5
 8008208:	f7f8 fb28 	bl	800085c <__aeabi_ddiv>
 800820c:	f7f8 fcac 	bl	8000b68 <__aeabi_d2iz>
 8008210:	4680      	mov	r8, r0
 8008212:	f7f8 f98f 	bl	8000534 <__aeabi_i2d>
 8008216:	e9dd 2300 	ldrd	r2, r3, [sp]
 800821a:	f7f8 f9f5 	bl	8000608 <__aeabi_dmul>
 800821e:	4602      	mov	r2, r0
 8008220:	460b      	mov	r3, r1
 8008222:	4620      	mov	r0, r4
 8008224:	4629      	mov	r1, r5
 8008226:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800822a:	f7f8 f835 	bl	8000298 <__aeabi_dsub>
 800822e:	f806 4b01 	strb.w	r4, [r6], #1
 8008232:	9d03      	ldr	r5, [sp, #12]
 8008234:	eba6 040a 	sub.w	r4, r6, sl
 8008238:	42a5      	cmp	r5, r4
 800823a:	4602      	mov	r2, r0
 800823c:	460b      	mov	r3, r1
 800823e:	d133      	bne.n	80082a8 <_dtoa_r+0x6e0>
 8008240:	f7f8 f82c 	bl	800029c <__adddf3>
 8008244:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008248:	4604      	mov	r4, r0
 800824a:	460d      	mov	r5, r1
 800824c:	f7f8 fc6c 	bl	8000b28 <__aeabi_dcmpgt>
 8008250:	b9c0      	cbnz	r0, 8008284 <_dtoa_r+0x6bc>
 8008252:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008256:	4620      	mov	r0, r4
 8008258:	4629      	mov	r1, r5
 800825a:	f7f8 fc3d 	bl	8000ad8 <__aeabi_dcmpeq>
 800825e:	b110      	cbz	r0, 8008266 <_dtoa_r+0x69e>
 8008260:	f018 0f01 	tst.w	r8, #1
 8008264:	d10e      	bne.n	8008284 <_dtoa_r+0x6bc>
 8008266:	9902      	ldr	r1, [sp, #8]
 8008268:	4648      	mov	r0, r9
 800826a:	f000 fbbd 	bl	80089e8 <_Bfree>
 800826e:	2300      	movs	r3, #0
 8008270:	7033      	strb	r3, [r6, #0]
 8008272:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008274:	3701      	adds	r7, #1
 8008276:	601f      	str	r7, [r3, #0]
 8008278:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800827a:	2b00      	cmp	r3, #0
 800827c:	f000 824b 	beq.w	8008716 <_dtoa_r+0xb4e>
 8008280:	601e      	str	r6, [r3, #0]
 8008282:	e248      	b.n	8008716 <_dtoa_r+0xb4e>
 8008284:	46b8      	mov	r8, r7
 8008286:	4633      	mov	r3, r6
 8008288:	461e      	mov	r6, r3
 800828a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800828e:	2a39      	cmp	r2, #57	@ 0x39
 8008290:	d106      	bne.n	80082a0 <_dtoa_r+0x6d8>
 8008292:	459a      	cmp	sl, r3
 8008294:	d1f8      	bne.n	8008288 <_dtoa_r+0x6c0>
 8008296:	2230      	movs	r2, #48	@ 0x30
 8008298:	f108 0801 	add.w	r8, r8, #1
 800829c:	f88a 2000 	strb.w	r2, [sl]
 80082a0:	781a      	ldrb	r2, [r3, #0]
 80082a2:	3201      	adds	r2, #1
 80082a4:	701a      	strb	r2, [r3, #0]
 80082a6:	e7a0      	b.n	80081ea <_dtoa_r+0x622>
 80082a8:	4b6f      	ldr	r3, [pc, #444]	@ (8008468 <_dtoa_r+0x8a0>)
 80082aa:	2200      	movs	r2, #0
 80082ac:	f7f8 f9ac 	bl	8000608 <__aeabi_dmul>
 80082b0:	2200      	movs	r2, #0
 80082b2:	2300      	movs	r3, #0
 80082b4:	4604      	mov	r4, r0
 80082b6:	460d      	mov	r5, r1
 80082b8:	f7f8 fc0e 	bl	8000ad8 <__aeabi_dcmpeq>
 80082bc:	2800      	cmp	r0, #0
 80082be:	d09f      	beq.n	8008200 <_dtoa_r+0x638>
 80082c0:	e7d1      	b.n	8008266 <_dtoa_r+0x69e>
 80082c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80082c4:	2a00      	cmp	r2, #0
 80082c6:	f000 80ea 	beq.w	800849e <_dtoa_r+0x8d6>
 80082ca:	9a07      	ldr	r2, [sp, #28]
 80082cc:	2a01      	cmp	r2, #1
 80082ce:	f300 80cd 	bgt.w	800846c <_dtoa_r+0x8a4>
 80082d2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80082d4:	2a00      	cmp	r2, #0
 80082d6:	f000 80c1 	beq.w	800845c <_dtoa_r+0x894>
 80082da:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80082de:	9c08      	ldr	r4, [sp, #32]
 80082e0:	9e00      	ldr	r6, [sp, #0]
 80082e2:	9a00      	ldr	r2, [sp, #0]
 80082e4:	441a      	add	r2, r3
 80082e6:	9200      	str	r2, [sp, #0]
 80082e8:	9a06      	ldr	r2, [sp, #24]
 80082ea:	2101      	movs	r1, #1
 80082ec:	441a      	add	r2, r3
 80082ee:	4648      	mov	r0, r9
 80082f0:	9206      	str	r2, [sp, #24]
 80082f2:	f000 fc2d 	bl	8008b50 <__i2b>
 80082f6:	4605      	mov	r5, r0
 80082f8:	b166      	cbz	r6, 8008314 <_dtoa_r+0x74c>
 80082fa:	9b06      	ldr	r3, [sp, #24]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	dd09      	ble.n	8008314 <_dtoa_r+0x74c>
 8008300:	42b3      	cmp	r3, r6
 8008302:	9a00      	ldr	r2, [sp, #0]
 8008304:	bfa8      	it	ge
 8008306:	4633      	movge	r3, r6
 8008308:	1ad2      	subs	r2, r2, r3
 800830a:	9200      	str	r2, [sp, #0]
 800830c:	9a06      	ldr	r2, [sp, #24]
 800830e:	1af6      	subs	r6, r6, r3
 8008310:	1ad3      	subs	r3, r2, r3
 8008312:	9306      	str	r3, [sp, #24]
 8008314:	9b08      	ldr	r3, [sp, #32]
 8008316:	b30b      	cbz	r3, 800835c <_dtoa_r+0x794>
 8008318:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800831a:	2b00      	cmp	r3, #0
 800831c:	f000 80c6 	beq.w	80084ac <_dtoa_r+0x8e4>
 8008320:	2c00      	cmp	r4, #0
 8008322:	f000 80c0 	beq.w	80084a6 <_dtoa_r+0x8de>
 8008326:	4629      	mov	r1, r5
 8008328:	4622      	mov	r2, r4
 800832a:	4648      	mov	r0, r9
 800832c:	f000 fcc8 	bl	8008cc0 <__pow5mult>
 8008330:	9a02      	ldr	r2, [sp, #8]
 8008332:	4601      	mov	r1, r0
 8008334:	4605      	mov	r5, r0
 8008336:	4648      	mov	r0, r9
 8008338:	f000 fc20 	bl	8008b7c <__multiply>
 800833c:	9902      	ldr	r1, [sp, #8]
 800833e:	4680      	mov	r8, r0
 8008340:	4648      	mov	r0, r9
 8008342:	f000 fb51 	bl	80089e8 <_Bfree>
 8008346:	9b08      	ldr	r3, [sp, #32]
 8008348:	1b1b      	subs	r3, r3, r4
 800834a:	9308      	str	r3, [sp, #32]
 800834c:	f000 80b1 	beq.w	80084b2 <_dtoa_r+0x8ea>
 8008350:	9a08      	ldr	r2, [sp, #32]
 8008352:	4641      	mov	r1, r8
 8008354:	4648      	mov	r0, r9
 8008356:	f000 fcb3 	bl	8008cc0 <__pow5mult>
 800835a:	9002      	str	r0, [sp, #8]
 800835c:	2101      	movs	r1, #1
 800835e:	4648      	mov	r0, r9
 8008360:	f000 fbf6 	bl	8008b50 <__i2b>
 8008364:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008366:	4604      	mov	r4, r0
 8008368:	2b00      	cmp	r3, #0
 800836a:	f000 81d8 	beq.w	800871e <_dtoa_r+0xb56>
 800836e:	461a      	mov	r2, r3
 8008370:	4601      	mov	r1, r0
 8008372:	4648      	mov	r0, r9
 8008374:	f000 fca4 	bl	8008cc0 <__pow5mult>
 8008378:	9b07      	ldr	r3, [sp, #28]
 800837a:	2b01      	cmp	r3, #1
 800837c:	4604      	mov	r4, r0
 800837e:	f300 809f 	bgt.w	80084c0 <_dtoa_r+0x8f8>
 8008382:	9b04      	ldr	r3, [sp, #16]
 8008384:	2b00      	cmp	r3, #0
 8008386:	f040 8097 	bne.w	80084b8 <_dtoa_r+0x8f0>
 800838a:	9b05      	ldr	r3, [sp, #20]
 800838c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008390:	2b00      	cmp	r3, #0
 8008392:	f040 8093 	bne.w	80084bc <_dtoa_r+0x8f4>
 8008396:	9b05      	ldr	r3, [sp, #20]
 8008398:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800839c:	0d1b      	lsrs	r3, r3, #20
 800839e:	051b      	lsls	r3, r3, #20
 80083a0:	b133      	cbz	r3, 80083b0 <_dtoa_r+0x7e8>
 80083a2:	9b00      	ldr	r3, [sp, #0]
 80083a4:	3301      	adds	r3, #1
 80083a6:	9300      	str	r3, [sp, #0]
 80083a8:	9b06      	ldr	r3, [sp, #24]
 80083aa:	3301      	adds	r3, #1
 80083ac:	9306      	str	r3, [sp, #24]
 80083ae:	2301      	movs	r3, #1
 80083b0:	9308      	str	r3, [sp, #32]
 80083b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	f000 81b8 	beq.w	800872a <_dtoa_r+0xb62>
 80083ba:	6923      	ldr	r3, [r4, #16]
 80083bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80083c0:	6918      	ldr	r0, [r3, #16]
 80083c2:	f000 fb79 	bl	8008ab8 <__hi0bits>
 80083c6:	f1c0 0020 	rsb	r0, r0, #32
 80083ca:	9b06      	ldr	r3, [sp, #24]
 80083cc:	4418      	add	r0, r3
 80083ce:	f010 001f 	ands.w	r0, r0, #31
 80083d2:	f000 8082 	beq.w	80084da <_dtoa_r+0x912>
 80083d6:	f1c0 0320 	rsb	r3, r0, #32
 80083da:	2b04      	cmp	r3, #4
 80083dc:	dd73      	ble.n	80084c6 <_dtoa_r+0x8fe>
 80083de:	9b00      	ldr	r3, [sp, #0]
 80083e0:	f1c0 001c 	rsb	r0, r0, #28
 80083e4:	4403      	add	r3, r0
 80083e6:	9300      	str	r3, [sp, #0]
 80083e8:	9b06      	ldr	r3, [sp, #24]
 80083ea:	4403      	add	r3, r0
 80083ec:	4406      	add	r6, r0
 80083ee:	9306      	str	r3, [sp, #24]
 80083f0:	9b00      	ldr	r3, [sp, #0]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	dd05      	ble.n	8008402 <_dtoa_r+0x83a>
 80083f6:	9902      	ldr	r1, [sp, #8]
 80083f8:	461a      	mov	r2, r3
 80083fa:	4648      	mov	r0, r9
 80083fc:	f000 fcba 	bl	8008d74 <__lshift>
 8008400:	9002      	str	r0, [sp, #8]
 8008402:	9b06      	ldr	r3, [sp, #24]
 8008404:	2b00      	cmp	r3, #0
 8008406:	dd05      	ble.n	8008414 <_dtoa_r+0x84c>
 8008408:	4621      	mov	r1, r4
 800840a:	461a      	mov	r2, r3
 800840c:	4648      	mov	r0, r9
 800840e:	f000 fcb1 	bl	8008d74 <__lshift>
 8008412:	4604      	mov	r4, r0
 8008414:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008416:	2b00      	cmp	r3, #0
 8008418:	d061      	beq.n	80084de <_dtoa_r+0x916>
 800841a:	9802      	ldr	r0, [sp, #8]
 800841c:	4621      	mov	r1, r4
 800841e:	f000 fd15 	bl	8008e4c <__mcmp>
 8008422:	2800      	cmp	r0, #0
 8008424:	da5b      	bge.n	80084de <_dtoa_r+0x916>
 8008426:	2300      	movs	r3, #0
 8008428:	9902      	ldr	r1, [sp, #8]
 800842a:	220a      	movs	r2, #10
 800842c:	4648      	mov	r0, r9
 800842e:	f000 fafd 	bl	8008a2c <__multadd>
 8008432:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008434:	9002      	str	r0, [sp, #8]
 8008436:	f107 38ff 	add.w	r8, r7, #4294967295
 800843a:	2b00      	cmp	r3, #0
 800843c:	f000 8177 	beq.w	800872e <_dtoa_r+0xb66>
 8008440:	4629      	mov	r1, r5
 8008442:	2300      	movs	r3, #0
 8008444:	220a      	movs	r2, #10
 8008446:	4648      	mov	r0, r9
 8008448:	f000 faf0 	bl	8008a2c <__multadd>
 800844c:	f1bb 0f00 	cmp.w	fp, #0
 8008450:	4605      	mov	r5, r0
 8008452:	dc6f      	bgt.n	8008534 <_dtoa_r+0x96c>
 8008454:	9b07      	ldr	r3, [sp, #28]
 8008456:	2b02      	cmp	r3, #2
 8008458:	dc49      	bgt.n	80084ee <_dtoa_r+0x926>
 800845a:	e06b      	b.n	8008534 <_dtoa_r+0x96c>
 800845c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800845e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008462:	e73c      	b.n	80082de <_dtoa_r+0x716>
 8008464:	3fe00000 	.word	0x3fe00000
 8008468:	40240000 	.word	0x40240000
 800846c:	9b03      	ldr	r3, [sp, #12]
 800846e:	1e5c      	subs	r4, r3, #1
 8008470:	9b08      	ldr	r3, [sp, #32]
 8008472:	42a3      	cmp	r3, r4
 8008474:	db09      	blt.n	800848a <_dtoa_r+0x8c2>
 8008476:	1b1c      	subs	r4, r3, r4
 8008478:	9b03      	ldr	r3, [sp, #12]
 800847a:	2b00      	cmp	r3, #0
 800847c:	f6bf af30 	bge.w	80082e0 <_dtoa_r+0x718>
 8008480:	9b00      	ldr	r3, [sp, #0]
 8008482:	9a03      	ldr	r2, [sp, #12]
 8008484:	1a9e      	subs	r6, r3, r2
 8008486:	2300      	movs	r3, #0
 8008488:	e72b      	b.n	80082e2 <_dtoa_r+0x71a>
 800848a:	9b08      	ldr	r3, [sp, #32]
 800848c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800848e:	9408      	str	r4, [sp, #32]
 8008490:	1ae3      	subs	r3, r4, r3
 8008492:	441a      	add	r2, r3
 8008494:	9e00      	ldr	r6, [sp, #0]
 8008496:	9b03      	ldr	r3, [sp, #12]
 8008498:	920d      	str	r2, [sp, #52]	@ 0x34
 800849a:	2400      	movs	r4, #0
 800849c:	e721      	b.n	80082e2 <_dtoa_r+0x71a>
 800849e:	9c08      	ldr	r4, [sp, #32]
 80084a0:	9e00      	ldr	r6, [sp, #0]
 80084a2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80084a4:	e728      	b.n	80082f8 <_dtoa_r+0x730>
 80084a6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80084aa:	e751      	b.n	8008350 <_dtoa_r+0x788>
 80084ac:	9a08      	ldr	r2, [sp, #32]
 80084ae:	9902      	ldr	r1, [sp, #8]
 80084b0:	e750      	b.n	8008354 <_dtoa_r+0x78c>
 80084b2:	f8cd 8008 	str.w	r8, [sp, #8]
 80084b6:	e751      	b.n	800835c <_dtoa_r+0x794>
 80084b8:	2300      	movs	r3, #0
 80084ba:	e779      	b.n	80083b0 <_dtoa_r+0x7e8>
 80084bc:	9b04      	ldr	r3, [sp, #16]
 80084be:	e777      	b.n	80083b0 <_dtoa_r+0x7e8>
 80084c0:	2300      	movs	r3, #0
 80084c2:	9308      	str	r3, [sp, #32]
 80084c4:	e779      	b.n	80083ba <_dtoa_r+0x7f2>
 80084c6:	d093      	beq.n	80083f0 <_dtoa_r+0x828>
 80084c8:	9a00      	ldr	r2, [sp, #0]
 80084ca:	331c      	adds	r3, #28
 80084cc:	441a      	add	r2, r3
 80084ce:	9200      	str	r2, [sp, #0]
 80084d0:	9a06      	ldr	r2, [sp, #24]
 80084d2:	441a      	add	r2, r3
 80084d4:	441e      	add	r6, r3
 80084d6:	9206      	str	r2, [sp, #24]
 80084d8:	e78a      	b.n	80083f0 <_dtoa_r+0x828>
 80084da:	4603      	mov	r3, r0
 80084dc:	e7f4      	b.n	80084c8 <_dtoa_r+0x900>
 80084de:	9b03      	ldr	r3, [sp, #12]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	46b8      	mov	r8, r7
 80084e4:	dc20      	bgt.n	8008528 <_dtoa_r+0x960>
 80084e6:	469b      	mov	fp, r3
 80084e8:	9b07      	ldr	r3, [sp, #28]
 80084ea:	2b02      	cmp	r3, #2
 80084ec:	dd1e      	ble.n	800852c <_dtoa_r+0x964>
 80084ee:	f1bb 0f00 	cmp.w	fp, #0
 80084f2:	f47f adb1 	bne.w	8008058 <_dtoa_r+0x490>
 80084f6:	4621      	mov	r1, r4
 80084f8:	465b      	mov	r3, fp
 80084fa:	2205      	movs	r2, #5
 80084fc:	4648      	mov	r0, r9
 80084fe:	f000 fa95 	bl	8008a2c <__multadd>
 8008502:	4601      	mov	r1, r0
 8008504:	4604      	mov	r4, r0
 8008506:	9802      	ldr	r0, [sp, #8]
 8008508:	f000 fca0 	bl	8008e4c <__mcmp>
 800850c:	2800      	cmp	r0, #0
 800850e:	f77f ada3 	ble.w	8008058 <_dtoa_r+0x490>
 8008512:	4656      	mov	r6, sl
 8008514:	2331      	movs	r3, #49	@ 0x31
 8008516:	f806 3b01 	strb.w	r3, [r6], #1
 800851a:	f108 0801 	add.w	r8, r8, #1
 800851e:	e59f      	b.n	8008060 <_dtoa_r+0x498>
 8008520:	9c03      	ldr	r4, [sp, #12]
 8008522:	46b8      	mov	r8, r7
 8008524:	4625      	mov	r5, r4
 8008526:	e7f4      	b.n	8008512 <_dtoa_r+0x94a>
 8008528:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800852c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800852e:	2b00      	cmp	r3, #0
 8008530:	f000 8101 	beq.w	8008736 <_dtoa_r+0xb6e>
 8008534:	2e00      	cmp	r6, #0
 8008536:	dd05      	ble.n	8008544 <_dtoa_r+0x97c>
 8008538:	4629      	mov	r1, r5
 800853a:	4632      	mov	r2, r6
 800853c:	4648      	mov	r0, r9
 800853e:	f000 fc19 	bl	8008d74 <__lshift>
 8008542:	4605      	mov	r5, r0
 8008544:	9b08      	ldr	r3, [sp, #32]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d05c      	beq.n	8008604 <_dtoa_r+0xa3c>
 800854a:	6869      	ldr	r1, [r5, #4]
 800854c:	4648      	mov	r0, r9
 800854e:	f000 fa0b 	bl	8008968 <_Balloc>
 8008552:	4606      	mov	r6, r0
 8008554:	b928      	cbnz	r0, 8008562 <_dtoa_r+0x99a>
 8008556:	4b82      	ldr	r3, [pc, #520]	@ (8008760 <_dtoa_r+0xb98>)
 8008558:	4602      	mov	r2, r0
 800855a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800855e:	f7ff bb4a 	b.w	8007bf6 <_dtoa_r+0x2e>
 8008562:	692a      	ldr	r2, [r5, #16]
 8008564:	3202      	adds	r2, #2
 8008566:	0092      	lsls	r2, r2, #2
 8008568:	f105 010c 	add.w	r1, r5, #12
 800856c:	300c      	adds	r0, #12
 800856e:	f7ff fa94 	bl	8007a9a <memcpy>
 8008572:	2201      	movs	r2, #1
 8008574:	4631      	mov	r1, r6
 8008576:	4648      	mov	r0, r9
 8008578:	f000 fbfc 	bl	8008d74 <__lshift>
 800857c:	f10a 0301 	add.w	r3, sl, #1
 8008580:	9300      	str	r3, [sp, #0]
 8008582:	eb0a 030b 	add.w	r3, sl, fp
 8008586:	9308      	str	r3, [sp, #32]
 8008588:	9b04      	ldr	r3, [sp, #16]
 800858a:	f003 0301 	and.w	r3, r3, #1
 800858e:	462f      	mov	r7, r5
 8008590:	9306      	str	r3, [sp, #24]
 8008592:	4605      	mov	r5, r0
 8008594:	9b00      	ldr	r3, [sp, #0]
 8008596:	9802      	ldr	r0, [sp, #8]
 8008598:	4621      	mov	r1, r4
 800859a:	f103 3bff 	add.w	fp, r3, #4294967295
 800859e:	f7ff fa8a 	bl	8007ab6 <quorem>
 80085a2:	4603      	mov	r3, r0
 80085a4:	3330      	adds	r3, #48	@ 0x30
 80085a6:	9003      	str	r0, [sp, #12]
 80085a8:	4639      	mov	r1, r7
 80085aa:	9802      	ldr	r0, [sp, #8]
 80085ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80085ae:	f000 fc4d 	bl	8008e4c <__mcmp>
 80085b2:	462a      	mov	r2, r5
 80085b4:	9004      	str	r0, [sp, #16]
 80085b6:	4621      	mov	r1, r4
 80085b8:	4648      	mov	r0, r9
 80085ba:	f000 fc63 	bl	8008e84 <__mdiff>
 80085be:	68c2      	ldr	r2, [r0, #12]
 80085c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085c2:	4606      	mov	r6, r0
 80085c4:	bb02      	cbnz	r2, 8008608 <_dtoa_r+0xa40>
 80085c6:	4601      	mov	r1, r0
 80085c8:	9802      	ldr	r0, [sp, #8]
 80085ca:	f000 fc3f 	bl	8008e4c <__mcmp>
 80085ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085d0:	4602      	mov	r2, r0
 80085d2:	4631      	mov	r1, r6
 80085d4:	4648      	mov	r0, r9
 80085d6:	920c      	str	r2, [sp, #48]	@ 0x30
 80085d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80085da:	f000 fa05 	bl	80089e8 <_Bfree>
 80085de:	9b07      	ldr	r3, [sp, #28]
 80085e0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80085e2:	9e00      	ldr	r6, [sp, #0]
 80085e4:	ea42 0103 	orr.w	r1, r2, r3
 80085e8:	9b06      	ldr	r3, [sp, #24]
 80085ea:	4319      	orrs	r1, r3
 80085ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085ee:	d10d      	bne.n	800860c <_dtoa_r+0xa44>
 80085f0:	2b39      	cmp	r3, #57	@ 0x39
 80085f2:	d027      	beq.n	8008644 <_dtoa_r+0xa7c>
 80085f4:	9a04      	ldr	r2, [sp, #16]
 80085f6:	2a00      	cmp	r2, #0
 80085f8:	dd01      	ble.n	80085fe <_dtoa_r+0xa36>
 80085fa:	9b03      	ldr	r3, [sp, #12]
 80085fc:	3331      	adds	r3, #49	@ 0x31
 80085fe:	f88b 3000 	strb.w	r3, [fp]
 8008602:	e52e      	b.n	8008062 <_dtoa_r+0x49a>
 8008604:	4628      	mov	r0, r5
 8008606:	e7b9      	b.n	800857c <_dtoa_r+0x9b4>
 8008608:	2201      	movs	r2, #1
 800860a:	e7e2      	b.n	80085d2 <_dtoa_r+0xa0a>
 800860c:	9904      	ldr	r1, [sp, #16]
 800860e:	2900      	cmp	r1, #0
 8008610:	db04      	blt.n	800861c <_dtoa_r+0xa54>
 8008612:	9807      	ldr	r0, [sp, #28]
 8008614:	4301      	orrs	r1, r0
 8008616:	9806      	ldr	r0, [sp, #24]
 8008618:	4301      	orrs	r1, r0
 800861a:	d120      	bne.n	800865e <_dtoa_r+0xa96>
 800861c:	2a00      	cmp	r2, #0
 800861e:	ddee      	ble.n	80085fe <_dtoa_r+0xa36>
 8008620:	9902      	ldr	r1, [sp, #8]
 8008622:	9300      	str	r3, [sp, #0]
 8008624:	2201      	movs	r2, #1
 8008626:	4648      	mov	r0, r9
 8008628:	f000 fba4 	bl	8008d74 <__lshift>
 800862c:	4621      	mov	r1, r4
 800862e:	9002      	str	r0, [sp, #8]
 8008630:	f000 fc0c 	bl	8008e4c <__mcmp>
 8008634:	2800      	cmp	r0, #0
 8008636:	9b00      	ldr	r3, [sp, #0]
 8008638:	dc02      	bgt.n	8008640 <_dtoa_r+0xa78>
 800863a:	d1e0      	bne.n	80085fe <_dtoa_r+0xa36>
 800863c:	07da      	lsls	r2, r3, #31
 800863e:	d5de      	bpl.n	80085fe <_dtoa_r+0xa36>
 8008640:	2b39      	cmp	r3, #57	@ 0x39
 8008642:	d1da      	bne.n	80085fa <_dtoa_r+0xa32>
 8008644:	2339      	movs	r3, #57	@ 0x39
 8008646:	f88b 3000 	strb.w	r3, [fp]
 800864a:	4633      	mov	r3, r6
 800864c:	461e      	mov	r6, r3
 800864e:	3b01      	subs	r3, #1
 8008650:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008654:	2a39      	cmp	r2, #57	@ 0x39
 8008656:	d04e      	beq.n	80086f6 <_dtoa_r+0xb2e>
 8008658:	3201      	adds	r2, #1
 800865a:	701a      	strb	r2, [r3, #0]
 800865c:	e501      	b.n	8008062 <_dtoa_r+0x49a>
 800865e:	2a00      	cmp	r2, #0
 8008660:	dd03      	ble.n	800866a <_dtoa_r+0xaa2>
 8008662:	2b39      	cmp	r3, #57	@ 0x39
 8008664:	d0ee      	beq.n	8008644 <_dtoa_r+0xa7c>
 8008666:	3301      	adds	r3, #1
 8008668:	e7c9      	b.n	80085fe <_dtoa_r+0xa36>
 800866a:	9a00      	ldr	r2, [sp, #0]
 800866c:	9908      	ldr	r1, [sp, #32]
 800866e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008672:	428a      	cmp	r2, r1
 8008674:	d028      	beq.n	80086c8 <_dtoa_r+0xb00>
 8008676:	9902      	ldr	r1, [sp, #8]
 8008678:	2300      	movs	r3, #0
 800867a:	220a      	movs	r2, #10
 800867c:	4648      	mov	r0, r9
 800867e:	f000 f9d5 	bl	8008a2c <__multadd>
 8008682:	42af      	cmp	r7, r5
 8008684:	9002      	str	r0, [sp, #8]
 8008686:	f04f 0300 	mov.w	r3, #0
 800868a:	f04f 020a 	mov.w	r2, #10
 800868e:	4639      	mov	r1, r7
 8008690:	4648      	mov	r0, r9
 8008692:	d107      	bne.n	80086a4 <_dtoa_r+0xadc>
 8008694:	f000 f9ca 	bl	8008a2c <__multadd>
 8008698:	4607      	mov	r7, r0
 800869a:	4605      	mov	r5, r0
 800869c:	9b00      	ldr	r3, [sp, #0]
 800869e:	3301      	adds	r3, #1
 80086a0:	9300      	str	r3, [sp, #0]
 80086a2:	e777      	b.n	8008594 <_dtoa_r+0x9cc>
 80086a4:	f000 f9c2 	bl	8008a2c <__multadd>
 80086a8:	4629      	mov	r1, r5
 80086aa:	4607      	mov	r7, r0
 80086ac:	2300      	movs	r3, #0
 80086ae:	220a      	movs	r2, #10
 80086b0:	4648      	mov	r0, r9
 80086b2:	f000 f9bb 	bl	8008a2c <__multadd>
 80086b6:	4605      	mov	r5, r0
 80086b8:	e7f0      	b.n	800869c <_dtoa_r+0xad4>
 80086ba:	f1bb 0f00 	cmp.w	fp, #0
 80086be:	bfcc      	ite	gt
 80086c0:	465e      	movgt	r6, fp
 80086c2:	2601      	movle	r6, #1
 80086c4:	4456      	add	r6, sl
 80086c6:	2700      	movs	r7, #0
 80086c8:	9902      	ldr	r1, [sp, #8]
 80086ca:	9300      	str	r3, [sp, #0]
 80086cc:	2201      	movs	r2, #1
 80086ce:	4648      	mov	r0, r9
 80086d0:	f000 fb50 	bl	8008d74 <__lshift>
 80086d4:	4621      	mov	r1, r4
 80086d6:	9002      	str	r0, [sp, #8]
 80086d8:	f000 fbb8 	bl	8008e4c <__mcmp>
 80086dc:	2800      	cmp	r0, #0
 80086de:	dcb4      	bgt.n	800864a <_dtoa_r+0xa82>
 80086e0:	d102      	bne.n	80086e8 <_dtoa_r+0xb20>
 80086e2:	9b00      	ldr	r3, [sp, #0]
 80086e4:	07db      	lsls	r3, r3, #31
 80086e6:	d4b0      	bmi.n	800864a <_dtoa_r+0xa82>
 80086e8:	4633      	mov	r3, r6
 80086ea:	461e      	mov	r6, r3
 80086ec:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80086f0:	2a30      	cmp	r2, #48	@ 0x30
 80086f2:	d0fa      	beq.n	80086ea <_dtoa_r+0xb22>
 80086f4:	e4b5      	b.n	8008062 <_dtoa_r+0x49a>
 80086f6:	459a      	cmp	sl, r3
 80086f8:	d1a8      	bne.n	800864c <_dtoa_r+0xa84>
 80086fa:	2331      	movs	r3, #49	@ 0x31
 80086fc:	f108 0801 	add.w	r8, r8, #1
 8008700:	f88a 3000 	strb.w	r3, [sl]
 8008704:	e4ad      	b.n	8008062 <_dtoa_r+0x49a>
 8008706:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008708:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8008764 <_dtoa_r+0xb9c>
 800870c:	b11b      	cbz	r3, 8008716 <_dtoa_r+0xb4e>
 800870e:	f10a 0308 	add.w	r3, sl, #8
 8008712:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008714:	6013      	str	r3, [r2, #0]
 8008716:	4650      	mov	r0, sl
 8008718:	b017      	add	sp, #92	@ 0x5c
 800871a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800871e:	9b07      	ldr	r3, [sp, #28]
 8008720:	2b01      	cmp	r3, #1
 8008722:	f77f ae2e 	ble.w	8008382 <_dtoa_r+0x7ba>
 8008726:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008728:	9308      	str	r3, [sp, #32]
 800872a:	2001      	movs	r0, #1
 800872c:	e64d      	b.n	80083ca <_dtoa_r+0x802>
 800872e:	f1bb 0f00 	cmp.w	fp, #0
 8008732:	f77f aed9 	ble.w	80084e8 <_dtoa_r+0x920>
 8008736:	4656      	mov	r6, sl
 8008738:	9802      	ldr	r0, [sp, #8]
 800873a:	4621      	mov	r1, r4
 800873c:	f7ff f9bb 	bl	8007ab6 <quorem>
 8008740:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8008744:	f806 3b01 	strb.w	r3, [r6], #1
 8008748:	eba6 020a 	sub.w	r2, r6, sl
 800874c:	4593      	cmp	fp, r2
 800874e:	ddb4      	ble.n	80086ba <_dtoa_r+0xaf2>
 8008750:	9902      	ldr	r1, [sp, #8]
 8008752:	2300      	movs	r3, #0
 8008754:	220a      	movs	r2, #10
 8008756:	4648      	mov	r0, r9
 8008758:	f000 f968 	bl	8008a2c <__multadd>
 800875c:	9002      	str	r0, [sp, #8]
 800875e:	e7eb      	b.n	8008738 <_dtoa_r+0xb70>
 8008760:	0800a76c 	.word	0x0800a76c
 8008764:	0800a6f0 	.word	0x0800a6f0

08008768 <_free_r>:
 8008768:	b538      	push	{r3, r4, r5, lr}
 800876a:	4605      	mov	r5, r0
 800876c:	2900      	cmp	r1, #0
 800876e:	d041      	beq.n	80087f4 <_free_r+0x8c>
 8008770:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008774:	1f0c      	subs	r4, r1, #4
 8008776:	2b00      	cmp	r3, #0
 8008778:	bfb8      	it	lt
 800877a:	18e4      	addlt	r4, r4, r3
 800877c:	f000 f8e8 	bl	8008950 <__malloc_lock>
 8008780:	4a1d      	ldr	r2, [pc, #116]	@ (80087f8 <_free_r+0x90>)
 8008782:	6813      	ldr	r3, [r2, #0]
 8008784:	b933      	cbnz	r3, 8008794 <_free_r+0x2c>
 8008786:	6063      	str	r3, [r4, #4]
 8008788:	6014      	str	r4, [r2, #0]
 800878a:	4628      	mov	r0, r5
 800878c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008790:	f000 b8e4 	b.w	800895c <__malloc_unlock>
 8008794:	42a3      	cmp	r3, r4
 8008796:	d908      	bls.n	80087aa <_free_r+0x42>
 8008798:	6820      	ldr	r0, [r4, #0]
 800879a:	1821      	adds	r1, r4, r0
 800879c:	428b      	cmp	r3, r1
 800879e:	bf01      	itttt	eq
 80087a0:	6819      	ldreq	r1, [r3, #0]
 80087a2:	685b      	ldreq	r3, [r3, #4]
 80087a4:	1809      	addeq	r1, r1, r0
 80087a6:	6021      	streq	r1, [r4, #0]
 80087a8:	e7ed      	b.n	8008786 <_free_r+0x1e>
 80087aa:	461a      	mov	r2, r3
 80087ac:	685b      	ldr	r3, [r3, #4]
 80087ae:	b10b      	cbz	r3, 80087b4 <_free_r+0x4c>
 80087b0:	42a3      	cmp	r3, r4
 80087b2:	d9fa      	bls.n	80087aa <_free_r+0x42>
 80087b4:	6811      	ldr	r1, [r2, #0]
 80087b6:	1850      	adds	r0, r2, r1
 80087b8:	42a0      	cmp	r0, r4
 80087ba:	d10b      	bne.n	80087d4 <_free_r+0x6c>
 80087bc:	6820      	ldr	r0, [r4, #0]
 80087be:	4401      	add	r1, r0
 80087c0:	1850      	adds	r0, r2, r1
 80087c2:	4283      	cmp	r3, r0
 80087c4:	6011      	str	r1, [r2, #0]
 80087c6:	d1e0      	bne.n	800878a <_free_r+0x22>
 80087c8:	6818      	ldr	r0, [r3, #0]
 80087ca:	685b      	ldr	r3, [r3, #4]
 80087cc:	6053      	str	r3, [r2, #4]
 80087ce:	4408      	add	r0, r1
 80087d0:	6010      	str	r0, [r2, #0]
 80087d2:	e7da      	b.n	800878a <_free_r+0x22>
 80087d4:	d902      	bls.n	80087dc <_free_r+0x74>
 80087d6:	230c      	movs	r3, #12
 80087d8:	602b      	str	r3, [r5, #0]
 80087da:	e7d6      	b.n	800878a <_free_r+0x22>
 80087dc:	6820      	ldr	r0, [r4, #0]
 80087de:	1821      	adds	r1, r4, r0
 80087e0:	428b      	cmp	r3, r1
 80087e2:	bf04      	itt	eq
 80087e4:	6819      	ldreq	r1, [r3, #0]
 80087e6:	685b      	ldreq	r3, [r3, #4]
 80087e8:	6063      	str	r3, [r4, #4]
 80087ea:	bf04      	itt	eq
 80087ec:	1809      	addeq	r1, r1, r0
 80087ee:	6021      	streq	r1, [r4, #0]
 80087f0:	6054      	str	r4, [r2, #4]
 80087f2:	e7ca      	b.n	800878a <_free_r+0x22>
 80087f4:	bd38      	pop	{r3, r4, r5, pc}
 80087f6:	bf00      	nop
 80087f8:	20004ad8 	.word	0x20004ad8

080087fc <malloc>:
 80087fc:	4b02      	ldr	r3, [pc, #8]	@ (8008808 <malloc+0xc>)
 80087fe:	4601      	mov	r1, r0
 8008800:	6818      	ldr	r0, [r3, #0]
 8008802:	f000 b825 	b.w	8008850 <_malloc_r>
 8008806:	bf00      	nop
 8008808:	20000018 	.word	0x20000018

0800880c <sbrk_aligned>:
 800880c:	b570      	push	{r4, r5, r6, lr}
 800880e:	4e0f      	ldr	r6, [pc, #60]	@ (800884c <sbrk_aligned+0x40>)
 8008810:	460c      	mov	r4, r1
 8008812:	6831      	ldr	r1, [r6, #0]
 8008814:	4605      	mov	r5, r0
 8008816:	b911      	cbnz	r1, 800881e <sbrk_aligned+0x12>
 8008818:	f000 fe3e 	bl	8009498 <_sbrk_r>
 800881c:	6030      	str	r0, [r6, #0]
 800881e:	4621      	mov	r1, r4
 8008820:	4628      	mov	r0, r5
 8008822:	f000 fe39 	bl	8009498 <_sbrk_r>
 8008826:	1c43      	adds	r3, r0, #1
 8008828:	d103      	bne.n	8008832 <sbrk_aligned+0x26>
 800882a:	f04f 34ff 	mov.w	r4, #4294967295
 800882e:	4620      	mov	r0, r4
 8008830:	bd70      	pop	{r4, r5, r6, pc}
 8008832:	1cc4      	adds	r4, r0, #3
 8008834:	f024 0403 	bic.w	r4, r4, #3
 8008838:	42a0      	cmp	r0, r4
 800883a:	d0f8      	beq.n	800882e <sbrk_aligned+0x22>
 800883c:	1a21      	subs	r1, r4, r0
 800883e:	4628      	mov	r0, r5
 8008840:	f000 fe2a 	bl	8009498 <_sbrk_r>
 8008844:	3001      	adds	r0, #1
 8008846:	d1f2      	bne.n	800882e <sbrk_aligned+0x22>
 8008848:	e7ef      	b.n	800882a <sbrk_aligned+0x1e>
 800884a:	bf00      	nop
 800884c:	20004ad4 	.word	0x20004ad4

08008850 <_malloc_r>:
 8008850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008854:	1ccd      	adds	r5, r1, #3
 8008856:	f025 0503 	bic.w	r5, r5, #3
 800885a:	3508      	adds	r5, #8
 800885c:	2d0c      	cmp	r5, #12
 800885e:	bf38      	it	cc
 8008860:	250c      	movcc	r5, #12
 8008862:	2d00      	cmp	r5, #0
 8008864:	4606      	mov	r6, r0
 8008866:	db01      	blt.n	800886c <_malloc_r+0x1c>
 8008868:	42a9      	cmp	r1, r5
 800886a:	d904      	bls.n	8008876 <_malloc_r+0x26>
 800886c:	230c      	movs	r3, #12
 800886e:	6033      	str	r3, [r6, #0]
 8008870:	2000      	movs	r0, #0
 8008872:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008876:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800894c <_malloc_r+0xfc>
 800887a:	f000 f869 	bl	8008950 <__malloc_lock>
 800887e:	f8d8 3000 	ldr.w	r3, [r8]
 8008882:	461c      	mov	r4, r3
 8008884:	bb44      	cbnz	r4, 80088d8 <_malloc_r+0x88>
 8008886:	4629      	mov	r1, r5
 8008888:	4630      	mov	r0, r6
 800888a:	f7ff ffbf 	bl	800880c <sbrk_aligned>
 800888e:	1c43      	adds	r3, r0, #1
 8008890:	4604      	mov	r4, r0
 8008892:	d158      	bne.n	8008946 <_malloc_r+0xf6>
 8008894:	f8d8 4000 	ldr.w	r4, [r8]
 8008898:	4627      	mov	r7, r4
 800889a:	2f00      	cmp	r7, #0
 800889c:	d143      	bne.n	8008926 <_malloc_r+0xd6>
 800889e:	2c00      	cmp	r4, #0
 80088a0:	d04b      	beq.n	800893a <_malloc_r+0xea>
 80088a2:	6823      	ldr	r3, [r4, #0]
 80088a4:	4639      	mov	r1, r7
 80088a6:	4630      	mov	r0, r6
 80088a8:	eb04 0903 	add.w	r9, r4, r3
 80088ac:	f000 fdf4 	bl	8009498 <_sbrk_r>
 80088b0:	4581      	cmp	r9, r0
 80088b2:	d142      	bne.n	800893a <_malloc_r+0xea>
 80088b4:	6821      	ldr	r1, [r4, #0]
 80088b6:	1a6d      	subs	r5, r5, r1
 80088b8:	4629      	mov	r1, r5
 80088ba:	4630      	mov	r0, r6
 80088bc:	f7ff ffa6 	bl	800880c <sbrk_aligned>
 80088c0:	3001      	adds	r0, #1
 80088c2:	d03a      	beq.n	800893a <_malloc_r+0xea>
 80088c4:	6823      	ldr	r3, [r4, #0]
 80088c6:	442b      	add	r3, r5
 80088c8:	6023      	str	r3, [r4, #0]
 80088ca:	f8d8 3000 	ldr.w	r3, [r8]
 80088ce:	685a      	ldr	r2, [r3, #4]
 80088d0:	bb62      	cbnz	r2, 800892c <_malloc_r+0xdc>
 80088d2:	f8c8 7000 	str.w	r7, [r8]
 80088d6:	e00f      	b.n	80088f8 <_malloc_r+0xa8>
 80088d8:	6822      	ldr	r2, [r4, #0]
 80088da:	1b52      	subs	r2, r2, r5
 80088dc:	d420      	bmi.n	8008920 <_malloc_r+0xd0>
 80088de:	2a0b      	cmp	r2, #11
 80088e0:	d917      	bls.n	8008912 <_malloc_r+0xc2>
 80088e2:	1961      	adds	r1, r4, r5
 80088e4:	42a3      	cmp	r3, r4
 80088e6:	6025      	str	r5, [r4, #0]
 80088e8:	bf18      	it	ne
 80088ea:	6059      	strne	r1, [r3, #4]
 80088ec:	6863      	ldr	r3, [r4, #4]
 80088ee:	bf08      	it	eq
 80088f0:	f8c8 1000 	streq.w	r1, [r8]
 80088f4:	5162      	str	r2, [r4, r5]
 80088f6:	604b      	str	r3, [r1, #4]
 80088f8:	4630      	mov	r0, r6
 80088fa:	f000 f82f 	bl	800895c <__malloc_unlock>
 80088fe:	f104 000b 	add.w	r0, r4, #11
 8008902:	1d23      	adds	r3, r4, #4
 8008904:	f020 0007 	bic.w	r0, r0, #7
 8008908:	1ac2      	subs	r2, r0, r3
 800890a:	bf1c      	itt	ne
 800890c:	1a1b      	subne	r3, r3, r0
 800890e:	50a3      	strne	r3, [r4, r2]
 8008910:	e7af      	b.n	8008872 <_malloc_r+0x22>
 8008912:	6862      	ldr	r2, [r4, #4]
 8008914:	42a3      	cmp	r3, r4
 8008916:	bf0c      	ite	eq
 8008918:	f8c8 2000 	streq.w	r2, [r8]
 800891c:	605a      	strne	r2, [r3, #4]
 800891e:	e7eb      	b.n	80088f8 <_malloc_r+0xa8>
 8008920:	4623      	mov	r3, r4
 8008922:	6864      	ldr	r4, [r4, #4]
 8008924:	e7ae      	b.n	8008884 <_malloc_r+0x34>
 8008926:	463c      	mov	r4, r7
 8008928:	687f      	ldr	r7, [r7, #4]
 800892a:	e7b6      	b.n	800889a <_malloc_r+0x4a>
 800892c:	461a      	mov	r2, r3
 800892e:	685b      	ldr	r3, [r3, #4]
 8008930:	42a3      	cmp	r3, r4
 8008932:	d1fb      	bne.n	800892c <_malloc_r+0xdc>
 8008934:	2300      	movs	r3, #0
 8008936:	6053      	str	r3, [r2, #4]
 8008938:	e7de      	b.n	80088f8 <_malloc_r+0xa8>
 800893a:	230c      	movs	r3, #12
 800893c:	6033      	str	r3, [r6, #0]
 800893e:	4630      	mov	r0, r6
 8008940:	f000 f80c 	bl	800895c <__malloc_unlock>
 8008944:	e794      	b.n	8008870 <_malloc_r+0x20>
 8008946:	6005      	str	r5, [r0, #0]
 8008948:	e7d6      	b.n	80088f8 <_malloc_r+0xa8>
 800894a:	bf00      	nop
 800894c:	20004ad8 	.word	0x20004ad8

08008950 <__malloc_lock>:
 8008950:	4801      	ldr	r0, [pc, #4]	@ (8008958 <__malloc_lock+0x8>)
 8008952:	f7ff b8a0 	b.w	8007a96 <__retarget_lock_acquire_recursive>
 8008956:	bf00      	nop
 8008958:	20004ad0 	.word	0x20004ad0

0800895c <__malloc_unlock>:
 800895c:	4801      	ldr	r0, [pc, #4]	@ (8008964 <__malloc_unlock+0x8>)
 800895e:	f7ff b89b 	b.w	8007a98 <__retarget_lock_release_recursive>
 8008962:	bf00      	nop
 8008964:	20004ad0 	.word	0x20004ad0

08008968 <_Balloc>:
 8008968:	b570      	push	{r4, r5, r6, lr}
 800896a:	69c6      	ldr	r6, [r0, #28]
 800896c:	4604      	mov	r4, r0
 800896e:	460d      	mov	r5, r1
 8008970:	b976      	cbnz	r6, 8008990 <_Balloc+0x28>
 8008972:	2010      	movs	r0, #16
 8008974:	f7ff ff42 	bl	80087fc <malloc>
 8008978:	4602      	mov	r2, r0
 800897a:	61e0      	str	r0, [r4, #28]
 800897c:	b920      	cbnz	r0, 8008988 <_Balloc+0x20>
 800897e:	4b18      	ldr	r3, [pc, #96]	@ (80089e0 <_Balloc+0x78>)
 8008980:	4818      	ldr	r0, [pc, #96]	@ (80089e4 <_Balloc+0x7c>)
 8008982:	216b      	movs	r1, #107	@ 0x6b
 8008984:	f000 fd98 	bl	80094b8 <__assert_func>
 8008988:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800898c:	6006      	str	r6, [r0, #0]
 800898e:	60c6      	str	r6, [r0, #12]
 8008990:	69e6      	ldr	r6, [r4, #28]
 8008992:	68f3      	ldr	r3, [r6, #12]
 8008994:	b183      	cbz	r3, 80089b8 <_Balloc+0x50>
 8008996:	69e3      	ldr	r3, [r4, #28]
 8008998:	68db      	ldr	r3, [r3, #12]
 800899a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800899e:	b9b8      	cbnz	r0, 80089d0 <_Balloc+0x68>
 80089a0:	2101      	movs	r1, #1
 80089a2:	fa01 f605 	lsl.w	r6, r1, r5
 80089a6:	1d72      	adds	r2, r6, #5
 80089a8:	0092      	lsls	r2, r2, #2
 80089aa:	4620      	mov	r0, r4
 80089ac:	f000 fda2 	bl	80094f4 <_calloc_r>
 80089b0:	b160      	cbz	r0, 80089cc <_Balloc+0x64>
 80089b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80089b6:	e00e      	b.n	80089d6 <_Balloc+0x6e>
 80089b8:	2221      	movs	r2, #33	@ 0x21
 80089ba:	2104      	movs	r1, #4
 80089bc:	4620      	mov	r0, r4
 80089be:	f000 fd99 	bl	80094f4 <_calloc_r>
 80089c2:	69e3      	ldr	r3, [r4, #28]
 80089c4:	60f0      	str	r0, [r6, #12]
 80089c6:	68db      	ldr	r3, [r3, #12]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d1e4      	bne.n	8008996 <_Balloc+0x2e>
 80089cc:	2000      	movs	r0, #0
 80089ce:	bd70      	pop	{r4, r5, r6, pc}
 80089d0:	6802      	ldr	r2, [r0, #0]
 80089d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80089d6:	2300      	movs	r3, #0
 80089d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80089dc:	e7f7      	b.n	80089ce <_Balloc+0x66>
 80089de:	bf00      	nop
 80089e0:	0800a6fd 	.word	0x0800a6fd
 80089e4:	0800a77d 	.word	0x0800a77d

080089e8 <_Bfree>:
 80089e8:	b570      	push	{r4, r5, r6, lr}
 80089ea:	69c6      	ldr	r6, [r0, #28]
 80089ec:	4605      	mov	r5, r0
 80089ee:	460c      	mov	r4, r1
 80089f0:	b976      	cbnz	r6, 8008a10 <_Bfree+0x28>
 80089f2:	2010      	movs	r0, #16
 80089f4:	f7ff ff02 	bl	80087fc <malloc>
 80089f8:	4602      	mov	r2, r0
 80089fa:	61e8      	str	r0, [r5, #28]
 80089fc:	b920      	cbnz	r0, 8008a08 <_Bfree+0x20>
 80089fe:	4b09      	ldr	r3, [pc, #36]	@ (8008a24 <_Bfree+0x3c>)
 8008a00:	4809      	ldr	r0, [pc, #36]	@ (8008a28 <_Bfree+0x40>)
 8008a02:	218f      	movs	r1, #143	@ 0x8f
 8008a04:	f000 fd58 	bl	80094b8 <__assert_func>
 8008a08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008a0c:	6006      	str	r6, [r0, #0]
 8008a0e:	60c6      	str	r6, [r0, #12]
 8008a10:	b13c      	cbz	r4, 8008a22 <_Bfree+0x3a>
 8008a12:	69eb      	ldr	r3, [r5, #28]
 8008a14:	6862      	ldr	r2, [r4, #4]
 8008a16:	68db      	ldr	r3, [r3, #12]
 8008a18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008a1c:	6021      	str	r1, [r4, #0]
 8008a1e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008a22:	bd70      	pop	{r4, r5, r6, pc}
 8008a24:	0800a6fd 	.word	0x0800a6fd
 8008a28:	0800a77d 	.word	0x0800a77d

08008a2c <__multadd>:
 8008a2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a30:	690d      	ldr	r5, [r1, #16]
 8008a32:	4607      	mov	r7, r0
 8008a34:	460c      	mov	r4, r1
 8008a36:	461e      	mov	r6, r3
 8008a38:	f101 0c14 	add.w	ip, r1, #20
 8008a3c:	2000      	movs	r0, #0
 8008a3e:	f8dc 3000 	ldr.w	r3, [ip]
 8008a42:	b299      	uxth	r1, r3
 8008a44:	fb02 6101 	mla	r1, r2, r1, r6
 8008a48:	0c1e      	lsrs	r6, r3, #16
 8008a4a:	0c0b      	lsrs	r3, r1, #16
 8008a4c:	fb02 3306 	mla	r3, r2, r6, r3
 8008a50:	b289      	uxth	r1, r1
 8008a52:	3001      	adds	r0, #1
 8008a54:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008a58:	4285      	cmp	r5, r0
 8008a5a:	f84c 1b04 	str.w	r1, [ip], #4
 8008a5e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008a62:	dcec      	bgt.n	8008a3e <__multadd+0x12>
 8008a64:	b30e      	cbz	r6, 8008aaa <__multadd+0x7e>
 8008a66:	68a3      	ldr	r3, [r4, #8]
 8008a68:	42ab      	cmp	r3, r5
 8008a6a:	dc19      	bgt.n	8008aa0 <__multadd+0x74>
 8008a6c:	6861      	ldr	r1, [r4, #4]
 8008a6e:	4638      	mov	r0, r7
 8008a70:	3101      	adds	r1, #1
 8008a72:	f7ff ff79 	bl	8008968 <_Balloc>
 8008a76:	4680      	mov	r8, r0
 8008a78:	b928      	cbnz	r0, 8008a86 <__multadd+0x5a>
 8008a7a:	4602      	mov	r2, r0
 8008a7c:	4b0c      	ldr	r3, [pc, #48]	@ (8008ab0 <__multadd+0x84>)
 8008a7e:	480d      	ldr	r0, [pc, #52]	@ (8008ab4 <__multadd+0x88>)
 8008a80:	21ba      	movs	r1, #186	@ 0xba
 8008a82:	f000 fd19 	bl	80094b8 <__assert_func>
 8008a86:	6922      	ldr	r2, [r4, #16]
 8008a88:	3202      	adds	r2, #2
 8008a8a:	f104 010c 	add.w	r1, r4, #12
 8008a8e:	0092      	lsls	r2, r2, #2
 8008a90:	300c      	adds	r0, #12
 8008a92:	f7ff f802 	bl	8007a9a <memcpy>
 8008a96:	4621      	mov	r1, r4
 8008a98:	4638      	mov	r0, r7
 8008a9a:	f7ff ffa5 	bl	80089e8 <_Bfree>
 8008a9e:	4644      	mov	r4, r8
 8008aa0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008aa4:	3501      	adds	r5, #1
 8008aa6:	615e      	str	r6, [r3, #20]
 8008aa8:	6125      	str	r5, [r4, #16]
 8008aaa:	4620      	mov	r0, r4
 8008aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ab0:	0800a76c 	.word	0x0800a76c
 8008ab4:	0800a77d 	.word	0x0800a77d

08008ab8 <__hi0bits>:
 8008ab8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008abc:	4603      	mov	r3, r0
 8008abe:	bf36      	itet	cc
 8008ac0:	0403      	lslcc	r3, r0, #16
 8008ac2:	2000      	movcs	r0, #0
 8008ac4:	2010      	movcc	r0, #16
 8008ac6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008aca:	bf3c      	itt	cc
 8008acc:	021b      	lslcc	r3, r3, #8
 8008ace:	3008      	addcc	r0, #8
 8008ad0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008ad4:	bf3c      	itt	cc
 8008ad6:	011b      	lslcc	r3, r3, #4
 8008ad8:	3004      	addcc	r0, #4
 8008ada:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ade:	bf3c      	itt	cc
 8008ae0:	009b      	lslcc	r3, r3, #2
 8008ae2:	3002      	addcc	r0, #2
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	db05      	blt.n	8008af4 <__hi0bits+0x3c>
 8008ae8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008aec:	f100 0001 	add.w	r0, r0, #1
 8008af0:	bf08      	it	eq
 8008af2:	2020      	moveq	r0, #32
 8008af4:	4770      	bx	lr

08008af6 <__lo0bits>:
 8008af6:	6803      	ldr	r3, [r0, #0]
 8008af8:	4602      	mov	r2, r0
 8008afa:	f013 0007 	ands.w	r0, r3, #7
 8008afe:	d00b      	beq.n	8008b18 <__lo0bits+0x22>
 8008b00:	07d9      	lsls	r1, r3, #31
 8008b02:	d421      	bmi.n	8008b48 <__lo0bits+0x52>
 8008b04:	0798      	lsls	r0, r3, #30
 8008b06:	bf49      	itett	mi
 8008b08:	085b      	lsrmi	r3, r3, #1
 8008b0a:	089b      	lsrpl	r3, r3, #2
 8008b0c:	2001      	movmi	r0, #1
 8008b0e:	6013      	strmi	r3, [r2, #0]
 8008b10:	bf5c      	itt	pl
 8008b12:	6013      	strpl	r3, [r2, #0]
 8008b14:	2002      	movpl	r0, #2
 8008b16:	4770      	bx	lr
 8008b18:	b299      	uxth	r1, r3
 8008b1a:	b909      	cbnz	r1, 8008b20 <__lo0bits+0x2a>
 8008b1c:	0c1b      	lsrs	r3, r3, #16
 8008b1e:	2010      	movs	r0, #16
 8008b20:	b2d9      	uxtb	r1, r3
 8008b22:	b909      	cbnz	r1, 8008b28 <__lo0bits+0x32>
 8008b24:	3008      	adds	r0, #8
 8008b26:	0a1b      	lsrs	r3, r3, #8
 8008b28:	0719      	lsls	r1, r3, #28
 8008b2a:	bf04      	itt	eq
 8008b2c:	091b      	lsreq	r3, r3, #4
 8008b2e:	3004      	addeq	r0, #4
 8008b30:	0799      	lsls	r1, r3, #30
 8008b32:	bf04      	itt	eq
 8008b34:	089b      	lsreq	r3, r3, #2
 8008b36:	3002      	addeq	r0, #2
 8008b38:	07d9      	lsls	r1, r3, #31
 8008b3a:	d403      	bmi.n	8008b44 <__lo0bits+0x4e>
 8008b3c:	085b      	lsrs	r3, r3, #1
 8008b3e:	f100 0001 	add.w	r0, r0, #1
 8008b42:	d003      	beq.n	8008b4c <__lo0bits+0x56>
 8008b44:	6013      	str	r3, [r2, #0]
 8008b46:	4770      	bx	lr
 8008b48:	2000      	movs	r0, #0
 8008b4a:	4770      	bx	lr
 8008b4c:	2020      	movs	r0, #32
 8008b4e:	4770      	bx	lr

08008b50 <__i2b>:
 8008b50:	b510      	push	{r4, lr}
 8008b52:	460c      	mov	r4, r1
 8008b54:	2101      	movs	r1, #1
 8008b56:	f7ff ff07 	bl	8008968 <_Balloc>
 8008b5a:	4602      	mov	r2, r0
 8008b5c:	b928      	cbnz	r0, 8008b6a <__i2b+0x1a>
 8008b5e:	4b05      	ldr	r3, [pc, #20]	@ (8008b74 <__i2b+0x24>)
 8008b60:	4805      	ldr	r0, [pc, #20]	@ (8008b78 <__i2b+0x28>)
 8008b62:	f240 1145 	movw	r1, #325	@ 0x145
 8008b66:	f000 fca7 	bl	80094b8 <__assert_func>
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	6144      	str	r4, [r0, #20]
 8008b6e:	6103      	str	r3, [r0, #16]
 8008b70:	bd10      	pop	{r4, pc}
 8008b72:	bf00      	nop
 8008b74:	0800a76c 	.word	0x0800a76c
 8008b78:	0800a77d 	.word	0x0800a77d

08008b7c <__multiply>:
 8008b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b80:	4617      	mov	r7, r2
 8008b82:	690a      	ldr	r2, [r1, #16]
 8008b84:	693b      	ldr	r3, [r7, #16]
 8008b86:	429a      	cmp	r2, r3
 8008b88:	bfa8      	it	ge
 8008b8a:	463b      	movge	r3, r7
 8008b8c:	4689      	mov	r9, r1
 8008b8e:	bfa4      	itt	ge
 8008b90:	460f      	movge	r7, r1
 8008b92:	4699      	movge	r9, r3
 8008b94:	693d      	ldr	r5, [r7, #16]
 8008b96:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	6879      	ldr	r1, [r7, #4]
 8008b9e:	eb05 060a 	add.w	r6, r5, sl
 8008ba2:	42b3      	cmp	r3, r6
 8008ba4:	b085      	sub	sp, #20
 8008ba6:	bfb8      	it	lt
 8008ba8:	3101      	addlt	r1, #1
 8008baa:	f7ff fedd 	bl	8008968 <_Balloc>
 8008bae:	b930      	cbnz	r0, 8008bbe <__multiply+0x42>
 8008bb0:	4602      	mov	r2, r0
 8008bb2:	4b41      	ldr	r3, [pc, #260]	@ (8008cb8 <__multiply+0x13c>)
 8008bb4:	4841      	ldr	r0, [pc, #260]	@ (8008cbc <__multiply+0x140>)
 8008bb6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008bba:	f000 fc7d 	bl	80094b8 <__assert_func>
 8008bbe:	f100 0414 	add.w	r4, r0, #20
 8008bc2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8008bc6:	4623      	mov	r3, r4
 8008bc8:	2200      	movs	r2, #0
 8008bca:	4573      	cmp	r3, lr
 8008bcc:	d320      	bcc.n	8008c10 <__multiply+0x94>
 8008bce:	f107 0814 	add.w	r8, r7, #20
 8008bd2:	f109 0114 	add.w	r1, r9, #20
 8008bd6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8008bda:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008bde:	9302      	str	r3, [sp, #8]
 8008be0:	1beb      	subs	r3, r5, r7
 8008be2:	3b15      	subs	r3, #21
 8008be4:	f023 0303 	bic.w	r3, r3, #3
 8008be8:	3304      	adds	r3, #4
 8008bea:	3715      	adds	r7, #21
 8008bec:	42bd      	cmp	r5, r7
 8008bee:	bf38      	it	cc
 8008bf0:	2304      	movcc	r3, #4
 8008bf2:	9301      	str	r3, [sp, #4]
 8008bf4:	9b02      	ldr	r3, [sp, #8]
 8008bf6:	9103      	str	r1, [sp, #12]
 8008bf8:	428b      	cmp	r3, r1
 8008bfa:	d80c      	bhi.n	8008c16 <__multiply+0x9a>
 8008bfc:	2e00      	cmp	r6, #0
 8008bfe:	dd03      	ble.n	8008c08 <__multiply+0x8c>
 8008c00:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d055      	beq.n	8008cb4 <__multiply+0x138>
 8008c08:	6106      	str	r6, [r0, #16]
 8008c0a:	b005      	add	sp, #20
 8008c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c10:	f843 2b04 	str.w	r2, [r3], #4
 8008c14:	e7d9      	b.n	8008bca <__multiply+0x4e>
 8008c16:	f8b1 a000 	ldrh.w	sl, [r1]
 8008c1a:	f1ba 0f00 	cmp.w	sl, #0
 8008c1e:	d01f      	beq.n	8008c60 <__multiply+0xe4>
 8008c20:	46c4      	mov	ip, r8
 8008c22:	46a1      	mov	r9, r4
 8008c24:	2700      	movs	r7, #0
 8008c26:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008c2a:	f8d9 3000 	ldr.w	r3, [r9]
 8008c2e:	fa1f fb82 	uxth.w	fp, r2
 8008c32:	b29b      	uxth	r3, r3
 8008c34:	fb0a 330b 	mla	r3, sl, fp, r3
 8008c38:	443b      	add	r3, r7
 8008c3a:	f8d9 7000 	ldr.w	r7, [r9]
 8008c3e:	0c12      	lsrs	r2, r2, #16
 8008c40:	0c3f      	lsrs	r7, r7, #16
 8008c42:	fb0a 7202 	mla	r2, sl, r2, r7
 8008c46:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8008c4a:	b29b      	uxth	r3, r3
 8008c4c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008c50:	4565      	cmp	r5, ip
 8008c52:	f849 3b04 	str.w	r3, [r9], #4
 8008c56:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8008c5a:	d8e4      	bhi.n	8008c26 <__multiply+0xaa>
 8008c5c:	9b01      	ldr	r3, [sp, #4]
 8008c5e:	50e7      	str	r7, [r4, r3]
 8008c60:	9b03      	ldr	r3, [sp, #12]
 8008c62:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008c66:	3104      	adds	r1, #4
 8008c68:	f1b9 0f00 	cmp.w	r9, #0
 8008c6c:	d020      	beq.n	8008cb0 <__multiply+0x134>
 8008c6e:	6823      	ldr	r3, [r4, #0]
 8008c70:	4647      	mov	r7, r8
 8008c72:	46a4      	mov	ip, r4
 8008c74:	f04f 0a00 	mov.w	sl, #0
 8008c78:	f8b7 b000 	ldrh.w	fp, [r7]
 8008c7c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008c80:	fb09 220b 	mla	r2, r9, fp, r2
 8008c84:	4452      	add	r2, sl
 8008c86:	b29b      	uxth	r3, r3
 8008c88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008c8c:	f84c 3b04 	str.w	r3, [ip], #4
 8008c90:	f857 3b04 	ldr.w	r3, [r7], #4
 8008c94:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008c98:	f8bc 3000 	ldrh.w	r3, [ip]
 8008c9c:	fb09 330a 	mla	r3, r9, sl, r3
 8008ca0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008ca4:	42bd      	cmp	r5, r7
 8008ca6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008caa:	d8e5      	bhi.n	8008c78 <__multiply+0xfc>
 8008cac:	9a01      	ldr	r2, [sp, #4]
 8008cae:	50a3      	str	r3, [r4, r2]
 8008cb0:	3404      	adds	r4, #4
 8008cb2:	e79f      	b.n	8008bf4 <__multiply+0x78>
 8008cb4:	3e01      	subs	r6, #1
 8008cb6:	e7a1      	b.n	8008bfc <__multiply+0x80>
 8008cb8:	0800a76c 	.word	0x0800a76c
 8008cbc:	0800a77d 	.word	0x0800a77d

08008cc0 <__pow5mult>:
 8008cc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cc4:	4615      	mov	r5, r2
 8008cc6:	f012 0203 	ands.w	r2, r2, #3
 8008cca:	4607      	mov	r7, r0
 8008ccc:	460e      	mov	r6, r1
 8008cce:	d007      	beq.n	8008ce0 <__pow5mult+0x20>
 8008cd0:	4c25      	ldr	r4, [pc, #148]	@ (8008d68 <__pow5mult+0xa8>)
 8008cd2:	3a01      	subs	r2, #1
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008cda:	f7ff fea7 	bl	8008a2c <__multadd>
 8008cde:	4606      	mov	r6, r0
 8008ce0:	10ad      	asrs	r5, r5, #2
 8008ce2:	d03d      	beq.n	8008d60 <__pow5mult+0xa0>
 8008ce4:	69fc      	ldr	r4, [r7, #28]
 8008ce6:	b97c      	cbnz	r4, 8008d08 <__pow5mult+0x48>
 8008ce8:	2010      	movs	r0, #16
 8008cea:	f7ff fd87 	bl	80087fc <malloc>
 8008cee:	4602      	mov	r2, r0
 8008cf0:	61f8      	str	r0, [r7, #28]
 8008cf2:	b928      	cbnz	r0, 8008d00 <__pow5mult+0x40>
 8008cf4:	4b1d      	ldr	r3, [pc, #116]	@ (8008d6c <__pow5mult+0xac>)
 8008cf6:	481e      	ldr	r0, [pc, #120]	@ (8008d70 <__pow5mult+0xb0>)
 8008cf8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008cfc:	f000 fbdc 	bl	80094b8 <__assert_func>
 8008d00:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008d04:	6004      	str	r4, [r0, #0]
 8008d06:	60c4      	str	r4, [r0, #12]
 8008d08:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008d0c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008d10:	b94c      	cbnz	r4, 8008d26 <__pow5mult+0x66>
 8008d12:	f240 2171 	movw	r1, #625	@ 0x271
 8008d16:	4638      	mov	r0, r7
 8008d18:	f7ff ff1a 	bl	8008b50 <__i2b>
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008d22:	4604      	mov	r4, r0
 8008d24:	6003      	str	r3, [r0, #0]
 8008d26:	f04f 0900 	mov.w	r9, #0
 8008d2a:	07eb      	lsls	r3, r5, #31
 8008d2c:	d50a      	bpl.n	8008d44 <__pow5mult+0x84>
 8008d2e:	4631      	mov	r1, r6
 8008d30:	4622      	mov	r2, r4
 8008d32:	4638      	mov	r0, r7
 8008d34:	f7ff ff22 	bl	8008b7c <__multiply>
 8008d38:	4631      	mov	r1, r6
 8008d3a:	4680      	mov	r8, r0
 8008d3c:	4638      	mov	r0, r7
 8008d3e:	f7ff fe53 	bl	80089e8 <_Bfree>
 8008d42:	4646      	mov	r6, r8
 8008d44:	106d      	asrs	r5, r5, #1
 8008d46:	d00b      	beq.n	8008d60 <__pow5mult+0xa0>
 8008d48:	6820      	ldr	r0, [r4, #0]
 8008d4a:	b938      	cbnz	r0, 8008d5c <__pow5mult+0x9c>
 8008d4c:	4622      	mov	r2, r4
 8008d4e:	4621      	mov	r1, r4
 8008d50:	4638      	mov	r0, r7
 8008d52:	f7ff ff13 	bl	8008b7c <__multiply>
 8008d56:	6020      	str	r0, [r4, #0]
 8008d58:	f8c0 9000 	str.w	r9, [r0]
 8008d5c:	4604      	mov	r4, r0
 8008d5e:	e7e4      	b.n	8008d2a <__pow5mult+0x6a>
 8008d60:	4630      	mov	r0, r6
 8008d62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d66:	bf00      	nop
 8008d68:	0800a830 	.word	0x0800a830
 8008d6c:	0800a6fd 	.word	0x0800a6fd
 8008d70:	0800a77d 	.word	0x0800a77d

08008d74 <__lshift>:
 8008d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d78:	460c      	mov	r4, r1
 8008d7a:	6849      	ldr	r1, [r1, #4]
 8008d7c:	6923      	ldr	r3, [r4, #16]
 8008d7e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008d82:	68a3      	ldr	r3, [r4, #8]
 8008d84:	4607      	mov	r7, r0
 8008d86:	4691      	mov	r9, r2
 8008d88:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008d8c:	f108 0601 	add.w	r6, r8, #1
 8008d90:	42b3      	cmp	r3, r6
 8008d92:	db0b      	blt.n	8008dac <__lshift+0x38>
 8008d94:	4638      	mov	r0, r7
 8008d96:	f7ff fde7 	bl	8008968 <_Balloc>
 8008d9a:	4605      	mov	r5, r0
 8008d9c:	b948      	cbnz	r0, 8008db2 <__lshift+0x3e>
 8008d9e:	4602      	mov	r2, r0
 8008da0:	4b28      	ldr	r3, [pc, #160]	@ (8008e44 <__lshift+0xd0>)
 8008da2:	4829      	ldr	r0, [pc, #164]	@ (8008e48 <__lshift+0xd4>)
 8008da4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008da8:	f000 fb86 	bl	80094b8 <__assert_func>
 8008dac:	3101      	adds	r1, #1
 8008dae:	005b      	lsls	r3, r3, #1
 8008db0:	e7ee      	b.n	8008d90 <__lshift+0x1c>
 8008db2:	2300      	movs	r3, #0
 8008db4:	f100 0114 	add.w	r1, r0, #20
 8008db8:	f100 0210 	add.w	r2, r0, #16
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	4553      	cmp	r3, sl
 8008dc0:	db33      	blt.n	8008e2a <__lshift+0xb6>
 8008dc2:	6920      	ldr	r0, [r4, #16]
 8008dc4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008dc8:	f104 0314 	add.w	r3, r4, #20
 8008dcc:	f019 091f 	ands.w	r9, r9, #31
 8008dd0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008dd4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008dd8:	d02b      	beq.n	8008e32 <__lshift+0xbe>
 8008dda:	f1c9 0e20 	rsb	lr, r9, #32
 8008dde:	468a      	mov	sl, r1
 8008de0:	2200      	movs	r2, #0
 8008de2:	6818      	ldr	r0, [r3, #0]
 8008de4:	fa00 f009 	lsl.w	r0, r0, r9
 8008de8:	4310      	orrs	r0, r2
 8008dea:	f84a 0b04 	str.w	r0, [sl], #4
 8008dee:	f853 2b04 	ldr.w	r2, [r3], #4
 8008df2:	459c      	cmp	ip, r3
 8008df4:	fa22 f20e 	lsr.w	r2, r2, lr
 8008df8:	d8f3      	bhi.n	8008de2 <__lshift+0x6e>
 8008dfa:	ebac 0304 	sub.w	r3, ip, r4
 8008dfe:	3b15      	subs	r3, #21
 8008e00:	f023 0303 	bic.w	r3, r3, #3
 8008e04:	3304      	adds	r3, #4
 8008e06:	f104 0015 	add.w	r0, r4, #21
 8008e0a:	4560      	cmp	r0, ip
 8008e0c:	bf88      	it	hi
 8008e0e:	2304      	movhi	r3, #4
 8008e10:	50ca      	str	r2, [r1, r3]
 8008e12:	b10a      	cbz	r2, 8008e18 <__lshift+0xa4>
 8008e14:	f108 0602 	add.w	r6, r8, #2
 8008e18:	3e01      	subs	r6, #1
 8008e1a:	4638      	mov	r0, r7
 8008e1c:	612e      	str	r6, [r5, #16]
 8008e1e:	4621      	mov	r1, r4
 8008e20:	f7ff fde2 	bl	80089e8 <_Bfree>
 8008e24:	4628      	mov	r0, r5
 8008e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e2a:	f842 0f04 	str.w	r0, [r2, #4]!
 8008e2e:	3301      	adds	r3, #1
 8008e30:	e7c5      	b.n	8008dbe <__lshift+0x4a>
 8008e32:	3904      	subs	r1, #4
 8008e34:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e38:	f841 2f04 	str.w	r2, [r1, #4]!
 8008e3c:	459c      	cmp	ip, r3
 8008e3e:	d8f9      	bhi.n	8008e34 <__lshift+0xc0>
 8008e40:	e7ea      	b.n	8008e18 <__lshift+0xa4>
 8008e42:	bf00      	nop
 8008e44:	0800a76c 	.word	0x0800a76c
 8008e48:	0800a77d 	.word	0x0800a77d

08008e4c <__mcmp>:
 8008e4c:	690a      	ldr	r2, [r1, #16]
 8008e4e:	4603      	mov	r3, r0
 8008e50:	6900      	ldr	r0, [r0, #16]
 8008e52:	1a80      	subs	r0, r0, r2
 8008e54:	b530      	push	{r4, r5, lr}
 8008e56:	d10e      	bne.n	8008e76 <__mcmp+0x2a>
 8008e58:	3314      	adds	r3, #20
 8008e5a:	3114      	adds	r1, #20
 8008e5c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008e60:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008e64:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008e68:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008e6c:	4295      	cmp	r5, r2
 8008e6e:	d003      	beq.n	8008e78 <__mcmp+0x2c>
 8008e70:	d205      	bcs.n	8008e7e <__mcmp+0x32>
 8008e72:	f04f 30ff 	mov.w	r0, #4294967295
 8008e76:	bd30      	pop	{r4, r5, pc}
 8008e78:	42a3      	cmp	r3, r4
 8008e7a:	d3f3      	bcc.n	8008e64 <__mcmp+0x18>
 8008e7c:	e7fb      	b.n	8008e76 <__mcmp+0x2a>
 8008e7e:	2001      	movs	r0, #1
 8008e80:	e7f9      	b.n	8008e76 <__mcmp+0x2a>
	...

08008e84 <__mdiff>:
 8008e84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e88:	4689      	mov	r9, r1
 8008e8a:	4606      	mov	r6, r0
 8008e8c:	4611      	mov	r1, r2
 8008e8e:	4648      	mov	r0, r9
 8008e90:	4614      	mov	r4, r2
 8008e92:	f7ff ffdb 	bl	8008e4c <__mcmp>
 8008e96:	1e05      	subs	r5, r0, #0
 8008e98:	d112      	bne.n	8008ec0 <__mdiff+0x3c>
 8008e9a:	4629      	mov	r1, r5
 8008e9c:	4630      	mov	r0, r6
 8008e9e:	f7ff fd63 	bl	8008968 <_Balloc>
 8008ea2:	4602      	mov	r2, r0
 8008ea4:	b928      	cbnz	r0, 8008eb2 <__mdiff+0x2e>
 8008ea6:	4b3f      	ldr	r3, [pc, #252]	@ (8008fa4 <__mdiff+0x120>)
 8008ea8:	f240 2137 	movw	r1, #567	@ 0x237
 8008eac:	483e      	ldr	r0, [pc, #248]	@ (8008fa8 <__mdiff+0x124>)
 8008eae:	f000 fb03 	bl	80094b8 <__assert_func>
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008eb8:	4610      	mov	r0, r2
 8008eba:	b003      	add	sp, #12
 8008ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ec0:	bfbc      	itt	lt
 8008ec2:	464b      	movlt	r3, r9
 8008ec4:	46a1      	movlt	r9, r4
 8008ec6:	4630      	mov	r0, r6
 8008ec8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008ecc:	bfba      	itte	lt
 8008ece:	461c      	movlt	r4, r3
 8008ed0:	2501      	movlt	r5, #1
 8008ed2:	2500      	movge	r5, #0
 8008ed4:	f7ff fd48 	bl	8008968 <_Balloc>
 8008ed8:	4602      	mov	r2, r0
 8008eda:	b918      	cbnz	r0, 8008ee4 <__mdiff+0x60>
 8008edc:	4b31      	ldr	r3, [pc, #196]	@ (8008fa4 <__mdiff+0x120>)
 8008ede:	f240 2145 	movw	r1, #581	@ 0x245
 8008ee2:	e7e3      	b.n	8008eac <__mdiff+0x28>
 8008ee4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008ee8:	6926      	ldr	r6, [r4, #16]
 8008eea:	60c5      	str	r5, [r0, #12]
 8008eec:	f109 0310 	add.w	r3, r9, #16
 8008ef0:	f109 0514 	add.w	r5, r9, #20
 8008ef4:	f104 0e14 	add.w	lr, r4, #20
 8008ef8:	f100 0b14 	add.w	fp, r0, #20
 8008efc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008f00:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008f04:	9301      	str	r3, [sp, #4]
 8008f06:	46d9      	mov	r9, fp
 8008f08:	f04f 0c00 	mov.w	ip, #0
 8008f0c:	9b01      	ldr	r3, [sp, #4]
 8008f0e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008f12:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008f16:	9301      	str	r3, [sp, #4]
 8008f18:	fa1f f38a 	uxth.w	r3, sl
 8008f1c:	4619      	mov	r1, r3
 8008f1e:	b283      	uxth	r3, r0
 8008f20:	1acb      	subs	r3, r1, r3
 8008f22:	0c00      	lsrs	r0, r0, #16
 8008f24:	4463      	add	r3, ip
 8008f26:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008f2a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008f2e:	b29b      	uxth	r3, r3
 8008f30:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008f34:	4576      	cmp	r6, lr
 8008f36:	f849 3b04 	str.w	r3, [r9], #4
 8008f3a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008f3e:	d8e5      	bhi.n	8008f0c <__mdiff+0x88>
 8008f40:	1b33      	subs	r3, r6, r4
 8008f42:	3b15      	subs	r3, #21
 8008f44:	f023 0303 	bic.w	r3, r3, #3
 8008f48:	3415      	adds	r4, #21
 8008f4a:	3304      	adds	r3, #4
 8008f4c:	42a6      	cmp	r6, r4
 8008f4e:	bf38      	it	cc
 8008f50:	2304      	movcc	r3, #4
 8008f52:	441d      	add	r5, r3
 8008f54:	445b      	add	r3, fp
 8008f56:	461e      	mov	r6, r3
 8008f58:	462c      	mov	r4, r5
 8008f5a:	4544      	cmp	r4, r8
 8008f5c:	d30e      	bcc.n	8008f7c <__mdiff+0xf8>
 8008f5e:	f108 0103 	add.w	r1, r8, #3
 8008f62:	1b49      	subs	r1, r1, r5
 8008f64:	f021 0103 	bic.w	r1, r1, #3
 8008f68:	3d03      	subs	r5, #3
 8008f6a:	45a8      	cmp	r8, r5
 8008f6c:	bf38      	it	cc
 8008f6e:	2100      	movcc	r1, #0
 8008f70:	440b      	add	r3, r1
 8008f72:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008f76:	b191      	cbz	r1, 8008f9e <__mdiff+0x11a>
 8008f78:	6117      	str	r7, [r2, #16]
 8008f7a:	e79d      	b.n	8008eb8 <__mdiff+0x34>
 8008f7c:	f854 1b04 	ldr.w	r1, [r4], #4
 8008f80:	46e6      	mov	lr, ip
 8008f82:	0c08      	lsrs	r0, r1, #16
 8008f84:	fa1c fc81 	uxtah	ip, ip, r1
 8008f88:	4471      	add	r1, lr
 8008f8a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008f8e:	b289      	uxth	r1, r1
 8008f90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008f94:	f846 1b04 	str.w	r1, [r6], #4
 8008f98:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008f9c:	e7dd      	b.n	8008f5a <__mdiff+0xd6>
 8008f9e:	3f01      	subs	r7, #1
 8008fa0:	e7e7      	b.n	8008f72 <__mdiff+0xee>
 8008fa2:	bf00      	nop
 8008fa4:	0800a76c 	.word	0x0800a76c
 8008fa8:	0800a77d 	.word	0x0800a77d

08008fac <__d2b>:
 8008fac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008fb0:	460f      	mov	r7, r1
 8008fb2:	2101      	movs	r1, #1
 8008fb4:	ec59 8b10 	vmov	r8, r9, d0
 8008fb8:	4616      	mov	r6, r2
 8008fba:	f7ff fcd5 	bl	8008968 <_Balloc>
 8008fbe:	4604      	mov	r4, r0
 8008fc0:	b930      	cbnz	r0, 8008fd0 <__d2b+0x24>
 8008fc2:	4602      	mov	r2, r0
 8008fc4:	4b23      	ldr	r3, [pc, #140]	@ (8009054 <__d2b+0xa8>)
 8008fc6:	4824      	ldr	r0, [pc, #144]	@ (8009058 <__d2b+0xac>)
 8008fc8:	f240 310f 	movw	r1, #783	@ 0x30f
 8008fcc:	f000 fa74 	bl	80094b8 <__assert_func>
 8008fd0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008fd4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008fd8:	b10d      	cbz	r5, 8008fde <__d2b+0x32>
 8008fda:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008fde:	9301      	str	r3, [sp, #4]
 8008fe0:	f1b8 0300 	subs.w	r3, r8, #0
 8008fe4:	d023      	beq.n	800902e <__d2b+0x82>
 8008fe6:	4668      	mov	r0, sp
 8008fe8:	9300      	str	r3, [sp, #0]
 8008fea:	f7ff fd84 	bl	8008af6 <__lo0bits>
 8008fee:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008ff2:	b1d0      	cbz	r0, 800902a <__d2b+0x7e>
 8008ff4:	f1c0 0320 	rsb	r3, r0, #32
 8008ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8008ffc:	430b      	orrs	r3, r1
 8008ffe:	40c2      	lsrs	r2, r0
 8009000:	6163      	str	r3, [r4, #20]
 8009002:	9201      	str	r2, [sp, #4]
 8009004:	9b01      	ldr	r3, [sp, #4]
 8009006:	61a3      	str	r3, [r4, #24]
 8009008:	2b00      	cmp	r3, #0
 800900a:	bf0c      	ite	eq
 800900c:	2201      	moveq	r2, #1
 800900e:	2202      	movne	r2, #2
 8009010:	6122      	str	r2, [r4, #16]
 8009012:	b1a5      	cbz	r5, 800903e <__d2b+0x92>
 8009014:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009018:	4405      	add	r5, r0
 800901a:	603d      	str	r5, [r7, #0]
 800901c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009020:	6030      	str	r0, [r6, #0]
 8009022:	4620      	mov	r0, r4
 8009024:	b003      	add	sp, #12
 8009026:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800902a:	6161      	str	r1, [r4, #20]
 800902c:	e7ea      	b.n	8009004 <__d2b+0x58>
 800902e:	a801      	add	r0, sp, #4
 8009030:	f7ff fd61 	bl	8008af6 <__lo0bits>
 8009034:	9b01      	ldr	r3, [sp, #4]
 8009036:	6163      	str	r3, [r4, #20]
 8009038:	3020      	adds	r0, #32
 800903a:	2201      	movs	r2, #1
 800903c:	e7e8      	b.n	8009010 <__d2b+0x64>
 800903e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009042:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009046:	6038      	str	r0, [r7, #0]
 8009048:	6918      	ldr	r0, [r3, #16]
 800904a:	f7ff fd35 	bl	8008ab8 <__hi0bits>
 800904e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009052:	e7e5      	b.n	8009020 <__d2b+0x74>
 8009054:	0800a76c 	.word	0x0800a76c
 8009058:	0800a77d 	.word	0x0800a77d

0800905c <__ssputs_r>:
 800905c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009060:	688e      	ldr	r6, [r1, #8]
 8009062:	461f      	mov	r7, r3
 8009064:	42be      	cmp	r6, r7
 8009066:	680b      	ldr	r3, [r1, #0]
 8009068:	4682      	mov	sl, r0
 800906a:	460c      	mov	r4, r1
 800906c:	4690      	mov	r8, r2
 800906e:	d82d      	bhi.n	80090cc <__ssputs_r+0x70>
 8009070:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009074:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009078:	d026      	beq.n	80090c8 <__ssputs_r+0x6c>
 800907a:	6965      	ldr	r5, [r4, #20]
 800907c:	6909      	ldr	r1, [r1, #16]
 800907e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009082:	eba3 0901 	sub.w	r9, r3, r1
 8009086:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800908a:	1c7b      	adds	r3, r7, #1
 800908c:	444b      	add	r3, r9
 800908e:	106d      	asrs	r5, r5, #1
 8009090:	429d      	cmp	r5, r3
 8009092:	bf38      	it	cc
 8009094:	461d      	movcc	r5, r3
 8009096:	0553      	lsls	r3, r2, #21
 8009098:	d527      	bpl.n	80090ea <__ssputs_r+0x8e>
 800909a:	4629      	mov	r1, r5
 800909c:	f7ff fbd8 	bl	8008850 <_malloc_r>
 80090a0:	4606      	mov	r6, r0
 80090a2:	b360      	cbz	r0, 80090fe <__ssputs_r+0xa2>
 80090a4:	6921      	ldr	r1, [r4, #16]
 80090a6:	464a      	mov	r2, r9
 80090a8:	f7fe fcf7 	bl	8007a9a <memcpy>
 80090ac:	89a3      	ldrh	r3, [r4, #12]
 80090ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80090b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090b6:	81a3      	strh	r3, [r4, #12]
 80090b8:	6126      	str	r6, [r4, #16]
 80090ba:	6165      	str	r5, [r4, #20]
 80090bc:	444e      	add	r6, r9
 80090be:	eba5 0509 	sub.w	r5, r5, r9
 80090c2:	6026      	str	r6, [r4, #0]
 80090c4:	60a5      	str	r5, [r4, #8]
 80090c6:	463e      	mov	r6, r7
 80090c8:	42be      	cmp	r6, r7
 80090ca:	d900      	bls.n	80090ce <__ssputs_r+0x72>
 80090cc:	463e      	mov	r6, r7
 80090ce:	6820      	ldr	r0, [r4, #0]
 80090d0:	4632      	mov	r2, r6
 80090d2:	4641      	mov	r1, r8
 80090d4:	f000 f9c6 	bl	8009464 <memmove>
 80090d8:	68a3      	ldr	r3, [r4, #8]
 80090da:	1b9b      	subs	r3, r3, r6
 80090dc:	60a3      	str	r3, [r4, #8]
 80090de:	6823      	ldr	r3, [r4, #0]
 80090e0:	4433      	add	r3, r6
 80090e2:	6023      	str	r3, [r4, #0]
 80090e4:	2000      	movs	r0, #0
 80090e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090ea:	462a      	mov	r2, r5
 80090ec:	f000 fa28 	bl	8009540 <_realloc_r>
 80090f0:	4606      	mov	r6, r0
 80090f2:	2800      	cmp	r0, #0
 80090f4:	d1e0      	bne.n	80090b8 <__ssputs_r+0x5c>
 80090f6:	6921      	ldr	r1, [r4, #16]
 80090f8:	4650      	mov	r0, sl
 80090fa:	f7ff fb35 	bl	8008768 <_free_r>
 80090fe:	230c      	movs	r3, #12
 8009100:	f8ca 3000 	str.w	r3, [sl]
 8009104:	89a3      	ldrh	r3, [r4, #12]
 8009106:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800910a:	81a3      	strh	r3, [r4, #12]
 800910c:	f04f 30ff 	mov.w	r0, #4294967295
 8009110:	e7e9      	b.n	80090e6 <__ssputs_r+0x8a>
	...

08009114 <_svfiprintf_r>:
 8009114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009118:	4698      	mov	r8, r3
 800911a:	898b      	ldrh	r3, [r1, #12]
 800911c:	061b      	lsls	r3, r3, #24
 800911e:	b09d      	sub	sp, #116	@ 0x74
 8009120:	4607      	mov	r7, r0
 8009122:	460d      	mov	r5, r1
 8009124:	4614      	mov	r4, r2
 8009126:	d510      	bpl.n	800914a <_svfiprintf_r+0x36>
 8009128:	690b      	ldr	r3, [r1, #16]
 800912a:	b973      	cbnz	r3, 800914a <_svfiprintf_r+0x36>
 800912c:	2140      	movs	r1, #64	@ 0x40
 800912e:	f7ff fb8f 	bl	8008850 <_malloc_r>
 8009132:	6028      	str	r0, [r5, #0]
 8009134:	6128      	str	r0, [r5, #16]
 8009136:	b930      	cbnz	r0, 8009146 <_svfiprintf_r+0x32>
 8009138:	230c      	movs	r3, #12
 800913a:	603b      	str	r3, [r7, #0]
 800913c:	f04f 30ff 	mov.w	r0, #4294967295
 8009140:	b01d      	add	sp, #116	@ 0x74
 8009142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009146:	2340      	movs	r3, #64	@ 0x40
 8009148:	616b      	str	r3, [r5, #20]
 800914a:	2300      	movs	r3, #0
 800914c:	9309      	str	r3, [sp, #36]	@ 0x24
 800914e:	2320      	movs	r3, #32
 8009150:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009154:	f8cd 800c 	str.w	r8, [sp, #12]
 8009158:	2330      	movs	r3, #48	@ 0x30
 800915a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80092f8 <_svfiprintf_r+0x1e4>
 800915e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009162:	f04f 0901 	mov.w	r9, #1
 8009166:	4623      	mov	r3, r4
 8009168:	469a      	mov	sl, r3
 800916a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800916e:	b10a      	cbz	r2, 8009174 <_svfiprintf_r+0x60>
 8009170:	2a25      	cmp	r2, #37	@ 0x25
 8009172:	d1f9      	bne.n	8009168 <_svfiprintf_r+0x54>
 8009174:	ebba 0b04 	subs.w	fp, sl, r4
 8009178:	d00b      	beq.n	8009192 <_svfiprintf_r+0x7e>
 800917a:	465b      	mov	r3, fp
 800917c:	4622      	mov	r2, r4
 800917e:	4629      	mov	r1, r5
 8009180:	4638      	mov	r0, r7
 8009182:	f7ff ff6b 	bl	800905c <__ssputs_r>
 8009186:	3001      	adds	r0, #1
 8009188:	f000 80a7 	beq.w	80092da <_svfiprintf_r+0x1c6>
 800918c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800918e:	445a      	add	r2, fp
 8009190:	9209      	str	r2, [sp, #36]	@ 0x24
 8009192:	f89a 3000 	ldrb.w	r3, [sl]
 8009196:	2b00      	cmp	r3, #0
 8009198:	f000 809f 	beq.w	80092da <_svfiprintf_r+0x1c6>
 800919c:	2300      	movs	r3, #0
 800919e:	f04f 32ff 	mov.w	r2, #4294967295
 80091a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091a6:	f10a 0a01 	add.w	sl, sl, #1
 80091aa:	9304      	str	r3, [sp, #16]
 80091ac:	9307      	str	r3, [sp, #28]
 80091ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80091b2:	931a      	str	r3, [sp, #104]	@ 0x68
 80091b4:	4654      	mov	r4, sl
 80091b6:	2205      	movs	r2, #5
 80091b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091bc:	484e      	ldr	r0, [pc, #312]	@ (80092f8 <_svfiprintf_r+0x1e4>)
 80091be:	f7f7 f80f 	bl	80001e0 <memchr>
 80091c2:	9a04      	ldr	r2, [sp, #16]
 80091c4:	b9d8      	cbnz	r0, 80091fe <_svfiprintf_r+0xea>
 80091c6:	06d0      	lsls	r0, r2, #27
 80091c8:	bf44      	itt	mi
 80091ca:	2320      	movmi	r3, #32
 80091cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80091d0:	0711      	lsls	r1, r2, #28
 80091d2:	bf44      	itt	mi
 80091d4:	232b      	movmi	r3, #43	@ 0x2b
 80091d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80091da:	f89a 3000 	ldrb.w	r3, [sl]
 80091de:	2b2a      	cmp	r3, #42	@ 0x2a
 80091e0:	d015      	beq.n	800920e <_svfiprintf_r+0xfa>
 80091e2:	9a07      	ldr	r2, [sp, #28]
 80091e4:	4654      	mov	r4, sl
 80091e6:	2000      	movs	r0, #0
 80091e8:	f04f 0c0a 	mov.w	ip, #10
 80091ec:	4621      	mov	r1, r4
 80091ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80091f2:	3b30      	subs	r3, #48	@ 0x30
 80091f4:	2b09      	cmp	r3, #9
 80091f6:	d94b      	bls.n	8009290 <_svfiprintf_r+0x17c>
 80091f8:	b1b0      	cbz	r0, 8009228 <_svfiprintf_r+0x114>
 80091fa:	9207      	str	r2, [sp, #28]
 80091fc:	e014      	b.n	8009228 <_svfiprintf_r+0x114>
 80091fe:	eba0 0308 	sub.w	r3, r0, r8
 8009202:	fa09 f303 	lsl.w	r3, r9, r3
 8009206:	4313      	orrs	r3, r2
 8009208:	9304      	str	r3, [sp, #16]
 800920a:	46a2      	mov	sl, r4
 800920c:	e7d2      	b.n	80091b4 <_svfiprintf_r+0xa0>
 800920e:	9b03      	ldr	r3, [sp, #12]
 8009210:	1d19      	adds	r1, r3, #4
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	9103      	str	r1, [sp, #12]
 8009216:	2b00      	cmp	r3, #0
 8009218:	bfbb      	ittet	lt
 800921a:	425b      	neglt	r3, r3
 800921c:	f042 0202 	orrlt.w	r2, r2, #2
 8009220:	9307      	strge	r3, [sp, #28]
 8009222:	9307      	strlt	r3, [sp, #28]
 8009224:	bfb8      	it	lt
 8009226:	9204      	strlt	r2, [sp, #16]
 8009228:	7823      	ldrb	r3, [r4, #0]
 800922a:	2b2e      	cmp	r3, #46	@ 0x2e
 800922c:	d10a      	bne.n	8009244 <_svfiprintf_r+0x130>
 800922e:	7863      	ldrb	r3, [r4, #1]
 8009230:	2b2a      	cmp	r3, #42	@ 0x2a
 8009232:	d132      	bne.n	800929a <_svfiprintf_r+0x186>
 8009234:	9b03      	ldr	r3, [sp, #12]
 8009236:	1d1a      	adds	r2, r3, #4
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	9203      	str	r2, [sp, #12]
 800923c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009240:	3402      	adds	r4, #2
 8009242:	9305      	str	r3, [sp, #20]
 8009244:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009308 <_svfiprintf_r+0x1f4>
 8009248:	7821      	ldrb	r1, [r4, #0]
 800924a:	2203      	movs	r2, #3
 800924c:	4650      	mov	r0, sl
 800924e:	f7f6 ffc7 	bl	80001e0 <memchr>
 8009252:	b138      	cbz	r0, 8009264 <_svfiprintf_r+0x150>
 8009254:	9b04      	ldr	r3, [sp, #16]
 8009256:	eba0 000a 	sub.w	r0, r0, sl
 800925a:	2240      	movs	r2, #64	@ 0x40
 800925c:	4082      	lsls	r2, r0
 800925e:	4313      	orrs	r3, r2
 8009260:	3401      	adds	r4, #1
 8009262:	9304      	str	r3, [sp, #16]
 8009264:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009268:	4824      	ldr	r0, [pc, #144]	@ (80092fc <_svfiprintf_r+0x1e8>)
 800926a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800926e:	2206      	movs	r2, #6
 8009270:	f7f6 ffb6 	bl	80001e0 <memchr>
 8009274:	2800      	cmp	r0, #0
 8009276:	d036      	beq.n	80092e6 <_svfiprintf_r+0x1d2>
 8009278:	4b21      	ldr	r3, [pc, #132]	@ (8009300 <_svfiprintf_r+0x1ec>)
 800927a:	bb1b      	cbnz	r3, 80092c4 <_svfiprintf_r+0x1b0>
 800927c:	9b03      	ldr	r3, [sp, #12]
 800927e:	3307      	adds	r3, #7
 8009280:	f023 0307 	bic.w	r3, r3, #7
 8009284:	3308      	adds	r3, #8
 8009286:	9303      	str	r3, [sp, #12]
 8009288:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800928a:	4433      	add	r3, r6
 800928c:	9309      	str	r3, [sp, #36]	@ 0x24
 800928e:	e76a      	b.n	8009166 <_svfiprintf_r+0x52>
 8009290:	fb0c 3202 	mla	r2, ip, r2, r3
 8009294:	460c      	mov	r4, r1
 8009296:	2001      	movs	r0, #1
 8009298:	e7a8      	b.n	80091ec <_svfiprintf_r+0xd8>
 800929a:	2300      	movs	r3, #0
 800929c:	3401      	adds	r4, #1
 800929e:	9305      	str	r3, [sp, #20]
 80092a0:	4619      	mov	r1, r3
 80092a2:	f04f 0c0a 	mov.w	ip, #10
 80092a6:	4620      	mov	r0, r4
 80092a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092ac:	3a30      	subs	r2, #48	@ 0x30
 80092ae:	2a09      	cmp	r2, #9
 80092b0:	d903      	bls.n	80092ba <_svfiprintf_r+0x1a6>
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d0c6      	beq.n	8009244 <_svfiprintf_r+0x130>
 80092b6:	9105      	str	r1, [sp, #20]
 80092b8:	e7c4      	b.n	8009244 <_svfiprintf_r+0x130>
 80092ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80092be:	4604      	mov	r4, r0
 80092c0:	2301      	movs	r3, #1
 80092c2:	e7f0      	b.n	80092a6 <_svfiprintf_r+0x192>
 80092c4:	ab03      	add	r3, sp, #12
 80092c6:	9300      	str	r3, [sp, #0]
 80092c8:	462a      	mov	r2, r5
 80092ca:	4b0e      	ldr	r3, [pc, #56]	@ (8009304 <_svfiprintf_r+0x1f0>)
 80092cc:	a904      	add	r1, sp, #16
 80092ce:	4638      	mov	r0, r7
 80092d0:	f7fd fe76 	bl	8006fc0 <_printf_float>
 80092d4:	1c42      	adds	r2, r0, #1
 80092d6:	4606      	mov	r6, r0
 80092d8:	d1d6      	bne.n	8009288 <_svfiprintf_r+0x174>
 80092da:	89ab      	ldrh	r3, [r5, #12]
 80092dc:	065b      	lsls	r3, r3, #25
 80092de:	f53f af2d 	bmi.w	800913c <_svfiprintf_r+0x28>
 80092e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80092e4:	e72c      	b.n	8009140 <_svfiprintf_r+0x2c>
 80092e6:	ab03      	add	r3, sp, #12
 80092e8:	9300      	str	r3, [sp, #0]
 80092ea:	462a      	mov	r2, r5
 80092ec:	4b05      	ldr	r3, [pc, #20]	@ (8009304 <_svfiprintf_r+0x1f0>)
 80092ee:	a904      	add	r1, sp, #16
 80092f0:	4638      	mov	r0, r7
 80092f2:	f7fe f8fd 	bl	80074f0 <_printf_i>
 80092f6:	e7ed      	b.n	80092d4 <_svfiprintf_r+0x1c0>
 80092f8:	0800a7d6 	.word	0x0800a7d6
 80092fc:	0800a7e0 	.word	0x0800a7e0
 8009300:	08006fc1 	.word	0x08006fc1
 8009304:	0800905d 	.word	0x0800905d
 8009308:	0800a7dc 	.word	0x0800a7dc

0800930c <__sflush_r>:
 800930c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009314:	0716      	lsls	r6, r2, #28
 8009316:	4605      	mov	r5, r0
 8009318:	460c      	mov	r4, r1
 800931a:	d454      	bmi.n	80093c6 <__sflush_r+0xba>
 800931c:	684b      	ldr	r3, [r1, #4]
 800931e:	2b00      	cmp	r3, #0
 8009320:	dc02      	bgt.n	8009328 <__sflush_r+0x1c>
 8009322:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009324:	2b00      	cmp	r3, #0
 8009326:	dd48      	ble.n	80093ba <__sflush_r+0xae>
 8009328:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800932a:	2e00      	cmp	r6, #0
 800932c:	d045      	beq.n	80093ba <__sflush_r+0xae>
 800932e:	2300      	movs	r3, #0
 8009330:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009334:	682f      	ldr	r7, [r5, #0]
 8009336:	6a21      	ldr	r1, [r4, #32]
 8009338:	602b      	str	r3, [r5, #0]
 800933a:	d030      	beq.n	800939e <__sflush_r+0x92>
 800933c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800933e:	89a3      	ldrh	r3, [r4, #12]
 8009340:	0759      	lsls	r1, r3, #29
 8009342:	d505      	bpl.n	8009350 <__sflush_r+0x44>
 8009344:	6863      	ldr	r3, [r4, #4]
 8009346:	1ad2      	subs	r2, r2, r3
 8009348:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800934a:	b10b      	cbz	r3, 8009350 <__sflush_r+0x44>
 800934c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800934e:	1ad2      	subs	r2, r2, r3
 8009350:	2300      	movs	r3, #0
 8009352:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009354:	6a21      	ldr	r1, [r4, #32]
 8009356:	4628      	mov	r0, r5
 8009358:	47b0      	blx	r6
 800935a:	1c43      	adds	r3, r0, #1
 800935c:	89a3      	ldrh	r3, [r4, #12]
 800935e:	d106      	bne.n	800936e <__sflush_r+0x62>
 8009360:	6829      	ldr	r1, [r5, #0]
 8009362:	291d      	cmp	r1, #29
 8009364:	d82b      	bhi.n	80093be <__sflush_r+0xb2>
 8009366:	4a2a      	ldr	r2, [pc, #168]	@ (8009410 <__sflush_r+0x104>)
 8009368:	40ca      	lsrs	r2, r1
 800936a:	07d6      	lsls	r6, r2, #31
 800936c:	d527      	bpl.n	80093be <__sflush_r+0xb2>
 800936e:	2200      	movs	r2, #0
 8009370:	6062      	str	r2, [r4, #4]
 8009372:	04d9      	lsls	r1, r3, #19
 8009374:	6922      	ldr	r2, [r4, #16]
 8009376:	6022      	str	r2, [r4, #0]
 8009378:	d504      	bpl.n	8009384 <__sflush_r+0x78>
 800937a:	1c42      	adds	r2, r0, #1
 800937c:	d101      	bne.n	8009382 <__sflush_r+0x76>
 800937e:	682b      	ldr	r3, [r5, #0]
 8009380:	b903      	cbnz	r3, 8009384 <__sflush_r+0x78>
 8009382:	6560      	str	r0, [r4, #84]	@ 0x54
 8009384:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009386:	602f      	str	r7, [r5, #0]
 8009388:	b1b9      	cbz	r1, 80093ba <__sflush_r+0xae>
 800938a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800938e:	4299      	cmp	r1, r3
 8009390:	d002      	beq.n	8009398 <__sflush_r+0x8c>
 8009392:	4628      	mov	r0, r5
 8009394:	f7ff f9e8 	bl	8008768 <_free_r>
 8009398:	2300      	movs	r3, #0
 800939a:	6363      	str	r3, [r4, #52]	@ 0x34
 800939c:	e00d      	b.n	80093ba <__sflush_r+0xae>
 800939e:	2301      	movs	r3, #1
 80093a0:	4628      	mov	r0, r5
 80093a2:	47b0      	blx	r6
 80093a4:	4602      	mov	r2, r0
 80093a6:	1c50      	adds	r0, r2, #1
 80093a8:	d1c9      	bne.n	800933e <__sflush_r+0x32>
 80093aa:	682b      	ldr	r3, [r5, #0]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d0c6      	beq.n	800933e <__sflush_r+0x32>
 80093b0:	2b1d      	cmp	r3, #29
 80093b2:	d001      	beq.n	80093b8 <__sflush_r+0xac>
 80093b4:	2b16      	cmp	r3, #22
 80093b6:	d11e      	bne.n	80093f6 <__sflush_r+0xea>
 80093b8:	602f      	str	r7, [r5, #0]
 80093ba:	2000      	movs	r0, #0
 80093bc:	e022      	b.n	8009404 <__sflush_r+0xf8>
 80093be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80093c2:	b21b      	sxth	r3, r3
 80093c4:	e01b      	b.n	80093fe <__sflush_r+0xf2>
 80093c6:	690f      	ldr	r7, [r1, #16]
 80093c8:	2f00      	cmp	r7, #0
 80093ca:	d0f6      	beq.n	80093ba <__sflush_r+0xae>
 80093cc:	0793      	lsls	r3, r2, #30
 80093ce:	680e      	ldr	r6, [r1, #0]
 80093d0:	bf08      	it	eq
 80093d2:	694b      	ldreq	r3, [r1, #20]
 80093d4:	600f      	str	r7, [r1, #0]
 80093d6:	bf18      	it	ne
 80093d8:	2300      	movne	r3, #0
 80093da:	eba6 0807 	sub.w	r8, r6, r7
 80093de:	608b      	str	r3, [r1, #8]
 80093e0:	f1b8 0f00 	cmp.w	r8, #0
 80093e4:	dde9      	ble.n	80093ba <__sflush_r+0xae>
 80093e6:	6a21      	ldr	r1, [r4, #32]
 80093e8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80093ea:	4643      	mov	r3, r8
 80093ec:	463a      	mov	r2, r7
 80093ee:	4628      	mov	r0, r5
 80093f0:	47b0      	blx	r6
 80093f2:	2800      	cmp	r0, #0
 80093f4:	dc08      	bgt.n	8009408 <__sflush_r+0xfc>
 80093f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80093fe:	81a3      	strh	r3, [r4, #12]
 8009400:	f04f 30ff 	mov.w	r0, #4294967295
 8009404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009408:	4407      	add	r7, r0
 800940a:	eba8 0800 	sub.w	r8, r8, r0
 800940e:	e7e7      	b.n	80093e0 <__sflush_r+0xd4>
 8009410:	20400001 	.word	0x20400001

08009414 <_fflush_r>:
 8009414:	b538      	push	{r3, r4, r5, lr}
 8009416:	690b      	ldr	r3, [r1, #16]
 8009418:	4605      	mov	r5, r0
 800941a:	460c      	mov	r4, r1
 800941c:	b913      	cbnz	r3, 8009424 <_fflush_r+0x10>
 800941e:	2500      	movs	r5, #0
 8009420:	4628      	mov	r0, r5
 8009422:	bd38      	pop	{r3, r4, r5, pc}
 8009424:	b118      	cbz	r0, 800942e <_fflush_r+0x1a>
 8009426:	6a03      	ldr	r3, [r0, #32]
 8009428:	b90b      	cbnz	r3, 800942e <_fflush_r+0x1a>
 800942a:	f7fe fa0b 	bl	8007844 <__sinit>
 800942e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d0f3      	beq.n	800941e <_fflush_r+0xa>
 8009436:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009438:	07d0      	lsls	r0, r2, #31
 800943a:	d404      	bmi.n	8009446 <_fflush_r+0x32>
 800943c:	0599      	lsls	r1, r3, #22
 800943e:	d402      	bmi.n	8009446 <_fflush_r+0x32>
 8009440:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009442:	f7fe fb28 	bl	8007a96 <__retarget_lock_acquire_recursive>
 8009446:	4628      	mov	r0, r5
 8009448:	4621      	mov	r1, r4
 800944a:	f7ff ff5f 	bl	800930c <__sflush_r>
 800944e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009450:	07da      	lsls	r2, r3, #31
 8009452:	4605      	mov	r5, r0
 8009454:	d4e4      	bmi.n	8009420 <_fflush_r+0xc>
 8009456:	89a3      	ldrh	r3, [r4, #12]
 8009458:	059b      	lsls	r3, r3, #22
 800945a:	d4e1      	bmi.n	8009420 <_fflush_r+0xc>
 800945c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800945e:	f7fe fb1b 	bl	8007a98 <__retarget_lock_release_recursive>
 8009462:	e7dd      	b.n	8009420 <_fflush_r+0xc>

08009464 <memmove>:
 8009464:	4288      	cmp	r0, r1
 8009466:	b510      	push	{r4, lr}
 8009468:	eb01 0402 	add.w	r4, r1, r2
 800946c:	d902      	bls.n	8009474 <memmove+0x10>
 800946e:	4284      	cmp	r4, r0
 8009470:	4623      	mov	r3, r4
 8009472:	d807      	bhi.n	8009484 <memmove+0x20>
 8009474:	1e43      	subs	r3, r0, #1
 8009476:	42a1      	cmp	r1, r4
 8009478:	d008      	beq.n	800948c <memmove+0x28>
 800947a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800947e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009482:	e7f8      	b.n	8009476 <memmove+0x12>
 8009484:	4402      	add	r2, r0
 8009486:	4601      	mov	r1, r0
 8009488:	428a      	cmp	r2, r1
 800948a:	d100      	bne.n	800948e <memmove+0x2a>
 800948c:	bd10      	pop	{r4, pc}
 800948e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009492:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009496:	e7f7      	b.n	8009488 <memmove+0x24>

08009498 <_sbrk_r>:
 8009498:	b538      	push	{r3, r4, r5, lr}
 800949a:	4d06      	ldr	r5, [pc, #24]	@ (80094b4 <_sbrk_r+0x1c>)
 800949c:	2300      	movs	r3, #0
 800949e:	4604      	mov	r4, r0
 80094a0:	4608      	mov	r0, r1
 80094a2:	602b      	str	r3, [r5, #0]
 80094a4:	f7fa f84a 	bl	800353c <_sbrk>
 80094a8:	1c43      	adds	r3, r0, #1
 80094aa:	d102      	bne.n	80094b2 <_sbrk_r+0x1a>
 80094ac:	682b      	ldr	r3, [r5, #0]
 80094ae:	b103      	cbz	r3, 80094b2 <_sbrk_r+0x1a>
 80094b0:	6023      	str	r3, [r4, #0]
 80094b2:	bd38      	pop	{r3, r4, r5, pc}
 80094b4:	20004acc 	.word	0x20004acc

080094b8 <__assert_func>:
 80094b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80094ba:	4614      	mov	r4, r2
 80094bc:	461a      	mov	r2, r3
 80094be:	4b09      	ldr	r3, [pc, #36]	@ (80094e4 <__assert_func+0x2c>)
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	4605      	mov	r5, r0
 80094c4:	68d8      	ldr	r0, [r3, #12]
 80094c6:	b14c      	cbz	r4, 80094dc <__assert_func+0x24>
 80094c8:	4b07      	ldr	r3, [pc, #28]	@ (80094e8 <__assert_func+0x30>)
 80094ca:	9100      	str	r1, [sp, #0]
 80094cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80094d0:	4906      	ldr	r1, [pc, #24]	@ (80094ec <__assert_func+0x34>)
 80094d2:	462b      	mov	r3, r5
 80094d4:	f000 f870 	bl	80095b8 <fiprintf>
 80094d8:	f000 f880 	bl	80095dc <abort>
 80094dc:	4b04      	ldr	r3, [pc, #16]	@ (80094f0 <__assert_func+0x38>)
 80094de:	461c      	mov	r4, r3
 80094e0:	e7f3      	b.n	80094ca <__assert_func+0x12>
 80094e2:	bf00      	nop
 80094e4:	20000018 	.word	0x20000018
 80094e8:	0800a7f1 	.word	0x0800a7f1
 80094ec:	0800a7fe 	.word	0x0800a7fe
 80094f0:	0800a82c 	.word	0x0800a82c

080094f4 <_calloc_r>:
 80094f4:	b570      	push	{r4, r5, r6, lr}
 80094f6:	fba1 5402 	umull	r5, r4, r1, r2
 80094fa:	b934      	cbnz	r4, 800950a <_calloc_r+0x16>
 80094fc:	4629      	mov	r1, r5
 80094fe:	f7ff f9a7 	bl	8008850 <_malloc_r>
 8009502:	4606      	mov	r6, r0
 8009504:	b928      	cbnz	r0, 8009512 <_calloc_r+0x1e>
 8009506:	4630      	mov	r0, r6
 8009508:	bd70      	pop	{r4, r5, r6, pc}
 800950a:	220c      	movs	r2, #12
 800950c:	6002      	str	r2, [r0, #0]
 800950e:	2600      	movs	r6, #0
 8009510:	e7f9      	b.n	8009506 <_calloc_r+0x12>
 8009512:	462a      	mov	r2, r5
 8009514:	4621      	mov	r1, r4
 8009516:	f7fe fa40 	bl	800799a <memset>
 800951a:	e7f4      	b.n	8009506 <_calloc_r+0x12>

0800951c <__ascii_mbtowc>:
 800951c:	b082      	sub	sp, #8
 800951e:	b901      	cbnz	r1, 8009522 <__ascii_mbtowc+0x6>
 8009520:	a901      	add	r1, sp, #4
 8009522:	b142      	cbz	r2, 8009536 <__ascii_mbtowc+0x1a>
 8009524:	b14b      	cbz	r3, 800953a <__ascii_mbtowc+0x1e>
 8009526:	7813      	ldrb	r3, [r2, #0]
 8009528:	600b      	str	r3, [r1, #0]
 800952a:	7812      	ldrb	r2, [r2, #0]
 800952c:	1e10      	subs	r0, r2, #0
 800952e:	bf18      	it	ne
 8009530:	2001      	movne	r0, #1
 8009532:	b002      	add	sp, #8
 8009534:	4770      	bx	lr
 8009536:	4610      	mov	r0, r2
 8009538:	e7fb      	b.n	8009532 <__ascii_mbtowc+0x16>
 800953a:	f06f 0001 	mvn.w	r0, #1
 800953e:	e7f8      	b.n	8009532 <__ascii_mbtowc+0x16>

08009540 <_realloc_r>:
 8009540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009544:	4607      	mov	r7, r0
 8009546:	4614      	mov	r4, r2
 8009548:	460d      	mov	r5, r1
 800954a:	b921      	cbnz	r1, 8009556 <_realloc_r+0x16>
 800954c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009550:	4611      	mov	r1, r2
 8009552:	f7ff b97d 	b.w	8008850 <_malloc_r>
 8009556:	b92a      	cbnz	r2, 8009564 <_realloc_r+0x24>
 8009558:	f7ff f906 	bl	8008768 <_free_r>
 800955c:	4625      	mov	r5, r4
 800955e:	4628      	mov	r0, r5
 8009560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009564:	f000 f841 	bl	80095ea <_malloc_usable_size_r>
 8009568:	4284      	cmp	r4, r0
 800956a:	4606      	mov	r6, r0
 800956c:	d802      	bhi.n	8009574 <_realloc_r+0x34>
 800956e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009572:	d8f4      	bhi.n	800955e <_realloc_r+0x1e>
 8009574:	4621      	mov	r1, r4
 8009576:	4638      	mov	r0, r7
 8009578:	f7ff f96a 	bl	8008850 <_malloc_r>
 800957c:	4680      	mov	r8, r0
 800957e:	b908      	cbnz	r0, 8009584 <_realloc_r+0x44>
 8009580:	4645      	mov	r5, r8
 8009582:	e7ec      	b.n	800955e <_realloc_r+0x1e>
 8009584:	42b4      	cmp	r4, r6
 8009586:	4622      	mov	r2, r4
 8009588:	4629      	mov	r1, r5
 800958a:	bf28      	it	cs
 800958c:	4632      	movcs	r2, r6
 800958e:	f7fe fa84 	bl	8007a9a <memcpy>
 8009592:	4629      	mov	r1, r5
 8009594:	4638      	mov	r0, r7
 8009596:	f7ff f8e7 	bl	8008768 <_free_r>
 800959a:	e7f1      	b.n	8009580 <_realloc_r+0x40>

0800959c <__ascii_wctomb>:
 800959c:	4603      	mov	r3, r0
 800959e:	4608      	mov	r0, r1
 80095a0:	b141      	cbz	r1, 80095b4 <__ascii_wctomb+0x18>
 80095a2:	2aff      	cmp	r2, #255	@ 0xff
 80095a4:	d904      	bls.n	80095b0 <__ascii_wctomb+0x14>
 80095a6:	228a      	movs	r2, #138	@ 0x8a
 80095a8:	601a      	str	r2, [r3, #0]
 80095aa:	f04f 30ff 	mov.w	r0, #4294967295
 80095ae:	4770      	bx	lr
 80095b0:	700a      	strb	r2, [r1, #0]
 80095b2:	2001      	movs	r0, #1
 80095b4:	4770      	bx	lr
	...

080095b8 <fiprintf>:
 80095b8:	b40e      	push	{r1, r2, r3}
 80095ba:	b503      	push	{r0, r1, lr}
 80095bc:	4601      	mov	r1, r0
 80095be:	ab03      	add	r3, sp, #12
 80095c0:	4805      	ldr	r0, [pc, #20]	@ (80095d8 <fiprintf+0x20>)
 80095c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80095c6:	6800      	ldr	r0, [r0, #0]
 80095c8:	9301      	str	r3, [sp, #4]
 80095ca:	f000 f83f 	bl	800964c <_vfiprintf_r>
 80095ce:	b002      	add	sp, #8
 80095d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80095d4:	b003      	add	sp, #12
 80095d6:	4770      	bx	lr
 80095d8:	20000018 	.word	0x20000018

080095dc <abort>:
 80095dc:	b508      	push	{r3, lr}
 80095de:	2006      	movs	r0, #6
 80095e0:	f000 fa08 	bl	80099f4 <raise>
 80095e4:	2001      	movs	r0, #1
 80095e6:	f7f9 ff31 	bl	800344c <_exit>

080095ea <_malloc_usable_size_r>:
 80095ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095ee:	1f18      	subs	r0, r3, #4
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	bfbc      	itt	lt
 80095f4:	580b      	ldrlt	r3, [r1, r0]
 80095f6:	18c0      	addlt	r0, r0, r3
 80095f8:	4770      	bx	lr

080095fa <__sfputc_r>:
 80095fa:	6893      	ldr	r3, [r2, #8]
 80095fc:	3b01      	subs	r3, #1
 80095fe:	2b00      	cmp	r3, #0
 8009600:	b410      	push	{r4}
 8009602:	6093      	str	r3, [r2, #8]
 8009604:	da08      	bge.n	8009618 <__sfputc_r+0x1e>
 8009606:	6994      	ldr	r4, [r2, #24]
 8009608:	42a3      	cmp	r3, r4
 800960a:	db01      	blt.n	8009610 <__sfputc_r+0x16>
 800960c:	290a      	cmp	r1, #10
 800960e:	d103      	bne.n	8009618 <__sfputc_r+0x1e>
 8009610:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009614:	f000 b932 	b.w	800987c <__swbuf_r>
 8009618:	6813      	ldr	r3, [r2, #0]
 800961a:	1c58      	adds	r0, r3, #1
 800961c:	6010      	str	r0, [r2, #0]
 800961e:	7019      	strb	r1, [r3, #0]
 8009620:	4608      	mov	r0, r1
 8009622:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009626:	4770      	bx	lr

08009628 <__sfputs_r>:
 8009628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800962a:	4606      	mov	r6, r0
 800962c:	460f      	mov	r7, r1
 800962e:	4614      	mov	r4, r2
 8009630:	18d5      	adds	r5, r2, r3
 8009632:	42ac      	cmp	r4, r5
 8009634:	d101      	bne.n	800963a <__sfputs_r+0x12>
 8009636:	2000      	movs	r0, #0
 8009638:	e007      	b.n	800964a <__sfputs_r+0x22>
 800963a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800963e:	463a      	mov	r2, r7
 8009640:	4630      	mov	r0, r6
 8009642:	f7ff ffda 	bl	80095fa <__sfputc_r>
 8009646:	1c43      	adds	r3, r0, #1
 8009648:	d1f3      	bne.n	8009632 <__sfputs_r+0xa>
 800964a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800964c <_vfiprintf_r>:
 800964c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009650:	460d      	mov	r5, r1
 8009652:	b09d      	sub	sp, #116	@ 0x74
 8009654:	4614      	mov	r4, r2
 8009656:	4698      	mov	r8, r3
 8009658:	4606      	mov	r6, r0
 800965a:	b118      	cbz	r0, 8009664 <_vfiprintf_r+0x18>
 800965c:	6a03      	ldr	r3, [r0, #32]
 800965e:	b90b      	cbnz	r3, 8009664 <_vfiprintf_r+0x18>
 8009660:	f7fe f8f0 	bl	8007844 <__sinit>
 8009664:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009666:	07d9      	lsls	r1, r3, #31
 8009668:	d405      	bmi.n	8009676 <_vfiprintf_r+0x2a>
 800966a:	89ab      	ldrh	r3, [r5, #12]
 800966c:	059a      	lsls	r2, r3, #22
 800966e:	d402      	bmi.n	8009676 <_vfiprintf_r+0x2a>
 8009670:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009672:	f7fe fa10 	bl	8007a96 <__retarget_lock_acquire_recursive>
 8009676:	89ab      	ldrh	r3, [r5, #12]
 8009678:	071b      	lsls	r3, r3, #28
 800967a:	d501      	bpl.n	8009680 <_vfiprintf_r+0x34>
 800967c:	692b      	ldr	r3, [r5, #16]
 800967e:	b99b      	cbnz	r3, 80096a8 <_vfiprintf_r+0x5c>
 8009680:	4629      	mov	r1, r5
 8009682:	4630      	mov	r0, r6
 8009684:	f000 f938 	bl	80098f8 <__swsetup_r>
 8009688:	b170      	cbz	r0, 80096a8 <_vfiprintf_r+0x5c>
 800968a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800968c:	07dc      	lsls	r4, r3, #31
 800968e:	d504      	bpl.n	800969a <_vfiprintf_r+0x4e>
 8009690:	f04f 30ff 	mov.w	r0, #4294967295
 8009694:	b01d      	add	sp, #116	@ 0x74
 8009696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800969a:	89ab      	ldrh	r3, [r5, #12]
 800969c:	0598      	lsls	r0, r3, #22
 800969e:	d4f7      	bmi.n	8009690 <_vfiprintf_r+0x44>
 80096a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80096a2:	f7fe f9f9 	bl	8007a98 <__retarget_lock_release_recursive>
 80096a6:	e7f3      	b.n	8009690 <_vfiprintf_r+0x44>
 80096a8:	2300      	movs	r3, #0
 80096aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80096ac:	2320      	movs	r3, #32
 80096ae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80096b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80096b6:	2330      	movs	r3, #48	@ 0x30
 80096b8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009868 <_vfiprintf_r+0x21c>
 80096bc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80096c0:	f04f 0901 	mov.w	r9, #1
 80096c4:	4623      	mov	r3, r4
 80096c6:	469a      	mov	sl, r3
 80096c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096cc:	b10a      	cbz	r2, 80096d2 <_vfiprintf_r+0x86>
 80096ce:	2a25      	cmp	r2, #37	@ 0x25
 80096d0:	d1f9      	bne.n	80096c6 <_vfiprintf_r+0x7a>
 80096d2:	ebba 0b04 	subs.w	fp, sl, r4
 80096d6:	d00b      	beq.n	80096f0 <_vfiprintf_r+0xa4>
 80096d8:	465b      	mov	r3, fp
 80096da:	4622      	mov	r2, r4
 80096dc:	4629      	mov	r1, r5
 80096de:	4630      	mov	r0, r6
 80096e0:	f7ff ffa2 	bl	8009628 <__sfputs_r>
 80096e4:	3001      	adds	r0, #1
 80096e6:	f000 80a7 	beq.w	8009838 <_vfiprintf_r+0x1ec>
 80096ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80096ec:	445a      	add	r2, fp
 80096ee:	9209      	str	r2, [sp, #36]	@ 0x24
 80096f0:	f89a 3000 	ldrb.w	r3, [sl]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	f000 809f 	beq.w	8009838 <_vfiprintf_r+0x1ec>
 80096fa:	2300      	movs	r3, #0
 80096fc:	f04f 32ff 	mov.w	r2, #4294967295
 8009700:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009704:	f10a 0a01 	add.w	sl, sl, #1
 8009708:	9304      	str	r3, [sp, #16]
 800970a:	9307      	str	r3, [sp, #28]
 800970c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009710:	931a      	str	r3, [sp, #104]	@ 0x68
 8009712:	4654      	mov	r4, sl
 8009714:	2205      	movs	r2, #5
 8009716:	f814 1b01 	ldrb.w	r1, [r4], #1
 800971a:	4853      	ldr	r0, [pc, #332]	@ (8009868 <_vfiprintf_r+0x21c>)
 800971c:	f7f6 fd60 	bl	80001e0 <memchr>
 8009720:	9a04      	ldr	r2, [sp, #16]
 8009722:	b9d8      	cbnz	r0, 800975c <_vfiprintf_r+0x110>
 8009724:	06d1      	lsls	r1, r2, #27
 8009726:	bf44      	itt	mi
 8009728:	2320      	movmi	r3, #32
 800972a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800972e:	0713      	lsls	r3, r2, #28
 8009730:	bf44      	itt	mi
 8009732:	232b      	movmi	r3, #43	@ 0x2b
 8009734:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009738:	f89a 3000 	ldrb.w	r3, [sl]
 800973c:	2b2a      	cmp	r3, #42	@ 0x2a
 800973e:	d015      	beq.n	800976c <_vfiprintf_r+0x120>
 8009740:	9a07      	ldr	r2, [sp, #28]
 8009742:	4654      	mov	r4, sl
 8009744:	2000      	movs	r0, #0
 8009746:	f04f 0c0a 	mov.w	ip, #10
 800974a:	4621      	mov	r1, r4
 800974c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009750:	3b30      	subs	r3, #48	@ 0x30
 8009752:	2b09      	cmp	r3, #9
 8009754:	d94b      	bls.n	80097ee <_vfiprintf_r+0x1a2>
 8009756:	b1b0      	cbz	r0, 8009786 <_vfiprintf_r+0x13a>
 8009758:	9207      	str	r2, [sp, #28]
 800975a:	e014      	b.n	8009786 <_vfiprintf_r+0x13a>
 800975c:	eba0 0308 	sub.w	r3, r0, r8
 8009760:	fa09 f303 	lsl.w	r3, r9, r3
 8009764:	4313      	orrs	r3, r2
 8009766:	9304      	str	r3, [sp, #16]
 8009768:	46a2      	mov	sl, r4
 800976a:	e7d2      	b.n	8009712 <_vfiprintf_r+0xc6>
 800976c:	9b03      	ldr	r3, [sp, #12]
 800976e:	1d19      	adds	r1, r3, #4
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	9103      	str	r1, [sp, #12]
 8009774:	2b00      	cmp	r3, #0
 8009776:	bfbb      	ittet	lt
 8009778:	425b      	neglt	r3, r3
 800977a:	f042 0202 	orrlt.w	r2, r2, #2
 800977e:	9307      	strge	r3, [sp, #28]
 8009780:	9307      	strlt	r3, [sp, #28]
 8009782:	bfb8      	it	lt
 8009784:	9204      	strlt	r2, [sp, #16]
 8009786:	7823      	ldrb	r3, [r4, #0]
 8009788:	2b2e      	cmp	r3, #46	@ 0x2e
 800978a:	d10a      	bne.n	80097a2 <_vfiprintf_r+0x156>
 800978c:	7863      	ldrb	r3, [r4, #1]
 800978e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009790:	d132      	bne.n	80097f8 <_vfiprintf_r+0x1ac>
 8009792:	9b03      	ldr	r3, [sp, #12]
 8009794:	1d1a      	adds	r2, r3, #4
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	9203      	str	r2, [sp, #12]
 800979a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800979e:	3402      	adds	r4, #2
 80097a0:	9305      	str	r3, [sp, #20]
 80097a2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009878 <_vfiprintf_r+0x22c>
 80097a6:	7821      	ldrb	r1, [r4, #0]
 80097a8:	2203      	movs	r2, #3
 80097aa:	4650      	mov	r0, sl
 80097ac:	f7f6 fd18 	bl	80001e0 <memchr>
 80097b0:	b138      	cbz	r0, 80097c2 <_vfiprintf_r+0x176>
 80097b2:	9b04      	ldr	r3, [sp, #16]
 80097b4:	eba0 000a 	sub.w	r0, r0, sl
 80097b8:	2240      	movs	r2, #64	@ 0x40
 80097ba:	4082      	lsls	r2, r0
 80097bc:	4313      	orrs	r3, r2
 80097be:	3401      	adds	r4, #1
 80097c0:	9304      	str	r3, [sp, #16]
 80097c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097c6:	4829      	ldr	r0, [pc, #164]	@ (800986c <_vfiprintf_r+0x220>)
 80097c8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80097cc:	2206      	movs	r2, #6
 80097ce:	f7f6 fd07 	bl	80001e0 <memchr>
 80097d2:	2800      	cmp	r0, #0
 80097d4:	d03f      	beq.n	8009856 <_vfiprintf_r+0x20a>
 80097d6:	4b26      	ldr	r3, [pc, #152]	@ (8009870 <_vfiprintf_r+0x224>)
 80097d8:	bb1b      	cbnz	r3, 8009822 <_vfiprintf_r+0x1d6>
 80097da:	9b03      	ldr	r3, [sp, #12]
 80097dc:	3307      	adds	r3, #7
 80097de:	f023 0307 	bic.w	r3, r3, #7
 80097e2:	3308      	adds	r3, #8
 80097e4:	9303      	str	r3, [sp, #12]
 80097e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097e8:	443b      	add	r3, r7
 80097ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80097ec:	e76a      	b.n	80096c4 <_vfiprintf_r+0x78>
 80097ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80097f2:	460c      	mov	r4, r1
 80097f4:	2001      	movs	r0, #1
 80097f6:	e7a8      	b.n	800974a <_vfiprintf_r+0xfe>
 80097f8:	2300      	movs	r3, #0
 80097fa:	3401      	adds	r4, #1
 80097fc:	9305      	str	r3, [sp, #20]
 80097fe:	4619      	mov	r1, r3
 8009800:	f04f 0c0a 	mov.w	ip, #10
 8009804:	4620      	mov	r0, r4
 8009806:	f810 2b01 	ldrb.w	r2, [r0], #1
 800980a:	3a30      	subs	r2, #48	@ 0x30
 800980c:	2a09      	cmp	r2, #9
 800980e:	d903      	bls.n	8009818 <_vfiprintf_r+0x1cc>
 8009810:	2b00      	cmp	r3, #0
 8009812:	d0c6      	beq.n	80097a2 <_vfiprintf_r+0x156>
 8009814:	9105      	str	r1, [sp, #20]
 8009816:	e7c4      	b.n	80097a2 <_vfiprintf_r+0x156>
 8009818:	fb0c 2101 	mla	r1, ip, r1, r2
 800981c:	4604      	mov	r4, r0
 800981e:	2301      	movs	r3, #1
 8009820:	e7f0      	b.n	8009804 <_vfiprintf_r+0x1b8>
 8009822:	ab03      	add	r3, sp, #12
 8009824:	9300      	str	r3, [sp, #0]
 8009826:	462a      	mov	r2, r5
 8009828:	4b12      	ldr	r3, [pc, #72]	@ (8009874 <_vfiprintf_r+0x228>)
 800982a:	a904      	add	r1, sp, #16
 800982c:	4630      	mov	r0, r6
 800982e:	f7fd fbc7 	bl	8006fc0 <_printf_float>
 8009832:	4607      	mov	r7, r0
 8009834:	1c78      	adds	r0, r7, #1
 8009836:	d1d6      	bne.n	80097e6 <_vfiprintf_r+0x19a>
 8009838:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800983a:	07d9      	lsls	r1, r3, #31
 800983c:	d405      	bmi.n	800984a <_vfiprintf_r+0x1fe>
 800983e:	89ab      	ldrh	r3, [r5, #12]
 8009840:	059a      	lsls	r2, r3, #22
 8009842:	d402      	bmi.n	800984a <_vfiprintf_r+0x1fe>
 8009844:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009846:	f7fe f927 	bl	8007a98 <__retarget_lock_release_recursive>
 800984a:	89ab      	ldrh	r3, [r5, #12]
 800984c:	065b      	lsls	r3, r3, #25
 800984e:	f53f af1f 	bmi.w	8009690 <_vfiprintf_r+0x44>
 8009852:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009854:	e71e      	b.n	8009694 <_vfiprintf_r+0x48>
 8009856:	ab03      	add	r3, sp, #12
 8009858:	9300      	str	r3, [sp, #0]
 800985a:	462a      	mov	r2, r5
 800985c:	4b05      	ldr	r3, [pc, #20]	@ (8009874 <_vfiprintf_r+0x228>)
 800985e:	a904      	add	r1, sp, #16
 8009860:	4630      	mov	r0, r6
 8009862:	f7fd fe45 	bl	80074f0 <_printf_i>
 8009866:	e7e4      	b.n	8009832 <_vfiprintf_r+0x1e6>
 8009868:	0800a7d6 	.word	0x0800a7d6
 800986c:	0800a7e0 	.word	0x0800a7e0
 8009870:	08006fc1 	.word	0x08006fc1
 8009874:	08009629 	.word	0x08009629
 8009878:	0800a7dc 	.word	0x0800a7dc

0800987c <__swbuf_r>:
 800987c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800987e:	460e      	mov	r6, r1
 8009880:	4614      	mov	r4, r2
 8009882:	4605      	mov	r5, r0
 8009884:	b118      	cbz	r0, 800988e <__swbuf_r+0x12>
 8009886:	6a03      	ldr	r3, [r0, #32]
 8009888:	b90b      	cbnz	r3, 800988e <__swbuf_r+0x12>
 800988a:	f7fd ffdb 	bl	8007844 <__sinit>
 800988e:	69a3      	ldr	r3, [r4, #24]
 8009890:	60a3      	str	r3, [r4, #8]
 8009892:	89a3      	ldrh	r3, [r4, #12]
 8009894:	071a      	lsls	r2, r3, #28
 8009896:	d501      	bpl.n	800989c <__swbuf_r+0x20>
 8009898:	6923      	ldr	r3, [r4, #16]
 800989a:	b943      	cbnz	r3, 80098ae <__swbuf_r+0x32>
 800989c:	4621      	mov	r1, r4
 800989e:	4628      	mov	r0, r5
 80098a0:	f000 f82a 	bl	80098f8 <__swsetup_r>
 80098a4:	b118      	cbz	r0, 80098ae <__swbuf_r+0x32>
 80098a6:	f04f 37ff 	mov.w	r7, #4294967295
 80098aa:	4638      	mov	r0, r7
 80098ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098ae:	6823      	ldr	r3, [r4, #0]
 80098b0:	6922      	ldr	r2, [r4, #16]
 80098b2:	1a98      	subs	r0, r3, r2
 80098b4:	6963      	ldr	r3, [r4, #20]
 80098b6:	b2f6      	uxtb	r6, r6
 80098b8:	4283      	cmp	r3, r0
 80098ba:	4637      	mov	r7, r6
 80098bc:	dc05      	bgt.n	80098ca <__swbuf_r+0x4e>
 80098be:	4621      	mov	r1, r4
 80098c0:	4628      	mov	r0, r5
 80098c2:	f7ff fda7 	bl	8009414 <_fflush_r>
 80098c6:	2800      	cmp	r0, #0
 80098c8:	d1ed      	bne.n	80098a6 <__swbuf_r+0x2a>
 80098ca:	68a3      	ldr	r3, [r4, #8]
 80098cc:	3b01      	subs	r3, #1
 80098ce:	60a3      	str	r3, [r4, #8]
 80098d0:	6823      	ldr	r3, [r4, #0]
 80098d2:	1c5a      	adds	r2, r3, #1
 80098d4:	6022      	str	r2, [r4, #0]
 80098d6:	701e      	strb	r6, [r3, #0]
 80098d8:	6962      	ldr	r2, [r4, #20]
 80098da:	1c43      	adds	r3, r0, #1
 80098dc:	429a      	cmp	r2, r3
 80098de:	d004      	beq.n	80098ea <__swbuf_r+0x6e>
 80098e0:	89a3      	ldrh	r3, [r4, #12]
 80098e2:	07db      	lsls	r3, r3, #31
 80098e4:	d5e1      	bpl.n	80098aa <__swbuf_r+0x2e>
 80098e6:	2e0a      	cmp	r6, #10
 80098e8:	d1df      	bne.n	80098aa <__swbuf_r+0x2e>
 80098ea:	4621      	mov	r1, r4
 80098ec:	4628      	mov	r0, r5
 80098ee:	f7ff fd91 	bl	8009414 <_fflush_r>
 80098f2:	2800      	cmp	r0, #0
 80098f4:	d0d9      	beq.n	80098aa <__swbuf_r+0x2e>
 80098f6:	e7d6      	b.n	80098a6 <__swbuf_r+0x2a>

080098f8 <__swsetup_r>:
 80098f8:	b538      	push	{r3, r4, r5, lr}
 80098fa:	4b29      	ldr	r3, [pc, #164]	@ (80099a0 <__swsetup_r+0xa8>)
 80098fc:	4605      	mov	r5, r0
 80098fe:	6818      	ldr	r0, [r3, #0]
 8009900:	460c      	mov	r4, r1
 8009902:	b118      	cbz	r0, 800990c <__swsetup_r+0x14>
 8009904:	6a03      	ldr	r3, [r0, #32]
 8009906:	b90b      	cbnz	r3, 800990c <__swsetup_r+0x14>
 8009908:	f7fd ff9c 	bl	8007844 <__sinit>
 800990c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009910:	0719      	lsls	r1, r3, #28
 8009912:	d422      	bmi.n	800995a <__swsetup_r+0x62>
 8009914:	06da      	lsls	r2, r3, #27
 8009916:	d407      	bmi.n	8009928 <__swsetup_r+0x30>
 8009918:	2209      	movs	r2, #9
 800991a:	602a      	str	r2, [r5, #0]
 800991c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009920:	81a3      	strh	r3, [r4, #12]
 8009922:	f04f 30ff 	mov.w	r0, #4294967295
 8009926:	e033      	b.n	8009990 <__swsetup_r+0x98>
 8009928:	0758      	lsls	r0, r3, #29
 800992a:	d512      	bpl.n	8009952 <__swsetup_r+0x5a>
 800992c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800992e:	b141      	cbz	r1, 8009942 <__swsetup_r+0x4a>
 8009930:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009934:	4299      	cmp	r1, r3
 8009936:	d002      	beq.n	800993e <__swsetup_r+0x46>
 8009938:	4628      	mov	r0, r5
 800993a:	f7fe ff15 	bl	8008768 <_free_r>
 800993e:	2300      	movs	r3, #0
 8009940:	6363      	str	r3, [r4, #52]	@ 0x34
 8009942:	89a3      	ldrh	r3, [r4, #12]
 8009944:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009948:	81a3      	strh	r3, [r4, #12]
 800994a:	2300      	movs	r3, #0
 800994c:	6063      	str	r3, [r4, #4]
 800994e:	6923      	ldr	r3, [r4, #16]
 8009950:	6023      	str	r3, [r4, #0]
 8009952:	89a3      	ldrh	r3, [r4, #12]
 8009954:	f043 0308 	orr.w	r3, r3, #8
 8009958:	81a3      	strh	r3, [r4, #12]
 800995a:	6923      	ldr	r3, [r4, #16]
 800995c:	b94b      	cbnz	r3, 8009972 <__swsetup_r+0x7a>
 800995e:	89a3      	ldrh	r3, [r4, #12]
 8009960:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009964:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009968:	d003      	beq.n	8009972 <__swsetup_r+0x7a>
 800996a:	4621      	mov	r1, r4
 800996c:	4628      	mov	r0, r5
 800996e:	f000 f883 	bl	8009a78 <__smakebuf_r>
 8009972:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009976:	f013 0201 	ands.w	r2, r3, #1
 800997a:	d00a      	beq.n	8009992 <__swsetup_r+0x9a>
 800997c:	2200      	movs	r2, #0
 800997e:	60a2      	str	r2, [r4, #8]
 8009980:	6962      	ldr	r2, [r4, #20]
 8009982:	4252      	negs	r2, r2
 8009984:	61a2      	str	r2, [r4, #24]
 8009986:	6922      	ldr	r2, [r4, #16]
 8009988:	b942      	cbnz	r2, 800999c <__swsetup_r+0xa4>
 800998a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800998e:	d1c5      	bne.n	800991c <__swsetup_r+0x24>
 8009990:	bd38      	pop	{r3, r4, r5, pc}
 8009992:	0799      	lsls	r1, r3, #30
 8009994:	bf58      	it	pl
 8009996:	6962      	ldrpl	r2, [r4, #20]
 8009998:	60a2      	str	r2, [r4, #8]
 800999a:	e7f4      	b.n	8009986 <__swsetup_r+0x8e>
 800999c:	2000      	movs	r0, #0
 800999e:	e7f7      	b.n	8009990 <__swsetup_r+0x98>
 80099a0:	20000018 	.word	0x20000018

080099a4 <_raise_r>:
 80099a4:	291f      	cmp	r1, #31
 80099a6:	b538      	push	{r3, r4, r5, lr}
 80099a8:	4605      	mov	r5, r0
 80099aa:	460c      	mov	r4, r1
 80099ac:	d904      	bls.n	80099b8 <_raise_r+0x14>
 80099ae:	2316      	movs	r3, #22
 80099b0:	6003      	str	r3, [r0, #0]
 80099b2:	f04f 30ff 	mov.w	r0, #4294967295
 80099b6:	bd38      	pop	{r3, r4, r5, pc}
 80099b8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80099ba:	b112      	cbz	r2, 80099c2 <_raise_r+0x1e>
 80099bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80099c0:	b94b      	cbnz	r3, 80099d6 <_raise_r+0x32>
 80099c2:	4628      	mov	r0, r5
 80099c4:	f000 f830 	bl	8009a28 <_getpid_r>
 80099c8:	4622      	mov	r2, r4
 80099ca:	4601      	mov	r1, r0
 80099cc:	4628      	mov	r0, r5
 80099ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80099d2:	f000 b817 	b.w	8009a04 <_kill_r>
 80099d6:	2b01      	cmp	r3, #1
 80099d8:	d00a      	beq.n	80099f0 <_raise_r+0x4c>
 80099da:	1c59      	adds	r1, r3, #1
 80099dc:	d103      	bne.n	80099e6 <_raise_r+0x42>
 80099de:	2316      	movs	r3, #22
 80099e0:	6003      	str	r3, [r0, #0]
 80099e2:	2001      	movs	r0, #1
 80099e4:	e7e7      	b.n	80099b6 <_raise_r+0x12>
 80099e6:	2100      	movs	r1, #0
 80099e8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80099ec:	4620      	mov	r0, r4
 80099ee:	4798      	blx	r3
 80099f0:	2000      	movs	r0, #0
 80099f2:	e7e0      	b.n	80099b6 <_raise_r+0x12>

080099f4 <raise>:
 80099f4:	4b02      	ldr	r3, [pc, #8]	@ (8009a00 <raise+0xc>)
 80099f6:	4601      	mov	r1, r0
 80099f8:	6818      	ldr	r0, [r3, #0]
 80099fa:	f7ff bfd3 	b.w	80099a4 <_raise_r>
 80099fe:	bf00      	nop
 8009a00:	20000018 	.word	0x20000018

08009a04 <_kill_r>:
 8009a04:	b538      	push	{r3, r4, r5, lr}
 8009a06:	4d07      	ldr	r5, [pc, #28]	@ (8009a24 <_kill_r+0x20>)
 8009a08:	2300      	movs	r3, #0
 8009a0a:	4604      	mov	r4, r0
 8009a0c:	4608      	mov	r0, r1
 8009a0e:	4611      	mov	r1, r2
 8009a10:	602b      	str	r3, [r5, #0]
 8009a12:	f7f9 fd0b 	bl	800342c <_kill>
 8009a16:	1c43      	adds	r3, r0, #1
 8009a18:	d102      	bne.n	8009a20 <_kill_r+0x1c>
 8009a1a:	682b      	ldr	r3, [r5, #0]
 8009a1c:	b103      	cbz	r3, 8009a20 <_kill_r+0x1c>
 8009a1e:	6023      	str	r3, [r4, #0]
 8009a20:	bd38      	pop	{r3, r4, r5, pc}
 8009a22:	bf00      	nop
 8009a24:	20004acc 	.word	0x20004acc

08009a28 <_getpid_r>:
 8009a28:	f7f9 bcf8 	b.w	800341c <_getpid>

08009a2c <__swhatbuf_r>:
 8009a2c:	b570      	push	{r4, r5, r6, lr}
 8009a2e:	460c      	mov	r4, r1
 8009a30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a34:	2900      	cmp	r1, #0
 8009a36:	b096      	sub	sp, #88	@ 0x58
 8009a38:	4615      	mov	r5, r2
 8009a3a:	461e      	mov	r6, r3
 8009a3c:	da0d      	bge.n	8009a5a <__swhatbuf_r+0x2e>
 8009a3e:	89a3      	ldrh	r3, [r4, #12]
 8009a40:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009a44:	f04f 0100 	mov.w	r1, #0
 8009a48:	bf14      	ite	ne
 8009a4a:	2340      	movne	r3, #64	@ 0x40
 8009a4c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009a50:	2000      	movs	r0, #0
 8009a52:	6031      	str	r1, [r6, #0]
 8009a54:	602b      	str	r3, [r5, #0]
 8009a56:	b016      	add	sp, #88	@ 0x58
 8009a58:	bd70      	pop	{r4, r5, r6, pc}
 8009a5a:	466a      	mov	r2, sp
 8009a5c:	f000 f848 	bl	8009af0 <_fstat_r>
 8009a60:	2800      	cmp	r0, #0
 8009a62:	dbec      	blt.n	8009a3e <__swhatbuf_r+0x12>
 8009a64:	9901      	ldr	r1, [sp, #4]
 8009a66:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009a6a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009a6e:	4259      	negs	r1, r3
 8009a70:	4159      	adcs	r1, r3
 8009a72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009a76:	e7eb      	b.n	8009a50 <__swhatbuf_r+0x24>

08009a78 <__smakebuf_r>:
 8009a78:	898b      	ldrh	r3, [r1, #12]
 8009a7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a7c:	079d      	lsls	r5, r3, #30
 8009a7e:	4606      	mov	r6, r0
 8009a80:	460c      	mov	r4, r1
 8009a82:	d507      	bpl.n	8009a94 <__smakebuf_r+0x1c>
 8009a84:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009a88:	6023      	str	r3, [r4, #0]
 8009a8a:	6123      	str	r3, [r4, #16]
 8009a8c:	2301      	movs	r3, #1
 8009a8e:	6163      	str	r3, [r4, #20]
 8009a90:	b003      	add	sp, #12
 8009a92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a94:	ab01      	add	r3, sp, #4
 8009a96:	466a      	mov	r2, sp
 8009a98:	f7ff ffc8 	bl	8009a2c <__swhatbuf_r>
 8009a9c:	9f00      	ldr	r7, [sp, #0]
 8009a9e:	4605      	mov	r5, r0
 8009aa0:	4639      	mov	r1, r7
 8009aa2:	4630      	mov	r0, r6
 8009aa4:	f7fe fed4 	bl	8008850 <_malloc_r>
 8009aa8:	b948      	cbnz	r0, 8009abe <__smakebuf_r+0x46>
 8009aaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009aae:	059a      	lsls	r2, r3, #22
 8009ab0:	d4ee      	bmi.n	8009a90 <__smakebuf_r+0x18>
 8009ab2:	f023 0303 	bic.w	r3, r3, #3
 8009ab6:	f043 0302 	orr.w	r3, r3, #2
 8009aba:	81a3      	strh	r3, [r4, #12]
 8009abc:	e7e2      	b.n	8009a84 <__smakebuf_r+0xc>
 8009abe:	89a3      	ldrh	r3, [r4, #12]
 8009ac0:	6020      	str	r0, [r4, #0]
 8009ac2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ac6:	81a3      	strh	r3, [r4, #12]
 8009ac8:	9b01      	ldr	r3, [sp, #4]
 8009aca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009ace:	b15b      	cbz	r3, 8009ae8 <__smakebuf_r+0x70>
 8009ad0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ad4:	4630      	mov	r0, r6
 8009ad6:	f000 f81d 	bl	8009b14 <_isatty_r>
 8009ada:	b128      	cbz	r0, 8009ae8 <__smakebuf_r+0x70>
 8009adc:	89a3      	ldrh	r3, [r4, #12]
 8009ade:	f023 0303 	bic.w	r3, r3, #3
 8009ae2:	f043 0301 	orr.w	r3, r3, #1
 8009ae6:	81a3      	strh	r3, [r4, #12]
 8009ae8:	89a3      	ldrh	r3, [r4, #12]
 8009aea:	431d      	orrs	r5, r3
 8009aec:	81a5      	strh	r5, [r4, #12]
 8009aee:	e7cf      	b.n	8009a90 <__smakebuf_r+0x18>

08009af0 <_fstat_r>:
 8009af0:	b538      	push	{r3, r4, r5, lr}
 8009af2:	4d07      	ldr	r5, [pc, #28]	@ (8009b10 <_fstat_r+0x20>)
 8009af4:	2300      	movs	r3, #0
 8009af6:	4604      	mov	r4, r0
 8009af8:	4608      	mov	r0, r1
 8009afa:	4611      	mov	r1, r2
 8009afc:	602b      	str	r3, [r5, #0]
 8009afe:	f7f9 fcf5 	bl	80034ec <_fstat>
 8009b02:	1c43      	adds	r3, r0, #1
 8009b04:	d102      	bne.n	8009b0c <_fstat_r+0x1c>
 8009b06:	682b      	ldr	r3, [r5, #0]
 8009b08:	b103      	cbz	r3, 8009b0c <_fstat_r+0x1c>
 8009b0a:	6023      	str	r3, [r4, #0]
 8009b0c:	bd38      	pop	{r3, r4, r5, pc}
 8009b0e:	bf00      	nop
 8009b10:	20004acc 	.word	0x20004acc

08009b14 <_isatty_r>:
 8009b14:	b538      	push	{r3, r4, r5, lr}
 8009b16:	4d06      	ldr	r5, [pc, #24]	@ (8009b30 <_isatty_r+0x1c>)
 8009b18:	2300      	movs	r3, #0
 8009b1a:	4604      	mov	r4, r0
 8009b1c:	4608      	mov	r0, r1
 8009b1e:	602b      	str	r3, [r5, #0]
 8009b20:	f7f9 fcf4 	bl	800350c <_isatty>
 8009b24:	1c43      	adds	r3, r0, #1
 8009b26:	d102      	bne.n	8009b2e <_isatty_r+0x1a>
 8009b28:	682b      	ldr	r3, [r5, #0]
 8009b2a:	b103      	cbz	r3, 8009b2e <_isatty_r+0x1a>
 8009b2c:	6023      	str	r3, [r4, #0]
 8009b2e:	bd38      	pop	{r3, r4, r5, pc}
 8009b30:	20004acc 	.word	0x20004acc
 8009b34:	00000000 	.word	0x00000000

08009b38 <log>:
 8009b38:	b538      	push	{r3, r4, r5, lr}
 8009b3a:	ed2d 8b02 	vpush	{d8}
 8009b3e:	ec55 4b10 	vmov	r4, r5, d0
 8009b42:	f000 f841 	bl	8009bc8 <__ieee754_log>
 8009b46:	4622      	mov	r2, r4
 8009b48:	462b      	mov	r3, r5
 8009b4a:	4620      	mov	r0, r4
 8009b4c:	4629      	mov	r1, r5
 8009b4e:	eeb0 8a40 	vmov.f32	s16, s0
 8009b52:	eef0 8a60 	vmov.f32	s17, s1
 8009b56:	f7f6 fff1 	bl	8000b3c <__aeabi_dcmpun>
 8009b5a:	b998      	cbnz	r0, 8009b84 <log+0x4c>
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	2300      	movs	r3, #0
 8009b60:	4620      	mov	r0, r4
 8009b62:	4629      	mov	r1, r5
 8009b64:	f7f6 ffe0 	bl	8000b28 <__aeabi_dcmpgt>
 8009b68:	b960      	cbnz	r0, 8009b84 <log+0x4c>
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	4620      	mov	r0, r4
 8009b70:	4629      	mov	r1, r5
 8009b72:	f7f6 ffb1 	bl	8000ad8 <__aeabi_dcmpeq>
 8009b76:	b160      	cbz	r0, 8009b92 <log+0x5a>
 8009b78:	f7fd ff62 	bl	8007a40 <__errno>
 8009b7c:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 8009ba8 <log+0x70>
 8009b80:	2322      	movs	r3, #34	@ 0x22
 8009b82:	6003      	str	r3, [r0, #0]
 8009b84:	eeb0 0a48 	vmov.f32	s0, s16
 8009b88:	eef0 0a68 	vmov.f32	s1, s17
 8009b8c:	ecbd 8b02 	vpop	{d8}
 8009b90:	bd38      	pop	{r3, r4, r5, pc}
 8009b92:	f7fd ff55 	bl	8007a40 <__errno>
 8009b96:	ecbd 8b02 	vpop	{d8}
 8009b9a:	2321      	movs	r3, #33	@ 0x21
 8009b9c:	6003      	str	r3, [r0, #0]
 8009b9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ba2:	4803      	ldr	r0, [pc, #12]	@ (8009bb0 <log+0x78>)
 8009ba4:	f000 b808 	b.w	8009bb8 <nan>
 8009ba8:	00000000 	.word	0x00000000
 8009bac:	fff00000 	.word	0xfff00000
 8009bb0:	0800a82c 	.word	0x0800a82c
 8009bb4:	00000000 	.word	0x00000000

08009bb8 <nan>:
 8009bb8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009bc0 <nan+0x8>
 8009bbc:	4770      	bx	lr
 8009bbe:	bf00      	nop
 8009bc0:	00000000 	.word	0x00000000
 8009bc4:	7ff80000 	.word	0x7ff80000

08009bc8 <__ieee754_log>:
 8009bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bcc:	ec51 0b10 	vmov	r0, r1, d0
 8009bd0:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8009bd4:	b087      	sub	sp, #28
 8009bd6:	460d      	mov	r5, r1
 8009bd8:	da26      	bge.n	8009c28 <__ieee754_log+0x60>
 8009bda:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009bde:	4303      	orrs	r3, r0
 8009be0:	4602      	mov	r2, r0
 8009be2:	d10a      	bne.n	8009bfa <__ieee754_log+0x32>
 8009be4:	49ce      	ldr	r1, [pc, #824]	@ (8009f20 <__ieee754_log+0x358>)
 8009be6:	2200      	movs	r2, #0
 8009be8:	2300      	movs	r3, #0
 8009bea:	2000      	movs	r0, #0
 8009bec:	f7f6 fe36 	bl	800085c <__aeabi_ddiv>
 8009bf0:	ec41 0b10 	vmov	d0, r0, r1
 8009bf4:	b007      	add	sp, #28
 8009bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bfa:	2900      	cmp	r1, #0
 8009bfc:	da05      	bge.n	8009c0a <__ieee754_log+0x42>
 8009bfe:	460b      	mov	r3, r1
 8009c00:	f7f6 fb4a 	bl	8000298 <__aeabi_dsub>
 8009c04:	2200      	movs	r2, #0
 8009c06:	2300      	movs	r3, #0
 8009c08:	e7f0      	b.n	8009bec <__ieee754_log+0x24>
 8009c0a:	4bc6      	ldr	r3, [pc, #792]	@ (8009f24 <__ieee754_log+0x35c>)
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	f7f6 fcfb 	bl	8000608 <__aeabi_dmul>
 8009c12:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 8009c16:	460d      	mov	r5, r1
 8009c18:	4ac3      	ldr	r2, [pc, #780]	@ (8009f28 <__ieee754_log+0x360>)
 8009c1a:	4295      	cmp	r5, r2
 8009c1c:	dd06      	ble.n	8009c2c <__ieee754_log+0x64>
 8009c1e:	4602      	mov	r2, r0
 8009c20:	460b      	mov	r3, r1
 8009c22:	f7f6 fb3b 	bl	800029c <__adddf3>
 8009c26:	e7e3      	b.n	8009bf0 <__ieee754_log+0x28>
 8009c28:	2300      	movs	r3, #0
 8009c2a:	e7f5      	b.n	8009c18 <__ieee754_log+0x50>
 8009c2c:	152c      	asrs	r4, r5, #20
 8009c2e:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 8009c32:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8009c36:	441c      	add	r4, r3
 8009c38:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 8009c3c:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 8009c40:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009c44:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 8009c48:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 8009c4c:	ea42 0105 	orr.w	r1, r2, r5
 8009c50:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8009c54:	2200      	movs	r2, #0
 8009c56:	4bb5      	ldr	r3, [pc, #724]	@ (8009f2c <__ieee754_log+0x364>)
 8009c58:	f7f6 fb1e 	bl	8000298 <__aeabi_dsub>
 8009c5c:	1cab      	adds	r3, r5, #2
 8009c5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009c62:	2b02      	cmp	r3, #2
 8009c64:	4682      	mov	sl, r0
 8009c66:	468b      	mov	fp, r1
 8009c68:	f04f 0200 	mov.w	r2, #0
 8009c6c:	dc53      	bgt.n	8009d16 <__ieee754_log+0x14e>
 8009c6e:	2300      	movs	r3, #0
 8009c70:	f7f6 ff32 	bl	8000ad8 <__aeabi_dcmpeq>
 8009c74:	b1d0      	cbz	r0, 8009cac <__ieee754_log+0xe4>
 8009c76:	2c00      	cmp	r4, #0
 8009c78:	f000 8120 	beq.w	8009ebc <__ieee754_log+0x2f4>
 8009c7c:	4620      	mov	r0, r4
 8009c7e:	f7f6 fc59 	bl	8000534 <__aeabi_i2d>
 8009c82:	a391      	add	r3, pc, #580	@ (adr r3, 8009ec8 <__ieee754_log+0x300>)
 8009c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c88:	4606      	mov	r6, r0
 8009c8a:	460f      	mov	r7, r1
 8009c8c:	f7f6 fcbc 	bl	8000608 <__aeabi_dmul>
 8009c90:	a38f      	add	r3, pc, #572	@ (adr r3, 8009ed0 <__ieee754_log+0x308>)
 8009c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c96:	4604      	mov	r4, r0
 8009c98:	460d      	mov	r5, r1
 8009c9a:	4630      	mov	r0, r6
 8009c9c:	4639      	mov	r1, r7
 8009c9e:	f7f6 fcb3 	bl	8000608 <__aeabi_dmul>
 8009ca2:	4602      	mov	r2, r0
 8009ca4:	460b      	mov	r3, r1
 8009ca6:	4620      	mov	r0, r4
 8009ca8:	4629      	mov	r1, r5
 8009caa:	e7ba      	b.n	8009c22 <__ieee754_log+0x5a>
 8009cac:	a38a      	add	r3, pc, #552	@ (adr r3, 8009ed8 <__ieee754_log+0x310>)
 8009cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cb2:	4650      	mov	r0, sl
 8009cb4:	4659      	mov	r1, fp
 8009cb6:	f7f6 fca7 	bl	8000608 <__aeabi_dmul>
 8009cba:	4602      	mov	r2, r0
 8009cbc:	460b      	mov	r3, r1
 8009cbe:	2000      	movs	r0, #0
 8009cc0:	499b      	ldr	r1, [pc, #620]	@ (8009f30 <__ieee754_log+0x368>)
 8009cc2:	f7f6 fae9 	bl	8000298 <__aeabi_dsub>
 8009cc6:	4652      	mov	r2, sl
 8009cc8:	4606      	mov	r6, r0
 8009cca:	460f      	mov	r7, r1
 8009ccc:	465b      	mov	r3, fp
 8009cce:	4650      	mov	r0, sl
 8009cd0:	4659      	mov	r1, fp
 8009cd2:	f7f6 fc99 	bl	8000608 <__aeabi_dmul>
 8009cd6:	4602      	mov	r2, r0
 8009cd8:	460b      	mov	r3, r1
 8009cda:	4630      	mov	r0, r6
 8009cdc:	4639      	mov	r1, r7
 8009cde:	f7f6 fc93 	bl	8000608 <__aeabi_dmul>
 8009ce2:	4606      	mov	r6, r0
 8009ce4:	460f      	mov	r7, r1
 8009ce6:	b914      	cbnz	r4, 8009cee <__ieee754_log+0x126>
 8009ce8:	4632      	mov	r2, r6
 8009cea:	463b      	mov	r3, r7
 8009cec:	e0a0      	b.n	8009e30 <__ieee754_log+0x268>
 8009cee:	4620      	mov	r0, r4
 8009cf0:	f7f6 fc20 	bl	8000534 <__aeabi_i2d>
 8009cf4:	a374      	add	r3, pc, #464	@ (adr r3, 8009ec8 <__ieee754_log+0x300>)
 8009cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cfa:	4680      	mov	r8, r0
 8009cfc:	4689      	mov	r9, r1
 8009cfe:	f7f6 fc83 	bl	8000608 <__aeabi_dmul>
 8009d02:	a373      	add	r3, pc, #460	@ (adr r3, 8009ed0 <__ieee754_log+0x308>)
 8009d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d08:	4604      	mov	r4, r0
 8009d0a:	460d      	mov	r5, r1
 8009d0c:	4640      	mov	r0, r8
 8009d0e:	4649      	mov	r1, r9
 8009d10:	f7f6 fc7a 	bl	8000608 <__aeabi_dmul>
 8009d14:	e0a5      	b.n	8009e62 <__ieee754_log+0x29a>
 8009d16:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009d1a:	f7f6 fabf 	bl	800029c <__adddf3>
 8009d1e:	4602      	mov	r2, r0
 8009d20:	460b      	mov	r3, r1
 8009d22:	4650      	mov	r0, sl
 8009d24:	4659      	mov	r1, fp
 8009d26:	f7f6 fd99 	bl	800085c <__aeabi_ddiv>
 8009d2a:	e9cd 0100 	strd	r0, r1, [sp]
 8009d2e:	4620      	mov	r0, r4
 8009d30:	f7f6 fc00 	bl	8000534 <__aeabi_i2d>
 8009d34:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009d38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d3c:	4610      	mov	r0, r2
 8009d3e:	4619      	mov	r1, r3
 8009d40:	f7f6 fc62 	bl	8000608 <__aeabi_dmul>
 8009d44:	4602      	mov	r2, r0
 8009d46:	460b      	mov	r3, r1
 8009d48:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009d4c:	f7f6 fc5c 	bl	8000608 <__aeabi_dmul>
 8009d50:	a363      	add	r3, pc, #396	@ (adr r3, 8009ee0 <__ieee754_log+0x318>)
 8009d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d56:	4680      	mov	r8, r0
 8009d58:	4689      	mov	r9, r1
 8009d5a:	f7f6 fc55 	bl	8000608 <__aeabi_dmul>
 8009d5e:	a362      	add	r3, pc, #392	@ (adr r3, 8009ee8 <__ieee754_log+0x320>)
 8009d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d64:	f7f6 fa9a 	bl	800029c <__adddf3>
 8009d68:	4642      	mov	r2, r8
 8009d6a:	464b      	mov	r3, r9
 8009d6c:	f7f6 fc4c 	bl	8000608 <__aeabi_dmul>
 8009d70:	a35f      	add	r3, pc, #380	@ (adr r3, 8009ef0 <__ieee754_log+0x328>)
 8009d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d76:	f7f6 fa91 	bl	800029c <__adddf3>
 8009d7a:	4642      	mov	r2, r8
 8009d7c:	464b      	mov	r3, r9
 8009d7e:	f7f6 fc43 	bl	8000608 <__aeabi_dmul>
 8009d82:	a35d      	add	r3, pc, #372	@ (adr r3, 8009ef8 <__ieee754_log+0x330>)
 8009d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d88:	f7f6 fa88 	bl	800029c <__adddf3>
 8009d8c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d90:	f7f6 fc3a 	bl	8000608 <__aeabi_dmul>
 8009d94:	a35a      	add	r3, pc, #360	@ (adr r3, 8009f00 <__ieee754_log+0x338>)
 8009d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d9a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009d9e:	4640      	mov	r0, r8
 8009da0:	4649      	mov	r1, r9
 8009da2:	f7f6 fc31 	bl	8000608 <__aeabi_dmul>
 8009da6:	a358      	add	r3, pc, #352	@ (adr r3, 8009f08 <__ieee754_log+0x340>)
 8009da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dac:	f7f6 fa76 	bl	800029c <__adddf3>
 8009db0:	4642      	mov	r2, r8
 8009db2:	464b      	mov	r3, r9
 8009db4:	f7f6 fc28 	bl	8000608 <__aeabi_dmul>
 8009db8:	a355      	add	r3, pc, #340	@ (adr r3, 8009f10 <__ieee754_log+0x348>)
 8009dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dbe:	f7f6 fa6d 	bl	800029c <__adddf3>
 8009dc2:	4642      	mov	r2, r8
 8009dc4:	464b      	mov	r3, r9
 8009dc6:	f7f6 fc1f 	bl	8000608 <__aeabi_dmul>
 8009dca:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 8009dce:	4602      	mov	r2, r0
 8009dd0:	460b      	mov	r3, r1
 8009dd2:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 8009dd6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009dda:	f7f6 fa5f 	bl	800029c <__adddf3>
 8009dde:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 8009de2:	3551      	adds	r5, #81	@ 0x51
 8009de4:	4335      	orrs	r5, r6
 8009de6:	2d00      	cmp	r5, #0
 8009de8:	4680      	mov	r8, r0
 8009dea:	4689      	mov	r9, r1
 8009dec:	dd48      	ble.n	8009e80 <__ieee754_log+0x2b8>
 8009dee:	4b50      	ldr	r3, [pc, #320]	@ (8009f30 <__ieee754_log+0x368>)
 8009df0:	2200      	movs	r2, #0
 8009df2:	4650      	mov	r0, sl
 8009df4:	4659      	mov	r1, fp
 8009df6:	f7f6 fc07 	bl	8000608 <__aeabi_dmul>
 8009dfa:	4652      	mov	r2, sl
 8009dfc:	465b      	mov	r3, fp
 8009dfe:	f7f6 fc03 	bl	8000608 <__aeabi_dmul>
 8009e02:	4602      	mov	r2, r0
 8009e04:	460b      	mov	r3, r1
 8009e06:	4606      	mov	r6, r0
 8009e08:	460f      	mov	r7, r1
 8009e0a:	4640      	mov	r0, r8
 8009e0c:	4649      	mov	r1, r9
 8009e0e:	f7f6 fa45 	bl	800029c <__adddf3>
 8009e12:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e16:	f7f6 fbf7 	bl	8000608 <__aeabi_dmul>
 8009e1a:	4680      	mov	r8, r0
 8009e1c:	4689      	mov	r9, r1
 8009e1e:	b964      	cbnz	r4, 8009e3a <__ieee754_log+0x272>
 8009e20:	4602      	mov	r2, r0
 8009e22:	460b      	mov	r3, r1
 8009e24:	4630      	mov	r0, r6
 8009e26:	4639      	mov	r1, r7
 8009e28:	f7f6 fa36 	bl	8000298 <__aeabi_dsub>
 8009e2c:	4602      	mov	r2, r0
 8009e2e:	460b      	mov	r3, r1
 8009e30:	4650      	mov	r0, sl
 8009e32:	4659      	mov	r1, fp
 8009e34:	f7f6 fa30 	bl	8000298 <__aeabi_dsub>
 8009e38:	e6da      	b.n	8009bf0 <__ieee754_log+0x28>
 8009e3a:	a323      	add	r3, pc, #140	@ (adr r3, 8009ec8 <__ieee754_log+0x300>)
 8009e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e44:	f7f6 fbe0 	bl	8000608 <__aeabi_dmul>
 8009e48:	a321      	add	r3, pc, #132	@ (adr r3, 8009ed0 <__ieee754_log+0x308>)
 8009e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e4e:	4604      	mov	r4, r0
 8009e50:	460d      	mov	r5, r1
 8009e52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e56:	f7f6 fbd7 	bl	8000608 <__aeabi_dmul>
 8009e5a:	4642      	mov	r2, r8
 8009e5c:	464b      	mov	r3, r9
 8009e5e:	f7f6 fa1d 	bl	800029c <__adddf3>
 8009e62:	4602      	mov	r2, r0
 8009e64:	460b      	mov	r3, r1
 8009e66:	4630      	mov	r0, r6
 8009e68:	4639      	mov	r1, r7
 8009e6a:	f7f6 fa15 	bl	8000298 <__aeabi_dsub>
 8009e6e:	4652      	mov	r2, sl
 8009e70:	465b      	mov	r3, fp
 8009e72:	f7f6 fa11 	bl	8000298 <__aeabi_dsub>
 8009e76:	4602      	mov	r2, r0
 8009e78:	460b      	mov	r3, r1
 8009e7a:	4620      	mov	r0, r4
 8009e7c:	4629      	mov	r1, r5
 8009e7e:	e7d9      	b.n	8009e34 <__ieee754_log+0x26c>
 8009e80:	4602      	mov	r2, r0
 8009e82:	460b      	mov	r3, r1
 8009e84:	4650      	mov	r0, sl
 8009e86:	4659      	mov	r1, fp
 8009e88:	f7f6 fa06 	bl	8000298 <__aeabi_dsub>
 8009e8c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e90:	f7f6 fbba 	bl	8000608 <__aeabi_dmul>
 8009e94:	4606      	mov	r6, r0
 8009e96:	460f      	mov	r7, r1
 8009e98:	2c00      	cmp	r4, #0
 8009e9a:	f43f af25 	beq.w	8009ce8 <__ieee754_log+0x120>
 8009e9e:	a30a      	add	r3, pc, #40	@ (adr r3, 8009ec8 <__ieee754_log+0x300>)
 8009ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ea4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ea8:	f7f6 fbae 	bl	8000608 <__aeabi_dmul>
 8009eac:	a308      	add	r3, pc, #32	@ (adr r3, 8009ed0 <__ieee754_log+0x308>)
 8009eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eb2:	4604      	mov	r4, r0
 8009eb4:	460d      	mov	r5, r1
 8009eb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009eba:	e729      	b.n	8009d10 <__ieee754_log+0x148>
 8009ebc:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8009f18 <__ieee754_log+0x350>
 8009ec0:	e698      	b.n	8009bf4 <__ieee754_log+0x2c>
 8009ec2:	bf00      	nop
 8009ec4:	f3af 8000 	nop.w
 8009ec8:	fee00000 	.word	0xfee00000
 8009ecc:	3fe62e42 	.word	0x3fe62e42
 8009ed0:	35793c76 	.word	0x35793c76
 8009ed4:	3dea39ef 	.word	0x3dea39ef
 8009ed8:	55555555 	.word	0x55555555
 8009edc:	3fd55555 	.word	0x3fd55555
 8009ee0:	df3e5244 	.word	0xdf3e5244
 8009ee4:	3fc2f112 	.word	0x3fc2f112
 8009ee8:	96cb03de 	.word	0x96cb03de
 8009eec:	3fc74664 	.word	0x3fc74664
 8009ef0:	94229359 	.word	0x94229359
 8009ef4:	3fd24924 	.word	0x3fd24924
 8009ef8:	55555593 	.word	0x55555593
 8009efc:	3fe55555 	.word	0x3fe55555
 8009f00:	d078c69f 	.word	0xd078c69f
 8009f04:	3fc39a09 	.word	0x3fc39a09
 8009f08:	1d8e78af 	.word	0x1d8e78af
 8009f0c:	3fcc71c5 	.word	0x3fcc71c5
 8009f10:	9997fa04 	.word	0x9997fa04
 8009f14:	3fd99999 	.word	0x3fd99999
	...
 8009f20:	c3500000 	.word	0xc3500000
 8009f24:	43500000 	.word	0x43500000
 8009f28:	7fefffff 	.word	0x7fefffff
 8009f2c:	3ff00000 	.word	0x3ff00000
 8009f30:	3fe00000 	.word	0x3fe00000

08009f34 <_init>:
 8009f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f36:	bf00      	nop
 8009f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f3a:	bc08      	pop	{r3}
 8009f3c:	469e      	mov	lr, r3
 8009f3e:	4770      	bx	lr

08009f40 <_fini>:
 8009f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f42:	bf00      	nop
 8009f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f46:	bc08      	pop	{r3}
 8009f48:	469e      	mov	lr, r3
 8009f4a:	4770      	bx	lr
