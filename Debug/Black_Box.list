
Black_Box.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092ec  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000afc  08009490  08009490  0000a490  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f8c  08009f8c  0000b1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009f8c  08009f8c  0000af8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f94  08009f94  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f94  08009f94  0000af94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009f98  08009f98  0000af98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08009f9c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010b0  200001d4  0800a170  0000b1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001284  0800a170  0000b284  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014dac  00000000  00000000  0000b204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003257  00000000  00000000  0001ffb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001310  00000000  00000000  00023208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000eed  00000000  00000000  00024518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a2cd  00000000  00000000  00025405  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000192a1  00000000  00000000  0003f6d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f71b  00000000  00000000  00058973  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f808e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061e8  00000000  00000000  000f80d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000095  00000000  00000000  000fe2bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009474 	.word	0x08009474

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	08009474 	.word	0x08009474

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b988 	b.w	8000f80 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	468e      	mov	lr, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	4688      	mov	r8, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d962      	bls.n	8000d64 <__udivmoddi4+0xdc>
 8000c9e:	fab2 f682 	clz	r6, r2
 8000ca2:	b14e      	cbz	r6, 8000cb8 <__udivmoddi4+0x30>
 8000ca4:	f1c6 0320 	rsb	r3, r6, #32
 8000ca8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cac:	fa20 f303 	lsr.w	r3, r0, r3
 8000cb0:	40b7      	lsls	r7, r6
 8000cb2:	ea43 0808 	orr.w	r8, r3, r8
 8000cb6:	40b4      	lsls	r4, r6
 8000cb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cbc:	fa1f fc87 	uxth.w	ip, r7
 8000cc0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cc4:	0c23      	lsrs	r3, r4, #16
 8000cc6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cce:	fb01 f20c 	mul.w	r2, r1, ip
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd6:	18fb      	adds	r3, r7, r3
 8000cd8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cdc:	f080 80ea 	bcs.w	8000eb4 <__udivmoddi4+0x22c>
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	f240 80e7 	bls.w	8000eb4 <__udivmoddi4+0x22c>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	443b      	add	r3, r7
 8000cea:	1a9a      	subs	r2, r3, r2
 8000cec:	b2a3      	uxth	r3, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cfa:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cfe:	459c      	cmp	ip, r3
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x8e>
 8000d02:	18fb      	adds	r3, r7, r3
 8000d04:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d08:	f080 80d6 	bcs.w	8000eb8 <__udivmoddi4+0x230>
 8000d0c:	459c      	cmp	ip, r3
 8000d0e:	f240 80d3 	bls.w	8000eb8 <__udivmoddi4+0x230>
 8000d12:	443b      	add	r3, r7
 8000d14:	3802      	subs	r0, #2
 8000d16:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1a:	eba3 030c 	sub.w	r3, r3, ip
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11d      	cbz	r5, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40f3      	lsrs	r3, r6
 8000d24:	2200      	movs	r2, #0
 8000d26:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d905      	bls.n	8000d3e <__udivmoddi4+0xb6>
 8000d32:	b10d      	cbz	r5, 8000d38 <__udivmoddi4+0xb0>
 8000d34:	e9c5 0100 	strd	r0, r1, [r5]
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4608      	mov	r0, r1
 8000d3c:	e7f5      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d3e:	fab3 f183 	clz	r1, r3
 8000d42:	2900      	cmp	r1, #0
 8000d44:	d146      	bne.n	8000dd4 <__udivmoddi4+0x14c>
 8000d46:	4573      	cmp	r3, lr
 8000d48:	d302      	bcc.n	8000d50 <__udivmoddi4+0xc8>
 8000d4a:	4282      	cmp	r2, r0
 8000d4c:	f200 8105 	bhi.w	8000f5a <__udivmoddi4+0x2d2>
 8000d50:	1a84      	subs	r4, r0, r2
 8000d52:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d56:	2001      	movs	r0, #1
 8000d58:	4690      	mov	r8, r2
 8000d5a:	2d00      	cmp	r5, #0
 8000d5c:	d0e5      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d5e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d62:	e7e2      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f000 8090 	beq.w	8000e8a <__udivmoddi4+0x202>
 8000d6a:	fab2 f682 	clz	r6, r2
 8000d6e:	2e00      	cmp	r6, #0
 8000d70:	f040 80a4 	bne.w	8000ebc <__udivmoddi4+0x234>
 8000d74:	1a8a      	subs	r2, r1, r2
 8000d76:	0c03      	lsrs	r3, r0, #16
 8000d78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7c:	b280      	uxth	r0, r0
 8000d7e:	b2bc      	uxth	r4, r7
 8000d80:	2101      	movs	r1, #1
 8000d82:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d86:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d8e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d92:	429a      	cmp	r2, r3
 8000d94:	d907      	bls.n	8000da6 <__udivmoddi4+0x11e>
 8000d96:	18fb      	adds	r3, r7, r3
 8000d98:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d9c:	d202      	bcs.n	8000da4 <__udivmoddi4+0x11c>
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	f200 80e0 	bhi.w	8000f64 <__udivmoddi4+0x2dc>
 8000da4:	46c4      	mov	ip, r8
 8000da6:	1a9b      	subs	r3, r3, r2
 8000da8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dac:	fb0e 3312 	mls	r3, lr, r2, r3
 8000db0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000db4:	fb02 f404 	mul.w	r4, r2, r4
 8000db8:	429c      	cmp	r4, r3
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x144>
 8000dbc:	18fb      	adds	r3, r7, r3
 8000dbe:	f102 30ff 	add.w	r0, r2, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x142>
 8000dc4:	429c      	cmp	r4, r3
 8000dc6:	f200 80ca 	bhi.w	8000f5e <__udivmoddi4+0x2d6>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	1b1b      	subs	r3, r3, r4
 8000dce:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dd2:	e7a5      	b.n	8000d20 <__udivmoddi4+0x98>
 8000dd4:	f1c1 0620 	rsb	r6, r1, #32
 8000dd8:	408b      	lsls	r3, r1
 8000dda:	fa22 f706 	lsr.w	r7, r2, r6
 8000dde:	431f      	orrs	r7, r3
 8000de0:	fa0e f401 	lsl.w	r4, lr, r1
 8000de4:	fa20 f306 	lsr.w	r3, r0, r6
 8000de8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000dec:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000df0:	4323      	orrs	r3, r4
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	fa1f fc87 	uxth.w	ip, r7
 8000dfa:	fbbe f0f9 	udiv	r0, lr, r9
 8000dfe:	0c1c      	lsrs	r4, r3, #16
 8000e00:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e04:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e08:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e0c:	45a6      	cmp	lr, r4
 8000e0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e12:	d909      	bls.n	8000e28 <__udivmoddi4+0x1a0>
 8000e14:	193c      	adds	r4, r7, r4
 8000e16:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e1a:	f080 809c 	bcs.w	8000f56 <__udivmoddi4+0x2ce>
 8000e1e:	45a6      	cmp	lr, r4
 8000e20:	f240 8099 	bls.w	8000f56 <__udivmoddi4+0x2ce>
 8000e24:	3802      	subs	r0, #2
 8000e26:	443c      	add	r4, r7
 8000e28:	eba4 040e 	sub.w	r4, r4, lr
 8000e2c:	fa1f fe83 	uxth.w	lr, r3
 8000e30:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e34:	fb09 4413 	mls	r4, r9, r3, r4
 8000e38:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e3c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e40:	45a4      	cmp	ip, r4
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x1ce>
 8000e44:	193c      	adds	r4, r7, r4
 8000e46:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e4a:	f080 8082 	bcs.w	8000f52 <__udivmoddi4+0x2ca>
 8000e4e:	45a4      	cmp	ip, r4
 8000e50:	d97f      	bls.n	8000f52 <__udivmoddi4+0x2ca>
 8000e52:	3b02      	subs	r3, #2
 8000e54:	443c      	add	r4, r7
 8000e56:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e5a:	eba4 040c 	sub.w	r4, r4, ip
 8000e5e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e62:	4564      	cmp	r4, ip
 8000e64:	4673      	mov	r3, lr
 8000e66:	46e1      	mov	r9, ip
 8000e68:	d362      	bcc.n	8000f30 <__udivmoddi4+0x2a8>
 8000e6a:	d05f      	beq.n	8000f2c <__udivmoddi4+0x2a4>
 8000e6c:	b15d      	cbz	r5, 8000e86 <__udivmoddi4+0x1fe>
 8000e6e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e72:	eb64 0409 	sbc.w	r4, r4, r9
 8000e76:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e7e:	431e      	orrs	r6, r3
 8000e80:	40cc      	lsrs	r4, r1
 8000e82:	e9c5 6400 	strd	r6, r4, [r5]
 8000e86:	2100      	movs	r1, #0
 8000e88:	e74f      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000e8a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e8e:	0c01      	lsrs	r1, r0, #16
 8000e90:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e94:	b280      	uxth	r0, r0
 8000e96:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e9a:	463b      	mov	r3, r7
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	463c      	mov	r4, r7
 8000ea0:	46b8      	mov	r8, r7
 8000ea2:	46be      	mov	lr, r7
 8000ea4:	2620      	movs	r6, #32
 8000ea6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eaa:	eba2 0208 	sub.w	r2, r2, r8
 8000eae:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000eb2:	e766      	b.n	8000d82 <__udivmoddi4+0xfa>
 8000eb4:	4601      	mov	r1, r0
 8000eb6:	e718      	b.n	8000cea <__udivmoddi4+0x62>
 8000eb8:	4610      	mov	r0, r2
 8000eba:	e72c      	b.n	8000d16 <__udivmoddi4+0x8e>
 8000ebc:	f1c6 0220 	rsb	r2, r6, #32
 8000ec0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ec4:	40b7      	lsls	r7, r6
 8000ec6:	40b1      	lsls	r1, r6
 8000ec8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ecc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ed0:	430a      	orrs	r2, r1
 8000ed2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ed6:	b2bc      	uxth	r4, r7
 8000ed8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000edc:	0c11      	lsrs	r1, r2, #16
 8000ede:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee2:	fb08 f904 	mul.w	r9, r8, r4
 8000ee6:	40b0      	lsls	r0, r6
 8000ee8:	4589      	cmp	r9, r1
 8000eea:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000eee:	b280      	uxth	r0, r0
 8000ef0:	d93e      	bls.n	8000f70 <__udivmoddi4+0x2e8>
 8000ef2:	1879      	adds	r1, r7, r1
 8000ef4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ef8:	d201      	bcs.n	8000efe <__udivmoddi4+0x276>
 8000efa:	4589      	cmp	r9, r1
 8000efc:	d81f      	bhi.n	8000f3e <__udivmoddi4+0x2b6>
 8000efe:	eba1 0109 	sub.w	r1, r1, r9
 8000f02:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f06:	fb09 f804 	mul.w	r8, r9, r4
 8000f0a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f0e:	b292      	uxth	r2, r2
 8000f10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f14:	4542      	cmp	r2, r8
 8000f16:	d229      	bcs.n	8000f6c <__udivmoddi4+0x2e4>
 8000f18:	18ba      	adds	r2, r7, r2
 8000f1a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f1e:	d2c4      	bcs.n	8000eaa <__udivmoddi4+0x222>
 8000f20:	4542      	cmp	r2, r8
 8000f22:	d2c2      	bcs.n	8000eaa <__udivmoddi4+0x222>
 8000f24:	f1a9 0102 	sub.w	r1, r9, #2
 8000f28:	443a      	add	r2, r7
 8000f2a:	e7be      	b.n	8000eaa <__udivmoddi4+0x222>
 8000f2c:	45f0      	cmp	r8, lr
 8000f2e:	d29d      	bcs.n	8000e6c <__udivmoddi4+0x1e4>
 8000f30:	ebbe 0302 	subs.w	r3, lr, r2
 8000f34:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f38:	3801      	subs	r0, #1
 8000f3a:	46e1      	mov	r9, ip
 8000f3c:	e796      	b.n	8000e6c <__udivmoddi4+0x1e4>
 8000f3e:	eba7 0909 	sub.w	r9, r7, r9
 8000f42:	4449      	add	r1, r9
 8000f44:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f48:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f4c:	fb09 f804 	mul.w	r8, r9, r4
 8000f50:	e7db      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f52:	4673      	mov	r3, lr
 8000f54:	e77f      	b.n	8000e56 <__udivmoddi4+0x1ce>
 8000f56:	4650      	mov	r0, sl
 8000f58:	e766      	b.n	8000e28 <__udivmoddi4+0x1a0>
 8000f5a:	4608      	mov	r0, r1
 8000f5c:	e6fd      	b.n	8000d5a <__udivmoddi4+0xd2>
 8000f5e:	443b      	add	r3, r7
 8000f60:	3a02      	subs	r2, #2
 8000f62:	e733      	b.n	8000dcc <__udivmoddi4+0x144>
 8000f64:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f68:	443b      	add	r3, r7
 8000f6a:	e71c      	b.n	8000da6 <__udivmoddi4+0x11e>
 8000f6c:	4649      	mov	r1, r9
 8000f6e:	e79c      	b.n	8000eaa <__udivmoddi4+0x222>
 8000f70:	eba1 0109 	sub.w	r1, r1, r9
 8000f74:	46c4      	mov	ip, r8
 8000f76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f7a:	fb09 f804 	mul.w	r8, r9, r4
 8000f7e:	e7c4      	b.n	8000f0a <__udivmoddi4+0x282>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f8a:	463b      	mov	r3, r7
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f96:	4b22      	ldr	r3, [pc, #136]	@ (8001020 <MX_ADC1_Init+0x9c>)
 8000f98:	4a22      	ldr	r2, [pc, #136]	@ (8001024 <MX_ADC1_Init+0xa0>)
 8000f9a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f9c:	4b20      	ldr	r3, [pc, #128]	@ (8001020 <MX_ADC1_Init+0x9c>)
 8000f9e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000fa2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fa4:	4b1e      	ldr	r3, [pc, #120]	@ (8001020 <MX_ADC1_Init+0x9c>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000faa:	4b1d      	ldr	r3, [pc, #116]	@ (8001020 <MX_ADC1_Init+0x9c>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fb0:	4b1b      	ldr	r3, [pc, #108]	@ (8001020 <MX_ADC1_Init+0x9c>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fb6:	4b1a      	ldr	r3, [pc, #104]	@ (8001020 <MX_ADC1_Init+0x9c>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000fbe:	4b18      	ldr	r3, [pc, #96]	@ (8001020 <MX_ADC1_Init+0x9c>)
 8000fc0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000fc4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000fc6:	4b16      	ldr	r3, [pc, #88]	@ (8001020 <MX_ADC1_Init+0x9c>)
 8000fc8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000fcc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fce:	4b14      	ldr	r3, [pc, #80]	@ (8001020 <MX_ADC1_Init+0x9c>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000fd4:	4b12      	ldr	r3, [pc, #72]	@ (8001020 <MX_ADC1_Init+0x9c>)
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000fda:	4b11      	ldr	r3, [pc, #68]	@ (8001020 <MX_ADC1_Init+0x9c>)
 8000fdc:	2201      	movs	r2, #1
 8000fde:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fe2:	4b0f      	ldr	r3, [pc, #60]	@ (8001020 <MX_ADC1_Init+0x9c>)
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fe8:	480d      	ldr	r0, [pc, #52]	@ (8001020 <MX_ADC1_Init+0x9c>)
 8000fea:	f001 ff23 	bl	8002e34 <HAL_ADC_Init>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000ff4:	f001 f8e4 	bl	80021c0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001000:	2300      	movs	r3, #0
 8001002:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001004:	463b      	mov	r3, r7
 8001006:	4619      	mov	r1, r3
 8001008:	4805      	ldr	r0, [pc, #20]	@ (8001020 <MX_ADC1_Init+0x9c>)
 800100a:	f002 f9d3 	bl	80033b4 <HAL_ADC_ConfigChannel>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001014:	f001 f8d4 	bl	80021c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001018:	bf00      	nop
 800101a:	3710      	adds	r7, #16
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	200001f0 	.word	0x200001f0
 8001024:	40012000 	.word	0x40012000

08001028 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b08a      	sub	sp, #40	@ 0x28
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001030:	f107 0314 	add.w	r3, r7, #20
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a32      	ldr	r2, [pc, #200]	@ (8001110 <HAL_ADC_MspInit+0xe8>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d15e      	bne.n	8001108 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	613b      	str	r3, [r7, #16]
 800104e:	4b31      	ldr	r3, [pc, #196]	@ (8001114 <HAL_ADC_MspInit+0xec>)
 8001050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001052:	4a30      	ldr	r2, [pc, #192]	@ (8001114 <HAL_ADC_MspInit+0xec>)
 8001054:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001058:	6453      	str	r3, [r2, #68]	@ 0x44
 800105a:	4b2e      	ldr	r3, [pc, #184]	@ (8001114 <HAL_ADC_MspInit+0xec>)
 800105c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800105e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001062:	613b      	str	r3, [r7, #16]
 8001064:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	60fb      	str	r3, [r7, #12]
 800106a:	4b2a      	ldr	r3, [pc, #168]	@ (8001114 <HAL_ADC_MspInit+0xec>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106e:	4a29      	ldr	r2, [pc, #164]	@ (8001114 <HAL_ADC_MspInit+0xec>)
 8001070:	f043 0301 	orr.w	r3, r3, #1
 8001074:	6313      	str	r3, [r2, #48]	@ 0x30
 8001076:	4b27      	ldr	r3, [pc, #156]	@ (8001114 <HAL_ADC_MspInit+0xec>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001082:	2302      	movs	r3, #2
 8001084:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001086:	2303      	movs	r3, #3
 8001088:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	2300      	movs	r3, #0
 800108c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108e:	f107 0314 	add.w	r3, r7, #20
 8001092:	4619      	mov	r1, r3
 8001094:	4820      	ldr	r0, [pc, #128]	@ (8001118 <HAL_ADC_MspInit+0xf0>)
 8001096:	f003 f939 	bl	800430c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800109a:	4b20      	ldr	r3, [pc, #128]	@ (800111c <HAL_ADC_MspInit+0xf4>)
 800109c:	4a20      	ldr	r2, [pc, #128]	@ (8001120 <HAL_ADC_MspInit+0xf8>)
 800109e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80010a0:	4b1e      	ldr	r3, [pc, #120]	@ (800111c <HAL_ADC_MspInit+0xf4>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010a6:	4b1d      	ldr	r3, [pc, #116]	@ (800111c <HAL_ADC_MspInit+0xf4>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80010ac:	4b1b      	ldr	r3, [pc, #108]	@ (800111c <HAL_ADC_MspInit+0xf4>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80010b2:	4b1a      	ldr	r3, [pc, #104]	@ (800111c <HAL_ADC_MspInit+0xf4>)
 80010b4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010b8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010ba:	4b18      	ldr	r3, [pc, #96]	@ (800111c <HAL_ADC_MspInit+0xf4>)
 80010bc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80010c0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010c2:	4b16      	ldr	r3, [pc, #88]	@ (800111c <HAL_ADC_MspInit+0xf4>)
 80010c4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010c8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80010ca:	4b14      	ldr	r3, [pc, #80]	@ (800111c <HAL_ADC_MspInit+0xf4>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80010d0:	4b12      	ldr	r3, [pc, #72]	@ (800111c <HAL_ADC_MspInit+0xf4>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010d6:	4b11      	ldr	r3, [pc, #68]	@ (800111c <HAL_ADC_MspInit+0xf4>)
 80010d8:	2200      	movs	r2, #0
 80010da:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80010dc:	480f      	ldr	r0, [pc, #60]	@ (800111c <HAL_ADC_MspInit+0xf4>)
 80010de:	f002 fd35 	bl	8003b4c <HAL_DMA_Init>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 80010e8:	f001 f86a 	bl	80021c0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	4a0b      	ldr	r2, [pc, #44]	@ (800111c <HAL_ADC_MspInit+0xf4>)
 80010f0:	639a      	str	r2, [r3, #56]	@ 0x38
 80010f2:	4a0a      	ldr	r2, [pc, #40]	@ (800111c <HAL_ADC_MspInit+0xf4>)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80010f8:	2200      	movs	r2, #0
 80010fa:	2100      	movs	r1, #0
 80010fc:	2012      	movs	r0, #18
 80010fe:	f002 fcee 	bl	8003ade <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001102:	2012      	movs	r0, #18
 8001104:	f002 fd07 	bl	8003b16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001108:	bf00      	nop
 800110a:	3728      	adds	r7, #40	@ 0x28
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	40012000 	.word	0x40012000
 8001114:	40023800 	.word	0x40023800
 8001118:	40020000 	.word	0x40020000
 800111c:	20000238 	.word	0x20000238
 8001120:	40026410 	.word	0x40026410

08001124 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	607b      	str	r3, [r7, #4]
 800112e:	4b0c      	ldr	r3, [pc, #48]	@ (8001160 <MX_DMA_Init+0x3c>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001132:	4a0b      	ldr	r2, [pc, #44]	@ (8001160 <MX_DMA_Init+0x3c>)
 8001134:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001138:	6313      	str	r3, [r2, #48]	@ 0x30
 800113a:	4b09      	ldr	r3, [pc, #36]	@ (8001160 <MX_DMA_Init+0x3c>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001142:	607b      	str	r3, [r7, #4]
 8001144:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001146:	2200      	movs	r2, #0
 8001148:	2100      	movs	r1, #0
 800114a:	2038      	movs	r0, #56	@ 0x38
 800114c:	f002 fcc7 	bl	8003ade <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001150:	2038      	movs	r0, #56	@ 0x38
 8001152:	f002 fce0 	bl	8003b16 <HAL_NVIC_EnableIRQ>

}
 8001156:	bf00      	nop
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40023800 	.word	0x40023800

08001164 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b088      	sub	sp, #32
 8001168:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116a:	f107 030c 	add.w	r3, r7, #12
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	609a      	str	r2, [r3, #8]
 8001176:	60da      	str	r2, [r3, #12]
 8001178:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	60bb      	str	r3, [r7, #8]
 800117e:	4b1f      	ldr	r3, [pc, #124]	@ (80011fc <MX_GPIO_Init+0x98>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001182:	4a1e      	ldr	r2, [pc, #120]	@ (80011fc <MX_GPIO_Init+0x98>)
 8001184:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001188:	6313      	str	r3, [r2, #48]	@ 0x30
 800118a:	4b1c      	ldr	r3, [pc, #112]	@ (80011fc <MX_GPIO_Init+0x98>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001192:	60bb      	str	r3, [r7, #8]
 8001194:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	607b      	str	r3, [r7, #4]
 800119a:	4b18      	ldr	r3, [pc, #96]	@ (80011fc <MX_GPIO_Init+0x98>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119e:	4a17      	ldr	r2, [pc, #92]	@ (80011fc <MX_GPIO_Init+0x98>)
 80011a0:	f043 0301 	orr.w	r3, r3, #1
 80011a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011a6:	4b15      	ldr	r3, [pc, #84]	@ (80011fc <MX_GPIO_Init+0x98>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	607b      	str	r3, [r7, #4]
 80011b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	603b      	str	r3, [r7, #0]
 80011b6:	4b11      	ldr	r3, [pc, #68]	@ (80011fc <MX_GPIO_Init+0x98>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ba:	4a10      	ldr	r2, [pc, #64]	@ (80011fc <MX_GPIO_Init+0x98>)
 80011bc:	f043 0302 	orr.w	r3, r3, #2
 80011c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011c2:	4b0e      	ldr	r3, [pc, #56]	@ (80011fc <MX_GPIO_Init+0x98>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c6:	f003 0302 	and.w	r3, r3, #2
 80011ca:	603b      	str	r3, [r7, #0]
 80011cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STEP_OUT_Pin|STEP2_PIN_Pin, GPIO_PIN_RESET);
 80011ce:	2200      	movs	r2, #0
 80011d0:	2181      	movs	r1, #129	@ 0x81
 80011d2:	480b      	ldr	r0, [pc, #44]	@ (8001200 <MX_GPIO_Init+0x9c>)
 80011d4:	f003 fa1e 	bl	8004614 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : STEP_OUT_Pin STEP2_PIN_Pin */
  GPIO_InitStruct.Pin = STEP_OUT_Pin|STEP2_PIN_Pin;
 80011d8:	2381      	movs	r3, #129	@ 0x81
 80011da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011dc:	2301      	movs	r3, #1
 80011de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e4:	2300      	movs	r3, #0
 80011e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e8:	f107 030c 	add.w	r3, r7, #12
 80011ec:	4619      	mov	r1, r3
 80011ee:	4804      	ldr	r0, [pc, #16]	@ (8001200 <MX_GPIO_Init+0x9c>)
 80011f0:	f003 f88c 	bl	800430c <HAL_GPIO_Init>

}
 80011f4:	bf00      	nop
 80011f6:	3720      	adds	r7, #32
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	40023800 	.word	0x40023800
 8001200:	40020000 	.word	0x40020000

08001204 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001208:	4b12      	ldr	r3, [pc, #72]	@ (8001254 <MX_I2C1_Init+0x50>)
 800120a:	4a13      	ldr	r2, [pc, #76]	@ (8001258 <MX_I2C1_Init+0x54>)
 800120c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800120e:	4b11      	ldr	r3, [pc, #68]	@ (8001254 <MX_I2C1_Init+0x50>)
 8001210:	4a12      	ldr	r2, [pc, #72]	@ (800125c <MX_I2C1_Init+0x58>)
 8001212:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001214:	4b0f      	ldr	r3, [pc, #60]	@ (8001254 <MX_I2C1_Init+0x50>)
 8001216:	2200      	movs	r2, #0
 8001218:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800121a:	4b0e      	ldr	r3, [pc, #56]	@ (8001254 <MX_I2C1_Init+0x50>)
 800121c:	2200      	movs	r2, #0
 800121e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001220:	4b0c      	ldr	r3, [pc, #48]	@ (8001254 <MX_I2C1_Init+0x50>)
 8001222:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001226:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001228:	4b0a      	ldr	r3, [pc, #40]	@ (8001254 <MX_I2C1_Init+0x50>)
 800122a:	2200      	movs	r2, #0
 800122c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800122e:	4b09      	ldr	r3, [pc, #36]	@ (8001254 <MX_I2C1_Init+0x50>)
 8001230:	2200      	movs	r2, #0
 8001232:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001234:	4b07      	ldr	r3, [pc, #28]	@ (8001254 <MX_I2C1_Init+0x50>)
 8001236:	2200      	movs	r2, #0
 8001238:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800123a:	4b06      	ldr	r3, [pc, #24]	@ (8001254 <MX_I2C1_Init+0x50>)
 800123c:	2200      	movs	r2, #0
 800123e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001240:	4804      	ldr	r0, [pc, #16]	@ (8001254 <MX_I2C1_Init+0x50>)
 8001242:	f003 fa01 	bl	8004648 <HAL_I2C_Init>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800124c:	f000 ffb8 	bl	80021c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001250:	bf00      	nop
 8001252:	bd80      	pop	{r7, pc}
 8001254:	20000298 	.word	0x20000298
 8001258:	40005400 	.word	0x40005400
 800125c:	000186a0 	.word	0x000186a0

08001260 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b08a      	sub	sp, #40	@ 0x28
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001268:	f107 0314 	add.w	r3, r7, #20
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	60da      	str	r2, [r3, #12]
 8001276:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a19      	ldr	r2, [pc, #100]	@ (80012e4 <HAL_I2C_MspInit+0x84>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d12b      	bne.n	80012da <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	613b      	str	r3, [r7, #16]
 8001286:	4b18      	ldr	r3, [pc, #96]	@ (80012e8 <HAL_I2C_MspInit+0x88>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128a:	4a17      	ldr	r2, [pc, #92]	@ (80012e8 <HAL_I2C_MspInit+0x88>)
 800128c:	f043 0302 	orr.w	r3, r3, #2
 8001290:	6313      	str	r3, [r2, #48]	@ 0x30
 8001292:	4b15      	ldr	r3, [pc, #84]	@ (80012e8 <HAL_I2C_MspInit+0x88>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001296:	f003 0302 	and.w	r3, r3, #2
 800129a:	613b      	str	r3, [r7, #16]
 800129c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800129e:	23c0      	movs	r3, #192	@ 0xc0
 80012a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012a2:	2312      	movs	r3, #18
 80012a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012aa:	2303      	movs	r3, #3
 80012ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012ae:	2304      	movs	r3, #4
 80012b0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b2:	f107 0314 	add.w	r3, r7, #20
 80012b6:	4619      	mov	r1, r3
 80012b8:	480c      	ldr	r0, [pc, #48]	@ (80012ec <HAL_I2C_MspInit+0x8c>)
 80012ba:	f003 f827 	bl	800430c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	60fb      	str	r3, [r7, #12]
 80012c2:	4b09      	ldr	r3, [pc, #36]	@ (80012e8 <HAL_I2C_MspInit+0x88>)
 80012c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c6:	4a08      	ldr	r2, [pc, #32]	@ (80012e8 <HAL_I2C_MspInit+0x88>)
 80012c8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80012ce:	4b06      	ldr	r3, [pc, #24]	@ (80012e8 <HAL_I2C_MspInit+0x88>)
 80012d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80012da:	bf00      	nop
 80012dc:	3728      	adds	r7, #40	@ 0x28
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40005400 	.word	0x40005400
 80012e8:	40023800 	.word	0x40023800
 80012ec:	40020400 	.word	0x40020400

080012f0 <HAL_ADC_ConvCpltCallback>:

char message1[128];//输出显示
char message2[128];
char msg[40];
// DMA完成回调函数
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
    measurement_done = 1;
 80012f8:	4b08      	ldr	r3, [pc, #32]	@ (800131c <HAL_ADC_ConvCpltCallback+0x2c>)
 80012fa:	2201      	movs	r2, #1
 80012fc:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOA, STEP_PIN, GPIO_PIN_RESET);
 80012fe:	2200      	movs	r2, #0
 8001300:	2101      	movs	r1, #1
 8001302:	4807      	ldr	r0, [pc, #28]	@ (8001320 <HAL_ADC_ConvCpltCallback+0x30>)
 8001304:	f003 f986 	bl	8004614 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, STEP2_PIN, GPIO_PIN_RESET);
 8001308:	2200      	movs	r2, #0
 800130a:	2180      	movs	r1, #128	@ 0x80
 800130c:	4804      	ldr	r0, [pc, #16]	@ (8001320 <HAL_ADC_ConvCpltCallback+0x30>)
 800130e:	f003 f981 	bl	8004614 <HAL_GPIO_WritePin>
}
 8001312:	bf00      	nop
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20000aec 	.word	0x20000aec
 8001320:	40020000 	.word	0x40020000

08001324 <DMA_Measure>:

// 测量函数
void DMA_Measure(void) {
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
    // 1. 电容放电
    HAL_GPIO_WritePin(GPIOA, STEP_PIN, GPIO_PIN_RESET);
 800132a:	2200      	movs	r2, #0
 800132c:	2101      	movs	r1, #1
 800132e:	4823      	ldr	r0, [pc, #140]	@ (80013bc <DMA_Measure+0x98>)
 8001330:	f003 f970 	bl	8004614 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, STEP2_PIN, GPIO_PIN_RESET);
 8001334:	2200      	movs	r2, #0
 8001336:	2180      	movs	r1, #128	@ 0x80
 8001338:	4820      	ldr	r0, [pc, #128]	@ (80013bc <DMA_Measure+0x98>)
 800133a:	f003 f96b 	bl	8004614 <HAL_GPIO_WritePin>
    HAL_Delay(50);  // 10ms放电
 800133e:	2032      	movs	r0, #50	@ 0x32
 8001340:	f001 fd54 	bl	8002dec <HAL_Delay>

    // 2. 启动DMA采样
    uint32_t start_tick = HAL_GetTick();
 8001344:	f001 fd46 	bl	8002dd4 <HAL_GetTick>
 8001348:	60f8      	str	r0, [r7, #12]
    HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, BUFFER_SIZE);
 800134a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800134e:	491c      	ldr	r1, [pc, #112]	@ (80013c0 <DMA_Measure+0x9c>)
 8001350:	481c      	ldr	r0, [pc, #112]	@ (80013c4 <DMA_Measure+0xa0>)
 8001352:	f001 fec3 	bl	80030dc <HAL_ADC_Start_DMA>
    measurement_done = 0;
 8001356:	4b1c      	ldr	r3, [pc, #112]	@ (80013c8 <DMA_Measure+0xa4>)
 8001358:	2200      	movs	r2, #0
 800135a:	701a      	strb	r2, [r3, #0]

    // 3. 短暂延时确保DMA已启动
    HAL_Delay(1);
 800135c:	2001      	movs	r0, #1
 800135e:	f001 fd45 	bl	8002dec <HAL_Delay>

    // 4. 记录阶跃起始索引并触发阶跃
    HAL_GPIO_WritePin(GPIOA, STEP_PIN, GPIO_PIN_SET);
 8001362:	2201      	movs	r2, #1
 8001364:	2101      	movs	r1, #1
 8001366:	4815      	ldr	r0, [pc, #84]	@ (80013bc <DMA_Measure+0x98>)
 8001368:	f003 f954 	bl	8004614 <HAL_GPIO_WritePin>

    // 5. 等待测量完成
    while (!measurement_done);
 800136c:	bf00      	nop
 800136e:	4b16      	ldr	r3, [pc, #88]	@ (80013c8 <DMA_Measure+0xa4>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	b2db      	uxtb	r3, r3
 8001374:	2b00      	cmp	r3, #0
 8001376:	d0fa      	beq.n	800136e <DMA_Measure+0x4a>
    HAL_ADC_Stop_DMA(&hadc1);
 8001378:	4812      	ldr	r0, [pc, #72]	@ (80013c4 <DMA_Measure+0xa0>)
 800137a:	f001 ffa3 	bl	80032c4 <HAL_ADC_Stop_DMA>
    uint32_t end_tick = HAL_GetTick();
 800137e:	f001 fd29 	bl	8002dd4 <HAL_GetTick>
 8001382:	60b8      	str	r0, [r7, #8]
    float actual_rate = (BUFFER_SIZE ) / (end_tick - start_tick);
 8001384:	68ba      	ldr	r2, [r7, #8]
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800138e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001392:	ee07 3a90 	vmov	s15, r3
 8001396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800139a:	edc7 7a01 	vstr	s15, [r7, #4]
    sprintf(msg, "Rate: %.1fkHz", actual_rate);
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f7ff f8da 	bl	8000558 <__aeabi_f2d>
 80013a4:	4602      	mov	r2, r0
 80013a6:	460b      	mov	r3, r1
 80013a8:	4908      	ldr	r1, [pc, #32]	@ (80013cc <DMA_Measure+0xa8>)
 80013aa:	4809      	ldr	r0, [pc, #36]	@ (80013d0 <DMA_Measure+0xac>)
 80013ac:	f005 fd1e 	bl	8006dec <siprintf>
    // 6. 分析数据
    Analyze_ADC_Data();
 80013b0:	f000 f812 	bl	80013d8 <Analyze_ADC_Data>
}
 80013b4:	bf00      	nop
 80013b6:	3710      	adds	r7, #16
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40020000 	.word	0x40020000
 80013c0:	200002ec 	.word	0x200002ec
 80013c4:	200001f0 	.word	0x200001f0
 80013c8:	20000aec 	.word	0x20000aec
 80013cc:	08009490 	.word	0x08009490
 80013d0:	20000bf0 	.word	0x20000bf0
 80013d4:	00000000 	.word	0x00000000

080013d8 <Analyze_ADC_Data>:

//判断黑箱类型
void Analyze_ADC_Data(void){
 80013d8:	b590      	push	{r4, r7, lr}
 80013da:	b08d      	sub	sp, #52	@ 0x34
 80013dc:	af00      	add	r7, sp, #0
	float start_index;
	float MAX=0;
 80013de:	f04f 0300 	mov.w	r3, #0
 80013e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    float v_initial =adc_buffer[10]*VREF/4095.0f;
 80013e4:	4b74      	ldr	r3, [pc, #464]	@ (80015b8 <Analyze_ADC_Data+0x1e0>)
 80013e6:	8a9b      	ldrh	r3, [r3, #20]
 80013e8:	ee07 3a90 	vmov	s15, r3
 80013ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013f0:	ed9f 7a72 	vldr	s14, [pc, #456]	@ 80015bc <Analyze_ADC_Data+0x1e4>
 80013f4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013f8:	eddf 6a71 	vldr	s13, [pc, #452]	@ 80015c0 <Analyze_ADC_Data+0x1e8>
 80013fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001400:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    float v_steady=adc_buffer[BUFFER_SIZE-1]*VREF/4095.0f;
 8001404:	4b6c      	ldr	r3, [pc, #432]	@ (80015b8 <Analyze_ADC_Data+0x1e0>)
 8001406:	f8b3 37fe 	ldrh.w	r3, [r3, #2046]	@ 0x7fe
 800140a:	ee07 3a90 	vmov	s15, r3
 800140e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001412:	ed9f 7a6a 	vldr	s14, [pc, #424]	@ 80015bc <Analyze_ADC_Data+0x1e4>
 8001416:	ee27 7a87 	vmul.f32	s14, s15, s14
 800141a:	eddf 6a69 	vldr	s13, [pc, #420]	@ 80015c0 <Analyze_ADC_Data+0x1e8>
 800141e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001422:	edc7 7a07 	vstr	s15, [r7, #28]
    for (int i = 0; i < BUFFER_SIZE; i++) {
 8001426:	2300      	movs	r3, #0
 8001428:	627b      	str	r3, [r7, #36]	@ 0x24
 800142a:	e027      	b.n	800147c <Analyze_ADC_Data+0xa4>
                float voltage = (adc_buffer[i] * VREF) / 4095.0f;
 800142c:	4a62      	ldr	r2, [pc, #392]	@ (80015b8 <Analyze_ADC_Data+0x1e0>)
 800142e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001430:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001434:	ee07 3a90 	vmov	s15, r3
 8001438:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800143c:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 80015bc <Analyze_ADC_Data+0x1e4>
 8001440:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001444:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80015c0 <Analyze_ADC_Data+0x1e8>
 8001448:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800144c:	edc7 7a06 	vstr	s15, [r7, #24]
                if (voltage > MIN_VOLTAGE) {
 8001450:	edd7 7a06 	vldr	s15, [r7, #24]
 8001454:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 80015c4 <Analyze_ADC_Data+0x1ec>
 8001458:	eef4 7ac7 	vcmpe.f32	s15, s14
 800145c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001460:	dd09      	ble.n	8001476 <Analyze_ADC_Data+0x9e>
                    start_index = i;
 8001462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001464:	ee07 3a90 	vmov	s15, r3
 8001468:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800146c:	edc7 7a05 	vstr	s15, [r7, #20]
                    v_initial = voltage;
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	62bb      	str	r3, [r7, #40]	@ 0x28
                    break;
 8001474:	e006      	b.n	8001484 <Analyze_ADC_Data+0xac>
    for (int i = 0; i < BUFFER_SIZE; i++) {
 8001476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001478:	3301      	adds	r3, #1
 800147a:	627b      	str	r3, [r7, #36]	@ 0x24
 800147c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800147e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001482:	dbd3      	blt.n	800142c <Analyze_ADC_Data+0x54>
                }
    }
    //CESHI
    float index;
    for (int i = 0; i < BUFFER_SIZE; i++) {
 8001484:	2300      	movs	r3, #0
 8001486:	623b      	str	r3, [r7, #32]
 8001488:	e026      	b.n	80014d8 <Analyze_ADC_Data+0x100>
                float voltage = (adc_buffer[i] * VREF) / 4095.0f;
 800148a:	4a4b      	ldr	r2, [pc, #300]	@ (80015b8 <Analyze_ADC_Data+0x1e0>)
 800148c:	6a3b      	ldr	r3, [r7, #32]
 800148e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001492:	ee07 3a90 	vmov	s15, r3
 8001496:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800149a:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 80015bc <Analyze_ADC_Data+0x1e4>
 800149e:	ee27 7a87 	vmul.f32	s14, s15, s14
 80014a2:	eddf 6a47 	vldr	s13, [pc, #284]	@ 80015c0 <Analyze_ADC_Data+0x1e8>
 80014a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014aa:	edc7 7a02 	vstr	s15, [r7, #8]
                if (voltage > MAX) {
 80014ae:	ed97 7a02 	vldr	s14, [r7, #8]
 80014b2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80014b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014be:	dd08      	ble.n	80014d2 <Analyze_ADC_Data+0xfa>
                    index = i;
 80014c0:	6a3b      	ldr	r3, [r7, #32]
 80014c2:	ee07 3a90 	vmov	s15, r3
 80014c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014ca:	edc7 7a01 	vstr	s15, [r7, #4]
                    MAX = voltage;
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (int i = 0; i < BUFFER_SIZE; i++) {
 80014d2:	6a3b      	ldr	r3, [r7, #32]
 80014d4:	3301      	adds	r3, #1
 80014d6:	623b      	str	r3, [r7, #32]
 80014d8:	6a3b      	ldr	r3, [r7, #32]
 80014da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014de:	dbd4      	blt.n	800148a <Analyze_ADC_Data+0xb2>
    //if(v_steady=VREF){
    //	strcpy(message1,"Open Circuit");
    //	strcpy(message2,"");
    //	return ;
    //}
    float chazhi=fabsf(v_initial-v_steady);
 80014e0:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80014e4:	edd7 7a07 	vldr	s15, [r7, #28]
 80014e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014ec:	eef0 7ae7 	vabs.f32	s15, s15
 80014f0:	edc7 7a04 	vstr	s15, [r7, #16]
    //sprintf(message1,"%.2f",v_initial);
    //sprintf(message2,"%.2f",v_steady);
    if(chazhi<0.1){
 80014f4:	6938      	ldr	r0, [r7, #16]
 80014f6:	f7ff f82f 	bl	8000558 <__aeabi_f2d>
 80014fa:	a32d      	add	r3, pc, #180	@ (adr r3, 80015b0 <Analyze_ADC_Data+0x1d8>)
 80014fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001500:	f7ff faf4 	bl	8000aec <__aeabi_dcmplt>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d01f      	beq.n	800154a <Analyze_ADC_Data+0x172>
    	float r_black=v_steady/(VREF-v_steady)*R_KNOWN;
 800150a:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 80015bc <Analyze_ADC_Data+0x1e4>
 800150e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001512:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001516:	edd7 6a07 	vldr	s13, [r7, #28]
 800151a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800151e:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80015c8 <Analyze_ADC_Data+0x1f0>
 8001522:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001526:	edc7 7a03 	vstr	s15, [r7, #12]
    	sprintf(message1,"%.3f",r_black);
 800152a:	68f8      	ldr	r0, [r7, #12]
 800152c:	f7ff f814 	bl	8000558 <__aeabi_f2d>
 8001530:	4602      	mov	r2, r0
 8001532:	460b      	mov	r3, r1
 8001534:	4925      	ldr	r1, [pc, #148]	@ (80015cc <Analyze_ADC_Data+0x1f4>)
 8001536:	4826      	ldr	r0, [pc, #152]	@ (80015d0 <Analyze_ADC_Data+0x1f8>)
 8001538:	f005 fc58 	bl	8006dec <siprintf>
    	strcpy(message2, "Pure Resistor");
 800153c:	4a25      	ldr	r2, [pc, #148]	@ (80015d4 <Analyze_ADC_Data+0x1fc>)
 800153e:	4b26      	ldr	r3, [pc, #152]	@ (80015d8 <Analyze_ADC_Data+0x200>)
 8001540:	4614      	mov	r4, r2
 8001542:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001544:	c407      	stmia	r4!, {r0, r1, r2}
 8001546:	8023      	strh	r3, [r4, #0]
        }
    }
    else if(v_steady<v_initial){
         Analyze_ADC_DataRL();
    }
}
 8001548:	e02c      	b.n	80015a4 <Analyze_ADC_Data+0x1cc>
    else if(v_steady>v_initial){
 800154a:	ed97 7a07 	vldr	s14, [r7, #28]
 800154e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001552:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800155a:	dd17      	ble.n	800158c <Analyze_ADC_Data+0x1b4>
        if((VREF-v_steady)<0.1){
 800155c:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80015bc <Analyze_ADC_Data+0x1e4>
 8001560:	edd7 7a07 	vldr	s15, [r7, #28]
 8001564:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001568:	ee17 0a90 	vmov	r0, s15
 800156c:	f7fe fff4 	bl	8000558 <__aeabi_f2d>
 8001570:	a30f      	add	r3, pc, #60	@ (adr r3, 80015b0 <Analyze_ADC_Data+0x1d8>)
 8001572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001576:	f7ff fab9 	bl	8000aec <__aeabi_dcmplt>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d002      	beq.n	8001586 <Analyze_ADC_Data+0x1ae>
        	Analyze_ADC_DataRCS();
 8001580:	f000 f82e 	bl	80015e0 <Analyze_ADC_DataRCS>
}
 8001584:	e00e      	b.n	80015a4 <Analyze_ADC_Data+0x1cc>
        	Analyze_ADC_DataRCP();
 8001586:	f000 f9a7 	bl	80018d8 <Analyze_ADC_DataRCP>
}
 800158a:	e00b      	b.n	80015a4 <Analyze_ADC_Data+0x1cc>
    else if(v_steady<v_initial){
 800158c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001590:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001594:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800159c:	d400      	bmi.n	80015a0 <Analyze_ADC_Data+0x1c8>
}
 800159e:	e001      	b.n	80015a4 <Analyze_ADC_Data+0x1cc>
         Analyze_ADC_DataRL();
 80015a0:	f000 fa9e 	bl	8001ae0 <Analyze_ADC_DataRL>
}
 80015a4:	bf00      	nop
 80015a6:	3734      	adds	r7, #52	@ 0x34
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd90      	pop	{r4, r7, pc}
 80015ac:	f3af 8000 	nop.w
 80015b0:	9999999a 	.word	0x9999999a
 80015b4:	3fb99999 	.word	0x3fb99999
 80015b8:	200002ec 	.word	0x200002ec
 80015bc:	40533333 	.word	0x40533333
 80015c0:	457ff000 	.word	0x457ff000
 80015c4:	3d4ccccd 	.word	0x3d4ccccd
 80015c8:	447a0000 	.word	0x447a0000
 80015cc:	080094a0 	.word	0x080094a0
 80015d0:	20000af0 	.word	0x20000af0
 80015d4:	20000b70 	.word	0x20000b70
 80015d8:	080094a8 	.word	0x080094a8
 80015dc:	00000000 	.word	0x00000000

080015e0 <Analyze_ADC_DataRCS>:
// 分析ADC数据
void Analyze_ADC_DataRCS(void) {
 80015e0:	b5b0      	push	{r4, r5, r7, lr}
 80015e2:	b092      	sub	sp, #72	@ 0x48
 80015e4:	af00      	add	r7, sp, #0
    // 1. 寻找阶跃起始点
    uint16_t start_index = 0;
 80015e6:	2300      	movs	r3, #0
 80015e8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    float v_start = 0;
 80015ec:	f04f 0300 	mov.w	r3, #0
 80015f0:	643b      	str	r3, [r7, #64]	@ 0x40

    // 找到第一个有效上升点 (跳过前10个点)
    for (int i = 10; i < BUFFER_SIZE; i++) {
 80015f2:	230a      	movs	r3, #10
 80015f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80015f6:	e023      	b.n	8001640 <Analyze_ADC_DataRCS+0x60>
        float voltage = (adc_buffer[i] * VREF) / 4095.0f;
 80015f8:	4aa5      	ldr	r2, [pc, #660]	@ (8001890 <Analyze_ADC_DataRCS+0x2b0>)
 80015fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80015fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001600:	ee07 3a90 	vmov	s15, r3
 8001604:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001608:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 8001894 <Analyze_ADC_DataRCS+0x2b4>
 800160c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001610:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 8001898 <Analyze_ADC_DataRCS+0x2b8>
 8001614:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001618:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        if (voltage > MIN_VOLTAGE) {
 800161c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001620:	ed9f 7a9e 	vldr	s14, [pc, #632]	@ 800189c <Analyze_ADC_DataRCS+0x2bc>
 8001624:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800162c:	dd05      	ble.n	800163a <Analyze_ADC_DataRCS+0x5a>
            start_index = i;
 800162e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001630:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
            v_start = voltage;
 8001634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001636:	643b      	str	r3, [r7, #64]	@ 0x40
            break;
 8001638:	e006      	b.n	8001648 <Analyze_ADC_DataRCS+0x68>
    for (int i = 10; i < BUFFER_SIZE; i++) {
 800163a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800163c:	3301      	adds	r3, #1
 800163e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001640:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001642:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001646:	dbd7      	blt.n	80015f8 <Analyze_ADC_DataRCS+0x18>
        }
    }
    float mid_index;
    float v_mid;
    for (int i = 10; i < BUFFER_SIZE; i++) {
 8001648:	230a      	movs	r3, #10
 800164a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800164c:	e034      	b.n	80016b8 <Analyze_ADC_DataRCS+0xd8>
        float voltage = (adc_buffer[i] * VREF) / 4095.0f;
 800164e:	4a90      	ldr	r2, [pc, #576]	@ (8001890 <Analyze_ADC_DataRCS+0x2b0>)
 8001650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001652:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001656:	ee07 3a90 	vmov	s15, r3
 800165a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800165e:	ed9f 7a8d 	vldr	s14, [pc, #564]	@ 8001894 <Analyze_ADC_DataRCS+0x2b4>
 8001662:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001666:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8001898 <Analyze_ADC_DataRCS+0x2b8>
 800166a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800166e:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
        if (voltage > v_start*1.5) {
 8001672:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001674:	f7fe ff70 	bl	8000558 <__aeabi_f2d>
 8001678:	4604      	mov	r4, r0
 800167a:	460d      	mov	r5, r1
 800167c:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800167e:	f7fe ff6b 	bl	8000558 <__aeabi_f2d>
 8001682:	f04f 0200 	mov.w	r2, #0
 8001686:	4b86      	ldr	r3, [pc, #536]	@ (80018a0 <Analyze_ADC_DataRCS+0x2c0>)
 8001688:	f7fe ffbe 	bl	8000608 <__aeabi_dmul>
 800168c:	4602      	mov	r2, r0
 800168e:	460b      	mov	r3, r1
 8001690:	4620      	mov	r0, r4
 8001692:	4629      	mov	r1, r5
 8001694:	f7ff fa48 	bl	8000b28 <__aeabi_dcmpgt>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d009      	beq.n	80016b2 <Analyze_ADC_DataRCS+0xd2>
            mid_index = i;
 800169e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80016a0:	ee07 3a90 	vmov	s15, r3
 80016a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016a8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            v_mid = voltage;
 80016ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016ae:	623b      	str	r3, [r7, #32]
            break;
 80016b0:	e006      	b.n	80016c0 <Analyze_ADC_DataRCS+0xe0>
    for (int i = 10; i < BUFFER_SIZE; i++) {
 80016b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80016b4:	3301      	adds	r3, #1
 80016b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80016b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80016ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80016be:	dbc6      	blt.n	800164e <Analyze_ADC_DataRCS+0x6e>
        }
    }

    if (start_index == 0) {
 80016c0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d114      	bne.n	80016f2 <Analyze_ADC_DataRCS+0x112>
        strcpy(message1, "No Signal Detected");
 80016c8:	4a76      	ldr	r2, [pc, #472]	@ (80018a4 <Analyze_ADC_DataRCS+0x2c4>)
 80016ca:	4b77      	ldr	r3, [pc, #476]	@ (80018a8 <Analyze_ADC_DataRCS+0x2c8>)
 80016cc:	4614      	mov	r4, r2
 80016ce:	461d      	mov	r5, r3
 80016d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016d4:	682b      	ldr	r3, [r5, #0]
 80016d6:	461a      	mov	r2, r3
 80016d8:	8022      	strh	r2, [r4, #0]
 80016da:	3402      	adds	r4, #2
 80016dc:	0c1b      	lsrs	r3, r3, #16
 80016de:	7023      	strb	r3, [r4, #0]
        strcpy(message2, "Check Connection");
 80016e0:	4a72      	ldr	r2, [pc, #456]	@ (80018ac <Analyze_ADC_DataRCS+0x2cc>)
 80016e2:	4b73      	ldr	r3, [pc, #460]	@ (80018b0 <Analyze_ADC_DataRCS+0x2d0>)
 80016e4:	4614      	mov	r4, r2
 80016e6:	461d      	mov	r5, r3
 80016e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016ec:	682b      	ldr	r3, [r5, #0]
 80016ee:	7023      	strb	r3, [r4, #0]
        return;
 80016f0:	e0c6      	b.n	8001880 <Analyze_ADC_DataRCS+0x2a0>
    }

    // 2. 计算目标电压点
    float v_target1 = VREF * 0.632;  // 63.2% VREF (1个时间常数)
 80016f2:	4b70      	ldr	r3, [pc, #448]	@ (80018b4 <Analyze_ADC_DataRCS+0x2d4>)
 80016f4:	61fb      	str	r3, [r7, #28]
    float v_target2 = VREF * 0.865;  // 86.5% VREF (2个时间常数)
 80016f6:	4b70      	ldr	r3, [pc, #448]	@ (80018b8 <Analyze_ADC_DataRCS+0x2d8>)
 80016f8:	61bb      	str	r3, [r7, #24]

    // 3. 寻找目标点
    uint16_t index1 = 0, index2 = 0;
 80016fa:	2300      	movs	r3, #0
 80016fc:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80016fe:	2300      	movs	r3, #0
 8001700:	86bb      	strh	r3, [r7, #52]	@ 0x34
    for (int i = start_index; i < BUFFER_SIZE; i++) {
 8001702:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001706:	633b      	str	r3, [r7, #48]	@ 0x30
 8001708:	e031      	b.n	800176e <Analyze_ADC_DataRCS+0x18e>
        float voltage = (adc_buffer[i] * VREF) / 4095.0f;
 800170a:	4a61      	ldr	r2, [pc, #388]	@ (8001890 <Analyze_ADC_DataRCS+0x2b0>)
 800170c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800170e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001712:	ee07 3a90 	vmov	s15, r3
 8001716:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800171a:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8001894 <Analyze_ADC_DataRCS+0x2b4>
 800171e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001722:	eddf 6a5d 	vldr	s13, [pc, #372]	@ 8001898 <Analyze_ADC_DataRCS+0x2b8>
 8001726:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800172a:	edc7 7a05 	vstr	s15, [r7, #20]

        if (index1 == 0 && voltage >= v_target1) {
 800172e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001730:	2b00      	cmp	r3, #0
 8001732:	d10a      	bne.n	800174a <Analyze_ADC_DataRCS+0x16a>
 8001734:	ed97 7a05 	vldr	s14, [r7, #20]
 8001738:	edd7 7a07 	vldr	s15, [r7, #28]
 800173c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001744:	db01      	blt.n	800174a <Analyze_ADC_DataRCS+0x16a>
            index1 = i;
 8001746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001748:	86fb      	strh	r3, [r7, #54]	@ 0x36
        }

        if (index2 == 0 && voltage >= v_target2) {
 800174a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800174c:	2b00      	cmp	r3, #0
 800174e:	d10b      	bne.n	8001768 <Analyze_ADC_DataRCS+0x188>
 8001750:	ed97 7a05 	vldr	s14, [r7, #20]
 8001754:	edd7 7a06 	vldr	s15, [r7, #24]
 8001758:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800175c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001760:	db02      	blt.n	8001768 <Analyze_ADC_DataRCS+0x188>
            index2 = i;
 8001762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001764:	86bb      	strh	r3, [r7, #52]	@ 0x34
            break;  // 找到第二个点后停止
 8001766:	e006      	b.n	8001776 <Analyze_ADC_DataRCS+0x196>
    for (int i = start_index; i < BUFFER_SIZE; i++) {
 8001768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800176a:	3301      	adds	r3, #1
 800176c:	633b      	str	r3, [r7, #48]	@ 0x30
 800176e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001770:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001774:	dbc9      	blt.n	800170a <Analyze_ADC_DataRCS+0x12a>
        }
    }

    if (index1 == 0 || index2 == 0) {
 8001776:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001778:	2b00      	cmp	r3, #0
 800177a:	d002      	beq.n	8001782 <Analyze_ADC_DataRCS+0x1a2>
 800177c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800177e:	2b00      	cmp	r3, #0
 8001780:	d10e      	bne.n	80017a0 <Analyze_ADC_DataRCS+0x1c0>
        strcpy(message1, "Incomplete Curve");
 8001782:	4a48      	ldr	r2, [pc, #288]	@ (80018a4 <Analyze_ADC_DataRCS+0x2c4>)
 8001784:	4b4d      	ldr	r3, [pc, #308]	@ (80018bc <Analyze_ADC_DataRCS+0x2dc>)
 8001786:	4614      	mov	r4, r2
 8001788:	461d      	mov	r5, r3
 800178a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800178c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800178e:	682b      	ldr	r3, [r5, #0]
 8001790:	7023      	strb	r3, [r4, #0]
        strcpy(message2, "Increase Time");
 8001792:	4a46      	ldr	r2, [pc, #280]	@ (80018ac <Analyze_ADC_DataRCS+0x2cc>)
 8001794:	4b4a      	ldr	r3, [pc, #296]	@ (80018c0 <Analyze_ADC_DataRCS+0x2e0>)
 8001796:	4614      	mov	r4, r2
 8001798:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800179a:	c407      	stmia	r4!, {r0, r1, r2}
 800179c:	8023      	strh	r3, [r4, #0]
        return;
 800179e:	e06f      	b.n	8001880 <Analyze_ADC_DataRCS+0x2a0>
    }

    // 4. 计算时间常数
    float delta_index = index1 - start_index;
 80017a0:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80017a2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	ee07 3a90 	vmov	s15, r3
 80017ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017b0:	edc7 7a04 	vstr	s15, [r7, #16]
    float delta_time = delta_index * (1.0f / SAMPLE_RATE);  // 采样间隔时间
 80017b4:	edd7 7a04 	vldr	s15, [r7, #16]
 80017b8:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 80018c4 <Analyze_ADC_DataRCS+0x2e4>
 80017bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017c0:	edc7 7a03 	vstr	s15, [r7, #12]

    // 计算时间常数τ
    float tau = delta_time / log((VREF - v_start) / (VREF - v_target1));
 80017c4:	68f8      	ldr	r0, [r7, #12]
 80017c6:	f7fe fec7 	bl	8000558 <__aeabi_f2d>
 80017ca:	4604      	mov	r4, r0
 80017cc:	460d      	mov	r5, r1
 80017ce:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8001894 <Analyze_ADC_DataRCS+0x2b4>
 80017d2:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80017d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017da:	eddf 6a2e 	vldr	s13, [pc, #184]	@ 8001894 <Analyze_ADC_DataRCS+0x2b4>
 80017de:	edd7 7a07 	vldr	s15, [r7, #28]
 80017e2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80017e6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80017ea:	ee16 0a90 	vmov	r0, s13
 80017ee:	f7fe feb3 	bl	8000558 <__aeabi_f2d>
 80017f2:	4602      	mov	r2, r0
 80017f4:	460b      	mov	r3, r1
 80017f6:	ec43 2b10 	vmov	d0, r2, r3
 80017fa:	f007 fc3d 	bl	8009078 <log>
 80017fe:	ec53 2b10 	vmov	r2, r3, d0
 8001802:	4620      	mov	r0, r4
 8001804:	4629      	mov	r1, r5
 8001806:	f7ff f829 	bl	800085c <__aeabi_ddiv>
 800180a:	4602      	mov	r2, r0
 800180c:	460b      	mov	r3, r1
 800180e:	4610      	mov	r0, r2
 8001810:	4619      	mov	r1, r3
 8001812:	f7ff f9d1 	bl	8000bb8 <__aeabi_d2f>
 8001816:	4603      	mov	r3, r0
 8001818:	60bb      	str	r3, [r7, #8]
    // 5. 计算黑箱电阻
    float r_black = (v_start * R_KNOWN) / (VREF - v_start);
 800181a:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800181e:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80018c8 <Analyze_ADC_DataRCS+0x2e8>
 8001822:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001826:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8001894 <Analyze_ADC_DataRCS+0x2b4>
 800182a:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800182e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001832:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001836:	edc7 7a01 	vstr	s15, [r7, #4]

    // 6. 计算黑箱电容
    float c_black = tau / (R_KNOWN + r_black);
 800183a:	edd7 7a01 	vldr	s15, [r7, #4]
 800183e:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80018c8 <Analyze_ADC_DataRCS+0x2e8>
 8001842:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001846:	edd7 6a02 	vldr	s13, [r7, #8]
 800184a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800184e:	edc7 7a00 	vstr	s15, [r7]



    // 7. 格式化结果
    sprintf(message1, "Rs=%.1fΩ", r_black);
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f7fe fe80 	bl	8000558 <__aeabi_f2d>
 8001858:	4602      	mov	r2, r0
 800185a:	460b      	mov	r3, r1
 800185c:	491b      	ldr	r1, [pc, #108]	@ (80018cc <Analyze_ADC_DataRCS+0x2ec>)
 800185e:	4811      	ldr	r0, [pc, #68]	@ (80018a4 <Analyze_ADC_DataRCS+0x2c4>)
 8001860:	f005 fac4 	bl	8006dec <siprintf>
    sprintf(message2, "Cs=%.4fuF", c_black * 1e6);
 8001864:	6838      	ldr	r0, [r7, #0]
 8001866:	f7fe fe77 	bl	8000558 <__aeabi_f2d>
 800186a:	a307      	add	r3, pc, #28	@ (adr r3, 8001888 <Analyze_ADC_DataRCS+0x2a8>)
 800186c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001870:	f7fe feca 	bl	8000608 <__aeabi_dmul>
 8001874:	4602      	mov	r2, r0
 8001876:	460b      	mov	r3, r1
 8001878:	4915      	ldr	r1, [pc, #84]	@ (80018d0 <Analyze_ADC_DataRCS+0x2f0>)
 800187a:	480c      	ldr	r0, [pc, #48]	@ (80018ac <Analyze_ADC_DataRCS+0x2cc>)
 800187c:	f005 fab6 	bl	8006dec <siprintf>
}
 8001880:	3748      	adds	r7, #72	@ 0x48
 8001882:	46bd      	mov	sp, r7
 8001884:	bdb0      	pop	{r4, r5, r7, pc}
 8001886:	bf00      	nop
 8001888:	00000000 	.word	0x00000000
 800188c:	412e8480 	.word	0x412e8480
 8001890:	200002ec 	.word	0x200002ec
 8001894:	40533333 	.word	0x40533333
 8001898:	457ff000 	.word	0x457ff000
 800189c:	3d4ccccd 	.word	0x3d4ccccd
 80018a0:	3ff80000 	.word	0x3ff80000
 80018a4:	20000af0 	.word	0x20000af0
 80018a8:	080094b8 	.word	0x080094b8
 80018ac:	20000b70 	.word	0x20000b70
 80018b0:	080094cc 	.word	0x080094cc
 80018b4:	40057a78 	.word	0x40057a78
 80018b8:	4036b021 	.word	0x4036b021
 80018bc:	080094e0 	.word	0x080094e0
 80018c0:	080094f4 	.word	0x080094f4
 80018c4:	3727c5ac 	.word	0x3727c5ac
 80018c8:	447a0000 	.word	0x447a0000
 80018cc:	08009504 	.word	0x08009504
 80018d0:	08009510 	.word	0x08009510
 80018d4:	00000000 	.word	0x00000000

080018d8 <Analyze_ADC_DataRCP>:

void Analyze_ADC_DataRCP(void){
 80018d8:	b5b0      	push	{r4, r5, r7, lr}
 80018da:	b08c      	sub	sp, #48	@ 0x30
 80018dc:	af00      	add	r7, sp, #0
	// 1. 寻找阶跃起始点
	    uint16_t start_index = 0;
 80018de:	2300      	movs	r3, #0
 80018e0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	    float v_start = 0;
 80018e2:	f04f 0300 	mov.w	r3, #0
 80018e6:	61fb      	str	r3, [r7, #28]

	    // 找到第一个有效上升点 (跳过前10个点)
	    for (int i = 10; i < BUFFER_SIZE; i++) {
 80018e8:	230a      	movs	r3, #10
 80018ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80018ec:	e022      	b.n	8001934 <Analyze_ADC_DataRCP+0x5c>
	        float voltage = (adc_buffer[i] * VREF) / 4095.0f;
 80018ee:	4a70      	ldr	r2, [pc, #448]	@ (8001ab0 <Analyze_ADC_DataRCP+0x1d8>)
 80018f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80018f6:	ee07 3a90 	vmov	s15, r3
 80018fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018fe:	ed9f 7a6d 	vldr	s14, [pc, #436]	@ 8001ab4 <Analyze_ADC_DataRCP+0x1dc>
 8001902:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001906:	eddf 6a6c 	vldr	s13, [pc, #432]	@ 8001ab8 <Analyze_ADC_DataRCP+0x1e0>
 800190a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800190e:	edc7 7a06 	vstr	s15, [r7, #24]
	        if (voltage > MIN_VOLTAGE) {
 8001912:	edd7 7a06 	vldr	s15, [r7, #24]
 8001916:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 8001abc <Analyze_ADC_DataRCP+0x1e4>
 800191a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800191e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001922:	dd04      	ble.n	800192e <Analyze_ADC_DataRCP+0x56>
	            start_index = i;
 8001924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001926:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	            v_start = voltage;
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	61fb      	str	r3, [r7, #28]
	            break;
 800192c:	e006      	b.n	800193c <Analyze_ADC_DataRCP+0x64>
	    for (int i = 10; i < BUFFER_SIZE; i++) {
 800192e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001930:	3301      	adds	r3, #1
 8001932:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001936:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800193a:	dbd8      	blt.n	80018ee <Analyze_ADC_DataRCP+0x16>
	        }
	    }

	    if (start_index == 0) {
 800193c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800193e:	2b00      	cmp	r3, #0
 8001940:	d114      	bne.n	800196c <Analyze_ADC_DataRCP+0x94>
	        strcpy(message1, "No Signal Detected");
 8001942:	4a5f      	ldr	r2, [pc, #380]	@ (8001ac0 <Analyze_ADC_DataRCP+0x1e8>)
 8001944:	4b5f      	ldr	r3, [pc, #380]	@ (8001ac4 <Analyze_ADC_DataRCP+0x1ec>)
 8001946:	4614      	mov	r4, r2
 8001948:	461d      	mov	r5, r3
 800194a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800194c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800194e:	682b      	ldr	r3, [r5, #0]
 8001950:	461a      	mov	r2, r3
 8001952:	8022      	strh	r2, [r4, #0]
 8001954:	3402      	adds	r4, #2
 8001956:	0c1b      	lsrs	r3, r3, #16
 8001958:	7023      	strb	r3, [r4, #0]
	        strcpy(message2, "Check Connection");
 800195a:	4a5b      	ldr	r2, [pc, #364]	@ (8001ac8 <Analyze_ADC_DataRCP+0x1f0>)
 800195c:	4b5b      	ldr	r3, [pc, #364]	@ (8001acc <Analyze_ADC_DataRCP+0x1f4>)
 800195e:	4614      	mov	r4, r2
 8001960:	461d      	mov	r5, r3
 8001962:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001964:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001966:	682b      	ldr	r3, [r5, #0]
 8001968:	7023      	strb	r3, [r4, #0]
	        return;
 800196a:	e096      	b.n	8001a9a <Analyze_ADC_DataRCP+0x1c2>
	    }
	    float v_end =adc_buffer[BUFFER_SIZE-1]*VREF/4095.0f;
 800196c:	4b50      	ldr	r3, [pc, #320]	@ (8001ab0 <Analyze_ADC_DataRCP+0x1d8>)
 800196e:	f8b3 37fe 	ldrh.w	r3, [r3, #2046]	@ 0x7fe
 8001972:	ee07 3a90 	vmov	s15, r3
 8001976:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800197a:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8001ab4 <Analyze_ADC_DataRCP+0x1dc>
 800197e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001982:	eddf 6a4d 	vldr	s13, [pc, #308]	@ 8001ab8 <Analyze_ADC_DataRCP+0x1e0>
 8001986:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800198a:	edc7 7a05 	vstr	s15, [r7, #20]
	    float r_black=fabsf(R_KNOWN*v_end/(VREF-v_end));
 800198e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001992:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8001ad0 <Analyze_ADC_DataRCP+0x1f8>
 8001996:	ee67 6a87 	vmul.f32	s13, s15, s14
 800199a:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8001ab4 <Analyze_ADC_DataRCP+0x1dc>
 800199e:	edd7 7a05 	vldr	s15, [r7, #20]
 80019a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019aa:	eef0 7ae7 	vabs.f32	s15, s15
 80019ae:	edc7 7a04 	vstr	s15, [r7, #16]
	    float v_target1 = v_end * 0.632;
 80019b2:	6978      	ldr	r0, [r7, #20]
 80019b4:	f7fe fdd0 	bl	8000558 <__aeabi_f2d>
 80019b8:	a339      	add	r3, pc, #228	@ (adr r3, 8001aa0 <Analyze_ADC_DataRCP+0x1c8>)
 80019ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019be:	f7fe fe23 	bl	8000608 <__aeabi_dmul>
 80019c2:	4602      	mov	r2, r0
 80019c4:	460b      	mov	r3, r1
 80019c6:	4610      	mov	r0, r2
 80019c8:	4619      	mov	r1, r3
 80019ca:	f7ff f8f5 	bl	8000bb8 <__aeabi_d2f>
 80019ce:	4603      	mov	r3, r0
 80019d0:	60fb      	str	r3, [r7, #12]
	    uint16_t index1 = 0;
 80019d2:	2300      	movs	r3, #0
 80019d4:	84fb      	strh	r3, [r7, #38]	@ 0x26
	    for (int i = start_index; i < BUFFER_SIZE; i++) {
 80019d6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80019d8:	623b      	str	r3, [r7, #32]
 80019da:	e022      	b.n	8001a22 <Analyze_ADC_DataRCP+0x14a>
	         float voltage = (adc_buffer[i] * VREF) / 4095.0f;
 80019dc:	4a34      	ldr	r2, [pc, #208]	@ (8001ab0 <Analyze_ADC_DataRCP+0x1d8>)
 80019de:	6a3b      	ldr	r3, [r7, #32]
 80019e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80019e4:	ee07 3a90 	vmov	s15, r3
 80019e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019ec:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8001ab4 <Analyze_ADC_DataRCP+0x1dc>
 80019f0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80019f4:	eddf 6a30 	vldr	s13, [pc, #192]	@ 8001ab8 <Analyze_ADC_DataRCP+0x1e0>
 80019f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019fc:	edc7 7a00 	vstr	s15, [r7]
	         if (index1 == 0 && voltage >= v_target1) {
 8001a00:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d10a      	bne.n	8001a1c <Analyze_ADC_DataRCP+0x144>
 8001a06:	ed97 7a00 	vldr	s14, [r7]
 8001a0a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a16:	db01      	blt.n	8001a1c <Analyze_ADC_DataRCP+0x144>
	                index1 = i;
 8001a18:	6a3b      	ldr	r3, [r7, #32]
 8001a1a:	84fb      	strh	r3, [r7, #38]	@ 0x26
	    for (int i = start_index; i < BUFFER_SIZE; i++) {
 8001a1c:	6a3b      	ldr	r3, [r7, #32]
 8001a1e:	3301      	adds	r3, #1
 8001a20:	623b      	str	r3, [r7, #32]
 8001a22:	6a3b      	ldr	r3, [r7, #32]
 8001a24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a28:	dbd8      	blt.n	80019dc <Analyze_ADC_DataRCP+0x104>
	         }
	    }
	    float time=(index1-start_index)*(1.0f/SAMPLE_RATE);
 8001a2a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001a2c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	ee07 3a90 	vmov	s15, r3
 8001a34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a38:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8001ad4 <Analyze_ADC_DataRCP+0x1fc>
 8001a3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a40:	edc7 7a02 	vstr	s15, [r7, #8]
	    float c_black=time*(R_KNOWN+r_black)/(r_black*R_KNOWN);
 8001a44:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a48:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8001ad0 <Analyze_ADC_DataRCP+0x1f8>
 8001a4c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001a50:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a54:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001a58:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a5c:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8001ad0 <Analyze_ADC_DataRCP+0x1f8>
 8001a60:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001a64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a68:	edc7 7a01 	vstr	s15, [r7, #4]
	    sprintf(message1, "Rp=%.1fΩ", r_black);
 8001a6c:	6938      	ldr	r0, [r7, #16]
 8001a6e:	f7fe fd73 	bl	8000558 <__aeabi_f2d>
 8001a72:	4602      	mov	r2, r0
 8001a74:	460b      	mov	r3, r1
 8001a76:	4918      	ldr	r1, [pc, #96]	@ (8001ad8 <Analyze_ADC_DataRCP+0x200>)
 8001a78:	4811      	ldr	r0, [pc, #68]	@ (8001ac0 <Analyze_ADC_DataRCP+0x1e8>)
 8001a7a:	f005 f9b7 	bl	8006dec <siprintf>
	    sprintf(message2, "Cp=%.4fuF", c_black * 1e6);
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f7fe fd6a 	bl	8000558 <__aeabi_f2d>
 8001a84:	a308      	add	r3, pc, #32	@ (adr r3, 8001aa8 <Analyze_ADC_DataRCP+0x1d0>)
 8001a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a8a:	f7fe fdbd 	bl	8000608 <__aeabi_dmul>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	460b      	mov	r3, r1
 8001a92:	4912      	ldr	r1, [pc, #72]	@ (8001adc <Analyze_ADC_DataRCP+0x204>)
 8001a94:	480c      	ldr	r0, [pc, #48]	@ (8001ac8 <Analyze_ADC_DataRCP+0x1f0>)
 8001a96:	f005 f9a9 	bl	8006dec <siprintf>
}
 8001a9a:	3730      	adds	r7, #48	@ 0x30
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bdb0      	pop	{r4, r5, r7, pc}
 8001aa0:	10624dd3 	.word	0x10624dd3
 8001aa4:	3fe43958 	.word	0x3fe43958
 8001aa8:	00000000 	.word	0x00000000
 8001aac:	412e8480 	.word	0x412e8480
 8001ab0:	200002ec 	.word	0x200002ec
 8001ab4:	40533333 	.word	0x40533333
 8001ab8:	457ff000 	.word	0x457ff000
 8001abc:	3d4ccccd 	.word	0x3d4ccccd
 8001ac0:	20000af0 	.word	0x20000af0
 8001ac4:	080094b8 	.word	0x080094b8
 8001ac8:	20000b70 	.word	0x20000b70
 8001acc:	080094cc 	.word	0x080094cc
 8001ad0:	447a0000 	.word	0x447a0000
 8001ad4:	3727c5ac 	.word	0x3727c5ac
 8001ad8:	0800951c 	.word	0x0800951c
 8001adc:	08009528 	.word	0x08009528

08001ae0 <Analyze_ADC_DataRL>:

void Analyze_ADC_DataRL(void){
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
	    HAL_GPIO_WritePin(GPIOA, STEP_PIN, GPIO_PIN_RESET);
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	2101      	movs	r1, #1
 8001aea:	4842      	ldr	r0, [pc, #264]	@ (8001bf4 <Analyze_ADC_DataRL+0x114>)
 8001aec:	f002 fd92 	bl	8004614 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOA, STEP2_PIN, GPIO_PIN_RESET);
 8001af0:	2200      	movs	r2, #0
 8001af2:	2180      	movs	r1, #128	@ 0x80
 8001af4:	483f      	ldr	r0, [pc, #252]	@ (8001bf4 <Analyze_ADC_DataRL+0x114>)
 8001af6:	f002 fd8d 	bl	8004614 <HAL_GPIO_WritePin>
	    HAL_Delay(50);  // 50ms放电
 8001afa:	2032      	movs	r0, #50	@ 0x32
 8001afc:	f001 f976 	bl	8002dec <HAL_Delay>
	    memset(adc_buffer, 0, sizeof(adc_buffer));
 8001b00:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001b04:	2100      	movs	r1, #0
 8001b06:	483c      	ldr	r0, [pc, #240]	@ (8001bf8 <Analyze_ADC_DataRL+0x118>)
 8001b08:	f005 f9e5 	bl	8006ed6 <memset>
	    HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, BUFFER_SIZE);
 8001b0c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b10:	4939      	ldr	r1, [pc, #228]	@ (8001bf8 <Analyze_ADC_DataRL+0x118>)
 8001b12:	483a      	ldr	r0, [pc, #232]	@ (8001bfc <Analyze_ADC_DataRL+0x11c>)
 8001b14:	f001 fae2 	bl	80030dc <HAL_ADC_Start_DMA>
	    measurement_done = 0;
 8001b18:	4b39      	ldr	r3, [pc, #228]	@ (8001c00 <Analyze_ADC_DataRL+0x120>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	701a      	strb	r2, [r3, #0]
	    HAL_Delay(1);
 8001b1e:	2001      	movs	r0, #1
 8001b20:	f001 f964 	bl	8002dec <HAL_Delay>
	    HAL_GPIO_WritePin(GPIOA, STEP2_PIN, GPIO_PIN_SET);
 8001b24:	2201      	movs	r2, #1
 8001b26:	2180      	movs	r1, #128	@ 0x80
 8001b28:	4832      	ldr	r0, [pc, #200]	@ (8001bf4 <Analyze_ADC_DataRL+0x114>)
 8001b2a:	f002 fd73 	bl	8004614 <HAL_GPIO_WritePin>
	    HAL_Delay(1);
 8001b2e:	2001      	movs	r0, #1
 8001b30:	f001 f95c 	bl	8002dec <HAL_Delay>
	    float v_initial = adc_buffer[0] * VREF / 4095.0f;
 8001b34:	4b30      	ldr	r3, [pc, #192]	@ (8001bf8 <Analyze_ADC_DataRL+0x118>)
 8001b36:	881b      	ldrh	r3, [r3, #0]
 8001b38:	ee07 3a90 	vmov	s15, r3
 8001b3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b40:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8001c04 <Analyze_ADC_DataRL+0x124>
 8001b44:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b48:	eddf 6a2f 	vldr	s13, [pc, #188]	@ 8001c08 <Analyze_ADC_DataRL+0x128>
 8001b4c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b50:	edc7 7a03 	vstr	s15, [r7, #12]
	    float v_steady = adc_buffer[BUFFER_SIZE-1] * VREF / 4095.0f;
 8001b54:	4b28      	ldr	r3, [pc, #160]	@ (8001bf8 <Analyze_ADC_DataRL+0x118>)
 8001b56:	f8b3 37fe 	ldrh.w	r3, [r3, #2046]	@ 0x7fe
 8001b5a:	ee07 3a90 	vmov	s15, r3
 8001b5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b62:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8001c04 <Analyze_ADC_DataRL+0x124>
 8001b66:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b6a:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8001c08 <Analyze_ADC_DataRL+0x128>
 8001b6e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b72:	edc7 7a01 	vstr	s15, [r7, #4]
	    for (int i = 0; i < BUFFER_SIZE; i++) {
 8001b76:	2300      	movs	r3, #0
 8001b78:	60bb      	str	r3, [r7, #8]
 8001b7a:	e020      	b.n	8001bbe <Analyze_ADC_DataRL+0xde>
	                float voltage = (adc_buffer[i] * VREF) / 4095.0f;
 8001b7c:	4a1e      	ldr	r2, [pc, #120]	@ (8001bf8 <Analyze_ADC_DataRL+0x118>)
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b84:	ee07 3a90 	vmov	s15, r3
 8001b88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b8c:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8001c04 <Analyze_ADC_DataRL+0x124>
 8001b90:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b94:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 8001c08 <Analyze_ADC_DataRL+0x128>
 8001b98:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b9c:	edc7 7a00 	vstr	s15, [r7]
	                if (voltage > MIN_VOLTAGE) {
 8001ba0:	edd7 7a00 	vldr	s15, [r7]
 8001ba4:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8001c0c <Analyze_ADC_DataRL+0x12c>
 8001ba8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bb0:	dd02      	ble.n	8001bb8 <Analyze_ADC_DataRL+0xd8>
	                    //start_index = i;
	                    v_initial = voltage;
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	60fb      	str	r3, [r7, #12]
	                    break;
 8001bb6:	e006      	b.n	8001bc6 <Analyze_ADC_DataRL+0xe6>
	    for (int i = 0; i < BUFFER_SIZE; i++) {
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	3301      	adds	r3, #1
 8001bbc:	60bb      	str	r3, [r7, #8]
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bc4:	dbda      	blt.n	8001b7c <Analyze_ADC_DataRL+0x9c>
	                }
	    }

	    if(v_initial+v_steady<VREF){
 8001bc6:	ed97 7a03 	vldr	s14, [r7, #12]
 8001bca:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bd2:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8001c04 <Analyze_ADC_DataRL+0x124>
 8001bd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bde:	d502      	bpl.n	8001be6 <Analyze_ADC_DataRL+0x106>
	    	Analyze_ADC_DataRLS();
 8001be0:	f000 f816 	bl	8001c10 <Analyze_ADC_DataRLS>
	    }
	    else{
	    	Analyze_ADC_DataRLP();
	    }
}
 8001be4:	e001      	b.n	8001bea <Analyze_ADC_DataRL+0x10a>
	    	Analyze_ADC_DataRLP();
 8001be6:	f000 f921 	bl	8001e2c <Analyze_ADC_DataRLP>
}
 8001bea:	bf00      	nop
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	40020000 	.word	0x40020000
 8001bf8:	200002ec 	.word	0x200002ec
 8001bfc:	200001f0 	.word	0x200001f0
 8001c00:	20000aec 	.word	0x20000aec
 8001c04:	40533333 	.word	0x40533333
 8001c08:	457ff000 	.word	0x457ff000
 8001c0c:	3d4ccccd 	.word	0x3d4ccccd

08001c10 <Analyze_ADC_DataRLS>:

void Analyze_ADC_DataRLS(void) {
 8001c10:	b5b0      	push	{r4, r5, r7, lr}
 8001c12:	b08e      	sub	sp, #56	@ 0x38
 8001c14:	af00      	add	r7, sp, #0
    // 1. 寻找阶跃起始点
    int start_index = 0;
 8001c16:	2300      	movs	r3, #0
 8001c18:	637b      	str	r3, [r7, #52]	@ 0x34
    float v_start = 0;
 8001c1a:	f04f 0300 	mov.w	r3, #0
 8001c1e:	633b      	str	r3, [r7, #48]	@ 0x30

    // 找到第一个有效上升点
    for (int i = 0; i < BUFFER_SIZE; i++) {
 8001c20:	2300      	movs	r3, #0
 8001c22:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c24:	e022      	b.n	8001c6c <Analyze_ADC_DataRLS+0x5c>
        float voltage = (adc_buffer[i] * VREF) / 4095.0f;
 8001c26:	4a76      	ldr	r2, [pc, #472]	@ (8001e00 <Analyze_ADC_DataRLS+0x1f0>)
 8001c28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c2e:	ee07 3a90 	vmov	s15, r3
 8001c32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c36:	ed9f 7a73 	vldr	s14, [pc, #460]	@ 8001e04 <Analyze_ADC_DataRLS+0x1f4>
 8001c3a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c3e:	eddf 6a72 	vldr	s13, [pc, #456]	@ 8001e08 <Analyze_ADC_DataRLS+0x1f8>
 8001c42:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c46:	edc7 7a07 	vstr	s15, [r7, #28]
        if (voltage > MIN_VOLTAGE) {
 8001c4a:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c4e:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 8001e0c <Analyze_ADC_DataRLS+0x1fc>
 8001c52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c5a:	dd04      	ble.n	8001c66 <Analyze_ADC_DataRLS+0x56>
            start_index = i;
 8001c5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c5e:	637b      	str	r3, [r7, #52]	@ 0x34
            v_start = voltage;
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	633b      	str	r3, [r7, #48]	@ 0x30
            break;
 8001c64:	e006      	b.n	8001c74 <Analyze_ADC_DataRLS+0x64>
    for (int i = 0; i < BUFFER_SIZE; i++) {
 8001c66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c68:	3301      	adds	r3, #1
 8001c6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c72:	dbd8      	blt.n	8001c26 <Analyze_ADC_DataRLS+0x16>
        }
    }
    float v_end=(adc_buffer[BUFFER_SIZE-1] * VREF) / 4095.0f;
 8001c74:	4b62      	ldr	r3, [pc, #392]	@ (8001e00 <Analyze_ADC_DataRLS+0x1f0>)
 8001c76:	f8b3 37fe 	ldrh.w	r3, [r3, #2046]	@ 0x7fe
 8001c7a:	ee07 3a90 	vmov	s15, r3
 8001c7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c82:	ed9f 7a60 	vldr	s14, [pc, #384]	@ 8001e04 <Analyze_ADC_DataRLS+0x1f4>
 8001c86:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c8a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8001e08 <Analyze_ADC_DataRLS+0x1f8>
 8001c8e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c92:	edc7 7a06 	vstr	s15, [r7, #24]
    float v_target=0.9*v_end;
 8001c96:	69b8      	ldr	r0, [r7, #24]
 8001c98:	f7fe fc5e 	bl	8000558 <__aeabi_f2d>
 8001c9c:	a356      	add	r3, pc, #344	@ (adr r3, 8001df8 <Analyze_ADC_DataRLS+0x1e8>)
 8001c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca2:	f7fe fcb1 	bl	8000608 <__aeabi_dmul>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	460b      	mov	r3, r1
 8001caa:	4610      	mov	r0, r2
 8001cac:	4619      	mov	r1, r3
 8001cae:	f7fe ff83 	bl	8000bb8 <__aeabi_d2f>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	617b      	str	r3, [r7, #20]
    float v_mid;
    int mid_index;
    for(int i=0;i<BUFFER_SIZE;i++){
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	623b      	str	r3, [r7, #32]
 8001cba:	e022      	b.n	8001d02 <Analyze_ADC_DataRLS+0xf2>
    	float voltage = (adc_buffer[i] * VREF) / 4095.0f;
 8001cbc:	4a50      	ldr	r2, [pc, #320]	@ (8001e00 <Analyze_ADC_DataRLS+0x1f0>)
 8001cbe:	6a3b      	ldr	r3, [r7, #32]
 8001cc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001cc4:	ee07 3a90 	vmov	s15, r3
 8001cc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ccc:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8001e04 <Analyze_ADC_DataRLS+0x1f4>
 8001cd0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001cd4:	eddf 6a4c 	vldr	s13, [pc, #304]	@ 8001e08 <Analyze_ADC_DataRLS+0x1f8>
 8001cd8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cdc:	edc7 7a04 	vstr	s15, [r7, #16]
    	if(voltage<=v_target){
 8001ce0:	ed97 7a04 	vldr	s14, [r7, #16]
 8001ce4:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ce8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cf0:	d900      	bls.n	8001cf4 <Analyze_ADC_DataRLS+0xe4>
    		mid_index=i;
    		v_mid=voltage;
    	}else{
    		break;
 8001cf2:	e00a      	b.n	8001d0a <Analyze_ADC_DataRLS+0xfa>
    		mid_index=i;
 8001cf4:	6a3b      	ldr	r3, [r7, #32]
 8001cf6:	627b      	str	r3, [r7, #36]	@ 0x24
    		v_mid=voltage;
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	62bb      	str	r3, [r7, #40]	@ 0x28
    for(int i=0;i<BUFFER_SIZE;i++){
 8001cfc:	6a3b      	ldr	r3, [r7, #32]
 8001cfe:	3301      	adds	r3, #1
 8001d00:	623b      	str	r3, [r7, #32]
 8001d02:	6a3b      	ldr	r3, [r7, #32]
 8001d04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d08:	dbd8      	blt.n	8001cbc <Analyze_ADC_DataRLS+0xac>
    	}
    }
    float time = (mid_index - start_index) * (1.0f / SAMPLE_RATE);
 8001d0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	ee07 3a90 	vmov	s15, r3
 8001d14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d18:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8001e10 <Analyze_ADC_DataRLS+0x200>
 8001d1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d20:	edc7 7a03 	vstr	s15, [r7, #12]

    // 5. 计算时间常数
    float tao = -time / log((v_end - v_mid) / (v_end - v_start));
 8001d24:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d28:	eef1 7a67 	vneg.f32	s15, s15
 8001d2c:	ee17 3a90 	vmov	r3, s15
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7fe fc11 	bl	8000558 <__aeabi_f2d>
 8001d36:	4604      	mov	r4, r0
 8001d38:	460d      	mov	r5, r1
 8001d3a:	ed97 7a06 	vldr	s14, [r7, #24]
 8001d3e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001d42:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d46:	edd7 6a06 	vldr	s13, [r7, #24]
 8001d4a:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001d4e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001d52:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001d56:	ee16 0a90 	vmov	r0, s13
 8001d5a:	f7fe fbfd 	bl	8000558 <__aeabi_f2d>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	460b      	mov	r3, r1
 8001d62:	ec43 2b10 	vmov	d0, r2, r3
 8001d66:	f007 f987 	bl	8009078 <log>
 8001d6a:	ec53 2b10 	vmov	r2, r3, d0
 8001d6e:	4620      	mov	r0, r4
 8001d70:	4629      	mov	r1, r5
 8001d72:	f7fe fd73 	bl	800085c <__aeabi_ddiv>
 8001d76:	4602      	mov	r2, r0
 8001d78:	460b      	mov	r3, r1
 8001d7a:	4610      	mov	r0, r2
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	f7fe ff1b 	bl	8000bb8 <__aeabi_d2f>
 8001d82:	4603      	mov	r3, r0
 8001d84:	60bb      	str	r3, [r7, #8]

    // 6. 计算黑箱电阻 (使用串联电路公式)
    float r_black = R_KNOWN * v_end / (VREF - v_end);
 8001d86:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d8a:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8001e14 <Analyze_ADC_DataRLS+0x204>
 8001d8e:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001d92:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8001e04 <Analyze_ADC_DataRLS+0x1f4>
 8001d96:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d9a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001da2:	edc7 7a01 	vstr	s15, [r7, #4]

    // 7. 计算电感值
    float l_black = tao * (R_KNOWN + r_black);
 8001da6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001daa:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8001e14 <Analyze_ADC_DataRLS+0x204>
 8001dae:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001db2:	ed97 7a02 	vldr	s14, [r7, #8]
 8001db6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dba:	edc7 7a00 	vstr	s15, [r7]

    // 8. 输出结果
    sprintf(message1, "Rs=%.1f",r_black );
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f7fe fbca 	bl	8000558 <__aeabi_f2d>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	4913      	ldr	r1, [pc, #76]	@ (8001e18 <Analyze_ADC_DataRLS+0x208>)
 8001dca:	4814      	ldr	r0, [pc, #80]	@ (8001e1c <Analyze_ADC_DataRLS+0x20c>)
 8001dcc:	f005 f80e 	bl	8006dec <siprintf>
    sprintf(message2, "Ls=%.1fmh",l_black*1e3);
 8001dd0:	6838      	ldr	r0, [r7, #0]
 8001dd2:	f7fe fbc1 	bl	8000558 <__aeabi_f2d>
 8001dd6:	f04f 0200 	mov.w	r2, #0
 8001dda:	4b11      	ldr	r3, [pc, #68]	@ (8001e20 <Analyze_ADC_DataRLS+0x210>)
 8001ddc:	f7fe fc14 	bl	8000608 <__aeabi_dmul>
 8001de0:	4602      	mov	r2, r0
 8001de2:	460b      	mov	r3, r1
 8001de4:	490f      	ldr	r1, [pc, #60]	@ (8001e24 <Analyze_ADC_DataRLS+0x214>)
 8001de6:	4810      	ldr	r0, [pc, #64]	@ (8001e28 <Analyze_ADC_DataRLS+0x218>)
 8001de8:	f005 f800 	bl	8006dec <siprintf>

}
 8001dec:	bf00      	nop
 8001dee:	3738      	adds	r7, #56	@ 0x38
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bdb0      	pop	{r4, r5, r7, pc}
 8001df4:	f3af 8000 	nop.w
 8001df8:	cccccccd 	.word	0xcccccccd
 8001dfc:	3feccccc 	.word	0x3feccccc
 8001e00:	200002ec 	.word	0x200002ec
 8001e04:	40533333 	.word	0x40533333
 8001e08:	457ff000 	.word	0x457ff000
 8001e0c:	3d4ccccd 	.word	0x3d4ccccd
 8001e10:	3727c5ac 	.word	0x3727c5ac
 8001e14:	447a0000 	.word	0x447a0000
 8001e18:	08009534 	.word	0x08009534
 8001e1c:	20000af0 	.word	0x20000af0
 8001e20:	408f4000 	.word	0x408f4000
 8001e24:	0800953c 	.word	0x0800953c
 8001e28:	20000b70 	.word	0x20000b70

08001e2c <Analyze_ADC_DataRLP>:

void Analyze_ADC_DataRLP(void){
 8001e2c:	b5b0      	push	{r4, r5, r7, lr}
 8001e2e:	b08e      	sub	sp, #56	@ 0x38
 8001e30:	af00      	add	r7, sp, #0
	// 1. 寻找阶跃起始点
	int start_index = 0;
 8001e32:	2300      	movs	r3, #0
 8001e34:	637b      	str	r3, [r7, #52]	@ 0x34
		    float v_start = 0;
 8001e36:	f04f 0300 	mov.w	r3, #0
 8001e3a:	633b      	str	r3, [r7, #48]	@ 0x30

		    // 找到第一个有效上升点
		    for (int i = 0; i < BUFFER_SIZE; i++) {
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e40:	e022      	b.n	8001e88 <Analyze_ADC_DataRLP+0x5c>
		        float voltage = (adc_buffer[i] * VREF) / 4095.0f;
 8001e42:	4a76      	ldr	r2, [pc, #472]	@ (800201c <Analyze_ADC_DataRLP+0x1f0>)
 8001e44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001e4a:	ee07 3a90 	vmov	s15, r3
 8001e4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e52:	ed9f 7a73 	vldr	s14, [pc, #460]	@ 8002020 <Analyze_ADC_DataRLP+0x1f4>
 8001e56:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001e5a:	eddf 6a72 	vldr	s13, [pc, #456]	@ 8002024 <Analyze_ADC_DataRLP+0x1f8>
 8001e5e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e62:	edc7 7a07 	vstr	s15, [r7, #28]
		        if (voltage > MIN_VOLTAGE) {
 8001e66:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e6a:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 8002028 <Analyze_ADC_DataRLP+0x1fc>
 8001e6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e76:	dd04      	ble.n	8001e82 <Analyze_ADC_DataRLP+0x56>
		            start_index = i;
 8001e78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e7a:	637b      	str	r3, [r7, #52]	@ 0x34
		            v_start = voltage;
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	633b      	str	r3, [r7, #48]	@ 0x30
		            break;
 8001e80:	e006      	b.n	8001e90 <Analyze_ADC_DataRLP+0x64>
		    for (int i = 0; i < BUFFER_SIZE; i++) {
 8001e82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e84:	3301      	adds	r3, #1
 8001e86:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e8e:	dbd8      	blt.n	8001e42 <Analyze_ADC_DataRLP+0x16>
		        }
		    }
		    float v_end=(adc_buffer[BUFFER_SIZE-1] * VREF) / 4095.0f;
 8001e90:	4b62      	ldr	r3, [pc, #392]	@ (800201c <Analyze_ADC_DataRLP+0x1f0>)
 8001e92:	f8b3 37fe 	ldrh.w	r3, [r3, #2046]	@ 0x7fe
 8001e96:	ee07 3a90 	vmov	s15, r3
 8001e9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e9e:	ed9f 7a60 	vldr	s14, [pc, #384]	@ 8002020 <Analyze_ADC_DataRLP+0x1f4>
 8001ea2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ea6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8002024 <Analyze_ADC_DataRLP+0x1f8>
 8001eaa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001eae:	edc7 7a06 	vstr	s15, [r7, #24]
		    float v_mid=0;
 8001eb2:	f04f 0300 	mov.w	r3, #0
 8001eb6:	62bb      	str	r3, [r7, #40]	@ 0x28
		    float mid_index=0;
 8001eb8:	f04f 0300 	mov.w	r3, #0
 8001ebc:	627b      	str	r3, [r7, #36]	@ 0x24
		    for (int i = 0; i < BUFFER_SIZE; i++) {
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	623b      	str	r3, [r7, #32]
 8001ec2:	e027      	b.n	8001f14 <Analyze_ADC_DataRLP+0xe8>
		    	        float voltage = (adc_buffer[i] * VREF) / 4095.0f;
 8001ec4:	4a55      	ldr	r2, [pc, #340]	@ (800201c <Analyze_ADC_DataRLP+0x1f0>)
 8001ec6:	6a3b      	ldr	r3, [r7, #32]
 8001ec8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ecc:	ee07 3a90 	vmov	s15, r3
 8001ed0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ed4:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8002020 <Analyze_ADC_DataRLP+0x1f4>
 8001ed8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001edc:	eddf 6a51 	vldr	s13, [pc, #324]	@ 8002024 <Analyze_ADC_DataRLP+0x1f8>
 8001ee0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ee4:	edc7 7a05 	vstr	s15, [r7, #20]
		    	        if (voltage < v_end) {
 8001ee8:	ed97 7a05 	vldr	s14, [r7, #20]
 8001eec:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ef0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ef8:	d400      	bmi.n	8001efc <Analyze_ADC_DataRLP+0xd0>
		    	            mid_index = i;
		    	            v_mid= voltage;

		    	        }
		    	        else{
		    	        	break;
 8001efa:	e00f      	b.n	8001f1c <Analyze_ADC_DataRLP+0xf0>
		    	            mid_index = i;
 8001efc:	6a3b      	ldr	r3, [r7, #32]
 8001efe:	ee07 3a90 	vmov	s15, r3
 8001f02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f06:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		    	            v_mid= voltage;
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	62bb      	str	r3, [r7, #40]	@ 0x28
		    for (int i = 0; i < BUFFER_SIZE; i++) {
 8001f0e:	6a3b      	ldr	r3, [r7, #32]
 8001f10:	3301      	adds	r3, #1
 8001f12:	623b      	str	r3, [r7, #32]
 8001f14:	6a3b      	ldr	r3, [r7, #32]
 8001f16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f1a:	dbd3      	blt.n	8001ec4 <Analyze_ADC_DataRLP+0x98>
		    	        }
		    	    }
		    float time=(mid_index-start_index)*(1.0f/SAMPLE_RATE);
 8001f1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f1e:	ee07 3a90 	vmov	s15, r3
 8001f22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f26:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001f2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f2e:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800202c <Analyze_ADC_DataRLP+0x200>
 8001f32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f36:	edc7 7a04 	vstr	s15, [r7, #16]
		    float tao= -time / log((v_end - v_mid) / (v_end - v_start));
 8001f3a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f3e:	eef1 7a67 	vneg.f32	s15, s15
 8001f42:	ee17 3a90 	vmov	r3, s15
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7fe fb06 	bl	8000558 <__aeabi_f2d>
 8001f4c:	4604      	mov	r4, r0
 8001f4e:	460d      	mov	r5, r1
 8001f50:	ed97 7a06 	vldr	s14, [r7, #24]
 8001f54:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001f58:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f5c:	edd7 6a06 	vldr	s13, [r7, #24]
 8001f60:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001f64:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001f68:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001f6c:	ee16 0a90 	vmov	r0, s13
 8001f70:	f7fe faf2 	bl	8000558 <__aeabi_f2d>
 8001f74:	4602      	mov	r2, r0
 8001f76:	460b      	mov	r3, r1
 8001f78:	ec43 2b10 	vmov	d0, r2, r3
 8001f7c:	f007 f87c 	bl	8009078 <log>
 8001f80:	ec53 2b10 	vmov	r2, r3, d0
 8001f84:	4620      	mov	r0, r4
 8001f86:	4629      	mov	r1, r5
 8001f88:	f7fe fc68 	bl	800085c <__aeabi_ddiv>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	460b      	mov	r3, r1
 8001f90:	4610      	mov	r0, r2
 8001f92:	4619      	mov	r1, r3
 8001f94:	f7fe fe10 	bl	8000bb8 <__aeabi_d2f>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	60fb      	str	r3, [r7, #12]
		    float r_black=R_KNOWN*(VREF-v_start)/v_start;
 8001f9c:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8002020 <Analyze_ADC_DataRLP+0x1f4>
 8001fa0:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001fa4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fa8:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8002030 <Analyze_ADC_DataRLP+0x204>
 8001fac:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001fb0:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001fb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fb8:	edc7 7a02 	vstr	s15, [r7, #8]
		    float l_black=tao*R_KNOWN*r_black/(R_KNOWN+r_black);
 8001fbc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001fc0:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8002030 <Analyze_ADC_DataRLP+0x204>
 8001fc4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001fc8:	edd7 7a02 	vldr	s15, [r7, #8]
 8001fcc:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001fd0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001fd4:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8002030 <Analyze_ADC_DataRLP+0x204>
 8001fd8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001fdc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fe0:	edc7 7a01 	vstr	s15, [r7, #4]
		    sprintf(message1, "Rp=%.1f",v_start);
 8001fe4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001fe6:	f7fe fab7 	bl	8000558 <__aeabi_f2d>
 8001fea:	4602      	mov	r2, r0
 8001fec:	460b      	mov	r3, r1
 8001fee:	4911      	ldr	r1, [pc, #68]	@ (8002034 <Analyze_ADC_DataRLP+0x208>)
 8001ff0:	4811      	ldr	r0, [pc, #68]	@ (8002038 <Analyze_ADC_DataRLP+0x20c>)
 8001ff2:	f004 fefb 	bl	8006dec <siprintf>
		    sprintf(message2, "Lp=%.1fmh",l_black*1e3);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f7fe faae 	bl	8000558 <__aeabi_f2d>
 8001ffc:	f04f 0200 	mov.w	r2, #0
 8002000:	4b0e      	ldr	r3, [pc, #56]	@ (800203c <Analyze_ADC_DataRLP+0x210>)
 8002002:	f7fe fb01 	bl	8000608 <__aeabi_dmul>
 8002006:	4602      	mov	r2, r0
 8002008:	460b      	mov	r3, r1
 800200a:	490d      	ldr	r1, [pc, #52]	@ (8002040 <Analyze_ADC_DataRLP+0x214>)
 800200c:	480d      	ldr	r0, [pc, #52]	@ (8002044 <Analyze_ADC_DataRLP+0x218>)
 800200e:	f004 feed 	bl	8006dec <siprintf>
}
 8002012:	bf00      	nop
 8002014:	3738      	adds	r7, #56	@ 0x38
 8002016:	46bd      	mov	sp, r7
 8002018:	bdb0      	pop	{r4, r5, r7, pc}
 800201a:	bf00      	nop
 800201c:	200002ec 	.word	0x200002ec
 8002020:	40533333 	.word	0x40533333
 8002024:	457ff000 	.word	0x457ff000
 8002028:	3d4ccccd 	.word	0x3d4ccccd
 800202c:	3727c5ac 	.word	0x3727c5ac
 8002030:	447a0000 	.word	0x447a0000
 8002034:	08009548 	.word	0x08009548
 8002038:	20000af0 	.word	0x20000af0
 800203c:	408f4000 	.word	0x408f4000
 8002040:	08009550 	.word	0x08009550
 8002044:	20000b70 	.word	0x20000b70

08002048 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800204e:	f000 fe5b 	bl	8002d08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002052:	f000 f84d 	bl	80020f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002056:	f7ff f885 	bl	8001164 <MX_GPIO_Init>
  MX_DMA_Init();
 800205a:	f7ff f863 	bl	8001124 <MX_DMA_Init>
  MX_ADC1_Init();
 800205e:	f7fe ff91 	bl	8000f84 <MX_ADC1_Init>
  MX_TIM3_Init();
 8002062:	f000 fd47 	bl	8002af4 <MX_TIM3_Init>
  MX_I2C1_Init();
 8002066:	f7ff f8cd 	bl	8001204 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800206a:	f000 fdb1 	bl	8002bd0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(30); // 单片机启动比OLED上电快,需要延迟等待一下
 800206e:	201e      	movs	r0, #30
 8002070:	f000 febc 	bl	8002dec <HAL_Delay>
  OLED_Init();
 8002074:	f000 f8d2 	bl	800221c <OLED_Init>

  //启用TIM3触发ADC
  TIM_HandleTypeDef* adc_timer = &htim3;
 8002078:	4b18      	ldr	r3, [pc, #96]	@ (80020dc <main+0x94>)
 800207a:	607b      	str	r3, [r7, #4]
  // 设置采样率 (100kHz)
  //uint32_t timer_clock = 100000000; // 100MHz (根据系统时钟)
  adc_timer->Instance->PSC = 100-1;   // 99 (CubeMX配置)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2263      	movs	r2, #99	@ 0x63
 8002082:	629a      	str	r2, [r3, #40]	@ 0x28
  adc_timer->Instance->ARR =10-1;// 9 (CubeMX配置)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2209      	movs	r2, #9
 800208a:	62da      	str	r2, [r3, #44]	@ 0x2c
  //adc_timer->Instance->CCR1 = 1;      // 比较值
  HAL_TIM_Base_Start(adc_timer);
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f003 fc21 	bl	80058d4 <HAL_TIM_Base_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  DMA_Measure();
 8002092:	f7ff f947 	bl	8001324 <DMA_Measure>
	  	       OLED_NewFrame();
 8002096:	f000 f91d 	bl	80022d4 <OLED_NewFrame>
	  	       OLED_PrintString(0, 0, message1, &font16x16, OLED_COLOR_NORMAL);
 800209a:	2300      	movs	r3, #0
 800209c:	9300      	str	r3, [sp, #0]
 800209e:	4b10      	ldr	r3, [pc, #64]	@ (80020e0 <main+0x98>)
 80020a0:	4a10      	ldr	r2, [pc, #64]	@ (80020e4 <main+0x9c>)
 80020a2:	2100      	movs	r1, #0
 80020a4:	2000      	movs	r0, #0
 80020a6:	f000 fb3b 	bl	8002720 <OLED_PrintString>
	  	       OLED_PrintString(0, 20, message2, &font16x16, OLED_COLOR_NORMAL);
 80020aa:	2300      	movs	r3, #0
 80020ac:	9300      	str	r3, [sp, #0]
 80020ae:	4b0c      	ldr	r3, [pc, #48]	@ (80020e0 <main+0x98>)
 80020b0:	4a0d      	ldr	r2, [pc, #52]	@ (80020e8 <main+0xa0>)
 80020b2:	2114      	movs	r1, #20
 80020b4:	2000      	movs	r0, #0
 80020b6:	f000 fb33 	bl	8002720 <OLED_PrintString>
	  	       OLED_PrintString(0, 40, msg, &font16x16, OLED_COLOR_NORMAL);
 80020ba:	2300      	movs	r3, #0
 80020bc:	9300      	str	r3, [sp, #0]
 80020be:	4b08      	ldr	r3, [pc, #32]	@ (80020e0 <main+0x98>)
 80020c0:	4a0a      	ldr	r2, [pc, #40]	@ (80020ec <main+0xa4>)
 80020c2:	2128      	movs	r1, #40	@ 0x28
 80020c4:	2000      	movs	r0, #0
 80020c6:	f000 fb2b 	bl	8002720 <OLED_PrintString>
	  	       OLED_ShowFrame();
 80020ca:	f000 f90f 	bl	80022ec <OLED_ShowFrame>
	  HAL_Delay(1500);  // 每2秒测量一次
 80020ce:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80020d2:	f000 fe8b 	bl	8002dec <HAL_Delay>
	  DMA_Measure();
 80020d6:	bf00      	nop
 80020d8:	e7db      	b.n	8002092 <main+0x4a>
 80020da:	bf00      	nop
 80020dc:	200010a4 	.word	0x200010a4
 80020e0:	08009be4 	.word	0x08009be4
 80020e4:	20000af0 	.word	0x20000af0
 80020e8:	20000b70 	.word	0x20000b70
 80020ec:	20000bf0 	.word	0x20000bf0

080020f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b094      	sub	sp, #80	@ 0x50
 80020f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020f6:	f107 0320 	add.w	r3, r7, #32
 80020fa:	2230      	movs	r2, #48	@ 0x30
 80020fc:	2100      	movs	r1, #0
 80020fe:	4618      	mov	r0, r3
 8002100:	f004 fee9 	bl	8006ed6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002104:	f107 030c 	add.w	r3, r7, #12
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]
 800210c:	605a      	str	r2, [r3, #4]
 800210e:	609a      	str	r2, [r3, #8]
 8002110:	60da      	str	r2, [r3, #12]
 8002112:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002114:	2300      	movs	r3, #0
 8002116:	60bb      	str	r3, [r7, #8]
 8002118:	4b27      	ldr	r3, [pc, #156]	@ (80021b8 <SystemClock_Config+0xc8>)
 800211a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800211c:	4a26      	ldr	r2, [pc, #152]	@ (80021b8 <SystemClock_Config+0xc8>)
 800211e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002122:	6413      	str	r3, [r2, #64]	@ 0x40
 8002124:	4b24      	ldr	r3, [pc, #144]	@ (80021b8 <SystemClock_Config+0xc8>)
 8002126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002128:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800212c:	60bb      	str	r3, [r7, #8]
 800212e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002130:	2300      	movs	r3, #0
 8002132:	607b      	str	r3, [r7, #4]
 8002134:	4b21      	ldr	r3, [pc, #132]	@ (80021bc <SystemClock_Config+0xcc>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a20      	ldr	r2, [pc, #128]	@ (80021bc <SystemClock_Config+0xcc>)
 800213a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800213e:	6013      	str	r3, [r2, #0]
 8002140:	4b1e      	ldr	r3, [pc, #120]	@ (80021bc <SystemClock_Config+0xcc>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002148:	607b      	str	r3, [r7, #4]
 800214a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800214c:	2302      	movs	r3, #2
 800214e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002150:	2301      	movs	r3, #1
 8002152:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002154:	2310      	movs	r3, #16
 8002156:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002158:	2302      	movs	r3, #2
 800215a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800215c:	2300      	movs	r3, #0
 800215e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002160:	2308      	movs	r3, #8
 8002162:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002164:	2364      	movs	r3, #100	@ 0x64
 8002166:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002168:	2302      	movs	r3, #2
 800216a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800216c:	2304      	movs	r3, #4
 800216e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002170:	f107 0320 	add.w	r3, r7, #32
 8002174:	4618      	mov	r0, r3
 8002176:	f002 ff05 	bl	8004f84 <HAL_RCC_OscConfig>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002180:	f000 f81e 	bl	80021c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002184:	230f      	movs	r3, #15
 8002186:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002188:	2302      	movs	r3, #2
 800218a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800218c:	2300      	movs	r3, #0
 800218e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002190:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002194:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002196:	2300      	movs	r3, #0
 8002198:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800219a:	f107 030c 	add.w	r3, r7, #12
 800219e:	2103      	movs	r1, #3
 80021a0:	4618      	mov	r0, r3
 80021a2:	f003 f967 	bl	8005474 <HAL_RCC_ClockConfig>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80021ac:	f000 f808 	bl	80021c0 <Error_Handler>
  }
}
 80021b0:	bf00      	nop
 80021b2:	3750      	adds	r7, #80	@ 0x50
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	40023800 	.word	0x40023800
 80021bc:	40007000 	.word	0x40007000

080021c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021c4:	b672      	cpsid	i
}
 80021c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021c8:	bf00      	nop
 80021ca:	e7fd      	b.n	80021c8 <Error_Handler+0x8>

080021cc <OLED_Send>:
 * @param len 要发送的数据长度
 * @return None
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他平台时应根据实际情况修改此函数
 */
void OLED_Send(uint8_t *data, uint8_t len)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af02      	add	r7, sp, #8
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	460b      	mov	r3, r1
 80021d6:	70fb      	strb	r3, [r7, #3]
  HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, data, len, HAL_MAX_DELAY);
 80021d8:	78fb      	ldrb	r3, [r7, #3]
 80021da:	b29b      	uxth	r3, r3
 80021dc:	f04f 32ff 	mov.w	r2, #4294967295
 80021e0:	9200      	str	r2, [sp, #0]
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	2178      	movs	r1, #120	@ 0x78
 80021e6:	4803      	ldr	r0, [pc, #12]	@ (80021f4 <OLED_Send+0x28>)
 80021e8:	f002 fb72 	bl	80048d0 <HAL_I2C_Master_Transmit>
}
 80021ec:	bf00      	nop
 80021ee:	3708      	adds	r7, #8
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	20000298 	.word	0x20000298

080021f8 <OLED_SendCmd>:

/**
 * @brief 向OLED发送指令
 */
void OLED_SendCmd(uint8_t cmd)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	4603      	mov	r3, r0
 8002200:	71fb      	strb	r3, [r7, #7]
  static uint8_t sendBuffer[2] = {0};
  sendBuffer[1] = cmd;
 8002202:	4a05      	ldr	r2, [pc, #20]	@ (8002218 <OLED_SendCmd+0x20>)
 8002204:	79fb      	ldrb	r3, [r7, #7]
 8002206:	7053      	strb	r3, [r2, #1]
  OLED_Send(sendBuffer, 2);
 8002208:	2102      	movs	r1, #2
 800220a:	4803      	ldr	r0, [pc, #12]	@ (8002218 <OLED_SendCmd+0x20>)
 800220c:	f7ff ffde 	bl	80021cc <OLED_Send>
}
 8002210:	bf00      	nop
 8002212:	3708      	adds	r7, #8
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	20001018 	.word	0x20001018

0800221c <OLED_Init>:
/**
 * @brief 初始化OLED (SSD1306)
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_Init()
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  OLED_SendCmd(0xAE); /*关闭显示 display off*/
 8002220:	20ae      	movs	r0, #174	@ 0xae
 8002222:	f7ff ffe9 	bl	80021f8 <OLED_SendCmd>

  OLED_SendCmd(0x20);
 8002226:	2020      	movs	r0, #32
 8002228:	f7ff ffe6 	bl	80021f8 <OLED_SendCmd>
  OLED_SendCmd(0x10);
 800222c:	2010      	movs	r0, #16
 800222e:	f7ff ffe3 	bl	80021f8 <OLED_SendCmd>

  OLED_SendCmd(0xB0);
 8002232:	20b0      	movs	r0, #176	@ 0xb0
 8002234:	f7ff ffe0 	bl	80021f8 <OLED_SendCmd>

  OLED_SendCmd(0xC8);
 8002238:	20c8      	movs	r0, #200	@ 0xc8
 800223a:	f7ff ffdd 	bl	80021f8 <OLED_SendCmd>

  OLED_SendCmd(0x00);
 800223e:	2000      	movs	r0, #0
 8002240:	f7ff ffda 	bl	80021f8 <OLED_SendCmd>
  OLED_SendCmd(0x10);
 8002244:	2010      	movs	r0, #16
 8002246:	f7ff ffd7 	bl	80021f8 <OLED_SendCmd>

  OLED_SendCmd(0x40);
 800224a:	2040      	movs	r0, #64	@ 0x40
 800224c:	f7ff ffd4 	bl	80021f8 <OLED_SendCmd>

  OLED_SendCmd(0x81);
 8002250:	2081      	movs	r0, #129	@ 0x81
 8002252:	f7ff ffd1 	bl	80021f8 <OLED_SendCmd>

  OLED_SendCmd(0xDF);
 8002256:	20df      	movs	r0, #223	@ 0xdf
 8002258:	f7ff ffce 	bl	80021f8 <OLED_SendCmd>
  OLED_SendCmd(0xA1);
 800225c:	20a1      	movs	r0, #161	@ 0xa1
 800225e:	f7ff ffcb 	bl	80021f8 <OLED_SendCmd>

  OLED_SendCmd(0xA6);
 8002262:	20a6      	movs	r0, #166	@ 0xa6
 8002264:	f7ff ffc8 	bl	80021f8 <OLED_SendCmd>
  OLED_SendCmd(0xA8);
 8002268:	20a8      	movs	r0, #168	@ 0xa8
 800226a:	f7ff ffc5 	bl	80021f8 <OLED_SendCmd>

  OLED_SendCmd(0x3F);
 800226e:	203f      	movs	r0, #63	@ 0x3f
 8002270:	f7ff ffc2 	bl	80021f8 <OLED_SendCmd>

  OLED_SendCmd(0xA4);
 8002274:	20a4      	movs	r0, #164	@ 0xa4
 8002276:	f7ff ffbf 	bl	80021f8 <OLED_SendCmd>

  OLED_SendCmd(0xD3);
 800227a:	20d3      	movs	r0, #211	@ 0xd3
 800227c:	f7ff ffbc 	bl	80021f8 <OLED_SendCmd>
  OLED_SendCmd(0x00);
 8002280:	2000      	movs	r0, #0
 8002282:	f7ff ffb9 	bl	80021f8 <OLED_SendCmd>

  OLED_SendCmd(0xD5);
 8002286:	20d5      	movs	r0, #213	@ 0xd5
 8002288:	f7ff ffb6 	bl	80021f8 <OLED_SendCmd>
  OLED_SendCmd(0xF0);
 800228c:	20f0      	movs	r0, #240	@ 0xf0
 800228e:	f7ff ffb3 	bl	80021f8 <OLED_SendCmd>

  OLED_SendCmd(0xD9);
 8002292:	20d9      	movs	r0, #217	@ 0xd9
 8002294:	f7ff ffb0 	bl	80021f8 <OLED_SendCmd>
  OLED_SendCmd(0x22);
 8002298:	2022      	movs	r0, #34	@ 0x22
 800229a:	f7ff ffad 	bl	80021f8 <OLED_SendCmd>

  OLED_SendCmd(0xDA);
 800229e:	20da      	movs	r0, #218	@ 0xda
 80022a0:	f7ff ffaa 	bl	80021f8 <OLED_SendCmd>
  OLED_SendCmd(0x12);
 80022a4:	2012      	movs	r0, #18
 80022a6:	f7ff ffa7 	bl	80021f8 <OLED_SendCmd>

  OLED_SendCmd(0xDB);
 80022aa:	20db      	movs	r0, #219	@ 0xdb
 80022ac:	f7ff ffa4 	bl	80021f8 <OLED_SendCmd>
  OLED_SendCmd(0x20);
 80022b0:	2020      	movs	r0, #32
 80022b2:	f7ff ffa1 	bl	80021f8 <OLED_SendCmd>

  OLED_SendCmd(0x8D);
 80022b6:	208d      	movs	r0, #141	@ 0x8d
 80022b8:	f7ff ff9e 	bl	80021f8 <OLED_SendCmd>
  OLED_SendCmd(0x14);
 80022bc:	2014      	movs	r0, #20
 80022be:	f7ff ff9b 	bl	80021f8 <OLED_SendCmd>

  OLED_NewFrame();
 80022c2:	f000 f807 	bl	80022d4 <OLED_NewFrame>
  OLED_ShowFrame();
 80022c6:	f000 f811 	bl	80022ec <OLED_ShowFrame>

  OLED_SendCmd(0xAF); /*开启显示 display ON*/
 80022ca:	20af      	movs	r0, #175	@ 0xaf
 80022cc:	f7ff ff94 	bl	80021f8 <OLED_SendCmd>
}
 80022d0:	bf00      	nop
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <OLED_NewFrame>:

/**
 * @brief 清空显存 绘制新的一帧
 */
void OLED_NewFrame()
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  memset(OLED_GRAM, 0, sizeof(OLED_GRAM));
 80022d8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80022dc:	2100      	movs	r1, #0
 80022de:	4802      	ldr	r0, [pc, #8]	@ (80022e8 <OLED_NewFrame+0x14>)
 80022e0:	f004 fdf9 	bl	8006ed6 <memset>
}
 80022e4:	bf00      	nop
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	20000c18 	.word	0x20000c18

080022ec <OLED_ShowFrame>:
/**
 * @brief 将当前显存显示到屏幕上
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_ShowFrame()
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
  static uint8_t sendBuffer[OLED_COLUMN + 1];
  sendBuffer[0] = 0x40;
 80022f2:	4b15      	ldr	r3, [pc, #84]	@ (8002348 <OLED_ShowFrame+0x5c>)
 80022f4:	2240      	movs	r2, #64	@ 0x40
 80022f6:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < OLED_PAGE; i++)
 80022f8:	2300      	movs	r3, #0
 80022fa:	71fb      	strb	r3, [r7, #7]
 80022fc:	e01b      	b.n	8002336 <OLED_ShowFrame+0x4a>
  {
    OLED_SendCmd(0xB0 + i); // 设置页地址
 80022fe:	79fb      	ldrb	r3, [r7, #7]
 8002300:	3b50      	subs	r3, #80	@ 0x50
 8002302:	b2db      	uxtb	r3, r3
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff ff77 	bl	80021f8 <OLED_SendCmd>
    OLED_SendCmd(0x00);     // 设置列地址低4位
 800230a:	2000      	movs	r0, #0
 800230c:	f7ff ff74 	bl	80021f8 <OLED_SendCmd>
    OLED_SendCmd(0x10);     // 设置列地址高4位
 8002310:	2010      	movs	r0, #16
 8002312:	f7ff ff71 	bl	80021f8 <OLED_SendCmd>
    memcpy(sendBuffer + 1, OLED_GRAM[i], OLED_COLUMN);
 8002316:	480d      	ldr	r0, [pc, #52]	@ (800234c <OLED_ShowFrame+0x60>)
 8002318:	79fb      	ldrb	r3, [r7, #7]
 800231a:	01db      	lsls	r3, r3, #7
 800231c:	4a0c      	ldr	r2, [pc, #48]	@ (8002350 <OLED_ShowFrame+0x64>)
 800231e:	4413      	add	r3, r2
 8002320:	2280      	movs	r2, #128	@ 0x80
 8002322:	4619      	mov	r1, r3
 8002324:	f004 fe57 	bl	8006fd6 <memcpy>
    OLED_Send(sendBuffer, OLED_COLUMN + 1);
 8002328:	2181      	movs	r1, #129	@ 0x81
 800232a:	4807      	ldr	r0, [pc, #28]	@ (8002348 <OLED_ShowFrame+0x5c>)
 800232c:	f7ff ff4e 	bl	80021cc <OLED_Send>
  for (uint8_t i = 0; i < OLED_PAGE; i++)
 8002330:	79fb      	ldrb	r3, [r7, #7]
 8002332:	3301      	adds	r3, #1
 8002334:	71fb      	strb	r3, [r7, #7]
 8002336:	79fb      	ldrb	r3, [r7, #7]
 8002338:	2b07      	cmp	r3, #7
 800233a:	d9e0      	bls.n	80022fe <OLED_ShowFrame+0x12>
  }
}
 800233c:	bf00      	nop
 800233e:	bf00      	nop
 8002340:	3708      	adds	r7, #8
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	2000101c 	.word	0x2000101c
 800234c:	2000101d 	.word	0x2000101d
 8002350:	20000c18 	.word	0x20000c18

08002354 <OLED_SetByte_Fine>:
 * @note 此函数将显存中的某一字节的第start位到第end位设置为与data相同
 * @note start和end的范围为0-7, start必须小于等于end
 * @note 此函数与OLED_SetByte_Fine的区别在于此函数只能设置显存中的某一真实字节
 */
void OLED_SetByte_Fine(uint8_t page, uint8_t column, uint8_t data, uint8_t start, uint8_t end, OLED_ColorMode color)
{
 8002354:	b490      	push	{r4, r7}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	4604      	mov	r4, r0
 800235c:	4608      	mov	r0, r1
 800235e:	4611      	mov	r1, r2
 8002360:	461a      	mov	r2, r3
 8002362:	4623      	mov	r3, r4
 8002364:	71fb      	strb	r3, [r7, #7]
 8002366:	4603      	mov	r3, r0
 8002368:	71bb      	strb	r3, [r7, #6]
 800236a:	460b      	mov	r3, r1
 800236c:	717b      	strb	r3, [r7, #5]
 800236e:	4613      	mov	r3, r2
 8002370:	713b      	strb	r3, [r7, #4]
  static uint8_t temp;
  if (page >= OLED_PAGE || column >= OLED_COLUMN)
 8002372:	79fb      	ldrb	r3, [r7, #7]
 8002374:	2b07      	cmp	r3, #7
 8002376:	d85f      	bhi.n	8002438 <OLED_SetByte_Fine+0xe4>
 8002378:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800237c:	2b00      	cmp	r3, #0
 800237e:	db5b      	blt.n	8002438 <OLED_SetByte_Fine+0xe4>
    return;
  if (color)
 8002380:	7d3b      	ldrb	r3, [r7, #20]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d002      	beq.n	800238c <OLED_SetByte_Fine+0x38>
    data = ~data;
 8002386:	797b      	ldrb	r3, [r7, #5]
 8002388:	43db      	mvns	r3, r3
 800238a:	717b      	strb	r3, [r7, #5]

  temp = data | (0xff << (end + 1)) | (0xff >> (8 - start));
 800238c:	7c3b      	ldrb	r3, [r7, #16]
 800238e:	3301      	adds	r3, #1
 8002390:	22ff      	movs	r2, #255	@ 0xff
 8002392:	fa02 f303 	lsl.w	r3, r2, r3
 8002396:	b25a      	sxtb	r2, r3
 8002398:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800239c:	4313      	orrs	r3, r2
 800239e:	b25a      	sxtb	r2, r3
 80023a0:	793b      	ldrb	r3, [r7, #4]
 80023a2:	f1c3 0308 	rsb	r3, r3, #8
 80023a6:	21ff      	movs	r1, #255	@ 0xff
 80023a8:	fa41 f303 	asr.w	r3, r1, r3
 80023ac:	b25b      	sxtb	r3, r3
 80023ae:	4313      	orrs	r3, r2
 80023b0:	b25b      	sxtb	r3, r3
 80023b2:	b2da      	uxtb	r2, r3
 80023b4:	4b23      	ldr	r3, [pc, #140]	@ (8002444 <OLED_SetByte_Fine+0xf0>)
 80023b6:	701a      	strb	r2, [r3, #0]
  OLED_GRAM[page][column] &= temp;
 80023b8:	79fa      	ldrb	r2, [r7, #7]
 80023ba:	79bb      	ldrb	r3, [r7, #6]
 80023bc:	4922      	ldr	r1, [pc, #136]	@ (8002448 <OLED_SetByte_Fine+0xf4>)
 80023be:	01d2      	lsls	r2, r2, #7
 80023c0:	440a      	add	r2, r1
 80023c2:	4413      	add	r3, r2
 80023c4:	7818      	ldrb	r0, [r3, #0]
 80023c6:	4b1f      	ldr	r3, [pc, #124]	@ (8002444 <OLED_SetByte_Fine+0xf0>)
 80023c8:	7819      	ldrb	r1, [r3, #0]
 80023ca:	79fa      	ldrb	r2, [r7, #7]
 80023cc:	79bb      	ldrb	r3, [r7, #6]
 80023ce:	4001      	ands	r1, r0
 80023d0:	b2c8      	uxtb	r0, r1
 80023d2:	491d      	ldr	r1, [pc, #116]	@ (8002448 <OLED_SetByte_Fine+0xf4>)
 80023d4:	01d2      	lsls	r2, r2, #7
 80023d6:	440a      	add	r2, r1
 80023d8:	4413      	add	r3, r2
 80023da:	4602      	mov	r2, r0
 80023dc:	701a      	strb	r2, [r3, #0]
  temp = data & ~(0xff << (end + 1)) & ~(0xff >> (8 - start));
 80023de:	7c3b      	ldrb	r3, [r7, #16]
 80023e0:	3301      	adds	r3, #1
 80023e2:	22ff      	movs	r2, #255	@ 0xff
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	b25b      	sxtb	r3, r3
 80023ea:	43db      	mvns	r3, r3
 80023ec:	b25a      	sxtb	r2, r3
 80023ee:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80023f2:	4013      	ands	r3, r2
 80023f4:	b25a      	sxtb	r2, r3
 80023f6:	793b      	ldrb	r3, [r7, #4]
 80023f8:	f1c3 0308 	rsb	r3, r3, #8
 80023fc:	f06f 01ff 	mvn.w	r1, #255	@ 0xff
 8002400:	fa41 f303 	asr.w	r3, r1, r3
 8002404:	b25b      	sxtb	r3, r3
 8002406:	4013      	ands	r3, r2
 8002408:	b25b      	sxtb	r3, r3
 800240a:	b2da      	uxtb	r2, r3
 800240c:	4b0d      	ldr	r3, [pc, #52]	@ (8002444 <OLED_SetByte_Fine+0xf0>)
 800240e:	701a      	strb	r2, [r3, #0]
  OLED_GRAM[page][column] |= temp;
 8002410:	79fa      	ldrb	r2, [r7, #7]
 8002412:	79bb      	ldrb	r3, [r7, #6]
 8002414:	490c      	ldr	r1, [pc, #48]	@ (8002448 <OLED_SetByte_Fine+0xf4>)
 8002416:	01d2      	lsls	r2, r2, #7
 8002418:	440a      	add	r2, r1
 800241a:	4413      	add	r3, r2
 800241c:	7818      	ldrb	r0, [r3, #0]
 800241e:	4b09      	ldr	r3, [pc, #36]	@ (8002444 <OLED_SetByte_Fine+0xf0>)
 8002420:	7819      	ldrb	r1, [r3, #0]
 8002422:	79fa      	ldrb	r2, [r7, #7]
 8002424:	79bb      	ldrb	r3, [r7, #6]
 8002426:	4301      	orrs	r1, r0
 8002428:	b2c8      	uxtb	r0, r1
 800242a:	4907      	ldr	r1, [pc, #28]	@ (8002448 <OLED_SetByte_Fine+0xf4>)
 800242c:	01d2      	lsls	r2, r2, #7
 800242e:	440a      	add	r2, r1
 8002430:	4413      	add	r3, r2
 8002432:	4602      	mov	r2, r0
 8002434:	701a      	strb	r2, [r3, #0]
 8002436:	e000      	b.n	800243a <OLED_SetByte_Fine+0xe6>
    return;
 8002438:	bf00      	nop
  // 使用OLED_SetPixel实现
  // for (uint8_t i = start; i <= end; i++) {
  //   OLED_SetPixel(column, page * 8 + i, !((data >> i) & 0x01));
  // }
}
 800243a:	3708      	adds	r7, #8
 800243c:	46bd      	mov	sp, r7
 800243e:	bc90      	pop	{r4, r7}
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	2000109d 	.word	0x2000109d
 8002448:	20000c18 	.word	0x20000c18

0800244c <OLED_SetBits_Fine>:
 * @note 此函数将显存中从(x,y)开始向下数len位设置为与data相同
 * @note len的范围为1-8
 * @note 此函数与OLED_SetByte_Fine的区别在于此函数的横坐标和纵坐标是以像素为单位的, 可能出现跨两个真实字节的情况(跨页)
 */
void OLED_SetBits_Fine(uint8_t x, uint8_t y, uint8_t data, uint8_t len, OLED_ColorMode color)
{
 800244c:	b5b0      	push	{r4, r5, r7, lr}
 800244e:	b086      	sub	sp, #24
 8002450:	af02      	add	r7, sp, #8
 8002452:	4604      	mov	r4, r0
 8002454:	4608      	mov	r0, r1
 8002456:	4611      	mov	r1, r2
 8002458:	461a      	mov	r2, r3
 800245a:	4623      	mov	r3, r4
 800245c:	71fb      	strb	r3, [r7, #7]
 800245e:	4603      	mov	r3, r0
 8002460:	71bb      	strb	r3, [r7, #6]
 8002462:	460b      	mov	r3, r1
 8002464:	717b      	strb	r3, [r7, #5]
 8002466:	4613      	mov	r3, r2
 8002468:	713b      	strb	r3, [r7, #4]
  uint8_t page = y / 8;
 800246a:	79bb      	ldrb	r3, [r7, #6]
 800246c:	08db      	lsrs	r3, r3, #3
 800246e:	73fb      	strb	r3, [r7, #15]
  uint8_t bit = y % 8;
 8002470:	79bb      	ldrb	r3, [r7, #6]
 8002472:	f003 0307 	and.w	r3, r3, #7
 8002476:	73bb      	strb	r3, [r7, #14]
  if (bit + len > 8)
 8002478:	7bba      	ldrb	r2, [r7, #14]
 800247a:	793b      	ldrb	r3, [r7, #4]
 800247c:	4413      	add	r3, r2
 800247e:	2b08      	cmp	r3, #8
 8002480:	dd29      	ble.n	80024d6 <OLED_SetBits_Fine+0x8a>
  {
    OLED_SetByte_Fine(page, x, data << bit, bit, 7, color);
 8002482:	797a      	ldrb	r2, [r7, #5]
 8002484:	7bbb      	ldrb	r3, [r7, #14]
 8002486:	fa02 f303 	lsl.w	r3, r2, r3
 800248a:	b2da      	uxtb	r2, r3
 800248c:	7bbc      	ldrb	r4, [r7, #14]
 800248e:	79f9      	ldrb	r1, [r7, #7]
 8002490:	7bf8      	ldrb	r0, [r7, #15]
 8002492:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002496:	9301      	str	r3, [sp, #4]
 8002498:	2307      	movs	r3, #7
 800249a:	9300      	str	r3, [sp, #0]
 800249c:	4623      	mov	r3, r4
 800249e:	f7ff ff59 	bl	8002354 <OLED_SetByte_Fine>
    OLED_SetByte_Fine(page + 1, x, data >> (8 - bit), 0, len + bit - 1 - 8, color);
 80024a2:	7bfb      	ldrb	r3, [r7, #15]
 80024a4:	3301      	adds	r3, #1
 80024a6:	b2d8      	uxtb	r0, r3
 80024a8:	797a      	ldrb	r2, [r7, #5]
 80024aa:	7bbb      	ldrb	r3, [r7, #14]
 80024ac:	f1c3 0308 	rsb	r3, r3, #8
 80024b0:	fa42 f303 	asr.w	r3, r2, r3
 80024b4:	b2dc      	uxtb	r4, r3
 80024b6:	793a      	ldrb	r2, [r7, #4]
 80024b8:	7bbb      	ldrb	r3, [r7, #14]
 80024ba:	4413      	add	r3, r2
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	3b09      	subs	r3, #9
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	79f9      	ldrb	r1, [r7, #7]
 80024c4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80024c8:	9201      	str	r2, [sp, #4]
 80024ca:	9300      	str	r3, [sp, #0]
 80024cc:	2300      	movs	r3, #0
 80024ce:	4622      	mov	r2, r4
 80024d0:	f7ff ff40 	bl	8002354 <OLED_SetByte_Fine>
  }
  // 使用OLED_SetPixel实现
  // for (uint8_t i = 0; i < len; i++) {
  //   OLED_SetPixel(x, y + i, !((data >> i) & 0x01));
  // }
}
 80024d4:	e015      	b.n	8002502 <OLED_SetBits_Fine+0xb6>
    OLED_SetByte_Fine(page, x, data << bit, bit, bit + len - 1, color);
 80024d6:	797a      	ldrb	r2, [r7, #5]
 80024d8:	7bbb      	ldrb	r3, [r7, #14]
 80024da:	fa02 f303 	lsl.w	r3, r2, r3
 80024de:	b2dc      	uxtb	r4, r3
 80024e0:	7bba      	ldrb	r2, [r7, #14]
 80024e2:	793b      	ldrb	r3, [r7, #4]
 80024e4:	4413      	add	r3, r2
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	3b01      	subs	r3, #1
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	7bbd      	ldrb	r5, [r7, #14]
 80024ee:	79f9      	ldrb	r1, [r7, #7]
 80024f0:	7bf8      	ldrb	r0, [r7, #15]
 80024f2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80024f6:	9201      	str	r2, [sp, #4]
 80024f8:	9300      	str	r3, [sp, #0]
 80024fa:	462b      	mov	r3, r5
 80024fc:	4622      	mov	r2, r4
 80024fe:	f7ff ff29 	bl	8002354 <OLED_SetByte_Fine>
}
 8002502:	bf00      	nop
 8002504:	3710      	adds	r7, #16
 8002506:	46bd      	mov	sp, r7
 8002508:	bdb0      	pop	{r4, r5, r7, pc}

0800250a <OLED_SetBits>:
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始向下数8位设置为与data相同
 * @note 此函数与OLED_SetByte的区别在于此函数的横坐标和纵坐标是以像素为单位的, 可能出现跨两个真实字节的情况(跨页)
 */
void OLED_SetBits(uint8_t x, uint8_t y, uint8_t data, OLED_ColorMode color)
{
 800250a:	b590      	push	{r4, r7, lr}
 800250c:	b087      	sub	sp, #28
 800250e:	af02      	add	r7, sp, #8
 8002510:	4604      	mov	r4, r0
 8002512:	4608      	mov	r0, r1
 8002514:	4611      	mov	r1, r2
 8002516:	461a      	mov	r2, r3
 8002518:	4623      	mov	r3, r4
 800251a:	71fb      	strb	r3, [r7, #7]
 800251c:	4603      	mov	r3, r0
 800251e:	71bb      	strb	r3, [r7, #6]
 8002520:	460b      	mov	r3, r1
 8002522:	717b      	strb	r3, [r7, #5]
 8002524:	4613      	mov	r3, r2
 8002526:	713b      	strb	r3, [r7, #4]
  uint8_t page = y / 8;
 8002528:	79bb      	ldrb	r3, [r7, #6]
 800252a:	08db      	lsrs	r3, r3, #3
 800252c:	73fb      	strb	r3, [r7, #15]
  uint8_t bit = y % 8;
 800252e:	79bb      	ldrb	r3, [r7, #6]
 8002530:	f003 0307 	and.w	r3, r3, #7
 8002534:	73bb      	strb	r3, [r7, #14]
  OLED_SetByte_Fine(page, x, data << bit, bit, 7, color);
 8002536:	797a      	ldrb	r2, [r7, #5]
 8002538:	7bbb      	ldrb	r3, [r7, #14]
 800253a:	fa02 f303 	lsl.w	r3, r2, r3
 800253e:	b2da      	uxtb	r2, r3
 8002540:	7bbc      	ldrb	r4, [r7, #14]
 8002542:	79f9      	ldrb	r1, [r7, #7]
 8002544:	7bf8      	ldrb	r0, [r7, #15]
 8002546:	793b      	ldrb	r3, [r7, #4]
 8002548:	9301      	str	r3, [sp, #4]
 800254a:	2307      	movs	r3, #7
 800254c:	9300      	str	r3, [sp, #0]
 800254e:	4623      	mov	r3, r4
 8002550:	f7ff ff00 	bl	8002354 <OLED_SetByte_Fine>
  if (bit)
 8002554:	7bbb      	ldrb	r3, [r7, #14]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d014      	beq.n	8002584 <OLED_SetBits+0x7a>
  {
    OLED_SetByte_Fine(page + 1, x, data >> (8 - bit), 0, bit - 1, color);
 800255a:	7bfb      	ldrb	r3, [r7, #15]
 800255c:	3301      	adds	r3, #1
 800255e:	b2d8      	uxtb	r0, r3
 8002560:	797a      	ldrb	r2, [r7, #5]
 8002562:	7bbb      	ldrb	r3, [r7, #14]
 8002564:	f1c3 0308 	rsb	r3, r3, #8
 8002568:	fa42 f303 	asr.w	r3, r2, r3
 800256c:	b2dc      	uxtb	r4, r3
 800256e:	7bbb      	ldrb	r3, [r7, #14]
 8002570:	3b01      	subs	r3, #1
 8002572:	b2db      	uxtb	r3, r3
 8002574:	79f9      	ldrb	r1, [r7, #7]
 8002576:	793a      	ldrb	r2, [r7, #4]
 8002578:	9201      	str	r2, [sp, #4]
 800257a:	9300      	str	r3, [sp, #0]
 800257c:	2300      	movs	r3, #0
 800257e:	4622      	mov	r2, r4
 8002580:	f7ff fee8 	bl	8002354 <OLED_SetByte_Fine>
  }
}
 8002584:	bf00      	nop
 8002586:	3714      	adds	r7, #20
 8002588:	46bd      	mov	sp, r7
 800258a:	bd90      	pop	{r4, r7, pc}

0800258c <OLED_SetBlock>:
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始的w*h个像素设置为data中的数据
 * @note data的数据应该采用列行式排列
 */
void OLED_SetBlock(uint8_t x, uint8_t y, const uint8_t *data, uint8_t w, uint8_t h, OLED_ColorMode color)
{
 800258c:	b590      	push	{r4, r7, lr}
 800258e:	b087      	sub	sp, #28
 8002590:	af02      	add	r7, sp, #8
 8002592:	603a      	str	r2, [r7, #0]
 8002594:	461a      	mov	r2, r3
 8002596:	4603      	mov	r3, r0
 8002598:	71fb      	strb	r3, [r7, #7]
 800259a:	460b      	mov	r3, r1
 800259c:	71bb      	strb	r3, [r7, #6]
 800259e:	4613      	mov	r3, r2
 80025a0:	717b      	strb	r3, [r7, #5]
  uint8_t fullRow = h / 8; // 完整的行数
 80025a2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80025a6:	08db      	lsrs	r3, r3, #3
 80025a8:	733b      	strb	r3, [r7, #12]
  uint8_t partBit = h % 8; // 不完整的字节中的有效位数
 80025aa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80025ae:	f003 0307 	and.w	r3, r3, #7
 80025b2:	72fb      	strb	r3, [r7, #11]
  for (uint8_t i = 0; i < w; i++)
 80025b4:	2300      	movs	r3, #0
 80025b6:	73fb      	strb	r3, [r7, #15]
 80025b8:	e025      	b.n	8002606 <OLED_SetBlock+0x7a>
  {
    for (uint8_t j = 0; j < fullRow; j++)
 80025ba:	2300      	movs	r3, #0
 80025bc:	73bb      	strb	r3, [r7, #14]
 80025be:	e01b      	b.n	80025f8 <OLED_SetBlock+0x6c>
    {
      OLED_SetBits(x + i, y + j * 8, data[i + j * w], color);
 80025c0:	79fa      	ldrb	r2, [r7, #7]
 80025c2:	7bfb      	ldrb	r3, [r7, #15]
 80025c4:	4413      	add	r3, r2
 80025c6:	b2d8      	uxtb	r0, r3
 80025c8:	7bbb      	ldrb	r3, [r7, #14]
 80025ca:	00db      	lsls	r3, r3, #3
 80025cc:	b2da      	uxtb	r2, r3
 80025ce:	79bb      	ldrb	r3, [r7, #6]
 80025d0:	4413      	add	r3, r2
 80025d2:	b2dc      	uxtb	r4, r3
 80025d4:	7bfa      	ldrb	r2, [r7, #15]
 80025d6:	7bbb      	ldrb	r3, [r7, #14]
 80025d8:	7979      	ldrb	r1, [r7, #5]
 80025da:	fb01 f303 	mul.w	r3, r1, r3
 80025de:	4413      	add	r3, r2
 80025e0:	461a      	mov	r2, r3
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	4413      	add	r3, r2
 80025e6:	781a      	ldrb	r2, [r3, #0]
 80025e8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80025ec:	4621      	mov	r1, r4
 80025ee:	f7ff ff8c 	bl	800250a <OLED_SetBits>
    for (uint8_t j = 0; j < fullRow; j++)
 80025f2:	7bbb      	ldrb	r3, [r7, #14]
 80025f4:	3301      	adds	r3, #1
 80025f6:	73bb      	strb	r3, [r7, #14]
 80025f8:	7bba      	ldrb	r2, [r7, #14]
 80025fa:	7b3b      	ldrb	r3, [r7, #12]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d3df      	bcc.n	80025c0 <OLED_SetBlock+0x34>
  for (uint8_t i = 0; i < w; i++)
 8002600:	7bfb      	ldrb	r3, [r7, #15]
 8002602:	3301      	adds	r3, #1
 8002604:	73fb      	strb	r3, [r7, #15]
 8002606:	7bfa      	ldrb	r2, [r7, #15]
 8002608:	797b      	ldrb	r3, [r7, #5]
 800260a:	429a      	cmp	r2, r3
 800260c:	d3d5      	bcc.n	80025ba <OLED_SetBlock+0x2e>
    }
  }
  if (partBit)
 800260e:	7afb      	ldrb	r3, [r7, #11]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d028      	beq.n	8002666 <OLED_SetBlock+0xda>
  {
    uint16_t fullNum = w * fullRow; // 完整的字节数
 8002614:	797b      	ldrb	r3, [r7, #5]
 8002616:	b29a      	uxth	r2, r3
 8002618:	7b3b      	ldrb	r3, [r7, #12]
 800261a:	b29b      	uxth	r3, r3
 800261c:	fb12 f303 	smulbb	r3, r2, r3
 8002620:	813b      	strh	r3, [r7, #8]
    for (uint8_t i = 0; i < w; i++)
 8002622:	2300      	movs	r3, #0
 8002624:	737b      	strb	r3, [r7, #13]
 8002626:	e01a      	b.n	800265e <OLED_SetBlock+0xd2>
    {
      OLED_SetBits_Fine(x + i, y + (fullRow * 8), data[fullNum + i], partBit, color);
 8002628:	79fa      	ldrb	r2, [r7, #7]
 800262a:	7b7b      	ldrb	r3, [r7, #13]
 800262c:	4413      	add	r3, r2
 800262e:	b2d8      	uxtb	r0, r3
 8002630:	7b3b      	ldrb	r3, [r7, #12]
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	b2da      	uxtb	r2, r3
 8002636:	79bb      	ldrb	r3, [r7, #6]
 8002638:	4413      	add	r3, r2
 800263a:	b2d9      	uxtb	r1, r3
 800263c:	893a      	ldrh	r2, [r7, #8]
 800263e:	7b7b      	ldrb	r3, [r7, #13]
 8002640:	4413      	add	r3, r2
 8002642:	461a      	mov	r2, r3
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	4413      	add	r3, r2
 8002648:	781a      	ldrb	r2, [r3, #0]
 800264a:	7afc      	ldrb	r4, [r7, #11]
 800264c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002650:	9300      	str	r3, [sp, #0]
 8002652:	4623      	mov	r3, r4
 8002654:	f7ff fefa 	bl	800244c <OLED_SetBits_Fine>
    for (uint8_t i = 0; i < w; i++)
 8002658:	7b7b      	ldrb	r3, [r7, #13]
 800265a:	3301      	adds	r3, #1
 800265c:	737b      	strb	r3, [r7, #13]
 800265e:	7b7a      	ldrb	r2, [r7, #13]
 8002660:	797b      	ldrb	r3, [r7, #5]
 8002662:	429a      	cmp	r2, r3
 8002664:	d3e0      	bcc.n	8002628 <OLED_SetBlock+0x9c>
  //       if (j * 8 + k >= h) break; // 防止越界(不完整的字节
  //       OLED_SetPixel(x + i, y + j * 8 + k, !((data[i + j * w] >> k) & 0x01));
  //     }
  //   }
  // }
}
 8002666:	bf00      	nop
 8002668:	3714      	adds	r7, #20
 800266a:	46bd      	mov	sp, r7
 800266c:	bd90      	pop	{r4, r7, pc}

0800266e <OLED_PrintASCIIChar>:
 * @param ch 字符
 * @param font 字体
 * @param color 颜色
 */
void OLED_PrintASCIIChar(uint8_t x, uint8_t y, char ch, const ASCIIFont *font, OLED_ColorMode color)
{
 800266e:	b5b0      	push	{r4, r5, r7, lr}
 8002670:	b084      	sub	sp, #16
 8002672:	af02      	add	r7, sp, #8
 8002674:	603b      	str	r3, [r7, #0]
 8002676:	4603      	mov	r3, r0
 8002678:	71fb      	strb	r3, [r7, #7]
 800267a:	460b      	mov	r3, r1
 800267c:	71bb      	strb	r3, [r7, #6]
 800267e:	4613      	mov	r3, r2
 8002680:	717b      	strb	r3, [r7, #5]
  OLED_SetBlock(x, y, font->chars + (ch - ' ') * (((font->h + 7) / 8) * font->w), font->w, font->h, color);
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	685a      	ldr	r2, [r3, #4]
 8002686:	797b      	ldrb	r3, [r7, #5]
 8002688:	f1a3 0120 	sub.w	r1, r3, #32
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	3307      	adds	r3, #7
 8002692:	2b00      	cmp	r3, #0
 8002694:	da00      	bge.n	8002698 <OLED_PrintASCIIChar+0x2a>
 8002696:	3307      	adds	r3, #7
 8002698:	10db      	asrs	r3, r3, #3
 800269a:	4618      	mov	r0, r3
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	785b      	ldrb	r3, [r3, #1]
 80026a0:	fb00 f303 	mul.w	r3, r0, r3
 80026a4:	fb01 f303 	mul.w	r3, r1, r3
 80026a8:	18d4      	adds	r4, r2, r3
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	785d      	ldrb	r5, [r3, #1]
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	79b9      	ldrb	r1, [r7, #6]
 80026b4:	79f8      	ldrb	r0, [r7, #7]
 80026b6:	7e3a      	ldrb	r2, [r7, #24]
 80026b8:	9201      	str	r2, [sp, #4]
 80026ba:	9300      	str	r3, [sp, #0]
 80026bc:	462b      	mov	r3, r5
 80026be:	4622      	mov	r2, r4
 80026c0:	f7ff ff64 	bl	800258c <OLED_SetBlock>
}
 80026c4:	bf00      	nop
 80026c6:	3708      	adds	r7, #8
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bdb0      	pop	{r4, r5, r7, pc}

080026cc <_OLED_GetUTF8Len>:

/**
 * @brief 获取UTF-8编码的字符长度
 */
uint8_t _OLED_GetUTF8Len(char *string)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  if ((string[0] & 0x80) == 0x00)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	b25b      	sxtb	r3, r3
 80026da:	2b00      	cmp	r3, #0
 80026dc:	db01      	blt.n	80026e2 <_OLED_GetUTF8Len+0x16>
  {
    return 1;
 80026de:	2301      	movs	r3, #1
 80026e0:	e018      	b.n	8002714 <_OLED_GetUTF8Len+0x48>
  }
  else if ((string[0] & 0xE0) == 0xC0)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 80026ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80026ec:	d101      	bne.n	80026f2 <_OLED_GetUTF8Len+0x26>
  {
    return 2;
 80026ee:	2302      	movs	r3, #2
 80026f0:	e010      	b.n	8002714 <_OLED_GetUTF8Len+0x48>
  }
  else if ((string[0] & 0xF0) == 0xE0)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80026fa:	2be0      	cmp	r3, #224	@ 0xe0
 80026fc:	d101      	bne.n	8002702 <_OLED_GetUTF8Len+0x36>
  {
    return 3;
 80026fe:	2303      	movs	r3, #3
 8002700:	e008      	b.n	8002714 <_OLED_GetUTF8Len+0x48>
  }
  else if ((string[0] & 0xF8) == 0xF0)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 800270a:	2bf0      	cmp	r3, #240	@ 0xf0
 800270c:	d101      	bne.n	8002712 <_OLED_GetUTF8Len+0x46>
  {
    return 4;
 800270e:	2304      	movs	r3, #4
 8002710:	e000      	b.n	8002714 <_OLED_GetUTF8Len+0x48>
  }
  return 0;
 8002712:	2300      	movs	r3, #0
}
 8002714:	4618      	mov	r0, r3
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <OLED_PrintString>:
 * @note 为保证字符串中的中文会被自动识别并绘制, 需:
 * 1. 编译器字符集设置为UTF-8
 * 2. 使用波特律动LED取模工具生成字模(https://led.baud-dance.com)
 */
void OLED_PrintString(uint8_t x, uint8_t y, char *str, const Font *font, OLED_ColorMode color)
{
 8002720:	b5b0      	push	{r4, r5, r7, lr}
 8002722:	b08a      	sub	sp, #40	@ 0x28
 8002724:	af02      	add	r7, sp, #8
 8002726:	60ba      	str	r2, [r7, #8]
 8002728:	607b      	str	r3, [r7, #4]
 800272a:	4603      	mov	r3, r0
 800272c:	73fb      	strb	r3, [r7, #15]
 800272e:	460b      	mov	r3, r1
 8002730:	73bb      	strb	r3, [r7, #14]
  uint16_t i = 0;                                       // 字符串索引
 8002732:	2300      	movs	r3, #0
 8002734:	83fb      	strh	r3, [r7, #30]
  uint8_t oneLen = (((font->h + 7) / 8) * font->w) + 4; // 一个字模占多少字节
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	3307      	adds	r3, #7
 800273c:	2b00      	cmp	r3, #0
 800273e:	da00      	bge.n	8002742 <OLED_PrintString+0x22>
 8002740:	3307      	adds	r3, #7
 8002742:	10db      	asrs	r3, r3, #3
 8002744:	b2da      	uxtb	r2, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	785b      	ldrb	r3, [r3, #1]
 800274a:	fb12 f303 	smulbb	r3, r2, r3
 800274e:	b2db      	uxtb	r3, r3
 8002750:	3304      	adds	r3, #4
 8002752:	76fb      	strb	r3, [r7, #27]
  uint8_t found;                                        // 是否找到字模
  uint8_t utf8Len;                                      // UTF-8编码长度
  uint8_t *head;                                        // 字模头指针
  while (str[i])
 8002754:	e07d      	b.n	8002852 <OLED_PrintString+0x132>
  {
    found = 0;
 8002756:	2300      	movs	r3, #0
 8002758:	777b      	strb	r3, [r7, #29]
    utf8Len = _OLED_GetUTF8Len(str + i);
 800275a:	8bfb      	ldrh	r3, [r7, #30]
 800275c:	68ba      	ldr	r2, [r7, #8]
 800275e:	4413      	add	r3, r2
 8002760:	4618      	mov	r0, r3
 8002762:	f7ff ffb3 	bl	80026cc <_OLED_GetUTF8Len>
 8002766:	4603      	mov	r3, r0
 8002768:	76bb      	strb	r3, [r7, #26]
    if (utf8Len == 0)
 800276a:	7ebb      	ldrb	r3, [r7, #26]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d078      	beq.n	8002862 <OLED_PrintString+0x142>
      break; // 有问题的UTF-8编码

    // 寻找字符  TODO 优化查找算法, 二分查找或者hash
    for (uint8_t j = 0; j < font->len; j++)
 8002770:	2300      	movs	r3, #0
 8002772:	773b      	strb	r3, [r7, #28]
 8002774:	e032      	b.n	80027dc <OLED_PrintString+0xbc>
    {
      head = (uint8_t *)(font->chars) + (j * oneLen);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	7f3a      	ldrb	r2, [r7, #28]
 800277c:	7ef9      	ldrb	r1, [r7, #27]
 800277e:	fb01 f202 	mul.w	r2, r1, r2
 8002782:	4413      	add	r3, r2
 8002784:	617b      	str	r3, [r7, #20]
      if (memcmp(str + i, head, utf8Len) == 0)
 8002786:	8bfb      	ldrh	r3, [r7, #30]
 8002788:	68ba      	ldr	r2, [r7, #8]
 800278a:	4413      	add	r3, r2
 800278c:	7eba      	ldrb	r2, [r7, #26]
 800278e:	6979      	ldr	r1, [r7, #20]
 8002790:	4618      	mov	r0, r3
 8002792:	f004 fb90 	bl	8006eb6 <memcmp>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d11c      	bne.n	80027d6 <OLED_PrintString+0xb6>
      {
        OLED_SetBlock(x, y, head + 4, font->w, font->h, color);
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	1d1c      	adds	r4, r3, #4
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	785d      	ldrb	r5, [r3, #1]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	7bb9      	ldrb	r1, [r7, #14]
 80027aa:	7bf8      	ldrb	r0, [r7, #15]
 80027ac:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80027b0:	9201      	str	r2, [sp, #4]
 80027b2:	9300      	str	r3, [sp, #0]
 80027b4:	462b      	mov	r3, r5
 80027b6:	4622      	mov	r2, r4
 80027b8:	f7ff fee8 	bl	800258c <OLED_SetBlock>
        // 移动光标
        x += font->w;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	785a      	ldrb	r2, [r3, #1]
 80027c0:	7bfb      	ldrb	r3, [r7, #15]
 80027c2:	4413      	add	r3, r2
 80027c4:	73fb      	strb	r3, [r7, #15]
        i += utf8Len;
 80027c6:	7ebb      	ldrb	r3, [r7, #26]
 80027c8:	b29a      	uxth	r2, r3
 80027ca:	8bfb      	ldrh	r3, [r7, #30]
 80027cc:	4413      	add	r3, r2
 80027ce:	83fb      	strh	r3, [r7, #30]
        found = 1;
 80027d0:	2301      	movs	r3, #1
 80027d2:	777b      	strb	r3, [r7, #29]
        break;
 80027d4:	e007      	b.n	80027e6 <OLED_PrintString+0xc6>
    for (uint8_t j = 0; j < font->len; j++)
 80027d6:	7f3b      	ldrb	r3, [r7, #28]
 80027d8:	3301      	adds	r3, #1
 80027da:	773b      	strb	r3, [r7, #28]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	7a1b      	ldrb	r3, [r3, #8]
 80027e0:	7f3a      	ldrb	r2, [r7, #28]
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d3c7      	bcc.n	8002776 <OLED_PrintString+0x56>
      }
    }

    // 若未找到字模,且为ASCII字符, 则缺省显示ASCII字符
    if (found == 0)
 80027e6:	7f7b      	ldrb	r3, [r7, #29]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d132      	bne.n	8002852 <OLED_PrintString+0x132>
    {
      if (utf8Len == 1)
 80027ec:	7ebb      	ldrb	r3, [r7, #26]
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d119      	bne.n	8002826 <OLED_PrintString+0x106>
      {
        OLED_PrintASCIIChar(x, y, str[i], font->ascii, color);
 80027f2:	8bfb      	ldrh	r3, [r7, #30]
 80027f4:	68ba      	ldr	r2, [r7, #8]
 80027f6:	4413      	add	r3, r2
 80027f8:	781a      	ldrb	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	68dc      	ldr	r4, [r3, #12]
 80027fe:	7bb9      	ldrb	r1, [r7, #14]
 8002800:	7bf8      	ldrb	r0, [r7, #15]
 8002802:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002806:	9300      	str	r3, [sp, #0]
 8002808:	4623      	mov	r3, r4
 800280a:	f7ff ff30 	bl	800266e <OLED_PrintASCIIChar>
        // 移动光标
        x += font->ascii->w;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	785a      	ldrb	r2, [r3, #1]
 8002814:	7bfb      	ldrb	r3, [r7, #15]
 8002816:	4413      	add	r3, r2
 8002818:	73fb      	strb	r3, [r7, #15]
        i += utf8Len;
 800281a:	7ebb      	ldrb	r3, [r7, #26]
 800281c:	b29a      	uxth	r2, r3
 800281e:	8bfb      	ldrh	r3, [r7, #30]
 8002820:	4413      	add	r3, r2
 8002822:	83fb      	strh	r3, [r7, #30]
 8002824:	e015      	b.n	8002852 <OLED_PrintString+0x132>
      }
      else
      {
        OLED_PrintASCIIChar(x, y, ' ', font->ascii, color);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	68da      	ldr	r2, [r3, #12]
 800282a:	7bb9      	ldrb	r1, [r7, #14]
 800282c:	7bf8      	ldrb	r0, [r7, #15]
 800282e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002832:	9300      	str	r3, [sp, #0]
 8002834:	4613      	mov	r3, r2
 8002836:	2220      	movs	r2, #32
 8002838:	f7ff ff19 	bl	800266e <OLED_PrintASCIIChar>
        x += font->ascii->w;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	785a      	ldrb	r2, [r3, #1]
 8002842:	7bfb      	ldrb	r3, [r7, #15]
 8002844:	4413      	add	r3, r2
 8002846:	73fb      	strb	r3, [r7, #15]
        i += utf8Len;
 8002848:	7ebb      	ldrb	r3, [r7, #26]
 800284a:	b29a      	uxth	r2, r3
 800284c:	8bfb      	ldrh	r3, [r7, #30]
 800284e:	4413      	add	r3, r2
 8002850:	83fb      	strh	r3, [r7, #30]
  while (str[i])
 8002852:	8bfb      	ldrh	r3, [r7, #30]
 8002854:	68ba      	ldr	r2, [r7, #8]
 8002856:	4413      	add	r3, r2
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	2b00      	cmp	r3, #0
 800285c:	f47f af7b 	bne.w	8002756 <OLED_PrintString+0x36>
      }
    }
  }
}
 8002860:	e000      	b.n	8002864 <OLED_PrintString+0x144>
      break; // 有问题的UTF-8编码
 8002862:	bf00      	nop
}
 8002864:	bf00      	nop
 8002866:	3720      	adds	r7, #32
 8002868:	46bd      	mov	sp, r7
 800286a:	bdb0      	pop	{r4, r5, r7, pc}

0800286c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002872:	2300      	movs	r3, #0
 8002874:	607b      	str	r3, [r7, #4]
 8002876:	4b10      	ldr	r3, [pc, #64]	@ (80028b8 <HAL_MspInit+0x4c>)
 8002878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800287a:	4a0f      	ldr	r2, [pc, #60]	@ (80028b8 <HAL_MspInit+0x4c>)
 800287c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002880:	6453      	str	r3, [r2, #68]	@ 0x44
 8002882:	4b0d      	ldr	r3, [pc, #52]	@ (80028b8 <HAL_MspInit+0x4c>)
 8002884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002886:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800288a:	607b      	str	r3, [r7, #4]
 800288c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800288e:	2300      	movs	r3, #0
 8002890:	603b      	str	r3, [r7, #0]
 8002892:	4b09      	ldr	r3, [pc, #36]	@ (80028b8 <HAL_MspInit+0x4c>)
 8002894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002896:	4a08      	ldr	r2, [pc, #32]	@ (80028b8 <HAL_MspInit+0x4c>)
 8002898:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800289c:	6413      	str	r3, [r2, #64]	@ 0x40
 800289e:	4b06      	ldr	r3, [pc, #24]	@ (80028b8 <HAL_MspInit+0x4c>)
 80028a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028a6:	603b      	str	r3, [r7, #0]
 80028a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028aa:	bf00      	nop
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	40023800 	.word	0x40023800

080028bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80028c0:	bf00      	nop
 80028c2:	e7fd      	b.n	80028c0 <NMI_Handler+0x4>

080028c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028c8:	bf00      	nop
 80028ca:	e7fd      	b.n	80028c8 <HardFault_Handler+0x4>

080028cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028d0:	bf00      	nop
 80028d2:	e7fd      	b.n	80028d0 <MemManage_Handler+0x4>

080028d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028d8:	bf00      	nop
 80028da:	e7fd      	b.n	80028d8 <BusFault_Handler+0x4>

080028dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028e0:	bf00      	nop
 80028e2:	e7fd      	b.n	80028e0 <UsageFault_Handler+0x4>

080028e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028e8:	bf00      	nop
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr

080028f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028f2:	b480      	push	{r7}
 80028f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028f6:	bf00      	nop
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002904:	bf00      	nop
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr

0800290e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800290e:	b580      	push	{r7, lr}
 8002910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002912:	f000 fa4b 	bl	8002dac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002916:	bf00      	nop
 8002918:	bd80      	pop	{r7, pc}
	...

0800291c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002920:	4802      	ldr	r0, [pc, #8]	@ (800292c <ADC_IRQHandler+0x10>)
 8002922:	f000 faca 	bl	8002eba <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002926:	bf00      	nop
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	200001f0 	.word	0x200001f0

08002930 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002934:	4802      	ldr	r0, [pc, #8]	@ (8002940 <DMA2_Stream0_IRQHandler+0x10>)
 8002936:	f001 fa7f 	bl	8003e38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800293a:	bf00      	nop
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	20000238 	.word	0x20000238

08002944 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
  return 1;
 8002948:	2301      	movs	r3, #1
}
 800294a:	4618      	mov	r0, r3
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <_kill>:

int _kill(int pid, int sig)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800295e:	f004 fb0d 	bl	8006f7c <__errno>
 8002962:	4603      	mov	r3, r0
 8002964:	2216      	movs	r2, #22
 8002966:	601a      	str	r2, [r3, #0]
  return -1;
 8002968:	f04f 33ff 	mov.w	r3, #4294967295
}
 800296c:	4618      	mov	r0, r3
 800296e:	3708      	adds	r7, #8
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <_exit>:

void _exit (int status)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800297c:	f04f 31ff 	mov.w	r1, #4294967295
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f7ff ffe7 	bl	8002954 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002986:	bf00      	nop
 8002988:	e7fd      	b.n	8002986 <_exit+0x12>

0800298a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800298a:	b580      	push	{r7, lr}
 800298c:	b086      	sub	sp, #24
 800298e:	af00      	add	r7, sp, #0
 8002990:	60f8      	str	r0, [r7, #12]
 8002992:	60b9      	str	r1, [r7, #8]
 8002994:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002996:	2300      	movs	r3, #0
 8002998:	617b      	str	r3, [r7, #20]
 800299a:	e00a      	b.n	80029b2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800299c:	f3af 8000 	nop.w
 80029a0:	4601      	mov	r1, r0
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	1c5a      	adds	r2, r3, #1
 80029a6:	60ba      	str	r2, [r7, #8]
 80029a8:	b2ca      	uxtb	r2, r1
 80029aa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	3301      	adds	r3, #1
 80029b0:	617b      	str	r3, [r7, #20]
 80029b2:	697a      	ldr	r2, [r7, #20]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	429a      	cmp	r2, r3
 80029b8:	dbf0      	blt.n	800299c <_read+0x12>
  }

  return len;
 80029ba:	687b      	ldr	r3, [r7, #4]
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3718      	adds	r7, #24
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b086      	sub	sp, #24
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029d0:	2300      	movs	r3, #0
 80029d2:	617b      	str	r3, [r7, #20]
 80029d4:	e009      	b.n	80029ea <_write+0x26>
  {
    __io_putchar(*ptr++);
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	1c5a      	adds	r2, r3, #1
 80029da:	60ba      	str	r2, [r7, #8]
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	4618      	mov	r0, r3
 80029e0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	3301      	adds	r3, #1
 80029e8:	617b      	str	r3, [r7, #20]
 80029ea:	697a      	ldr	r2, [r7, #20]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	dbf1      	blt.n	80029d6 <_write+0x12>
  }
  return len;
 80029f2:	687b      	ldr	r3, [r7, #4]
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3718      	adds	r7, #24
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <_close>:

int _close(int file)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002a04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002a24:	605a      	str	r2, [r3, #4]
  return 0;
 8002a26:	2300      	movs	r3, #0
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <_isatty>:

int _isatty(int file)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002a3c:	2301      	movs	r3, #1
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr

08002a4a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	b085      	sub	sp, #20
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	60f8      	str	r0, [r7, #12]
 8002a52:	60b9      	str	r1, [r7, #8]
 8002a54:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002a56:	2300      	movs	r3, #0
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3714      	adds	r7, #20
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b086      	sub	sp, #24
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a6c:	4a14      	ldr	r2, [pc, #80]	@ (8002ac0 <_sbrk+0x5c>)
 8002a6e:	4b15      	ldr	r3, [pc, #84]	@ (8002ac4 <_sbrk+0x60>)
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a78:	4b13      	ldr	r3, [pc, #76]	@ (8002ac8 <_sbrk+0x64>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d102      	bne.n	8002a86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a80:	4b11      	ldr	r3, [pc, #68]	@ (8002ac8 <_sbrk+0x64>)
 8002a82:	4a12      	ldr	r2, [pc, #72]	@ (8002acc <_sbrk+0x68>)
 8002a84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a86:	4b10      	ldr	r3, [pc, #64]	@ (8002ac8 <_sbrk+0x64>)
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4413      	add	r3, r2
 8002a8e:	693a      	ldr	r2, [r7, #16]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d207      	bcs.n	8002aa4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a94:	f004 fa72 	bl	8006f7c <__errno>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	220c      	movs	r2, #12
 8002a9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8002aa2:	e009      	b.n	8002ab8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002aa4:	4b08      	ldr	r3, [pc, #32]	@ (8002ac8 <_sbrk+0x64>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002aaa:	4b07      	ldr	r3, [pc, #28]	@ (8002ac8 <_sbrk+0x64>)
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	4a05      	ldr	r2, [pc, #20]	@ (8002ac8 <_sbrk+0x64>)
 8002ab4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3718      	adds	r7, #24
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	20020000 	.word	0x20020000
 8002ac4:	00000400 	.word	0x00000400
 8002ac8:	200010a0 	.word	0x200010a0
 8002acc:	20001288 	.word	0x20001288

08002ad0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ad4:	4b06      	ldr	r3, [pc, #24]	@ (8002af0 <SystemInit+0x20>)
 8002ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ada:	4a05      	ldr	r2, [pc, #20]	@ (8002af0 <SystemInit+0x20>)
 8002adc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002ae0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ae4:	bf00      	nop
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
 8002aee:	bf00      	nop
 8002af0:	e000ed00 	.word	0xe000ed00

08002af4 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b086      	sub	sp, #24
 8002af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002afa:	f107 0308 	add.w	r3, r7, #8
 8002afe:	2200      	movs	r2, #0
 8002b00:	601a      	str	r2, [r3, #0]
 8002b02:	605a      	str	r2, [r3, #4]
 8002b04:	609a      	str	r2, [r3, #8]
 8002b06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b08:	463b      	mov	r3, r7
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	601a      	str	r2, [r3, #0]
 8002b0e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002b10:	4b1c      	ldr	r3, [pc, #112]	@ (8002b84 <MX_TIM3_Init+0x90>)
 8002b12:	4a1d      	ldr	r2, [pc, #116]	@ (8002b88 <MX_TIM3_Init+0x94>)
 8002b14:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8002b16:	4b1b      	ldr	r3, [pc, #108]	@ (8002b84 <MX_TIM3_Init+0x90>)
 8002b18:	2263      	movs	r2, #99	@ 0x63
 8002b1a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b1c:	4b19      	ldr	r3, [pc, #100]	@ (8002b84 <MX_TIM3_Init+0x90>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10-1;
 8002b22:	4b18      	ldr	r3, [pc, #96]	@ (8002b84 <MX_TIM3_Init+0x90>)
 8002b24:	2209      	movs	r2, #9
 8002b26:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b28:	4b16      	ldr	r3, [pc, #88]	@ (8002b84 <MX_TIM3_Init+0x90>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b2e:	4b15      	ldr	r3, [pc, #84]	@ (8002b84 <MX_TIM3_Init+0x90>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002b34:	4813      	ldr	r0, [pc, #76]	@ (8002b84 <MX_TIM3_Init+0x90>)
 8002b36:	f002 fe7d 	bl	8005834 <HAL_TIM_Base_Init>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d001      	beq.n	8002b44 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8002b40:	f7ff fb3e 	bl	80021c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b48:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002b4a:	f107 0308 	add.w	r3, r7, #8
 8002b4e:	4619      	mov	r1, r3
 8002b50:	480c      	ldr	r0, [pc, #48]	@ (8002b84 <MX_TIM3_Init+0x90>)
 8002b52:	f002 ff19 	bl	8005988 <HAL_TIM_ConfigClockSource>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d001      	beq.n	8002b60 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8002b5c:	f7ff fb30 	bl	80021c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002b60:	2320      	movs	r3, #32
 8002b62:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b64:	2300      	movs	r3, #0
 8002b66:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002b68:	463b      	mov	r3, r7
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	4805      	ldr	r0, [pc, #20]	@ (8002b84 <MX_TIM3_Init+0x90>)
 8002b6e:	f003 f8f3 	bl	8005d58 <HAL_TIMEx_MasterConfigSynchronization>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d001      	beq.n	8002b7c <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8002b78:	f7ff fb22 	bl	80021c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002b7c:	bf00      	nop
 8002b7e:	3718      	adds	r7, #24
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	200010a4 	.word	0x200010a4
 8002b88:	40000400 	.word	0x40000400

08002b8c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b085      	sub	sp, #20
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a0b      	ldr	r2, [pc, #44]	@ (8002bc8 <HAL_TIM_Base_MspInit+0x3c>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d10d      	bne.n	8002bba <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	60fb      	str	r3, [r7, #12]
 8002ba2:	4b0a      	ldr	r3, [pc, #40]	@ (8002bcc <HAL_TIM_Base_MspInit+0x40>)
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba6:	4a09      	ldr	r2, [pc, #36]	@ (8002bcc <HAL_TIM_Base_MspInit+0x40>)
 8002ba8:	f043 0302 	orr.w	r3, r3, #2
 8002bac:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bae:	4b07      	ldr	r3, [pc, #28]	@ (8002bcc <HAL_TIM_Base_MspInit+0x40>)
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	60fb      	str	r3, [r7, #12]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002bba:	bf00      	nop
 8002bbc:	3714      	adds	r7, #20
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	40000400 	.word	0x40000400
 8002bcc:	40023800 	.word	0x40023800

08002bd0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002bd4:	4b11      	ldr	r3, [pc, #68]	@ (8002c1c <MX_USART1_UART_Init+0x4c>)
 8002bd6:	4a12      	ldr	r2, [pc, #72]	@ (8002c20 <MX_USART1_UART_Init+0x50>)
 8002bd8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002bda:	4b10      	ldr	r3, [pc, #64]	@ (8002c1c <MX_USART1_UART_Init+0x4c>)
 8002bdc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002be0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002be2:	4b0e      	ldr	r3, [pc, #56]	@ (8002c1c <MX_USART1_UART_Init+0x4c>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002be8:	4b0c      	ldr	r3, [pc, #48]	@ (8002c1c <MX_USART1_UART_Init+0x4c>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002bee:	4b0b      	ldr	r3, [pc, #44]	@ (8002c1c <MX_USART1_UART_Init+0x4c>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002bf4:	4b09      	ldr	r3, [pc, #36]	@ (8002c1c <MX_USART1_UART_Init+0x4c>)
 8002bf6:	220c      	movs	r2, #12
 8002bf8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bfa:	4b08      	ldr	r3, [pc, #32]	@ (8002c1c <MX_USART1_UART_Init+0x4c>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c00:	4b06      	ldr	r3, [pc, #24]	@ (8002c1c <MX_USART1_UART_Init+0x4c>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c06:	4805      	ldr	r0, [pc, #20]	@ (8002c1c <MX_USART1_UART_Init+0x4c>)
 8002c08:	f003 f914 	bl	8005e34 <HAL_UART_Init>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d001      	beq.n	8002c16 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002c12:	f7ff fad5 	bl	80021c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002c16:	bf00      	nop
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	200010ec 	.word	0x200010ec
 8002c20:	40011000 	.word	0x40011000

08002c24 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b08a      	sub	sp, #40	@ 0x28
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c2c:	f107 0314 	add.w	r3, r7, #20
 8002c30:	2200      	movs	r2, #0
 8002c32:	601a      	str	r2, [r3, #0]
 8002c34:	605a      	str	r2, [r3, #4]
 8002c36:	609a      	str	r2, [r3, #8]
 8002c38:	60da      	str	r2, [r3, #12]
 8002c3a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a19      	ldr	r2, [pc, #100]	@ (8002ca8 <HAL_UART_MspInit+0x84>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d12c      	bne.n	8002ca0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c46:	2300      	movs	r3, #0
 8002c48:	613b      	str	r3, [r7, #16]
 8002c4a:	4b18      	ldr	r3, [pc, #96]	@ (8002cac <HAL_UART_MspInit+0x88>)
 8002c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c4e:	4a17      	ldr	r2, [pc, #92]	@ (8002cac <HAL_UART_MspInit+0x88>)
 8002c50:	f043 0310 	orr.w	r3, r3, #16
 8002c54:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c56:	4b15      	ldr	r3, [pc, #84]	@ (8002cac <HAL_UART_MspInit+0x88>)
 8002c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c5a:	f003 0310 	and.w	r3, r3, #16
 8002c5e:	613b      	str	r3, [r7, #16]
 8002c60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c62:	2300      	movs	r3, #0
 8002c64:	60fb      	str	r3, [r7, #12]
 8002c66:	4b11      	ldr	r3, [pc, #68]	@ (8002cac <HAL_UART_MspInit+0x88>)
 8002c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c6a:	4a10      	ldr	r2, [pc, #64]	@ (8002cac <HAL_UART_MspInit+0x88>)
 8002c6c:	f043 0301 	orr.w	r3, r3, #1
 8002c70:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c72:	4b0e      	ldr	r3, [pc, #56]	@ (8002cac <HAL_UART_MspInit+0x88>)
 8002c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c76:	f003 0301 	and.w	r3, r3, #1
 8002c7a:	60fb      	str	r3, [r7, #12]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002c7e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002c82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c84:	2302      	movs	r3, #2
 8002c86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c90:	2307      	movs	r3, #7
 8002c92:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c94:	f107 0314 	add.w	r3, r7, #20
 8002c98:	4619      	mov	r1, r3
 8002c9a:	4805      	ldr	r0, [pc, #20]	@ (8002cb0 <HAL_UART_MspInit+0x8c>)
 8002c9c:	f001 fb36 	bl	800430c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002ca0:	bf00      	nop
 8002ca2:	3728      	adds	r7, #40	@ 0x28
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	40011000 	.word	0x40011000
 8002cac:	40023800 	.word	0x40023800
 8002cb0:	40020000 	.word	0x40020000

08002cb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002cb4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002cec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002cb8:	f7ff ff0a 	bl	8002ad0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002cbc:	480c      	ldr	r0, [pc, #48]	@ (8002cf0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002cbe:	490d      	ldr	r1, [pc, #52]	@ (8002cf4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002cc0:	4a0d      	ldr	r2, [pc, #52]	@ (8002cf8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002cc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cc4:	e002      	b.n	8002ccc <LoopCopyDataInit>

08002cc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cca:	3304      	adds	r3, #4

08002ccc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ccc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cd0:	d3f9      	bcc.n	8002cc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cd2:	4a0a      	ldr	r2, [pc, #40]	@ (8002cfc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002cd4:	4c0a      	ldr	r4, [pc, #40]	@ (8002d00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002cd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cd8:	e001      	b.n	8002cde <LoopFillZerobss>

08002cda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cdc:	3204      	adds	r2, #4

08002cde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ce0:	d3fb      	bcc.n	8002cda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002ce2:	f004 f951 	bl	8006f88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ce6:	f7ff f9af 	bl	8002048 <main>
  bx  lr    
 8002cea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002cec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002cf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cf4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002cf8:	08009f9c 	.word	0x08009f9c
  ldr r2, =_sbss
 8002cfc:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002d00:	20001284 	.word	0x20001284

08002d04 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d04:	e7fe      	b.n	8002d04 <DMA1_Stream0_IRQHandler>
	...

08002d08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d0c:	4b0e      	ldr	r3, [pc, #56]	@ (8002d48 <HAL_Init+0x40>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a0d      	ldr	r2, [pc, #52]	@ (8002d48 <HAL_Init+0x40>)
 8002d12:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d18:	4b0b      	ldr	r3, [pc, #44]	@ (8002d48 <HAL_Init+0x40>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a0a      	ldr	r2, [pc, #40]	@ (8002d48 <HAL_Init+0x40>)
 8002d1e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d24:	4b08      	ldr	r3, [pc, #32]	@ (8002d48 <HAL_Init+0x40>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a07      	ldr	r2, [pc, #28]	@ (8002d48 <HAL_Init+0x40>)
 8002d2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d30:	2003      	movs	r0, #3
 8002d32:	f000 fec9 	bl	8003ac8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d36:	200f      	movs	r0, #15
 8002d38:	f000 f808 	bl	8002d4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d3c:	f7ff fd96 	bl	800286c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	40023c00 	.word	0x40023c00

08002d4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d54:	4b12      	ldr	r3, [pc, #72]	@ (8002da0 <HAL_InitTick+0x54>)
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	4b12      	ldr	r3, [pc, #72]	@ (8002da4 <HAL_InitTick+0x58>)
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d62:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f000 fee1 	bl	8003b32 <HAL_SYSTICK_Config>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d001      	beq.n	8002d7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e00e      	b.n	8002d98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2b0f      	cmp	r3, #15
 8002d7e:	d80a      	bhi.n	8002d96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d80:	2200      	movs	r2, #0
 8002d82:	6879      	ldr	r1, [r7, #4]
 8002d84:	f04f 30ff 	mov.w	r0, #4294967295
 8002d88:	f000 fea9 	bl	8003ade <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d8c:	4a06      	ldr	r2, [pc, #24]	@ (8002da8 <HAL_InitTick+0x5c>)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d92:	2300      	movs	r3, #0
 8002d94:	e000      	b.n	8002d98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3708      	adds	r7, #8
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	20000000 	.word	0x20000000
 8002da4:	20000008 	.word	0x20000008
 8002da8:	20000004 	.word	0x20000004

08002dac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002db0:	4b06      	ldr	r3, [pc, #24]	@ (8002dcc <HAL_IncTick+0x20>)
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	461a      	mov	r2, r3
 8002db6:	4b06      	ldr	r3, [pc, #24]	@ (8002dd0 <HAL_IncTick+0x24>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4413      	add	r3, r2
 8002dbc:	4a04      	ldr	r2, [pc, #16]	@ (8002dd0 <HAL_IncTick+0x24>)
 8002dbe:	6013      	str	r3, [r2, #0]
}
 8002dc0:	bf00      	nop
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	20000008 	.word	0x20000008
 8002dd0:	20001134 	.word	0x20001134

08002dd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	af00      	add	r7, sp, #0
  return uwTick;
 8002dd8:	4b03      	ldr	r3, [pc, #12]	@ (8002de8 <HAL_GetTick+0x14>)
 8002dda:	681b      	ldr	r3, [r3, #0]
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	20001134 	.word	0x20001134

08002dec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002df4:	f7ff ffee 	bl	8002dd4 <HAL_GetTick>
 8002df8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e04:	d005      	beq.n	8002e12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e06:	4b0a      	ldr	r3, [pc, #40]	@ (8002e30 <HAL_Delay+0x44>)
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	4413      	add	r3, r2
 8002e10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e12:	bf00      	nop
 8002e14:	f7ff ffde 	bl	8002dd4 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	68fa      	ldr	r2, [r7, #12]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d8f7      	bhi.n	8002e14 <HAL_Delay+0x28>
  {
  }
}
 8002e24:	bf00      	nop
 8002e26:	bf00      	nop
 8002e28:	3710      	adds	r7, #16
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	20000008 	.word	0x20000008

08002e34 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d101      	bne.n	8002e4a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e033      	b.n	8002eb2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d109      	bne.n	8002e66 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f7fe f8e8 	bl	8001028 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e6a:	f003 0310 	and.w	r3, r3, #16
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d118      	bne.n	8002ea4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e76:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002e7a:	f023 0302 	bic.w	r3, r3, #2
 8002e7e:	f043 0202 	orr.w	r2, r3, #2
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f000 fbc6 	bl	8003618 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e96:	f023 0303 	bic.w	r3, r3, #3
 8002e9a:	f043 0201 	orr.w	r2, r3, #1
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	641a      	str	r2, [r3, #64]	@ 0x40
 8002ea2:	e001      	b.n	8002ea8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3710      	adds	r7, #16
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b086      	sub	sp, #24
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	617b      	str	r3, [r7, #20]
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f003 0302 	and.w	r3, r3, #2
 8002ee0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	f003 0320 	and.w	r3, r3, #32
 8002ee8:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d049      	beq.n	8002f84 <HAL_ADC_IRQHandler+0xca>
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d046      	beq.n	8002f84 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002efa:	f003 0310 	and.w	r3, r3, #16
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d105      	bne.n	8002f0e <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f06:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d12b      	bne.n	8002f74 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d127      	bne.n	8002f74 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f2a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d006      	beq.n	8002f40 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d119      	bne.n	8002f74 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	685a      	ldr	r2, [r3, #4]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f022 0220 	bic.w	r2, r2, #32
 8002f4e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f54:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f60:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d105      	bne.n	8002f74 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f6c:	f043 0201 	orr.w	r2, r3, #1
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f7fe f9bb 	bl	80012f0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f06f 0212 	mvn.w	r2, #18
 8002f82:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f003 0304 	and.w	r3, r3, #4
 8002f8a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f92:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d057      	beq.n	800304a <HAL_ADC_IRQHandler+0x190>
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d054      	beq.n	800304a <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fa4:	f003 0310 	and.w	r3, r3, #16
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d105      	bne.n	8002fb8 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d139      	bne.n	800303a <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fcc:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d006      	beq.n	8002fe2 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d12b      	bne.n	800303a <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d124      	bne.n	800303a <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d11d      	bne.n	800303a <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003002:	2b00      	cmp	r3, #0
 8003004:	d119      	bne.n	800303a <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	685a      	ldr	r2, [r3, #4]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003014:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800301a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003026:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800302a:	2b00      	cmp	r3, #0
 800302c:	d105      	bne.n	800303a <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003032:	f043 0201 	orr.w	r2, r3, #1
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f000 fc6a 	bl	8003914 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f06f 020c 	mvn.w	r2, #12
 8003048:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f003 0301 	and.w	r3, r3, #1
 8003050:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003058:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d017      	beq.n	8003090 <HAL_ADC_IRQHandler+0x1d6>
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d014      	beq.n	8003090 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0301 	and.w	r3, r3, #1
 8003070:	2b01      	cmp	r3, #1
 8003072:	d10d      	bne.n	8003090 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003078:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f000 f983 	bl	800338c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f06f 0201 	mvn.w	r2, #1
 800308e:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f003 0320 	and.w	r3, r3, #32
 8003096:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800309e:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d015      	beq.n	80030d2 <HAL_ADC_IRQHandler+0x218>
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d012      	beq.n	80030d2 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030b0:	f043 0202 	orr.w	r2, r3, #2
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f06f 0220 	mvn.w	r2, #32
 80030c0:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f000 f96c 	bl	80033a0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f06f 0220 	mvn.w	r2, #32
 80030d0:	601a      	str	r2, [r3, #0]
  }
}
 80030d2:	bf00      	nop
 80030d4:	3718      	adds	r7, #24
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
	...

080030dc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b088      	sub	sp, #32
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80030e8:	2300      	movs	r3, #0
 80030ea:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030ec:	2300      	movs	r3, #0
 80030ee:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d101      	bne.n	80030fe <HAL_ADC_Start_DMA+0x22>
 80030fa:	2302      	movs	r3, #2
 80030fc:	e0d0      	b.n	80032a0 <HAL_ADC_Start_DMA+0x1c4>
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2201      	movs	r2, #1
 8003102:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f003 0301 	and.w	r3, r3, #1
 8003110:	2b01      	cmp	r3, #1
 8003112:	d018      	beq.n	8003146 <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	689a      	ldr	r2, [r3, #8]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f042 0201 	orr.w	r2, r2, #1
 8003122:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003124:	4b60      	ldr	r3, [pc, #384]	@ (80032a8 <HAL_ADC_Start_DMA+0x1cc>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a60      	ldr	r2, [pc, #384]	@ (80032ac <HAL_ADC_Start_DMA+0x1d0>)
 800312a:	fba2 2303 	umull	r2, r3, r2, r3
 800312e:	0c9a      	lsrs	r2, r3, #18
 8003130:	4613      	mov	r3, r2
 8003132:	005b      	lsls	r3, r3, #1
 8003134:	4413      	add	r3, r2
 8003136:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8003138:	e002      	b.n	8003140 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	3b01      	subs	r3, #1
 800313e:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d1f9      	bne.n	800313a <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003150:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003154:	d107      	bne.n	8003166 <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	689a      	ldr	r2, [r3, #8]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003164:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f003 0301 	and.w	r3, r3, #1
 8003170:	2b01      	cmp	r3, #1
 8003172:	f040 8088 	bne.w	8003286 <HAL_ADC_Start_DMA+0x1aa>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800317a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800317e:	f023 0301 	bic.w	r3, r3, #1
 8003182:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003194:	2b00      	cmp	r3, #0
 8003196:	d007      	beq.n	80031a8 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800319c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80031a0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031b4:	d106      	bne.n	80031c4 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ba:	f023 0206 	bic.w	r2, r3, #6
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	645a      	str	r2, [r3, #68]	@ 0x44
 80031c2:	e002      	b.n	80031ca <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2200      	movs	r2, #0
 80031c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80031d2:	4b37      	ldr	r3, [pc, #220]	@ (80032b0 <HAL_ADC_Start_DMA+0x1d4>)
 80031d4:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031da:	4a36      	ldr	r2, [pc, #216]	@ (80032b4 <HAL_ADC_Start_DMA+0x1d8>)
 80031dc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031e2:	4a35      	ldr	r2, [pc, #212]	@ (80032b8 <HAL_ADC_Start_DMA+0x1dc>)
 80031e4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031ea:	4a34      	ldr	r2, [pc, #208]	@ (80032bc <HAL_ADC_Start_DMA+0x1e0>)
 80031ec:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80031f6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	685a      	ldr	r2, [r3, #4]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8003206:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	689a      	ldr	r2, [r3, #8]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003216:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	334c      	adds	r3, #76	@ 0x4c
 8003222:	4619      	mov	r1, r3
 8003224:	68ba      	ldr	r2, [r7, #8]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f000 fd3e 	bl	8003ca8 <HAL_DMA_Start_IT>
 800322c:	4603      	mov	r3, r0
 800322e:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f003 031f 	and.w	r3, r3, #31
 8003238:	2b00      	cmp	r3, #0
 800323a:	d10f      	bne.n	800325c <HAL_ADC_Start_DMA+0x180>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d129      	bne.n	800329e <HAL_ADC_Start_DMA+0x1c2>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	689a      	ldr	r2, [r3, #8]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003258:	609a      	str	r2, [r3, #8]
 800325a:	e020      	b.n	800329e <HAL_ADC_Start_DMA+0x1c2>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a17      	ldr	r2, [pc, #92]	@ (80032c0 <HAL_ADC_Start_DMA+0x1e4>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d11b      	bne.n	800329e <HAL_ADC_Start_DMA+0x1c2>
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d114      	bne.n	800329e <HAL_ADC_Start_DMA+0x1c2>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	689a      	ldr	r2, [r3, #8]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003282:	609a      	str	r2, [r3, #8]
 8003284:	e00b      	b.n	800329e <HAL_ADC_Start_DMA+0x1c2>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800328a:	f043 0210 	orr.w	r2, r3, #16
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003296:	f043 0201 	orr.w	r2, r3, #1
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 800329e:	7ffb      	ldrb	r3, [r7, #31]
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3720      	adds	r7, #32
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	20000000 	.word	0x20000000
 80032ac:	431bde83 	.word	0x431bde83
 80032b0:	40012300 	.word	0x40012300
 80032b4:	08003811 	.word	0x08003811
 80032b8:	080038cb 	.word	0x080038cb
 80032bc:	080038e7 	.word	0x080038e7
 80032c0:	40012000 	.word	0x40012000

080032c4 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032cc:	2300      	movs	r3, #0
 80032ce:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d101      	bne.n	80032de <HAL_ADC_Stop_DMA+0x1a>
 80032da:	2302      	movs	r3, #2
 80032dc:	e048      	b.n	8003370 <HAL_ADC_Stop_DMA+0xac>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2201      	movs	r2, #1
 80032e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	689a      	ldr	r2, [r3, #8]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f022 0201 	bic.w	r2, r2, #1
 80032f4:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f003 0301 	and.w	r3, r3, #1
 8003300:	2b00      	cmp	r3, #0
 8003302:	d130      	bne.n	8003366 <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	689a      	ldr	r2, [r3, #8]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003312:	609a      	str	r2, [r3, #8]

    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003318:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800331c:	b2db      	uxtb	r3, r3
 800331e:	2b02      	cmp	r3, #2
 8003320:	d10f      	bne.n	8003342 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003326:	4618      	mov	r0, r3
 8003328:	f000 fd16 	bl	8003d58 <HAL_DMA_Abort>
 800332c:	4603      	mov	r3, r0
 800332e:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8003330:	7bfb      	ldrb	r3, [r7, #15]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d005      	beq.n	8003342 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800333a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	685a      	ldr	r2, [r3, #4]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 8003350:	605a      	str	r2, [r3, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003356:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800335a:	f023 0301 	bic.w	r3, r3, #1
 800335e:	f043 0201 	orr.w	r2, r3, #1
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800336e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003370:	4618      	mov	r0, r3
 8003372:	3710      	adds	r7, #16
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003380:	bf00      	nop
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003394:	bf00      	nop
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80033a8:	bf00      	nop
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b085      	sub	sp, #20
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80033be:	2300      	movs	r3, #0
 80033c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d101      	bne.n	80033d0 <HAL_ADC_ConfigChannel+0x1c>
 80033cc:	2302      	movs	r3, #2
 80033ce:	e113      	b.n	80035f8 <HAL_ADC_ConfigChannel+0x244>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2b09      	cmp	r3, #9
 80033de:	d925      	bls.n	800342c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	68d9      	ldr	r1, [r3, #12]
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	461a      	mov	r2, r3
 80033ee:	4613      	mov	r3, r2
 80033f0:	005b      	lsls	r3, r3, #1
 80033f2:	4413      	add	r3, r2
 80033f4:	3b1e      	subs	r3, #30
 80033f6:	2207      	movs	r2, #7
 80033f8:	fa02 f303 	lsl.w	r3, r2, r3
 80033fc:	43da      	mvns	r2, r3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	400a      	ands	r2, r1
 8003404:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68d9      	ldr	r1, [r3, #12]
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	689a      	ldr	r2, [r3, #8]
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	b29b      	uxth	r3, r3
 8003416:	4618      	mov	r0, r3
 8003418:	4603      	mov	r3, r0
 800341a:	005b      	lsls	r3, r3, #1
 800341c:	4403      	add	r3, r0
 800341e:	3b1e      	subs	r3, #30
 8003420:	409a      	lsls	r2, r3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	430a      	orrs	r2, r1
 8003428:	60da      	str	r2, [r3, #12]
 800342a:	e022      	b.n	8003472 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	6919      	ldr	r1, [r3, #16]
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	b29b      	uxth	r3, r3
 8003438:	461a      	mov	r2, r3
 800343a:	4613      	mov	r3, r2
 800343c:	005b      	lsls	r3, r3, #1
 800343e:	4413      	add	r3, r2
 8003440:	2207      	movs	r2, #7
 8003442:	fa02 f303 	lsl.w	r3, r2, r3
 8003446:	43da      	mvns	r2, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	400a      	ands	r2, r1
 800344e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	6919      	ldr	r1, [r3, #16]
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	689a      	ldr	r2, [r3, #8]
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	b29b      	uxth	r3, r3
 8003460:	4618      	mov	r0, r3
 8003462:	4603      	mov	r3, r0
 8003464:	005b      	lsls	r3, r3, #1
 8003466:	4403      	add	r3, r0
 8003468:	409a      	lsls	r2, r3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	430a      	orrs	r2, r1
 8003470:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	2b06      	cmp	r3, #6
 8003478:	d824      	bhi.n	80034c4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	685a      	ldr	r2, [r3, #4]
 8003484:	4613      	mov	r3, r2
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	4413      	add	r3, r2
 800348a:	3b05      	subs	r3, #5
 800348c:	221f      	movs	r2, #31
 800348e:	fa02 f303 	lsl.w	r3, r2, r3
 8003492:	43da      	mvns	r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	400a      	ands	r2, r1
 800349a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	4618      	mov	r0, r3
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	685a      	ldr	r2, [r3, #4]
 80034ae:	4613      	mov	r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	4413      	add	r3, r2
 80034b4:	3b05      	subs	r3, #5
 80034b6:	fa00 f203 	lsl.w	r2, r0, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	430a      	orrs	r2, r1
 80034c0:	635a      	str	r2, [r3, #52]	@ 0x34
 80034c2:	e04c      	b.n	800355e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	2b0c      	cmp	r3, #12
 80034ca:	d824      	bhi.n	8003516 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	685a      	ldr	r2, [r3, #4]
 80034d6:	4613      	mov	r3, r2
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	4413      	add	r3, r2
 80034dc:	3b23      	subs	r3, #35	@ 0x23
 80034de:	221f      	movs	r2, #31
 80034e0:	fa02 f303 	lsl.w	r3, r2, r3
 80034e4:	43da      	mvns	r2, r3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	400a      	ands	r2, r1
 80034ec:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	4618      	mov	r0, r3
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	685a      	ldr	r2, [r3, #4]
 8003500:	4613      	mov	r3, r2
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	4413      	add	r3, r2
 8003506:	3b23      	subs	r3, #35	@ 0x23
 8003508:	fa00 f203 	lsl.w	r2, r0, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	430a      	orrs	r2, r1
 8003512:	631a      	str	r2, [r3, #48]	@ 0x30
 8003514:	e023      	b.n	800355e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	685a      	ldr	r2, [r3, #4]
 8003520:	4613      	mov	r3, r2
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	4413      	add	r3, r2
 8003526:	3b41      	subs	r3, #65	@ 0x41
 8003528:	221f      	movs	r2, #31
 800352a:	fa02 f303 	lsl.w	r3, r2, r3
 800352e:	43da      	mvns	r2, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	400a      	ands	r2, r1
 8003536:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	b29b      	uxth	r3, r3
 8003544:	4618      	mov	r0, r3
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	685a      	ldr	r2, [r3, #4]
 800354a:	4613      	mov	r3, r2
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	4413      	add	r3, r2
 8003550:	3b41      	subs	r3, #65	@ 0x41
 8003552:	fa00 f203 	lsl.w	r2, r0, r3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	430a      	orrs	r2, r1
 800355c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800355e:	4b29      	ldr	r3, [pc, #164]	@ (8003604 <HAL_ADC_ConfigChannel+0x250>)
 8003560:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a28      	ldr	r2, [pc, #160]	@ (8003608 <HAL_ADC_ConfigChannel+0x254>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d10f      	bne.n	800358c <HAL_ADC_ConfigChannel+0x1d8>
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2b12      	cmp	r3, #18
 8003572:	d10b      	bne.n	800358c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a1d      	ldr	r2, [pc, #116]	@ (8003608 <HAL_ADC_ConfigChannel+0x254>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d12b      	bne.n	80035ee <HAL_ADC_ConfigChannel+0x23a>
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a1c      	ldr	r2, [pc, #112]	@ (800360c <HAL_ADC_ConfigChannel+0x258>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d003      	beq.n	80035a8 <HAL_ADC_ConfigChannel+0x1f4>
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2b11      	cmp	r3, #17
 80035a6:	d122      	bne.n	80035ee <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a11      	ldr	r2, [pc, #68]	@ (800360c <HAL_ADC_ConfigChannel+0x258>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d111      	bne.n	80035ee <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80035ca:	4b11      	ldr	r3, [pc, #68]	@ (8003610 <HAL_ADC_ConfigChannel+0x25c>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a11      	ldr	r2, [pc, #68]	@ (8003614 <HAL_ADC_ConfigChannel+0x260>)
 80035d0:	fba2 2303 	umull	r2, r3, r2, r3
 80035d4:	0c9a      	lsrs	r2, r3, #18
 80035d6:	4613      	mov	r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	4413      	add	r3, r2
 80035dc:	005b      	lsls	r3, r3, #1
 80035de:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80035e0:	e002      	b.n	80035e8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	3b01      	subs	r3, #1
 80035e6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d1f9      	bne.n	80035e2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80035f6:	2300      	movs	r3, #0
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3714      	adds	r7, #20
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr
 8003604:	40012300 	.word	0x40012300
 8003608:	40012000 	.word	0x40012000
 800360c:	10000012 	.word	0x10000012
 8003610:	20000000 	.word	0x20000000
 8003614:	431bde83 	.word	0x431bde83

08003618 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003618:	b480      	push	{r7}
 800361a:	b085      	sub	sp, #20
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003620:	4b79      	ldr	r3, [pc, #484]	@ (8003808 <ADC_Init+0x1f0>)
 8003622:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	685a      	ldr	r2, [r3, #4]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	431a      	orrs	r2, r3
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	685a      	ldr	r2, [r3, #4]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800364c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	6859      	ldr	r1, [r3, #4]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	691b      	ldr	r3, [r3, #16]
 8003658:	021a      	lsls	r2, r3, #8
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	430a      	orrs	r2, r1
 8003660:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	685a      	ldr	r2, [r3, #4]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003670:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	6859      	ldr	r1, [r3, #4]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	689a      	ldr	r2, [r3, #8]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	430a      	orrs	r2, r1
 8003682:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	689a      	ldr	r2, [r3, #8]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003692:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	6899      	ldr	r1, [r3, #8]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	68da      	ldr	r2, [r3, #12]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	430a      	orrs	r2, r1
 80036a4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036aa:	4a58      	ldr	r2, [pc, #352]	@ (800380c <ADC_Init+0x1f4>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d022      	beq.n	80036f6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	689a      	ldr	r2, [r3, #8]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80036be:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	6899      	ldr	r1, [r3, #8]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	430a      	orrs	r2, r1
 80036d0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	689a      	ldr	r2, [r3, #8]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80036e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	6899      	ldr	r1, [r3, #8]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	430a      	orrs	r2, r1
 80036f2:	609a      	str	r2, [r3, #8]
 80036f4:	e00f      	b.n	8003716 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	689a      	ldr	r2, [r3, #8]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003704:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	689a      	ldr	r2, [r3, #8]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003714:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	689a      	ldr	r2, [r3, #8]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f022 0202 	bic.w	r2, r2, #2
 8003724:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	6899      	ldr	r1, [r3, #8]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	7e1b      	ldrb	r3, [r3, #24]
 8003730:	005a      	lsls	r2, r3, #1
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	430a      	orrs	r2, r1
 8003738:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d01b      	beq.n	800377c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	685a      	ldr	r2, [r3, #4]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003752:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	685a      	ldr	r2, [r3, #4]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003762:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	6859      	ldr	r1, [r3, #4]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800376e:	3b01      	subs	r3, #1
 8003770:	035a      	lsls	r2, r3, #13
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	430a      	orrs	r2, r1
 8003778:	605a      	str	r2, [r3, #4]
 800377a:	e007      	b.n	800378c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	685a      	ldr	r2, [r3, #4]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800378a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800379a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	69db      	ldr	r3, [r3, #28]
 80037a6:	3b01      	subs	r3, #1
 80037a8:	051a      	lsls	r2, r3, #20
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	430a      	orrs	r2, r1
 80037b0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	689a      	ldr	r2, [r3, #8]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80037c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	6899      	ldr	r1, [r3, #8]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80037ce:	025a      	lsls	r2, r3, #9
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	430a      	orrs	r2, r1
 80037d6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	689a      	ldr	r2, [r3, #8]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	6899      	ldr	r1, [r3, #8]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	695b      	ldr	r3, [r3, #20]
 80037f2:	029a      	lsls	r2, r3, #10
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	430a      	orrs	r2, r1
 80037fa:	609a      	str	r2, [r3, #8]
}
 80037fc:	bf00      	nop
 80037fe:	3714      	adds	r7, #20
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr
 8003808:	40012300 	.word	0x40012300
 800380c:	0f000001 	.word	0x0f000001

08003810 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800381c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003822:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003826:	2b00      	cmp	r3, #0
 8003828:	d13c      	bne.n	80038a4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800382e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d12b      	bne.n	800389c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003848:	2b00      	cmp	r3, #0
 800384a:	d127      	bne.n	800389c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003852:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003856:	2b00      	cmp	r3, #0
 8003858:	d006      	beq.n	8003868 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003864:	2b00      	cmp	r3, #0
 8003866:	d119      	bne.n	800389c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	685a      	ldr	r2, [r3, #4]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f022 0220 	bic.w	r2, r2, #32
 8003876:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800387c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003888:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d105      	bne.n	800389c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003894:	f043 0201 	orr.w	r2, r3, #1
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800389c:	68f8      	ldr	r0, [r7, #12]
 800389e:	f7fd fd27 	bl	80012f0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80038a2:	e00e      	b.n	80038c2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038a8:	f003 0310 	and.w	r3, r3, #16
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d003      	beq.n	80038b8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80038b0:	68f8      	ldr	r0, [r7, #12]
 80038b2:	f7ff fd75 	bl	80033a0 <HAL_ADC_ErrorCallback>
}
 80038b6:	e004      	b.n	80038c2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	4798      	blx	r3
}
 80038c2:	bf00      	nop
 80038c4:	3710      	adds	r7, #16
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}

080038ca <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80038ca:	b580      	push	{r7, lr}
 80038cc:	b084      	sub	sp, #16
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038d6:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80038d8:	68f8      	ldr	r0, [r7, #12]
 80038da:	f7ff fd4d 	bl	8003378 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80038de:	bf00      	nop
 80038e0:	3710      	adds	r7, #16
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}

080038e6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80038e6:	b580      	push	{r7, lr}
 80038e8:	b084      	sub	sp, #16
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038f2:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2240      	movs	r2, #64	@ 0x40
 80038f8:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038fe:	f043 0204 	orr.w	r2, r3, #4
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003906:	68f8      	ldr	r0, [r7, #12]
 8003908:	f7ff fd4a 	bl	80033a0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800390c:	bf00      	nop
 800390e:	3710      	adds	r7, #16
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800391c:	bf00      	nop
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003928:	b480      	push	{r7}
 800392a:	b085      	sub	sp, #20
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f003 0307 	and.w	r3, r3, #7
 8003936:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003938:	4b0c      	ldr	r3, [pc, #48]	@ (800396c <__NVIC_SetPriorityGrouping+0x44>)
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800393e:	68ba      	ldr	r2, [r7, #8]
 8003940:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003944:	4013      	ands	r3, r2
 8003946:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003950:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003954:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003958:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800395a:	4a04      	ldr	r2, [pc, #16]	@ (800396c <__NVIC_SetPriorityGrouping+0x44>)
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	60d3      	str	r3, [r2, #12]
}
 8003960:	bf00      	nop
 8003962:	3714      	adds	r7, #20
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr
 800396c:	e000ed00 	.word	0xe000ed00

08003970 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003970:	b480      	push	{r7}
 8003972:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003974:	4b04      	ldr	r3, [pc, #16]	@ (8003988 <__NVIC_GetPriorityGrouping+0x18>)
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	0a1b      	lsrs	r3, r3, #8
 800397a:	f003 0307 	and.w	r3, r3, #7
}
 800397e:	4618      	mov	r0, r3
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr
 8003988:	e000ed00 	.word	0xe000ed00

0800398c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	4603      	mov	r3, r0
 8003994:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800399a:	2b00      	cmp	r3, #0
 800399c:	db0b      	blt.n	80039b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800399e:	79fb      	ldrb	r3, [r7, #7]
 80039a0:	f003 021f 	and.w	r2, r3, #31
 80039a4:	4907      	ldr	r1, [pc, #28]	@ (80039c4 <__NVIC_EnableIRQ+0x38>)
 80039a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039aa:	095b      	lsrs	r3, r3, #5
 80039ac:	2001      	movs	r0, #1
 80039ae:	fa00 f202 	lsl.w	r2, r0, r2
 80039b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80039b6:	bf00      	nop
 80039b8:	370c      	adds	r7, #12
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr
 80039c2:	bf00      	nop
 80039c4:	e000e100 	.word	0xe000e100

080039c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	4603      	mov	r3, r0
 80039d0:	6039      	str	r1, [r7, #0]
 80039d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	db0a      	blt.n	80039f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	b2da      	uxtb	r2, r3
 80039e0:	490c      	ldr	r1, [pc, #48]	@ (8003a14 <__NVIC_SetPriority+0x4c>)
 80039e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039e6:	0112      	lsls	r2, r2, #4
 80039e8:	b2d2      	uxtb	r2, r2
 80039ea:	440b      	add	r3, r1
 80039ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039f0:	e00a      	b.n	8003a08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	b2da      	uxtb	r2, r3
 80039f6:	4908      	ldr	r1, [pc, #32]	@ (8003a18 <__NVIC_SetPriority+0x50>)
 80039f8:	79fb      	ldrb	r3, [r7, #7]
 80039fa:	f003 030f 	and.w	r3, r3, #15
 80039fe:	3b04      	subs	r3, #4
 8003a00:	0112      	lsls	r2, r2, #4
 8003a02:	b2d2      	uxtb	r2, r2
 8003a04:	440b      	add	r3, r1
 8003a06:	761a      	strb	r2, [r3, #24]
}
 8003a08:	bf00      	nop
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr
 8003a14:	e000e100 	.word	0xe000e100
 8003a18:	e000ed00 	.word	0xe000ed00

08003a1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b089      	sub	sp, #36	@ 0x24
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f003 0307 	and.w	r3, r3, #7
 8003a2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	f1c3 0307 	rsb	r3, r3, #7
 8003a36:	2b04      	cmp	r3, #4
 8003a38:	bf28      	it	cs
 8003a3a:	2304      	movcs	r3, #4
 8003a3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	3304      	adds	r3, #4
 8003a42:	2b06      	cmp	r3, #6
 8003a44:	d902      	bls.n	8003a4c <NVIC_EncodePriority+0x30>
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	3b03      	subs	r3, #3
 8003a4a:	e000      	b.n	8003a4e <NVIC_EncodePriority+0x32>
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a50:	f04f 32ff 	mov.w	r2, #4294967295
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5a:	43da      	mvns	r2, r3
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	401a      	ands	r2, r3
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a64:	f04f 31ff 	mov.w	r1, #4294967295
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a6e:	43d9      	mvns	r1, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a74:	4313      	orrs	r3, r2
         );
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3724      	adds	r7, #36	@ 0x24
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
	...

08003a84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	3b01      	subs	r3, #1
 8003a90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a94:	d301      	bcc.n	8003a9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a96:	2301      	movs	r3, #1
 8003a98:	e00f      	b.n	8003aba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a9a:	4a0a      	ldr	r2, [pc, #40]	@ (8003ac4 <SysTick_Config+0x40>)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003aa2:	210f      	movs	r1, #15
 8003aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8003aa8:	f7ff ff8e 	bl	80039c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003aac:	4b05      	ldr	r3, [pc, #20]	@ (8003ac4 <SysTick_Config+0x40>)
 8003aae:	2200      	movs	r2, #0
 8003ab0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ab2:	4b04      	ldr	r3, [pc, #16]	@ (8003ac4 <SysTick_Config+0x40>)
 8003ab4:	2207      	movs	r2, #7
 8003ab6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3708      	adds	r7, #8
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	e000e010 	.word	0xe000e010

08003ac8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f7ff ff29 	bl	8003928 <__NVIC_SetPriorityGrouping>
}
 8003ad6:	bf00      	nop
 8003ad8:	3708      	adds	r7, #8
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}

08003ade <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	b086      	sub	sp, #24
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	60b9      	str	r1, [r7, #8]
 8003ae8:	607a      	str	r2, [r7, #4]
 8003aea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003aec:	2300      	movs	r3, #0
 8003aee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003af0:	f7ff ff3e 	bl	8003970 <__NVIC_GetPriorityGrouping>
 8003af4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	68b9      	ldr	r1, [r7, #8]
 8003afa:	6978      	ldr	r0, [r7, #20]
 8003afc:	f7ff ff8e 	bl	8003a1c <NVIC_EncodePriority>
 8003b00:	4602      	mov	r2, r0
 8003b02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b06:	4611      	mov	r1, r2
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f7ff ff5d 	bl	80039c8 <__NVIC_SetPriority>
}
 8003b0e:	bf00      	nop
 8003b10:	3718      	adds	r7, #24
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}

08003b16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b16:	b580      	push	{r7, lr}
 8003b18:	b082      	sub	sp, #8
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b24:	4618      	mov	r0, r3
 8003b26:	f7ff ff31 	bl	800398c <__NVIC_EnableIRQ>
}
 8003b2a:	bf00      	nop
 8003b2c:	3708      	adds	r7, #8
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}

08003b32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b32:	b580      	push	{r7, lr}
 8003b34:	b082      	sub	sp, #8
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f7ff ffa2 	bl	8003a84 <SysTick_Config>
 8003b40:	4603      	mov	r3, r0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3708      	adds	r7, #8
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
	...

08003b4c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b086      	sub	sp, #24
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003b54:	2300      	movs	r3, #0
 8003b56:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003b58:	f7ff f93c 	bl	8002dd4 <HAL_GetTick>
 8003b5c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d101      	bne.n	8003b68 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e099      	b.n	8003c9c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2202      	movs	r2, #2
 8003b6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f022 0201 	bic.w	r2, r2, #1
 8003b86:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b88:	e00f      	b.n	8003baa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b8a:	f7ff f923 	bl	8002dd4 <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	2b05      	cmp	r3, #5
 8003b96:	d908      	bls.n	8003baa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2220      	movs	r2, #32
 8003b9c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2203      	movs	r2, #3
 8003ba2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e078      	b.n	8003c9c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0301 	and.w	r3, r3, #1
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d1e8      	bne.n	8003b8a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003bc0:	697a      	ldr	r2, [r7, #20]
 8003bc2:	4b38      	ldr	r3, [pc, #224]	@ (8003ca4 <HAL_DMA_Init+0x158>)
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685a      	ldr	r2, [r3, #4]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003bd6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	691b      	ldr	r3, [r3, #16]
 8003bdc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003be2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	699b      	ldr	r3, [r3, #24]
 8003be8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a1b      	ldr	r3, [r3, #32]
 8003bf4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003bf6:	697a      	ldr	r2, [r7, #20]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c00:	2b04      	cmp	r3, #4
 8003c02:	d107      	bne.n	8003c14 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	697a      	ldr	r2, [r7, #20]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	697a      	ldr	r2, [r7, #20]
 8003c1a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	695b      	ldr	r3, [r3, #20]
 8003c22:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	f023 0307 	bic.w	r3, r3, #7
 8003c2a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c30:	697a      	ldr	r2, [r7, #20]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c3a:	2b04      	cmp	r3, #4
 8003c3c:	d117      	bne.n	8003c6e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c42:	697a      	ldr	r2, [r7, #20]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d00e      	beq.n	8003c6e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f000 fadf 	bl	8004214 <DMA_CheckFifoParam>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d008      	beq.n	8003c6e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2240      	movs	r2, #64	@ 0x40
 8003c60:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2201      	movs	r2, #1
 8003c66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e016      	b.n	8003c9c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	697a      	ldr	r2, [r7, #20]
 8003c74:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f000 fa96 	bl	80041a8 <DMA_CalcBaseAndBitshift>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c84:	223f      	movs	r2, #63	@ 0x3f
 8003c86:	409a      	lsls	r2, r3
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2201      	movs	r2, #1
 8003c96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003c9a:	2300      	movs	r3, #0
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3718      	adds	r7, #24
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	f010803f 	.word	0xf010803f

08003ca8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b086      	sub	sp, #24
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	60b9      	str	r1, [r7, #8]
 8003cb2:	607a      	str	r2, [r7, #4]
 8003cb4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cbe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d101      	bne.n	8003cce <HAL_DMA_Start_IT+0x26>
 8003cca:	2302      	movs	r3, #2
 8003ccc:	e040      	b.n	8003d50 <HAL_DMA_Start_IT+0xa8>
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d12f      	bne.n	8003d42 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2202      	movs	r2, #2
 8003ce6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2200      	movs	r2, #0
 8003cee:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	68b9      	ldr	r1, [r7, #8]
 8003cf6:	68f8      	ldr	r0, [r7, #12]
 8003cf8:	f000 fa28 	bl	800414c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d00:	223f      	movs	r2, #63	@ 0x3f
 8003d02:	409a      	lsls	r2, r3
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f042 0216 	orr.w	r2, r2, #22
 8003d16:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d007      	beq.n	8003d30 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f042 0208 	orr.w	r2, r2, #8
 8003d2e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f042 0201 	orr.w	r2, r2, #1
 8003d3e:	601a      	str	r2, [r3, #0]
 8003d40:	e005      	b.n	8003d4e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003d4a:	2302      	movs	r3, #2
 8003d4c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003d4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3718      	adds	r7, #24
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d64:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003d66:	f7ff f835 	bl	8002dd4 <HAL_GetTick>
 8003d6a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d008      	beq.n	8003d8a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2280      	movs	r2, #128	@ 0x80
 8003d7c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e052      	b.n	8003e30 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f022 0216 	bic.w	r2, r2, #22
 8003d98:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	695a      	ldr	r2, [r3, #20]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003da8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d103      	bne.n	8003dba <HAL_DMA_Abort+0x62>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d007      	beq.n	8003dca <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f022 0208 	bic.w	r2, r2, #8
 8003dc8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f022 0201 	bic.w	r2, r2, #1
 8003dd8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003dda:	e013      	b.n	8003e04 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ddc:	f7fe fffa 	bl	8002dd4 <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	2b05      	cmp	r3, #5
 8003de8:	d90c      	bls.n	8003e04 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2220      	movs	r2, #32
 8003dee:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2203      	movs	r2, #3
 8003df4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e015      	b.n	8003e30 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0301 	and.w	r3, r3, #1
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d1e4      	bne.n	8003ddc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e16:	223f      	movs	r2, #63	@ 0x3f
 8003e18:	409a      	lsls	r2, r3
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2201      	movs	r2, #1
 8003e22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3710      	adds	r7, #16
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}

08003e38 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b086      	sub	sp, #24
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003e40:	2300      	movs	r3, #0
 8003e42:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003e44:	4b8e      	ldr	r3, [pc, #568]	@ (8004080 <HAL_DMA_IRQHandler+0x248>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a8e      	ldr	r2, [pc, #568]	@ (8004084 <HAL_DMA_IRQHandler+0x24c>)
 8003e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e4e:	0a9b      	lsrs	r3, r3, #10
 8003e50:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e56:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e62:	2208      	movs	r2, #8
 8003e64:	409a      	lsls	r2, r3
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	4013      	ands	r3, r2
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d01a      	beq.n	8003ea4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0304 	and.w	r3, r3, #4
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d013      	beq.n	8003ea4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f022 0204 	bic.w	r2, r2, #4
 8003e8a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e90:	2208      	movs	r2, #8
 8003e92:	409a      	lsls	r2, r3
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e9c:	f043 0201 	orr.w	r2, r3, #1
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	409a      	lsls	r2, r3
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	4013      	ands	r3, r2
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d012      	beq.n	8003eda <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	695b      	ldr	r3, [r3, #20]
 8003eba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00b      	beq.n	8003eda <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	409a      	lsls	r2, r3
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ed2:	f043 0202 	orr.w	r2, r3, #2
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ede:	2204      	movs	r2, #4
 8003ee0:	409a      	lsls	r2, r3
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d012      	beq.n	8003f10 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0302 	and.w	r3, r3, #2
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d00b      	beq.n	8003f10 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003efc:	2204      	movs	r2, #4
 8003efe:	409a      	lsls	r2, r3
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f08:	f043 0204 	orr.w	r2, r3, #4
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f14:	2210      	movs	r2, #16
 8003f16:	409a      	lsls	r2, r3
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d043      	beq.n	8003fa8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0308 	and.w	r3, r3, #8
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d03c      	beq.n	8003fa8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f32:	2210      	movs	r2, #16
 8003f34:	409a      	lsls	r2, r3
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d018      	beq.n	8003f7a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d108      	bne.n	8003f68 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d024      	beq.n	8003fa8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	4798      	blx	r3
 8003f66:	e01f      	b.n	8003fa8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d01b      	beq.n	8003fa8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	4798      	blx	r3
 8003f78:	e016      	b.n	8003fa8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d107      	bne.n	8003f98 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f022 0208 	bic.w	r2, r2, #8
 8003f96:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d003      	beq.n	8003fa8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fac:	2220      	movs	r2, #32
 8003fae:	409a      	lsls	r2, r3
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	f000 808f 	beq.w	80040d8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0310 	and.w	r3, r3, #16
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	f000 8087 	beq.w	80040d8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fce:	2220      	movs	r2, #32
 8003fd0:	409a      	lsls	r2, r3
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	2b05      	cmp	r3, #5
 8003fe0:	d136      	bne.n	8004050 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f022 0216 	bic.w	r2, r2, #22
 8003ff0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	695a      	ldr	r2, [r3, #20]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004000:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004006:	2b00      	cmp	r3, #0
 8004008:	d103      	bne.n	8004012 <HAL_DMA_IRQHandler+0x1da>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800400e:	2b00      	cmp	r3, #0
 8004010:	d007      	beq.n	8004022 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f022 0208 	bic.w	r2, r2, #8
 8004020:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004026:	223f      	movs	r2, #63	@ 0x3f
 8004028:	409a      	lsls	r2, r3
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2201      	movs	r2, #1
 8004032:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004042:	2b00      	cmp	r3, #0
 8004044:	d07e      	beq.n	8004144 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	4798      	blx	r3
        }
        return;
 800404e:	e079      	b.n	8004144 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d01d      	beq.n	800409a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d10d      	bne.n	8004088 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004070:	2b00      	cmp	r3, #0
 8004072:	d031      	beq.n	80040d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	4798      	blx	r3
 800407c:	e02c      	b.n	80040d8 <HAL_DMA_IRQHandler+0x2a0>
 800407e:	bf00      	nop
 8004080:	20000000 	.word	0x20000000
 8004084:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800408c:	2b00      	cmp	r3, #0
 800408e:	d023      	beq.n	80040d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	4798      	blx	r3
 8004098:	e01e      	b.n	80040d8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d10f      	bne.n	80040c8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f022 0210 	bic.w	r2, r2, #16
 80040b6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d003      	beq.n	80040d8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d032      	beq.n	8004146 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040e4:	f003 0301 	and.w	r3, r3, #1
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d022      	beq.n	8004132 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2205      	movs	r2, #5
 80040f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f022 0201 	bic.w	r2, r2, #1
 8004102:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	3301      	adds	r3, #1
 8004108:	60bb      	str	r3, [r7, #8]
 800410a:	697a      	ldr	r2, [r7, #20]
 800410c:	429a      	cmp	r2, r3
 800410e:	d307      	bcc.n	8004120 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0301 	and.w	r3, r3, #1
 800411a:	2b00      	cmp	r3, #0
 800411c:	d1f2      	bne.n	8004104 <HAL_DMA_IRQHandler+0x2cc>
 800411e:	e000      	b.n	8004122 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004120:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2201      	movs	r2, #1
 8004126:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004136:	2b00      	cmp	r3, #0
 8004138:	d005      	beq.n	8004146 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	4798      	blx	r3
 8004142:	e000      	b.n	8004146 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004144:	bf00      	nop
    }
  }
}
 8004146:	3718      	adds	r7, #24
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800414c:	b480      	push	{r7}
 800414e:	b085      	sub	sp, #20
 8004150:	af00      	add	r7, sp, #0
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	60b9      	str	r1, [r7, #8]
 8004156:	607a      	str	r2, [r7, #4]
 8004158:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004168:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	683a      	ldr	r2, [r7, #0]
 8004170:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	2b40      	cmp	r3, #64	@ 0x40
 8004178:	d108      	bne.n	800418c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68ba      	ldr	r2, [r7, #8]
 8004188:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800418a:	e007      	b.n	800419c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68ba      	ldr	r2, [r7, #8]
 8004192:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	60da      	str	r2, [r3, #12]
}
 800419c:	bf00      	nop
 800419e:	3714      	adds	r7, #20
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b085      	sub	sp, #20
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	3b10      	subs	r3, #16
 80041b8:	4a14      	ldr	r2, [pc, #80]	@ (800420c <DMA_CalcBaseAndBitshift+0x64>)
 80041ba:	fba2 2303 	umull	r2, r3, r2, r3
 80041be:	091b      	lsrs	r3, r3, #4
 80041c0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80041c2:	4a13      	ldr	r2, [pc, #76]	@ (8004210 <DMA_CalcBaseAndBitshift+0x68>)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	4413      	add	r3, r2
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	461a      	mov	r2, r3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2b03      	cmp	r3, #3
 80041d4:	d909      	bls.n	80041ea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80041de:	f023 0303 	bic.w	r3, r3, #3
 80041e2:	1d1a      	adds	r2, r3, #4
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	659a      	str	r2, [r3, #88]	@ 0x58
 80041e8:	e007      	b.n	80041fa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80041f2:	f023 0303 	bic.w	r3, r3, #3
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3714      	adds	r7, #20
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	aaaaaaab 	.word	0xaaaaaaab
 8004210:	08009c0c 	.word	0x08009c0c

08004214 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004214:	b480      	push	{r7}
 8004216:	b085      	sub	sp, #20
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800421c:	2300      	movs	r3, #0
 800421e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004224:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	699b      	ldr	r3, [r3, #24]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d11f      	bne.n	800426e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	2b03      	cmp	r3, #3
 8004232:	d856      	bhi.n	80042e2 <DMA_CheckFifoParam+0xce>
 8004234:	a201      	add	r2, pc, #4	@ (adr r2, 800423c <DMA_CheckFifoParam+0x28>)
 8004236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800423a:	bf00      	nop
 800423c:	0800424d 	.word	0x0800424d
 8004240:	0800425f 	.word	0x0800425f
 8004244:	0800424d 	.word	0x0800424d
 8004248:	080042e3 	.word	0x080042e3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004250:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d046      	beq.n	80042e6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800425c:	e043      	b.n	80042e6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004262:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004266:	d140      	bne.n	80042ea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800426c:	e03d      	b.n	80042ea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	699b      	ldr	r3, [r3, #24]
 8004272:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004276:	d121      	bne.n	80042bc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	2b03      	cmp	r3, #3
 800427c:	d837      	bhi.n	80042ee <DMA_CheckFifoParam+0xda>
 800427e:	a201      	add	r2, pc, #4	@ (adr r2, 8004284 <DMA_CheckFifoParam+0x70>)
 8004280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004284:	08004295 	.word	0x08004295
 8004288:	0800429b 	.word	0x0800429b
 800428c:	08004295 	.word	0x08004295
 8004290:	080042ad 	.word	0x080042ad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	73fb      	strb	r3, [r7, #15]
      break;
 8004298:	e030      	b.n	80042fc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800429e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d025      	beq.n	80042f2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042aa:	e022      	b.n	80042f2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042b0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80042b4:	d11f      	bne.n	80042f6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80042ba:	e01c      	b.n	80042f6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d903      	bls.n	80042ca <DMA_CheckFifoParam+0xb6>
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	2b03      	cmp	r3, #3
 80042c6:	d003      	beq.n	80042d0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80042c8:	e018      	b.n	80042fc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	73fb      	strb	r3, [r7, #15]
      break;
 80042ce:	e015      	b.n	80042fc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d00e      	beq.n	80042fa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	73fb      	strb	r3, [r7, #15]
      break;
 80042e0:	e00b      	b.n	80042fa <DMA_CheckFifoParam+0xe6>
      break;
 80042e2:	bf00      	nop
 80042e4:	e00a      	b.n	80042fc <DMA_CheckFifoParam+0xe8>
      break;
 80042e6:	bf00      	nop
 80042e8:	e008      	b.n	80042fc <DMA_CheckFifoParam+0xe8>
      break;
 80042ea:	bf00      	nop
 80042ec:	e006      	b.n	80042fc <DMA_CheckFifoParam+0xe8>
      break;
 80042ee:	bf00      	nop
 80042f0:	e004      	b.n	80042fc <DMA_CheckFifoParam+0xe8>
      break;
 80042f2:	bf00      	nop
 80042f4:	e002      	b.n	80042fc <DMA_CheckFifoParam+0xe8>
      break;   
 80042f6:	bf00      	nop
 80042f8:	e000      	b.n	80042fc <DMA_CheckFifoParam+0xe8>
      break;
 80042fa:	bf00      	nop
    }
  } 
  
  return status; 
 80042fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3714      	adds	r7, #20
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop

0800430c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800430c:	b480      	push	{r7}
 800430e:	b089      	sub	sp, #36	@ 0x24
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004316:	2300      	movs	r3, #0
 8004318:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800431a:	2300      	movs	r3, #0
 800431c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800431e:	2300      	movs	r3, #0
 8004320:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004322:	2300      	movs	r3, #0
 8004324:	61fb      	str	r3, [r7, #28]
 8004326:	e159      	b.n	80045dc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004328:	2201      	movs	r2, #1
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	fa02 f303 	lsl.w	r3, r2, r3
 8004330:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	697a      	ldr	r2, [r7, #20]
 8004338:	4013      	ands	r3, r2
 800433a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800433c:	693a      	ldr	r2, [r7, #16]
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	429a      	cmp	r2, r3
 8004342:	f040 8148 	bne.w	80045d6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	f003 0303 	and.w	r3, r3, #3
 800434e:	2b01      	cmp	r3, #1
 8004350:	d005      	beq.n	800435e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800435a:	2b02      	cmp	r3, #2
 800435c:	d130      	bne.n	80043c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	005b      	lsls	r3, r3, #1
 8004368:	2203      	movs	r2, #3
 800436a:	fa02 f303 	lsl.w	r3, r2, r3
 800436e:	43db      	mvns	r3, r3
 8004370:	69ba      	ldr	r2, [r7, #24]
 8004372:	4013      	ands	r3, r2
 8004374:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	68da      	ldr	r2, [r3, #12]
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	005b      	lsls	r3, r3, #1
 800437e:	fa02 f303 	lsl.w	r3, r2, r3
 8004382:	69ba      	ldr	r2, [r7, #24]
 8004384:	4313      	orrs	r3, r2
 8004386:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	69ba      	ldr	r2, [r7, #24]
 800438c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004394:	2201      	movs	r2, #1
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	fa02 f303 	lsl.w	r3, r2, r3
 800439c:	43db      	mvns	r3, r3
 800439e:	69ba      	ldr	r2, [r7, #24]
 80043a0:	4013      	ands	r3, r2
 80043a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	091b      	lsrs	r3, r3, #4
 80043aa:	f003 0201 	and.w	r2, r3, #1
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	fa02 f303 	lsl.w	r3, r2, r3
 80043b4:	69ba      	ldr	r2, [r7, #24]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	69ba      	ldr	r2, [r7, #24]
 80043be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	f003 0303 	and.w	r3, r3, #3
 80043c8:	2b03      	cmp	r3, #3
 80043ca:	d017      	beq.n	80043fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	005b      	lsls	r3, r3, #1
 80043d6:	2203      	movs	r2, #3
 80043d8:	fa02 f303 	lsl.w	r3, r2, r3
 80043dc:	43db      	mvns	r3, r3
 80043de:	69ba      	ldr	r2, [r7, #24]
 80043e0:	4013      	ands	r3, r2
 80043e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	689a      	ldr	r2, [r3, #8]
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	005b      	lsls	r3, r3, #1
 80043ec:	fa02 f303 	lsl.w	r3, r2, r3
 80043f0:	69ba      	ldr	r2, [r7, #24]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	69ba      	ldr	r2, [r7, #24]
 80043fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	f003 0303 	and.w	r3, r3, #3
 8004404:	2b02      	cmp	r3, #2
 8004406:	d123      	bne.n	8004450 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	08da      	lsrs	r2, r3, #3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	3208      	adds	r2, #8
 8004410:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004414:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	f003 0307 	and.w	r3, r3, #7
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	220f      	movs	r2, #15
 8004420:	fa02 f303 	lsl.w	r3, r2, r3
 8004424:	43db      	mvns	r3, r3
 8004426:	69ba      	ldr	r2, [r7, #24]
 8004428:	4013      	ands	r3, r2
 800442a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	691a      	ldr	r2, [r3, #16]
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	f003 0307 	and.w	r3, r3, #7
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	fa02 f303 	lsl.w	r3, r2, r3
 800443c:	69ba      	ldr	r2, [r7, #24]
 800443e:	4313      	orrs	r3, r2
 8004440:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	08da      	lsrs	r2, r3, #3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	3208      	adds	r2, #8
 800444a:	69b9      	ldr	r1, [r7, #24]
 800444c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	005b      	lsls	r3, r3, #1
 800445a:	2203      	movs	r2, #3
 800445c:	fa02 f303 	lsl.w	r3, r2, r3
 8004460:	43db      	mvns	r3, r3
 8004462:	69ba      	ldr	r2, [r7, #24]
 8004464:	4013      	ands	r3, r2
 8004466:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f003 0203 	and.w	r2, r3, #3
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	005b      	lsls	r3, r3, #1
 8004474:	fa02 f303 	lsl.w	r3, r2, r3
 8004478:	69ba      	ldr	r2, [r7, #24]
 800447a:	4313      	orrs	r3, r2
 800447c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	69ba      	ldr	r2, [r7, #24]
 8004482:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800448c:	2b00      	cmp	r3, #0
 800448e:	f000 80a2 	beq.w	80045d6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004492:	2300      	movs	r3, #0
 8004494:	60fb      	str	r3, [r7, #12]
 8004496:	4b57      	ldr	r3, [pc, #348]	@ (80045f4 <HAL_GPIO_Init+0x2e8>)
 8004498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800449a:	4a56      	ldr	r2, [pc, #344]	@ (80045f4 <HAL_GPIO_Init+0x2e8>)
 800449c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80044a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80044a2:	4b54      	ldr	r3, [pc, #336]	@ (80045f4 <HAL_GPIO_Init+0x2e8>)
 80044a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80044aa:	60fb      	str	r3, [r7, #12]
 80044ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80044ae:	4a52      	ldr	r2, [pc, #328]	@ (80045f8 <HAL_GPIO_Init+0x2ec>)
 80044b0:	69fb      	ldr	r3, [r7, #28]
 80044b2:	089b      	lsrs	r3, r3, #2
 80044b4:	3302      	adds	r3, #2
 80044b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	f003 0303 	and.w	r3, r3, #3
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	220f      	movs	r2, #15
 80044c6:	fa02 f303 	lsl.w	r3, r2, r3
 80044ca:	43db      	mvns	r3, r3
 80044cc:	69ba      	ldr	r2, [r7, #24]
 80044ce:	4013      	ands	r3, r2
 80044d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a49      	ldr	r2, [pc, #292]	@ (80045fc <HAL_GPIO_Init+0x2f0>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d019      	beq.n	800450e <HAL_GPIO_Init+0x202>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a48      	ldr	r2, [pc, #288]	@ (8004600 <HAL_GPIO_Init+0x2f4>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d013      	beq.n	800450a <HAL_GPIO_Init+0x1fe>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a47      	ldr	r2, [pc, #284]	@ (8004604 <HAL_GPIO_Init+0x2f8>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d00d      	beq.n	8004506 <HAL_GPIO_Init+0x1fa>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a46      	ldr	r2, [pc, #280]	@ (8004608 <HAL_GPIO_Init+0x2fc>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d007      	beq.n	8004502 <HAL_GPIO_Init+0x1f6>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a45      	ldr	r2, [pc, #276]	@ (800460c <HAL_GPIO_Init+0x300>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d101      	bne.n	80044fe <HAL_GPIO_Init+0x1f2>
 80044fa:	2304      	movs	r3, #4
 80044fc:	e008      	b.n	8004510 <HAL_GPIO_Init+0x204>
 80044fe:	2307      	movs	r3, #7
 8004500:	e006      	b.n	8004510 <HAL_GPIO_Init+0x204>
 8004502:	2303      	movs	r3, #3
 8004504:	e004      	b.n	8004510 <HAL_GPIO_Init+0x204>
 8004506:	2302      	movs	r3, #2
 8004508:	e002      	b.n	8004510 <HAL_GPIO_Init+0x204>
 800450a:	2301      	movs	r3, #1
 800450c:	e000      	b.n	8004510 <HAL_GPIO_Init+0x204>
 800450e:	2300      	movs	r3, #0
 8004510:	69fa      	ldr	r2, [r7, #28]
 8004512:	f002 0203 	and.w	r2, r2, #3
 8004516:	0092      	lsls	r2, r2, #2
 8004518:	4093      	lsls	r3, r2
 800451a:	69ba      	ldr	r2, [r7, #24]
 800451c:	4313      	orrs	r3, r2
 800451e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004520:	4935      	ldr	r1, [pc, #212]	@ (80045f8 <HAL_GPIO_Init+0x2ec>)
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	089b      	lsrs	r3, r3, #2
 8004526:	3302      	adds	r3, #2
 8004528:	69ba      	ldr	r2, [r7, #24]
 800452a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800452e:	4b38      	ldr	r3, [pc, #224]	@ (8004610 <HAL_GPIO_Init+0x304>)
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	43db      	mvns	r3, r3
 8004538:	69ba      	ldr	r2, [r7, #24]
 800453a:	4013      	ands	r3, r2
 800453c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d003      	beq.n	8004552 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800454a:	69ba      	ldr	r2, [r7, #24]
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	4313      	orrs	r3, r2
 8004550:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004552:	4a2f      	ldr	r2, [pc, #188]	@ (8004610 <HAL_GPIO_Init+0x304>)
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004558:	4b2d      	ldr	r3, [pc, #180]	@ (8004610 <HAL_GPIO_Init+0x304>)
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	43db      	mvns	r3, r3
 8004562:	69ba      	ldr	r2, [r7, #24]
 8004564:	4013      	ands	r3, r2
 8004566:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d003      	beq.n	800457c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004574:	69ba      	ldr	r2, [r7, #24]
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	4313      	orrs	r3, r2
 800457a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800457c:	4a24      	ldr	r2, [pc, #144]	@ (8004610 <HAL_GPIO_Init+0x304>)
 800457e:	69bb      	ldr	r3, [r7, #24]
 8004580:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004582:	4b23      	ldr	r3, [pc, #140]	@ (8004610 <HAL_GPIO_Init+0x304>)
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	43db      	mvns	r3, r3
 800458c:	69ba      	ldr	r2, [r7, #24]
 800458e:	4013      	ands	r3, r2
 8004590:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d003      	beq.n	80045a6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800459e:	69ba      	ldr	r2, [r7, #24]
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80045a6:	4a1a      	ldr	r2, [pc, #104]	@ (8004610 <HAL_GPIO_Init+0x304>)
 80045a8:	69bb      	ldr	r3, [r7, #24]
 80045aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80045ac:	4b18      	ldr	r3, [pc, #96]	@ (8004610 <HAL_GPIO_Init+0x304>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	43db      	mvns	r3, r3
 80045b6:	69ba      	ldr	r2, [r7, #24]
 80045b8:	4013      	ands	r3, r2
 80045ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d003      	beq.n	80045d0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80045c8:	69ba      	ldr	r2, [r7, #24]
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80045d0:	4a0f      	ldr	r2, [pc, #60]	@ (8004610 <HAL_GPIO_Init+0x304>)
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	3301      	adds	r3, #1
 80045da:	61fb      	str	r3, [r7, #28]
 80045dc:	69fb      	ldr	r3, [r7, #28]
 80045de:	2b0f      	cmp	r3, #15
 80045e0:	f67f aea2 	bls.w	8004328 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80045e4:	bf00      	nop
 80045e6:	bf00      	nop
 80045e8:	3724      	adds	r7, #36	@ 0x24
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop
 80045f4:	40023800 	.word	0x40023800
 80045f8:	40013800 	.word	0x40013800
 80045fc:	40020000 	.word	0x40020000
 8004600:	40020400 	.word	0x40020400
 8004604:	40020800 	.word	0x40020800
 8004608:	40020c00 	.word	0x40020c00
 800460c:	40021000 	.word	0x40021000
 8004610:	40013c00 	.word	0x40013c00

08004614 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	460b      	mov	r3, r1
 800461e:	807b      	strh	r3, [r7, #2]
 8004620:	4613      	mov	r3, r2
 8004622:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004624:	787b      	ldrb	r3, [r7, #1]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d003      	beq.n	8004632 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800462a:	887a      	ldrh	r2, [r7, #2]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004630:	e003      	b.n	800463a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004632:	887b      	ldrh	r3, [r7, #2]
 8004634:	041a      	lsls	r2, r3, #16
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	619a      	str	r2, [r3, #24]
}
 800463a:	bf00      	nop
 800463c:	370c      	adds	r7, #12
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr
	...

08004648 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d101      	bne.n	800465a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e12b      	b.n	80048b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004660:	b2db      	uxtb	r3, r3
 8004662:	2b00      	cmp	r3, #0
 8004664:	d106      	bne.n	8004674 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f7fc fdf6 	bl	8001260 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2224      	movs	r2, #36	@ 0x24
 8004678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f022 0201 	bic.w	r2, r2, #1
 800468a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800469a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80046aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80046ac:	f001 f89a 	bl	80057e4 <HAL_RCC_GetPCLK1Freq>
 80046b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	4a81      	ldr	r2, [pc, #516]	@ (80048bc <HAL_I2C_Init+0x274>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d807      	bhi.n	80046cc <HAL_I2C_Init+0x84>
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	4a80      	ldr	r2, [pc, #512]	@ (80048c0 <HAL_I2C_Init+0x278>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	bf94      	ite	ls
 80046c4:	2301      	movls	r3, #1
 80046c6:	2300      	movhi	r3, #0
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	e006      	b.n	80046da <HAL_I2C_Init+0x92>
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	4a7d      	ldr	r2, [pc, #500]	@ (80048c4 <HAL_I2C_Init+0x27c>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	bf94      	ite	ls
 80046d4:	2301      	movls	r3, #1
 80046d6:	2300      	movhi	r3, #0
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d001      	beq.n	80046e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e0e7      	b.n	80048b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	4a78      	ldr	r2, [pc, #480]	@ (80048c8 <HAL_I2C_Init+0x280>)
 80046e6:	fba2 2303 	umull	r2, r3, r2, r3
 80046ea:	0c9b      	lsrs	r3, r3, #18
 80046ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68ba      	ldr	r2, [r7, #8]
 80046fe:	430a      	orrs	r2, r1
 8004700:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	6a1b      	ldr	r3, [r3, #32]
 8004708:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	4a6a      	ldr	r2, [pc, #424]	@ (80048bc <HAL_I2C_Init+0x274>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d802      	bhi.n	800471c <HAL_I2C_Init+0xd4>
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	3301      	adds	r3, #1
 800471a:	e009      	b.n	8004730 <HAL_I2C_Init+0xe8>
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004722:	fb02 f303 	mul.w	r3, r2, r3
 8004726:	4a69      	ldr	r2, [pc, #420]	@ (80048cc <HAL_I2C_Init+0x284>)
 8004728:	fba2 2303 	umull	r2, r3, r2, r3
 800472c:	099b      	lsrs	r3, r3, #6
 800472e:	3301      	adds	r3, #1
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	6812      	ldr	r2, [r2, #0]
 8004734:	430b      	orrs	r3, r1
 8004736:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	69db      	ldr	r3, [r3, #28]
 800473e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004742:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	495c      	ldr	r1, [pc, #368]	@ (80048bc <HAL_I2C_Init+0x274>)
 800474c:	428b      	cmp	r3, r1
 800474e:	d819      	bhi.n	8004784 <HAL_I2C_Init+0x13c>
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	1e59      	subs	r1, r3, #1
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	005b      	lsls	r3, r3, #1
 800475a:	fbb1 f3f3 	udiv	r3, r1, r3
 800475e:	1c59      	adds	r1, r3, #1
 8004760:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004764:	400b      	ands	r3, r1
 8004766:	2b00      	cmp	r3, #0
 8004768:	d00a      	beq.n	8004780 <HAL_I2C_Init+0x138>
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	1e59      	subs	r1, r3, #1
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	005b      	lsls	r3, r3, #1
 8004774:	fbb1 f3f3 	udiv	r3, r1, r3
 8004778:	3301      	adds	r3, #1
 800477a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800477e:	e051      	b.n	8004824 <HAL_I2C_Init+0x1dc>
 8004780:	2304      	movs	r3, #4
 8004782:	e04f      	b.n	8004824 <HAL_I2C_Init+0x1dc>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d111      	bne.n	80047b0 <HAL_I2C_Init+0x168>
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	1e58      	subs	r0, r3, #1
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6859      	ldr	r1, [r3, #4]
 8004794:	460b      	mov	r3, r1
 8004796:	005b      	lsls	r3, r3, #1
 8004798:	440b      	add	r3, r1
 800479a:	fbb0 f3f3 	udiv	r3, r0, r3
 800479e:	3301      	adds	r3, #1
 80047a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	bf0c      	ite	eq
 80047a8:	2301      	moveq	r3, #1
 80047aa:	2300      	movne	r3, #0
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	e012      	b.n	80047d6 <HAL_I2C_Init+0x18e>
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	1e58      	subs	r0, r3, #1
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6859      	ldr	r1, [r3, #4]
 80047b8:	460b      	mov	r3, r1
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	440b      	add	r3, r1
 80047be:	0099      	lsls	r1, r3, #2
 80047c0:	440b      	add	r3, r1
 80047c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80047c6:	3301      	adds	r3, #1
 80047c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	bf0c      	ite	eq
 80047d0:	2301      	moveq	r3, #1
 80047d2:	2300      	movne	r3, #0
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d001      	beq.n	80047de <HAL_I2C_Init+0x196>
 80047da:	2301      	movs	r3, #1
 80047dc:	e022      	b.n	8004824 <HAL_I2C_Init+0x1dc>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d10e      	bne.n	8004804 <HAL_I2C_Init+0x1bc>
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	1e58      	subs	r0, r3, #1
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6859      	ldr	r1, [r3, #4]
 80047ee:	460b      	mov	r3, r1
 80047f0:	005b      	lsls	r3, r3, #1
 80047f2:	440b      	add	r3, r1
 80047f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80047f8:	3301      	adds	r3, #1
 80047fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004802:	e00f      	b.n	8004824 <HAL_I2C_Init+0x1dc>
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	1e58      	subs	r0, r3, #1
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6859      	ldr	r1, [r3, #4]
 800480c:	460b      	mov	r3, r1
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	440b      	add	r3, r1
 8004812:	0099      	lsls	r1, r3, #2
 8004814:	440b      	add	r3, r1
 8004816:	fbb0 f3f3 	udiv	r3, r0, r3
 800481a:	3301      	adds	r3, #1
 800481c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004820:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004824:	6879      	ldr	r1, [r7, #4]
 8004826:	6809      	ldr	r1, [r1, #0]
 8004828:	4313      	orrs	r3, r2
 800482a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	69da      	ldr	r2, [r3, #28]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a1b      	ldr	r3, [r3, #32]
 800483e:	431a      	orrs	r2, r3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	430a      	orrs	r2, r1
 8004846:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004852:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	6911      	ldr	r1, [r2, #16]
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	68d2      	ldr	r2, [r2, #12]
 800485e:	4311      	orrs	r1, r2
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	6812      	ldr	r2, [r2, #0]
 8004864:	430b      	orrs	r3, r1
 8004866:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	695a      	ldr	r2, [r3, #20]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	699b      	ldr	r3, [r3, #24]
 800487a:	431a      	orrs	r2, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	430a      	orrs	r2, r1
 8004882:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f042 0201 	orr.w	r2, r2, #1
 8004892:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2220      	movs	r2, #32
 800489e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80048b0:	2300      	movs	r3, #0
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3710      	adds	r7, #16
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	000186a0 	.word	0x000186a0
 80048c0:	001e847f 	.word	0x001e847f
 80048c4:	003d08ff 	.word	0x003d08ff
 80048c8:	431bde83 	.word	0x431bde83
 80048cc:	10624dd3 	.word	0x10624dd3

080048d0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b088      	sub	sp, #32
 80048d4:	af02      	add	r7, sp, #8
 80048d6:	60f8      	str	r0, [r7, #12]
 80048d8:	607a      	str	r2, [r7, #4]
 80048da:	461a      	mov	r2, r3
 80048dc:	460b      	mov	r3, r1
 80048de:	817b      	strh	r3, [r7, #10]
 80048e0:	4613      	mov	r3, r2
 80048e2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80048e4:	f7fe fa76 	bl	8002dd4 <HAL_GetTick>
 80048e8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	2b20      	cmp	r3, #32
 80048f4:	f040 80e0 	bne.w	8004ab8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	9300      	str	r3, [sp, #0]
 80048fc:	2319      	movs	r3, #25
 80048fe:	2201      	movs	r2, #1
 8004900:	4970      	ldr	r1, [pc, #448]	@ (8004ac4 <HAL_I2C_Master_Transmit+0x1f4>)
 8004902:	68f8      	ldr	r0, [r7, #12]
 8004904:	f000 f964 	bl	8004bd0 <I2C_WaitOnFlagUntilTimeout>
 8004908:	4603      	mov	r3, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	d001      	beq.n	8004912 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800490e:	2302      	movs	r3, #2
 8004910:	e0d3      	b.n	8004aba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004918:	2b01      	cmp	r3, #1
 800491a:	d101      	bne.n	8004920 <HAL_I2C_Master_Transmit+0x50>
 800491c:	2302      	movs	r3, #2
 800491e:	e0cc      	b.n	8004aba <HAL_I2C_Master_Transmit+0x1ea>
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 0301 	and.w	r3, r3, #1
 8004932:	2b01      	cmp	r3, #1
 8004934:	d007      	beq.n	8004946 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f042 0201 	orr.w	r2, r2, #1
 8004944:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004954:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2221      	movs	r2, #33	@ 0x21
 800495a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2210      	movs	r2, #16
 8004962:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2200      	movs	r2, #0
 800496a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	893a      	ldrh	r2, [r7, #8]
 8004976:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800497c:	b29a      	uxth	r2, r3
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	4a50      	ldr	r2, [pc, #320]	@ (8004ac8 <HAL_I2C_Master_Transmit+0x1f8>)
 8004986:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004988:	8979      	ldrh	r1, [r7, #10]
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	6a3a      	ldr	r2, [r7, #32]
 800498e:	68f8      	ldr	r0, [r7, #12]
 8004990:	f000 f89c 	bl	8004acc <I2C_MasterRequestWrite>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d001      	beq.n	800499e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e08d      	b.n	8004aba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800499e:	2300      	movs	r3, #0
 80049a0:	613b      	str	r3, [r7, #16]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	695b      	ldr	r3, [r3, #20]
 80049a8:	613b      	str	r3, [r7, #16]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	699b      	ldr	r3, [r3, #24]
 80049b0:	613b      	str	r3, [r7, #16]
 80049b2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80049b4:	e066      	b.n	8004a84 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049b6:	697a      	ldr	r2, [r7, #20]
 80049b8:	6a39      	ldr	r1, [r7, #32]
 80049ba:	68f8      	ldr	r0, [r7, #12]
 80049bc:	f000 fa22 	bl	8004e04 <I2C_WaitOnTXEFlagUntilTimeout>
 80049c0:	4603      	mov	r3, r0
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d00d      	beq.n	80049e2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ca:	2b04      	cmp	r3, #4
 80049cc:	d107      	bne.n	80049de <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e06b      	b.n	8004aba <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049e6:	781a      	ldrb	r2, [r3, #0]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049f2:	1c5a      	adds	r2, r3, #1
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	3b01      	subs	r3, #1
 8004a00:	b29a      	uxth	r2, r3
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a0a:	3b01      	subs	r3, #1
 8004a0c:	b29a      	uxth	r2, r3
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	695b      	ldr	r3, [r3, #20]
 8004a18:	f003 0304 	and.w	r3, r3, #4
 8004a1c:	2b04      	cmp	r3, #4
 8004a1e:	d11b      	bne.n	8004a58 <HAL_I2C_Master_Transmit+0x188>
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d017      	beq.n	8004a58 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a2c:	781a      	ldrb	r2, [r3, #0]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a38:	1c5a      	adds	r2, r3, #1
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	3b01      	subs	r3, #1
 8004a46:	b29a      	uxth	r2, r3
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a50:	3b01      	subs	r3, #1
 8004a52:	b29a      	uxth	r2, r3
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a58:	697a      	ldr	r2, [r7, #20]
 8004a5a:	6a39      	ldr	r1, [r7, #32]
 8004a5c:	68f8      	ldr	r0, [r7, #12]
 8004a5e:	f000 fa19 	bl	8004e94 <I2C_WaitOnBTFFlagUntilTimeout>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d00d      	beq.n	8004a84 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a6c:	2b04      	cmp	r3, #4
 8004a6e:	d107      	bne.n	8004a80 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a7e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e01a      	b.n	8004aba <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d194      	bne.n	80049b6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2220      	movs	r2, #32
 8004aa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	e000      	b.n	8004aba <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004ab8:	2302      	movs	r3, #2
  }
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3718      	adds	r7, #24
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	00100002 	.word	0x00100002
 8004ac8:	ffff0000 	.word	0xffff0000

08004acc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b088      	sub	sp, #32
 8004ad0:	af02      	add	r7, sp, #8
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	607a      	str	r2, [r7, #4]
 8004ad6:	603b      	str	r3, [r7, #0]
 8004ad8:	460b      	mov	r3, r1
 8004ada:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ae0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	2b08      	cmp	r3, #8
 8004ae6:	d006      	beq.n	8004af6 <I2C_MasterRequestWrite+0x2a>
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d003      	beq.n	8004af6 <I2C_MasterRequestWrite+0x2a>
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004af4:	d108      	bne.n	8004b08 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b04:	601a      	str	r2, [r3, #0]
 8004b06:	e00b      	b.n	8004b20 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b0c:	2b12      	cmp	r3, #18
 8004b0e:	d107      	bne.n	8004b20 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b1e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	9300      	str	r3, [sp, #0]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004b2c:	68f8      	ldr	r0, [r7, #12]
 8004b2e:	f000 f84f 	bl	8004bd0 <I2C_WaitOnFlagUntilTimeout>
 8004b32:	4603      	mov	r3, r0
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d00d      	beq.n	8004b54 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b46:	d103      	bne.n	8004b50 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b4e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004b50:	2303      	movs	r3, #3
 8004b52:	e035      	b.n	8004bc0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	691b      	ldr	r3, [r3, #16]
 8004b58:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b5c:	d108      	bne.n	8004b70 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004b5e:	897b      	ldrh	r3, [r7, #10]
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	461a      	mov	r2, r3
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004b6c:	611a      	str	r2, [r3, #16]
 8004b6e:	e01b      	b.n	8004ba8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004b70:	897b      	ldrh	r3, [r7, #10]
 8004b72:	11db      	asrs	r3, r3, #7
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	f003 0306 	and.w	r3, r3, #6
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	f063 030f 	orn	r3, r3, #15
 8004b80:	b2da      	uxtb	r2, r3
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	490e      	ldr	r1, [pc, #56]	@ (8004bc8 <I2C_MasterRequestWrite+0xfc>)
 8004b8e:	68f8      	ldr	r0, [r7, #12]
 8004b90:	f000 f898 	bl	8004cc4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d001      	beq.n	8004b9e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e010      	b.n	8004bc0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004b9e:	897b      	ldrh	r3, [r7, #10]
 8004ba0:	b2da      	uxtb	r2, r3
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	4907      	ldr	r1, [pc, #28]	@ (8004bcc <I2C_MasterRequestWrite+0x100>)
 8004bae:	68f8      	ldr	r0, [r7, #12]
 8004bb0:	f000 f888 	bl	8004cc4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d001      	beq.n	8004bbe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e000      	b.n	8004bc0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004bbe:	2300      	movs	r3, #0
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3718      	adds	r7, #24
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	00010008 	.word	0x00010008
 8004bcc:	00010002 	.word	0x00010002

08004bd0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b084      	sub	sp, #16
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	603b      	str	r3, [r7, #0]
 8004bdc:	4613      	mov	r3, r2
 8004bde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004be0:	e048      	b.n	8004c74 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004be8:	d044      	beq.n	8004c74 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bea:	f7fe f8f3 	bl	8002dd4 <HAL_GetTick>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	69bb      	ldr	r3, [r7, #24]
 8004bf2:	1ad3      	subs	r3, r2, r3
 8004bf4:	683a      	ldr	r2, [r7, #0]
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d302      	bcc.n	8004c00 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d139      	bne.n	8004c74 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	0c1b      	lsrs	r3, r3, #16
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d10d      	bne.n	8004c26 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	695b      	ldr	r3, [r3, #20]
 8004c10:	43da      	mvns	r2, r3
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	4013      	ands	r3, r2
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	bf0c      	ite	eq
 8004c1c:	2301      	moveq	r3, #1
 8004c1e:	2300      	movne	r3, #0
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	461a      	mov	r2, r3
 8004c24:	e00c      	b.n	8004c40 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	699b      	ldr	r3, [r3, #24]
 8004c2c:	43da      	mvns	r2, r3
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	4013      	ands	r3, r2
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	bf0c      	ite	eq
 8004c38:	2301      	moveq	r3, #1
 8004c3a:	2300      	movne	r3, #0
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	461a      	mov	r2, r3
 8004c40:	79fb      	ldrb	r3, [r7, #7]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d116      	bne.n	8004c74 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2220      	movs	r2, #32
 8004c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c60:	f043 0220 	orr.w	r2, r3, #32
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e023      	b.n	8004cbc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	0c1b      	lsrs	r3, r3, #16
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d10d      	bne.n	8004c9a <I2C_WaitOnFlagUntilTimeout+0xca>
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	695b      	ldr	r3, [r3, #20]
 8004c84:	43da      	mvns	r2, r3
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	4013      	ands	r3, r2
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	bf0c      	ite	eq
 8004c90:	2301      	moveq	r3, #1
 8004c92:	2300      	movne	r3, #0
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	461a      	mov	r2, r3
 8004c98:	e00c      	b.n	8004cb4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	699b      	ldr	r3, [r3, #24]
 8004ca0:	43da      	mvns	r2, r3
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	bf0c      	ite	eq
 8004cac:	2301      	moveq	r3, #1
 8004cae:	2300      	movne	r3, #0
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	79fb      	ldrb	r3, [r7, #7]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d093      	beq.n	8004be2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cba:	2300      	movs	r3, #0
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3710      	adds	r7, #16
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	60f8      	str	r0, [r7, #12]
 8004ccc:	60b9      	str	r1, [r7, #8]
 8004cce:	607a      	str	r2, [r7, #4]
 8004cd0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004cd2:	e071      	b.n	8004db8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	695b      	ldr	r3, [r3, #20]
 8004cda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ce2:	d123      	bne.n	8004d2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004cf2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004cfc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2200      	movs	r2, #0
 8004d02:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2220      	movs	r2, #32
 8004d08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d18:	f043 0204 	orr.w	r2, r3, #4
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2200      	movs	r2, #0
 8004d24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e067      	b.n	8004dfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d32:	d041      	beq.n	8004db8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d34:	f7fe f84e 	bl	8002dd4 <HAL_GetTick>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d302      	bcc.n	8004d4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d136      	bne.n	8004db8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	0c1b      	lsrs	r3, r3, #16
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d10c      	bne.n	8004d6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	695b      	ldr	r3, [r3, #20]
 8004d5a:	43da      	mvns	r2, r3
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	4013      	ands	r3, r2
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	bf14      	ite	ne
 8004d66:	2301      	movne	r3, #1
 8004d68:	2300      	moveq	r3, #0
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	e00b      	b.n	8004d86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	699b      	ldr	r3, [r3, #24]
 8004d74:	43da      	mvns	r2, r3
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	4013      	ands	r3, r2
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	bf14      	ite	ne
 8004d80:	2301      	movne	r3, #1
 8004d82:	2300      	moveq	r3, #0
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d016      	beq.n	8004db8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2220      	movs	r2, #32
 8004d94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004da4:	f043 0220 	orr.w	r2, r3, #32
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	e021      	b.n	8004dfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	0c1b      	lsrs	r3, r3, #16
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d10c      	bne.n	8004ddc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	695b      	ldr	r3, [r3, #20]
 8004dc8:	43da      	mvns	r2, r3
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	4013      	ands	r3, r2
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	bf14      	ite	ne
 8004dd4:	2301      	movne	r3, #1
 8004dd6:	2300      	moveq	r3, #0
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	e00b      	b.n	8004df4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	699b      	ldr	r3, [r3, #24]
 8004de2:	43da      	mvns	r2, r3
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	4013      	ands	r3, r2
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	bf14      	ite	ne
 8004dee:	2301      	movne	r3, #1
 8004df0:	2300      	moveq	r3, #0
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	f47f af6d 	bne.w	8004cd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004dfa:	2300      	movs	r3, #0
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3710      	adds	r7, #16
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}

08004e04 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	60b9      	str	r1, [r7, #8]
 8004e0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e10:	e034      	b.n	8004e7c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e12:	68f8      	ldr	r0, [r7, #12]
 8004e14:	f000 f886 	bl	8004f24 <I2C_IsAcknowledgeFailed>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d001      	beq.n	8004e22 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e034      	b.n	8004e8c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e28:	d028      	beq.n	8004e7c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e2a:	f7fd ffd3 	bl	8002dd4 <HAL_GetTick>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	68ba      	ldr	r2, [r7, #8]
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d302      	bcc.n	8004e40 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d11d      	bne.n	8004e7c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	695b      	ldr	r3, [r3, #20]
 8004e46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e4a:	2b80      	cmp	r3, #128	@ 0x80
 8004e4c:	d016      	beq.n	8004e7c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2200      	movs	r2, #0
 8004e52:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2220      	movs	r2, #32
 8004e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e68:	f043 0220 	orr.w	r2, r3, #32
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e007      	b.n	8004e8c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	695b      	ldr	r3, [r3, #20]
 8004e82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e86:	2b80      	cmp	r3, #128	@ 0x80
 8004e88:	d1c3      	bne.n	8004e12 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004e8a:	2300      	movs	r3, #0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3710      	adds	r7, #16
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b084      	sub	sp, #16
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	60f8      	str	r0, [r7, #12]
 8004e9c:	60b9      	str	r1, [r7, #8]
 8004e9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ea0:	e034      	b.n	8004f0c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004ea2:	68f8      	ldr	r0, [r7, #12]
 8004ea4:	f000 f83e 	bl	8004f24 <I2C_IsAcknowledgeFailed>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d001      	beq.n	8004eb2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e034      	b.n	8004f1c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eb8:	d028      	beq.n	8004f0c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eba:	f7fd ff8b 	bl	8002dd4 <HAL_GetTick>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	68ba      	ldr	r2, [r7, #8]
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d302      	bcc.n	8004ed0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d11d      	bne.n	8004f0c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	695b      	ldr	r3, [r3, #20]
 8004ed6:	f003 0304 	and.w	r3, r3, #4
 8004eda:	2b04      	cmp	r3, #4
 8004edc:	d016      	beq.n	8004f0c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2220      	movs	r2, #32
 8004ee8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ef8:	f043 0220 	orr.w	r2, r3, #32
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2200      	movs	r2, #0
 8004f04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e007      	b.n	8004f1c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	695b      	ldr	r3, [r3, #20]
 8004f12:	f003 0304 	and.w	r3, r3, #4
 8004f16:	2b04      	cmp	r3, #4
 8004f18:	d1c3      	bne.n	8004ea2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004f1a:	2300      	movs	r3, #0
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3710      	adds	r7, #16
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	695b      	ldr	r3, [r3, #20]
 8004f32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f3a:	d11b      	bne.n	8004f74 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004f44:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2220      	movs	r2, #32
 8004f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f60:	f043 0204 	orr.w	r2, r3, #4
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e000      	b.n	8004f76 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004f74:	2300      	movs	r3, #0
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	370c      	adds	r7, #12
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr
	...

08004f84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b086      	sub	sp, #24
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d101      	bne.n	8004f96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e267      	b.n	8005466 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 0301 	and.w	r3, r3, #1
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d075      	beq.n	800508e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004fa2:	4b88      	ldr	r3, [pc, #544]	@ (80051c4 <HAL_RCC_OscConfig+0x240>)
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	f003 030c 	and.w	r3, r3, #12
 8004faa:	2b04      	cmp	r3, #4
 8004fac:	d00c      	beq.n	8004fc8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fae:	4b85      	ldr	r3, [pc, #532]	@ (80051c4 <HAL_RCC_OscConfig+0x240>)
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004fb6:	2b08      	cmp	r3, #8
 8004fb8:	d112      	bne.n	8004fe0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fba:	4b82      	ldr	r3, [pc, #520]	@ (80051c4 <HAL_RCC_OscConfig+0x240>)
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fc2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004fc6:	d10b      	bne.n	8004fe0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fc8:	4b7e      	ldr	r3, [pc, #504]	@ (80051c4 <HAL_RCC_OscConfig+0x240>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d05b      	beq.n	800508c <HAL_RCC_OscConfig+0x108>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d157      	bne.n	800508c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e242      	b.n	8005466 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fe8:	d106      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x74>
 8004fea:	4b76      	ldr	r3, [pc, #472]	@ (80051c4 <HAL_RCC_OscConfig+0x240>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a75      	ldr	r2, [pc, #468]	@ (80051c4 <HAL_RCC_OscConfig+0x240>)
 8004ff0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ff4:	6013      	str	r3, [r2, #0]
 8004ff6:	e01d      	b.n	8005034 <HAL_RCC_OscConfig+0xb0>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005000:	d10c      	bne.n	800501c <HAL_RCC_OscConfig+0x98>
 8005002:	4b70      	ldr	r3, [pc, #448]	@ (80051c4 <HAL_RCC_OscConfig+0x240>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a6f      	ldr	r2, [pc, #444]	@ (80051c4 <HAL_RCC_OscConfig+0x240>)
 8005008:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800500c:	6013      	str	r3, [r2, #0]
 800500e:	4b6d      	ldr	r3, [pc, #436]	@ (80051c4 <HAL_RCC_OscConfig+0x240>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a6c      	ldr	r2, [pc, #432]	@ (80051c4 <HAL_RCC_OscConfig+0x240>)
 8005014:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005018:	6013      	str	r3, [r2, #0]
 800501a:	e00b      	b.n	8005034 <HAL_RCC_OscConfig+0xb0>
 800501c:	4b69      	ldr	r3, [pc, #420]	@ (80051c4 <HAL_RCC_OscConfig+0x240>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a68      	ldr	r2, [pc, #416]	@ (80051c4 <HAL_RCC_OscConfig+0x240>)
 8005022:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005026:	6013      	str	r3, [r2, #0]
 8005028:	4b66      	ldr	r3, [pc, #408]	@ (80051c4 <HAL_RCC_OscConfig+0x240>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a65      	ldr	r2, [pc, #404]	@ (80051c4 <HAL_RCC_OscConfig+0x240>)
 800502e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005032:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d013      	beq.n	8005064 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800503c:	f7fd feca 	bl	8002dd4 <HAL_GetTick>
 8005040:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005042:	e008      	b.n	8005056 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005044:	f7fd fec6 	bl	8002dd4 <HAL_GetTick>
 8005048:	4602      	mov	r2, r0
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	2b64      	cmp	r3, #100	@ 0x64
 8005050:	d901      	bls.n	8005056 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005052:	2303      	movs	r3, #3
 8005054:	e207      	b.n	8005466 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005056:	4b5b      	ldr	r3, [pc, #364]	@ (80051c4 <HAL_RCC_OscConfig+0x240>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800505e:	2b00      	cmp	r3, #0
 8005060:	d0f0      	beq.n	8005044 <HAL_RCC_OscConfig+0xc0>
 8005062:	e014      	b.n	800508e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005064:	f7fd feb6 	bl	8002dd4 <HAL_GetTick>
 8005068:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800506a:	e008      	b.n	800507e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800506c:	f7fd feb2 	bl	8002dd4 <HAL_GetTick>
 8005070:	4602      	mov	r2, r0
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	2b64      	cmp	r3, #100	@ 0x64
 8005078:	d901      	bls.n	800507e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800507a:	2303      	movs	r3, #3
 800507c:	e1f3      	b.n	8005466 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800507e:	4b51      	ldr	r3, [pc, #324]	@ (80051c4 <HAL_RCC_OscConfig+0x240>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005086:	2b00      	cmp	r3, #0
 8005088:	d1f0      	bne.n	800506c <HAL_RCC_OscConfig+0xe8>
 800508a:	e000      	b.n	800508e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800508c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 0302 	and.w	r3, r3, #2
 8005096:	2b00      	cmp	r3, #0
 8005098:	d063      	beq.n	8005162 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800509a:	4b4a      	ldr	r3, [pc, #296]	@ (80051c4 <HAL_RCC_OscConfig+0x240>)
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	f003 030c 	and.w	r3, r3, #12
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d00b      	beq.n	80050be <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050a6:	4b47      	ldr	r3, [pc, #284]	@ (80051c4 <HAL_RCC_OscConfig+0x240>)
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80050ae:	2b08      	cmp	r3, #8
 80050b0:	d11c      	bne.n	80050ec <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050b2:	4b44      	ldr	r3, [pc, #272]	@ (80051c4 <HAL_RCC_OscConfig+0x240>)
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d116      	bne.n	80050ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050be:	4b41      	ldr	r3, [pc, #260]	@ (80051c4 <HAL_RCC_OscConfig+0x240>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 0302 	and.w	r3, r3, #2
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d005      	beq.n	80050d6 <HAL_RCC_OscConfig+0x152>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	68db      	ldr	r3, [r3, #12]
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d001      	beq.n	80050d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e1c7      	b.n	8005466 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050d6:	4b3b      	ldr	r3, [pc, #236]	@ (80051c4 <HAL_RCC_OscConfig+0x240>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	691b      	ldr	r3, [r3, #16]
 80050e2:	00db      	lsls	r3, r3, #3
 80050e4:	4937      	ldr	r1, [pc, #220]	@ (80051c4 <HAL_RCC_OscConfig+0x240>)
 80050e6:	4313      	orrs	r3, r2
 80050e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050ea:	e03a      	b.n	8005162 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d020      	beq.n	8005136 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050f4:	4b34      	ldr	r3, [pc, #208]	@ (80051c8 <HAL_RCC_OscConfig+0x244>)
 80050f6:	2201      	movs	r2, #1
 80050f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050fa:	f7fd fe6b 	bl	8002dd4 <HAL_GetTick>
 80050fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005100:	e008      	b.n	8005114 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005102:	f7fd fe67 	bl	8002dd4 <HAL_GetTick>
 8005106:	4602      	mov	r2, r0
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	2b02      	cmp	r3, #2
 800510e:	d901      	bls.n	8005114 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005110:	2303      	movs	r3, #3
 8005112:	e1a8      	b.n	8005466 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005114:	4b2b      	ldr	r3, [pc, #172]	@ (80051c4 <HAL_RCC_OscConfig+0x240>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 0302 	and.w	r3, r3, #2
 800511c:	2b00      	cmp	r3, #0
 800511e:	d0f0      	beq.n	8005102 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005120:	4b28      	ldr	r3, [pc, #160]	@ (80051c4 <HAL_RCC_OscConfig+0x240>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	691b      	ldr	r3, [r3, #16]
 800512c:	00db      	lsls	r3, r3, #3
 800512e:	4925      	ldr	r1, [pc, #148]	@ (80051c4 <HAL_RCC_OscConfig+0x240>)
 8005130:	4313      	orrs	r3, r2
 8005132:	600b      	str	r3, [r1, #0]
 8005134:	e015      	b.n	8005162 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005136:	4b24      	ldr	r3, [pc, #144]	@ (80051c8 <HAL_RCC_OscConfig+0x244>)
 8005138:	2200      	movs	r2, #0
 800513a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800513c:	f7fd fe4a 	bl	8002dd4 <HAL_GetTick>
 8005140:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005142:	e008      	b.n	8005156 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005144:	f7fd fe46 	bl	8002dd4 <HAL_GetTick>
 8005148:	4602      	mov	r2, r0
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	2b02      	cmp	r3, #2
 8005150:	d901      	bls.n	8005156 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	e187      	b.n	8005466 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005156:	4b1b      	ldr	r3, [pc, #108]	@ (80051c4 <HAL_RCC_OscConfig+0x240>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 0302 	and.w	r3, r3, #2
 800515e:	2b00      	cmp	r3, #0
 8005160:	d1f0      	bne.n	8005144 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f003 0308 	and.w	r3, r3, #8
 800516a:	2b00      	cmp	r3, #0
 800516c:	d036      	beq.n	80051dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	695b      	ldr	r3, [r3, #20]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d016      	beq.n	80051a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005176:	4b15      	ldr	r3, [pc, #84]	@ (80051cc <HAL_RCC_OscConfig+0x248>)
 8005178:	2201      	movs	r2, #1
 800517a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800517c:	f7fd fe2a 	bl	8002dd4 <HAL_GetTick>
 8005180:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005182:	e008      	b.n	8005196 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005184:	f7fd fe26 	bl	8002dd4 <HAL_GetTick>
 8005188:	4602      	mov	r2, r0
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	2b02      	cmp	r3, #2
 8005190:	d901      	bls.n	8005196 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005192:	2303      	movs	r3, #3
 8005194:	e167      	b.n	8005466 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005196:	4b0b      	ldr	r3, [pc, #44]	@ (80051c4 <HAL_RCC_OscConfig+0x240>)
 8005198:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800519a:	f003 0302 	and.w	r3, r3, #2
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d0f0      	beq.n	8005184 <HAL_RCC_OscConfig+0x200>
 80051a2:	e01b      	b.n	80051dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051a4:	4b09      	ldr	r3, [pc, #36]	@ (80051cc <HAL_RCC_OscConfig+0x248>)
 80051a6:	2200      	movs	r2, #0
 80051a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051aa:	f7fd fe13 	bl	8002dd4 <HAL_GetTick>
 80051ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051b0:	e00e      	b.n	80051d0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051b2:	f7fd fe0f 	bl	8002dd4 <HAL_GetTick>
 80051b6:	4602      	mov	r2, r0
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	1ad3      	subs	r3, r2, r3
 80051bc:	2b02      	cmp	r3, #2
 80051be:	d907      	bls.n	80051d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80051c0:	2303      	movs	r3, #3
 80051c2:	e150      	b.n	8005466 <HAL_RCC_OscConfig+0x4e2>
 80051c4:	40023800 	.word	0x40023800
 80051c8:	42470000 	.word	0x42470000
 80051cc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051d0:	4b88      	ldr	r3, [pc, #544]	@ (80053f4 <HAL_RCC_OscConfig+0x470>)
 80051d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051d4:	f003 0302 	and.w	r3, r3, #2
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d1ea      	bne.n	80051b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0304 	and.w	r3, r3, #4
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	f000 8097 	beq.w	8005318 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051ea:	2300      	movs	r3, #0
 80051ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051ee:	4b81      	ldr	r3, [pc, #516]	@ (80053f4 <HAL_RCC_OscConfig+0x470>)
 80051f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d10f      	bne.n	800521a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051fa:	2300      	movs	r3, #0
 80051fc:	60bb      	str	r3, [r7, #8]
 80051fe:	4b7d      	ldr	r3, [pc, #500]	@ (80053f4 <HAL_RCC_OscConfig+0x470>)
 8005200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005202:	4a7c      	ldr	r2, [pc, #496]	@ (80053f4 <HAL_RCC_OscConfig+0x470>)
 8005204:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005208:	6413      	str	r3, [r2, #64]	@ 0x40
 800520a:	4b7a      	ldr	r3, [pc, #488]	@ (80053f4 <HAL_RCC_OscConfig+0x470>)
 800520c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800520e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005212:	60bb      	str	r3, [r7, #8]
 8005214:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005216:	2301      	movs	r3, #1
 8005218:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800521a:	4b77      	ldr	r3, [pc, #476]	@ (80053f8 <HAL_RCC_OscConfig+0x474>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005222:	2b00      	cmp	r3, #0
 8005224:	d118      	bne.n	8005258 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005226:	4b74      	ldr	r3, [pc, #464]	@ (80053f8 <HAL_RCC_OscConfig+0x474>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a73      	ldr	r2, [pc, #460]	@ (80053f8 <HAL_RCC_OscConfig+0x474>)
 800522c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005230:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005232:	f7fd fdcf 	bl	8002dd4 <HAL_GetTick>
 8005236:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005238:	e008      	b.n	800524c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800523a:	f7fd fdcb 	bl	8002dd4 <HAL_GetTick>
 800523e:	4602      	mov	r2, r0
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	1ad3      	subs	r3, r2, r3
 8005244:	2b02      	cmp	r3, #2
 8005246:	d901      	bls.n	800524c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005248:	2303      	movs	r3, #3
 800524a:	e10c      	b.n	8005466 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800524c:	4b6a      	ldr	r3, [pc, #424]	@ (80053f8 <HAL_RCC_OscConfig+0x474>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005254:	2b00      	cmp	r3, #0
 8005256:	d0f0      	beq.n	800523a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	2b01      	cmp	r3, #1
 800525e:	d106      	bne.n	800526e <HAL_RCC_OscConfig+0x2ea>
 8005260:	4b64      	ldr	r3, [pc, #400]	@ (80053f4 <HAL_RCC_OscConfig+0x470>)
 8005262:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005264:	4a63      	ldr	r2, [pc, #396]	@ (80053f4 <HAL_RCC_OscConfig+0x470>)
 8005266:	f043 0301 	orr.w	r3, r3, #1
 800526a:	6713      	str	r3, [r2, #112]	@ 0x70
 800526c:	e01c      	b.n	80052a8 <HAL_RCC_OscConfig+0x324>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	2b05      	cmp	r3, #5
 8005274:	d10c      	bne.n	8005290 <HAL_RCC_OscConfig+0x30c>
 8005276:	4b5f      	ldr	r3, [pc, #380]	@ (80053f4 <HAL_RCC_OscConfig+0x470>)
 8005278:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800527a:	4a5e      	ldr	r2, [pc, #376]	@ (80053f4 <HAL_RCC_OscConfig+0x470>)
 800527c:	f043 0304 	orr.w	r3, r3, #4
 8005280:	6713      	str	r3, [r2, #112]	@ 0x70
 8005282:	4b5c      	ldr	r3, [pc, #368]	@ (80053f4 <HAL_RCC_OscConfig+0x470>)
 8005284:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005286:	4a5b      	ldr	r2, [pc, #364]	@ (80053f4 <HAL_RCC_OscConfig+0x470>)
 8005288:	f043 0301 	orr.w	r3, r3, #1
 800528c:	6713      	str	r3, [r2, #112]	@ 0x70
 800528e:	e00b      	b.n	80052a8 <HAL_RCC_OscConfig+0x324>
 8005290:	4b58      	ldr	r3, [pc, #352]	@ (80053f4 <HAL_RCC_OscConfig+0x470>)
 8005292:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005294:	4a57      	ldr	r2, [pc, #348]	@ (80053f4 <HAL_RCC_OscConfig+0x470>)
 8005296:	f023 0301 	bic.w	r3, r3, #1
 800529a:	6713      	str	r3, [r2, #112]	@ 0x70
 800529c:	4b55      	ldr	r3, [pc, #340]	@ (80053f4 <HAL_RCC_OscConfig+0x470>)
 800529e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052a0:	4a54      	ldr	r2, [pc, #336]	@ (80053f4 <HAL_RCC_OscConfig+0x470>)
 80052a2:	f023 0304 	bic.w	r3, r3, #4
 80052a6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d015      	beq.n	80052dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052b0:	f7fd fd90 	bl	8002dd4 <HAL_GetTick>
 80052b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052b6:	e00a      	b.n	80052ce <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052b8:	f7fd fd8c 	bl	8002dd4 <HAL_GetTick>
 80052bc:	4602      	mov	r2, r0
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d901      	bls.n	80052ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e0cb      	b.n	8005466 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052ce:	4b49      	ldr	r3, [pc, #292]	@ (80053f4 <HAL_RCC_OscConfig+0x470>)
 80052d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052d2:	f003 0302 	and.w	r3, r3, #2
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d0ee      	beq.n	80052b8 <HAL_RCC_OscConfig+0x334>
 80052da:	e014      	b.n	8005306 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052dc:	f7fd fd7a 	bl	8002dd4 <HAL_GetTick>
 80052e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052e2:	e00a      	b.n	80052fa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052e4:	f7fd fd76 	bl	8002dd4 <HAL_GetTick>
 80052e8:	4602      	mov	r2, r0
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	1ad3      	subs	r3, r2, r3
 80052ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d901      	bls.n	80052fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80052f6:	2303      	movs	r3, #3
 80052f8:	e0b5      	b.n	8005466 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052fa:	4b3e      	ldr	r3, [pc, #248]	@ (80053f4 <HAL_RCC_OscConfig+0x470>)
 80052fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052fe:	f003 0302 	and.w	r3, r3, #2
 8005302:	2b00      	cmp	r3, #0
 8005304:	d1ee      	bne.n	80052e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005306:	7dfb      	ldrb	r3, [r7, #23]
 8005308:	2b01      	cmp	r3, #1
 800530a:	d105      	bne.n	8005318 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800530c:	4b39      	ldr	r3, [pc, #228]	@ (80053f4 <HAL_RCC_OscConfig+0x470>)
 800530e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005310:	4a38      	ldr	r2, [pc, #224]	@ (80053f4 <HAL_RCC_OscConfig+0x470>)
 8005312:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005316:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	699b      	ldr	r3, [r3, #24]
 800531c:	2b00      	cmp	r3, #0
 800531e:	f000 80a1 	beq.w	8005464 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005322:	4b34      	ldr	r3, [pc, #208]	@ (80053f4 <HAL_RCC_OscConfig+0x470>)
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	f003 030c 	and.w	r3, r3, #12
 800532a:	2b08      	cmp	r3, #8
 800532c:	d05c      	beq.n	80053e8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	699b      	ldr	r3, [r3, #24]
 8005332:	2b02      	cmp	r3, #2
 8005334:	d141      	bne.n	80053ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005336:	4b31      	ldr	r3, [pc, #196]	@ (80053fc <HAL_RCC_OscConfig+0x478>)
 8005338:	2200      	movs	r2, #0
 800533a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800533c:	f7fd fd4a 	bl	8002dd4 <HAL_GetTick>
 8005340:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005342:	e008      	b.n	8005356 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005344:	f7fd fd46 	bl	8002dd4 <HAL_GetTick>
 8005348:	4602      	mov	r2, r0
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	2b02      	cmp	r3, #2
 8005350:	d901      	bls.n	8005356 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005352:	2303      	movs	r3, #3
 8005354:	e087      	b.n	8005466 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005356:	4b27      	ldr	r3, [pc, #156]	@ (80053f4 <HAL_RCC_OscConfig+0x470>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800535e:	2b00      	cmp	r3, #0
 8005360:	d1f0      	bne.n	8005344 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	69da      	ldr	r2, [r3, #28]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6a1b      	ldr	r3, [r3, #32]
 800536a:	431a      	orrs	r2, r3
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005370:	019b      	lsls	r3, r3, #6
 8005372:	431a      	orrs	r2, r3
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005378:	085b      	lsrs	r3, r3, #1
 800537a:	3b01      	subs	r3, #1
 800537c:	041b      	lsls	r3, r3, #16
 800537e:	431a      	orrs	r2, r3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005384:	061b      	lsls	r3, r3, #24
 8005386:	491b      	ldr	r1, [pc, #108]	@ (80053f4 <HAL_RCC_OscConfig+0x470>)
 8005388:	4313      	orrs	r3, r2
 800538a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800538c:	4b1b      	ldr	r3, [pc, #108]	@ (80053fc <HAL_RCC_OscConfig+0x478>)
 800538e:	2201      	movs	r2, #1
 8005390:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005392:	f7fd fd1f 	bl	8002dd4 <HAL_GetTick>
 8005396:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005398:	e008      	b.n	80053ac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800539a:	f7fd fd1b 	bl	8002dd4 <HAL_GetTick>
 800539e:	4602      	mov	r2, r0
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	1ad3      	subs	r3, r2, r3
 80053a4:	2b02      	cmp	r3, #2
 80053a6:	d901      	bls.n	80053ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80053a8:	2303      	movs	r3, #3
 80053aa:	e05c      	b.n	8005466 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053ac:	4b11      	ldr	r3, [pc, #68]	@ (80053f4 <HAL_RCC_OscConfig+0x470>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d0f0      	beq.n	800539a <HAL_RCC_OscConfig+0x416>
 80053b8:	e054      	b.n	8005464 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053ba:	4b10      	ldr	r3, [pc, #64]	@ (80053fc <HAL_RCC_OscConfig+0x478>)
 80053bc:	2200      	movs	r2, #0
 80053be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053c0:	f7fd fd08 	bl	8002dd4 <HAL_GetTick>
 80053c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053c6:	e008      	b.n	80053da <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053c8:	f7fd fd04 	bl	8002dd4 <HAL_GetTick>
 80053cc:	4602      	mov	r2, r0
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	1ad3      	subs	r3, r2, r3
 80053d2:	2b02      	cmp	r3, #2
 80053d4:	d901      	bls.n	80053da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80053d6:	2303      	movs	r3, #3
 80053d8:	e045      	b.n	8005466 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053da:	4b06      	ldr	r3, [pc, #24]	@ (80053f4 <HAL_RCC_OscConfig+0x470>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d1f0      	bne.n	80053c8 <HAL_RCC_OscConfig+0x444>
 80053e6:	e03d      	b.n	8005464 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	699b      	ldr	r3, [r3, #24]
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d107      	bne.n	8005400 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	e038      	b.n	8005466 <HAL_RCC_OscConfig+0x4e2>
 80053f4:	40023800 	.word	0x40023800
 80053f8:	40007000 	.word	0x40007000
 80053fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005400:	4b1b      	ldr	r3, [pc, #108]	@ (8005470 <HAL_RCC_OscConfig+0x4ec>)
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	699b      	ldr	r3, [r3, #24]
 800540a:	2b01      	cmp	r3, #1
 800540c:	d028      	beq.n	8005460 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005418:	429a      	cmp	r2, r3
 800541a:	d121      	bne.n	8005460 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005426:	429a      	cmp	r2, r3
 8005428:	d11a      	bne.n	8005460 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800542a:	68fa      	ldr	r2, [r7, #12]
 800542c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005430:	4013      	ands	r3, r2
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005436:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005438:	4293      	cmp	r3, r2
 800543a:	d111      	bne.n	8005460 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005446:	085b      	lsrs	r3, r3, #1
 8005448:	3b01      	subs	r3, #1
 800544a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800544c:	429a      	cmp	r2, r3
 800544e:	d107      	bne.n	8005460 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800545a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800545c:	429a      	cmp	r2, r3
 800545e:	d001      	beq.n	8005464 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	e000      	b.n	8005466 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005464:	2300      	movs	r3, #0
}
 8005466:	4618      	mov	r0, r3
 8005468:	3718      	adds	r7, #24
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	40023800 	.word	0x40023800

08005474 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d101      	bne.n	8005488 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	e0cc      	b.n	8005622 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005488:	4b68      	ldr	r3, [pc, #416]	@ (800562c <HAL_RCC_ClockConfig+0x1b8>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f003 0307 	and.w	r3, r3, #7
 8005490:	683a      	ldr	r2, [r7, #0]
 8005492:	429a      	cmp	r2, r3
 8005494:	d90c      	bls.n	80054b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005496:	4b65      	ldr	r3, [pc, #404]	@ (800562c <HAL_RCC_ClockConfig+0x1b8>)
 8005498:	683a      	ldr	r2, [r7, #0]
 800549a:	b2d2      	uxtb	r2, r2
 800549c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800549e:	4b63      	ldr	r3, [pc, #396]	@ (800562c <HAL_RCC_ClockConfig+0x1b8>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 0307 	and.w	r3, r3, #7
 80054a6:	683a      	ldr	r2, [r7, #0]
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d001      	beq.n	80054b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e0b8      	b.n	8005622 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 0302 	and.w	r3, r3, #2
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d020      	beq.n	80054fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 0304 	and.w	r3, r3, #4
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d005      	beq.n	80054d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80054c8:	4b59      	ldr	r3, [pc, #356]	@ (8005630 <HAL_RCC_ClockConfig+0x1bc>)
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	4a58      	ldr	r2, [pc, #352]	@ (8005630 <HAL_RCC_ClockConfig+0x1bc>)
 80054ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80054d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 0308 	and.w	r3, r3, #8
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d005      	beq.n	80054ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80054e0:	4b53      	ldr	r3, [pc, #332]	@ (8005630 <HAL_RCC_ClockConfig+0x1bc>)
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	4a52      	ldr	r2, [pc, #328]	@ (8005630 <HAL_RCC_ClockConfig+0x1bc>)
 80054e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80054ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054ec:	4b50      	ldr	r3, [pc, #320]	@ (8005630 <HAL_RCC_ClockConfig+0x1bc>)
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	494d      	ldr	r1, [pc, #308]	@ (8005630 <HAL_RCC_ClockConfig+0x1bc>)
 80054fa:	4313      	orrs	r3, r2
 80054fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 0301 	and.w	r3, r3, #1
 8005506:	2b00      	cmp	r3, #0
 8005508:	d044      	beq.n	8005594 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	2b01      	cmp	r3, #1
 8005510:	d107      	bne.n	8005522 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005512:	4b47      	ldr	r3, [pc, #284]	@ (8005630 <HAL_RCC_ClockConfig+0x1bc>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800551a:	2b00      	cmp	r3, #0
 800551c:	d119      	bne.n	8005552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e07f      	b.n	8005622 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	2b02      	cmp	r3, #2
 8005528:	d003      	beq.n	8005532 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800552e:	2b03      	cmp	r3, #3
 8005530:	d107      	bne.n	8005542 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005532:	4b3f      	ldr	r3, [pc, #252]	@ (8005630 <HAL_RCC_ClockConfig+0x1bc>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800553a:	2b00      	cmp	r3, #0
 800553c:	d109      	bne.n	8005552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e06f      	b.n	8005622 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005542:	4b3b      	ldr	r3, [pc, #236]	@ (8005630 <HAL_RCC_ClockConfig+0x1bc>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 0302 	and.w	r3, r3, #2
 800554a:	2b00      	cmp	r3, #0
 800554c:	d101      	bne.n	8005552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e067      	b.n	8005622 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005552:	4b37      	ldr	r3, [pc, #220]	@ (8005630 <HAL_RCC_ClockConfig+0x1bc>)
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	f023 0203 	bic.w	r2, r3, #3
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	4934      	ldr	r1, [pc, #208]	@ (8005630 <HAL_RCC_ClockConfig+0x1bc>)
 8005560:	4313      	orrs	r3, r2
 8005562:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005564:	f7fd fc36 	bl	8002dd4 <HAL_GetTick>
 8005568:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800556a:	e00a      	b.n	8005582 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800556c:	f7fd fc32 	bl	8002dd4 <HAL_GetTick>
 8005570:	4602      	mov	r2, r0
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	f241 3288 	movw	r2, #5000	@ 0x1388
 800557a:	4293      	cmp	r3, r2
 800557c:	d901      	bls.n	8005582 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800557e:	2303      	movs	r3, #3
 8005580:	e04f      	b.n	8005622 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005582:	4b2b      	ldr	r3, [pc, #172]	@ (8005630 <HAL_RCC_ClockConfig+0x1bc>)
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	f003 020c 	and.w	r2, r3, #12
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	429a      	cmp	r2, r3
 8005592:	d1eb      	bne.n	800556c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005594:	4b25      	ldr	r3, [pc, #148]	@ (800562c <HAL_RCC_ClockConfig+0x1b8>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f003 0307 	and.w	r3, r3, #7
 800559c:	683a      	ldr	r2, [r7, #0]
 800559e:	429a      	cmp	r2, r3
 80055a0:	d20c      	bcs.n	80055bc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055a2:	4b22      	ldr	r3, [pc, #136]	@ (800562c <HAL_RCC_ClockConfig+0x1b8>)
 80055a4:	683a      	ldr	r2, [r7, #0]
 80055a6:	b2d2      	uxtb	r2, r2
 80055a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055aa:	4b20      	ldr	r3, [pc, #128]	@ (800562c <HAL_RCC_ClockConfig+0x1b8>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 0307 	and.w	r3, r3, #7
 80055b2:	683a      	ldr	r2, [r7, #0]
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d001      	beq.n	80055bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	e032      	b.n	8005622 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 0304 	and.w	r3, r3, #4
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d008      	beq.n	80055da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055c8:	4b19      	ldr	r3, [pc, #100]	@ (8005630 <HAL_RCC_ClockConfig+0x1bc>)
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	4916      	ldr	r1, [pc, #88]	@ (8005630 <HAL_RCC_ClockConfig+0x1bc>)
 80055d6:	4313      	orrs	r3, r2
 80055d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f003 0308 	and.w	r3, r3, #8
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d009      	beq.n	80055fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80055e6:	4b12      	ldr	r3, [pc, #72]	@ (8005630 <HAL_RCC_ClockConfig+0x1bc>)
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	691b      	ldr	r3, [r3, #16]
 80055f2:	00db      	lsls	r3, r3, #3
 80055f4:	490e      	ldr	r1, [pc, #56]	@ (8005630 <HAL_RCC_ClockConfig+0x1bc>)
 80055f6:	4313      	orrs	r3, r2
 80055f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80055fa:	f000 f821 	bl	8005640 <HAL_RCC_GetSysClockFreq>
 80055fe:	4602      	mov	r2, r0
 8005600:	4b0b      	ldr	r3, [pc, #44]	@ (8005630 <HAL_RCC_ClockConfig+0x1bc>)
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	091b      	lsrs	r3, r3, #4
 8005606:	f003 030f 	and.w	r3, r3, #15
 800560a:	490a      	ldr	r1, [pc, #40]	@ (8005634 <HAL_RCC_ClockConfig+0x1c0>)
 800560c:	5ccb      	ldrb	r3, [r1, r3]
 800560e:	fa22 f303 	lsr.w	r3, r2, r3
 8005612:	4a09      	ldr	r2, [pc, #36]	@ (8005638 <HAL_RCC_ClockConfig+0x1c4>)
 8005614:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005616:	4b09      	ldr	r3, [pc, #36]	@ (800563c <HAL_RCC_ClockConfig+0x1c8>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4618      	mov	r0, r3
 800561c:	f7fd fb96 	bl	8002d4c <HAL_InitTick>

  return HAL_OK;
 8005620:	2300      	movs	r3, #0
}
 8005622:	4618      	mov	r0, r3
 8005624:	3710      	adds	r7, #16
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
 800562a:	bf00      	nop
 800562c:	40023c00 	.word	0x40023c00
 8005630:	40023800 	.word	0x40023800
 8005634:	08009bf4 	.word	0x08009bf4
 8005638:	20000000 	.word	0x20000000
 800563c:	20000004 	.word	0x20000004

08005640 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005640:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005644:	b090      	sub	sp, #64	@ 0x40
 8005646:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005648:	2300      	movs	r3, #0
 800564a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800564c:	2300      	movs	r3, #0
 800564e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8005650:	2300      	movs	r3, #0
 8005652:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8005654:	2300      	movs	r3, #0
 8005656:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005658:	4b59      	ldr	r3, [pc, #356]	@ (80057c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	f003 030c 	and.w	r3, r3, #12
 8005660:	2b08      	cmp	r3, #8
 8005662:	d00d      	beq.n	8005680 <HAL_RCC_GetSysClockFreq+0x40>
 8005664:	2b08      	cmp	r3, #8
 8005666:	f200 80a1 	bhi.w	80057ac <HAL_RCC_GetSysClockFreq+0x16c>
 800566a:	2b00      	cmp	r3, #0
 800566c:	d002      	beq.n	8005674 <HAL_RCC_GetSysClockFreq+0x34>
 800566e:	2b04      	cmp	r3, #4
 8005670:	d003      	beq.n	800567a <HAL_RCC_GetSysClockFreq+0x3a>
 8005672:	e09b      	b.n	80057ac <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005674:	4b53      	ldr	r3, [pc, #332]	@ (80057c4 <HAL_RCC_GetSysClockFreq+0x184>)
 8005676:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005678:	e09b      	b.n	80057b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800567a:	4b53      	ldr	r3, [pc, #332]	@ (80057c8 <HAL_RCC_GetSysClockFreq+0x188>)
 800567c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800567e:	e098      	b.n	80057b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005680:	4b4f      	ldr	r3, [pc, #316]	@ (80057c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005688:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800568a:	4b4d      	ldr	r3, [pc, #308]	@ (80057c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005692:	2b00      	cmp	r3, #0
 8005694:	d028      	beq.n	80056e8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005696:	4b4a      	ldr	r3, [pc, #296]	@ (80057c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	099b      	lsrs	r3, r3, #6
 800569c:	2200      	movs	r2, #0
 800569e:	623b      	str	r3, [r7, #32]
 80056a0:	627a      	str	r2, [r7, #36]	@ 0x24
 80056a2:	6a3b      	ldr	r3, [r7, #32]
 80056a4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80056a8:	2100      	movs	r1, #0
 80056aa:	4b47      	ldr	r3, [pc, #284]	@ (80057c8 <HAL_RCC_GetSysClockFreq+0x188>)
 80056ac:	fb03 f201 	mul.w	r2, r3, r1
 80056b0:	2300      	movs	r3, #0
 80056b2:	fb00 f303 	mul.w	r3, r0, r3
 80056b6:	4413      	add	r3, r2
 80056b8:	4a43      	ldr	r2, [pc, #268]	@ (80057c8 <HAL_RCC_GetSysClockFreq+0x188>)
 80056ba:	fba0 1202 	umull	r1, r2, r0, r2
 80056be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80056c0:	460a      	mov	r2, r1
 80056c2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80056c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80056c6:	4413      	add	r3, r2
 80056c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80056ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056cc:	2200      	movs	r2, #0
 80056ce:	61bb      	str	r3, [r7, #24]
 80056d0:	61fa      	str	r2, [r7, #28]
 80056d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80056d6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80056da:	f7fb fabd 	bl	8000c58 <__aeabi_uldivmod>
 80056de:	4602      	mov	r2, r0
 80056e0:	460b      	mov	r3, r1
 80056e2:	4613      	mov	r3, r2
 80056e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80056e6:	e053      	b.n	8005790 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056e8:	4b35      	ldr	r3, [pc, #212]	@ (80057c0 <HAL_RCC_GetSysClockFreq+0x180>)
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	099b      	lsrs	r3, r3, #6
 80056ee:	2200      	movs	r2, #0
 80056f0:	613b      	str	r3, [r7, #16]
 80056f2:	617a      	str	r2, [r7, #20]
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80056fa:	f04f 0b00 	mov.w	fp, #0
 80056fe:	4652      	mov	r2, sl
 8005700:	465b      	mov	r3, fp
 8005702:	f04f 0000 	mov.w	r0, #0
 8005706:	f04f 0100 	mov.w	r1, #0
 800570a:	0159      	lsls	r1, r3, #5
 800570c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005710:	0150      	lsls	r0, r2, #5
 8005712:	4602      	mov	r2, r0
 8005714:	460b      	mov	r3, r1
 8005716:	ebb2 080a 	subs.w	r8, r2, sl
 800571a:	eb63 090b 	sbc.w	r9, r3, fp
 800571e:	f04f 0200 	mov.w	r2, #0
 8005722:	f04f 0300 	mov.w	r3, #0
 8005726:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800572a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800572e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005732:	ebb2 0408 	subs.w	r4, r2, r8
 8005736:	eb63 0509 	sbc.w	r5, r3, r9
 800573a:	f04f 0200 	mov.w	r2, #0
 800573e:	f04f 0300 	mov.w	r3, #0
 8005742:	00eb      	lsls	r3, r5, #3
 8005744:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005748:	00e2      	lsls	r2, r4, #3
 800574a:	4614      	mov	r4, r2
 800574c:	461d      	mov	r5, r3
 800574e:	eb14 030a 	adds.w	r3, r4, sl
 8005752:	603b      	str	r3, [r7, #0]
 8005754:	eb45 030b 	adc.w	r3, r5, fp
 8005758:	607b      	str	r3, [r7, #4]
 800575a:	f04f 0200 	mov.w	r2, #0
 800575e:	f04f 0300 	mov.w	r3, #0
 8005762:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005766:	4629      	mov	r1, r5
 8005768:	028b      	lsls	r3, r1, #10
 800576a:	4621      	mov	r1, r4
 800576c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005770:	4621      	mov	r1, r4
 8005772:	028a      	lsls	r2, r1, #10
 8005774:	4610      	mov	r0, r2
 8005776:	4619      	mov	r1, r3
 8005778:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800577a:	2200      	movs	r2, #0
 800577c:	60bb      	str	r3, [r7, #8]
 800577e:	60fa      	str	r2, [r7, #12]
 8005780:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005784:	f7fb fa68 	bl	8000c58 <__aeabi_uldivmod>
 8005788:	4602      	mov	r2, r0
 800578a:	460b      	mov	r3, r1
 800578c:	4613      	mov	r3, r2
 800578e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005790:	4b0b      	ldr	r3, [pc, #44]	@ (80057c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	0c1b      	lsrs	r3, r3, #16
 8005796:	f003 0303 	and.w	r3, r3, #3
 800579a:	3301      	adds	r3, #1
 800579c:	005b      	lsls	r3, r3, #1
 800579e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80057a0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80057a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80057a8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80057aa:	e002      	b.n	80057b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80057ac:	4b05      	ldr	r3, [pc, #20]	@ (80057c4 <HAL_RCC_GetSysClockFreq+0x184>)
 80057ae:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80057b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80057b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3740      	adds	r7, #64	@ 0x40
 80057b8:	46bd      	mov	sp, r7
 80057ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057be:	bf00      	nop
 80057c0:	40023800 	.word	0x40023800
 80057c4:	00f42400 	.word	0x00f42400
 80057c8:	017d7840 	.word	0x017d7840

080057cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057cc:	b480      	push	{r7}
 80057ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057d0:	4b03      	ldr	r3, [pc, #12]	@ (80057e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80057d2:	681b      	ldr	r3, [r3, #0]
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr
 80057de:	bf00      	nop
 80057e0:	20000000 	.word	0x20000000

080057e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80057e8:	f7ff fff0 	bl	80057cc <HAL_RCC_GetHCLKFreq>
 80057ec:	4602      	mov	r2, r0
 80057ee:	4b05      	ldr	r3, [pc, #20]	@ (8005804 <HAL_RCC_GetPCLK1Freq+0x20>)
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	0a9b      	lsrs	r3, r3, #10
 80057f4:	f003 0307 	and.w	r3, r3, #7
 80057f8:	4903      	ldr	r1, [pc, #12]	@ (8005808 <HAL_RCC_GetPCLK1Freq+0x24>)
 80057fa:	5ccb      	ldrb	r3, [r1, r3]
 80057fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005800:	4618      	mov	r0, r3
 8005802:	bd80      	pop	{r7, pc}
 8005804:	40023800 	.word	0x40023800
 8005808:	08009c04 	.word	0x08009c04

0800580c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005810:	f7ff ffdc 	bl	80057cc <HAL_RCC_GetHCLKFreq>
 8005814:	4602      	mov	r2, r0
 8005816:	4b05      	ldr	r3, [pc, #20]	@ (800582c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	0b5b      	lsrs	r3, r3, #13
 800581c:	f003 0307 	and.w	r3, r3, #7
 8005820:	4903      	ldr	r1, [pc, #12]	@ (8005830 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005822:	5ccb      	ldrb	r3, [r1, r3]
 8005824:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005828:	4618      	mov	r0, r3
 800582a:	bd80      	pop	{r7, pc}
 800582c:	40023800 	.word	0x40023800
 8005830:	08009c04 	.word	0x08009c04

08005834 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b082      	sub	sp, #8
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d101      	bne.n	8005846 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	e041      	b.n	80058ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800584c:	b2db      	uxtb	r3, r3
 800584e:	2b00      	cmp	r3, #0
 8005850:	d106      	bne.n	8005860 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f7fd f996 	bl	8002b8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2202      	movs	r2, #2
 8005864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	3304      	adds	r3, #4
 8005870:	4619      	mov	r1, r3
 8005872:	4610      	mov	r0, r2
 8005874:	f000 f950 	bl	8005b18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2201      	movs	r2, #1
 8005884:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80058c8:	2300      	movs	r3, #0
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3708      	adds	r7, #8
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}
	...

080058d4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b085      	sub	sp, #20
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d001      	beq.n	80058ec <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	e03c      	b.n	8005966 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2202      	movs	r2, #2
 80058f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a1e      	ldr	r2, [pc, #120]	@ (8005974 <HAL_TIM_Base_Start+0xa0>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d018      	beq.n	8005930 <HAL_TIM_Base_Start+0x5c>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005906:	d013      	beq.n	8005930 <HAL_TIM_Base_Start+0x5c>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a1a      	ldr	r2, [pc, #104]	@ (8005978 <HAL_TIM_Base_Start+0xa4>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d00e      	beq.n	8005930 <HAL_TIM_Base_Start+0x5c>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a19      	ldr	r2, [pc, #100]	@ (800597c <HAL_TIM_Base_Start+0xa8>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d009      	beq.n	8005930 <HAL_TIM_Base_Start+0x5c>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a17      	ldr	r2, [pc, #92]	@ (8005980 <HAL_TIM_Base_Start+0xac>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d004      	beq.n	8005930 <HAL_TIM_Base_Start+0x5c>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a16      	ldr	r2, [pc, #88]	@ (8005984 <HAL_TIM_Base_Start+0xb0>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d111      	bne.n	8005954 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	f003 0307 	and.w	r3, r3, #7
 800593a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2b06      	cmp	r3, #6
 8005940:	d010      	beq.n	8005964 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f042 0201 	orr.w	r2, r2, #1
 8005950:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005952:	e007      	b.n	8005964 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f042 0201 	orr.w	r2, r2, #1
 8005962:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005964:	2300      	movs	r3, #0
}
 8005966:	4618      	mov	r0, r3
 8005968:	3714      	adds	r7, #20
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop
 8005974:	40010000 	.word	0x40010000
 8005978:	40000400 	.word	0x40000400
 800597c:	40000800 	.word	0x40000800
 8005980:	40000c00 	.word	0x40000c00
 8005984:	40014000 	.word	0x40014000

08005988 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005992:	2300      	movs	r3, #0
 8005994:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800599c:	2b01      	cmp	r3, #1
 800599e:	d101      	bne.n	80059a4 <HAL_TIM_ConfigClockSource+0x1c>
 80059a0:	2302      	movs	r3, #2
 80059a2:	e0b4      	b.n	8005b0e <HAL_TIM_ConfigClockSource+0x186>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2201      	movs	r2, #1
 80059a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2202      	movs	r2, #2
 80059b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80059c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80059ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	68ba      	ldr	r2, [r7, #8]
 80059d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80059dc:	d03e      	beq.n	8005a5c <HAL_TIM_ConfigClockSource+0xd4>
 80059de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80059e2:	f200 8087 	bhi.w	8005af4 <HAL_TIM_ConfigClockSource+0x16c>
 80059e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059ea:	f000 8086 	beq.w	8005afa <HAL_TIM_ConfigClockSource+0x172>
 80059ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059f2:	d87f      	bhi.n	8005af4 <HAL_TIM_ConfigClockSource+0x16c>
 80059f4:	2b70      	cmp	r3, #112	@ 0x70
 80059f6:	d01a      	beq.n	8005a2e <HAL_TIM_ConfigClockSource+0xa6>
 80059f8:	2b70      	cmp	r3, #112	@ 0x70
 80059fa:	d87b      	bhi.n	8005af4 <HAL_TIM_ConfigClockSource+0x16c>
 80059fc:	2b60      	cmp	r3, #96	@ 0x60
 80059fe:	d050      	beq.n	8005aa2 <HAL_TIM_ConfigClockSource+0x11a>
 8005a00:	2b60      	cmp	r3, #96	@ 0x60
 8005a02:	d877      	bhi.n	8005af4 <HAL_TIM_ConfigClockSource+0x16c>
 8005a04:	2b50      	cmp	r3, #80	@ 0x50
 8005a06:	d03c      	beq.n	8005a82 <HAL_TIM_ConfigClockSource+0xfa>
 8005a08:	2b50      	cmp	r3, #80	@ 0x50
 8005a0a:	d873      	bhi.n	8005af4 <HAL_TIM_ConfigClockSource+0x16c>
 8005a0c:	2b40      	cmp	r3, #64	@ 0x40
 8005a0e:	d058      	beq.n	8005ac2 <HAL_TIM_ConfigClockSource+0x13a>
 8005a10:	2b40      	cmp	r3, #64	@ 0x40
 8005a12:	d86f      	bhi.n	8005af4 <HAL_TIM_ConfigClockSource+0x16c>
 8005a14:	2b30      	cmp	r3, #48	@ 0x30
 8005a16:	d064      	beq.n	8005ae2 <HAL_TIM_ConfigClockSource+0x15a>
 8005a18:	2b30      	cmp	r3, #48	@ 0x30
 8005a1a:	d86b      	bhi.n	8005af4 <HAL_TIM_ConfigClockSource+0x16c>
 8005a1c:	2b20      	cmp	r3, #32
 8005a1e:	d060      	beq.n	8005ae2 <HAL_TIM_ConfigClockSource+0x15a>
 8005a20:	2b20      	cmp	r3, #32
 8005a22:	d867      	bhi.n	8005af4 <HAL_TIM_ConfigClockSource+0x16c>
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d05c      	beq.n	8005ae2 <HAL_TIM_ConfigClockSource+0x15a>
 8005a28:	2b10      	cmp	r3, #16
 8005a2a:	d05a      	beq.n	8005ae2 <HAL_TIM_ConfigClockSource+0x15a>
 8005a2c:	e062      	b.n	8005af4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005a3e:	f000 f96b 	bl	8005d18 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005a50:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	68ba      	ldr	r2, [r7, #8]
 8005a58:	609a      	str	r2, [r3, #8]
      break;
 8005a5a:	e04f      	b.n	8005afc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005a6c:	f000 f954 	bl	8005d18 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	689a      	ldr	r2, [r3, #8]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005a7e:	609a      	str	r2, [r3, #8]
      break;
 8005a80:	e03c      	b.n	8005afc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a8e:	461a      	mov	r2, r3
 8005a90:	f000 f8c8 	bl	8005c24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	2150      	movs	r1, #80	@ 0x50
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f000 f921 	bl	8005ce2 <TIM_ITRx_SetConfig>
      break;
 8005aa0:	e02c      	b.n	8005afc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005aae:	461a      	mov	r2, r3
 8005ab0:	f000 f8e7 	bl	8005c82 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	2160      	movs	r1, #96	@ 0x60
 8005aba:	4618      	mov	r0, r3
 8005abc:	f000 f911 	bl	8005ce2 <TIM_ITRx_SetConfig>
      break;
 8005ac0:	e01c      	b.n	8005afc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ace:	461a      	mov	r2, r3
 8005ad0:	f000 f8a8 	bl	8005c24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	2140      	movs	r1, #64	@ 0x40
 8005ada:	4618      	mov	r0, r3
 8005adc:	f000 f901 	bl	8005ce2 <TIM_ITRx_SetConfig>
      break;
 8005ae0:	e00c      	b.n	8005afc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4619      	mov	r1, r3
 8005aec:	4610      	mov	r0, r2
 8005aee:	f000 f8f8 	bl	8005ce2 <TIM_ITRx_SetConfig>
      break;
 8005af2:	e003      	b.n	8005afc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	73fb      	strb	r3, [r7, #15]
      break;
 8005af8:	e000      	b.n	8005afc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005afa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2201      	movs	r2, #1
 8005b00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2200      	movs	r2, #0
 8005b08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3710      	adds	r7, #16
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
	...

08005b18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b085      	sub	sp, #20
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	4a37      	ldr	r2, [pc, #220]	@ (8005c08 <TIM_Base_SetConfig+0xf0>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d00f      	beq.n	8005b50 <TIM_Base_SetConfig+0x38>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b36:	d00b      	beq.n	8005b50 <TIM_Base_SetConfig+0x38>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	4a34      	ldr	r2, [pc, #208]	@ (8005c0c <TIM_Base_SetConfig+0xf4>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d007      	beq.n	8005b50 <TIM_Base_SetConfig+0x38>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	4a33      	ldr	r2, [pc, #204]	@ (8005c10 <TIM_Base_SetConfig+0xf8>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d003      	beq.n	8005b50 <TIM_Base_SetConfig+0x38>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	4a32      	ldr	r2, [pc, #200]	@ (8005c14 <TIM_Base_SetConfig+0xfc>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d108      	bne.n	8005b62 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	68fa      	ldr	r2, [r7, #12]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a28      	ldr	r2, [pc, #160]	@ (8005c08 <TIM_Base_SetConfig+0xf0>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d01b      	beq.n	8005ba2 <TIM_Base_SetConfig+0x8a>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b70:	d017      	beq.n	8005ba2 <TIM_Base_SetConfig+0x8a>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4a25      	ldr	r2, [pc, #148]	@ (8005c0c <TIM_Base_SetConfig+0xf4>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d013      	beq.n	8005ba2 <TIM_Base_SetConfig+0x8a>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4a24      	ldr	r2, [pc, #144]	@ (8005c10 <TIM_Base_SetConfig+0xf8>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d00f      	beq.n	8005ba2 <TIM_Base_SetConfig+0x8a>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4a23      	ldr	r2, [pc, #140]	@ (8005c14 <TIM_Base_SetConfig+0xfc>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d00b      	beq.n	8005ba2 <TIM_Base_SetConfig+0x8a>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4a22      	ldr	r2, [pc, #136]	@ (8005c18 <TIM_Base_SetConfig+0x100>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d007      	beq.n	8005ba2 <TIM_Base_SetConfig+0x8a>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4a21      	ldr	r2, [pc, #132]	@ (8005c1c <TIM_Base_SetConfig+0x104>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d003      	beq.n	8005ba2 <TIM_Base_SetConfig+0x8a>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4a20      	ldr	r2, [pc, #128]	@ (8005c20 <TIM_Base_SetConfig+0x108>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d108      	bne.n	8005bb4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ba8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	68fa      	ldr	r2, [r7, #12]
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	695b      	ldr	r3, [r3, #20]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	689a      	ldr	r2, [r3, #8]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	4a0c      	ldr	r2, [pc, #48]	@ (8005c08 <TIM_Base_SetConfig+0xf0>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d103      	bne.n	8005be2 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	691a      	ldr	r2, [r3, #16]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f043 0204 	orr.w	r2, r3, #4
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	601a      	str	r2, [r3, #0]
}
 8005bfa:	bf00      	nop
 8005bfc:	3714      	adds	r7, #20
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr
 8005c06:	bf00      	nop
 8005c08:	40010000 	.word	0x40010000
 8005c0c:	40000400 	.word	0x40000400
 8005c10:	40000800 	.word	0x40000800
 8005c14:	40000c00 	.word	0x40000c00
 8005c18:	40014000 	.word	0x40014000
 8005c1c:	40014400 	.word	0x40014400
 8005c20:	40014800 	.word	0x40014800

08005c24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b087      	sub	sp, #28
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	60b9      	str	r1, [r7, #8]
 8005c2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	6a1b      	ldr	r3, [r3, #32]
 8005c34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	6a1b      	ldr	r3, [r3, #32]
 8005c3a:	f023 0201 	bic.w	r2, r3, #1
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	699b      	ldr	r3, [r3, #24]
 8005c46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005c4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	011b      	lsls	r3, r3, #4
 8005c54:	693a      	ldr	r2, [r7, #16]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	f023 030a 	bic.w	r3, r3, #10
 8005c60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c62:	697a      	ldr	r2, [r7, #20]
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	693a      	ldr	r2, [r7, #16]
 8005c6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	697a      	ldr	r2, [r7, #20]
 8005c74:	621a      	str	r2, [r3, #32]
}
 8005c76:	bf00      	nop
 8005c78:	371c      	adds	r7, #28
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr

08005c82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c82:	b480      	push	{r7}
 8005c84:	b087      	sub	sp, #28
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	60f8      	str	r0, [r7, #12]
 8005c8a:	60b9      	str	r1, [r7, #8]
 8005c8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	6a1b      	ldr	r3, [r3, #32]
 8005c92:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6a1b      	ldr	r3, [r3, #32]
 8005c98:	f023 0210 	bic.w	r2, r3, #16
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	699b      	ldr	r3, [r3, #24]
 8005ca4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005cac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	031b      	lsls	r3, r3, #12
 8005cb2:	693a      	ldr	r2, [r7, #16]
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005cbe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	011b      	lsls	r3, r3, #4
 8005cc4:	697a      	ldr	r2, [r7, #20]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	693a      	ldr	r2, [r7, #16]
 8005cce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	697a      	ldr	r2, [r7, #20]
 8005cd4:	621a      	str	r2, [r3, #32]
}
 8005cd6:	bf00      	nop
 8005cd8:	371c      	adds	r7, #28
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr

08005ce2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005ce2:	b480      	push	{r7}
 8005ce4:	b085      	sub	sp, #20
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	6078      	str	r0, [r7, #4]
 8005cea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cf8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005cfa:	683a      	ldr	r2, [r7, #0]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	f043 0307 	orr.w	r3, r3, #7
 8005d04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	68fa      	ldr	r2, [r7, #12]
 8005d0a:	609a      	str	r2, [r3, #8]
}
 8005d0c:	bf00      	nop
 8005d0e:	3714      	adds	r7, #20
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr

08005d18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b087      	sub	sp, #28
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	60f8      	str	r0, [r7, #12]
 8005d20:	60b9      	str	r1, [r7, #8]
 8005d22:	607a      	str	r2, [r7, #4]
 8005d24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005d32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	021a      	lsls	r2, r3, #8
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	431a      	orrs	r2, r3
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	697a      	ldr	r2, [r7, #20]
 8005d42:	4313      	orrs	r3, r2
 8005d44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	697a      	ldr	r2, [r7, #20]
 8005d4a:	609a      	str	r2, [r3, #8]
}
 8005d4c:	bf00      	nop
 8005d4e:	371c      	adds	r7, #28
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr

08005d58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b085      	sub	sp, #20
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d101      	bne.n	8005d70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d6c:	2302      	movs	r3, #2
 8005d6e:	e050      	b.n	8005e12 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2202      	movs	r2, #2
 8005d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	68fa      	ldr	r2, [r7, #12]
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	68fa      	ldr	r2, [r7, #12]
 8005da8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a1c      	ldr	r2, [pc, #112]	@ (8005e20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d018      	beq.n	8005de6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005dbc:	d013      	beq.n	8005de6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a18      	ldr	r2, [pc, #96]	@ (8005e24 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d00e      	beq.n	8005de6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a16      	ldr	r2, [pc, #88]	@ (8005e28 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d009      	beq.n	8005de6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a15      	ldr	r2, [pc, #84]	@ (8005e2c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d004      	beq.n	8005de6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a13      	ldr	r2, [pc, #76]	@ (8005e30 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d10c      	bne.n	8005e00 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005dec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	68ba      	ldr	r2, [r7, #8]
 8005df4:	4313      	orrs	r3, r2
 8005df6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	68ba      	ldr	r2, [r7, #8]
 8005dfe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3714      	adds	r7, #20
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr
 8005e1e:	bf00      	nop
 8005e20:	40010000 	.word	0x40010000
 8005e24:	40000400 	.word	0x40000400
 8005e28:	40000800 	.word	0x40000800
 8005e2c:	40000c00 	.word	0x40000c00
 8005e30:	40014000 	.word	0x40014000

08005e34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b082      	sub	sp, #8
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d101      	bne.n	8005e46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	e042      	b.n	8005ecc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d106      	bne.n	8005e60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2200      	movs	r2, #0
 8005e56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f7fc fee2 	bl	8002c24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2224      	movs	r2, #36	@ 0x24
 8005e64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	68da      	ldr	r2, [r3, #12]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005e76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f000 f82b 	bl	8005ed4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	691a      	ldr	r2, [r3, #16]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005e8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	695a      	ldr	r2, [r3, #20]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005e9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	68da      	ldr	r2, [r3, #12]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005eac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2220      	movs	r2, #32
 8005eb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2220      	movs	r2, #32
 8005ec0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005eca:	2300      	movs	r3, #0
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3708      	adds	r7, #8
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}

08005ed4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ed4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ed8:	b0c0      	sub	sp, #256	@ 0x100
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	691b      	ldr	r3, [r3, #16]
 8005ee8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ef0:	68d9      	ldr	r1, [r3, #12]
 8005ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	ea40 0301 	orr.w	r3, r0, r1
 8005efc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f02:	689a      	ldr	r2, [r3, #8]
 8005f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f08:	691b      	ldr	r3, [r3, #16]
 8005f0a:	431a      	orrs	r2, r3
 8005f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f10:	695b      	ldr	r3, [r3, #20]
 8005f12:	431a      	orrs	r2, r3
 8005f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f18:	69db      	ldr	r3, [r3, #28]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005f2c:	f021 010c 	bic.w	r1, r1, #12
 8005f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005f3a:	430b      	orrs	r3, r1
 8005f3c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005f3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	695b      	ldr	r3, [r3, #20]
 8005f46:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005f4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f4e:	6999      	ldr	r1, [r3, #24]
 8005f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	ea40 0301 	orr.w	r3, r0, r1
 8005f5a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	4b8f      	ldr	r3, [pc, #572]	@ (80061a0 <UART_SetConfig+0x2cc>)
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d005      	beq.n	8005f74 <UART_SetConfig+0xa0>
 8005f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	4b8d      	ldr	r3, [pc, #564]	@ (80061a4 <UART_SetConfig+0x2d0>)
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d104      	bne.n	8005f7e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005f74:	f7ff fc4a 	bl	800580c <HAL_RCC_GetPCLK2Freq>
 8005f78:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005f7c:	e003      	b.n	8005f86 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005f7e:	f7ff fc31 	bl	80057e4 <HAL_RCC_GetPCLK1Freq>
 8005f82:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f8a:	69db      	ldr	r3, [r3, #28]
 8005f8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f90:	f040 810c 	bne.w	80061ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005f94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005f9e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005fa2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005fa6:	4622      	mov	r2, r4
 8005fa8:	462b      	mov	r3, r5
 8005faa:	1891      	adds	r1, r2, r2
 8005fac:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005fae:	415b      	adcs	r3, r3
 8005fb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005fb2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005fb6:	4621      	mov	r1, r4
 8005fb8:	eb12 0801 	adds.w	r8, r2, r1
 8005fbc:	4629      	mov	r1, r5
 8005fbe:	eb43 0901 	adc.w	r9, r3, r1
 8005fc2:	f04f 0200 	mov.w	r2, #0
 8005fc6:	f04f 0300 	mov.w	r3, #0
 8005fca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005fce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005fd2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005fd6:	4690      	mov	r8, r2
 8005fd8:	4699      	mov	r9, r3
 8005fda:	4623      	mov	r3, r4
 8005fdc:	eb18 0303 	adds.w	r3, r8, r3
 8005fe0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005fe4:	462b      	mov	r3, r5
 8005fe6:	eb49 0303 	adc.w	r3, r9, r3
 8005fea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005ffa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005ffe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006002:	460b      	mov	r3, r1
 8006004:	18db      	adds	r3, r3, r3
 8006006:	653b      	str	r3, [r7, #80]	@ 0x50
 8006008:	4613      	mov	r3, r2
 800600a:	eb42 0303 	adc.w	r3, r2, r3
 800600e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006010:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006014:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006018:	f7fa fe1e 	bl	8000c58 <__aeabi_uldivmod>
 800601c:	4602      	mov	r2, r0
 800601e:	460b      	mov	r3, r1
 8006020:	4b61      	ldr	r3, [pc, #388]	@ (80061a8 <UART_SetConfig+0x2d4>)
 8006022:	fba3 2302 	umull	r2, r3, r3, r2
 8006026:	095b      	lsrs	r3, r3, #5
 8006028:	011c      	lsls	r4, r3, #4
 800602a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800602e:	2200      	movs	r2, #0
 8006030:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006034:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006038:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800603c:	4642      	mov	r2, r8
 800603e:	464b      	mov	r3, r9
 8006040:	1891      	adds	r1, r2, r2
 8006042:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006044:	415b      	adcs	r3, r3
 8006046:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006048:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800604c:	4641      	mov	r1, r8
 800604e:	eb12 0a01 	adds.w	sl, r2, r1
 8006052:	4649      	mov	r1, r9
 8006054:	eb43 0b01 	adc.w	fp, r3, r1
 8006058:	f04f 0200 	mov.w	r2, #0
 800605c:	f04f 0300 	mov.w	r3, #0
 8006060:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006064:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006068:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800606c:	4692      	mov	sl, r2
 800606e:	469b      	mov	fp, r3
 8006070:	4643      	mov	r3, r8
 8006072:	eb1a 0303 	adds.w	r3, sl, r3
 8006076:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800607a:	464b      	mov	r3, r9
 800607c:	eb4b 0303 	adc.w	r3, fp, r3
 8006080:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006090:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006094:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006098:	460b      	mov	r3, r1
 800609a:	18db      	adds	r3, r3, r3
 800609c:	643b      	str	r3, [r7, #64]	@ 0x40
 800609e:	4613      	mov	r3, r2
 80060a0:	eb42 0303 	adc.w	r3, r2, r3
 80060a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80060a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80060aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80060ae:	f7fa fdd3 	bl	8000c58 <__aeabi_uldivmod>
 80060b2:	4602      	mov	r2, r0
 80060b4:	460b      	mov	r3, r1
 80060b6:	4611      	mov	r1, r2
 80060b8:	4b3b      	ldr	r3, [pc, #236]	@ (80061a8 <UART_SetConfig+0x2d4>)
 80060ba:	fba3 2301 	umull	r2, r3, r3, r1
 80060be:	095b      	lsrs	r3, r3, #5
 80060c0:	2264      	movs	r2, #100	@ 0x64
 80060c2:	fb02 f303 	mul.w	r3, r2, r3
 80060c6:	1acb      	subs	r3, r1, r3
 80060c8:	00db      	lsls	r3, r3, #3
 80060ca:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80060ce:	4b36      	ldr	r3, [pc, #216]	@ (80061a8 <UART_SetConfig+0x2d4>)
 80060d0:	fba3 2302 	umull	r2, r3, r3, r2
 80060d4:	095b      	lsrs	r3, r3, #5
 80060d6:	005b      	lsls	r3, r3, #1
 80060d8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80060dc:	441c      	add	r4, r3
 80060de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060e2:	2200      	movs	r2, #0
 80060e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80060e8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80060ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80060f0:	4642      	mov	r2, r8
 80060f2:	464b      	mov	r3, r9
 80060f4:	1891      	adds	r1, r2, r2
 80060f6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80060f8:	415b      	adcs	r3, r3
 80060fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80060fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006100:	4641      	mov	r1, r8
 8006102:	1851      	adds	r1, r2, r1
 8006104:	6339      	str	r1, [r7, #48]	@ 0x30
 8006106:	4649      	mov	r1, r9
 8006108:	414b      	adcs	r3, r1
 800610a:	637b      	str	r3, [r7, #52]	@ 0x34
 800610c:	f04f 0200 	mov.w	r2, #0
 8006110:	f04f 0300 	mov.w	r3, #0
 8006114:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006118:	4659      	mov	r1, fp
 800611a:	00cb      	lsls	r3, r1, #3
 800611c:	4651      	mov	r1, sl
 800611e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006122:	4651      	mov	r1, sl
 8006124:	00ca      	lsls	r2, r1, #3
 8006126:	4610      	mov	r0, r2
 8006128:	4619      	mov	r1, r3
 800612a:	4603      	mov	r3, r0
 800612c:	4642      	mov	r2, r8
 800612e:	189b      	adds	r3, r3, r2
 8006130:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006134:	464b      	mov	r3, r9
 8006136:	460a      	mov	r2, r1
 8006138:	eb42 0303 	adc.w	r3, r2, r3
 800613c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	2200      	movs	r2, #0
 8006148:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800614c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006150:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006154:	460b      	mov	r3, r1
 8006156:	18db      	adds	r3, r3, r3
 8006158:	62bb      	str	r3, [r7, #40]	@ 0x28
 800615a:	4613      	mov	r3, r2
 800615c:	eb42 0303 	adc.w	r3, r2, r3
 8006160:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006162:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006166:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800616a:	f7fa fd75 	bl	8000c58 <__aeabi_uldivmod>
 800616e:	4602      	mov	r2, r0
 8006170:	460b      	mov	r3, r1
 8006172:	4b0d      	ldr	r3, [pc, #52]	@ (80061a8 <UART_SetConfig+0x2d4>)
 8006174:	fba3 1302 	umull	r1, r3, r3, r2
 8006178:	095b      	lsrs	r3, r3, #5
 800617a:	2164      	movs	r1, #100	@ 0x64
 800617c:	fb01 f303 	mul.w	r3, r1, r3
 8006180:	1ad3      	subs	r3, r2, r3
 8006182:	00db      	lsls	r3, r3, #3
 8006184:	3332      	adds	r3, #50	@ 0x32
 8006186:	4a08      	ldr	r2, [pc, #32]	@ (80061a8 <UART_SetConfig+0x2d4>)
 8006188:	fba2 2303 	umull	r2, r3, r2, r3
 800618c:	095b      	lsrs	r3, r3, #5
 800618e:	f003 0207 	and.w	r2, r3, #7
 8006192:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4422      	add	r2, r4
 800619a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800619c:	e106      	b.n	80063ac <UART_SetConfig+0x4d8>
 800619e:	bf00      	nop
 80061a0:	40011000 	.word	0x40011000
 80061a4:	40011400 	.word	0x40011400
 80061a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80061ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061b0:	2200      	movs	r2, #0
 80061b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80061b6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80061ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80061be:	4642      	mov	r2, r8
 80061c0:	464b      	mov	r3, r9
 80061c2:	1891      	adds	r1, r2, r2
 80061c4:	6239      	str	r1, [r7, #32]
 80061c6:	415b      	adcs	r3, r3
 80061c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80061ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80061ce:	4641      	mov	r1, r8
 80061d0:	1854      	adds	r4, r2, r1
 80061d2:	4649      	mov	r1, r9
 80061d4:	eb43 0501 	adc.w	r5, r3, r1
 80061d8:	f04f 0200 	mov.w	r2, #0
 80061dc:	f04f 0300 	mov.w	r3, #0
 80061e0:	00eb      	lsls	r3, r5, #3
 80061e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80061e6:	00e2      	lsls	r2, r4, #3
 80061e8:	4614      	mov	r4, r2
 80061ea:	461d      	mov	r5, r3
 80061ec:	4643      	mov	r3, r8
 80061ee:	18e3      	adds	r3, r4, r3
 80061f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80061f4:	464b      	mov	r3, r9
 80061f6:	eb45 0303 	adc.w	r3, r5, r3
 80061fa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80061fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	2200      	movs	r2, #0
 8006206:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800620a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800620e:	f04f 0200 	mov.w	r2, #0
 8006212:	f04f 0300 	mov.w	r3, #0
 8006216:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800621a:	4629      	mov	r1, r5
 800621c:	008b      	lsls	r3, r1, #2
 800621e:	4621      	mov	r1, r4
 8006220:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006224:	4621      	mov	r1, r4
 8006226:	008a      	lsls	r2, r1, #2
 8006228:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800622c:	f7fa fd14 	bl	8000c58 <__aeabi_uldivmod>
 8006230:	4602      	mov	r2, r0
 8006232:	460b      	mov	r3, r1
 8006234:	4b60      	ldr	r3, [pc, #384]	@ (80063b8 <UART_SetConfig+0x4e4>)
 8006236:	fba3 2302 	umull	r2, r3, r3, r2
 800623a:	095b      	lsrs	r3, r3, #5
 800623c:	011c      	lsls	r4, r3, #4
 800623e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006242:	2200      	movs	r2, #0
 8006244:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006248:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800624c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006250:	4642      	mov	r2, r8
 8006252:	464b      	mov	r3, r9
 8006254:	1891      	adds	r1, r2, r2
 8006256:	61b9      	str	r1, [r7, #24]
 8006258:	415b      	adcs	r3, r3
 800625a:	61fb      	str	r3, [r7, #28]
 800625c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006260:	4641      	mov	r1, r8
 8006262:	1851      	adds	r1, r2, r1
 8006264:	6139      	str	r1, [r7, #16]
 8006266:	4649      	mov	r1, r9
 8006268:	414b      	adcs	r3, r1
 800626a:	617b      	str	r3, [r7, #20]
 800626c:	f04f 0200 	mov.w	r2, #0
 8006270:	f04f 0300 	mov.w	r3, #0
 8006274:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006278:	4659      	mov	r1, fp
 800627a:	00cb      	lsls	r3, r1, #3
 800627c:	4651      	mov	r1, sl
 800627e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006282:	4651      	mov	r1, sl
 8006284:	00ca      	lsls	r2, r1, #3
 8006286:	4610      	mov	r0, r2
 8006288:	4619      	mov	r1, r3
 800628a:	4603      	mov	r3, r0
 800628c:	4642      	mov	r2, r8
 800628e:	189b      	adds	r3, r3, r2
 8006290:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006294:	464b      	mov	r3, r9
 8006296:	460a      	mov	r2, r1
 8006298:	eb42 0303 	adc.w	r3, r2, r3
 800629c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80062a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	2200      	movs	r2, #0
 80062a8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80062aa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80062ac:	f04f 0200 	mov.w	r2, #0
 80062b0:	f04f 0300 	mov.w	r3, #0
 80062b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80062b8:	4649      	mov	r1, r9
 80062ba:	008b      	lsls	r3, r1, #2
 80062bc:	4641      	mov	r1, r8
 80062be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80062c2:	4641      	mov	r1, r8
 80062c4:	008a      	lsls	r2, r1, #2
 80062c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80062ca:	f7fa fcc5 	bl	8000c58 <__aeabi_uldivmod>
 80062ce:	4602      	mov	r2, r0
 80062d0:	460b      	mov	r3, r1
 80062d2:	4611      	mov	r1, r2
 80062d4:	4b38      	ldr	r3, [pc, #224]	@ (80063b8 <UART_SetConfig+0x4e4>)
 80062d6:	fba3 2301 	umull	r2, r3, r3, r1
 80062da:	095b      	lsrs	r3, r3, #5
 80062dc:	2264      	movs	r2, #100	@ 0x64
 80062de:	fb02 f303 	mul.w	r3, r2, r3
 80062e2:	1acb      	subs	r3, r1, r3
 80062e4:	011b      	lsls	r3, r3, #4
 80062e6:	3332      	adds	r3, #50	@ 0x32
 80062e8:	4a33      	ldr	r2, [pc, #204]	@ (80063b8 <UART_SetConfig+0x4e4>)
 80062ea:	fba2 2303 	umull	r2, r3, r2, r3
 80062ee:	095b      	lsrs	r3, r3, #5
 80062f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80062f4:	441c      	add	r4, r3
 80062f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062fa:	2200      	movs	r2, #0
 80062fc:	673b      	str	r3, [r7, #112]	@ 0x70
 80062fe:	677a      	str	r2, [r7, #116]	@ 0x74
 8006300:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006304:	4642      	mov	r2, r8
 8006306:	464b      	mov	r3, r9
 8006308:	1891      	adds	r1, r2, r2
 800630a:	60b9      	str	r1, [r7, #8]
 800630c:	415b      	adcs	r3, r3
 800630e:	60fb      	str	r3, [r7, #12]
 8006310:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006314:	4641      	mov	r1, r8
 8006316:	1851      	adds	r1, r2, r1
 8006318:	6039      	str	r1, [r7, #0]
 800631a:	4649      	mov	r1, r9
 800631c:	414b      	adcs	r3, r1
 800631e:	607b      	str	r3, [r7, #4]
 8006320:	f04f 0200 	mov.w	r2, #0
 8006324:	f04f 0300 	mov.w	r3, #0
 8006328:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800632c:	4659      	mov	r1, fp
 800632e:	00cb      	lsls	r3, r1, #3
 8006330:	4651      	mov	r1, sl
 8006332:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006336:	4651      	mov	r1, sl
 8006338:	00ca      	lsls	r2, r1, #3
 800633a:	4610      	mov	r0, r2
 800633c:	4619      	mov	r1, r3
 800633e:	4603      	mov	r3, r0
 8006340:	4642      	mov	r2, r8
 8006342:	189b      	adds	r3, r3, r2
 8006344:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006346:	464b      	mov	r3, r9
 8006348:	460a      	mov	r2, r1
 800634a:	eb42 0303 	adc.w	r3, r2, r3
 800634e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	2200      	movs	r2, #0
 8006358:	663b      	str	r3, [r7, #96]	@ 0x60
 800635a:	667a      	str	r2, [r7, #100]	@ 0x64
 800635c:	f04f 0200 	mov.w	r2, #0
 8006360:	f04f 0300 	mov.w	r3, #0
 8006364:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006368:	4649      	mov	r1, r9
 800636a:	008b      	lsls	r3, r1, #2
 800636c:	4641      	mov	r1, r8
 800636e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006372:	4641      	mov	r1, r8
 8006374:	008a      	lsls	r2, r1, #2
 8006376:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800637a:	f7fa fc6d 	bl	8000c58 <__aeabi_uldivmod>
 800637e:	4602      	mov	r2, r0
 8006380:	460b      	mov	r3, r1
 8006382:	4b0d      	ldr	r3, [pc, #52]	@ (80063b8 <UART_SetConfig+0x4e4>)
 8006384:	fba3 1302 	umull	r1, r3, r3, r2
 8006388:	095b      	lsrs	r3, r3, #5
 800638a:	2164      	movs	r1, #100	@ 0x64
 800638c:	fb01 f303 	mul.w	r3, r1, r3
 8006390:	1ad3      	subs	r3, r2, r3
 8006392:	011b      	lsls	r3, r3, #4
 8006394:	3332      	adds	r3, #50	@ 0x32
 8006396:	4a08      	ldr	r2, [pc, #32]	@ (80063b8 <UART_SetConfig+0x4e4>)
 8006398:	fba2 2303 	umull	r2, r3, r2, r3
 800639c:	095b      	lsrs	r3, r3, #5
 800639e:	f003 020f 	and.w	r2, r3, #15
 80063a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4422      	add	r2, r4
 80063aa:	609a      	str	r2, [r3, #8]
}
 80063ac:	bf00      	nop
 80063ae:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80063b2:	46bd      	mov	sp, r7
 80063b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80063b8:	51eb851f 	.word	0x51eb851f

080063bc <__cvt>:
 80063bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063c0:	ec57 6b10 	vmov	r6, r7, d0
 80063c4:	2f00      	cmp	r7, #0
 80063c6:	460c      	mov	r4, r1
 80063c8:	4619      	mov	r1, r3
 80063ca:	463b      	mov	r3, r7
 80063cc:	bfbb      	ittet	lt
 80063ce:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80063d2:	461f      	movlt	r7, r3
 80063d4:	2300      	movge	r3, #0
 80063d6:	232d      	movlt	r3, #45	@ 0x2d
 80063d8:	700b      	strb	r3, [r1, #0]
 80063da:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80063dc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80063e0:	4691      	mov	r9, r2
 80063e2:	f023 0820 	bic.w	r8, r3, #32
 80063e6:	bfbc      	itt	lt
 80063e8:	4632      	movlt	r2, r6
 80063ea:	4616      	movlt	r6, r2
 80063ec:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80063f0:	d005      	beq.n	80063fe <__cvt+0x42>
 80063f2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80063f6:	d100      	bne.n	80063fa <__cvt+0x3e>
 80063f8:	3401      	adds	r4, #1
 80063fa:	2102      	movs	r1, #2
 80063fc:	e000      	b.n	8006400 <__cvt+0x44>
 80063fe:	2103      	movs	r1, #3
 8006400:	ab03      	add	r3, sp, #12
 8006402:	9301      	str	r3, [sp, #4]
 8006404:	ab02      	add	r3, sp, #8
 8006406:	9300      	str	r3, [sp, #0]
 8006408:	ec47 6b10 	vmov	d0, r6, r7
 800640c:	4653      	mov	r3, sl
 800640e:	4622      	mov	r2, r4
 8006410:	f000 fe7a 	bl	8007108 <_dtoa_r>
 8006414:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006418:	4605      	mov	r5, r0
 800641a:	d119      	bne.n	8006450 <__cvt+0x94>
 800641c:	f019 0f01 	tst.w	r9, #1
 8006420:	d00e      	beq.n	8006440 <__cvt+0x84>
 8006422:	eb00 0904 	add.w	r9, r0, r4
 8006426:	2200      	movs	r2, #0
 8006428:	2300      	movs	r3, #0
 800642a:	4630      	mov	r0, r6
 800642c:	4639      	mov	r1, r7
 800642e:	f7fa fb53 	bl	8000ad8 <__aeabi_dcmpeq>
 8006432:	b108      	cbz	r0, 8006438 <__cvt+0x7c>
 8006434:	f8cd 900c 	str.w	r9, [sp, #12]
 8006438:	2230      	movs	r2, #48	@ 0x30
 800643a:	9b03      	ldr	r3, [sp, #12]
 800643c:	454b      	cmp	r3, r9
 800643e:	d31e      	bcc.n	800647e <__cvt+0xc2>
 8006440:	9b03      	ldr	r3, [sp, #12]
 8006442:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006444:	1b5b      	subs	r3, r3, r5
 8006446:	4628      	mov	r0, r5
 8006448:	6013      	str	r3, [r2, #0]
 800644a:	b004      	add	sp, #16
 800644c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006450:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006454:	eb00 0904 	add.w	r9, r0, r4
 8006458:	d1e5      	bne.n	8006426 <__cvt+0x6a>
 800645a:	7803      	ldrb	r3, [r0, #0]
 800645c:	2b30      	cmp	r3, #48	@ 0x30
 800645e:	d10a      	bne.n	8006476 <__cvt+0xba>
 8006460:	2200      	movs	r2, #0
 8006462:	2300      	movs	r3, #0
 8006464:	4630      	mov	r0, r6
 8006466:	4639      	mov	r1, r7
 8006468:	f7fa fb36 	bl	8000ad8 <__aeabi_dcmpeq>
 800646c:	b918      	cbnz	r0, 8006476 <__cvt+0xba>
 800646e:	f1c4 0401 	rsb	r4, r4, #1
 8006472:	f8ca 4000 	str.w	r4, [sl]
 8006476:	f8da 3000 	ldr.w	r3, [sl]
 800647a:	4499      	add	r9, r3
 800647c:	e7d3      	b.n	8006426 <__cvt+0x6a>
 800647e:	1c59      	adds	r1, r3, #1
 8006480:	9103      	str	r1, [sp, #12]
 8006482:	701a      	strb	r2, [r3, #0]
 8006484:	e7d9      	b.n	800643a <__cvt+0x7e>

08006486 <__exponent>:
 8006486:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006488:	2900      	cmp	r1, #0
 800648a:	bfba      	itte	lt
 800648c:	4249      	neglt	r1, r1
 800648e:	232d      	movlt	r3, #45	@ 0x2d
 8006490:	232b      	movge	r3, #43	@ 0x2b
 8006492:	2909      	cmp	r1, #9
 8006494:	7002      	strb	r2, [r0, #0]
 8006496:	7043      	strb	r3, [r0, #1]
 8006498:	dd29      	ble.n	80064ee <__exponent+0x68>
 800649a:	f10d 0307 	add.w	r3, sp, #7
 800649e:	461d      	mov	r5, r3
 80064a0:	270a      	movs	r7, #10
 80064a2:	461a      	mov	r2, r3
 80064a4:	fbb1 f6f7 	udiv	r6, r1, r7
 80064a8:	fb07 1416 	mls	r4, r7, r6, r1
 80064ac:	3430      	adds	r4, #48	@ 0x30
 80064ae:	f802 4c01 	strb.w	r4, [r2, #-1]
 80064b2:	460c      	mov	r4, r1
 80064b4:	2c63      	cmp	r4, #99	@ 0x63
 80064b6:	f103 33ff 	add.w	r3, r3, #4294967295
 80064ba:	4631      	mov	r1, r6
 80064bc:	dcf1      	bgt.n	80064a2 <__exponent+0x1c>
 80064be:	3130      	adds	r1, #48	@ 0x30
 80064c0:	1e94      	subs	r4, r2, #2
 80064c2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80064c6:	1c41      	adds	r1, r0, #1
 80064c8:	4623      	mov	r3, r4
 80064ca:	42ab      	cmp	r3, r5
 80064cc:	d30a      	bcc.n	80064e4 <__exponent+0x5e>
 80064ce:	f10d 0309 	add.w	r3, sp, #9
 80064d2:	1a9b      	subs	r3, r3, r2
 80064d4:	42ac      	cmp	r4, r5
 80064d6:	bf88      	it	hi
 80064d8:	2300      	movhi	r3, #0
 80064da:	3302      	adds	r3, #2
 80064dc:	4403      	add	r3, r0
 80064de:	1a18      	subs	r0, r3, r0
 80064e0:	b003      	add	sp, #12
 80064e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064e4:	f813 6b01 	ldrb.w	r6, [r3], #1
 80064e8:	f801 6f01 	strb.w	r6, [r1, #1]!
 80064ec:	e7ed      	b.n	80064ca <__exponent+0x44>
 80064ee:	2330      	movs	r3, #48	@ 0x30
 80064f0:	3130      	adds	r1, #48	@ 0x30
 80064f2:	7083      	strb	r3, [r0, #2]
 80064f4:	70c1      	strb	r1, [r0, #3]
 80064f6:	1d03      	adds	r3, r0, #4
 80064f8:	e7f1      	b.n	80064de <__exponent+0x58>
	...

080064fc <_printf_float>:
 80064fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006500:	b08d      	sub	sp, #52	@ 0x34
 8006502:	460c      	mov	r4, r1
 8006504:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006508:	4616      	mov	r6, r2
 800650a:	461f      	mov	r7, r3
 800650c:	4605      	mov	r5, r0
 800650e:	f000 fceb 	bl	8006ee8 <_localeconv_r>
 8006512:	6803      	ldr	r3, [r0, #0]
 8006514:	9304      	str	r3, [sp, #16]
 8006516:	4618      	mov	r0, r3
 8006518:	f7f9 feb2 	bl	8000280 <strlen>
 800651c:	2300      	movs	r3, #0
 800651e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006520:	f8d8 3000 	ldr.w	r3, [r8]
 8006524:	9005      	str	r0, [sp, #20]
 8006526:	3307      	adds	r3, #7
 8006528:	f023 0307 	bic.w	r3, r3, #7
 800652c:	f103 0208 	add.w	r2, r3, #8
 8006530:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006534:	f8d4 b000 	ldr.w	fp, [r4]
 8006538:	f8c8 2000 	str.w	r2, [r8]
 800653c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006540:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006544:	9307      	str	r3, [sp, #28]
 8006546:	f8cd 8018 	str.w	r8, [sp, #24]
 800654a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800654e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006552:	4b9c      	ldr	r3, [pc, #624]	@ (80067c4 <_printf_float+0x2c8>)
 8006554:	f04f 32ff 	mov.w	r2, #4294967295
 8006558:	f7fa faf0 	bl	8000b3c <__aeabi_dcmpun>
 800655c:	bb70      	cbnz	r0, 80065bc <_printf_float+0xc0>
 800655e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006562:	4b98      	ldr	r3, [pc, #608]	@ (80067c4 <_printf_float+0x2c8>)
 8006564:	f04f 32ff 	mov.w	r2, #4294967295
 8006568:	f7fa faca 	bl	8000b00 <__aeabi_dcmple>
 800656c:	bb30      	cbnz	r0, 80065bc <_printf_float+0xc0>
 800656e:	2200      	movs	r2, #0
 8006570:	2300      	movs	r3, #0
 8006572:	4640      	mov	r0, r8
 8006574:	4649      	mov	r1, r9
 8006576:	f7fa fab9 	bl	8000aec <__aeabi_dcmplt>
 800657a:	b110      	cbz	r0, 8006582 <_printf_float+0x86>
 800657c:	232d      	movs	r3, #45	@ 0x2d
 800657e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006582:	4a91      	ldr	r2, [pc, #580]	@ (80067c8 <_printf_float+0x2cc>)
 8006584:	4b91      	ldr	r3, [pc, #580]	@ (80067cc <_printf_float+0x2d0>)
 8006586:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800658a:	bf8c      	ite	hi
 800658c:	4690      	movhi	r8, r2
 800658e:	4698      	movls	r8, r3
 8006590:	2303      	movs	r3, #3
 8006592:	6123      	str	r3, [r4, #16]
 8006594:	f02b 0304 	bic.w	r3, fp, #4
 8006598:	6023      	str	r3, [r4, #0]
 800659a:	f04f 0900 	mov.w	r9, #0
 800659e:	9700      	str	r7, [sp, #0]
 80065a0:	4633      	mov	r3, r6
 80065a2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80065a4:	4621      	mov	r1, r4
 80065a6:	4628      	mov	r0, r5
 80065a8:	f000 f9d2 	bl	8006950 <_printf_common>
 80065ac:	3001      	adds	r0, #1
 80065ae:	f040 808d 	bne.w	80066cc <_printf_float+0x1d0>
 80065b2:	f04f 30ff 	mov.w	r0, #4294967295
 80065b6:	b00d      	add	sp, #52	@ 0x34
 80065b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065bc:	4642      	mov	r2, r8
 80065be:	464b      	mov	r3, r9
 80065c0:	4640      	mov	r0, r8
 80065c2:	4649      	mov	r1, r9
 80065c4:	f7fa faba 	bl	8000b3c <__aeabi_dcmpun>
 80065c8:	b140      	cbz	r0, 80065dc <_printf_float+0xe0>
 80065ca:	464b      	mov	r3, r9
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	bfbc      	itt	lt
 80065d0:	232d      	movlt	r3, #45	@ 0x2d
 80065d2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80065d6:	4a7e      	ldr	r2, [pc, #504]	@ (80067d0 <_printf_float+0x2d4>)
 80065d8:	4b7e      	ldr	r3, [pc, #504]	@ (80067d4 <_printf_float+0x2d8>)
 80065da:	e7d4      	b.n	8006586 <_printf_float+0x8a>
 80065dc:	6863      	ldr	r3, [r4, #4]
 80065de:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80065e2:	9206      	str	r2, [sp, #24]
 80065e4:	1c5a      	adds	r2, r3, #1
 80065e6:	d13b      	bne.n	8006660 <_printf_float+0x164>
 80065e8:	2306      	movs	r3, #6
 80065ea:	6063      	str	r3, [r4, #4]
 80065ec:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80065f0:	2300      	movs	r3, #0
 80065f2:	6022      	str	r2, [r4, #0]
 80065f4:	9303      	str	r3, [sp, #12]
 80065f6:	ab0a      	add	r3, sp, #40	@ 0x28
 80065f8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80065fc:	ab09      	add	r3, sp, #36	@ 0x24
 80065fe:	9300      	str	r3, [sp, #0]
 8006600:	6861      	ldr	r1, [r4, #4]
 8006602:	ec49 8b10 	vmov	d0, r8, r9
 8006606:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800660a:	4628      	mov	r0, r5
 800660c:	f7ff fed6 	bl	80063bc <__cvt>
 8006610:	9b06      	ldr	r3, [sp, #24]
 8006612:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006614:	2b47      	cmp	r3, #71	@ 0x47
 8006616:	4680      	mov	r8, r0
 8006618:	d129      	bne.n	800666e <_printf_float+0x172>
 800661a:	1cc8      	adds	r0, r1, #3
 800661c:	db02      	blt.n	8006624 <_printf_float+0x128>
 800661e:	6863      	ldr	r3, [r4, #4]
 8006620:	4299      	cmp	r1, r3
 8006622:	dd41      	ble.n	80066a8 <_printf_float+0x1ac>
 8006624:	f1aa 0a02 	sub.w	sl, sl, #2
 8006628:	fa5f fa8a 	uxtb.w	sl, sl
 800662c:	3901      	subs	r1, #1
 800662e:	4652      	mov	r2, sl
 8006630:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006634:	9109      	str	r1, [sp, #36]	@ 0x24
 8006636:	f7ff ff26 	bl	8006486 <__exponent>
 800663a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800663c:	1813      	adds	r3, r2, r0
 800663e:	2a01      	cmp	r2, #1
 8006640:	4681      	mov	r9, r0
 8006642:	6123      	str	r3, [r4, #16]
 8006644:	dc02      	bgt.n	800664c <_printf_float+0x150>
 8006646:	6822      	ldr	r2, [r4, #0]
 8006648:	07d2      	lsls	r2, r2, #31
 800664a:	d501      	bpl.n	8006650 <_printf_float+0x154>
 800664c:	3301      	adds	r3, #1
 800664e:	6123      	str	r3, [r4, #16]
 8006650:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006654:	2b00      	cmp	r3, #0
 8006656:	d0a2      	beq.n	800659e <_printf_float+0xa2>
 8006658:	232d      	movs	r3, #45	@ 0x2d
 800665a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800665e:	e79e      	b.n	800659e <_printf_float+0xa2>
 8006660:	9a06      	ldr	r2, [sp, #24]
 8006662:	2a47      	cmp	r2, #71	@ 0x47
 8006664:	d1c2      	bne.n	80065ec <_printf_float+0xf0>
 8006666:	2b00      	cmp	r3, #0
 8006668:	d1c0      	bne.n	80065ec <_printf_float+0xf0>
 800666a:	2301      	movs	r3, #1
 800666c:	e7bd      	b.n	80065ea <_printf_float+0xee>
 800666e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006672:	d9db      	bls.n	800662c <_printf_float+0x130>
 8006674:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006678:	d118      	bne.n	80066ac <_printf_float+0x1b0>
 800667a:	2900      	cmp	r1, #0
 800667c:	6863      	ldr	r3, [r4, #4]
 800667e:	dd0b      	ble.n	8006698 <_printf_float+0x19c>
 8006680:	6121      	str	r1, [r4, #16]
 8006682:	b913      	cbnz	r3, 800668a <_printf_float+0x18e>
 8006684:	6822      	ldr	r2, [r4, #0]
 8006686:	07d0      	lsls	r0, r2, #31
 8006688:	d502      	bpl.n	8006690 <_printf_float+0x194>
 800668a:	3301      	adds	r3, #1
 800668c:	440b      	add	r3, r1
 800668e:	6123      	str	r3, [r4, #16]
 8006690:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006692:	f04f 0900 	mov.w	r9, #0
 8006696:	e7db      	b.n	8006650 <_printf_float+0x154>
 8006698:	b913      	cbnz	r3, 80066a0 <_printf_float+0x1a4>
 800669a:	6822      	ldr	r2, [r4, #0]
 800669c:	07d2      	lsls	r2, r2, #31
 800669e:	d501      	bpl.n	80066a4 <_printf_float+0x1a8>
 80066a0:	3302      	adds	r3, #2
 80066a2:	e7f4      	b.n	800668e <_printf_float+0x192>
 80066a4:	2301      	movs	r3, #1
 80066a6:	e7f2      	b.n	800668e <_printf_float+0x192>
 80066a8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80066ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80066ae:	4299      	cmp	r1, r3
 80066b0:	db05      	blt.n	80066be <_printf_float+0x1c2>
 80066b2:	6823      	ldr	r3, [r4, #0]
 80066b4:	6121      	str	r1, [r4, #16]
 80066b6:	07d8      	lsls	r0, r3, #31
 80066b8:	d5ea      	bpl.n	8006690 <_printf_float+0x194>
 80066ba:	1c4b      	adds	r3, r1, #1
 80066bc:	e7e7      	b.n	800668e <_printf_float+0x192>
 80066be:	2900      	cmp	r1, #0
 80066c0:	bfd4      	ite	le
 80066c2:	f1c1 0202 	rsble	r2, r1, #2
 80066c6:	2201      	movgt	r2, #1
 80066c8:	4413      	add	r3, r2
 80066ca:	e7e0      	b.n	800668e <_printf_float+0x192>
 80066cc:	6823      	ldr	r3, [r4, #0]
 80066ce:	055a      	lsls	r2, r3, #21
 80066d0:	d407      	bmi.n	80066e2 <_printf_float+0x1e6>
 80066d2:	6923      	ldr	r3, [r4, #16]
 80066d4:	4642      	mov	r2, r8
 80066d6:	4631      	mov	r1, r6
 80066d8:	4628      	mov	r0, r5
 80066da:	47b8      	blx	r7
 80066dc:	3001      	adds	r0, #1
 80066de:	d12b      	bne.n	8006738 <_printf_float+0x23c>
 80066e0:	e767      	b.n	80065b2 <_printf_float+0xb6>
 80066e2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80066e6:	f240 80dd 	bls.w	80068a4 <_printf_float+0x3a8>
 80066ea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80066ee:	2200      	movs	r2, #0
 80066f0:	2300      	movs	r3, #0
 80066f2:	f7fa f9f1 	bl	8000ad8 <__aeabi_dcmpeq>
 80066f6:	2800      	cmp	r0, #0
 80066f8:	d033      	beq.n	8006762 <_printf_float+0x266>
 80066fa:	4a37      	ldr	r2, [pc, #220]	@ (80067d8 <_printf_float+0x2dc>)
 80066fc:	2301      	movs	r3, #1
 80066fe:	4631      	mov	r1, r6
 8006700:	4628      	mov	r0, r5
 8006702:	47b8      	blx	r7
 8006704:	3001      	adds	r0, #1
 8006706:	f43f af54 	beq.w	80065b2 <_printf_float+0xb6>
 800670a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800670e:	4543      	cmp	r3, r8
 8006710:	db02      	blt.n	8006718 <_printf_float+0x21c>
 8006712:	6823      	ldr	r3, [r4, #0]
 8006714:	07d8      	lsls	r0, r3, #31
 8006716:	d50f      	bpl.n	8006738 <_printf_float+0x23c>
 8006718:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800671c:	4631      	mov	r1, r6
 800671e:	4628      	mov	r0, r5
 8006720:	47b8      	blx	r7
 8006722:	3001      	adds	r0, #1
 8006724:	f43f af45 	beq.w	80065b2 <_printf_float+0xb6>
 8006728:	f04f 0900 	mov.w	r9, #0
 800672c:	f108 38ff 	add.w	r8, r8, #4294967295
 8006730:	f104 0a1a 	add.w	sl, r4, #26
 8006734:	45c8      	cmp	r8, r9
 8006736:	dc09      	bgt.n	800674c <_printf_float+0x250>
 8006738:	6823      	ldr	r3, [r4, #0]
 800673a:	079b      	lsls	r3, r3, #30
 800673c:	f100 8103 	bmi.w	8006946 <_printf_float+0x44a>
 8006740:	68e0      	ldr	r0, [r4, #12]
 8006742:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006744:	4298      	cmp	r0, r3
 8006746:	bfb8      	it	lt
 8006748:	4618      	movlt	r0, r3
 800674a:	e734      	b.n	80065b6 <_printf_float+0xba>
 800674c:	2301      	movs	r3, #1
 800674e:	4652      	mov	r2, sl
 8006750:	4631      	mov	r1, r6
 8006752:	4628      	mov	r0, r5
 8006754:	47b8      	blx	r7
 8006756:	3001      	adds	r0, #1
 8006758:	f43f af2b 	beq.w	80065b2 <_printf_float+0xb6>
 800675c:	f109 0901 	add.w	r9, r9, #1
 8006760:	e7e8      	b.n	8006734 <_printf_float+0x238>
 8006762:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006764:	2b00      	cmp	r3, #0
 8006766:	dc39      	bgt.n	80067dc <_printf_float+0x2e0>
 8006768:	4a1b      	ldr	r2, [pc, #108]	@ (80067d8 <_printf_float+0x2dc>)
 800676a:	2301      	movs	r3, #1
 800676c:	4631      	mov	r1, r6
 800676e:	4628      	mov	r0, r5
 8006770:	47b8      	blx	r7
 8006772:	3001      	adds	r0, #1
 8006774:	f43f af1d 	beq.w	80065b2 <_printf_float+0xb6>
 8006778:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800677c:	ea59 0303 	orrs.w	r3, r9, r3
 8006780:	d102      	bne.n	8006788 <_printf_float+0x28c>
 8006782:	6823      	ldr	r3, [r4, #0]
 8006784:	07d9      	lsls	r1, r3, #31
 8006786:	d5d7      	bpl.n	8006738 <_printf_float+0x23c>
 8006788:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800678c:	4631      	mov	r1, r6
 800678e:	4628      	mov	r0, r5
 8006790:	47b8      	blx	r7
 8006792:	3001      	adds	r0, #1
 8006794:	f43f af0d 	beq.w	80065b2 <_printf_float+0xb6>
 8006798:	f04f 0a00 	mov.w	sl, #0
 800679c:	f104 0b1a 	add.w	fp, r4, #26
 80067a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067a2:	425b      	negs	r3, r3
 80067a4:	4553      	cmp	r3, sl
 80067a6:	dc01      	bgt.n	80067ac <_printf_float+0x2b0>
 80067a8:	464b      	mov	r3, r9
 80067aa:	e793      	b.n	80066d4 <_printf_float+0x1d8>
 80067ac:	2301      	movs	r3, #1
 80067ae:	465a      	mov	r2, fp
 80067b0:	4631      	mov	r1, r6
 80067b2:	4628      	mov	r0, r5
 80067b4:	47b8      	blx	r7
 80067b6:	3001      	adds	r0, #1
 80067b8:	f43f aefb 	beq.w	80065b2 <_printf_float+0xb6>
 80067bc:	f10a 0a01 	add.w	sl, sl, #1
 80067c0:	e7ee      	b.n	80067a0 <_printf_float+0x2a4>
 80067c2:	bf00      	nop
 80067c4:	7fefffff 	.word	0x7fefffff
 80067c8:	08009c18 	.word	0x08009c18
 80067cc:	08009c14 	.word	0x08009c14
 80067d0:	08009c20 	.word	0x08009c20
 80067d4:	08009c1c 	.word	0x08009c1c
 80067d8:	08009c24 	.word	0x08009c24
 80067dc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80067de:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80067e2:	4553      	cmp	r3, sl
 80067e4:	bfa8      	it	ge
 80067e6:	4653      	movge	r3, sl
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	4699      	mov	r9, r3
 80067ec:	dc36      	bgt.n	800685c <_printf_float+0x360>
 80067ee:	f04f 0b00 	mov.w	fp, #0
 80067f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80067f6:	f104 021a 	add.w	r2, r4, #26
 80067fa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80067fc:	9306      	str	r3, [sp, #24]
 80067fe:	eba3 0309 	sub.w	r3, r3, r9
 8006802:	455b      	cmp	r3, fp
 8006804:	dc31      	bgt.n	800686a <_printf_float+0x36e>
 8006806:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006808:	459a      	cmp	sl, r3
 800680a:	dc3a      	bgt.n	8006882 <_printf_float+0x386>
 800680c:	6823      	ldr	r3, [r4, #0]
 800680e:	07da      	lsls	r2, r3, #31
 8006810:	d437      	bmi.n	8006882 <_printf_float+0x386>
 8006812:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006814:	ebaa 0903 	sub.w	r9, sl, r3
 8006818:	9b06      	ldr	r3, [sp, #24]
 800681a:	ebaa 0303 	sub.w	r3, sl, r3
 800681e:	4599      	cmp	r9, r3
 8006820:	bfa8      	it	ge
 8006822:	4699      	movge	r9, r3
 8006824:	f1b9 0f00 	cmp.w	r9, #0
 8006828:	dc33      	bgt.n	8006892 <_printf_float+0x396>
 800682a:	f04f 0800 	mov.w	r8, #0
 800682e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006832:	f104 0b1a 	add.w	fp, r4, #26
 8006836:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006838:	ebaa 0303 	sub.w	r3, sl, r3
 800683c:	eba3 0309 	sub.w	r3, r3, r9
 8006840:	4543      	cmp	r3, r8
 8006842:	f77f af79 	ble.w	8006738 <_printf_float+0x23c>
 8006846:	2301      	movs	r3, #1
 8006848:	465a      	mov	r2, fp
 800684a:	4631      	mov	r1, r6
 800684c:	4628      	mov	r0, r5
 800684e:	47b8      	blx	r7
 8006850:	3001      	adds	r0, #1
 8006852:	f43f aeae 	beq.w	80065b2 <_printf_float+0xb6>
 8006856:	f108 0801 	add.w	r8, r8, #1
 800685a:	e7ec      	b.n	8006836 <_printf_float+0x33a>
 800685c:	4642      	mov	r2, r8
 800685e:	4631      	mov	r1, r6
 8006860:	4628      	mov	r0, r5
 8006862:	47b8      	blx	r7
 8006864:	3001      	adds	r0, #1
 8006866:	d1c2      	bne.n	80067ee <_printf_float+0x2f2>
 8006868:	e6a3      	b.n	80065b2 <_printf_float+0xb6>
 800686a:	2301      	movs	r3, #1
 800686c:	4631      	mov	r1, r6
 800686e:	4628      	mov	r0, r5
 8006870:	9206      	str	r2, [sp, #24]
 8006872:	47b8      	blx	r7
 8006874:	3001      	adds	r0, #1
 8006876:	f43f ae9c 	beq.w	80065b2 <_printf_float+0xb6>
 800687a:	9a06      	ldr	r2, [sp, #24]
 800687c:	f10b 0b01 	add.w	fp, fp, #1
 8006880:	e7bb      	b.n	80067fa <_printf_float+0x2fe>
 8006882:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006886:	4631      	mov	r1, r6
 8006888:	4628      	mov	r0, r5
 800688a:	47b8      	blx	r7
 800688c:	3001      	adds	r0, #1
 800688e:	d1c0      	bne.n	8006812 <_printf_float+0x316>
 8006890:	e68f      	b.n	80065b2 <_printf_float+0xb6>
 8006892:	9a06      	ldr	r2, [sp, #24]
 8006894:	464b      	mov	r3, r9
 8006896:	4442      	add	r2, r8
 8006898:	4631      	mov	r1, r6
 800689a:	4628      	mov	r0, r5
 800689c:	47b8      	blx	r7
 800689e:	3001      	adds	r0, #1
 80068a0:	d1c3      	bne.n	800682a <_printf_float+0x32e>
 80068a2:	e686      	b.n	80065b2 <_printf_float+0xb6>
 80068a4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80068a8:	f1ba 0f01 	cmp.w	sl, #1
 80068ac:	dc01      	bgt.n	80068b2 <_printf_float+0x3b6>
 80068ae:	07db      	lsls	r3, r3, #31
 80068b0:	d536      	bpl.n	8006920 <_printf_float+0x424>
 80068b2:	2301      	movs	r3, #1
 80068b4:	4642      	mov	r2, r8
 80068b6:	4631      	mov	r1, r6
 80068b8:	4628      	mov	r0, r5
 80068ba:	47b8      	blx	r7
 80068bc:	3001      	adds	r0, #1
 80068be:	f43f ae78 	beq.w	80065b2 <_printf_float+0xb6>
 80068c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80068c6:	4631      	mov	r1, r6
 80068c8:	4628      	mov	r0, r5
 80068ca:	47b8      	blx	r7
 80068cc:	3001      	adds	r0, #1
 80068ce:	f43f ae70 	beq.w	80065b2 <_printf_float+0xb6>
 80068d2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80068d6:	2200      	movs	r2, #0
 80068d8:	2300      	movs	r3, #0
 80068da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80068de:	f7fa f8fb 	bl	8000ad8 <__aeabi_dcmpeq>
 80068e2:	b9c0      	cbnz	r0, 8006916 <_printf_float+0x41a>
 80068e4:	4653      	mov	r3, sl
 80068e6:	f108 0201 	add.w	r2, r8, #1
 80068ea:	4631      	mov	r1, r6
 80068ec:	4628      	mov	r0, r5
 80068ee:	47b8      	blx	r7
 80068f0:	3001      	adds	r0, #1
 80068f2:	d10c      	bne.n	800690e <_printf_float+0x412>
 80068f4:	e65d      	b.n	80065b2 <_printf_float+0xb6>
 80068f6:	2301      	movs	r3, #1
 80068f8:	465a      	mov	r2, fp
 80068fa:	4631      	mov	r1, r6
 80068fc:	4628      	mov	r0, r5
 80068fe:	47b8      	blx	r7
 8006900:	3001      	adds	r0, #1
 8006902:	f43f ae56 	beq.w	80065b2 <_printf_float+0xb6>
 8006906:	f108 0801 	add.w	r8, r8, #1
 800690a:	45d0      	cmp	r8, sl
 800690c:	dbf3      	blt.n	80068f6 <_printf_float+0x3fa>
 800690e:	464b      	mov	r3, r9
 8006910:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006914:	e6df      	b.n	80066d6 <_printf_float+0x1da>
 8006916:	f04f 0800 	mov.w	r8, #0
 800691a:	f104 0b1a 	add.w	fp, r4, #26
 800691e:	e7f4      	b.n	800690a <_printf_float+0x40e>
 8006920:	2301      	movs	r3, #1
 8006922:	4642      	mov	r2, r8
 8006924:	e7e1      	b.n	80068ea <_printf_float+0x3ee>
 8006926:	2301      	movs	r3, #1
 8006928:	464a      	mov	r2, r9
 800692a:	4631      	mov	r1, r6
 800692c:	4628      	mov	r0, r5
 800692e:	47b8      	blx	r7
 8006930:	3001      	adds	r0, #1
 8006932:	f43f ae3e 	beq.w	80065b2 <_printf_float+0xb6>
 8006936:	f108 0801 	add.w	r8, r8, #1
 800693a:	68e3      	ldr	r3, [r4, #12]
 800693c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800693e:	1a5b      	subs	r3, r3, r1
 8006940:	4543      	cmp	r3, r8
 8006942:	dcf0      	bgt.n	8006926 <_printf_float+0x42a>
 8006944:	e6fc      	b.n	8006740 <_printf_float+0x244>
 8006946:	f04f 0800 	mov.w	r8, #0
 800694a:	f104 0919 	add.w	r9, r4, #25
 800694e:	e7f4      	b.n	800693a <_printf_float+0x43e>

08006950 <_printf_common>:
 8006950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006954:	4616      	mov	r6, r2
 8006956:	4698      	mov	r8, r3
 8006958:	688a      	ldr	r2, [r1, #8]
 800695a:	690b      	ldr	r3, [r1, #16]
 800695c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006960:	4293      	cmp	r3, r2
 8006962:	bfb8      	it	lt
 8006964:	4613      	movlt	r3, r2
 8006966:	6033      	str	r3, [r6, #0]
 8006968:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800696c:	4607      	mov	r7, r0
 800696e:	460c      	mov	r4, r1
 8006970:	b10a      	cbz	r2, 8006976 <_printf_common+0x26>
 8006972:	3301      	adds	r3, #1
 8006974:	6033      	str	r3, [r6, #0]
 8006976:	6823      	ldr	r3, [r4, #0]
 8006978:	0699      	lsls	r1, r3, #26
 800697a:	bf42      	ittt	mi
 800697c:	6833      	ldrmi	r3, [r6, #0]
 800697e:	3302      	addmi	r3, #2
 8006980:	6033      	strmi	r3, [r6, #0]
 8006982:	6825      	ldr	r5, [r4, #0]
 8006984:	f015 0506 	ands.w	r5, r5, #6
 8006988:	d106      	bne.n	8006998 <_printf_common+0x48>
 800698a:	f104 0a19 	add.w	sl, r4, #25
 800698e:	68e3      	ldr	r3, [r4, #12]
 8006990:	6832      	ldr	r2, [r6, #0]
 8006992:	1a9b      	subs	r3, r3, r2
 8006994:	42ab      	cmp	r3, r5
 8006996:	dc26      	bgt.n	80069e6 <_printf_common+0x96>
 8006998:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800699c:	6822      	ldr	r2, [r4, #0]
 800699e:	3b00      	subs	r3, #0
 80069a0:	bf18      	it	ne
 80069a2:	2301      	movne	r3, #1
 80069a4:	0692      	lsls	r2, r2, #26
 80069a6:	d42b      	bmi.n	8006a00 <_printf_common+0xb0>
 80069a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80069ac:	4641      	mov	r1, r8
 80069ae:	4638      	mov	r0, r7
 80069b0:	47c8      	blx	r9
 80069b2:	3001      	adds	r0, #1
 80069b4:	d01e      	beq.n	80069f4 <_printf_common+0xa4>
 80069b6:	6823      	ldr	r3, [r4, #0]
 80069b8:	6922      	ldr	r2, [r4, #16]
 80069ba:	f003 0306 	and.w	r3, r3, #6
 80069be:	2b04      	cmp	r3, #4
 80069c0:	bf02      	ittt	eq
 80069c2:	68e5      	ldreq	r5, [r4, #12]
 80069c4:	6833      	ldreq	r3, [r6, #0]
 80069c6:	1aed      	subeq	r5, r5, r3
 80069c8:	68a3      	ldr	r3, [r4, #8]
 80069ca:	bf0c      	ite	eq
 80069cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80069d0:	2500      	movne	r5, #0
 80069d2:	4293      	cmp	r3, r2
 80069d4:	bfc4      	itt	gt
 80069d6:	1a9b      	subgt	r3, r3, r2
 80069d8:	18ed      	addgt	r5, r5, r3
 80069da:	2600      	movs	r6, #0
 80069dc:	341a      	adds	r4, #26
 80069de:	42b5      	cmp	r5, r6
 80069e0:	d11a      	bne.n	8006a18 <_printf_common+0xc8>
 80069e2:	2000      	movs	r0, #0
 80069e4:	e008      	b.n	80069f8 <_printf_common+0xa8>
 80069e6:	2301      	movs	r3, #1
 80069e8:	4652      	mov	r2, sl
 80069ea:	4641      	mov	r1, r8
 80069ec:	4638      	mov	r0, r7
 80069ee:	47c8      	blx	r9
 80069f0:	3001      	adds	r0, #1
 80069f2:	d103      	bne.n	80069fc <_printf_common+0xac>
 80069f4:	f04f 30ff 	mov.w	r0, #4294967295
 80069f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069fc:	3501      	adds	r5, #1
 80069fe:	e7c6      	b.n	800698e <_printf_common+0x3e>
 8006a00:	18e1      	adds	r1, r4, r3
 8006a02:	1c5a      	adds	r2, r3, #1
 8006a04:	2030      	movs	r0, #48	@ 0x30
 8006a06:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006a0a:	4422      	add	r2, r4
 8006a0c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006a10:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006a14:	3302      	adds	r3, #2
 8006a16:	e7c7      	b.n	80069a8 <_printf_common+0x58>
 8006a18:	2301      	movs	r3, #1
 8006a1a:	4622      	mov	r2, r4
 8006a1c:	4641      	mov	r1, r8
 8006a1e:	4638      	mov	r0, r7
 8006a20:	47c8      	blx	r9
 8006a22:	3001      	adds	r0, #1
 8006a24:	d0e6      	beq.n	80069f4 <_printf_common+0xa4>
 8006a26:	3601      	adds	r6, #1
 8006a28:	e7d9      	b.n	80069de <_printf_common+0x8e>
	...

08006a2c <_printf_i>:
 8006a2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a30:	7e0f      	ldrb	r7, [r1, #24]
 8006a32:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006a34:	2f78      	cmp	r7, #120	@ 0x78
 8006a36:	4691      	mov	r9, r2
 8006a38:	4680      	mov	r8, r0
 8006a3a:	460c      	mov	r4, r1
 8006a3c:	469a      	mov	sl, r3
 8006a3e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006a42:	d807      	bhi.n	8006a54 <_printf_i+0x28>
 8006a44:	2f62      	cmp	r7, #98	@ 0x62
 8006a46:	d80a      	bhi.n	8006a5e <_printf_i+0x32>
 8006a48:	2f00      	cmp	r7, #0
 8006a4a:	f000 80d1 	beq.w	8006bf0 <_printf_i+0x1c4>
 8006a4e:	2f58      	cmp	r7, #88	@ 0x58
 8006a50:	f000 80b8 	beq.w	8006bc4 <_printf_i+0x198>
 8006a54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006a58:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006a5c:	e03a      	b.n	8006ad4 <_printf_i+0xa8>
 8006a5e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006a62:	2b15      	cmp	r3, #21
 8006a64:	d8f6      	bhi.n	8006a54 <_printf_i+0x28>
 8006a66:	a101      	add	r1, pc, #4	@ (adr r1, 8006a6c <_printf_i+0x40>)
 8006a68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006a6c:	08006ac5 	.word	0x08006ac5
 8006a70:	08006ad9 	.word	0x08006ad9
 8006a74:	08006a55 	.word	0x08006a55
 8006a78:	08006a55 	.word	0x08006a55
 8006a7c:	08006a55 	.word	0x08006a55
 8006a80:	08006a55 	.word	0x08006a55
 8006a84:	08006ad9 	.word	0x08006ad9
 8006a88:	08006a55 	.word	0x08006a55
 8006a8c:	08006a55 	.word	0x08006a55
 8006a90:	08006a55 	.word	0x08006a55
 8006a94:	08006a55 	.word	0x08006a55
 8006a98:	08006bd7 	.word	0x08006bd7
 8006a9c:	08006b03 	.word	0x08006b03
 8006aa0:	08006b91 	.word	0x08006b91
 8006aa4:	08006a55 	.word	0x08006a55
 8006aa8:	08006a55 	.word	0x08006a55
 8006aac:	08006bf9 	.word	0x08006bf9
 8006ab0:	08006a55 	.word	0x08006a55
 8006ab4:	08006b03 	.word	0x08006b03
 8006ab8:	08006a55 	.word	0x08006a55
 8006abc:	08006a55 	.word	0x08006a55
 8006ac0:	08006b99 	.word	0x08006b99
 8006ac4:	6833      	ldr	r3, [r6, #0]
 8006ac6:	1d1a      	adds	r2, r3, #4
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	6032      	str	r2, [r6, #0]
 8006acc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006ad0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	e09c      	b.n	8006c12 <_printf_i+0x1e6>
 8006ad8:	6833      	ldr	r3, [r6, #0]
 8006ada:	6820      	ldr	r0, [r4, #0]
 8006adc:	1d19      	adds	r1, r3, #4
 8006ade:	6031      	str	r1, [r6, #0]
 8006ae0:	0606      	lsls	r6, r0, #24
 8006ae2:	d501      	bpl.n	8006ae8 <_printf_i+0xbc>
 8006ae4:	681d      	ldr	r5, [r3, #0]
 8006ae6:	e003      	b.n	8006af0 <_printf_i+0xc4>
 8006ae8:	0645      	lsls	r5, r0, #25
 8006aea:	d5fb      	bpl.n	8006ae4 <_printf_i+0xb8>
 8006aec:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006af0:	2d00      	cmp	r5, #0
 8006af2:	da03      	bge.n	8006afc <_printf_i+0xd0>
 8006af4:	232d      	movs	r3, #45	@ 0x2d
 8006af6:	426d      	negs	r5, r5
 8006af8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006afc:	4858      	ldr	r0, [pc, #352]	@ (8006c60 <_printf_i+0x234>)
 8006afe:	230a      	movs	r3, #10
 8006b00:	e011      	b.n	8006b26 <_printf_i+0xfa>
 8006b02:	6821      	ldr	r1, [r4, #0]
 8006b04:	6833      	ldr	r3, [r6, #0]
 8006b06:	0608      	lsls	r0, r1, #24
 8006b08:	f853 5b04 	ldr.w	r5, [r3], #4
 8006b0c:	d402      	bmi.n	8006b14 <_printf_i+0xe8>
 8006b0e:	0649      	lsls	r1, r1, #25
 8006b10:	bf48      	it	mi
 8006b12:	b2ad      	uxthmi	r5, r5
 8006b14:	2f6f      	cmp	r7, #111	@ 0x6f
 8006b16:	4852      	ldr	r0, [pc, #328]	@ (8006c60 <_printf_i+0x234>)
 8006b18:	6033      	str	r3, [r6, #0]
 8006b1a:	bf14      	ite	ne
 8006b1c:	230a      	movne	r3, #10
 8006b1e:	2308      	moveq	r3, #8
 8006b20:	2100      	movs	r1, #0
 8006b22:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006b26:	6866      	ldr	r6, [r4, #4]
 8006b28:	60a6      	str	r6, [r4, #8]
 8006b2a:	2e00      	cmp	r6, #0
 8006b2c:	db05      	blt.n	8006b3a <_printf_i+0x10e>
 8006b2e:	6821      	ldr	r1, [r4, #0]
 8006b30:	432e      	orrs	r6, r5
 8006b32:	f021 0104 	bic.w	r1, r1, #4
 8006b36:	6021      	str	r1, [r4, #0]
 8006b38:	d04b      	beq.n	8006bd2 <_printf_i+0x1a6>
 8006b3a:	4616      	mov	r6, r2
 8006b3c:	fbb5 f1f3 	udiv	r1, r5, r3
 8006b40:	fb03 5711 	mls	r7, r3, r1, r5
 8006b44:	5dc7      	ldrb	r7, [r0, r7]
 8006b46:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006b4a:	462f      	mov	r7, r5
 8006b4c:	42bb      	cmp	r3, r7
 8006b4e:	460d      	mov	r5, r1
 8006b50:	d9f4      	bls.n	8006b3c <_printf_i+0x110>
 8006b52:	2b08      	cmp	r3, #8
 8006b54:	d10b      	bne.n	8006b6e <_printf_i+0x142>
 8006b56:	6823      	ldr	r3, [r4, #0]
 8006b58:	07df      	lsls	r7, r3, #31
 8006b5a:	d508      	bpl.n	8006b6e <_printf_i+0x142>
 8006b5c:	6923      	ldr	r3, [r4, #16]
 8006b5e:	6861      	ldr	r1, [r4, #4]
 8006b60:	4299      	cmp	r1, r3
 8006b62:	bfde      	ittt	le
 8006b64:	2330      	movle	r3, #48	@ 0x30
 8006b66:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006b6a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006b6e:	1b92      	subs	r2, r2, r6
 8006b70:	6122      	str	r2, [r4, #16]
 8006b72:	f8cd a000 	str.w	sl, [sp]
 8006b76:	464b      	mov	r3, r9
 8006b78:	aa03      	add	r2, sp, #12
 8006b7a:	4621      	mov	r1, r4
 8006b7c:	4640      	mov	r0, r8
 8006b7e:	f7ff fee7 	bl	8006950 <_printf_common>
 8006b82:	3001      	adds	r0, #1
 8006b84:	d14a      	bne.n	8006c1c <_printf_i+0x1f0>
 8006b86:	f04f 30ff 	mov.w	r0, #4294967295
 8006b8a:	b004      	add	sp, #16
 8006b8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b90:	6823      	ldr	r3, [r4, #0]
 8006b92:	f043 0320 	orr.w	r3, r3, #32
 8006b96:	6023      	str	r3, [r4, #0]
 8006b98:	4832      	ldr	r0, [pc, #200]	@ (8006c64 <_printf_i+0x238>)
 8006b9a:	2778      	movs	r7, #120	@ 0x78
 8006b9c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006ba0:	6823      	ldr	r3, [r4, #0]
 8006ba2:	6831      	ldr	r1, [r6, #0]
 8006ba4:	061f      	lsls	r7, r3, #24
 8006ba6:	f851 5b04 	ldr.w	r5, [r1], #4
 8006baa:	d402      	bmi.n	8006bb2 <_printf_i+0x186>
 8006bac:	065f      	lsls	r7, r3, #25
 8006bae:	bf48      	it	mi
 8006bb0:	b2ad      	uxthmi	r5, r5
 8006bb2:	6031      	str	r1, [r6, #0]
 8006bb4:	07d9      	lsls	r1, r3, #31
 8006bb6:	bf44      	itt	mi
 8006bb8:	f043 0320 	orrmi.w	r3, r3, #32
 8006bbc:	6023      	strmi	r3, [r4, #0]
 8006bbe:	b11d      	cbz	r5, 8006bc8 <_printf_i+0x19c>
 8006bc0:	2310      	movs	r3, #16
 8006bc2:	e7ad      	b.n	8006b20 <_printf_i+0xf4>
 8006bc4:	4826      	ldr	r0, [pc, #152]	@ (8006c60 <_printf_i+0x234>)
 8006bc6:	e7e9      	b.n	8006b9c <_printf_i+0x170>
 8006bc8:	6823      	ldr	r3, [r4, #0]
 8006bca:	f023 0320 	bic.w	r3, r3, #32
 8006bce:	6023      	str	r3, [r4, #0]
 8006bd0:	e7f6      	b.n	8006bc0 <_printf_i+0x194>
 8006bd2:	4616      	mov	r6, r2
 8006bd4:	e7bd      	b.n	8006b52 <_printf_i+0x126>
 8006bd6:	6833      	ldr	r3, [r6, #0]
 8006bd8:	6825      	ldr	r5, [r4, #0]
 8006bda:	6961      	ldr	r1, [r4, #20]
 8006bdc:	1d18      	adds	r0, r3, #4
 8006bde:	6030      	str	r0, [r6, #0]
 8006be0:	062e      	lsls	r6, r5, #24
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	d501      	bpl.n	8006bea <_printf_i+0x1be>
 8006be6:	6019      	str	r1, [r3, #0]
 8006be8:	e002      	b.n	8006bf0 <_printf_i+0x1c4>
 8006bea:	0668      	lsls	r0, r5, #25
 8006bec:	d5fb      	bpl.n	8006be6 <_printf_i+0x1ba>
 8006bee:	8019      	strh	r1, [r3, #0]
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	6123      	str	r3, [r4, #16]
 8006bf4:	4616      	mov	r6, r2
 8006bf6:	e7bc      	b.n	8006b72 <_printf_i+0x146>
 8006bf8:	6833      	ldr	r3, [r6, #0]
 8006bfa:	1d1a      	adds	r2, r3, #4
 8006bfc:	6032      	str	r2, [r6, #0]
 8006bfe:	681e      	ldr	r6, [r3, #0]
 8006c00:	6862      	ldr	r2, [r4, #4]
 8006c02:	2100      	movs	r1, #0
 8006c04:	4630      	mov	r0, r6
 8006c06:	f7f9 faeb 	bl	80001e0 <memchr>
 8006c0a:	b108      	cbz	r0, 8006c10 <_printf_i+0x1e4>
 8006c0c:	1b80      	subs	r0, r0, r6
 8006c0e:	6060      	str	r0, [r4, #4]
 8006c10:	6863      	ldr	r3, [r4, #4]
 8006c12:	6123      	str	r3, [r4, #16]
 8006c14:	2300      	movs	r3, #0
 8006c16:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c1a:	e7aa      	b.n	8006b72 <_printf_i+0x146>
 8006c1c:	6923      	ldr	r3, [r4, #16]
 8006c1e:	4632      	mov	r2, r6
 8006c20:	4649      	mov	r1, r9
 8006c22:	4640      	mov	r0, r8
 8006c24:	47d0      	blx	sl
 8006c26:	3001      	adds	r0, #1
 8006c28:	d0ad      	beq.n	8006b86 <_printf_i+0x15a>
 8006c2a:	6823      	ldr	r3, [r4, #0]
 8006c2c:	079b      	lsls	r3, r3, #30
 8006c2e:	d413      	bmi.n	8006c58 <_printf_i+0x22c>
 8006c30:	68e0      	ldr	r0, [r4, #12]
 8006c32:	9b03      	ldr	r3, [sp, #12]
 8006c34:	4298      	cmp	r0, r3
 8006c36:	bfb8      	it	lt
 8006c38:	4618      	movlt	r0, r3
 8006c3a:	e7a6      	b.n	8006b8a <_printf_i+0x15e>
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	4632      	mov	r2, r6
 8006c40:	4649      	mov	r1, r9
 8006c42:	4640      	mov	r0, r8
 8006c44:	47d0      	blx	sl
 8006c46:	3001      	adds	r0, #1
 8006c48:	d09d      	beq.n	8006b86 <_printf_i+0x15a>
 8006c4a:	3501      	adds	r5, #1
 8006c4c:	68e3      	ldr	r3, [r4, #12]
 8006c4e:	9903      	ldr	r1, [sp, #12]
 8006c50:	1a5b      	subs	r3, r3, r1
 8006c52:	42ab      	cmp	r3, r5
 8006c54:	dcf2      	bgt.n	8006c3c <_printf_i+0x210>
 8006c56:	e7eb      	b.n	8006c30 <_printf_i+0x204>
 8006c58:	2500      	movs	r5, #0
 8006c5a:	f104 0619 	add.w	r6, r4, #25
 8006c5e:	e7f5      	b.n	8006c4c <_printf_i+0x220>
 8006c60:	08009c26 	.word	0x08009c26
 8006c64:	08009c37 	.word	0x08009c37

08006c68 <std>:
 8006c68:	2300      	movs	r3, #0
 8006c6a:	b510      	push	{r4, lr}
 8006c6c:	4604      	mov	r4, r0
 8006c6e:	e9c0 3300 	strd	r3, r3, [r0]
 8006c72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006c76:	6083      	str	r3, [r0, #8]
 8006c78:	8181      	strh	r1, [r0, #12]
 8006c7a:	6643      	str	r3, [r0, #100]	@ 0x64
 8006c7c:	81c2      	strh	r2, [r0, #14]
 8006c7e:	6183      	str	r3, [r0, #24]
 8006c80:	4619      	mov	r1, r3
 8006c82:	2208      	movs	r2, #8
 8006c84:	305c      	adds	r0, #92	@ 0x5c
 8006c86:	f000 f926 	bl	8006ed6 <memset>
 8006c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8006cc0 <std+0x58>)
 8006c8c:	6263      	str	r3, [r4, #36]	@ 0x24
 8006c8e:	4b0d      	ldr	r3, [pc, #52]	@ (8006cc4 <std+0x5c>)
 8006c90:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006c92:	4b0d      	ldr	r3, [pc, #52]	@ (8006cc8 <std+0x60>)
 8006c94:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006c96:	4b0d      	ldr	r3, [pc, #52]	@ (8006ccc <std+0x64>)
 8006c98:	6323      	str	r3, [r4, #48]	@ 0x30
 8006c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8006cd0 <std+0x68>)
 8006c9c:	6224      	str	r4, [r4, #32]
 8006c9e:	429c      	cmp	r4, r3
 8006ca0:	d006      	beq.n	8006cb0 <std+0x48>
 8006ca2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006ca6:	4294      	cmp	r4, r2
 8006ca8:	d002      	beq.n	8006cb0 <std+0x48>
 8006caa:	33d0      	adds	r3, #208	@ 0xd0
 8006cac:	429c      	cmp	r4, r3
 8006cae:	d105      	bne.n	8006cbc <std+0x54>
 8006cb0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006cb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cb8:	f000 b98a 	b.w	8006fd0 <__retarget_lock_init_recursive>
 8006cbc:	bd10      	pop	{r4, pc}
 8006cbe:	bf00      	nop
 8006cc0:	08006e31 	.word	0x08006e31
 8006cc4:	08006e53 	.word	0x08006e53
 8006cc8:	08006e8b 	.word	0x08006e8b
 8006ccc:	08006eaf 	.word	0x08006eaf
 8006cd0:	20001138 	.word	0x20001138

08006cd4 <stdio_exit_handler>:
 8006cd4:	4a02      	ldr	r2, [pc, #8]	@ (8006ce0 <stdio_exit_handler+0xc>)
 8006cd6:	4903      	ldr	r1, [pc, #12]	@ (8006ce4 <stdio_exit_handler+0x10>)
 8006cd8:	4803      	ldr	r0, [pc, #12]	@ (8006ce8 <stdio_exit_handler+0x14>)
 8006cda:	f000 b869 	b.w	8006db0 <_fwalk_sglue>
 8006cde:	bf00      	nop
 8006ce0:	2000000c 	.word	0x2000000c
 8006ce4:	08008955 	.word	0x08008955
 8006ce8:	2000001c 	.word	0x2000001c

08006cec <cleanup_stdio>:
 8006cec:	6841      	ldr	r1, [r0, #4]
 8006cee:	4b0c      	ldr	r3, [pc, #48]	@ (8006d20 <cleanup_stdio+0x34>)
 8006cf0:	4299      	cmp	r1, r3
 8006cf2:	b510      	push	{r4, lr}
 8006cf4:	4604      	mov	r4, r0
 8006cf6:	d001      	beq.n	8006cfc <cleanup_stdio+0x10>
 8006cf8:	f001 fe2c 	bl	8008954 <_fflush_r>
 8006cfc:	68a1      	ldr	r1, [r4, #8]
 8006cfe:	4b09      	ldr	r3, [pc, #36]	@ (8006d24 <cleanup_stdio+0x38>)
 8006d00:	4299      	cmp	r1, r3
 8006d02:	d002      	beq.n	8006d0a <cleanup_stdio+0x1e>
 8006d04:	4620      	mov	r0, r4
 8006d06:	f001 fe25 	bl	8008954 <_fflush_r>
 8006d0a:	68e1      	ldr	r1, [r4, #12]
 8006d0c:	4b06      	ldr	r3, [pc, #24]	@ (8006d28 <cleanup_stdio+0x3c>)
 8006d0e:	4299      	cmp	r1, r3
 8006d10:	d004      	beq.n	8006d1c <cleanup_stdio+0x30>
 8006d12:	4620      	mov	r0, r4
 8006d14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d18:	f001 be1c 	b.w	8008954 <_fflush_r>
 8006d1c:	bd10      	pop	{r4, pc}
 8006d1e:	bf00      	nop
 8006d20:	20001138 	.word	0x20001138
 8006d24:	200011a0 	.word	0x200011a0
 8006d28:	20001208 	.word	0x20001208

08006d2c <global_stdio_init.part.0>:
 8006d2c:	b510      	push	{r4, lr}
 8006d2e:	4b0b      	ldr	r3, [pc, #44]	@ (8006d5c <global_stdio_init.part.0+0x30>)
 8006d30:	4c0b      	ldr	r4, [pc, #44]	@ (8006d60 <global_stdio_init.part.0+0x34>)
 8006d32:	4a0c      	ldr	r2, [pc, #48]	@ (8006d64 <global_stdio_init.part.0+0x38>)
 8006d34:	601a      	str	r2, [r3, #0]
 8006d36:	4620      	mov	r0, r4
 8006d38:	2200      	movs	r2, #0
 8006d3a:	2104      	movs	r1, #4
 8006d3c:	f7ff ff94 	bl	8006c68 <std>
 8006d40:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006d44:	2201      	movs	r2, #1
 8006d46:	2109      	movs	r1, #9
 8006d48:	f7ff ff8e 	bl	8006c68 <std>
 8006d4c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006d50:	2202      	movs	r2, #2
 8006d52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d56:	2112      	movs	r1, #18
 8006d58:	f7ff bf86 	b.w	8006c68 <std>
 8006d5c:	20001270 	.word	0x20001270
 8006d60:	20001138 	.word	0x20001138
 8006d64:	08006cd5 	.word	0x08006cd5

08006d68 <__sfp_lock_acquire>:
 8006d68:	4801      	ldr	r0, [pc, #4]	@ (8006d70 <__sfp_lock_acquire+0x8>)
 8006d6a:	f000 b932 	b.w	8006fd2 <__retarget_lock_acquire_recursive>
 8006d6e:	bf00      	nop
 8006d70:	20001279 	.word	0x20001279

08006d74 <__sfp_lock_release>:
 8006d74:	4801      	ldr	r0, [pc, #4]	@ (8006d7c <__sfp_lock_release+0x8>)
 8006d76:	f000 b92d 	b.w	8006fd4 <__retarget_lock_release_recursive>
 8006d7a:	bf00      	nop
 8006d7c:	20001279 	.word	0x20001279

08006d80 <__sinit>:
 8006d80:	b510      	push	{r4, lr}
 8006d82:	4604      	mov	r4, r0
 8006d84:	f7ff fff0 	bl	8006d68 <__sfp_lock_acquire>
 8006d88:	6a23      	ldr	r3, [r4, #32]
 8006d8a:	b11b      	cbz	r3, 8006d94 <__sinit+0x14>
 8006d8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d90:	f7ff bff0 	b.w	8006d74 <__sfp_lock_release>
 8006d94:	4b04      	ldr	r3, [pc, #16]	@ (8006da8 <__sinit+0x28>)
 8006d96:	6223      	str	r3, [r4, #32]
 8006d98:	4b04      	ldr	r3, [pc, #16]	@ (8006dac <__sinit+0x2c>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d1f5      	bne.n	8006d8c <__sinit+0xc>
 8006da0:	f7ff ffc4 	bl	8006d2c <global_stdio_init.part.0>
 8006da4:	e7f2      	b.n	8006d8c <__sinit+0xc>
 8006da6:	bf00      	nop
 8006da8:	08006ced 	.word	0x08006ced
 8006dac:	20001270 	.word	0x20001270

08006db0 <_fwalk_sglue>:
 8006db0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006db4:	4607      	mov	r7, r0
 8006db6:	4688      	mov	r8, r1
 8006db8:	4614      	mov	r4, r2
 8006dba:	2600      	movs	r6, #0
 8006dbc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006dc0:	f1b9 0901 	subs.w	r9, r9, #1
 8006dc4:	d505      	bpl.n	8006dd2 <_fwalk_sglue+0x22>
 8006dc6:	6824      	ldr	r4, [r4, #0]
 8006dc8:	2c00      	cmp	r4, #0
 8006dca:	d1f7      	bne.n	8006dbc <_fwalk_sglue+0xc>
 8006dcc:	4630      	mov	r0, r6
 8006dce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006dd2:	89ab      	ldrh	r3, [r5, #12]
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d907      	bls.n	8006de8 <_fwalk_sglue+0x38>
 8006dd8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006ddc:	3301      	adds	r3, #1
 8006dde:	d003      	beq.n	8006de8 <_fwalk_sglue+0x38>
 8006de0:	4629      	mov	r1, r5
 8006de2:	4638      	mov	r0, r7
 8006de4:	47c0      	blx	r8
 8006de6:	4306      	orrs	r6, r0
 8006de8:	3568      	adds	r5, #104	@ 0x68
 8006dea:	e7e9      	b.n	8006dc0 <_fwalk_sglue+0x10>

08006dec <siprintf>:
 8006dec:	b40e      	push	{r1, r2, r3}
 8006dee:	b510      	push	{r4, lr}
 8006df0:	b09d      	sub	sp, #116	@ 0x74
 8006df2:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006df4:	9002      	str	r0, [sp, #8]
 8006df6:	9006      	str	r0, [sp, #24]
 8006df8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006dfc:	480a      	ldr	r0, [pc, #40]	@ (8006e28 <siprintf+0x3c>)
 8006dfe:	9107      	str	r1, [sp, #28]
 8006e00:	9104      	str	r1, [sp, #16]
 8006e02:	490a      	ldr	r1, [pc, #40]	@ (8006e2c <siprintf+0x40>)
 8006e04:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e08:	9105      	str	r1, [sp, #20]
 8006e0a:	2400      	movs	r4, #0
 8006e0c:	a902      	add	r1, sp, #8
 8006e0e:	6800      	ldr	r0, [r0, #0]
 8006e10:	9301      	str	r3, [sp, #4]
 8006e12:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006e14:	f001 fc1e 	bl	8008654 <_svfiprintf_r>
 8006e18:	9b02      	ldr	r3, [sp, #8]
 8006e1a:	701c      	strb	r4, [r3, #0]
 8006e1c:	b01d      	add	sp, #116	@ 0x74
 8006e1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e22:	b003      	add	sp, #12
 8006e24:	4770      	bx	lr
 8006e26:	bf00      	nop
 8006e28:	20000018 	.word	0x20000018
 8006e2c:	ffff0208 	.word	0xffff0208

08006e30 <__sread>:
 8006e30:	b510      	push	{r4, lr}
 8006e32:	460c      	mov	r4, r1
 8006e34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e38:	f000 f87c 	bl	8006f34 <_read_r>
 8006e3c:	2800      	cmp	r0, #0
 8006e3e:	bfab      	itete	ge
 8006e40:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006e42:	89a3      	ldrhlt	r3, [r4, #12]
 8006e44:	181b      	addge	r3, r3, r0
 8006e46:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006e4a:	bfac      	ite	ge
 8006e4c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006e4e:	81a3      	strhlt	r3, [r4, #12]
 8006e50:	bd10      	pop	{r4, pc}

08006e52 <__swrite>:
 8006e52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e56:	461f      	mov	r7, r3
 8006e58:	898b      	ldrh	r3, [r1, #12]
 8006e5a:	05db      	lsls	r3, r3, #23
 8006e5c:	4605      	mov	r5, r0
 8006e5e:	460c      	mov	r4, r1
 8006e60:	4616      	mov	r6, r2
 8006e62:	d505      	bpl.n	8006e70 <__swrite+0x1e>
 8006e64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e68:	2302      	movs	r3, #2
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f000 f850 	bl	8006f10 <_lseek_r>
 8006e70:	89a3      	ldrh	r3, [r4, #12]
 8006e72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e76:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006e7a:	81a3      	strh	r3, [r4, #12]
 8006e7c:	4632      	mov	r2, r6
 8006e7e:	463b      	mov	r3, r7
 8006e80:	4628      	mov	r0, r5
 8006e82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e86:	f000 b867 	b.w	8006f58 <_write_r>

08006e8a <__sseek>:
 8006e8a:	b510      	push	{r4, lr}
 8006e8c:	460c      	mov	r4, r1
 8006e8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e92:	f000 f83d 	bl	8006f10 <_lseek_r>
 8006e96:	1c43      	adds	r3, r0, #1
 8006e98:	89a3      	ldrh	r3, [r4, #12]
 8006e9a:	bf15      	itete	ne
 8006e9c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006e9e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006ea2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006ea6:	81a3      	strheq	r3, [r4, #12]
 8006ea8:	bf18      	it	ne
 8006eaa:	81a3      	strhne	r3, [r4, #12]
 8006eac:	bd10      	pop	{r4, pc}

08006eae <__sclose>:
 8006eae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006eb2:	f000 b81d 	b.w	8006ef0 <_close_r>

08006eb6 <memcmp>:
 8006eb6:	b510      	push	{r4, lr}
 8006eb8:	3901      	subs	r1, #1
 8006eba:	4402      	add	r2, r0
 8006ebc:	4290      	cmp	r0, r2
 8006ebe:	d101      	bne.n	8006ec4 <memcmp+0xe>
 8006ec0:	2000      	movs	r0, #0
 8006ec2:	e005      	b.n	8006ed0 <memcmp+0x1a>
 8006ec4:	7803      	ldrb	r3, [r0, #0]
 8006ec6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006eca:	42a3      	cmp	r3, r4
 8006ecc:	d001      	beq.n	8006ed2 <memcmp+0x1c>
 8006ece:	1b18      	subs	r0, r3, r4
 8006ed0:	bd10      	pop	{r4, pc}
 8006ed2:	3001      	adds	r0, #1
 8006ed4:	e7f2      	b.n	8006ebc <memcmp+0x6>

08006ed6 <memset>:
 8006ed6:	4402      	add	r2, r0
 8006ed8:	4603      	mov	r3, r0
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d100      	bne.n	8006ee0 <memset+0xa>
 8006ede:	4770      	bx	lr
 8006ee0:	f803 1b01 	strb.w	r1, [r3], #1
 8006ee4:	e7f9      	b.n	8006eda <memset+0x4>
	...

08006ee8 <_localeconv_r>:
 8006ee8:	4800      	ldr	r0, [pc, #0]	@ (8006eec <_localeconv_r+0x4>)
 8006eea:	4770      	bx	lr
 8006eec:	20000158 	.word	0x20000158

08006ef0 <_close_r>:
 8006ef0:	b538      	push	{r3, r4, r5, lr}
 8006ef2:	4d06      	ldr	r5, [pc, #24]	@ (8006f0c <_close_r+0x1c>)
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	4604      	mov	r4, r0
 8006ef8:	4608      	mov	r0, r1
 8006efa:	602b      	str	r3, [r5, #0]
 8006efc:	f7fb fd7e 	bl	80029fc <_close>
 8006f00:	1c43      	adds	r3, r0, #1
 8006f02:	d102      	bne.n	8006f0a <_close_r+0x1a>
 8006f04:	682b      	ldr	r3, [r5, #0]
 8006f06:	b103      	cbz	r3, 8006f0a <_close_r+0x1a>
 8006f08:	6023      	str	r3, [r4, #0]
 8006f0a:	bd38      	pop	{r3, r4, r5, pc}
 8006f0c:	20001274 	.word	0x20001274

08006f10 <_lseek_r>:
 8006f10:	b538      	push	{r3, r4, r5, lr}
 8006f12:	4d07      	ldr	r5, [pc, #28]	@ (8006f30 <_lseek_r+0x20>)
 8006f14:	4604      	mov	r4, r0
 8006f16:	4608      	mov	r0, r1
 8006f18:	4611      	mov	r1, r2
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	602a      	str	r2, [r5, #0]
 8006f1e:	461a      	mov	r2, r3
 8006f20:	f7fb fd93 	bl	8002a4a <_lseek>
 8006f24:	1c43      	adds	r3, r0, #1
 8006f26:	d102      	bne.n	8006f2e <_lseek_r+0x1e>
 8006f28:	682b      	ldr	r3, [r5, #0]
 8006f2a:	b103      	cbz	r3, 8006f2e <_lseek_r+0x1e>
 8006f2c:	6023      	str	r3, [r4, #0]
 8006f2e:	bd38      	pop	{r3, r4, r5, pc}
 8006f30:	20001274 	.word	0x20001274

08006f34 <_read_r>:
 8006f34:	b538      	push	{r3, r4, r5, lr}
 8006f36:	4d07      	ldr	r5, [pc, #28]	@ (8006f54 <_read_r+0x20>)
 8006f38:	4604      	mov	r4, r0
 8006f3a:	4608      	mov	r0, r1
 8006f3c:	4611      	mov	r1, r2
 8006f3e:	2200      	movs	r2, #0
 8006f40:	602a      	str	r2, [r5, #0]
 8006f42:	461a      	mov	r2, r3
 8006f44:	f7fb fd21 	bl	800298a <_read>
 8006f48:	1c43      	adds	r3, r0, #1
 8006f4a:	d102      	bne.n	8006f52 <_read_r+0x1e>
 8006f4c:	682b      	ldr	r3, [r5, #0]
 8006f4e:	b103      	cbz	r3, 8006f52 <_read_r+0x1e>
 8006f50:	6023      	str	r3, [r4, #0]
 8006f52:	bd38      	pop	{r3, r4, r5, pc}
 8006f54:	20001274 	.word	0x20001274

08006f58 <_write_r>:
 8006f58:	b538      	push	{r3, r4, r5, lr}
 8006f5a:	4d07      	ldr	r5, [pc, #28]	@ (8006f78 <_write_r+0x20>)
 8006f5c:	4604      	mov	r4, r0
 8006f5e:	4608      	mov	r0, r1
 8006f60:	4611      	mov	r1, r2
 8006f62:	2200      	movs	r2, #0
 8006f64:	602a      	str	r2, [r5, #0]
 8006f66:	461a      	mov	r2, r3
 8006f68:	f7fb fd2c 	bl	80029c4 <_write>
 8006f6c:	1c43      	adds	r3, r0, #1
 8006f6e:	d102      	bne.n	8006f76 <_write_r+0x1e>
 8006f70:	682b      	ldr	r3, [r5, #0]
 8006f72:	b103      	cbz	r3, 8006f76 <_write_r+0x1e>
 8006f74:	6023      	str	r3, [r4, #0]
 8006f76:	bd38      	pop	{r3, r4, r5, pc}
 8006f78:	20001274 	.word	0x20001274

08006f7c <__errno>:
 8006f7c:	4b01      	ldr	r3, [pc, #4]	@ (8006f84 <__errno+0x8>)
 8006f7e:	6818      	ldr	r0, [r3, #0]
 8006f80:	4770      	bx	lr
 8006f82:	bf00      	nop
 8006f84:	20000018 	.word	0x20000018

08006f88 <__libc_init_array>:
 8006f88:	b570      	push	{r4, r5, r6, lr}
 8006f8a:	4d0d      	ldr	r5, [pc, #52]	@ (8006fc0 <__libc_init_array+0x38>)
 8006f8c:	4c0d      	ldr	r4, [pc, #52]	@ (8006fc4 <__libc_init_array+0x3c>)
 8006f8e:	1b64      	subs	r4, r4, r5
 8006f90:	10a4      	asrs	r4, r4, #2
 8006f92:	2600      	movs	r6, #0
 8006f94:	42a6      	cmp	r6, r4
 8006f96:	d109      	bne.n	8006fac <__libc_init_array+0x24>
 8006f98:	4d0b      	ldr	r5, [pc, #44]	@ (8006fc8 <__libc_init_array+0x40>)
 8006f9a:	4c0c      	ldr	r4, [pc, #48]	@ (8006fcc <__libc_init_array+0x44>)
 8006f9c:	f002 fa6a 	bl	8009474 <_init>
 8006fa0:	1b64      	subs	r4, r4, r5
 8006fa2:	10a4      	asrs	r4, r4, #2
 8006fa4:	2600      	movs	r6, #0
 8006fa6:	42a6      	cmp	r6, r4
 8006fa8:	d105      	bne.n	8006fb6 <__libc_init_array+0x2e>
 8006faa:	bd70      	pop	{r4, r5, r6, pc}
 8006fac:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fb0:	4798      	blx	r3
 8006fb2:	3601      	adds	r6, #1
 8006fb4:	e7ee      	b.n	8006f94 <__libc_init_array+0xc>
 8006fb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fba:	4798      	blx	r3
 8006fbc:	3601      	adds	r6, #1
 8006fbe:	e7f2      	b.n	8006fa6 <__libc_init_array+0x1e>
 8006fc0:	08009f94 	.word	0x08009f94
 8006fc4:	08009f94 	.word	0x08009f94
 8006fc8:	08009f94 	.word	0x08009f94
 8006fcc:	08009f98 	.word	0x08009f98

08006fd0 <__retarget_lock_init_recursive>:
 8006fd0:	4770      	bx	lr

08006fd2 <__retarget_lock_acquire_recursive>:
 8006fd2:	4770      	bx	lr

08006fd4 <__retarget_lock_release_recursive>:
 8006fd4:	4770      	bx	lr

08006fd6 <memcpy>:
 8006fd6:	440a      	add	r2, r1
 8006fd8:	4291      	cmp	r1, r2
 8006fda:	f100 33ff 	add.w	r3, r0, #4294967295
 8006fde:	d100      	bne.n	8006fe2 <memcpy+0xc>
 8006fe0:	4770      	bx	lr
 8006fe2:	b510      	push	{r4, lr}
 8006fe4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006fe8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006fec:	4291      	cmp	r1, r2
 8006fee:	d1f9      	bne.n	8006fe4 <memcpy+0xe>
 8006ff0:	bd10      	pop	{r4, pc}

08006ff2 <quorem>:
 8006ff2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ff6:	6903      	ldr	r3, [r0, #16]
 8006ff8:	690c      	ldr	r4, [r1, #16]
 8006ffa:	42a3      	cmp	r3, r4
 8006ffc:	4607      	mov	r7, r0
 8006ffe:	db7e      	blt.n	80070fe <quorem+0x10c>
 8007000:	3c01      	subs	r4, #1
 8007002:	f101 0814 	add.w	r8, r1, #20
 8007006:	00a3      	lsls	r3, r4, #2
 8007008:	f100 0514 	add.w	r5, r0, #20
 800700c:	9300      	str	r3, [sp, #0]
 800700e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007012:	9301      	str	r3, [sp, #4]
 8007014:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007018:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800701c:	3301      	adds	r3, #1
 800701e:	429a      	cmp	r2, r3
 8007020:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007024:	fbb2 f6f3 	udiv	r6, r2, r3
 8007028:	d32e      	bcc.n	8007088 <quorem+0x96>
 800702a:	f04f 0a00 	mov.w	sl, #0
 800702e:	46c4      	mov	ip, r8
 8007030:	46ae      	mov	lr, r5
 8007032:	46d3      	mov	fp, sl
 8007034:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007038:	b298      	uxth	r0, r3
 800703a:	fb06 a000 	mla	r0, r6, r0, sl
 800703e:	0c02      	lsrs	r2, r0, #16
 8007040:	0c1b      	lsrs	r3, r3, #16
 8007042:	fb06 2303 	mla	r3, r6, r3, r2
 8007046:	f8de 2000 	ldr.w	r2, [lr]
 800704a:	b280      	uxth	r0, r0
 800704c:	b292      	uxth	r2, r2
 800704e:	1a12      	subs	r2, r2, r0
 8007050:	445a      	add	r2, fp
 8007052:	f8de 0000 	ldr.w	r0, [lr]
 8007056:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800705a:	b29b      	uxth	r3, r3
 800705c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007060:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007064:	b292      	uxth	r2, r2
 8007066:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800706a:	45e1      	cmp	r9, ip
 800706c:	f84e 2b04 	str.w	r2, [lr], #4
 8007070:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007074:	d2de      	bcs.n	8007034 <quorem+0x42>
 8007076:	9b00      	ldr	r3, [sp, #0]
 8007078:	58eb      	ldr	r3, [r5, r3]
 800707a:	b92b      	cbnz	r3, 8007088 <quorem+0x96>
 800707c:	9b01      	ldr	r3, [sp, #4]
 800707e:	3b04      	subs	r3, #4
 8007080:	429d      	cmp	r5, r3
 8007082:	461a      	mov	r2, r3
 8007084:	d32f      	bcc.n	80070e6 <quorem+0xf4>
 8007086:	613c      	str	r4, [r7, #16]
 8007088:	4638      	mov	r0, r7
 800708a:	f001 f97f 	bl	800838c <__mcmp>
 800708e:	2800      	cmp	r0, #0
 8007090:	db25      	blt.n	80070de <quorem+0xec>
 8007092:	4629      	mov	r1, r5
 8007094:	2000      	movs	r0, #0
 8007096:	f858 2b04 	ldr.w	r2, [r8], #4
 800709a:	f8d1 c000 	ldr.w	ip, [r1]
 800709e:	fa1f fe82 	uxth.w	lr, r2
 80070a2:	fa1f f38c 	uxth.w	r3, ip
 80070a6:	eba3 030e 	sub.w	r3, r3, lr
 80070aa:	4403      	add	r3, r0
 80070ac:	0c12      	lsrs	r2, r2, #16
 80070ae:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80070b2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80070bc:	45c1      	cmp	r9, r8
 80070be:	f841 3b04 	str.w	r3, [r1], #4
 80070c2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80070c6:	d2e6      	bcs.n	8007096 <quorem+0xa4>
 80070c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80070cc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80070d0:	b922      	cbnz	r2, 80070dc <quorem+0xea>
 80070d2:	3b04      	subs	r3, #4
 80070d4:	429d      	cmp	r5, r3
 80070d6:	461a      	mov	r2, r3
 80070d8:	d30b      	bcc.n	80070f2 <quorem+0x100>
 80070da:	613c      	str	r4, [r7, #16]
 80070dc:	3601      	adds	r6, #1
 80070de:	4630      	mov	r0, r6
 80070e0:	b003      	add	sp, #12
 80070e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070e6:	6812      	ldr	r2, [r2, #0]
 80070e8:	3b04      	subs	r3, #4
 80070ea:	2a00      	cmp	r2, #0
 80070ec:	d1cb      	bne.n	8007086 <quorem+0x94>
 80070ee:	3c01      	subs	r4, #1
 80070f0:	e7c6      	b.n	8007080 <quorem+0x8e>
 80070f2:	6812      	ldr	r2, [r2, #0]
 80070f4:	3b04      	subs	r3, #4
 80070f6:	2a00      	cmp	r2, #0
 80070f8:	d1ef      	bne.n	80070da <quorem+0xe8>
 80070fa:	3c01      	subs	r4, #1
 80070fc:	e7ea      	b.n	80070d4 <quorem+0xe2>
 80070fe:	2000      	movs	r0, #0
 8007100:	e7ee      	b.n	80070e0 <quorem+0xee>
 8007102:	0000      	movs	r0, r0
 8007104:	0000      	movs	r0, r0
	...

08007108 <_dtoa_r>:
 8007108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800710c:	69c7      	ldr	r7, [r0, #28]
 800710e:	b097      	sub	sp, #92	@ 0x5c
 8007110:	ed8d 0b04 	vstr	d0, [sp, #16]
 8007114:	ec55 4b10 	vmov	r4, r5, d0
 8007118:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800711a:	9107      	str	r1, [sp, #28]
 800711c:	4681      	mov	r9, r0
 800711e:	920c      	str	r2, [sp, #48]	@ 0x30
 8007120:	9311      	str	r3, [sp, #68]	@ 0x44
 8007122:	b97f      	cbnz	r7, 8007144 <_dtoa_r+0x3c>
 8007124:	2010      	movs	r0, #16
 8007126:	f000 fe09 	bl	8007d3c <malloc>
 800712a:	4602      	mov	r2, r0
 800712c:	f8c9 001c 	str.w	r0, [r9, #28]
 8007130:	b920      	cbnz	r0, 800713c <_dtoa_r+0x34>
 8007132:	4ba9      	ldr	r3, [pc, #676]	@ (80073d8 <_dtoa_r+0x2d0>)
 8007134:	21ef      	movs	r1, #239	@ 0xef
 8007136:	48a9      	ldr	r0, [pc, #676]	@ (80073dc <_dtoa_r+0x2d4>)
 8007138:	f001 fc5e 	bl	80089f8 <__assert_func>
 800713c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007140:	6007      	str	r7, [r0, #0]
 8007142:	60c7      	str	r7, [r0, #12]
 8007144:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007148:	6819      	ldr	r1, [r3, #0]
 800714a:	b159      	cbz	r1, 8007164 <_dtoa_r+0x5c>
 800714c:	685a      	ldr	r2, [r3, #4]
 800714e:	604a      	str	r2, [r1, #4]
 8007150:	2301      	movs	r3, #1
 8007152:	4093      	lsls	r3, r2
 8007154:	608b      	str	r3, [r1, #8]
 8007156:	4648      	mov	r0, r9
 8007158:	f000 fee6 	bl	8007f28 <_Bfree>
 800715c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007160:	2200      	movs	r2, #0
 8007162:	601a      	str	r2, [r3, #0]
 8007164:	1e2b      	subs	r3, r5, #0
 8007166:	bfb9      	ittee	lt
 8007168:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800716c:	9305      	strlt	r3, [sp, #20]
 800716e:	2300      	movge	r3, #0
 8007170:	6033      	strge	r3, [r6, #0]
 8007172:	9f05      	ldr	r7, [sp, #20]
 8007174:	4b9a      	ldr	r3, [pc, #616]	@ (80073e0 <_dtoa_r+0x2d8>)
 8007176:	bfbc      	itt	lt
 8007178:	2201      	movlt	r2, #1
 800717a:	6032      	strlt	r2, [r6, #0]
 800717c:	43bb      	bics	r3, r7
 800717e:	d112      	bne.n	80071a6 <_dtoa_r+0x9e>
 8007180:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007182:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007186:	6013      	str	r3, [r2, #0]
 8007188:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800718c:	4323      	orrs	r3, r4
 800718e:	f000 855a 	beq.w	8007c46 <_dtoa_r+0xb3e>
 8007192:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007194:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80073f4 <_dtoa_r+0x2ec>
 8007198:	2b00      	cmp	r3, #0
 800719a:	f000 855c 	beq.w	8007c56 <_dtoa_r+0xb4e>
 800719e:	f10a 0303 	add.w	r3, sl, #3
 80071a2:	f000 bd56 	b.w	8007c52 <_dtoa_r+0xb4a>
 80071a6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80071aa:	2200      	movs	r2, #0
 80071ac:	ec51 0b17 	vmov	r0, r1, d7
 80071b0:	2300      	movs	r3, #0
 80071b2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80071b6:	f7f9 fc8f 	bl	8000ad8 <__aeabi_dcmpeq>
 80071ba:	4680      	mov	r8, r0
 80071bc:	b158      	cbz	r0, 80071d6 <_dtoa_r+0xce>
 80071be:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80071c0:	2301      	movs	r3, #1
 80071c2:	6013      	str	r3, [r2, #0]
 80071c4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80071c6:	b113      	cbz	r3, 80071ce <_dtoa_r+0xc6>
 80071c8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80071ca:	4b86      	ldr	r3, [pc, #536]	@ (80073e4 <_dtoa_r+0x2dc>)
 80071cc:	6013      	str	r3, [r2, #0]
 80071ce:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80073f8 <_dtoa_r+0x2f0>
 80071d2:	f000 bd40 	b.w	8007c56 <_dtoa_r+0xb4e>
 80071d6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80071da:	aa14      	add	r2, sp, #80	@ 0x50
 80071dc:	a915      	add	r1, sp, #84	@ 0x54
 80071de:	4648      	mov	r0, r9
 80071e0:	f001 f984 	bl	80084ec <__d2b>
 80071e4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80071e8:	9002      	str	r0, [sp, #8]
 80071ea:	2e00      	cmp	r6, #0
 80071ec:	d078      	beq.n	80072e0 <_dtoa_r+0x1d8>
 80071ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80071f0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80071f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80071f8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80071fc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007200:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007204:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007208:	4619      	mov	r1, r3
 800720a:	2200      	movs	r2, #0
 800720c:	4b76      	ldr	r3, [pc, #472]	@ (80073e8 <_dtoa_r+0x2e0>)
 800720e:	f7f9 f843 	bl	8000298 <__aeabi_dsub>
 8007212:	a36b      	add	r3, pc, #428	@ (adr r3, 80073c0 <_dtoa_r+0x2b8>)
 8007214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007218:	f7f9 f9f6 	bl	8000608 <__aeabi_dmul>
 800721c:	a36a      	add	r3, pc, #424	@ (adr r3, 80073c8 <_dtoa_r+0x2c0>)
 800721e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007222:	f7f9 f83b 	bl	800029c <__adddf3>
 8007226:	4604      	mov	r4, r0
 8007228:	4630      	mov	r0, r6
 800722a:	460d      	mov	r5, r1
 800722c:	f7f9 f982 	bl	8000534 <__aeabi_i2d>
 8007230:	a367      	add	r3, pc, #412	@ (adr r3, 80073d0 <_dtoa_r+0x2c8>)
 8007232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007236:	f7f9 f9e7 	bl	8000608 <__aeabi_dmul>
 800723a:	4602      	mov	r2, r0
 800723c:	460b      	mov	r3, r1
 800723e:	4620      	mov	r0, r4
 8007240:	4629      	mov	r1, r5
 8007242:	f7f9 f82b 	bl	800029c <__adddf3>
 8007246:	4604      	mov	r4, r0
 8007248:	460d      	mov	r5, r1
 800724a:	f7f9 fc8d 	bl	8000b68 <__aeabi_d2iz>
 800724e:	2200      	movs	r2, #0
 8007250:	4607      	mov	r7, r0
 8007252:	2300      	movs	r3, #0
 8007254:	4620      	mov	r0, r4
 8007256:	4629      	mov	r1, r5
 8007258:	f7f9 fc48 	bl	8000aec <__aeabi_dcmplt>
 800725c:	b140      	cbz	r0, 8007270 <_dtoa_r+0x168>
 800725e:	4638      	mov	r0, r7
 8007260:	f7f9 f968 	bl	8000534 <__aeabi_i2d>
 8007264:	4622      	mov	r2, r4
 8007266:	462b      	mov	r3, r5
 8007268:	f7f9 fc36 	bl	8000ad8 <__aeabi_dcmpeq>
 800726c:	b900      	cbnz	r0, 8007270 <_dtoa_r+0x168>
 800726e:	3f01      	subs	r7, #1
 8007270:	2f16      	cmp	r7, #22
 8007272:	d852      	bhi.n	800731a <_dtoa_r+0x212>
 8007274:	4b5d      	ldr	r3, [pc, #372]	@ (80073ec <_dtoa_r+0x2e4>)
 8007276:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800727a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800727e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007282:	f7f9 fc33 	bl	8000aec <__aeabi_dcmplt>
 8007286:	2800      	cmp	r0, #0
 8007288:	d049      	beq.n	800731e <_dtoa_r+0x216>
 800728a:	3f01      	subs	r7, #1
 800728c:	2300      	movs	r3, #0
 800728e:	9310      	str	r3, [sp, #64]	@ 0x40
 8007290:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007292:	1b9b      	subs	r3, r3, r6
 8007294:	1e5a      	subs	r2, r3, #1
 8007296:	bf45      	ittet	mi
 8007298:	f1c3 0301 	rsbmi	r3, r3, #1
 800729c:	9300      	strmi	r3, [sp, #0]
 800729e:	2300      	movpl	r3, #0
 80072a0:	2300      	movmi	r3, #0
 80072a2:	9206      	str	r2, [sp, #24]
 80072a4:	bf54      	ite	pl
 80072a6:	9300      	strpl	r3, [sp, #0]
 80072a8:	9306      	strmi	r3, [sp, #24]
 80072aa:	2f00      	cmp	r7, #0
 80072ac:	db39      	blt.n	8007322 <_dtoa_r+0x21a>
 80072ae:	9b06      	ldr	r3, [sp, #24]
 80072b0:	970d      	str	r7, [sp, #52]	@ 0x34
 80072b2:	443b      	add	r3, r7
 80072b4:	9306      	str	r3, [sp, #24]
 80072b6:	2300      	movs	r3, #0
 80072b8:	9308      	str	r3, [sp, #32]
 80072ba:	9b07      	ldr	r3, [sp, #28]
 80072bc:	2b09      	cmp	r3, #9
 80072be:	d863      	bhi.n	8007388 <_dtoa_r+0x280>
 80072c0:	2b05      	cmp	r3, #5
 80072c2:	bfc4      	itt	gt
 80072c4:	3b04      	subgt	r3, #4
 80072c6:	9307      	strgt	r3, [sp, #28]
 80072c8:	9b07      	ldr	r3, [sp, #28]
 80072ca:	f1a3 0302 	sub.w	r3, r3, #2
 80072ce:	bfcc      	ite	gt
 80072d0:	2400      	movgt	r4, #0
 80072d2:	2401      	movle	r4, #1
 80072d4:	2b03      	cmp	r3, #3
 80072d6:	d863      	bhi.n	80073a0 <_dtoa_r+0x298>
 80072d8:	e8df f003 	tbb	[pc, r3]
 80072dc:	2b375452 	.word	0x2b375452
 80072e0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80072e4:	441e      	add	r6, r3
 80072e6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80072ea:	2b20      	cmp	r3, #32
 80072ec:	bfc1      	itttt	gt
 80072ee:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80072f2:	409f      	lslgt	r7, r3
 80072f4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80072f8:	fa24 f303 	lsrgt.w	r3, r4, r3
 80072fc:	bfd6      	itet	le
 80072fe:	f1c3 0320 	rsble	r3, r3, #32
 8007302:	ea47 0003 	orrgt.w	r0, r7, r3
 8007306:	fa04 f003 	lslle.w	r0, r4, r3
 800730a:	f7f9 f903 	bl	8000514 <__aeabi_ui2d>
 800730e:	2201      	movs	r2, #1
 8007310:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007314:	3e01      	subs	r6, #1
 8007316:	9212      	str	r2, [sp, #72]	@ 0x48
 8007318:	e776      	b.n	8007208 <_dtoa_r+0x100>
 800731a:	2301      	movs	r3, #1
 800731c:	e7b7      	b.n	800728e <_dtoa_r+0x186>
 800731e:	9010      	str	r0, [sp, #64]	@ 0x40
 8007320:	e7b6      	b.n	8007290 <_dtoa_r+0x188>
 8007322:	9b00      	ldr	r3, [sp, #0]
 8007324:	1bdb      	subs	r3, r3, r7
 8007326:	9300      	str	r3, [sp, #0]
 8007328:	427b      	negs	r3, r7
 800732a:	9308      	str	r3, [sp, #32]
 800732c:	2300      	movs	r3, #0
 800732e:	930d      	str	r3, [sp, #52]	@ 0x34
 8007330:	e7c3      	b.n	80072ba <_dtoa_r+0x1b2>
 8007332:	2301      	movs	r3, #1
 8007334:	9309      	str	r3, [sp, #36]	@ 0x24
 8007336:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007338:	eb07 0b03 	add.w	fp, r7, r3
 800733c:	f10b 0301 	add.w	r3, fp, #1
 8007340:	2b01      	cmp	r3, #1
 8007342:	9303      	str	r3, [sp, #12]
 8007344:	bfb8      	it	lt
 8007346:	2301      	movlt	r3, #1
 8007348:	e006      	b.n	8007358 <_dtoa_r+0x250>
 800734a:	2301      	movs	r3, #1
 800734c:	9309      	str	r3, [sp, #36]	@ 0x24
 800734e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007350:	2b00      	cmp	r3, #0
 8007352:	dd28      	ble.n	80073a6 <_dtoa_r+0x29e>
 8007354:	469b      	mov	fp, r3
 8007356:	9303      	str	r3, [sp, #12]
 8007358:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800735c:	2100      	movs	r1, #0
 800735e:	2204      	movs	r2, #4
 8007360:	f102 0514 	add.w	r5, r2, #20
 8007364:	429d      	cmp	r5, r3
 8007366:	d926      	bls.n	80073b6 <_dtoa_r+0x2ae>
 8007368:	6041      	str	r1, [r0, #4]
 800736a:	4648      	mov	r0, r9
 800736c:	f000 fd9c 	bl	8007ea8 <_Balloc>
 8007370:	4682      	mov	sl, r0
 8007372:	2800      	cmp	r0, #0
 8007374:	d142      	bne.n	80073fc <_dtoa_r+0x2f4>
 8007376:	4b1e      	ldr	r3, [pc, #120]	@ (80073f0 <_dtoa_r+0x2e8>)
 8007378:	4602      	mov	r2, r0
 800737a:	f240 11af 	movw	r1, #431	@ 0x1af
 800737e:	e6da      	b.n	8007136 <_dtoa_r+0x2e>
 8007380:	2300      	movs	r3, #0
 8007382:	e7e3      	b.n	800734c <_dtoa_r+0x244>
 8007384:	2300      	movs	r3, #0
 8007386:	e7d5      	b.n	8007334 <_dtoa_r+0x22c>
 8007388:	2401      	movs	r4, #1
 800738a:	2300      	movs	r3, #0
 800738c:	9307      	str	r3, [sp, #28]
 800738e:	9409      	str	r4, [sp, #36]	@ 0x24
 8007390:	f04f 3bff 	mov.w	fp, #4294967295
 8007394:	2200      	movs	r2, #0
 8007396:	f8cd b00c 	str.w	fp, [sp, #12]
 800739a:	2312      	movs	r3, #18
 800739c:	920c      	str	r2, [sp, #48]	@ 0x30
 800739e:	e7db      	b.n	8007358 <_dtoa_r+0x250>
 80073a0:	2301      	movs	r3, #1
 80073a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80073a4:	e7f4      	b.n	8007390 <_dtoa_r+0x288>
 80073a6:	f04f 0b01 	mov.w	fp, #1
 80073aa:	f8cd b00c 	str.w	fp, [sp, #12]
 80073ae:	465b      	mov	r3, fp
 80073b0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80073b4:	e7d0      	b.n	8007358 <_dtoa_r+0x250>
 80073b6:	3101      	adds	r1, #1
 80073b8:	0052      	lsls	r2, r2, #1
 80073ba:	e7d1      	b.n	8007360 <_dtoa_r+0x258>
 80073bc:	f3af 8000 	nop.w
 80073c0:	636f4361 	.word	0x636f4361
 80073c4:	3fd287a7 	.word	0x3fd287a7
 80073c8:	8b60c8b3 	.word	0x8b60c8b3
 80073cc:	3fc68a28 	.word	0x3fc68a28
 80073d0:	509f79fb 	.word	0x509f79fb
 80073d4:	3fd34413 	.word	0x3fd34413
 80073d8:	08009c55 	.word	0x08009c55
 80073dc:	08009c6c 	.word	0x08009c6c
 80073e0:	7ff00000 	.word	0x7ff00000
 80073e4:	08009c25 	.word	0x08009c25
 80073e8:	3ff80000 	.word	0x3ff80000
 80073ec:	08009dc0 	.word	0x08009dc0
 80073f0:	08009cc4 	.word	0x08009cc4
 80073f4:	08009c51 	.word	0x08009c51
 80073f8:	08009c24 	.word	0x08009c24
 80073fc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007400:	6018      	str	r0, [r3, #0]
 8007402:	9b03      	ldr	r3, [sp, #12]
 8007404:	2b0e      	cmp	r3, #14
 8007406:	f200 80a1 	bhi.w	800754c <_dtoa_r+0x444>
 800740a:	2c00      	cmp	r4, #0
 800740c:	f000 809e 	beq.w	800754c <_dtoa_r+0x444>
 8007410:	2f00      	cmp	r7, #0
 8007412:	dd33      	ble.n	800747c <_dtoa_r+0x374>
 8007414:	4b9c      	ldr	r3, [pc, #624]	@ (8007688 <_dtoa_r+0x580>)
 8007416:	f007 020f 	and.w	r2, r7, #15
 800741a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800741e:	ed93 7b00 	vldr	d7, [r3]
 8007422:	05f8      	lsls	r0, r7, #23
 8007424:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8007428:	ea4f 1427 	mov.w	r4, r7, asr #4
 800742c:	d516      	bpl.n	800745c <_dtoa_r+0x354>
 800742e:	4b97      	ldr	r3, [pc, #604]	@ (800768c <_dtoa_r+0x584>)
 8007430:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007434:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007438:	f7f9 fa10 	bl	800085c <__aeabi_ddiv>
 800743c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007440:	f004 040f 	and.w	r4, r4, #15
 8007444:	2603      	movs	r6, #3
 8007446:	4d91      	ldr	r5, [pc, #580]	@ (800768c <_dtoa_r+0x584>)
 8007448:	b954      	cbnz	r4, 8007460 <_dtoa_r+0x358>
 800744a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800744e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007452:	f7f9 fa03 	bl	800085c <__aeabi_ddiv>
 8007456:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800745a:	e028      	b.n	80074ae <_dtoa_r+0x3a6>
 800745c:	2602      	movs	r6, #2
 800745e:	e7f2      	b.n	8007446 <_dtoa_r+0x33e>
 8007460:	07e1      	lsls	r1, r4, #31
 8007462:	d508      	bpl.n	8007476 <_dtoa_r+0x36e>
 8007464:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007468:	e9d5 2300 	ldrd	r2, r3, [r5]
 800746c:	f7f9 f8cc 	bl	8000608 <__aeabi_dmul>
 8007470:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007474:	3601      	adds	r6, #1
 8007476:	1064      	asrs	r4, r4, #1
 8007478:	3508      	adds	r5, #8
 800747a:	e7e5      	b.n	8007448 <_dtoa_r+0x340>
 800747c:	f000 80af 	beq.w	80075de <_dtoa_r+0x4d6>
 8007480:	427c      	negs	r4, r7
 8007482:	4b81      	ldr	r3, [pc, #516]	@ (8007688 <_dtoa_r+0x580>)
 8007484:	4d81      	ldr	r5, [pc, #516]	@ (800768c <_dtoa_r+0x584>)
 8007486:	f004 020f 	and.w	r2, r4, #15
 800748a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800748e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007492:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007496:	f7f9 f8b7 	bl	8000608 <__aeabi_dmul>
 800749a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800749e:	1124      	asrs	r4, r4, #4
 80074a0:	2300      	movs	r3, #0
 80074a2:	2602      	movs	r6, #2
 80074a4:	2c00      	cmp	r4, #0
 80074a6:	f040 808f 	bne.w	80075c8 <_dtoa_r+0x4c0>
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d1d3      	bne.n	8007456 <_dtoa_r+0x34e>
 80074ae:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80074b0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	f000 8094 	beq.w	80075e2 <_dtoa_r+0x4da>
 80074ba:	4b75      	ldr	r3, [pc, #468]	@ (8007690 <_dtoa_r+0x588>)
 80074bc:	2200      	movs	r2, #0
 80074be:	4620      	mov	r0, r4
 80074c0:	4629      	mov	r1, r5
 80074c2:	f7f9 fb13 	bl	8000aec <__aeabi_dcmplt>
 80074c6:	2800      	cmp	r0, #0
 80074c8:	f000 808b 	beq.w	80075e2 <_dtoa_r+0x4da>
 80074cc:	9b03      	ldr	r3, [sp, #12]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	f000 8087 	beq.w	80075e2 <_dtoa_r+0x4da>
 80074d4:	f1bb 0f00 	cmp.w	fp, #0
 80074d8:	dd34      	ble.n	8007544 <_dtoa_r+0x43c>
 80074da:	4620      	mov	r0, r4
 80074dc:	4b6d      	ldr	r3, [pc, #436]	@ (8007694 <_dtoa_r+0x58c>)
 80074de:	2200      	movs	r2, #0
 80074e0:	4629      	mov	r1, r5
 80074e2:	f7f9 f891 	bl	8000608 <__aeabi_dmul>
 80074e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80074ea:	f107 38ff 	add.w	r8, r7, #4294967295
 80074ee:	3601      	adds	r6, #1
 80074f0:	465c      	mov	r4, fp
 80074f2:	4630      	mov	r0, r6
 80074f4:	f7f9 f81e 	bl	8000534 <__aeabi_i2d>
 80074f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80074fc:	f7f9 f884 	bl	8000608 <__aeabi_dmul>
 8007500:	4b65      	ldr	r3, [pc, #404]	@ (8007698 <_dtoa_r+0x590>)
 8007502:	2200      	movs	r2, #0
 8007504:	f7f8 feca 	bl	800029c <__adddf3>
 8007508:	4605      	mov	r5, r0
 800750a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800750e:	2c00      	cmp	r4, #0
 8007510:	d16a      	bne.n	80075e8 <_dtoa_r+0x4e0>
 8007512:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007516:	4b61      	ldr	r3, [pc, #388]	@ (800769c <_dtoa_r+0x594>)
 8007518:	2200      	movs	r2, #0
 800751a:	f7f8 febd 	bl	8000298 <__aeabi_dsub>
 800751e:	4602      	mov	r2, r0
 8007520:	460b      	mov	r3, r1
 8007522:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007526:	462a      	mov	r2, r5
 8007528:	4633      	mov	r3, r6
 800752a:	f7f9 fafd 	bl	8000b28 <__aeabi_dcmpgt>
 800752e:	2800      	cmp	r0, #0
 8007530:	f040 8298 	bne.w	8007a64 <_dtoa_r+0x95c>
 8007534:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007538:	462a      	mov	r2, r5
 800753a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800753e:	f7f9 fad5 	bl	8000aec <__aeabi_dcmplt>
 8007542:	bb38      	cbnz	r0, 8007594 <_dtoa_r+0x48c>
 8007544:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8007548:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800754c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800754e:	2b00      	cmp	r3, #0
 8007550:	f2c0 8157 	blt.w	8007802 <_dtoa_r+0x6fa>
 8007554:	2f0e      	cmp	r7, #14
 8007556:	f300 8154 	bgt.w	8007802 <_dtoa_r+0x6fa>
 800755a:	4b4b      	ldr	r3, [pc, #300]	@ (8007688 <_dtoa_r+0x580>)
 800755c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007560:	ed93 7b00 	vldr	d7, [r3]
 8007564:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007566:	2b00      	cmp	r3, #0
 8007568:	ed8d 7b00 	vstr	d7, [sp]
 800756c:	f280 80e5 	bge.w	800773a <_dtoa_r+0x632>
 8007570:	9b03      	ldr	r3, [sp, #12]
 8007572:	2b00      	cmp	r3, #0
 8007574:	f300 80e1 	bgt.w	800773a <_dtoa_r+0x632>
 8007578:	d10c      	bne.n	8007594 <_dtoa_r+0x48c>
 800757a:	4b48      	ldr	r3, [pc, #288]	@ (800769c <_dtoa_r+0x594>)
 800757c:	2200      	movs	r2, #0
 800757e:	ec51 0b17 	vmov	r0, r1, d7
 8007582:	f7f9 f841 	bl	8000608 <__aeabi_dmul>
 8007586:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800758a:	f7f9 fac3 	bl	8000b14 <__aeabi_dcmpge>
 800758e:	2800      	cmp	r0, #0
 8007590:	f000 8266 	beq.w	8007a60 <_dtoa_r+0x958>
 8007594:	2400      	movs	r4, #0
 8007596:	4625      	mov	r5, r4
 8007598:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800759a:	4656      	mov	r6, sl
 800759c:	ea6f 0803 	mvn.w	r8, r3
 80075a0:	2700      	movs	r7, #0
 80075a2:	4621      	mov	r1, r4
 80075a4:	4648      	mov	r0, r9
 80075a6:	f000 fcbf 	bl	8007f28 <_Bfree>
 80075aa:	2d00      	cmp	r5, #0
 80075ac:	f000 80bd 	beq.w	800772a <_dtoa_r+0x622>
 80075b0:	b12f      	cbz	r7, 80075be <_dtoa_r+0x4b6>
 80075b2:	42af      	cmp	r7, r5
 80075b4:	d003      	beq.n	80075be <_dtoa_r+0x4b6>
 80075b6:	4639      	mov	r1, r7
 80075b8:	4648      	mov	r0, r9
 80075ba:	f000 fcb5 	bl	8007f28 <_Bfree>
 80075be:	4629      	mov	r1, r5
 80075c0:	4648      	mov	r0, r9
 80075c2:	f000 fcb1 	bl	8007f28 <_Bfree>
 80075c6:	e0b0      	b.n	800772a <_dtoa_r+0x622>
 80075c8:	07e2      	lsls	r2, r4, #31
 80075ca:	d505      	bpl.n	80075d8 <_dtoa_r+0x4d0>
 80075cc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80075d0:	f7f9 f81a 	bl	8000608 <__aeabi_dmul>
 80075d4:	3601      	adds	r6, #1
 80075d6:	2301      	movs	r3, #1
 80075d8:	1064      	asrs	r4, r4, #1
 80075da:	3508      	adds	r5, #8
 80075dc:	e762      	b.n	80074a4 <_dtoa_r+0x39c>
 80075de:	2602      	movs	r6, #2
 80075e0:	e765      	b.n	80074ae <_dtoa_r+0x3a6>
 80075e2:	9c03      	ldr	r4, [sp, #12]
 80075e4:	46b8      	mov	r8, r7
 80075e6:	e784      	b.n	80074f2 <_dtoa_r+0x3ea>
 80075e8:	4b27      	ldr	r3, [pc, #156]	@ (8007688 <_dtoa_r+0x580>)
 80075ea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80075ec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80075f0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80075f4:	4454      	add	r4, sl
 80075f6:	2900      	cmp	r1, #0
 80075f8:	d054      	beq.n	80076a4 <_dtoa_r+0x59c>
 80075fa:	4929      	ldr	r1, [pc, #164]	@ (80076a0 <_dtoa_r+0x598>)
 80075fc:	2000      	movs	r0, #0
 80075fe:	f7f9 f92d 	bl	800085c <__aeabi_ddiv>
 8007602:	4633      	mov	r3, r6
 8007604:	462a      	mov	r2, r5
 8007606:	f7f8 fe47 	bl	8000298 <__aeabi_dsub>
 800760a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800760e:	4656      	mov	r6, sl
 8007610:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007614:	f7f9 faa8 	bl	8000b68 <__aeabi_d2iz>
 8007618:	4605      	mov	r5, r0
 800761a:	f7f8 ff8b 	bl	8000534 <__aeabi_i2d>
 800761e:	4602      	mov	r2, r0
 8007620:	460b      	mov	r3, r1
 8007622:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007626:	f7f8 fe37 	bl	8000298 <__aeabi_dsub>
 800762a:	3530      	adds	r5, #48	@ 0x30
 800762c:	4602      	mov	r2, r0
 800762e:	460b      	mov	r3, r1
 8007630:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007634:	f806 5b01 	strb.w	r5, [r6], #1
 8007638:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800763c:	f7f9 fa56 	bl	8000aec <__aeabi_dcmplt>
 8007640:	2800      	cmp	r0, #0
 8007642:	d172      	bne.n	800772a <_dtoa_r+0x622>
 8007644:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007648:	4911      	ldr	r1, [pc, #68]	@ (8007690 <_dtoa_r+0x588>)
 800764a:	2000      	movs	r0, #0
 800764c:	f7f8 fe24 	bl	8000298 <__aeabi_dsub>
 8007650:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007654:	f7f9 fa4a 	bl	8000aec <__aeabi_dcmplt>
 8007658:	2800      	cmp	r0, #0
 800765a:	f040 80b4 	bne.w	80077c6 <_dtoa_r+0x6be>
 800765e:	42a6      	cmp	r6, r4
 8007660:	f43f af70 	beq.w	8007544 <_dtoa_r+0x43c>
 8007664:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007668:	4b0a      	ldr	r3, [pc, #40]	@ (8007694 <_dtoa_r+0x58c>)
 800766a:	2200      	movs	r2, #0
 800766c:	f7f8 ffcc 	bl	8000608 <__aeabi_dmul>
 8007670:	4b08      	ldr	r3, [pc, #32]	@ (8007694 <_dtoa_r+0x58c>)
 8007672:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007676:	2200      	movs	r2, #0
 8007678:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800767c:	f7f8 ffc4 	bl	8000608 <__aeabi_dmul>
 8007680:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007684:	e7c4      	b.n	8007610 <_dtoa_r+0x508>
 8007686:	bf00      	nop
 8007688:	08009dc0 	.word	0x08009dc0
 800768c:	08009d98 	.word	0x08009d98
 8007690:	3ff00000 	.word	0x3ff00000
 8007694:	40240000 	.word	0x40240000
 8007698:	401c0000 	.word	0x401c0000
 800769c:	40140000 	.word	0x40140000
 80076a0:	3fe00000 	.word	0x3fe00000
 80076a4:	4631      	mov	r1, r6
 80076a6:	4628      	mov	r0, r5
 80076a8:	f7f8 ffae 	bl	8000608 <__aeabi_dmul>
 80076ac:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80076b0:	9413      	str	r4, [sp, #76]	@ 0x4c
 80076b2:	4656      	mov	r6, sl
 80076b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076b8:	f7f9 fa56 	bl	8000b68 <__aeabi_d2iz>
 80076bc:	4605      	mov	r5, r0
 80076be:	f7f8 ff39 	bl	8000534 <__aeabi_i2d>
 80076c2:	4602      	mov	r2, r0
 80076c4:	460b      	mov	r3, r1
 80076c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076ca:	f7f8 fde5 	bl	8000298 <__aeabi_dsub>
 80076ce:	3530      	adds	r5, #48	@ 0x30
 80076d0:	f806 5b01 	strb.w	r5, [r6], #1
 80076d4:	4602      	mov	r2, r0
 80076d6:	460b      	mov	r3, r1
 80076d8:	42a6      	cmp	r6, r4
 80076da:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80076de:	f04f 0200 	mov.w	r2, #0
 80076e2:	d124      	bne.n	800772e <_dtoa_r+0x626>
 80076e4:	4baf      	ldr	r3, [pc, #700]	@ (80079a4 <_dtoa_r+0x89c>)
 80076e6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80076ea:	f7f8 fdd7 	bl	800029c <__adddf3>
 80076ee:	4602      	mov	r2, r0
 80076f0:	460b      	mov	r3, r1
 80076f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076f6:	f7f9 fa17 	bl	8000b28 <__aeabi_dcmpgt>
 80076fa:	2800      	cmp	r0, #0
 80076fc:	d163      	bne.n	80077c6 <_dtoa_r+0x6be>
 80076fe:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007702:	49a8      	ldr	r1, [pc, #672]	@ (80079a4 <_dtoa_r+0x89c>)
 8007704:	2000      	movs	r0, #0
 8007706:	f7f8 fdc7 	bl	8000298 <__aeabi_dsub>
 800770a:	4602      	mov	r2, r0
 800770c:	460b      	mov	r3, r1
 800770e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007712:	f7f9 f9eb 	bl	8000aec <__aeabi_dcmplt>
 8007716:	2800      	cmp	r0, #0
 8007718:	f43f af14 	beq.w	8007544 <_dtoa_r+0x43c>
 800771c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800771e:	1e73      	subs	r3, r6, #1
 8007720:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007722:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007726:	2b30      	cmp	r3, #48	@ 0x30
 8007728:	d0f8      	beq.n	800771c <_dtoa_r+0x614>
 800772a:	4647      	mov	r7, r8
 800772c:	e03b      	b.n	80077a6 <_dtoa_r+0x69e>
 800772e:	4b9e      	ldr	r3, [pc, #632]	@ (80079a8 <_dtoa_r+0x8a0>)
 8007730:	f7f8 ff6a 	bl	8000608 <__aeabi_dmul>
 8007734:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007738:	e7bc      	b.n	80076b4 <_dtoa_r+0x5ac>
 800773a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800773e:	4656      	mov	r6, sl
 8007740:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007744:	4620      	mov	r0, r4
 8007746:	4629      	mov	r1, r5
 8007748:	f7f9 f888 	bl	800085c <__aeabi_ddiv>
 800774c:	f7f9 fa0c 	bl	8000b68 <__aeabi_d2iz>
 8007750:	4680      	mov	r8, r0
 8007752:	f7f8 feef 	bl	8000534 <__aeabi_i2d>
 8007756:	e9dd 2300 	ldrd	r2, r3, [sp]
 800775a:	f7f8 ff55 	bl	8000608 <__aeabi_dmul>
 800775e:	4602      	mov	r2, r0
 8007760:	460b      	mov	r3, r1
 8007762:	4620      	mov	r0, r4
 8007764:	4629      	mov	r1, r5
 8007766:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800776a:	f7f8 fd95 	bl	8000298 <__aeabi_dsub>
 800776e:	f806 4b01 	strb.w	r4, [r6], #1
 8007772:	9d03      	ldr	r5, [sp, #12]
 8007774:	eba6 040a 	sub.w	r4, r6, sl
 8007778:	42a5      	cmp	r5, r4
 800777a:	4602      	mov	r2, r0
 800777c:	460b      	mov	r3, r1
 800777e:	d133      	bne.n	80077e8 <_dtoa_r+0x6e0>
 8007780:	f7f8 fd8c 	bl	800029c <__adddf3>
 8007784:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007788:	4604      	mov	r4, r0
 800778a:	460d      	mov	r5, r1
 800778c:	f7f9 f9cc 	bl	8000b28 <__aeabi_dcmpgt>
 8007790:	b9c0      	cbnz	r0, 80077c4 <_dtoa_r+0x6bc>
 8007792:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007796:	4620      	mov	r0, r4
 8007798:	4629      	mov	r1, r5
 800779a:	f7f9 f99d 	bl	8000ad8 <__aeabi_dcmpeq>
 800779e:	b110      	cbz	r0, 80077a6 <_dtoa_r+0x69e>
 80077a0:	f018 0f01 	tst.w	r8, #1
 80077a4:	d10e      	bne.n	80077c4 <_dtoa_r+0x6bc>
 80077a6:	9902      	ldr	r1, [sp, #8]
 80077a8:	4648      	mov	r0, r9
 80077aa:	f000 fbbd 	bl	8007f28 <_Bfree>
 80077ae:	2300      	movs	r3, #0
 80077b0:	7033      	strb	r3, [r6, #0]
 80077b2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80077b4:	3701      	adds	r7, #1
 80077b6:	601f      	str	r7, [r3, #0]
 80077b8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	f000 824b 	beq.w	8007c56 <_dtoa_r+0xb4e>
 80077c0:	601e      	str	r6, [r3, #0]
 80077c2:	e248      	b.n	8007c56 <_dtoa_r+0xb4e>
 80077c4:	46b8      	mov	r8, r7
 80077c6:	4633      	mov	r3, r6
 80077c8:	461e      	mov	r6, r3
 80077ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80077ce:	2a39      	cmp	r2, #57	@ 0x39
 80077d0:	d106      	bne.n	80077e0 <_dtoa_r+0x6d8>
 80077d2:	459a      	cmp	sl, r3
 80077d4:	d1f8      	bne.n	80077c8 <_dtoa_r+0x6c0>
 80077d6:	2230      	movs	r2, #48	@ 0x30
 80077d8:	f108 0801 	add.w	r8, r8, #1
 80077dc:	f88a 2000 	strb.w	r2, [sl]
 80077e0:	781a      	ldrb	r2, [r3, #0]
 80077e2:	3201      	adds	r2, #1
 80077e4:	701a      	strb	r2, [r3, #0]
 80077e6:	e7a0      	b.n	800772a <_dtoa_r+0x622>
 80077e8:	4b6f      	ldr	r3, [pc, #444]	@ (80079a8 <_dtoa_r+0x8a0>)
 80077ea:	2200      	movs	r2, #0
 80077ec:	f7f8 ff0c 	bl	8000608 <__aeabi_dmul>
 80077f0:	2200      	movs	r2, #0
 80077f2:	2300      	movs	r3, #0
 80077f4:	4604      	mov	r4, r0
 80077f6:	460d      	mov	r5, r1
 80077f8:	f7f9 f96e 	bl	8000ad8 <__aeabi_dcmpeq>
 80077fc:	2800      	cmp	r0, #0
 80077fe:	d09f      	beq.n	8007740 <_dtoa_r+0x638>
 8007800:	e7d1      	b.n	80077a6 <_dtoa_r+0x69e>
 8007802:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007804:	2a00      	cmp	r2, #0
 8007806:	f000 80ea 	beq.w	80079de <_dtoa_r+0x8d6>
 800780a:	9a07      	ldr	r2, [sp, #28]
 800780c:	2a01      	cmp	r2, #1
 800780e:	f300 80cd 	bgt.w	80079ac <_dtoa_r+0x8a4>
 8007812:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007814:	2a00      	cmp	r2, #0
 8007816:	f000 80c1 	beq.w	800799c <_dtoa_r+0x894>
 800781a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800781e:	9c08      	ldr	r4, [sp, #32]
 8007820:	9e00      	ldr	r6, [sp, #0]
 8007822:	9a00      	ldr	r2, [sp, #0]
 8007824:	441a      	add	r2, r3
 8007826:	9200      	str	r2, [sp, #0]
 8007828:	9a06      	ldr	r2, [sp, #24]
 800782a:	2101      	movs	r1, #1
 800782c:	441a      	add	r2, r3
 800782e:	4648      	mov	r0, r9
 8007830:	9206      	str	r2, [sp, #24]
 8007832:	f000 fc2d 	bl	8008090 <__i2b>
 8007836:	4605      	mov	r5, r0
 8007838:	b166      	cbz	r6, 8007854 <_dtoa_r+0x74c>
 800783a:	9b06      	ldr	r3, [sp, #24]
 800783c:	2b00      	cmp	r3, #0
 800783e:	dd09      	ble.n	8007854 <_dtoa_r+0x74c>
 8007840:	42b3      	cmp	r3, r6
 8007842:	9a00      	ldr	r2, [sp, #0]
 8007844:	bfa8      	it	ge
 8007846:	4633      	movge	r3, r6
 8007848:	1ad2      	subs	r2, r2, r3
 800784a:	9200      	str	r2, [sp, #0]
 800784c:	9a06      	ldr	r2, [sp, #24]
 800784e:	1af6      	subs	r6, r6, r3
 8007850:	1ad3      	subs	r3, r2, r3
 8007852:	9306      	str	r3, [sp, #24]
 8007854:	9b08      	ldr	r3, [sp, #32]
 8007856:	b30b      	cbz	r3, 800789c <_dtoa_r+0x794>
 8007858:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800785a:	2b00      	cmp	r3, #0
 800785c:	f000 80c6 	beq.w	80079ec <_dtoa_r+0x8e4>
 8007860:	2c00      	cmp	r4, #0
 8007862:	f000 80c0 	beq.w	80079e6 <_dtoa_r+0x8de>
 8007866:	4629      	mov	r1, r5
 8007868:	4622      	mov	r2, r4
 800786a:	4648      	mov	r0, r9
 800786c:	f000 fcc8 	bl	8008200 <__pow5mult>
 8007870:	9a02      	ldr	r2, [sp, #8]
 8007872:	4601      	mov	r1, r0
 8007874:	4605      	mov	r5, r0
 8007876:	4648      	mov	r0, r9
 8007878:	f000 fc20 	bl	80080bc <__multiply>
 800787c:	9902      	ldr	r1, [sp, #8]
 800787e:	4680      	mov	r8, r0
 8007880:	4648      	mov	r0, r9
 8007882:	f000 fb51 	bl	8007f28 <_Bfree>
 8007886:	9b08      	ldr	r3, [sp, #32]
 8007888:	1b1b      	subs	r3, r3, r4
 800788a:	9308      	str	r3, [sp, #32]
 800788c:	f000 80b1 	beq.w	80079f2 <_dtoa_r+0x8ea>
 8007890:	9a08      	ldr	r2, [sp, #32]
 8007892:	4641      	mov	r1, r8
 8007894:	4648      	mov	r0, r9
 8007896:	f000 fcb3 	bl	8008200 <__pow5mult>
 800789a:	9002      	str	r0, [sp, #8]
 800789c:	2101      	movs	r1, #1
 800789e:	4648      	mov	r0, r9
 80078a0:	f000 fbf6 	bl	8008090 <__i2b>
 80078a4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80078a6:	4604      	mov	r4, r0
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	f000 81d8 	beq.w	8007c5e <_dtoa_r+0xb56>
 80078ae:	461a      	mov	r2, r3
 80078b0:	4601      	mov	r1, r0
 80078b2:	4648      	mov	r0, r9
 80078b4:	f000 fca4 	bl	8008200 <__pow5mult>
 80078b8:	9b07      	ldr	r3, [sp, #28]
 80078ba:	2b01      	cmp	r3, #1
 80078bc:	4604      	mov	r4, r0
 80078be:	f300 809f 	bgt.w	8007a00 <_dtoa_r+0x8f8>
 80078c2:	9b04      	ldr	r3, [sp, #16]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	f040 8097 	bne.w	80079f8 <_dtoa_r+0x8f0>
 80078ca:	9b05      	ldr	r3, [sp, #20]
 80078cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	f040 8093 	bne.w	80079fc <_dtoa_r+0x8f4>
 80078d6:	9b05      	ldr	r3, [sp, #20]
 80078d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80078dc:	0d1b      	lsrs	r3, r3, #20
 80078de:	051b      	lsls	r3, r3, #20
 80078e0:	b133      	cbz	r3, 80078f0 <_dtoa_r+0x7e8>
 80078e2:	9b00      	ldr	r3, [sp, #0]
 80078e4:	3301      	adds	r3, #1
 80078e6:	9300      	str	r3, [sp, #0]
 80078e8:	9b06      	ldr	r3, [sp, #24]
 80078ea:	3301      	adds	r3, #1
 80078ec:	9306      	str	r3, [sp, #24]
 80078ee:	2301      	movs	r3, #1
 80078f0:	9308      	str	r3, [sp, #32]
 80078f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	f000 81b8 	beq.w	8007c6a <_dtoa_r+0xb62>
 80078fa:	6923      	ldr	r3, [r4, #16]
 80078fc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007900:	6918      	ldr	r0, [r3, #16]
 8007902:	f000 fb79 	bl	8007ff8 <__hi0bits>
 8007906:	f1c0 0020 	rsb	r0, r0, #32
 800790a:	9b06      	ldr	r3, [sp, #24]
 800790c:	4418      	add	r0, r3
 800790e:	f010 001f 	ands.w	r0, r0, #31
 8007912:	f000 8082 	beq.w	8007a1a <_dtoa_r+0x912>
 8007916:	f1c0 0320 	rsb	r3, r0, #32
 800791a:	2b04      	cmp	r3, #4
 800791c:	dd73      	ble.n	8007a06 <_dtoa_r+0x8fe>
 800791e:	9b00      	ldr	r3, [sp, #0]
 8007920:	f1c0 001c 	rsb	r0, r0, #28
 8007924:	4403      	add	r3, r0
 8007926:	9300      	str	r3, [sp, #0]
 8007928:	9b06      	ldr	r3, [sp, #24]
 800792a:	4403      	add	r3, r0
 800792c:	4406      	add	r6, r0
 800792e:	9306      	str	r3, [sp, #24]
 8007930:	9b00      	ldr	r3, [sp, #0]
 8007932:	2b00      	cmp	r3, #0
 8007934:	dd05      	ble.n	8007942 <_dtoa_r+0x83a>
 8007936:	9902      	ldr	r1, [sp, #8]
 8007938:	461a      	mov	r2, r3
 800793a:	4648      	mov	r0, r9
 800793c:	f000 fcba 	bl	80082b4 <__lshift>
 8007940:	9002      	str	r0, [sp, #8]
 8007942:	9b06      	ldr	r3, [sp, #24]
 8007944:	2b00      	cmp	r3, #0
 8007946:	dd05      	ble.n	8007954 <_dtoa_r+0x84c>
 8007948:	4621      	mov	r1, r4
 800794a:	461a      	mov	r2, r3
 800794c:	4648      	mov	r0, r9
 800794e:	f000 fcb1 	bl	80082b4 <__lshift>
 8007952:	4604      	mov	r4, r0
 8007954:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007956:	2b00      	cmp	r3, #0
 8007958:	d061      	beq.n	8007a1e <_dtoa_r+0x916>
 800795a:	9802      	ldr	r0, [sp, #8]
 800795c:	4621      	mov	r1, r4
 800795e:	f000 fd15 	bl	800838c <__mcmp>
 8007962:	2800      	cmp	r0, #0
 8007964:	da5b      	bge.n	8007a1e <_dtoa_r+0x916>
 8007966:	2300      	movs	r3, #0
 8007968:	9902      	ldr	r1, [sp, #8]
 800796a:	220a      	movs	r2, #10
 800796c:	4648      	mov	r0, r9
 800796e:	f000 fafd 	bl	8007f6c <__multadd>
 8007972:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007974:	9002      	str	r0, [sp, #8]
 8007976:	f107 38ff 	add.w	r8, r7, #4294967295
 800797a:	2b00      	cmp	r3, #0
 800797c:	f000 8177 	beq.w	8007c6e <_dtoa_r+0xb66>
 8007980:	4629      	mov	r1, r5
 8007982:	2300      	movs	r3, #0
 8007984:	220a      	movs	r2, #10
 8007986:	4648      	mov	r0, r9
 8007988:	f000 faf0 	bl	8007f6c <__multadd>
 800798c:	f1bb 0f00 	cmp.w	fp, #0
 8007990:	4605      	mov	r5, r0
 8007992:	dc6f      	bgt.n	8007a74 <_dtoa_r+0x96c>
 8007994:	9b07      	ldr	r3, [sp, #28]
 8007996:	2b02      	cmp	r3, #2
 8007998:	dc49      	bgt.n	8007a2e <_dtoa_r+0x926>
 800799a:	e06b      	b.n	8007a74 <_dtoa_r+0x96c>
 800799c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800799e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80079a2:	e73c      	b.n	800781e <_dtoa_r+0x716>
 80079a4:	3fe00000 	.word	0x3fe00000
 80079a8:	40240000 	.word	0x40240000
 80079ac:	9b03      	ldr	r3, [sp, #12]
 80079ae:	1e5c      	subs	r4, r3, #1
 80079b0:	9b08      	ldr	r3, [sp, #32]
 80079b2:	42a3      	cmp	r3, r4
 80079b4:	db09      	blt.n	80079ca <_dtoa_r+0x8c2>
 80079b6:	1b1c      	subs	r4, r3, r4
 80079b8:	9b03      	ldr	r3, [sp, #12]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	f6bf af30 	bge.w	8007820 <_dtoa_r+0x718>
 80079c0:	9b00      	ldr	r3, [sp, #0]
 80079c2:	9a03      	ldr	r2, [sp, #12]
 80079c4:	1a9e      	subs	r6, r3, r2
 80079c6:	2300      	movs	r3, #0
 80079c8:	e72b      	b.n	8007822 <_dtoa_r+0x71a>
 80079ca:	9b08      	ldr	r3, [sp, #32]
 80079cc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80079ce:	9408      	str	r4, [sp, #32]
 80079d0:	1ae3      	subs	r3, r4, r3
 80079d2:	441a      	add	r2, r3
 80079d4:	9e00      	ldr	r6, [sp, #0]
 80079d6:	9b03      	ldr	r3, [sp, #12]
 80079d8:	920d      	str	r2, [sp, #52]	@ 0x34
 80079da:	2400      	movs	r4, #0
 80079dc:	e721      	b.n	8007822 <_dtoa_r+0x71a>
 80079de:	9c08      	ldr	r4, [sp, #32]
 80079e0:	9e00      	ldr	r6, [sp, #0]
 80079e2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80079e4:	e728      	b.n	8007838 <_dtoa_r+0x730>
 80079e6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80079ea:	e751      	b.n	8007890 <_dtoa_r+0x788>
 80079ec:	9a08      	ldr	r2, [sp, #32]
 80079ee:	9902      	ldr	r1, [sp, #8]
 80079f0:	e750      	b.n	8007894 <_dtoa_r+0x78c>
 80079f2:	f8cd 8008 	str.w	r8, [sp, #8]
 80079f6:	e751      	b.n	800789c <_dtoa_r+0x794>
 80079f8:	2300      	movs	r3, #0
 80079fa:	e779      	b.n	80078f0 <_dtoa_r+0x7e8>
 80079fc:	9b04      	ldr	r3, [sp, #16]
 80079fe:	e777      	b.n	80078f0 <_dtoa_r+0x7e8>
 8007a00:	2300      	movs	r3, #0
 8007a02:	9308      	str	r3, [sp, #32]
 8007a04:	e779      	b.n	80078fa <_dtoa_r+0x7f2>
 8007a06:	d093      	beq.n	8007930 <_dtoa_r+0x828>
 8007a08:	9a00      	ldr	r2, [sp, #0]
 8007a0a:	331c      	adds	r3, #28
 8007a0c:	441a      	add	r2, r3
 8007a0e:	9200      	str	r2, [sp, #0]
 8007a10:	9a06      	ldr	r2, [sp, #24]
 8007a12:	441a      	add	r2, r3
 8007a14:	441e      	add	r6, r3
 8007a16:	9206      	str	r2, [sp, #24]
 8007a18:	e78a      	b.n	8007930 <_dtoa_r+0x828>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	e7f4      	b.n	8007a08 <_dtoa_r+0x900>
 8007a1e:	9b03      	ldr	r3, [sp, #12]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	46b8      	mov	r8, r7
 8007a24:	dc20      	bgt.n	8007a68 <_dtoa_r+0x960>
 8007a26:	469b      	mov	fp, r3
 8007a28:	9b07      	ldr	r3, [sp, #28]
 8007a2a:	2b02      	cmp	r3, #2
 8007a2c:	dd1e      	ble.n	8007a6c <_dtoa_r+0x964>
 8007a2e:	f1bb 0f00 	cmp.w	fp, #0
 8007a32:	f47f adb1 	bne.w	8007598 <_dtoa_r+0x490>
 8007a36:	4621      	mov	r1, r4
 8007a38:	465b      	mov	r3, fp
 8007a3a:	2205      	movs	r2, #5
 8007a3c:	4648      	mov	r0, r9
 8007a3e:	f000 fa95 	bl	8007f6c <__multadd>
 8007a42:	4601      	mov	r1, r0
 8007a44:	4604      	mov	r4, r0
 8007a46:	9802      	ldr	r0, [sp, #8]
 8007a48:	f000 fca0 	bl	800838c <__mcmp>
 8007a4c:	2800      	cmp	r0, #0
 8007a4e:	f77f ada3 	ble.w	8007598 <_dtoa_r+0x490>
 8007a52:	4656      	mov	r6, sl
 8007a54:	2331      	movs	r3, #49	@ 0x31
 8007a56:	f806 3b01 	strb.w	r3, [r6], #1
 8007a5a:	f108 0801 	add.w	r8, r8, #1
 8007a5e:	e59f      	b.n	80075a0 <_dtoa_r+0x498>
 8007a60:	9c03      	ldr	r4, [sp, #12]
 8007a62:	46b8      	mov	r8, r7
 8007a64:	4625      	mov	r5, r4
 8007a66:	e7f4      	b.n	8007a52 <_dtoa_r+0x94a>
 8007a68:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8007a6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	f000 8101 	beq.w	8007c76 <_dtoa_r+0xb6e>
 8007a74:	2e00      	cmp	r6, #0
 8007a76:	dd05      	ble.n	8007a84 <_dtoa_r+0x97c>
 8007a78:	4629      	mov	r1, r5
 8007a7a:	4632      	mov	r2, r6
 8007a7c:	4648      	mov	r0, r9
 8007a7e:	f000 fc19 	bl	80082b4 <__lshift>
 8007a82:	4605      	mov	r5, r0
 8007a84:	9b08      	ldr	r3, [sp, #32]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d05c      	beq.n	8007b44 <_dtoa_r+0xa3c>
 8007a8a:	6869      	ldr	r1, [r5, #4]
 8007a8c:	4648      	mov	r0, r9
 8007a8e:	f000 fa0b 	bl	8007ea8 <_Balloc>
 8007a92:	4606      	mov	r6, r0
 8007a94:	b928      	cbnz	r0, 8007aa2 <_dtoa_r+0x99a>
 8007a96:	4b82      	ldr	r3, [pc, #520]	@ (8007ca0 <_dtoa_r+0xb98>)
 8007a98:	4602      	mov	r2, r0
 8007a9a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007a9e:	f7ff bb4a 	b.w	8007136 <_dtoa_r+0x2e>
 8007aa2:	692a      	ldr	r2, [r5, #16]
 8007aa4:	3202      	adds	r2, #2
 8007aa6:	0092      	lsls	r2, r2, #2
 8007aa8:	f105 010c 	add.w	r1, r5, #12
 8007aac:	300c      	adds	r0, #12
 8007aae:	f7ff fa92 	bl	8006fd6 <memcpy>
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	4631      	mov	r1, r6
 8007ab6:	4648      	mov	r0, r9
 8007ab8:	f000 fbfc 	bl	80082b4 <__lshift>
 8007abc:	f10a 0301 	add.w	r3, sl, #1
 8007ac0:	9300      	str	r3, [sp, #0]
 8007ac2:	eb0a 030b 	add.w	r3, sl, fp
 8007ac6:	9308      	str	r3, [sp, #32]
 8007ac8:	9b04      	ldr	r3, [sp, #16]
 8007aca:	f003 0301 	and.w	r3, r3, #1
 8007ace:	462f      	mov	r7, r5
 8007ad0:	9306      	str	r3, [sp, #24]
 8007ad2:	4605      	mov	r5, r0
 8007ad4:	9b00      	ldr	r3, [sp, #0]
 8007ad6:	9802      	ldr	r0, [sp, #8]
 8007ad8:	4621      	mov	r1, r4
 8007ada:	f103 3bff 	add.w	fp, r3, #4294967295
 8007ade:	f7ff fa88 	bl	8006ff2 <quorem>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	3330      	adds	r3, #48	@ 0x30
 8007ae6:	9003      	str	r0, [sp, #12]
 8007ae8:	4639      	mov	r1, r7
 8007aea:	9802      	ldr	r0, [sp, #8]
 8007aec:	9309      	str	r3, [sp, #36]	@ 0x24
 8007aee:	f000 fc4d 	bl	800838c <__mcmp>
 8007af2:	462a      	mov	r2, r5
 8007af4:	9004      	str	r0, [sp, #16]
 8007af6:	4621      	mov	r1, r4
 8007af8:	4648      	mov	r0, r9
 8007afa:	f000 fc63 	bl	80083c4 <__mdiff>
 8007afe:	68c2      	ldr	r2, [r0, #12]
 8007b00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b02:	4606      	mov	r6, r0
 8007b04:	bb02      	cbnz	r2, 8007b48 <_dtoa_r+0xa40>
 8007b06:	4601      	mov	r1, r0
 8007b08:	9802      	ldr	r0, [sp, #8]
 8007b0a:	f000 fc3f 	bl	800838c <__mcmp>
 8007b0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b10:	4602      	mov	r2, r0
 8007b12:	4631      	mov	r1, r6
 8007b14:	4648      	mov	r0, r9
 8007b16:	920c      	str	r2, [sp, #48]	@ 0x30
 8007b18:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b1a:	f000 fa05 	bl	8007f28 <_Bfree>
 8007b1e:	9b07      	ldr	r3, [sp, #28]
 8007b20:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007b22:	9e00      	ldr	r6, [sp, #0]
 8007b24:	ea42 0103 	orr.w	r1, r2, r3
 8007b28:	9b06      	ldr	r3, [sp, #24]
 8007b2a:	4319      	orrs	r1, r3
 8007b2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b2e:	d10d      	bne.n	8007b4c <_dtoa_r+0xa44>
 8007b30:	2b39      	cmp	r3, #57	@ 0x39
 8007b32:	d027      	beq.n	8007b84 <_dtoa_r+0xa7c>
 8007b34:	9a04      	ldr	r2, [sp, #16]
 8007b36:	2a00      	cmp	r2, #0
 8007b38:	dd01      	ble.n	8007b3e <_dtoa_r+0xa36>
 8007b3a:	9b03      	ldr	r3, [sp, #12]
 8007b3c:	3331      	adds	r3, #49	@ 0x31
 8007b3e:	f88b 3000 	strb.w	r3, [fp]
 8007b42:	e52e      	b.n	80075a2 <_dtoa_r+0x49a>
 8007b44:	4628      	mov	r0, r5
 8007b46:	e7b9      	b.n	8007abc <_dtoa_r+0x9b4>
 8007b48:	2201      	movs	r2, #1
 8007b4a:	e7e2      	b.n	8007b12 <_dtoa_r+0xa0a>
 8007b4c:	9904      	ldr	r1, [sp, #16]
 8007b4e:	2900      	cmp	r1, #0
 8007b50:	db04      	blt.n	8007b5c <_dtoa_r+0xa54>
 8007b52:	9807      	ldr	r0, [sp, #28]
 8007b54:	4301      	orrs	r1, r0
 8007b56:	9806      	ldr	r0, [sp, #24]
 8007b58:	4301      	orrs	r1, r0
 8007b5a:	d120      	bne.n	8007b9e <_dtoa_r+0xa96>
 8007b5c:	2a00      	cmp	r2, #0
 8007b5e:	ddee      	ble.n	8007b3e <_dtoa_r+0xa36>
 8007b60:	9902      	ldr	r1, [sp, #8]
 8007b62:	9300      	str	r3, [sp, #0]
 8007b64:	2201      	movs	r2, #1
 8007b66:	4648      	mov	r0, r9
 8007b68:	f000 fba4 	bl	80082b4 <__lshift>
 8007b6c:	4621      	mov	r1, r4
 8007b6e:	9002      	str	r0, [sp, #8]
 8007b70:	f000 fc0c 	bl	800838c <__mcmp>
 8007b74:	2800      	cmp	r0, #0
 8007b76:	9b00      	ldr	r3, [sp, #0]
 8007b78:	dc02      	bgt.n	8007b80 <_dtoa_r+0xa78>
 8007b7a:	d1e0      	bne.n	8007b3e <_dtoa_r+0xa36>
 8007b7c:	07da      	lsls	r2, r3, #31
 8007b7e:	d5de      	bpl.n	8007b3e <_dtoa_r+0xa36>
 8007b80:	2b39      	cmp	r3, #57	@ 0x39
 8007b82:	d1da      	bne.n	8007b3a <_dtoa_r+0xa32>
 8007b84:	2339      	movs	r3, #57	@ 0x39
 8007b86:	f88b 3000 	strb.w	r3, [fp]
 8007b8a:	4633      	mov	r3, r6
 8007b8c:	461e      	mov	r6, r3
 8007b8e:	3b01      	subs	r3, #1
 8007b90:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007b94:	2a39      	cmp	r2, #57	@ 0x39
 8007b96:	d04e      	beq.n	8007c36 <_dtoa_r+0xb2e>
 8007b98:	3201      	adds	r2, #1
 8007b9a:	701a      	strb	r2, [r3, #0]
 8007b9c:	e501      	b.n	80075a2 <_dtoa_r+0x49a>
 8007b9e:	2a00      	cmp	r2, #0
 8007ba0:	dd03      	ble.n	8007baa <_dtoa_r+0xaa2>
 8007ba2:	2b39      	cmp	r3, #57	@ 0x39
 8007ba4:	d0ee      	beq.n	8007b84 <_dtoa_r+0xa7c>
 8007ba6:	3301      	adds	r3, #1
 8007ba8:	e7c9      	b.n	8007b3e <_dtoa_r+0xa36>
 8007baa:	9a00      	ldr	r2, [sp, #0]
 8007bac:	9908      	ldr	r1, [sp, #32]
 8007bae:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007bb2:	428a      	cmp	r2, r1
 8007bb4:	d028      	beq.n	8007c08 <_dtoa_r+0xb00>
 8007bb6:	9902      	ldr	r1, [sp, #8]
 8007bb8:	2300      	movs	r3, #0
 8007bba:	220a      	movs	r2, #10
 8007bbc:	4648      	mov	r0, r9
 8007bbe:	f000 f9d5 	bl	8007f6c <__multadd>
 8007bc2:	42af      	cmp	r7, r5
 8007bc4:	9002      	str	r0, [sp, #8]
 8007bc6:	f04f 0300 	mov.w	r3, #0
 8007bca:	f04f 020a 	mov.w	r2, #10
 8007bce:	4639      	mov	r1, r7
 8007bd0:	4648      	mov	r0, r9
 8007bd2:	d107      	bne.n	8007be4 <_dtoa_r+0xadc>
 8007bd4:	f000 f9ca 	bl	8007f6c <__multadd>
 8007bd8:	4607      	mov	r7, r0
 8007bda:	4605      	mov	r5, r0
 8007bdc:	9b00      	ldr	r3, [sp, #0]
 8007bde:	3301      	adds	r3, #1
 8007be0:	9300      	str	r3, [sp, #0]
 8007be2:	e777      	b.n	8007ad4 <_dtoa_r+0x9cc>
 8007be4:	f000 f9c2 	bl	8007f6c <__multadd>
 8007be8:	4629      	mov	r1, r5
 8007bea:	4607      	mov	r7, r0
 8007bec:	2300      	movs	r3, #0
 8007bee:	220a      	movs	r2, #10
 8007bf0:	4648      	mov	r0, r9
 8007bf2:	f000 f9bb 	bl	8007f6c <__multadd>
 8007bf6:	4605      	mov	r5, r0
 8007bf8:	e7f0      	b.n	8007bdc <_dtoa_r+0xad4>
 8007bfa:	f1bb 0f00 	cmp.w	fp, #0
 8007bfe:	bfcc      	ite	gt
 8007c00:	465e      	movgt	r6, fp
 8007c02:	2601      	movle	r6, #1
 8007c04:	4456      	add	r6, sl
 8007c06:	2700      	movs	r7, #0
 8007c08:	9902      	ldr	r1, [sp, #8]
 8007c0a:	9300      	str	r3, [sp, #0]
 8007c0c:	2201      	movs	r2, #1
 8007c0e:	4648      	mov	r0, r9
 8007c10:	f000 fb50 	bl	80082b4 <__lshift>
 8007c14:	4621      	mov	r1, r4
 8007c16:	9002      	str	r0, [sp, #8]
 8007c18:	f000 fbb8 	bl	800838c <__mcmp>
 8007c1c:	2800      	cmp	r0, #0
 8007c1e:	dcb4      	bgt.n	8007b8a <_dtoa_r+0xa82>
 8007c20:	d102      	bne.n	8007c28 <_dtoa_r+0xb20>
 8007c22:	9b00      	ldr	r3, [sp, #0]
 8007c24:	07db      	lsls	r3, r3, #31
 8007c26:	d4b0      	bmi.n	8007b8a <_dtoa_r+0xa82>
 8007c28:	4633      	mov	r3, r6
 8007c2a:	461e      	mov	r6, r3
 8007c2c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007c30:	2a30      	cmp	r2, #48	@ 0x30
 8007c32:	d0fa      	beq.n	8007c2a <_dtoa_r+0xb22>
 8007c34:	e4b5      	b.n	80075a2 <_dtoa_r+0x49a>
 8007c36:	459a      	cmp	sl, r3
 8007c38:	d1a8      	bne.n	8007b8c <_dtoa_r+0xa84>
 8007c3a:	2331      	movs	r3, #49	@ 0x31
 8007c3c:	f108 0801 	add.w	r8, r8, #1
 8007c40:	f88a 3000 	strb.w	r3, [sl]
 8007c44:	e4ad      	b.n	80075a2 <_dtoa_r+0x49a>
 8007c46:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007c48:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8007ca4 <_dtoa_r+0xb9c>
 8007c4c:	b11b      	cbz	r3, 8007c56 <_dtoa_r+0xb4e>
 8007c4e:	f10a 0308 	add.w	r3, sl, #8
 8007c52:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007c54:	6013      	str	r3, [r2, #0]
 8007c56:	4650      	mov	r0, sl
 8007c58:	b017      	add	sp, #92	@ 0x5c
 8007c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c5e:	9b07      	ldr	r3, [sp, #28]
 8007c60:	2b01      	cmp	r3, #1
 8007c62:	f77f ae2e 	ble.w	80078c2 <_dtoa_r+0x7ba>
 8007c66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007c68:	9308      	str	r3, [sp, #32]
 8007c6a:	2001      	movs	r0, #1
 8007c6c:	e64d      	b.n	800790a <_dtoa_r+0x802>
 8007c6e:	f1bb 0f00 	cmp.w	fp, #0
 8007c72:	f77f aed9 	ble.w	8007a28 <_dtoa_r+0x920>
 8007c76:	4656      	mov	r6, sl
 8007c78:	9802      	ldr	r0, [sp, #8]
 8007c7a:	4621      	mov	r1, r4
 8007c7c:	f7ff f9b9 	bl	8006ff2 <quorem>
 8007c80:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8007c84:	f806 3b01 	strb.w	r3, [r6], #1
 8007c88:	eba6 020a 	sub.w	r2, r6, sl
 8007c8c:	4593      	cmp	fp, r2
 8007c8e:	ddb4      	ble.n	8007bfa <_dtoa_r+0xaf2>
 8007c90:	9902      	ldr	r1, [sp, #8]
 8007c92:	2300      	movs	r3, #0
 8007c94:	220a      	movs	r2, #10
 8007c96:	4648      	mov	r0, r9
 8007c98:	f000 f968 	bl	8007f6c <__multadd>
 8007c9c:	9002      	str	r0, [sp, #8]
 8007c9e:	e7eb      	b.n	8007c78 <_dtoa_r+0xb70>
 8007ca0:	08009cc4 	.word	0x08009cc4
 8007ca4:	08009c48 	.word	0x08009c48

08007ca8 <_free_r>:
 8007ca8:	b538      	push	{r3, r4, r5, lr}
 8007caa:	4605      	mov	r5, r0
 8007cac:	2900      	cmp	r1, #0
 8007cae:	d041      	beq.n	8007d34 <_free_r+0x8c>
 8007cb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007cb4:	1f0c      	subs	r4, r1, #4
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	bfb8      	it	lt
 8007cba:	18e4      	addlt	r4, r4, r3
 8007cbc:	f000 f8e8 	bl	8007e90 <__malloc_lock>
 8007cc0:	4a1d      	ldr	r2, [pc, #116]	@ (8007d38 <_free_r+0x90>)
 8007cc2:	6813      	ldr	r3, [r2, #0]
 8007cc4:	b933      	cbnz	r3, 8007cd4 <_free_r+0x2c>
 8007cc6:	6063      	str	r3, [r4, #4]
 8007cc8:	6014      	str	r4, [r2, #0]
 8007cca:	4628      	mov	r0, r5
 8007ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007cd0:	f000 b8e4 	b.w	8007e9c <__malloc_unlock>
 8007cd4:	42a3      	cmp	r3, r4
 8007cd6:	d908      	bls.n	8007cea <_free_r+0x42>
 8007cd8:	6820      	ldr	r0, [r4, #0]
 8007cda:	1821      	adds	r1, r4, r0
 8007cdc:	428b      	cmp	r3, r1
 8007cde:	bf01      	itttt	eq
 8007ce0:	6819      	ldreq	r1, [r3, #0]
 8007ce2:	685b      	ldreq	r3, [r3, #4]
 8007ce4:	1809      	addeq	r1, r1, r0
 8007ce6:	6021      	streq	r1, [r4, #0]
 8007ce8:	e7ed      	b.n	8007cc6 <_free_r+0x1e>
 8007cea:	461a      	mov	r2, r3
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	b10b      	cbz	r3, 8007cf4 <_free_r+0x4c>
 8007cf0:	42a3      	cmp	r3, r4
 8007cf2:	d9fa      	bls.n	8007cea <_free_r+0x42>
 8007cf4:	6811      	ldr	r1, [r2, #0]
 8007cf6:	1850      	adds	r0, r2, r1
 8007cf8:	42a0      	cmp	r0, r4
 8007cfa:	d10b      	bne.n	8007d14 <_free_r+0x6c>
 8007cfc:	6820      	ldr	r0, [r4, #0]
 8007cfe:	4401      	add	r1, r0
 8007d00:	1850      	adds	r0, r2, r1
 8007d02:	4283      	cmp	r3, r0
 8007d04:	6011      	str	r1, [r2, #0]
 8007d06:	d1e0      	bne.n	8007cca <_free_r+0x22>
 8007d08:	6818      	ldr	r0, [r3, #0]
 8007d0a:	685b      	ldr	r3, [r3, #4]
 8007d0c:	6053      	str	r3, [r2, #4]
 8007d0e:	4408      	add	r0, r1
 8007d10:	6010      	str	r0, [r2, #0]
 8007d12:	e7da      	b.n	8007cca <_free_r+0x22>
 8007d14:	d902      	bls.n	8007d1c <_free_r+0x74>
 8007d16:	230c      	movs	r3, #12
 8007d18:	602b      	str	r3, [r5, #0]
 8007d1a:	e7d6      	b.n	8007cca <_free_r+0x22>
 8007d1c:	6820      	ldr	r0, [r4, #0]
 8007d1e:	1821      	adds	r1, r4, r0
 8007d20:	428b      	cmp	r3, r1
 8007d22:	bf04      	itt	eq
 8007d24:	6819      	ldreq	r1, [r3, #0]
 8007d26:	685b      	ldreq	r3, [r3, #4]
 8007d28:	6063      	str	r3, [r4, #4]
 8007d2a:	bf04      	itt	eq
 8007d2c:	1809      	addeq	r1, r1, r0
 8007d2e:	6021      	streq	r1, [r4, #0]
 8007d30:	6054      	str	r4, [r2, #4]
 8007d32:	e7ca      	b.n	8007cca <_free_r+0x22>
 8007d34:	bd38      	pop	{r3, r4, r5, pc}
 8007d36:	bf00      	nop
 8007d38:	20001280 	.word	0x20001280

08007d3c <malloc>:
 8007d3c:	4b02      	ldr	r3, [pc, #8]	@ (8007d48 <malloc+0xc>)
 8007d3e:	4601      	mov	r1, r0
 8007d40:	6818      	ldr	r0, [r3, #0]
 8007d42:	f000 b825 	b.w	8007d90 <_malloc_r>
 8007d46:	bf00      	nop
 8007d48:	20000018 	.word	0x20000018

08007d4c <sbrk_aligned>:
 8007d4c:	b570      	push	{r4, r5, r6, lr}
 8007d4e:	4e0f      	ldr	r6, [pc, #60]	@ (8007d8c <sbrk_aligned+0x40>)
 8007d50:	460c      	mov	r4, r1
 8007d52:	6831      	ldr	r1, [r6, #0]
 8007d54:	4605      	mov	r5, r0
 8007d56:	b911      	cbnz	r1, 8007d5e <sbrk_aligned+0x12>
 8007d58:	f000 fe3e 	bl	80089d8 <_sbrk_r>
 8007d5c:	6030      	str	r0, [r6, #0]
 8007d5e:	4621      	mov	r1, r4
 8007d60:	4628      	mov	r0, r5
 8007d62:	f000 fe39 	bl	80089d8 <_sbrk_r>
 8007d66:	1c43      	adds	r3, r0, #1
 8007d68:	d103      	bne.n	8007d72 <sbrk_aligned+0x26>
 8007d6a:	f04f 34ff 	mov.w	r4, #4294967295
 8007d6e:	4620      	mov	r0, r4
 8007d70:	bd70      	pop	{r4, r5, r6, pc}
 8007d72:	1cc4      	adds	r4, r0, #3
 8007d74:	f024 0403 	bic.w	r4, r4, #3
 8007d78:	42a0      	cmp	r0, r4
 8007d7a:	d0f8      	beq.n	8007d6e <sbrk_aligned+0x22>
 8007d7c:	1a21      	subs	r1, r4, r0
 8007d7e:	4628      	mov	r0, r5
 8007d80:	f000 fe2a 	bl	80089d8 <_sbrk_r>
 8007d84:	3001      	adds	r0, #1
 8007d86:	d1f2      	bne.n	8007d6e <sbrk_aligned+0x22>
 8007d88:	e7ef      	b.n	8007d6a <sbrk_aligned+0x1e>
 8007d8a:	bf00      	nop
 8007d8c:	2000127c 	.word	0x2000127c

08007d90 <_malloc_r>:
 8007d90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d94:	1ccd      	adds	r5, r1, #3
 8007d96:	f025 0503 	bic.w	r5, r5, #3
 8007d9a:	3508      	adds	r5, #8
 8007d9c:	2d0c      	cmp	r5, #12
 8007d9e:	bf38      	it	cc
 8007da0:	250c      	movcc	r5, #12
 8007da2:	2d00      	cmp	r5, #0
 8007da4:	4606      	mov	r6, r0
 8007da6:	db01      	blt.n	8007dac <_malloc_r+0x1c>
 8007da8:	42a9      	cmp	r1, r5
 8007daa:	d904      	bls.n	8007db6 <_malloc_r+0x26>
 8007dac:	230c      	movs	r3, #12
 8007dae:	6033      	str	r3, [r6, #0]
 8007db0:	2000      	movs	r0, #0
 8007db2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007db6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007e8c <_malloc_r+0xfc>
 8007dba:	f000 f869 	bl	8007e90 <__malloc_lock>
 8007dbe:	f8d8 3000 	ldr.w	r3, [r8]
 8007dc2:	461c      	mov	r4, r3
 8007dc4:	bb44      	cbnz	r4, 8007e18 <_malloc_r+0x88>
 8007dc6:	4629      	mov	r1, r5
 8007dc8:	4630      	mov	r0, r6
 8007dca:	f7ff ffbf 	bl	8007d4c <sbrk_aligned>
 8007dce:	1c43      	adds	r3, r0, #1
 8007dd0:	4604      	mov	r4, r0
 8007dd2:	d158      	bne.n	8007e86 <_malloc_r+0xf6>
 8007dd4:	f8d8 4000 	ldr.w	r4, [r8]
 8007dd8:	4627      	mov	r7, r4
 8007dda:	2f00      	cmp	r7, #0
 8007ddc:	d143      	bne.n	8007e66 <_malloc_r+0xd6>
 8007dde:	2c00      	cmp	r4, #0
 8007de0:	d04b      	beq.n	8007e7a <_malloc_r+0xea>
 8007de2:	6823      	ldr	r3, [r4, #0]
 8007de4:	4639      	mov	r1, r7
 8007de6:	4630      	mov	r0, r6
 8007de8:	eb04 0903 	add.w	r9, r4, r3
 8007dec:	f000 fdf4 	bl	80089d8 <_sbrk_r>
 8007df0:	4581      	cmp	r9, r0
 8007df2:	d142      	bne.n	8007e7a <_malloc_r+0xea>
 8007df4:	6821      	ldr	r1, [r4, #0]
 8007df6:	1a6d      	subs	r5, r5, r1
 8007df8:	4629      	mov	r1, r5
 8007dfa:	4630      	mov	r0, r6
 8007dfc:	f7ff ffa6 	bl	8007d4c <sbrk_aligned>
 8007e00:	3001      	adds	r0, #1
 8007e02:	d03a      	beq.n	8007e7a <_malloc_r+0xea>
 8007e04:	6823      	ldr	r3, [r4, #0]
 8007e06:	442b      	add	r3, r5
 8007e08:	6023      	str	r3, [r4, #0]
 8007e0a:	f8d8 3000 	ldr.w	r3, [r8]
 8007e0e:	685a      	ldr	r2, [r3, #4]
 8007e10:	bb62      	cbnz	r2, 8007e6c <_malloc_r+0xdc>
 8007e12:	f8c8 7000 	str.w	r7, [r8]
 8007e16:	e00f      	b.n	8007e38 <_malloc_r+0xa8>
 8007e18:	6822      	ldr	r2, [r4, #0]
 8007e1a:	1b52      	subs	r2, r2, r5
 8007e1c:	d420      	bmi.n	8007e60 <_malloc_r+0xd0>
 8007e1e:	2a0b      	cmp	r2, #11
 8007e20:	d917      	bls.n	8007e52 <_malloc_r+0xc2>
 8007e22:	1961      	adds	r1, r4, r5
 8007e24:	42a3      	cmp	r3, r4
 8007e26:	6025      	str	r5, [r4, #0]
 8007e28:	bf18      	it	ne
 8007e2a:	6059      	strne	r1, [r3, #4]
 8007e2c:	6863      	ldr	r3, [r4, #4]
 8007e2e:	bf08      	it	eq
 8007e30:	f8c8 1000 	streq.w	r1, [r8]
 8007e34:	5162      	str	r2, [r4, r5]
 8007e36:	604b      	str	r3, [r1, #4]
 8007e38:	4630      	mov	r0, r6
 8007e3a:	f000 f82f 	bl	8007e9c <__malloc_unlock>
 8007e3e:	f104 000b 	add.w	r0, r4, #11
 8007e42:	1d23      	adds	r3, r4, #4
 8007e44:	f020 0007 	bic.w	r0, r0, #7
 8007e48:	1ac2      	subs	r2, r0, r3
 8007e4a:	bf1c      	itt	ne
 8007e4c:	1a1b      	subne	r3, r3, r0
 8007e4e:	50a3      	strne	r3, [r4, r2]
 8007e50:	e7af      	b.n	8007db2 <_malloc_r+0x22>
 8007e52:	6862      	ldr	r2, [r4, #4]
 8007e54:	42a3      	cmp	r3, r4
 8007e56:	bf0c      	ite	eq
 8007e58:	f8c8 2000 	streq.w	r2, [r8]
 8007e5c:	605a      	strne	r2, [r3, #4]
 8007e5e:	e7eb      	b.n	8007e38 <_malloc_r+0xa8>
 8007e60:	4623      	mov	r3, r4
 8007e62:	6864      	ldr	r4, [r4, #4]
 8007e64:	e7ae      	b.n	8007dc4 <_malloc_r+0x34>
 8007e66:	463c      	mov	r4, r7
 8007e68:	687f      	ldr	r7, [r7, #4]
 8007e6a:	e7b6      	b.n	8007dda <_malloc_r+0x4a>
 8007e6c:	461a      	mov	r2, r3
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	42a3      	cmp	r3, r4
 8007e72:	d1fb      	bne.n	8007e6c <_malloc_r+0xdc>
 8007e74:	2300      	movs	r3, #0
 8007e76:	6053      	str	r3, [r2, #4]
 8007e78:	e7de      	b.n	8007e38 <_malloc_r+0xa8>
 8007e7a:	230c      	movs	r3, #12
 8007e7c:	6033      	str	r3, [r6, #0]
 8007e7e:	4630      	mov	r0, r6
 8007e80:	f000 f80c 	bl	8007e9c <__malloc_unlock>
 8007e84:	e794      	b.n	8007db0 <_malloc_r+0x20>
 8007e86:	6005      	str	r5, [r0, #0]
 8007e88:	e7d6      	b.n	8007e38 <_malloc_r+0xa8>
 8007e8a:	bf00      	nop
 8007e8c:	20001280 	.word	0x20001280

08007e90 <__malloc_lock>:
 8007e90:	4801      	ldr	r0, [pc, #4]	@ (8007e98 <__malloc_lock+0x8>)
 8007e92:	f7ff b89e 	b.w	8006fd2 <__retarget_lock_acquire_recursive>
 8007e96:	bf00      	nop
 8007e98:	20001278 	.word	0x20001278

08007e9c <__malloc_unlock>:
 8007e9c:	4801      	ldr	r0, [pc, #4]	@ (8007ea4 <__malloc_unlock+0x8>)
 8007e9e:	f7ff b899 	b.w	8006fd4 <__retarget_lock_release_recursive>
 8007ea2:	bf00      	nop
 8007ea4:	20001278 	.word	0x20001278

08007ea8 <_Balloc>:
 8007ea8:	b570      	push	{r4, r5, r6, lr}
 8007eaa:	69c6      	ldr	r6, [r0, #28]
 8007eac:	4604      	mov	r4, r0
 8007eae:	460d      	mov	r5, r1
 8007eb0:	b976      	cbnz	r6, 8007ed0 <_Balloc+0x28>
 8007eb2:	2010      	movs	r0, #16
 8007eb4:	f7ff ff42 	bl	8007d3c <malloc>
 8007eb8:	4602      	mov	r2, r0
 8007eba:	61e0      	str	r0, [r4, #28]
 8007ebc:	b920      	cbnz	r0, 8007ec8 <_Balloc+0x20>
 8007ebe:	4b18      	ldr	r3, [pc, #96]	@ (8007f20 <_Balloc+0x78>)
 8007ec0:	4818      	ldr	r0, [pc, #96]	@ (8007f24 <_Balloc+0x7c>)
 8007ec2:	216b      	movs	r1, #107	@ 0x6b
 8007ec4:	f000 fd98 	bl	80089f8 <__assert_func>
 8007ec8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ecc:	6006      	str	r6, [r0, #0]
 8007ece:	60c6      	str	r6, [r0, #12]
 8007ed0:	69e6      	ldr	r6, [r4, #28]
 8007ed2:	68f3      	ldr	r3, [r6, #12]
 8007ed4:	b183      	cbz	r3, 8007ef8 <_Balloc+0x50>
 8007ed6:	69e3      	ldr	r3, [r4, #28]
 8007ed8:	68db      	ldr	r3, [r3, #12]
 8007eda:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007ede:	b9b8      	cbnz	r0, 8007f10 <_Balloc+0x68>
 8007ee0:	2101      	movs	r1, #1
 8007ee2:	fa01 f605 	lsl.w	r6, r1, r5
 8007ee6:	1d72      	adds	r2, r6, #5
 8007ee8:	0092      	lsls	r2, r2, #2
 8007eea:	4620      	mov	r0, r4
 8007eec:	f000 fda2 	bl	8008a34 <_calloc_r>
 8007ef0:	b160      	cbz	r0, 8007f0c <_Balloc+0x64>
 8007ef2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007ef6:	e00e      	b.n	8007f16 <_Balloc+0x6e>
 8007ef8:	2221      	movs	r2, #33	@ 0x21
 8007efa:	2104      	movs	r1, #4
 8007efc:	4620      	mov	r0, r4
 8007efe:	f000 fd99 	bl	8008a34 <_calloc_r>
 8007f02:	69e3      	ldr	r3, [r4, #28]
 8007f04:	60f0      	str	r0, [r6, #12]
 8007f06:	68db      	ldr	r3, [r3, #12]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d1e4      	bne.n	8007ed6 <_Balloc+0x2e>
 8007f0c:	2000      	movs	r0, #0
 8007f0e:	bd70      	pop	{r4, r5, r6, pc}
 8007f10:	6802      	ldr	r2, [r0, #0]
 8007f12:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007f16:	2300      	movs	r3, #0
 8007f18:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007f1c:	e7f7      	b.n	8007f0e <_Balloc+0x66>
 8007f1e:	bf00      	nop
 8007f20:	08009c55 	.word	0x08009c55
 8007f24:	08009cd5 	.word	0x08009cd5

08007f28 <_Bfree>:
 8007f28:	b570      	push	{r4, r5, r6, lr}
 8007f2a:	69c6      	ldr	r6, [r0, #28]
 8007f2c:	4605      	mov	r5, r0
 8007f2e:	460c      	mov	r4, r1
 8007f30:	b976      	cbnz	r6, 8007f50 <_Bfree+0x28>
 8007f32:	2010      	movs	r0, #16
 8007f34:	f7ff ff02 	bl	8007d3c <malloc>
 8007f38:	4602      	mov	r2, r0
 8007f3a:	61e8      	str	r0, [r5, #28]
 8007f3c:	b920      	cbnz	r0, 8007f48 <_Bfree+0x20>
 8007f3e:	4b09      	ldr	r3, [pc, #36]	@ (8007f64 <_Bfree+0x3c>)
 8007f40:	4809      	ldr	r0, [pc, #36]	@ (8007f68 <_Bfree+0x40>)
 8007f42:	218f      	movs	r1, #143	@ 0x8f
 8007f44:	f000 fd58 	bl	80089f8 <__assert_func>
 8007f48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f4c:	6006      	str	r6, [r0, #0]
 8007f4e:	60c6      	str	r6, [r0, #12]
 8007f50:	b13c      	cbz	r4, 8007f62 <_Bfree+0x3a>
 8007f52:	69eb      	ldr	r3, [r5, #28]
 8007f54:	6862      	ldr	r2, [r4, #4]
 8007f56:	68db      	ldr	r3, [r3, #12]
 8007f58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007f5c:	6021      	str	r1, [r4, #0]
 8007f5e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007f62:	bd70      	pop	{r4, r5, r6, pc}
 8007f64:	08009c55 	.word	0x08009c55
 8007f68:	08009cd5 	.word	0x08009cd5

08007f6c <__multadd>:
 8007f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f70:	690d      	ldr	r5, [r1, #16]
 8007f72:	4607      	mov	r7, r0
 8007f74:	460c      	mov	r4, r1
 8007f76:	461e      	mov	r6, r3
 8007f78:	f101 0c14 	add.w	ip, r1, #20
 8007f7c:	2000      	movs	r0, #0
 8007f7e:	f8dc 3000 	ldr.w	r3, [ip]
 8007f82:	b299      	uxth	r1, r3
 8007f84:	fb02 6101 	mla	r1, r2, r1, r6
 8007f88:	0c1e      	lsrs	r6, r3, #16
 8007f8a:	0c0b      	lsrs	r3, r1, #16
 8007f8c:	fb02 3306 	mla	r3, r2, r6, r3
 8007f90:	b289      	uxth	r1, r1
 8007f92:	3001      	adds	r0, #1
 8007f94:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007f98:	4285      	cmp	r5, r0
 8007f9a:	f84c 1b04 	str.w	r1, [ip], #4
 8007f9e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007fa2:	dcec      	bgt.n	8007f7e <__multadd+0x12>
 8007fa4:	b30e      	cbz	r6, 8007fea <__multadd+0x7e>
 8007fa6:	68a3      	ldr	r3, [r4, #8]
 8007fa8:	42ab      	cmp	r3, r5
 8007faa:	dc19      	bgt.n	8007fe0 <__multadd+0x74>
 8007fac:	6861      	ldr	r1, [r4, #4]
 8007fae:	4638      	mov	r0, r7
 8007fb0:	3101      	adds	r1, #1
 8007fb2:	f7ff ff79 	bl	8007ea8 <_Balloc>
 8007fb6:	4680      	mov	r8, r0
 8007fb8:	b928      	cbnz	r0, 8007fc6 <__multadd+0x5a>
 8007fba:	4602      	mov	r2, r0
 8007fbc:	4b0c      	ldr	r3, [pc, #48]	@ (8007ff0 <__multadd+0x84>)
 8007fbe:	480d      	ldr	r0, [pc, #52]	@ (8007ff4 <__multadd+0x88>)
 8007fc0:	21ba      	movs	r1, #186	@ 0xba
 8007fc2:	f000 fd19 	bl	80089f8 <__assert_func>
 8007fc6:	6922      	ldr	r2, [r4, #16]
 8007fc8:	3202      	adds	r2, #2
 8007fca:	f104 010c 	add.w	r1, r4, #12
 8007fce:	0092      	lsls	r2, r2, #2
 8007fd0:	300c      	adds	r0, #12
 8007fd2:	f7ff f800 	bl	8006fd6 <memcpy>
 8007fd6:	4621      	mov	r1, r4
 8007fd8:	4638      	mov	r0, r7
 8007fda:	f7ff ffa5 	bl	8007f28 <_Bfree>
 8007fde:	4644      	mov	r4, r8
 8007fe0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007fe4:	3501      	adds	r5, #1
 8007fe6:	615e      	str	r6, [r3, #20]
 8007fe8:	6125      	str	r5, [r4, #16]
 8007fea:	4620      	mov	r0, r4
 8007fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ff0:	08009cc4 	.word	0x08009cc4
 8007ff4:	08009cd5 	.word	0x08009cd5

08007ff8 <__hi0bits>:
 8007ff8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	bf36      	itet	cc
 8008000:	0403      	lslcc	r3, r0, #16
 8008002:	2000      	movcs	r0, #0
 8008004:	2010      	movcc	r0, #16
 8008006:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800800a:	bf3c      	itt	cc
 800800c:	021b      	lslcc	r3, r3, #8
 800800e:	3008      	addcc	r0, #8
 8008010:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008014:	bf3c      	itt	cc
 8008016:	011b      	lslcc	r3, r3, #4
 8008018:	3004      	addcc	r0, #4
 800801a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800801e:	bf3c      	itt	cc
 8008020:	009b      	lslcc	r3, r3, #2
 8008022:	3002      	addcc	r0, #2
 8008024:	2b00      	cmp	r3, #0
 8008026:	db05      	blt.n	8008034 <__hi0bits+0x3c>
 8008028:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800802c:	f100 0001 	add.w	r0, r0, #1
 8008030:	bf08      	it	eq
 8008032:	2020      	moveq	r0, #32
 8008034:	4770      	bx	lr

08008036 <__lo0bits>:
 8008036:	6803      	ldr	r3, [r0, #0]
 8008038:	4602      	mov	r2, r0
 800803a:	f013 0007 	ands.w	r0, r3, #7
 800803e:	d00b      	beq.n	8008058 <__lo0bits+0x22>
 8008040:	07d9      	lsls	r1, r3, #31
 8008042:	d421      	bmi.n	8008088 <__lo0bits+0x52>
 8008044:	0798      	lsls	r0, r3, #30
 8008046:	bf49      	itett	mi
 8008048:	085b      	lsrmi	r3, r3, #1
 800804a:	089b      	lsrpl	r3, r3, #2
 800804c:	2001      	movmi	r0, #1
 800804e:	6013      	strmi	r3, [r2, #0]
 8008050:	bf5c      	itt	pl
 8008052:	6013      	strpl	r3, [r2, #0]
 8008054:	2002      	movpl	r0, #2
 8008056:	4770      	bx	lr
 8008058:	b299      	uxth	r1, r3
 800805a:	b909      	cbnz	r1, 8008060 <__lo0bits+0x2a>
 800805c:	0c1b      	lsrs	r3, r3, #16
 800805e:	2010      	movs	r0, #16
 8008060:	b2d9      	uxtb	r1, r3
 8008062:	b909      	cbnz	r1, 8008068 <__lo0bits+0x32>
 8008064:	3008      	adds	r0, #8
 8008066:	0a1b      	lsrs	r3, r3, #8
 8008068:	0719      	lsls	r1, r3, #28
 800806a:	bf04      	itt	eq
 800806c:	091b      	lsreq	r3, r3, #4
 800806e:	3004      	addeq	r0, #4
 8008070:	0799      	lsls	r1, r3, #30
 8008072:	bf04      	itt	eq
 8008074:	089b      	lsreq	r3, r3, #2
 8008076:	3002      	addeq	r0, #2
 8008078:	07d9      	lsls	r1, r3, #31
 800807a:	d403      	bmi.n	8008084 <__lo0bits+0x4e>
 800807c:	085b      	lsrs	r3, r3, #1
 800807e:	f100 0001 	add.w	r0, r0, #1
 8008082:	d003      	beq.n	800808c <__lo0bits+0x56>
 8008084:	6013      	str	r3, [r2, #0]
 8008086:	4770      	bx	lr
 8008088:	2000      	movs	r0, #0
 800808a:	4770      	bx	lr
 800808c:	2020      	movs	r0, #32
 800808e:	4770      	bx	lr

08008090 <__i2b>:
 8008090:	b510      	push	{r4, lr}
 8008092:	460c      	mov	r4, r1
 8008094:	2101      	movs	r1, #1
 8008096:	f7ff ff07 	bl	8007ea8 <_Balloc>
 800809a:	4602      	mov	r2, r0
 800809c:	b928      	cbnz	r0, 80080aa <__i2b+0x1a>
 800809e:	4b05      	ldr	r3, [pc, #20]	@ (80080b4 <__i2b+0x24>)
 80080a0:	4805      	ldr	r0, [pc, #20]	@ (80080b8 <__i2b+0x28>)
 80080a2:	f240 1145 	movw	r1, #325	@ 0x145
 80080a6:	f000 fca7 	bl	80089f8 <__assert_func>
 80080aa:	2301      	movs	r3, #1
 80080ac:	6144      	str	r4, [r0, #20]
 80080ae:	6103      	str	r3, [r0, #16]
 80080b0:	bd10      	pop	{r4, pc}
 80080b2:	bf00      	nop
 80080b4:	08009cc4 	.word	0x08009cc4
 80080b8:	08009cd5 	.word	0x08009cd5

080080bc <__multiply>:
 80080bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080c0:	4617      	mov	r7, r2
 80080c2:	690a      	ldr	r2, [r1, #16]
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	429a      	cmp	r2, r3
 80080c8:	bfa8      	it	ge
 80080ca:	463b      	movge	r3, r7
 80080cc:	4689      	mov	r9, r1
 80080ce:	bfa4      	itt	ge
 80080d0:	460f      	movge	r7, r1
 80080d2:	4699      	movge	r9, r3
 80080d4:	693d      	ldr	r5, [r7, #16]
 80080d6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	6879      	ldr	r1, [r7, #4]
 80080de:	eb05 060a 	add.w	r6, r5, sl
 80080e2:	42b3      	cmp	r3, r6
 80080e4:	b085      	sub	sp, #20
 80080e6:	bfb8      	it	lt
 80080e8:	3101      	addlt	r1, #1
 80080ea:	f7ff fedd 	bl	8007ea8 <_Balloc>
 80080ee:	b930      	cbnz	r0, 80080fe <__multiply+0x42>
 80080f0:	4602      	mov	r2, r0
 80080f2:	4b41      	ldr	r3, [pc, #260]	@ (80081f8 <__multiply+0x13c>)
 80080f4:	4841      	ldr	r0, [pc, #260]	@ (80081fc <__multiply+0x140>)
 80080f6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80080fa:	f000 fc7d 	bl	80089f8 <__assert_func>
 80080fe:	f100 0414 	add.w	r4, r0, #20
 8008102:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8008106:	4623      	mov	r3, r4
 8008108:	2200      	movs	r2, #0
 800810a:	4573      	cmp	r3, lr
 800810c:	d320      	bcc.n	8008150 <__multiply+0x94>
 800810e:	f107 0814 	add.w	r8, r7, #20
 8008112:	f109 0114 	add.w	r1, r9, #20
 8008116:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800811a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800811e:	9302      	str	r3, [sp, #8]
 8008120:	1beb      	subs	r3, r5, r7
 8008122:	3b15      	subs	r3, #21
 8008124:	f023 0303 	bic.w	r3, r3, #3
 8008128:	3304      	adds	r3, #4
 800812a:	3715      	adds	r7, #21
 800812c:	42bd      	cmp	r5, r7
 800812e:	bf38      	it	cc
 8008130:	2304      	movcc	r3, #4
 8008132:	9301      	str	r3, [sp, #4]
 8008134:	9b02      	ldr	r3, [sp, #8]
 8008136:	9103      	str	r1, [sp, #12]
 8008138:	428b      	cmp	r3, r1
 800813a:	d80c      	bhi.n	8008156 <__multiply+0x9a>
 800813c:	2e00      	cmp	r6, #0
 800813e:	dd03      	ble.n	8008148 <__multiply+0x8c>
 8008140:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008144:	2b00      	cmp	r3, #0
 8008146:	d055      	beq.n	80081f4 <__multiply+0x138>
 8008148:	6106      	str	r6, [r0, #16]
 800814a:	b005      	add	sp, #20
 800814c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008150:	f843 2b04 	str.w	r2, [r3], #4
 8008154:	e7d9      	b.n	800810a <__multiply+0x4e>
 8008156:	f8b1 a000 	ldrh.w	sl, [r1]
 800815a:	f1ba 0f00 	cmp.w	sl, #0
 800815e:	d01f      	beq.n	80081a0 <__multiply+0xe4>
 8008160:	46c4      	mov	ip, r8
 8008162:	46a1      	mov	r9, r4
 8008164:	2700      	movs	r7, #0
 8008166:	f85c 2b04 	ldr.w	r2, [ip], #4
 800816a:	f8d9 3000 	ldr.w	r3, [r9]
 800816e:	fa1f fb82 	uxth.w	fp, r2
 8008172:	b29b      	uxth	r3, r3
 8008174:	fb0a 330b 	mla	r3, sl, fp, r3
 8008178:	443b      	add	r3, r7
 800817a:	f8d9 7000 	ldr.w	r7, [r9]
 800817e:	0c12      	lsrs	r2, r2, #16
 8008180:	0c3f      	lsrs	r7, r7, #16
 8008182:	fb0a 7202 	mla	r2, sl, r2, r7
 8008186:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800818a:	b29b      	uxth	r3, r3
 800818c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008190:	4565      	cmp	r5, ip
 8008192:	f849 3b04 	str.w	r3, [r9], #4
 8008196:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800819a:	d8e4      	bhi.n	8008166 <__multiply+0xaa>
 800819c:	9b01      	ldr	r3, [sp, #4]
 800819e:	50e7      	str	r7, [r4, r3]
 80081a0:	9b03      	ldr	r3, [sp, #12]
 80081a2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80081a6:	3104      	adds	r1, #4
 80081a8:	f1b9 0f00 	cmp.w	r9, #0
 80081ac:	d020      	beq.n	80081f0 <__multiply+0x134>
 80081ae:	6823      	ldr	r3, [r4, #0]
 80081b0:	4647      	mov	r7, r8
 80081b2:	46a4      	mov	ip, r4
 80081b4:	f04f 0a00 	mov.w	sl, #0
 80081b8:	f8b7 b000 	ldrh.w	fp, [r7]
 80081bc:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80081c0:	fb09 220b 	mla	r2, r9, fp, r2
 80081c4:	4452      	add	r2, sl
 80081c6:	b29b      	uxth	r3, r3
 80081c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80081cc:	f84c 3b04 	str.w	r3, [ip], #4
 80081d0:	f857 3b04 	ldr.w	r3, [r7], #4
 80081d4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80081d8:	f8bc 3000 	ldrh.w	r3, [ip]
 80081dc:	fb09 330a 	mla	r3, r9, sl, r3
 80081e0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80081e4:	42bd      	cmp	r5, r7
 80081e6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80081ea:	d8e5      	bhi.n	80081b8 <__multiply+0xfc>
 80081ec:	9a01      	ldr	r2, [sp, #4]
 80081ee:	50a3      	str	r3, [r4, r2]
 80081f0:	3404      	adds	r4, #4
 80081f2:	e79f      	b.n	8008134 <__multiply+0x78>
 80081f4:	3e01      	subs	r6, #1
 80081f6:	e7a1      	b.n	800813c <__multiply+0x80>
 80081f8:	08009cc4 	.word	0x08009cc4
 80081fc:	08009cd5 	.word	0x08009cd5

08008200 <__pow5mult>:
 8008200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008204:	4615      	mov	r5, r2
 8008206:	f012 0203 	ands.w	r2, r2, #3
 800820a:	4607      	mov	r7, r0
 800820c:	460e      	mov	r6, r1
 800820e:	d007      	beq.n	8008220 <__pow5mult+0x20>
 8008210:	4c25      	ldr	r4, [pc, #148]	@ (80082a8 <__pow5mult+0xa8>)
 8008212:	3a01      	subs	r2, #1
 8008214:	2300      	movs	r3, #0
 8008216:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800821a:	f7ff fea7 	bl	8007f6c <__multadd>
 800821e:	4606      	mov	r6, r0
 8008220:	10ad      	asrs	r5, r5, #2
 8008222:	d03d      	beq.n	80082a0 <__pow5mult+0xa0>
 8008224:	69fc      	ldr	r4, [r7, #28]
 8008226:	b97c      	cbnz	r4, 8008248 <__pow5mult+0x48>
 8008228:	2010      	movs	r0, #16
 800822a:	f7ff fd87 	bl	8007d3c <malloc>
 800822e:	4602      	mov	r2, r0
 8008230:	61f8      	str	r0, [r7, #28]
 8008232:	b928      	cbnz	r0, 8008240 <__pow5mult+0x40>
 8008234:	4b1d      	ldr	r3, [pc, #116]	@ (80082ac <__pow5mult+0xac>)
 8008236:	481e      	ldr	r0, [pc, #120]	@ (80082b0 <__pow5mult+0xb0>)
 8008238:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800823c:	f000 fbdc 	bl	80089f8 <__assert_func>
 8008240:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008244:	6004      	str	r4, [r0, #0]
 8008246:	60c4      	str	r4, [r0, #12]
 8008248:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800824c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008250:	b94c      	cbnz	r4, 8008266 <__pow5mult+0x66>
 8008252:	f240 2171 	movw	r1, #625	@ 0x271
 8008256:	4638      	mov	r0, r7
 8008258:	f7ff ff1a 	bl	8008090 <__i2b>
 800825c:	2300      	movs	r3, #0
 800825e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008262:	4604      	mov	r4, r0
 8008264:	6003      	str	r3, [r0, #0]
 8008266:	f04f 0900 	mov.w	r9, #0
 800826a:	07eb      	lsls	r3, r5, #31
 800826c:	d50a      	bpl.n	8008284 <__pow5mult+0x84>
 800826e:	4631      	mov	r1, r6
 8008270:	4622      	mov	r2, r4
 8008272:	4638      	mov	r0, r7
 8008274:	f7ff ff22 	bl	80080bc <__multiply>
 8008278:	4631      	mov	r1, r6
 800827a:	4680      	mov	r8, r0
 800827c:	4638      	mov	r0, r7
 800827e:	f7ff fe53 	bl	8007f28 <_Bfree>
 8008282:	4646      	mov	r6, r8
 8008284:	106d      	asrs	r5, r5, #1
 8008286:	d00b      	beq.n	80082a0 <__pow5mult+0xa0>
 8008288:	6820      	ldr	r0, [r4, #0]
 800828a:	b938      	cbnz	r0, 800829c <__pow5mult+0x9c>
 800828c:	4622      	mov	r2, r4
 800828e:	4621      	mov	r1, r4
 8008290:	4638      	mov	r0, r7
 8008292:	f7ff ff13 	bl	80080bc <__multiply>
 8008296:	6020      	str	r0, [r4, #0]
 8008298:	f8c0 9000 	str.w	r9, [r0]
 800829c:	4604      	mov	r4, r0
 800829e:	e7e4      	b.n	800826a <__pow5mult+0x6a>
 80082a0:	4630      	mov	r0, r6
 80082a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082a6:	bf00      	nop
 80082a8:	08009d88 	.word	0x08009d88
 80082ac:	08009c55 	.word	0x08009c55
 80082b0:	08009cd5 	.word	0x08009cd5

080082b4 <__lshift>:
 80082b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082b8:	460c      	mov	r4, r1
 80082ba:	6849      	ldr	r1, [r1, #4]
 80082bc:	6923      	ldr	r3, [r4, #16]
 80082be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80082c2:	68a3      	ldr	r3, [r4, #8]
 80082c4:	4607      	mov	r7, r0
 80082c6:	4691      	mov	r9, r2
 80082c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80082cc:	f108 0601 	add.w	r6, r8, #1
 80082d0:	42b3      	cmp	r3, r6
 80082d2:	db0b      	blt.n	80082ec <__lshift+0x38>
 80082d4:	4638      	mov	r0, r7
 80082d6:	f7ff fde7 	bl	8007ea8 <_Balloc>
 80082da:	4605      	mov	r5, r0
 80082dc:	b948      	cbnz	r0, 80082f2 <__lshift+0x3e>
 80082de:	4602      	mov	r2, r0
 80082e0:	4b28      	ldr	r3, [pc, #160]	@ (8008384 <__lshift+0xd0>)
 80082e2:	4829      	ldr	r0, [pc, #164]	@ (8008388 <__lshift+0xd4>)
 80082e4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80082e8:	f000 fb86 	bl	80089f8 <__assert_func>
 80082ec:	3101      	adds	r1, #1
 80082ee:	005b      	lsls	r3, r3, #1
 80082f0:	e7ee      	b.n	80082d0 <__lshift+0x1c>
 80082f2:	2300      	movs	r3, #0
 80082f4:	f100 0114 	add.w	r1, r0, #20
 80082f8:	f100 0210 	add.w	r2, r0, #16
 80082fc:	4618      	mov	r0, r3
 80082fe:	4553      	cmp	r3, sl
 8008300:	db33      	blt.n	800836a <__lshift+0xb6>
 8008302:	6920      	ldr	r0, [r4, #16]
 8008304:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008308:	f104 0314 	add.w	r3, r4, #20
 800830c:	f019 091f 	ands.w	r9, r9, #31
 8008310:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008314:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008318:	d02b      	beq.n	8008372 <__lshift+0xbe>
 800831a:	f1c9 0e20 	rsb	lr, r9, #32
 800831e:	468a      	mov	sl, r1
 8008320:	2200      	movs	r2, #0
 8008322:	6818      	ldr	r0, [r3, #0]
 8008324:	fa00 f009 	lsl.w	r0, r0, r9
 8008328:	4310      	orrs	r0, r2
 800832a:	f84a 0b04 	str.w	r0, [sl], #4
 800832e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008332:	459c      	cmp	ip, r3
 8008334:	fa22 f20e 	lsr.w	r2, r2, lr
 8008338:	d8f3      	bhi.n	8008322 <__lshift+0x6e>
 800833a:	ebac 0304 	sub.w	r3, ip, r4
 800833e:	3b15      	subs	r3, #21
 8008340:	f023 0303 	bic.w	r3, r3, #3
 8008344:	3304      	adds	r3, #4
 8008346:	f104 0015 	add.w	r0, r4, #21
 800834a:	4560      	cmp	r0, ip
 800834c:	bf88      	it	hi
 800834e:	2304      	movhi	r3, #4
 8008350:	50ca      	str	r2, [r1, r3]
 8008352:	b10a      	cbz	r2, 8008358 <__lshift+0xa4>
 8008354:	f108 0602 	add.w	r6, r8, #2
 8008358:	3e01      	subs	r6, #1
 800835a:	4638      	mov	r0, r7
 800835c:	612e      	str	r6, [r5, #16]
 800835e:	4621      	mov	r1, r4
 8008360:	f7ff fde2 	bl	8007f28 <_Bfree>
 8008364:	4628      	mov	r0, r5
 8008366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800836a:	f842 0f04 	str.w	r0, [r2, #4]!
 800836e:	3301      	adds	r3, #1
 8008370:	e7c5      	b.n	80082fe <__lshift+0x4a>
 8008372:	3904      	subs	r1, #4
 8008374:	f853 2b04 	ldr.w	r2, [r3], #4
 8008378:	f841 2f04 	str.w	r2, [r1, #4]!
 800837c:	459c      	cmp	ip, r3
 800837e:	d8f9      	bhi.n	8008374 <__lshift+0xc0>
 8008380:	e7ea      	b.n	8008358 <__lshift+0xa4>
 8008382:	bf00      	nop
 8008384:	08009cc4 	.word	0x08009cc4
 8008388:	08009cd5 	.word	0x08009cd5

0800838c <__mcmp>:
 800838c:	690a      	ldr	r2, [r1, #16]
 800838e:	4603      	mov	r3, r0
 8008390:	6900      	ldr	r0, [r0, #16]
 8008392:	1a80      	subs	r0, r0, r2
 8008394:	b530      	push	{r4, r5, lr}
 8008396:	d10e      	bne.n	80083b6 <__mcmp+0x2a>
 8008398:	3314      	adds	r3, #20
 800839a:	3114      	adds	r1, #20
 800839c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80083a0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80083a4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80083a8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80083ac:	4295      	cmp	r5, r2
 80083ae:	d003      	beq.n	80083b8 <__mcmp+0x2c>
 80083b0:	d205      	bcs.n	80083be <__mcmp+0x32>
 80083b2:	f04f 30ff 	mov.w	r0, #4294967295
 80083b6:	bd30      	pop	{r4, r5, pc}
 80083b8:	42a3      	cmp	r3, r4
 80083ba:	d3f3      	bcc.n	80083a4 <__mcmp+0x18>
 80083bc:	e7fb      	b.n	80083b6 <__mcmp+0x2a>
 80083be:	2001      	movs	r0, #1
 80083c0:	e7f9      	b.n	80083b6 <__mcmp+0x2a>
	...

080083c4 <__mdiff>:
 80083c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083c8:	4689      	mov	r9, r1
 80083ca:	4606      	mov	r6, r0
 80083cc:	4611      	mov	r1, r2
 80083ce:	4648      	mov	r0, r9
 80083d0:	4614      	mov	r4, r2
 80083d2:	f7ff ffdb 	bl	800838c <__mcmp>
 80083d6:	1e05      	subs	r5, r0, #0
 80083d8:	d112      	bne.n	8008400 <__mdiff+0x3c>
 80083da:	4629      	mov	r1, r5
 80083dc:	4630      	mov	r0, r6
 80083de:	f7ff fd63 	bl	8007ea8 <_Balloc>
 80083e2:	4602      	mov	r2, r0
 80083e4:	b928      	cbnz	r0, 80083f2 <__mdiff+0x2e>
 80083e6:	4b3f      	ldr	r3, [pc, #252]	@ (80084e4 <__mdiff+0x120>)
 80083e8:	f240 2137 	movw	r1, #567	@ 0x237
 80083ec:	483e      	ldr	r0, [pc, #248]	@ (80084e8 <__mdiff+0x124>)
 80083ee:	f000 fb03 	bl	80089f8 <__assert_func>
 80083f2:	2301      	movs	r3, #1
 80083f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80083f8:	4610      	mov	r0, r2
 80083fa:	b003      	add	sp, #12
 80083fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008400:	bfbc      	itt	lt
 8008402:	464b      	movlt	r3, r9
 8008404:	46a1      	movlt	r9, r4
 8008406:	4630      	mov	r0, r6
 8008408:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800840c:	bfba      	itte	lt
 800840e:	461c      	movlt	r4, r3
 8008410:	2501      	movlt	r5, #1
 8008412:	2500      	movge	r5, #0
 8008414:	f7ff fd48 	bl	8007ea8 <_Balloc>
 8008418:	4602      	mov	r2, r0
 800841a:	b918      	cbnz	r0, 8008424 <__mdiff+0x60>
 800841c:	4b31      	ldr	r3, [pc, #196]	@ (80084e4 <__mdiff+0x120>)
 800841e:	f240 2145 	movw	r1, #581	@ 0x245
 8008422:	e7e3      	b.n	80083ec <__mdiff+0x28>
 8008424:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008428:	6926      	ldr	r6, [r4, #16]
 800842a:	60c5      	str	r5, [r0, #12]
 800842c:	f109 0310 	add.w	r3, r9, #16
 8008430:	f109 0514 	add.w	r5, r9, #20
 8008434:	f104 0e14 	add.w	lr, r4, #20
 8008438:	f100 0b14 	add.w	fp, r0, #20
 800843c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008440:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008444:	9301      	str	r3, [sp, #4]
 8008446:	46d9      	mov	r9, fp
 8008448:	f04f 0c00 	mov.w	ip, #0
 800844c:	9b01      	ldr	r3, [sp, #4]
 800844e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008452:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008456:	9301      	str	r3, [sp, #4]
 8008458:	fa1f f38a 	uxth.w	r3, sl
 800845c:	4619      	mov	r1, r3
 800845e:	b283      	uxth	r3, r0
 8008460:	1acb      	subs	r3, r1, r3
 8008462:	0c00      	lsrs	r0, r0, #16
 8008464:	4463      	add	r3, ip
 8008466:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800846a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800846e:	b29b      	uxth	r3, r3
 8008470:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008474:	4576      	cmp	r6, lr
 8008476:	f849 3b04 	str.w	r3, [r9], #4
 800847a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800847e:	d8e5      	bhi.n	800844c <__mdiff+0x88>
 8008480:	1b33      	subs	r3, r6, r4
 8008482:	3b15      	subs	r3, #21
 8008484:	f023 0303 	bic.w	r3, r3, #3
 8008488:	3415      	adds	r4, #21
 800848a:	3304      	adds	r3, #4
 800848c:	42a6      	cmp	r6, r4
 800848e:	bf38      	it	cc
 8008490:	2304      	movcc	r3, #4
 8008492:	441d      	add	r5, r3
 8008494:	445b      	add	r3, fp
 8008496:	461e      	mov	r6, r3
 8008498:	462c      	mov	r4, r5
 800849a:	4544      	cmp	r4, r8
 800849c:	d30e      	bcc.n	80084bc <__mdiff+0xf8>
 800849e:	f108 0103 	add.w	r1, r8, #3
 80084a2:	1b49      	subs	r1, r1, r5
 80084a4:	f021 0103 	bic.w	r1, r1, #3
 80084a8:	3d03      	subs	r5, #3
 80084aa:	45a8      	cmp	r8, r5
 80084ac:	bf38      	it	cc
 80084ae:	2100      	movcc	r1, #0
 80084b0:	440b      	add	r3, r1
 80084b2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80084b6:	b191      	cbz	r1, 80084de <__mdiff+0x11a>
 80084b8:	6117      	str	r7, [r2, #16]
 80084ba:	e79d      	b.n	80083f8 <__mdiff+0x34>
 80084bc:	f854 1b04 	ldr.w	r1, [r4], #4
 80084c0:	46e6      	mov	lr, ip
 80084c2:	0c08      	lsrs	r0, r1, #16
 80084c4:	fa1c fc81 	uxtah	ip, ip, r1
 80084c8:	4471      	add	r1, lr
 80084ca:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80084ce:	b289      	uxth	r1, r1
 80084d0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80084d4:	f846 1b04 	str.w	r1, [r6], #4
 80084d8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80084dc:	e7dd      	b.n	800849a <__mdiff+0xd6>
 80084de:	3f01      	subs	r7, #1
 80084e0:	e7e7      	b.n	80084b2 <__mdiff+0xee>
 80084e2:	bf00      	nop
 80084e4:	08009cc4 	.word	0x08009cc4
 80084e8:	08009cd5 	.word	0x08009cd5

080084ec <__d2b>:
 80084ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80084f0:	460f      	mov	r7, r1
 80084f2:	2101      	movs	r1, #1
 80084f4:	ec59 8b10 	vmov	r8, r9, d0
 80084f8:	4616      	mov	r6, r2
 80084fa:	f7ff fcd5 	bl	8007ea8 <_Balloc>
 80084fe:	4604      	mov	r4, r0
 8008500:	b930      	cbnz	r0, 8008510 <__d2b+0x24>
 8008502:	4602      	mov	r2, r0
 8008504:	4b23      	ldr	r3, [pc, #140]	@ (8008594 <__d2b+0xa8>)
 8008506:	4824      	ldr	r0, [pc, #144]	@ (8008598 <__d2b+0xac>)
 8008508:	f240 310f 	movw	r1, #783	@ 0x30f
 800850c:	f000 fa74 	bl	80089f8 <__assert_func>
 8008510:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008514:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008518:	b10d      	cbz	r5, 800851e <__d2b+0x32>
 800851a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800851e:	9301      	str	r3, [sp, #4]
 8008520:	f1b8 0300 	subs.w	r3, r8, #0
 8008524:	d023      	beq.n	800856e <__d2b+0x82>
 8008526:	4668      	mov	r0, sp
 8008528:	9300      	str	r3, [sp, #0]
 800852a:	f7ff fd84 	bl	8008036 <__lo0bits>
 800852e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008532:	b1d0      	cbz	r0, 800856a <__d2b+0x7e>
 8008534:	f1c0 0320 	rsb	r3, r0, #32
 8008538:	fa02 f303 	lsl.w	r3, r2, r3
 800853c:	430b      	orrs	r3, r1
 800853e:	40c2      	lsrs	r2, r0
 8008540:	6163      	str	r3, [r4, #20]
 8008542:	9201      	str	r2, [sp, #4]
 8008544:	9b01      	ldr	r3, [sp, #4]
 8008546:	61a3      	str	r3, [r4, #24]
 8008548:	2b00      	cmp	r3, #0
 800854a:	bf0c      	ite	eq
 800854c:	2201      	moveq	r2, #1
 800854e:	2202      	movne	r2, #2
 8008550:	6122      	str	r2, [r4, #16]
 8008552:	b1a5      	cbz	r5, 800857e <__d2b+0x92>
 8008554:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008558:	4405      	add	r5, r0
 800855a:	603d      	str	r5, [r7, #0]
 800855c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008560:	6030      	str	r0, [r6, #0]
 8008562:	4620      	mov	r0, r4
 8008564:	b003      	add	sp, #12
 8008566:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800856a:	6161      	str	r1, [r4, #20]
 800856c:	e7ea      	b.n	8008544 <__d2b+0x58>
 800856e:	a801      	add	r0, sp, #4
 8008570:	f7ff fd61 	bl	8008036 <__lo0bits>
 8008574:	9b01      	ldr	r3, [sp, #4]
 8008576:	6163      	str	r3, [r4, #20]
 8008578:	3020      	adds	r0, #32
 800857a:	2201      	movs	r2, #1
 800857c:	e7e8      	b.n	8008550 <__d2b+0x64>
 800857e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008582:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008586:	6038      	str	r0, [r7, #0]
 8008588:	6918      	ldr	r0, [r3, #16]
 800858a:	f7ff fd35 	bl	8007ff8 <__hi0bits>
 800858e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008592:	e7e5      	b.n	8008560 <__d2b+0x74>
 8008594:	08009cc4 	.word	0x08009cc4
 8008598:	08009cd5 	.word	0x08009cd5

0800859c <__ssputs_r>:
 800859c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085a0:	688e      	ldr	r6, [r1, #8]
 80085a2:	461f      	mov	r7, r3
 80085a4:	42be      	cmp	r6, r7
 80085a6:	680b      	ldr	r3, [r1, #0]
 80085a8:	4682      	mov	sl, r0
 80085aa:	460c      	mov	r4, r1
 80085ac:	4690      	mov	r8, r2
 80085ae:	d82d      	bhi.n	800860c <__ssputs_r+0x70>
 80085b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80085b4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80085b8:	d026      	beq.n	8008608 <__ssputs_r+0x6c>
 80085ba:	6965      	ldr	r5, [r4, #20]
 80085bc:	6909      	ldr	r1, [r1, #16]
 80085be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80085c2:	eba3 0901 	sub.w	r9, r3, r1
 80085c6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80085ca:	1c7b      	adds	r3, r7, #1
 80085cc:	444b      	add	r3, r9
 80085ce:	106d      	asrs	r5, r5, #1
 80085d0:	429d      	cmp	r5, r3
 80085d2:	bf38      	it	cc
 80085d4:	461d      	movcc	r5, r3
 80085d6:	0553      	lsls	r3, r2, #21
 80085d8:	d527      	bpl.n	800862a <__ssputs_r+0x8e>
 80085da:	4629      	mov	r1, r5
 80085dc:	f7ff fbd8 	bl	8007d90 <_malloc_r>
 80085e0:	4606      	mov	r6, r0
 80085e2:	b360      	cbz	r0, 800863e <__ssputs_r+0xa2>
 80085e4:	6921      	ldr	r1, [r4, #16]
 80085e6:	464a      	mov	r2, r9
 80085e8:	f7fe fcf5 	bl	8006fd6 <memcpy>
 80085ec:	89a3      	ldrh	r3, [r4, #12]
 80085ee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80085f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80085f6:	81a3      	strh	r3, [r4, #12]
 80085f8:	6126      	str	r6, [r4, #16]
 80085fa:	6165      	str	r5, [r4, #20]
 80085fc:	444e      	add	r6, r9
 80085fe:	eba5 0509 	sub.w	r5, r5, r9
 8008602:	6026      	str	r6, [r4, #0]
 8008604:	60a5      	str	r5, [r4, #8]
 8008606:	463e      	mov	r6, r7
 8008608:	42be      	cmp	r6, r7
 800860a:	d900      	bls.n	800860e <__ssputs_r+0x72>
 800860c:	463e      	mov	r6, r7
 800860e:	6820      	ldr	r0, [r4, #0]
 8008610:	4632      	mov	r2, r6
 8008612:	4641      	mov	r1, r8
 8008614:	f000 f9c6 	bl	80089a4 <memmove>
 8008618:	68a3      	ldr	r3, [r4, #8]
 800861a:	1b9b      	subs	r3, r3, r6
 800861c:	60a3      	str	r3, [r4, #8]
 800861e:	6823      	ldr	r3, [r4, #0]
 8008620:	4433      	add	r3, r6
 8008622:	6023      	str	r3, [r4, #0]
 8008624:	2000      	movs	r0, #0
 8008626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800862a:	462a      	mov	r2, r5
 800862c:	f000 fa28 	bl	8008a80 <_realloc_r>
 8008630:	4606      	mov	r6, r0
 8008632:	2800      	cmp	r0, #0
 8008634:	d1e0      	bne.n	80085f8 <__ssputs_r+0x5c>
 8008636:	6921      	ldr	r1, [r4, #16]
 8008638:	4650      	mov	r0, sl
 800863a:	f7ff fb35 	bl	8007ca8 <_free_r>
 800863e:	230c      	movs	r3, #12
 8008640:	f8ca 3000 	str.w	r3, [sl]
 8008644:	89a3      	ldrh	r3, [r4, #12]
 8008646:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800864a:	81a3      	strh	r3, [r4, #12]
 800864c:	f04f 30ff 	mov.w	r0, #4294967295
 8008650:	e7e9      	b.n	8008626 <__ssputs_r+0x8a>
	...

08008654 <_svfiprintf_r>:
 8008654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008658:	4698      	mov	r8, r3
 800865a:	898b      	ldrh	r3, [r1, #12]
 800865c:	061b      	lsls	r3, r3, #24
 800865e:	b09d      	sub	sp, #116	@ 0x74
 8008660:	4607      	mov	r7, r0
 8008662:	460d      	mov	r5, r1
 8008664:	4614      	mov	r4, r2
 8008666:	d510      	bpl.n	800868a <_svfiprintf_r+0x36>
 8008668:	690b      	ldr	r3, [r1, #16]
 800866a:	b973      	cbnz	r3, 800868a <_svfiprintf_r+0x36>
 800866c:	2140      	movs	r1, #64	@ 0x40
 800866e:	f7ff fb8f 	bl	8007d90 <_malloc_r>
 8008672:	6028      	str	r0, [r5, #0]
 8008674:	6128      	str	r0, [r5, #16]
 8008676:	b930      	cbnz	r0, 8008686 <_svfiprintf_r+0x32>
 8008678:	230c      	movs	r3, #12
 800867a:	603b      	str	r3, [r7, #0]
 800867c:	f04f 30ff 	mov.w	r0, #4294967295
 8008680:	b01d      	add	sp, #116	@ 0x74
 8008682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008686:	2340      	movs	r3, #64	@ 0x40
 8008688:	616b      	str	r3, [r5, #20]
 800868a:	2300      	movs	r3, #0
 800868c:	9309      	str	r3, [sp, #36]	@ 0x24
 800868e:	2320      	movs	r3, #32
 8008690:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008694:	f8cd 800c 	str.w	r8, [sp, #12]
 8008698:	2330      	movs	r3, #48	@ 0x30
 800869a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008838 <_svfiprintf_r+0x1e4>
 800869e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80086a2:	f04f 0901 	mov.w	r9, #1
 80086a6:	4623      	mov	r3, r4
 80086a8:	469a      	mov	sl, r3
 80086aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086ae:	b10a      	cbz	r2, 80086b4 <_svfiprintf_r+0x60>
 80086b0:	2a25      	cmp	r2, #37	@ 0x25
 80086b2:	d1f9      	bne.n	80086a8 <_svfiprintf_r+0x54>
 80086b4:	ebba 0b04 	subs.w	fp, sl, r4
 80086b8:	d00b      	beq.n	80086d2 <_svfiprintf_r+0x7e>
 80086ba:	465b      	mov	r3, fp
 80086bc:	4622      	mov	r2, r4
 80086be:	4629      	mov	r1, r5
 80086c0:	4638      	mov	r0, r7
 80086c2:	f7ff ff6b 	bl	800859c <__ssputs_r>
 80086c6:	3001      	adds	r0, #1
 80086c8:	f000 80a7 	beq.w	800881a <_svfiprintf_r+0x1c6>
 80086cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80086ce:	445a      	add	r2, fp
 80086d0:	9209      	str	r2, [sp, #36]	@ 0x24
 80086d2:	f89a 3000 	ldrb.w	r3, [sl]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	f000 809f 	beq.w	800881a <_svfiprintf_r+0x1c6>
 80086dc:	2300      	movs	r3, #0
 80086de:	f04f 32ff 	mov.w	r2, #4294967295
 80086e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80086e6:	f10a 0a01 	add.w	sl, sl, #1
 80086ea:	9304      	str	r3, [sp, #16]
 80086ec:	9307      	str	r3, [sp, #28]
 80086ee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80086f2:	931a      	str	r3, [sp, #104]	@ 0x68
 80086f4:	4654      	mov	r4, sl
 80086f6:	2205      	movs	r2, #5
 80086f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086fc:	484e      	ldr	r0, [pc, #312]	@ (8008838 <_svfiprintf_r+0x1e4>)
 80086fe:	f7f7 fd6f 	bl	80001e0 <memchr>
 8008702:	9a04      	ldr	r2, [sp, #16]
 8008704:	b9d8      	cbnz	r0, 800873e <_svfiprintf_r+0xea>
 8008706:	06d0      	lsls	r0, r2, #27
 8008708:	bf44      	itt	mi
 800870a:	2320      	movmi	r3, #32
 800870c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008710:	0711      	lsls	r1, r2, #28
 8008712:	bf44      	itt	mi
 8008714:	232b      	movmi	r3, #43	@ 0x2b
 8008716:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800871a:	f89a 3000 	ldrb.w	r3, [sl]
 800871e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008720:	d015      	beq.n	800874e <_svfiprintf_r+0xfa>
 8008722:	9a07      	ldr	r2, [sp, #28]
 8008724:	4654      	mov	r4, sl
 8008726:	2000      	movs	r0, #0
 8008728:	f04f 0c0a 	mov.w	ip, #10
 800872c:	4621      	mov	r1, r4
 800872e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008732:	3b30      	subs	r3, #48	@ 0x30
 8008734:	2b09      	cmp	r3, #9
 8008736:	d94b      	bls.n	80087d0 <_svfiprintf_r+0x17c>
 8008738:	b1b0      	cbz	r0, 8008768 <_svfiprintf_r+0x114>
 800873a:	9207      	str	r2, [sp, #28]
 800873c:	e014      	b.n	8008768 <_svfiprintf_r+0x114>
 800873e:	eba0 0308 	sub.w	r3, r0, r8
 8008742:	fa09 f303 	lsl.w	r3, r9, r3
 8008746:	4313      	orrs	r3, r2
 8008748:	9304      	str	r3, [sp, #16]
 800874a:	46a2      	mov	sl, r4
 800874c:	e7d2      	b.n	80086f4 <_svfiprintf_r+0xa0>
 800874e:	9b03      	ldr	r3, [sp, #12]
 8008750:	1d19      	adds	r1, r3, #4
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	9103      	str	r1, [sp, #12]
 8008756:	2b00      	cmp	r3, #0
 8008758:	bfbb      	ittet	lt
 800875a:	425b      	neglt	r3, r3
 800875c:	f042 0202 	orrlt.w	r2, r2, #2
 8008760:	9307      	strge	r3, [sp, #28]
 8008762:	9307      	strlt	r3, [sp, #28]
 8008764:	bfb8      	it	lt
 8008766:	9204      	strlt	r2, [sp, #16]
 8008768:	7823      	ldrb	r3, [r4, #0]
 800876a:	2b2e      	cmp	r3, #46	@ 0x2e
 800876c:	d10a      	bne.n	8008784 <_svfiprintf_r+0x130>
 800876e:	7863      	ldrb	r3, [r4, #1]
 8008770:	2b2a      	cmp	r3, #42	@ 0x2a
 8008772:	d132      	bne.n	80087da <_svfiprintf_r+0x186>
 8008774:	9b03      	ldr	r3, [sp, #12]
 8008776:	1d1a      	adds	r2, r3, #4
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	9203      	str	r2, [sp, #12]
 800877c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008780:	3402      	adds	r4, #2
 8008782:	9305      	str	r3, [sp, #20]
 8008784:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008848 <_svfiprintf_r+0x1f4>
 8008788:	7821      	ldrb	r1, [r4, #0]
 800878a:	2203      	movs	r2, #3
 800878c:	4650      	mov	r0, sl
 800878e:	f7f7 fd27 	bl	80001e0 <memchr>
 8008792:	b138      	cbz	r0, 80087a4 <_svfiprintf_r+0x150>
 8008794:	9b04      	ldr	r3, [sp, #16]
 8008796:	eba0 000a 	sub.w	r0, r0, sl
 800879a:	2240      	movs	r2, #64	@ 0x40
 800879c:	4082      	lsls	r2, r0
 800879e:	4313      	orrs	r3, r2
 80087a0:	3401      	adds	r4, #1
 80087a2:	9304      	str	r3, [sp, #16]
 80087a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087a8:	4824      	ldr	r0, [pc, #144]	@ (800883c <_svfiprintf_r+0x1e8>)
 80087aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80087ae:	2206      	movs	r2, #6
 80087b0:	f7f7 fd16 	bl	80001e0 <memchr>
 80087b4:	2800      	cmp	r0, #0
 80087b6:	d036      	beq.n	8008826 <_svfiprintf_r+0x1d2>
 80087b8:	4b21      	ldr	r3, [pc, #132]	@ (8008840 <_svfiprintf_r+0x1ec>)
 80087ba:	bb1b      	cbnz	r3, 8008804 <_svfiprintf_r+0x1b0>
 80087bc:	9b03      	ldr	r3, [sp, #12]
 80087be:	3307      	adds	r3, #7
 80087c0:	f023 0307 	bic.w	r3, r3, #7
 80087c4:	3308      	adds	r3, #8
 80087c6:	9303      	str	r3, [sp, #12]
 80087c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087ca:	4433      	add	r3, r6
 80087cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80087ce:	e76a      	b.n	80086a6 <_svfiprintf_r+0x52>
 80087d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80087d4:	460c      	mov	r4, r1
 80087d6:	2001      	movs	r0, #1
 80087d8:	e7a8      	b.n	800872c <_svfiprintf_r+0xd8>
 80087da:	2300      	movs	r3, #0
 80087dc:	3401      	adds	r4, #1
 80087de:	9305      	str	r3, [sp, #20]
 80087e0:	4619      	mov	r1, r3
 80087e2:	f04f 0c0a 	mov.w	ip, #10
 80087e6:	4620      	mov	r0, r4
 80087e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80087ec:	3a30      	subs	r2, #48	@ 0x30
 80087ee:	2a09      	cmp	r2, #9
 80087f0:	d903      	bls.n	80087fa <_svfiprintf_r+0x1a6>
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d0c6      	beq.n	8008784 <_svfiprintf_r+0x130>
 80087f6:	9105      	str	r1, [sp, #20]
 80087f8:	e7c4      	b.n	8008784 <_svfiprintf_r+0x130>
 80087fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80087fe:	4604      	mov	r4, r0
 8008800:	2301      	movs	r3, #1
 8008802:	e7f0      	b.n	80087e6 <_svfiprintf_r+0x192>
 8008804:	ab03      	add	r3, sp, #12
 8008806:	9300      	str	r3, [sp, #0]
 8008808:	462a      	mov	r2, r5
 800880a:	4b0e      	ldr	r3, [pc, #56]	@ (8008844 <_svfiprintf_r+0x1f0>)
 800880c:	a904      	add	r1, sp, #16
 800880e:	4638      	mov	r0, r7
 8008810:	f7fd fe74 	bl	80064fc <_printf_float>
 8008814:	1c42      	adds	r2, r0, #1
 8008816:	4606      	mov	r6, r0
 8008818:	d1d6      	bne.n	80087c8 <_svfiprintf_r+0x174>
 800881a:	89ab      	ldrh	r3, [r5, #12]
 800881c:	065b      	lsls	r3, r3, #25
 800881e:	f53f af2d 	bmi.w	800867c <_svfiprintf_r+0x28>
 8008822:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008824:	e72c      	b.n	8008680 <_svfiprintf_r+0x2c>
 8008826:	ab03      	add	r3, sp, #12
 8008828:	9300      	str	r3, [sp, #0]
 800882a:	462a      	mov	r2, r5
 800882c:	4b05      	ldr	r3, [pc, #20]	@ (8008844 <_svfiprintf_r+0x1f0>)
 800882e:	a904      	add	r1, sp, #16
 8008830:	4638      	mov	r0, r7
 8008832:	f7fe f8fb 	bl	8006a2c <_printf_i>
 8008836:	e7ed      	b.n	8008814 <_svfiprintf_r+0x1c0>
 8008838:	08009d2e 	.word	0x08009d2e
 800883c:	08009d38 	.word	0x08009d38
 8008840:	080064fd 	.word	0x080064fd
 8008844:	0800859d 	.word	0x0800859d
 8008848:	08009d34 	.word	0x08009d34

0800884c <__sflush_r>:
 800884c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008854:	0716      	lsls	r6, r2, #28
 8008856:	4605      	mov	r5, r0
 8008858:	460c      	mov	r4, r1
 800885a:	d454      	bmi.n	8008906 <__sflush_r+0xba>
 800885c:	684b      	ldr	r3, [r1, #4]
 800885e:	2b00      	cmp	r3, #0
 8008860:	dc02      	bgt.n	8008868 <__sflush_r+0x1c>
 8008862:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008864:	2b00      	cmp	r3, #0
 8008866:	dd48      	ble.n	80088fa <__sflush_r+0xae>
 8008868:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800886a:	2e00      	cmp	r6, #0
 800886c:	d045      	beq.n	80088fa <__sflush_r+0xae>
 800886e:	2300      	movs	r3, #0
 8008870:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008874:	682f      	ldr	r7, [r5, #0]
 8008876:	6a21      	ldr	r1, [r4, #32]
 8008878:	602b      	str	r3, [r5, #0]
 800887a:	d030      	beq.n	80088de <__sflush_r+0x92>
 800887c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800887e:	89a3      	ldrh	r3, [r4, #12]
 8008880:	0759      	lsls	r1, r3, #29
 8008882:	d505      	bpl.n	8008890 <__sflush_r+0x44>
 8008884:	6863      	ldr	r3, [r4, #4]
 8008886:	1ad2      	subs	r2, r2, r3
 8008888:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800888a:	b10b      	cbz	r3, 8008890 <__sflush_r+0x44>
 800888c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800888e:	1ad2      	subs	r2, r2, r3
 8008890:	2300      	movs	r3, #0
 8008892:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008894:	6a21      	ldr	r1, [r4, #32]
 8008896:	4628      	mov	r0, r5
 8008898:	47b0      	blx	r6
 800889a:	1c43      	adds	r3, r0, #1
 800889c:	89a3      	ldrh	r3, [r4, #12]
 800889e:	d106      	bne.n	80088ae <__sflush_r+0x62>
 80088a0:	6829      	ldr	r1, [r5, #0]
 80088a2:	291d      	cmp	r1, #29
 80088a4:	d82b      	bhi.n	80088fe <__sflush_r+0xb2>
 80088a6:	4a2a      	ldr	r2, [pc, #168]	@ (8008950 <__sflush_r+0x104>)
 80088a8:	40ca      	lsrs	r2, r1
 80088aa:	07d6      	lsls	r6, r2, #31
 80088ac:	d527      	bpl.n	80088fe <__sflush_r+0xb2>
 80088ae:	2200      	movs	r2, #0
 80088b0:	6062      	str	r2, [r4, #4]
 80088b2:	04d9      	lsls	r1, r3, #19
 80088b4:	6922      	ldr	r2, [r4, #16]
 80088b6:	6022      	str	r2, [r4, #0]
 80088b8:	d504      	bpl.n	80088c4 <__sflush_r+0x78>
 80088ba:	1c42      	adds	r2, r0, #1
 80088bc:	d101      	bne.n	80088c2 <__sflush_r+0x76>
 80088be:	682b      	ldr	r3, [r5, #0]
 80088c0:	b903      	cbnz	r3, 80088c4 <__sflush_r+0x78>
 80088c2:	6560      	str	r0, [r4, #84]	@ 0x54
 80088c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80088c6:	602f      	str	r7, [r5, #0]
 80088c8:	b1b9      	cbz	r1, 80088fa <__sflush_r+0xae>
 80088ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80088ce:	4299      	cmp	r1, r3
 80088d0:	d002      	beq.n	80088d8 <__sflush_r+0x8c>
 80088d2:	4628      	mov	r0, r5
 80088d4:	f7ff f9e8 	bl	8007ca8 <_free_r>
 80088d8:	2300      	movs	r3, #0
 80088da:	6363      	str	r3, [r4, #52]	@ 0x34
 80088dc:	e00d      	b.n	80088fa <__sflush_r+0xae>
 80088de:	2301      	movs	r3, #1
 80088e0:	4628      	mov	r0, r5
 80088e2:	47b0      	blx	r6
 80088e4:	4602      	mov	r2, r0
 80088e6:	1c50      	adds	r0, r2, #1
 80088e8:	d1c9      	bne.n	800887e <__sflush_r+0x32>
 80088ea:	682b      	ldr	r3, [r5, #0]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d0c6      	beq.n	800887e <__sflush_r+0x32>
 80088f0:	2b1d      	cmp	r3, #29
 80088f2:	d001      	beq.n	80088f8 <__sflush_r+0xac>
 80088f4:	2b16      	cmp	r3, #22
 80088f6:	d11e      	bne.n	8008936 <__sflush_r+0xea>
 80088f8:	602f      	str	r7, [r5, #0]
 80088fa:	2000      	movs	r0, #0
 80088fc:	e022      	b.n	8008944 <__sflush_r+0xf8>
 80088fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008902:	b21b      	sxth	r3, r3
 8008904:	e01b      	b.n	800893e <__sflush_r+0xf2>
 8008906:	690f      	ldr	r7, [r1, #16]
 8008908:	2f00      	cmp	r7, #0
 800890a:	d0f6      	beq.n	80088fa <__sflush_r+0xae>
 800890c:	0793      	lsls	r3, r2, #30
 800890e:	680e      	ldr	r6, [r1, #0]
 8008910:	bf08      	it	eq
 8008912:	694b      	ldreq	r3, [r1, #20]
 8008914:	600f      	str	r7, [r1, #0]
 8008916:	bf18      	it	ne
 8008918:	2300      	movne	r3, #0
 800891a:	eba6 0807 	sub.w	r8, r6, r7
 800891e:	608b      	str	r3, [r1, #8]
 8008920:	f1b8 0f00 	cmp.w	r8, #0
 8008924:	dde9      	ble.n	80088fa <__sflush_r+0xae>
 8008926:	6a21      	ldr	r1, [r4, #32]
 8008928:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800892a:	4643      	mov	r3, r8
 800892c:	463a      	mov	r2, r7
 800892e:	4628      	mov	r0, r5
 8008930:	47b0      	blx	r6
 8008932:	2800      	cmp	r0, #0
 8008934:	dc08      	bgt.n	8008948 <__sflush_r+0xfc>
 8008936:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800893a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800893e:	81a3      	strh	r3, [r4, #12]
 8008940:	f04f 30ff 	mov.w	r0, #4294967295
 8008944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008948:	4407      	add	r7, r0
 800894a:	eba8 0800 	sub.w	r8, r8, r0
 800894e:	e7e7      	b.n	8008920 <__sflush_r+0xd4>
 8008950:	20400001 	.word	0x20400001

08008954 <_fflush_r>:
 8008954:	b538      	push	{r3, r4, r5, lr}
 8008956:	690b      	ldr	r3, [r1, #16]
 8008958:	4605      	mov	r5, r0
 800895a:	460c      	mov	r4, r1
 800895c:	b913      	cbnz	r3, 8008964 <_fflush_r+0x10>
 800895e:	2500      	movs	r5, #0
 8008960:	4628      	mov	r0, r5
 8008962:	bd38      	pop	{r3, r4, r5, pc}
 8008964:	b118      	cbz	r0, 800896e <_fflush_r+0x1a>
 8008966:	6a03      	ldr	r3, [r0, #32]
 8008968:	b90b      	cbnz	r3, 800896e <_fflush_r+0x1a>
 800896a:	f7fe fa09 	bl	8006d80 <__sinit>
 800896e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d0f3      	beq.n	800895e <_fflush_r+0xa>
 8008976:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008978:	07d0      	lsls	r0, r2, #31
 800897a:	d404      	bmi.n	8008986 <_fflush_r+0x32>
 800897c:	0599      	lsls	r1, r3, #22
 800897e:	d402      	bmi.n	8008986 <_fflush_r+0x32>
 8008980:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008982:	f7fe fb26 	bl	8006fd2 <__retarget_lock_acquire_recursive>
 8008986:	4628      	mov	r0, r5
 8008988:	4621      	mov	r1, r4
 800898a:	f7ff ff5f 	bl	800884c <__sflush_r>
 800898e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008990:	07da      	lsls	r2, r3, #31
 8008992:	4605      	mov	r5, r0
 8008994:	d4e4      	bmi.n	8008960 <_fflush_r+0xc>
 8008996:	89a3      	ldrh	r3, [r4, #12]
 8008998:	059b      	lsls	r3, r3, #22
 800899a:	d4e1      	bmi.n	8008960 <_fflush_r+0xc>
 800899c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800899e:	f7fe fb19 	bl	8006fd4 <__retarget_lock_release_recursive>
 80089a2:	e7dd      	b.n	8008960 <_fflush_r+0xc>

080089a4 <memmove>:
 80089a4:	4288      	cmp	r0, r1
 80089a6:	b510      	push	{r4, lr}
 80089a8:	eb01 0402 	add.w	r4, r1, r2
 80089ac:	d902      	bls.n	80089b4 <memmove+0x10>
 80089ae:	4284      	cmp	r4, r0
 80089b0:	4623      	mov	r3, r4
 80089b2:	d807      	bhi.n	80089c4 <memmove+0x20>
 80089b4:	1e43      	subs	r3, r0, #1
 80089b6:	42a1      	cmp	r1, r4
 80089b8:	d008      	beq.n	80089cc <memmove+0x28>
 80089ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80089be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80089c2:	e7f8      	b.n	80089b6 <memmove+0x12>
 80089c4:	4402      	add	r2, r0
 80089c6:	4601      	mov	r1, r0
 80089c8:	428a      	cmp	r2, r1
 80089ca:	d100      	bne.n	80089ce <memmove+0x2a>
 80089cc:	bd10      	pop	{r4, pc}
 80089ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80089d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80089d6:	e7f7      	b.n	80089c8 <memmove+0x24>

080089d8 <_sbrk_r>:
 80089d8:	b538      	push	{r3, r4, r5, lr}
 80089da:	4d06      	ldr	r5, [pc, #24]	@ (80089f4 <_sbrk_r+0x1c>)
 80089dc:	2300      	movs	r3, #0
 80089de:	4604      	mov	r4, r0
 80089e0:	4608      	mov	r0, r1
 80089e2:	602b      	str	r3, [r5, #0]
 80089e4:	f7fa f83e 	bl	8002a64 <_sbrk>
 80089e8:	1c43      	adds	r3, r0, #1
 80089ea:	d102      	bne.n	80089f2 <_sbrk_r+0x1a>
 80089ec:	682b      	ldr	r3, [r5, #0]
 80089ee:	b103      	cbz	r3, 80089f2 <_sbrk_r+0x1a>
 80089f0:	6023      	str	r3, [r4, #0]
 80089f2:	bd38      	pop	{r3, r4, r5, pc}
 80089f4:	20001274 	.word	0x20001274

080089f8 <__assert_func>:
 80089f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80089fa:	4614      	mov	r4, r2
 80089fc:	461a      	mov	r2, r3
 80089fe:	4b09      	ldr	r3, [pc, #36]	@ (8008a24 <__assert_func+0x2c>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	4605      	mov	r5, r0
 8008a04:	68d8      	ldr	r0, [r3, #12]
 8008a06:	b14c      	cbz	r4, 8008a1c <__assert_func+0x24>
 8008a08:	4b07      	ldr	r3, [pc, #28]	@ (8008a28 <__assert_func+0x30>)
 8008a0a:	9100      	str	r1, [sp, #0]
 8008a0c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008a10:	4906      	ldr	r1, [pc, #24]	@ (8008a2c <__assert_func+0x34>)
 8008a12:	462b      	mov	r3, r5
 8008a14:	f000 f870 	bl	8008af8 <fiprintf>
 8008a18:	f000 f880 	bl	8008b1c <abort>
 8008a1c:	4b04      	ldr	r3, [pc, #16]	@ (8008a30 <__assert_func+0x38>)
 8008a1e:	461c      	mov	r4, r3
 8008a20:	e7f3      	b.n	8008a0a <__assert_func+0x12>
 8008a22:	bf00      	nop
 8008a24:	20000018 	.word	0x20000018
 8008a28:	08009d49 	.word	0x08009d49
 8008a2c:	08009d56 	.word	0x08009d56
 8008a30:	08009d84 	.word	0x08009d84

08008a34 <_calloc_r>:
 8008a34:	b570      	push	{r4, r5, r6, lr}
 8008a36:	fba1 5402 	umull	r5, r4, r1, r2
 8008a3a:	b934      	cbnz	r4, 8008a4a <_calloc_r+0x16>
 8008a3c:	4629      	mov	r1, r5
 8008a3e:	f7ff f9a7 	bl	8007d90 <_malloc_r>
 8008a42:	4606      	mov	r6, r0
 8008a44:	b928      	cbnz	r0, 8008a52 <_calloc_r+0x1e>
 8008a46:	4630      	mov	r0, r6
 8008a48:	bd70      	pop	{r4, r5, r6, pc}
 8008a4a:	220c      	movs	r2, #12
 8008a4c:	6002      	str	r2, [r0, #0]
 8008a4e:	2600      	movs	r6, #0
 8008a50:	e7f9      	b.n	8008a46 <_calloc_r+0x12>
 8008a52:	462a      	mov	r2, r5
 8008a54:	4621      	mov	r1, r4
 8008a56:	f7fe fa3e 	bl	8006ed6 <memset>
 8008a5a:	e7f4      	b.n	8008a46 <_calloc_r+0x12>

08008a5c <__ascii_mbtowc>:
 8008a5c:	b082      	sub	sp, #8
 8008a5e:	b901      	cbnz	r1, 8008a62 <__ascii_mbtowc+0x6>
 8008a60:	a901      	add	r1, sp, #4
 8008a62:	b142      	cbz	r2, 8008a76 <__ascii_mbtowc+0x1a>
 8008a64:	b14b      	cbz	r3, 8008a7a <__ascii_mbtowc+0x1e>
 8008a66:	7813      	ldrb	r3, [r2, #0]
 8008a68:	600b      	str	r3, [r1, #0]
 8008a6a:	7812      	ldrb	r2, [r2, #0]
 8008a6c:	1e10      	subs	r0, r2, #0
 8008a6e:	bf18      	it	ne
 8008a70:	2001      	movne	r0, #1
 8008a72:	b002      	add	sp, #8
 8008a74:	4770      	bx	lr
 8008a76:	4610      	mov	r0, r2
 8008a78:	e7fb      	b.n	8008a72 <__ascii_mbtowc+0x16>
 8008a7a:	f06f 0001 	mvn.w	r0, #1
 8008a7e:	e7f8      	b.n	8008a72 <__ascii_mbtowc+0x16>

08008a80 <_realloc_r>:
 8008a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a84:	4607      	mov	r7, r0
 8008a86:	4614      	mov	r4, r2
 8008a88:	460d      	mov	r5, r1
 8008a8a:	b921      	cbnz	r1, 8008a96 <_realloc_r+0x16>
 8008a8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a90:	4611      	mov	r1, r2
 8008a92:	f7ff b97d 	b.w	8007d90 <_malloc_r>
 8008a96:	b92a      	cbnz	r2, 8008aa4 <_realloc_r+0x24>
 8008a98:	f7ff f906 	bl	8007ca8 <_free_r>
 8008a9c:	4625      	mov	r5, r4
 8008a9e:	4628      	mov	r0, r5
 8008aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008aa4:	f000 f841 	bl	8008b2a <_malloc_usable_size_r>
 8008aa8:	4284      	cmp	r4, r0
 8008aaa:	4606      	mov	r6, r0
 8008aac:	d802      	bhi.n	8008ab4 <_realloc_r+0x34>
 8008aae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008ab2:	d8f4      	bhi.n	8008a9e <_realloc_r+0x1e>
 8008ab4:	4621      	mov	r1, r4
 8008ab6:	4638      	mov	r0, r7
 8008ab8:	f7ff f96a 	bl	8007d90 <_malloc_r>
 8008abc:	4680      	mov	r8, r0
 8008abe:	b908      	cbnz	r0, 8008ac4 <_realloc_r+0x44>
 8008ac0:	4645      	mov	r5, r8
 8008ac2:	e7ec      	b.n	8008a9e <_realloc_r+0x1e>
 8008ac4:	42b4      	cmp	r4, r6
 8008ac6:	4622      	mov	r2, r4
 8008ac8:	4629      	mov	r1, r5
 8008aca:	bf28      	it	cs
 8008acc:	4632      	movcs	r2, r6
 8008ace:	f7fe fa82 	bl	8006fd6 <memcpy>
 8008ad2:	4629      	mov	r1, r5
 8008ad4:	4638      	mov	r0, r7
 8008ad6:	f7ff f8e7 	bl	8007ca8 <_free_r>
 8008ada:	e7f1      	b.n	8008ac0 <_realloc_r+0x40>

08008adc <__ascii_wctomb>:
 8008adc:	4603      	mov	r3, r0
 8008ade:	4608      	mov	r0, r1
 8008ae0:	b141      	cbz	r1, 8008af4 <__ascii_wctomb+0x18>
 8008ae2:	2aff      	cmp	r2, #255	@ 0xff
 8008ae4:	d904      	bls.n	8008af0 <__ascii_wctomb+0x14>
 8008ae6:	228a      	movs	r2, #138	@ 0x8a
 8008ae8:	601a      	str	r2, [r3, #0]
 8008aea:	f04f 30ff 	mov.w	r0, #4294967295
 8008aee:	4770      	bx	lr
 8008af0:	700a      	strb	r2, [r1, #0]
 8008af2:	2001      	movs	r0, #1
 8008af4:	4770      	bx	lr
	...

08008af8 <fiprintf>:
 8008af8:	b40e      	push	{r1, r2, r3}
 8008afa:	b503      	push	{r0, r1, lr}
 8008afc:	4601      	mov	r1, r0
 8008afe:	ab03      	add	r3, sp, #12
 8008b00:	4805      	ldr	r0, [pc, #20]	@ (8008b18 <fiprintf+0x20>)
 8008b02:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b06:	6800      	ldr	r0, [r0, #0]
 8008b08:	9301      	str	r3, [sp, #4]
 8008b0a:	f000 f83f 	bl	8008b8c <_vfiprintf_r>
 8008b0e:	b002      	add	sp, #8
 8008b10:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b14:	b003      	add	sp, #12
 8008b16:	4770      	bx	lr
 8008b18:	20000018 	.word	0x20000018

08008b1c <abort>:
 8008b1c:	b508      	push	{r3, lr}
 8008b1e:	2006      	movs	r0, #6
 8008b20:	f000 fa08 	bl	8008f34 <raise>
 8008b24:	2001      	movs	r0, #1
 8008b26:	f7f9 ff25 	bl	8002974 <_exit>

08008b2a <_malloc_usable_size_r>:
 8008b2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b2e:	1f18      	subs	r0, r3, #4
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	bfbc      	itt	lt
 8008b34:	580b      	ldrlt	r3, [r1, r0]
 8008b36:	18c0      	addlt	r0, r0, r3
 8008b38:	4770      	bx	lr

08008b3a <__sfputc_r>:
 8008b3a:	6893      	ldr	r3, [r2, #8]
 8008b3c:	3b01      	subs	r3, #1
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	b410      	push	{r4}
 8008b42:	6093      	str	r3, [r2, #8]
 8008b44:	da08      	bge.n	8008b58 <__sfputc_r+0x1e>
 8008b46:	6994      	ldr	r4, [r2, #24]
 8008b48:	42a3      	cmp	r3, r4
 8008b4a:	db01      	blt.n	8008b50 <__sfputc_r+0x16>
 8008b4c:	290a      	cmp	r1, #10
 8008b4e:	d103      	bne.n	8008b58 <__sfputc_r+0x1e>
 8008b50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b54:	f000 b932 	b.w	8008dbc <__swbuf_r>
 8008b58:	6813      	ldr	r3, [r2, #0]
 8008b5a:	1c58      	adds	r0, r3, #1
 8008b5c:	6010      	str	r0, [r2, #0]
 8008b5e:	7019      	strb	r1, [r3, #0]
 8008b60:	4608      	mov	r0, r1
 8008b62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b66:	4770      	bx	lr

08008b68 <__sfputs_r>:
 8008b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b6a:	4606      	mov	r6, r0
 8008b6c:	460f      	mov	r7, r1
 8008b6e:	4614      	mov	r4, r2
 8008b70:	18d5      	adds	r5, r2, r3
 8008b72:	42ac      	cmp	r4, r5
 8008b74:	d101      	bne.n	8008b7a <__sfputs_r+0x12>
 8008b76:	2000      	movs	r0, #0
 8008b78:	e007      	b.n	8008b8a <__sfputs_r+0x22>
 8008b7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b7e:	463a      	mov	r2, r7
 8008b80:	4630      	mov	r0, r6
 8008b82:	f7ff ffda 	bl	8008b3a <__sfputc_r>
 8008b86:	1c43      	adds	r3, r0, #1
 8008b88:	d1f3      	bne.n	8008b72 <__sfputs_r+0xa>
 8008b8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008b8c <_vfiprintf_r>:
 8008b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b90:	460d      	mov	r5, r1
 8008b92:	b09d      	sub	sp, #116	@ 0x74
 8008b94:	4614      	mov	r4, r2
 8008b96:	4698      	mov	r8, r3
 8008b98:	4606      	mov	r6, r0
 8008b9a:	b118      	cbz	r0, 8008ba4 <_vfiprintf_r+0x18>
 8008b9c:	6a03      	ldr	r3, [r0, #32]
 8008b9e:	b90b      	cbnz	r3, 8008ba4 <_vfiprintf_r+0x18>
 8008ba0:	f7fe f8ee 	bl	8006d80 <__sinit>
 8008ba4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008ba6:	07d9      	lsls	r1, r3, #31
 8008ba8:	d405      	bmi.n	8008bb6 <_vfiprintf_r+0x2a>
 8008baa:	89ab      	ldrh	r3, [r5, #12]
 8008bac:	059a      	lsls	r2, r3, #22
 8008bae:	d402      	bmi.n	8008bb6 <_vfiprintf_r+0x2a>
 8008bb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008bb2:	f7fe fa0e 	bl	8006fd2 <__retarget_lock_acquire_recursive>
 8008bb6:	89ab      	ldrh	r3, [r5, #12]
 8008bb8:	071b      	lsls	r3, r3, #28
 8008bba:	d501      	bpl.n	8008bc0 <_vfiprintf_r+0x34>
 8008bbc:	692b      	ldr	r3, [r5, #16]
 8008bbe:	b99b      	cbnz	r3, 8008be8 <_vfiprintf_r+0x5c>
 8008bc0:	4629      	mov	r1, r5
 8008bc2:	4630      	mov	r0, r6
 8008bc4:	f000 f938 	bl	8008e38 <__swsetup_r>
 8008bc8:	b170      	cbz	r0, 8008be8 <_vfiprintf_r+0x5c>
 8008bca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008bcc:	07dc      	lsls	r4, r3, #31
 8008bce:	d504      	bpl.n	8008bda <_vfiprintf_r+0x4e>
 8008bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8008bd4:	b01d      	add	sp, #116	@ 0x74
 8008bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bda:	89ab      	ldrh	r3, [r5, #12]
 8008bdc:	0598      	lsls	r0, r3, #22
 8008bde:	d4f7      	bmi.n	8008bd0 <_vfiprintf_r+0x44>
 8008be0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008be2:	f7fe f9f7 	bl	8006fd4 <__retarget_lock_release_recursive>
 8008be6:	e7f3      	b.n	8008bd0 <_vfiprintf_r+0x44>
 8008be8:	2300      	movs	r3, #0
 8008bea:	9309      	str	r3, [sp, #36]	@ 0x24
 8008bec:	2320      	movs	r3, #32
 8008bee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008bf2:	f8cd 800c 	str.w	r8, [sp, #12]
 8008bf6:	2330      	movs	r3, #48	@ 0x30
 8008bf8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008da8 <_vfiprintf_r+0x21c>
 8008bfc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008c00:	f04f 0901 	mov.w	r9, #1
 8008c04:	4623      	mov	r3, r4
 8008c06:	469a      	mov	sl, r3
 8008c08:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c0c:	b10a      	cbz	r2, 8008c12 <_vfiprintf_r+0x86>
 8008c0e:	2a25      	cmp	r2, #37	@ 0x25
 8008c10:	d1f9      	bne.n	8008c06 <_vfiprintf_r+0x7a>
 8008c12:	ebba 0b04 	subs.w	fp, sl, r4
 8008c16:	d00b      	beq.n	8008c30 <_vfiprintf_r+0xa4>
 8008c18:	465b      	mov	r3, fp
 8008c1a:	4622      	mov	r2, r4
 8008c1c:	4629      	mov	r1, r5
 8008c1e:	4630      	mov	r0, r6
 8008c20:	f7ff ffa2 	bl	8008b68 <__sfputs_r>
 8008c24:	3001      	adds	r0, #1
 8008c26:	f000 80a7 	beq.w	8008d78 <_vfiprintf_r+0x1ec>
 8008c2a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008c2c:	445a      	add	r2, fp
 8008c2e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008c30:	f89a 3000 	ldrb.w	r3, [sl]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	f000 809f 	beq.w	8008d78 <_vfiprintf_r+0x1ec>
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8008c40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c44:	f10a 0a01 	add.w	sl, sl, #1
 8008c48:	9304      	str	r3, [sp, #16]
 8008c4a:	9307      	str	r3, [sp, #28]
 8008c4c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008c50:	931a      	str	r3, [sp, #104]	@ 0x68
 8008c52:	4654      	mov	r4, sl
 8008c54:	2205      	movs	r2, #5
 8008c56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c5a:	4853      	ldr	r0, [pc, #332]	@ (8008da8 <_vfiprintf_r+0x21c>)
 8008c5c:	f7f7 fac0 	bl	80001e0 <memchr>
 8008c60:	9a04      	ldr	r2, [sp, #16]
 8008c62:	b9d8      	cbnz	r0, 8008c9c <_vfiprintf_r+0x110>
 8008c64:	06d1      	lsls	r1, r2, #27
 8008c66:	bf44      	itt	mi
 8008c68:	2320      	movmi	r3, #32
 8008c6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008c6e:	0713      	lsls	r3, r2, #28
 8008c70:	bf44      	itt	mi
 8008c72:	232b      	movmi	r3, #43	@ 0x2b
 8008c74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008c78:	f89a 3000 	ldrb.w	r3, [sl]
 8008c7c:	2b2a      	cmp	r3, #42	@ 0x2a
 8008c7e:	d015      	beq.n	8008cac <_vfiprintf_r+0x120>
 8008c80:	9a07      	ldr	r2, [sp, #28]
 8008c82:	4654      	mov	r4, sl
 8008c84:	2000      	movs	r0, #0
 8008c86:	f04f 0c0a 	mov.w	ip, #10
 8008c8a:	4621      	mov	r1, r4
 8008c8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c90:	3b30      	subs	r3, #48	@ 0x30
 8008c92:	2b09      	cmp	r3, #9
 8008c94:	d94b      	bls.n	8008d2e <_vfiprintf_r+0x1a2>
 8008c96:	b1b0      	cbz	r0, 8008cc6 <_vfiprintf_r+0x13a>
 8008c98:	9207      	str	r2, [sp, #28]
 8008c9a:	e014      	b.n	8008cc6 <_vfiprintf_r+0x13a>
 8008c9c:	eba0 0308 	sub.w	r3, r0, r8
 8008ca0:	fa09 f303 	lsl.w	r3, r9, r3
 8008ca4:	4313      	orrs	r3, r2
 8008ca6:	9304      	str	r3, [sp, #16]
 8008ca8:	46a2      	mov	sl, r4
 8008caa:	e7d2      	b.n	8008c52 <_vfiprintf_r+0xc6>
 8008cac:	9b03      	ldr	r3, [sp, #12]
 8008cae:	1d19      	adds	r1, r3, #4
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	9103      	str	r1, [sp, #12]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	bfbb      	ittet	lt
 8008cb8:	425b      	neglt	r3, r3
 8008cba:	f042 0202 	orrlt.w	r2, r2, #2
 8008cbe:	9307      	strge	r3, [sp, #28]
 8008cc0:	9307      	strlt	r3, [sp, #28]
 8008cc2:	bfb8      	it	lt
 8008cc4:	9204      	strlt	r2, [sp, #16]
 8008cc6:	7823      	ldrb	r3, [r4, #0]
 8008cc8:	2b2e      	cmp	r3, #46	@ 0x2e
 8008cca:	d10a      	bne.n	8008ce2 <_vfiprintf_r+0x156>
 8008ccc:	7863      	ldrb	r3, [r4, #1]
 8008cce:	2b2a      	cmp	r3, #42	@ 0x2a
 8008cd0:	d132      	bne.n	8008d38 <_vfiprintf_r+0x1ac>
 8008cd2:	9b03      	ldr	r3, [sp, #12]
 8008cd4:	1d1a      	adds	r2, r3, #4
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	9203      	str	r2, [sp, #12]
 8008cda:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008cde:	3402      	adds	r4, #2
 8008ce0:	9305      	str	r3, [sp, #20]
 8008ce2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008db8 <_vfiprintf_r+0x22c>
 8008ce6:	7821      	ldrb	r1, [r4, #0]
 8008ce8:	2203      	movs	r2, #3
 8008cea:	4650      	mov	r0, sl
 8008cec:	f7f7 fa78 	bl	80001e0 <memchr>
 8008cf0:	b138      	cbz	r0, 8008d02 <_vfiprintf_r+0x176>
 8008cf2:	9b04      	ldr	r3, [sp, #16]
 8008cf4:	eba0 000a 	sub.w	r0, r0, sl
 8008cf8:	2240      	movs	r2, #64	@ 0x40
 8008cfa:	4082      	lsls	r2, r0
 8008cfc:	4313      	orrs	r3, r2
 8008cfe:	3401      	adds	r4, #1
 8008d00:	9304      	str	r3, [sp, #16]
 8008d02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d06:	4829      	ldr	r0, [pc, #164]	@ (8008dac <_vfiprintf_r+0x220>)
 8008d08:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008d0c:	2206      	movs	r2, #6
 8008d0e:	f7f7 fa67 	bl	80001e0 <memchr>
 8008d12:	2800      	cmp	r0, #0
 8008d14:	d03f      	beq.n	8008d96 <_vfiprintf_r+0x20a>
 8008d16:	4b26      	ldr	r3, [pc, #152]	@ (8008db0 <_vfiprintf_r+0x224>)
 8008d18:	bb1b      	cbnz	r3, 8008d62 <_vfiprintf_r+0x1d6>
 8008d1a:	9b03      	ldr	r3, [sp, #12]
 8008d1c:	3307      	adds	r3, #7
 8008d1e:	f023 0307 	bic.w	r3, r3, #7
 8008d22:	3308      	adds	r3, #8
 8008d24:	9303      	str	r3, [sp, #12]
 8008d26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d28:	443b      	add	r3, r7
 8008d2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d2c:	e76a      	b.n	8008c04 <_vfiprintf_r+0x78>
 8008d2e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d32:	460c      	mov	r4, r1
 8008d34:	2001      	movs	r0, #1
 8008d36:	e7a8      	b.n	8008c8a <_vfiprintf_r+0xfe>
 8008d38:	2300      	movs	r3, #0
 8008d3a:	3401      	adds	r4, #1
 8008d3c:	9305      	str	r3, [sp, #20]
 8008d3e:	4619      	mov	r1, r3
 8008d40:	f04f 0c0a 	mov.w	ip, #10
 8008d44:	4620      	mov	r0, r4
 8008d46:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d4a:	3a30      	subs	r2, #48	@ 0x30
 8008d4c:	2a09      	cmp	r2, #9
 8008d4e:	d903      	bls.n	8008d58 <_vfiprintf_r+0x1cc>
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d0c6      	beq.n	8008ce2 <_vfiprintf_r+0x156>
 8008d54:	9105      	str	r1, [sp, #20]
 8008d56:	e7c4      	b.n	8008ce2 <_vfiprintf_r+0x156>
 8008d58:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d5c:	4604      	mov	r4, r0
 8008d5e:	2301      	movs	r3, #1
 8008d60:	e7f0      	b.n	8008d44 <_vfiprintf_r+0x1b8>
 8008d62:	ab03      	add	r3, sp, #12
 8008d64:	9300      	str	r3, [sp, #0]
 8008d66:	462a      	mov	r2, r5
 8008d68:	4b12      	ldr	r3, [pc, #72]	@ (8008db4 <_vfiprintf_r+0x228>)
 8008d6a:	a904      	add	r1, sp, #16
 8008d6c:	4630      	mov	r0, r6
 8008d6e:	f7fd fbc5 	bl	80064fc <_printf_float>
 8008d72:	4607      	mov	r7, r0
 8008d74:	1c78      	adds	r0, r7, #1
 8008d76:	d1d6      	bne.n	8008d26 <_vfiprintf_r+0x19a>
 8008d78:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008d7a:	07d9      	lsls	r1, r3, #31
 8008d7c:	d405      	bmi.n	8008d8a <_vfiprintf_r+0x1fe>
 8008d7e:	89ab      	ldrh	r3, [r5, #12]
 8008d80:	059a      	lsls	r2, r3, #22
 8008d82:	d402      	bmi.n	8008d8a <_vfiprintf_r+0x1fe>
 8008d84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008d86:	f7fe f925 	bl	8006fd4 <__retarget_lock_release_recursive>
 8008d8a:	89ab      	ldrh	r3, [r5, #12]
 8008d8c:	065b      	lsls	r3, r3, #25
 8008d8e:	f53f af1f 	bmi.w	8008bd0 <_vfiprintf_r+0x44>
 8008d92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008d94:	e71e      	b.n	8008bd4 <_vfiprintf_r+0x48>
 8008d96:	ab03      	add	r3, sp, #12
 8008d98:	9300      	str	r3, [sp, #0]
 8008d9a:	462a      	mov	r2, r5
 8008d9c:	4b05      	ldr	r3, [pc, #20]	@ (8008db4 <_vfiprintf_r+0x228>)
 8008d9e:	a904      	add	r1, sp, #16
 8008da0:	4630      	mov	r0, r6
 8008da2:	f7fd fe43 	bl	8006a2c <_printf_i>
 8008da6:	e7e4      	b.n	8008d72 <_vfiprintf_r+0x1e6>
 8008da8:	08009d2e 	.word	0x08009d2e
 8008dac:	08009d38 	.word	0x08009d38
 8008db0:	080064fd 	.word	0x080064fd
 8008db4:	08008b69 	.word	0x08008b69
 8008db8:	08009d34 	.word	0x08009d34

08008dbc <__swbuf_r>:
 8008dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dbe:	460e      	mov	r6, r1
 8008dc0:	4614      	mov	r4, r2
 8008dc2:	4605      	mov	r5, r0
 8008dc4:	b118      	cbz	r0, 8008dce <__swbuf_r+0x12>
 8008dc6:	6a03      	ldr	r3, [r0, #32]
 8008dc8:	b90b      	cbnz	r3, 8008dce <__swbuf_r+0x12>
 8008dca:	f7fd ffd9 	bl	8006d80 <__sinit>
 8008dce:	69a3      	ldr	r3, [r4, #24]
 8008dd0:	60a3      	str	r3, [r4, #8]
 8008dd2:	89a3      	ldrh	r3, [r4, #12]
 8008dd4:	071a      	lsls	r2, r3, #28
 8008dd6:	d501      	bpl.n	8008ddc <__swbuf_r+0x20>
 8008dd8:	6923      	ldr	r3, [r4, #16]
 8008dda:	b943      	cbnz	r3, 8008dee <__swbuf_r+0x32>
 8008ddc:	4621      	mov	r1, r4
 8008dde:	4628      	mov	r0, r5
 8008de0:	f000 f82a 	bl	8008e38 <__swsetup_r>
 8008de4:	b118      	cbz	r0, 8008dee <__swbuf_r+0x32>
 8008de6:	f04f 37ff 	mov.w	r7, #4294967295
 8008dea:	4638      	mov	r0, r7
 8008dec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008dee:	6823      	ldr	r3, [r4, #0]
 8008df0:	6922      	ldr	r2, [r4, #16]
 8008df2:	1a98      	subs	r0, r3, r2
 8008df4:	6963      	ldr	r3, [r4, #20]
 8008df6:	b2f6      	uxtb	r6, r6
 8008df8:	4283      	cmp	r3, r0
 8008dfa:	4637      	mov	r7, r6
 8008dfc:	dc05      	bgt.n	8008e0a <__swbuf_r+0x4e>
 8008dfe:	4621      	mov	r1, r4
 8008e00:	4628      	mov	r0, r5
 8008e02:	f7ff fda7 	bl	8008954 <_fflush_r>
 8008e06:	2800      	cmp	r0, #0
 8008e08:	d1ed      	bne.n	8008de6 <__swbuf_r+0x2a>
 8008e0a:	68a3      	ldr	r3, [r4, #8]
 8008e0c:	3b01      	subs	r3, #1
 8008e0e:	60a3      	str	r3, [r4, #8]
 8008e10:	6823      	ldr	r3, [r4, #0]
 8008e12:	1c5a      	adds	r2, r3, #1
 8008e14:	6022      	str	r2, [r4, #0]
 8008e16:	701e      	strb	r6, [r3, #0]
 8008e18:	6962      	ldr	r2, [r4, #20]
 8008e1a:	1c43      	adds	r3, r0, #1
 8008e1c:	429a      	cmp	r2, r3
 8008e1e:	d004      	beq.n	8008e2a <__swbuf_r+0x6e>
 8008e20:	89a3      	ldrh	r3, [r4, #12]
 8008e22:	07db      	lsls	r3, r3, #31
 8008e24:	d5e1      	bpl.n	8008dea <__swbuf_r+0x2e>
 8008e26:	2e0a      	cmp	r6, #10
 8008e28:	d1df      	bne.n	8008dea <__swbuf_r+0x2e>
 8008e2a:	4621      	mov	r1, r4
 8008e2c:	4628      	mov	r0, r5
 8008e2e:	f7ff fd91 	bl	8008954 <_fflush_r>
 8008e32:	2800      	cmp	r0, #0
 8008e34:	d0d9      	beq.n	8008dea <__swbuf_r+0x2e>
 8008e36:	e7d6      	b.n	8008de6 <__swbuf_r+0x2a>

08008e38 <__swsetup_r>:
 8008e38:	b538      	push	{r3, r4, r5, lr}
 8008e3a:	4b29      	ldr	r3, [pc, #164]	@ (8008ee0 <__swsetup_r+0xa8>)
 8008e3c:	4605      	mov	r5, r0
 8008e3e:	6818      	ldr	r0, [r3, #0]
 8008e40:	460c      	mov	r4, r1
 8008e42:	b118      	cbz	r0, 8008e4c <__swsetup_r+0x14>
 8008e44:	6a03      	ldr	r3, [r0, #32]
 8008e46:	b90b      	cbnz	r3, 8008e4c <__swsetup_r+0x14>
 8008e48:	f7fd ff9a 	bl	8006d80 <__sinit>
 8008e4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e50:	0719      	lsls	r1, r3, #28
 8008e52:	d422      	bmi.n	8008e9a <__swsetup_r+0x62>
 8008e54:	06da      	lsls	r2, r3, #27
 8008e56:	d407      	bmi.n	8008e68 <__swsetup_r+0x30>
 8008e58:	2209      	movs	r2, #9
 8008e5a:	602a      	str	r2, [r5, #0]
 8008e5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e60:	81a3      	strh	r3, [r4, #12]
 8008e62:	f04f 30ff 	mov.w	r0, #4294967295
 8008e66:	e033      	b.n	8008ed0 <__swsetup_r+0x98>
 8008e68:	0758      	lsls	r0, r3, #29
 8008e6a:	d512      	bpl.n	8008e92 <__swsetup_r+0x5a>
 8008e6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008e6e:	b141      	cbz	r1, 8008e82 <__swsetup_r+0x4a>
 8008e70:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008e74:	4299      	cmp	r1, r3
 8008e76:	d002      	beq.n	8008e7e <__swsetup_r+0x46>
 8008e78:	4628      	mov	r0, r5
 8008e7a:	f7fe ff15 	bl	8007ca8 <_free_r>
 8008e7e:	2300      	movs	r3, #0
 8008e80:	6363      	str	r3, [r4, #52]	@ 0x34
 8008e82:	89a3      	ldrh	r3, [r4, #12]
 8008e84:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008e88:	81a3      	strh	r3, [r4, #12]
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	6063      	str	r3, [r4, #4]
 8008e8e:	6923      	ldr	r3, [r4, #16]
 8008e90:	6023      	str	r3, [r4, #0]
 8008e92:	89a3      	ldrh	r3, [r4, #12]
 8008e94:	f043 0308 	orr.w	r3, r3, #8
 8008e98:	81a3      	strh	r3, [r4, #12]
 8008e9a:	6923      	ldr	r3, [r4, #16]
 8008e9c:	b94b      	cbnz	r3, 8008eb2 <__swsetup_r+0x7a>
 8008e9e:	89a3      	ldrh	r3, [r4, #12]
 8008ea0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008ea4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ea8:	d003      	beq.n	8008eb2 <__swsetup_r+0x7a>
 8008eaa:	4621      	mov	r1, r4
 8008eac:	4628      	mov	r0, r5
 8008eae:	f000 f883 	bl	8008fb8 <__smakebuf_r>
 8008eb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008eb6:	f013 0201 	ands.w	r2, r3, #1
 8008eba:	d00a      	beq.n	8008ed2 <__swsetup_r+0x9a>
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	60a2      	str	r2, [r4, #8]
 8008ec0:	6962      	ldr	r2, [r4, #20]
 8008ec2:	4252      	negs	r2, r2
 8008ec4:	61a2      	str	r2, [r4, #24]
 8008ec6:	6922      	ldr	r2, [r4, #16]
 8008ec8:	b942      	cbnz	r2, 8008edc <__swsetup_r+0xa4>
 8008eca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008ece:	d1c5      	bne.n	8008e5c <__swsetup_r+0x24>
 8008ed0:	bd38      	pop	{r3, r4, r5, pc}
 8008ed2:	0799      	lsls	r1, r3, #30
 8008ed4:	bf58      	it	pl
 8008ed6:	6962      	ldrpl	r2, [r4, #20]
 8008ed8:	60a2      	str	r2, [r4, #8]
 8008eda:	e7f4      	b.n	8008ec6 <__swsetup_r+0x8e>
 8008edc:	2000      	movs	r0, #0
 8008ede:	e7f7      	b.n	8008ed0 <__swsetup_r+0x98>
 8008ee0:	20000018 	.word	0x20000018

08008ee4 <_raise_r>:
 8008ee4:	291f      	cmp	r1, #31
 8008ee6:	b538      	push	{r3, r4, r5, lr}
 8008ee8:	4605      	mov	r5, r0
 8008eea:	460c      	mov	r4, r1
 8008eec:	d904      	bls.n	8008ef8 <_raise_r+0x14>
 8008eee:	2316      	movs	r3, #22
 8008ef0:	6003      	str	r3, [r0, #0]
 8008ef2:	f04f 30ff 	mov.w	r0, #4294967295
 8008ef6:	bd38      	pop	{r3, r4, r5, pc}
 8008ef8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008efa:	b112      	cbz	r2, 8008f02 <_raise_r+0x1e>
 8008efc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008f00:	b94b      	cbnz	r3, 8008f16 <_raise_r+0x32>
 8008f02:	4628      	mov	r0, r5
 8008f04:	f000 f830 	bl	8008f68 <_getpid_r>
 8008f08:	4622      	mov	r2, r4
 8008f0a:	4601      	mov	r1, r0
 8008f0c:	4628      	mov	r0, r5
 8008f0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f12:	f000 b817 	b.w	8008f44 <_kill_r>
 8008f16:	2b01      	cmp	r3, #1
 8008f18:	d00a      	beq.n	8008f30 <_raise_r+0x4c>
 8008f1a:	1c59      	adds	r1, r3, #1
 8008f1c:	d103      	bne.n	8008f26 <_raise_r+0x42>
 8008f1e:	2316      	movs	r3, #22
 8008f20:	6003      	str	r3, [r0, #0]
 8008f22:	2001      	movs	r0, #1
 8008f24:	e7e7      	b.n	8008ef6 <_raise_r+0x12>
 8008f26:	2100      	movs	r1, #0
 8008f28:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008f2c:	4620      	mov	r0, r4
 8008f2e:	4798      	blx	r3
 8008f30:	2000      	movs	r0, #0
 8008f32:	e7e0      	b.n	8008ef6 <_raise_r+0x12>

08008f34 <raise>:
 8008f34:	4b02      	ldr	r3, [pc, #8]	@ (8008f40 <raise+0xc>)
 8008f36:	4601      	mov	r1, r0
 8008f38:	6818      	ldr	r0, [r3, #0]
 8008f3a:	f7ff bfd3 	b.w	8008ee4 <_raise_r>
 8008f3e:	bf00      	nop
 8008f40:	20000018 	.word	0x20000018

08008f44 <_kill_r>:
 8008f44:	b538      	push	{r3, r4, r5, lr}
 8008f46:	4d07      	ldr	r5, [pc, #28]	@ (8008f64 <_kill_r+0x20>)
 8008f48:	2300      	movs	r3, #0
 8008f4a:	4604      	mov	r4, r0
 8008f4c:	4608      	mov	r0, r1
 8008f4e:	4611      	mov	r1, r2
 8008f50:	602b      	str	r3, [r5, #0]
 8008f52:	f7f9 fcff 	bl	8002954 <_kill>
 8008f56:	1c43      	adds	r3, r0, #1
 8008f58:	d102      	bne.n	8008f60 <_kill_r+0x1c>
 8008f5a:	682b      	ldr	r3, [r5, #0]
 8008f5c:	b103      	cbz	r3, 8008f60 <_kill_r+0x1c>
 8008f5e:	6023      	str	r3, [r4, #0]
 8008f60:	bd38      	pop	{r3, r4, r5, pc}
 8008f62:	bf00      	nop
 8008f64:	20001274 	.word	0x20001274

08008f68 <_getpid_r>:
 8008f68:	f7f9 bcec 	b.w	8002944 <_getpid>

08008f6c <__swhatbuf_r>:
 8008f6c:	b570      	push	{r4, r5, r6, lr}
 8008f6e:	460c      	mov	r4, r1
 8008f70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f74:	2900      	cmp	r1, #0
 8008f76:	b096      	sub	sp, #88	@ 0x58
 8008f78:	4615      	mov	r5, r2
 8008f7a:	461e      	mov	r6, r3
 8008f7c:	da0d      	bge.n	8008f9a <__swhatbuf_r+0x2e>
 8008f7e:	89a3      	ldrh	r3, [r4, #12]
 8008f80:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008f84:	f04f 0100 	mov.w	r1, #0
 8008f88:	bf14      	ite	ne
 8008f8a:	2340      	movne	r3, #64	@ 0x40
 8008f8c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008f90:	2000      	movs	r0, #0
 8008f92:	6031      	str	r1, [r6, #0]
 8008f94:	602b      	str	r3, [r5, #0]
 8008f96:	b016      	add	sp, #88	@ 0x58
 8008f98:	bd70      	pop	{r4, r5, r6, pc}
 8008f9a:	466a      	mov	r2, sp
 8008f9c:	f000 f848 	bl	8009030 <_fstat_r>
 8008fa0:	2800      	cmp	r0, #0
 8008fa2:	dbec      	blt.n	8008f7e <__swhatbuf_r+0x12>
 8008fa4:	9901      	ldr	r1, [sp, #4]
 8008fa6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008faa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008fae:	4259      	negs	r1, r3
 8008fb0:	4159      	adcs	r1, r3
 8008fb2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008fb6:	e7eb      	b.n	8008f90 <__swhatbuf_r+0x24>

08008fb8 <__smakebuf_r>:
 8008fb8:	898b      	ldrh	r3, [r1, #12]
 8008fba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008fbc:	079d      	lsls	r5, r3, #30
 8008fbe:	4606      	mov	r6, r0
 8008fc0:	460c      	mov	r4, r1
 8008fc2:	d507      	bpl.n	8008fd4 <__smakebuf_r+0x1c>
 8008fc4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008fc8:	6023      	str	r3, [r4, #0]
 8008fca:	6123      	str	r3, [r4, #16]
 8008fcc:	2301      	movs	r3, #1
 8008fce:	6163      	str	r3, [r4, #20]
 8008fd0:	b003      	add	sp, #12
 8008fd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008fd4:	ab01      	add	r3, sp, #4
 8008fd6:	466a      	mov	r2, sp
 8008fd8:	f7ff ffc8 	bl	8008f6c <__swhatbuf_r>
 8008fdc:	9f00      	ldr	r7, [sp, #0]
 8008fde:	4605      	mov	r5, r0
 8008fe0:	4639      	mov	r1, r7
 8008fe2:	4630      	mov	r0, r6
 8008fe4:	f7fe fed4 	bl	8007d90 <_malloc_r>
 8008fe8:	b948      	cbnz	r0, 8008ffe <__smakebuf_r+0x46>
 8008fea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fee:	059a      	lsls	r2, r3, #22
 8008ff0:	d4ee      	bmi.n	8008fd0 <__smakebuf_r+0x18>
 8008ff2:	f023 0303 	bic.w	r3, r3, #3
 8008ff6:	f043 0302 	orr.w	r3, r3, #2
 8008ffa:	81a3      	strh	r3, [r4, #12]
 8008ffc:	e7e2      	b.n	8008fc4 <__smakebuf_r+0xc>
 8008ffe:	89a3      	ldrh	r3, [r4, #12]
 8009000:	6020      	str	r0, [r4, #0]
 8009002:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009006:	81a3      	strh	r3, [r4, #12]
 8009008:	9b01      	ldr	r3, [sp, #4]
 800900a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800900e:	b15b      	cbz	r3, 8009028 <__smakebuf_r+0x70>
 8009010:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009014:	4630      	mov	r0, r6
 8009016:	f000 f81d 	bl	8009054 <_isatty_r>
 800901a:	b128      	cbz	r0, 8009028 <__smakebuf_r+0x70>
 800901c:	89a3      	ldrh	r3, [r4, #12]
 800901e:	f023 0303 	bic.w	r3, r3, #3
 8009022:	f043 0301 	orr.w	r3, r3, #1
 8009026:	81a3      	strh	r3, [r4, #12]
 8009028:	89a3      	ldrh	r3, [r4, #12]
 800902a:	431d      	orrs	r5, r3
 800902c:	81a5      	strh	r5, [r4, #12]
 800902e:	e7cf      	b.n	8008fd0 <__smakebuf_r+0x18>

08009030 <_fstat_r>:
 8009030:	b538      	push	{r3, r4, r5, lr}
 8009032:	4d07      	ldr	r5, [pc, #28]	@ (8009050 <_fstat_r+0x20>)
 8009034:	2300      	movs	r3, #0
 8009036:	4604      	mov	r4, r0
 8009038:	4608      	mov	r0, r1
 800903a:	4611      	mov	r1, r2
 800903c:	602b      	str	r3, [r5, #0]
 800903e:	f7f9 fce9 	bl	8002a14 <_fstat>
 8009042:	1c43      	adds	r3, r0, #1
 8009044:	d102      	bne.n	800904c <_fstat_r+0x1c>
 8009046:	682b      	ldr	r3, [r5, #0]
 8009048:	b103      	cbz	r3, 800904c <_fstat_r+0x1c>
 800904a:	6023      	str	r3, [r4, #0]
 800904c:	bd38      	pop	{r3, r4, r5, pc}
 800904e:	bf00      	nop
 8009050:	20001274 	.word	0x20001274

08009054 <_isatty_r>:
 8009054:	b538      	push	{r3, r4, r5, lr}
 8009056:	4d06      	ldr	r5, [pc, #24]	@ (8009070 <_isatty_r+0x1c>)
 8009058:	2300      	movs	r3, #0
 800905a:	4604      	mov	r4, r0
 800905c:	4608      	mov	r0, r1
 800905e:	602b      	str	r3, [r5, #0]
 8009060:	f7f9 fce8 	bl	8002a34 <_isatty>
 8009064:	1c43      	adds	r3, r0, #1
 8009066:	d102      	bne.n	800906e <_isatty_r+0x1a>
 8009068:	682b      	ldr	r3, [r5, #0]
 800906a:	b103      	cbz	r3, 800906e <_isatty_r+0x1a>
 800906c:	6023      	str	r3, [r4, #0]
 800906e:	bd38      	pop	{r3, r4, r5, pc}
 8009070:	20001274 	.word	0x20001274
 8009074:	00000000 	.word	0x00000000

08009078 <log>:
 8009078:	b538      	push	{r3, r4, r5, lr}
 800907a:	ed2d 8b02 	vpush	{d8}
 800907e:	ec55 4b10 	vmov	r4, r5, d0
 8009082:	f000 f841 	bl	8009108 <__ieee754_log>
 8009086:	4622      	mov	r2, r4
 8009088:	462b      	mov	r3, r5
 800908a:	4620      	mov	r0, r4
 800908c:	4629      	mov	r1, r5
 800908e:	eeb0 8a40 	vmov.f32	s16, s0
 8009092:	eef0 8a60 	vmov.f32	s17, s1
 8009096:	f7f7 fd51 	bl	8000b3c <__aeabi_dcmpun>
 800909a:	b998      	cbnz	r0, 80090c4 <log+0x4c>
 800909c:	2200      	movs	r2, #0
 800909e:	2300      	movs	r3, #0
 80090a0:	4620      	mov	r0, r4
 80090a2:	4629      	mov	r1, r5
 80090a4:	f7f7 fd40 	bl	8000b28 <__aeabi_dcmpgt>
 80090a8:	b960      	cbnz	r0, 80090c4 <log+0x4c>
 80090aa:	2200      	movs	r2, #0
 80090ac:	2300      	movs	r3, #0
 80090ae:	4620      	mov	r0, r4
 80090b0:	4629      	mov	r1, r5
 80090b2:	f7f7 fd11 	bl	8000ad8 <__aeabi_dcmpeq>
 80090b6:	b160      	cbz	r0, 80090d2 <log+0x5a>
 80090b8:	f7fd ff60 	bl	8006f7c <__errno>
 80090bc:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 80090e8 <log+0x70>
 80090c0:	2322      	movs	r3, #34	@ 0x22
 80090c2:	6003      	str	r3, [r0, #0]
 80090c4:	eeb0 0a48 	vmov.f32	s0, s16
 80090c8:	eef0 0a68 	vmov.f32	s1, s17
 80090cc:	ecbd 8b02 	vpop	{d8}
 80090d0:	bd38      	pop	{r3, r4, r5, pc}
 80090d2:	f7fd ff53 	bl	8006f7c <__errno>
 80090d6:	ecbd 8b02 	vpop	{d8}
 80090da:	2321      	movs	r3, #33	@ 0x21
 80090dc:	6003      	str	r3, [r0, #0]
 80090de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80090e2:	4803      	ldr	r0, [pc, #12]	@ (80090f0 <log+0x78>)
 80090e4:	f000 b808 	b.w	80090f8 <nan>
 80090e8:	00000000 	.word	0x00000000
 80090ec:	fff00000 	.word	0xfff00000
 80090f0:	08009d84 	.word	0x08009d84
 80090f4:	00000000 	.word	0x00000000

080090f8 <nan>:
 80090f8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009100 <nan+0x8>
 80090fc:	4770      	bx	lr
 80090fe:	bf00      	nop
 8009100:	00000000 	.word	0x00000000
 8009104:	7ff80000 	.word	0x7ff80000

08009108 <__ieee754_log>:
 8009108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800910c:	ec51 0b10 	vmov	r0, r1, d0
 8009110:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8009114:	b087      	sub	sp, #28
 8009116:	460d      	mov	r5, r1
 8009118:	da26      	bge.n	8009168 <__ieee754_log+0x60>
 800911a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800911e:	4303      	orrs	r3, r0
 8009120:	4602      	mov	r2, r0
 8009122:	d10a      	bne.n	800913a <__ieee754_log+0x32>
 8009124:	49ce      	ldr	r1, [pc, #824]	@ (8009460 <__ieee754_log+0x358>)
 8009126:	2200      	movs	r2, #0
 8009128:	2300      	movs	r3, #0
 800912a:	2000      	movs	r0, #0
 800912c:	f7f7 fb96 	bl	800085c <__aeabi_ddiv>
 8009130:	ec41 0b10 	vmov	d0, r0, r1
 8009134:	b007      	add	sp, #28
 8009136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800913a:	2900      	cmp	r1, #0
 800913c:	da05      	bge.n	800914a <__ieee754_log+0x42>
 800913e:	460b      	mov	r3, r1
 8009140:	f7f7 f8aa 	bl	8000298 <__aeabi_dsub>
 8009144:	2200      	movs	r2, #0
 8009146:	2300      	movs	r3, #0
 8009148:	e7f0      	b.n	800912c <__ieee754_log+0x24>
 800914a:	4bc6      	ldr	r3, [pc, #792]	@ (8009464 <__ieee754_log+0x35c>)
 800914c:	2200      	movs	r2, #0
 800914e:	f7f7 fa5b 	bl	8000608 <__aeabi_dmul>
 8009152:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 8009156:	460d      	mov	r5, r1
 8009158:	4ac3      	ldr	r2, [pc, #780]	@ (8009468 <__ieee754_log+0x360>)
 800915a:	4295      	cmp	r5, r2
 800915c:	dd06      	ble.n	800916c <__ieee754_log+0x64>
 800915e:	4602      	mov	r2, r0
 8009160:	460b      	mov	r3, r1
 8009162:	f7f7 f89b 	bl	800029c <__adddf3>
 8009166:	e7e3      	b.n	8009130 <__ieee754_log+0x28>
 8009168:	2300      	movs	r3, #0
 800916a:	e7f5      	b.n	8009158 <__ieee754_log+0x50>
 800916c:	152c      	asrs	r4, r5, #20
 800916e:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 8009172:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8009176:	441c      	add	r4, r3
 8009178:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 800917c:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 8009180:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009184:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 8009188:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 800918c:	ea42 0105 	orr.w	r1, r2, r5
 8009190:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8009194:	2200      	movs	r2, #0
 8009196:	4bb5      	ldr	r3, [pc, #724]	@ (800946c <__ieee754_log+0x364>)
 8009198:	f7f7 f87e 	bl	8000298 <__aeabi_dsub>
 800919c:	1cab      	adds	r3, r5, #2
 800919e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80091a2:	2b02      	cmp	r3, #2
 80091a4:	4682      	mov	sl, r0
 80091a6:	468b      	mov	fp, r1
 80091a8:	f04f 0200 	mov.w	r2, #0
 80091ac:	dc53      	bgt.n	8009256 <__ieee754_log+0x14e>
 80091ae:	2300      	movs	r3, #0
 80091b0:	f7f7 fc92 	bl	8000ad8 <__aeabi_dcmpeq>
 80091b4:	b1d0      	cbz	r0, 80091ec <__ieee754_log+0xe4>
 80091b6:	2c00      	cmp	r4, #0
 80091b8:	f000 8120 	beq.w	80093fc <__ieee754_log+0x2f4>
 80091bc:	4620      	mov	r0, r4
 80091be:	f7f7 f9b9 	bl	8000534 <__aeabi_i2d>
 80091c2:	a391      	add	r3, pc, #580	@ (adr r3, 8009408 <__ieee754_log+0x300>)
 80091c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091c8:	4606      	mov	r6, r0
 80091ca:	460f      	mov	r7, r1
 80091cc:	f7f7 fa1c 	bl	8000608 <__aeabi_dmul>
 80091d0:	a38f      	add	r3, pc, #572	@ (adr r3, 8009410 <__ieee754_log+0x308>)
 80091d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091d6:	4604      	mov	r4, r0
 80091d8:	460d      	mov	r5, r1
 80091da:	4630      	mov	r0, r6
 80091dc:	4639      	mov	r1, r7
 80091de:	f7f7 fa13 	bl	8000608 <__aeabi_dmul>
 80091e2:	4602      	mov	r2, r0
 80091e4:	460b      	mov	r3, r1
 80091e6:	4620      	mov	r0, r4
 80091e8:	4629      	mov	r1, r5
 80091ea:	e7ba      	b.n	8009162 <__ieee754_log+0x5a>
 80091ec:	a38a      	add	r3, pc, #552	@ (adr r3, 8009418 <__ieee754_log+0x310>)
 80091ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091f2:	4650      	mov	r0, sl
 80091f4:	4659      	mov	r1, fp
 80091f6:	f7f7 fa07 	bl	8000608 <__aeabi_dmul>
 80091fa:	4602      	mov	r2, r0
 80091fc:	460b      	mov	r3, r1
 80091fe:	2000      	movs	r0, #0
 8009200:	499b      	ldr	r1, [pc, #620]	@ (8009470 <__ieee754_log+0x368>)
 8009202:	f7f7 f849 	bl	8000298 <__aeabi_dsub>
 8009206:	4652      	mov	r2, sl
 8009208:	4606      	mov	r6, r0
 800920a:	460f      	mov	r7, r1
 800920c:	465b      	mov	r3, fp
 800920e:	4650      	mov	r0, sl
 8009210:	4659      	mov	r1, fp
 8009212:	f7f7 f9f9 	bl	8000608 <__aeabi_dmul>
 8009216:	4602      	mov	r2, r0
 8009218:	460b      	mov	r3, r1
 800921a:	4630      	mov	r0, r6
 800921c:	4639      	mov	r1, r7
 800921e:	f7f7 f9f3 	bl	8000608 <__aeabi_dmul>
 8009222:	4606      	mov	r6, r0
 8009224:	460f      	mov	r7, r1
 8009226:	b914      	cbnz	r4, 800922e <__ieee754_log+0x126>
 8009228:	4632      	mov	r2, r6
 800922a:	463b      	mov	r3, r7
 800922c:	e0a0      	b.n	8009370 <__ieee754_log+0x268>
 800922e:	4620      	mov	r0, r4
 8009230:	f7f7 f980 	bl	8000534 <__aeabi_i2d>
 8009234:	a374      	add	r3, pc, #464	@ (adr r3, 8009408 <__ieee754_log+0x300>)
 8009236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800923a:	4680      	mov	r8, r0
 800923c:	4689      	mov	r9, r1
 800923e:	f7f7 f9e3 	bl	8000608 <__aeabi_dmul>
 8009242:	a373      	add	r3, pc, #460	@ (adr r3, 8009410 <__ieee754_log+0x308>)
 8009244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009248:	4604      	mov	r4, r0
 800924a:	460d      	mov	r5, r1
 800924c:	4640      	mov	r0, r8
 800924e:	4649      	mov	r1, r9
 8009250:	f7f7 f9da 	bl	8000608 <__aeabi_dmul>
 8009254:	e0a5      	b.n	80093a2 <__ieee754_log+0x29a>
 8009256:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800925a:	f7f7 f81f 	bl	800029c <__adddf3>
 800925e:	4602      	mov	r2, r0
 8009260:	460b      	mov	r3, r1
 8009262:	4650      	mov	r0, sl
 8009264:	4659      	mov	r1, fp
 8009266:	f7f7 faf9 	bl	800085c <__aeabi_ddiv>
 800926a:	e9cd 0100 	strd	r0, r1, [sp]
 800926e:	4620      	mov	r0, r4
 8009270:	f7f7 f960 	bl	8000534 <__aeabi_i2d>
 8009274:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009278:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800927c:	4610      	mov	r0, r2
 800927e:	4619      	mov	r1, r3
 8009280:	f7f7 f9c2 	bl	8000608 <__aeabi_dmul>
 8009284:	4602      	mov	r2, r0
 8009286:	460b      	mov	r3, r1
 8009288:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800928c:	f7f7 f9bc 	bl	8000608 <__aeabi_dmul>
 8009290:	a363      	add	r3, pc, #396	@ (adr r3, 8009420 <__ieee754_log+0x318>)
 8009292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009296:	4680      	mov	r8, r0
 8009298:	4689      	mov	r9, r1
 800929a:	f7f7 f9b5 	bl	8000608 <__aeabi_dmul>
 800929e:	a362      	add	r3, pc, #392	@ (adr r3, 8009428 <__ieee754_log+0x320>)
 80092a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092a4:	f7f6 fffa 	bl	800029c <__adddf3>
 80092a8:	4642      	mov	r2, r8
 80092aa:	464b      	mov	r3, r9
 80092ac:	f7f7 f9ac 	bl	8000608 <__aeabi_dmul>
 80092b0:	a35f      	add	r3, pc, #380	@ (adr r3, 8009430 <__ieee754_log+0x328>)
 80092b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b6:	f7f6 fff1 	bl	800029c <__adddf3>
 80092ba:	4642      	mov	r2, r8
 80092bc:	464b      	mov	r3, r9
 80092be:	f7f7 f9a3 	bl	8000608 <__aeabi_dmul>
 80092c2:	a35d      	add	r3, pc, #372	@ (adr r3, 8009438 <__ieee754_log+0x330>)
 80092c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092c8:	f7f6 ffe8 	bl	800029c <__adddf3>
 80092cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80092d0:	f7f7 f99a 	bl	8000608 <__aeabi_dmul>
 80092d4:	a35a      	add	r3, pc, #360	@ (adr r3, 8009440 <__ieee754_log+0x338>)
 80092d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092da:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80092de:	4640      	mov	r0, r8
 80092e0:	4649      	mov	r1, r9
 80092e2:	f7f7 f991 	bl	8000608 <__aeabi_dmul>
 80092e6:	a358      	add	r3, pc, #352	@ (adr r3, 8009448 <__ieee754_log+0x340>)
 80092e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ec:	f7f6 ffd6 	bl	800029c <__adddf3>
 80092f0:	4642      	mov	r2, r8
 80092f2:	464b      	mov	r3, r9
 80092f4:	f7f7 f988 	bl	8000608 <__aeabi_dmul>
 80092f8:	a355      	add	r3, pc, #340	@ (adr r3, 8009450 <__ieee754_log+0x348>)
 80092fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092fe:	f7f6 ffcd 	bl	800029c <__adddf3>
 8009302:	4642      	mov	r2, r8
 8009304:	464b      	mov	r3, r9
 8009306:	f7f7 f97f 	bl	8000608 <__aeabi_dmul>
 800930a:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 800930e:	4602      	mov	r2, r0
 8009310:	460b      	mov	r3, r1
 8009312:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 8009316:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800931a:	f7f6 ffbf 	bl	800029c <__adddf3>
 800931e:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 8009322:	3551      	adds	r5, #81	@ 0x51
 8009324:	4335      	orrs	r5, r6
 8009326:	2d00      	cmp	r5, #0
 8009328:	4680      	mov	r8, r0
 800932a:	4689      	mov	r9, r1
 800932c:	dd48      	ble.n	80093c0 <__ieee754_log+0x2b8>
 800932e:	4b50      	ldr	r3, [pc, #320]	@ (8009470 <__ieee754_log+0x368>)
 8009330:	2200      	movs	r2, #0
 8009332:	4650      	mov	r0, sl
 8009334:	4659      	mov	r1, fp
 8009336:	f7f7 f967 	bl	8000608 <__aeabi_dmul>
 800933a:	4652      	mov	r2, sl
 800933c:	465b      	mov	r3, fp
 800933e:	f7f7 f963 	bl	8000608 <__aeabi_dmul>
 8009342:	4602      	mov	r2, r0
 8009344:	460b      	mov	r3, r1
 8009346:	4606      	mov	r6, r0
 8009348:	460f      	mov	r7, r1
 800934a:	4640      	mov	r0, r8
 800934c:	4649      	mov	r1, r9
 800934e:	f7f6 ffa5 	bl	800029c <__adddf3>
 8009352:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009356:	f7f7 f957 	bl	8000608 <__aeabi_dmul>
 800935a:	4680      	mov	r8, r0
 800935c:	4689      	mov	r9, r1
 800935e:	b964      	cbnz	r4, 800937a <__ieee754_log+0x272>
 8009360:	4602      	mov	r2, r0
 8009362:	460b      	mov	r3, r1
 8009364:	4630      	mov	r0, r6
 8009366:	4639      	mov	r1, r7
 8009368:	f7f6 ff96 	bl	8000298 <__aeabi_dsub>
 800936c:	4602      	mov	r2, r0
 800936e:	460b      	mov	r3, r1
 8009370:	4650      	mov	r0, sl
 8009372:	4659      	mov	r1, fp
 8009374:	f7f6 ff90 	bl	8000298 <__aeabi_dsub>
 8009378:	e6da      	b.n	8009130 <__ieee754_log+0x28>
 800937a:	a323      	add	r3, pc, #140	@ (adr r3, 8009408 <__ieee754_log+0x300>)
 800937c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009380:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009384:	f7f7 f940 	bl	8000608 <__aeabi_dmul>
 8009388:	a321      	add	r3, pc, #132	@ (adr r3, 8009410 <__ieee754_log+0x308>)
 800938a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800938e:	4604      	mov	r4, r0
 8009390:	460d      	mov	r5, r1
 8009392:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009396:	f7f7 f937 	bl	8000608 <__aeabi_dmul>
 800939a:	4642      	mov	r2, r8
 800939c:	464b      	mov	r3, r9
 800939e:	f7f6 ff7d 	bl	800029c <__adddf3>
 80093a2:	4602      	mov	r2, r0
 80093a4:	460b      	mov	r3, r1
 80093a6:	4630      	mov	r0, r6
 80093a8:	4639      	mov	r1, r7
 80093aa:	f7f6 ff75 	bl	8000298 <__aeabi_dsub>
 80093ae:	4652      	mov	r2, sl
 80093b0:	465b      	mov	r3, fp
 80093b2:	f7f6 ff71 	bl	8000298 <__aeabi_dsub>
 80093b6:	4602      	mov	r2, r0
 80093b8:	460b      	mov	r3, r1
 80093ba:	4620      	mov	r0, r4
 80093bc:	4629      	mov	r1, r5
 80093be:	e7d9      	b.n	8009374 <__ieee754_log+0x26c>
 80093c0:	4602      	mov	r2, r0
 80093c2:	460b      	mov	r3, r1
 80093c4:	4650      	mov	r0, sl
 80093c6:	4659      	mov	r1, fp
 80093c8:	f7f6 ff66 	bl	8000298 <__aeabi_dsub>
 80093cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80093d0:	f7f7 f91a 	bl	8000608 <__aeabi_dmul>
 80093d4:	4606      	mov	r6, r0
 80093d6:	460f      	mov	r7, r1
 80093d8:	2c00      	cmp	r4, #0
 80093da:	f43f af25 	beq.w	8009228 <__ieee754_log+0x120>
 80093de:	a30a      	add	r3, pc, #40	@ (adr r3, 8009408 <__ieee754_log+0x300>)
 80093e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093e8:	f7f7 f90e 	bl	8000608 <__aeabi_dmul>
 80093ec:	a308      	add	r3, pc, #32	@ (adr r3, 8009410 <__ieee754_log+0x308>)
 80093ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093f2:	4604      	mov	r4, r0
 80093f4:	460d      	mov	r5, r1
 80093f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093fa:	e729      	b.n	8009250 <__ieee754_log+0x148>
 80093fc:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8009458 <__ieee754_log+0x350>
 8009400:	e698      	b.n	8009134 <__ieee754_log+0x2c>
 8009402:	bf00      	nop
 8009404:	f3af 8000 	nop.w
 8009408:	fee00000 	.word	0xfee00000
 800940c:	3fe62e42 	.word	0x3fe62e42
 8009410:	35793c76 	.word	0x35793c76
 8009414:	3dea39ef 	.word	0x3dea39ef
 8009418:	55555555 	.word	0x55555555
 800941c:	3fd55555 	.word	0x3fd55555
 8009420:	df3e5244 	.word	0xdf3e5244
 8009424:	3fc2f112 	.word	0x3fc2f112
 8009428:	96cb03de 	.word	0x96cb03de
 800942c:	3fc74664 	.word	0x3fc74664
 8009430:	94229359 	.word	0x94229359
 8009434:	3fd24924 	.word	0x3fd24924
 8009438:	55555593 	.word	0x55555593
 800943c:	3fe55555 	.word	0x3fe55555
 8009440:	d078c69f 	.word	0xd078c69f
 8009444:	3fc39a09 	.word	0x3fc39a09
 8009448:	1d8e78af 	.word	0x1d8e78af
 800944c:	3fcc71c5 	.word	0x3fcc71c5
 8009450:	9997fa04 	.word	0x9997fa04
 8009454:	3fd99999 	.word	0x3fd99999
	...
 8009460:	c3500000 	.word	0xc3500000
 8009464:	43500000 	.word	0x43500000
 8009468:	7fefffff 	.word	0x7fefffff
 800946c:	3ff00000 	.word	0x3ff00000
 8009470:	3fe00000 	.word	0x3fe00000

08009474 <_init>:
 8009474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009476:	bf00      	nop
 8009478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800947a:	bc08      	pop	{r3}
 800947c:	469e      	mov	lr, r3
 800947e:	4770      	bx	lr

08009480 <_fini>:
 8009480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009482:	bf00      	nop
 8009484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009486:	bc08      	pop	{r3}
 8009488:	469e      	mov	lr, r3
 800948a:	4770      	bx	lr
